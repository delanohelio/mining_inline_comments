{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTg4MjA3", "number": 2448, "title": "Handle null params in Spring Data Spanner", "bodyText": "fixes #2443", "createdAt": "2020-06-22T21:31:26Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448", "merged": true, "mergeCommit": {"oid": "60c6f29dc4f8c782af2000eb9b2a74849d5f9b64"}, "closed": true, "closedAt": "2020-06-25T21:04:45Z", "author": {"login": "dmitry-s"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABct3wEAgH2gAyNDM4MTg4MjA3OjhmNmQ3ZGIxMGRmYzVkNzc4M2JkODQ1ZGM3NDFmYTczYjJlMzAxNjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu1CItAFqTQzNzg1MDc5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8f6d7db10dfc5d7783bd845dc741fa73b2e30166", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8f6d7db10dfc5d7783bd845dc741fa73b2e30166", "committedDate": "2020-06-22T21:29:57Z", "message": "handle null params"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzQwMDg1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448#pullrequestreview-435340085", "createdAt": "2020-06-22T23:26:16Z", "commit": {"oid": "8f6d7db10dfc5d7783bd845dc741fa73b2e30166"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoyNjoxNlrOGnUKsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzozMDoxOVrOGnUPIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3ODA2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t@Test\n          \n          \n            \n            \t@Test", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448#discussion_r443878065", "createdAt": "2020-06-22T23:26:16Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryInsertIntegrationTests.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.it;\n+\n+import java.util.Collections;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.gcp.data.spanner.core.SpannerTemplate;\n+import org.springframework.cloud.gcp.data.spanner.core.admin.SpannerDatabaseAdminTemplate;\n+import org.springframework.cloud.gcp.data.spanner.core.admin.SpannerSchemaUtils;\n+import org.springframework.cloud.gcp.data.spanner.test.IntegrationTestConfiguration;\n+import org.springframework.cloud.gcp.data.spanner.test.domain.Singer;\n+import org.springframework.cloud.gcp.data.spanner.test.domain.SingerRepository;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Integration tests for Spanner Repository.\n+ *\n+ */\n+@RunWith(SpringRunner.class)\n+@ContextConfiguration(classes = { IntegrationTestConfiguration.class })\n+public class SpannerRepositoryInsertIntegrationTests {\n+\n+\t@Autowired\n+\tSingerRepository singerRepository;\n+\n+\t@Autowired\n+\tSpannerTemplate spannerTemplate;\n+\n+\t@Autowired\n+\tprotected SpannerSchemaUtils spannerSchemaUtils;\n+\n+\t@Autowired\n+\tSpannerDatabaseAdminTemplate spannerDatabaseAdminTemplate;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tif (!this.spannerDatabaseAdminTemplate.tableExists(\"singers_list\")) {\n+\t\t\tthis.spannerDatabaseAdminTemplate.executeDdlStrings(\n+\t\t\t\t\t\t\tCollections.singleton(this.spannerSchemaUtils.getCreateTableDdlString(Singer.class)),\n+\t\t\t\t\t\t\ttrue);\n+\t\t}\n+\t\tthis.singerRepository.deleteAll();\n+\t}\n+\n+\t@After\n+\tpublic void clearData() {\n+\t\tthis.singerRepository.deleteAll();\n+\t}\n+\n+\t\t@Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6d7db10dfc5d7783bd845dc741fa73b2e30166"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3OTIwMQ==", "bodyText": "Can you add a comment here about how you need to know the type of the parameter (even if you bind null) which is why the type information is relevant for null?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448#discussion_r443879201", "createdAt": "2020-06-22T23:30:19Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -361,7 +361,8 @@ public static Statement buildStatementFromSqlWithArgs(String sql, List<String> t\n \tprivate static void bindParameter(ValueBinder<Statement.Builder> bind,\n \t\t\tFunction<Object, Struct> paramStructConvertFunc, SpannerCustomConverter spannerCustomConverter,\n \t\t\tObject originalParam, Parameter paramMetadata) {\n-\t\tif (ConversionUtils.isIterableNonByteArrayType(originalParam.getClass())) {\n+\t\tClass propType = originalParam != null ? originalParam.getClass() : paramMetadata.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6d7db10dfc5d7783bd845dc741fa73b2e30166"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NzkyNzI5", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448#pullrequestreview-435792729", "createdAt": "2020-06-23T13:40:20Z", "commit": {"oid": "8f6d7db10dfc5d7783bd845dc741fa73b2e30166"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo0MDoyMFrOGnpweA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo0MDoyMFrOGnpweA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzMTgwMA==", "bodyText": "What's replacing these 3 tests that you deleted?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448#discussion_r444231800", "createdAt": "2020-06-23T13:40:20Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlSpannerQueryTests.java", "diffHunk": "@@ -426,72 +365,18 @@ public void compoundNameConventionTest() throws NoSuchMethodException {\n \n \t\t// This dummy method was created so the metadata for the ARRAY param inner type is\n \t\t// provided.\n-\t\tMethod method = QueryHolder.class.getMethod(\"dummyMethod\", Object.class, Object.class, Object.class,\n+\t\tMethod method = QueryHolder.class.getMethod(\"dummyMethod\", Object.class, Pageable.class, Object.class,\n \t\t\t\tObject.class, Object.class, Object.class, Object.class, Object.class, Object.class, Object.class,\n \t\t\t\tObject.class, List.class);\n \t\twhen(this.queryMethod.getMethod()).thenReturn(method);\n-\n+\t\tMockito.<Parameters>when(this.queryMethod.getParameters()).thenReturn(new DefaultParameters(method));\n \t\tsqlSpannerQuery.execute(params);\n \n \t\tverify(this.spannerTemplate, times(1)).executeQuery(any(), any());\n \t}\n \n \t@Test\n-\tpublic void multiplePageableSortTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6d7db10dfc5d7783bd845dc741fa73b2e30166"}, "originalPosition": 177}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c677b3afbf5efc19ed173af8af28a46afdd4223", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2c677b3afbf5efc19ed173af8af28a46afdd4223", "committedDate": "2020-06-23T17:16:36Z", "message": "Update spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryInsertIntegrationTests.java\n\nCo-authored-by: Daniel Zou <dzou@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d12ab3a5fbfb4690749eb176b7f941ce0a58e65", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6d12ab3a5fbfb4690749eb176b7f941ce0a58e65", "committedDate": "2020-06-23T17:25:59Z", "message": "PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjU2MTE3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448#pullrequestreview-436256117", "createdAt": "2020-06-24T01:01:40Z", "commit": {"oid": "6d12ab3a5fbfb4690749eb176b7f941ce0a58e65"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98351d3c3cce72b7bfabbfc5f2c6bad74caa5116", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/98351d3c3cce72b7bfabbfc5f2c6bad74caa5116", "committedDate": "2020-06-25T20:38:17Z", "message": "guard IT test by it.spanner"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODUwNzkw", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448#pullrequestreview-437850790", "createdAt": "2020-06-25T20:53:54Z", "commit": {"oid": "98351d3c3cce72b7bfabbfc5f2c6bad74caa5116"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 487, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}