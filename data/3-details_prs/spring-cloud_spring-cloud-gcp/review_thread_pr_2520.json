{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0NTg5MDg1", "number": 2520, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyMDo0OFrOEiinMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjowMDo1OVrOEimffw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjU0MTMwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/GcpPubSubAutoConfigurationTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyMDo0OFrOHQekfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1NToxNFrOHQf4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MDEyNw==", "bodyText": "define a 20MB constant maybe? Bit shifting is a bit obfuscated.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2520#discussion_r487040127", "createdAt": "2020-09-11T13:20:48Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/GcpPubSubAutoConfigurationTests.java", "diffHunk": "@@ -64,12 +69,33 @@ public void keepAliveValue_custom() {\n \t\t\tGcpPubSubProperties props = ctx.getBean(GcpPubSubProperties.class);\n \t\t\tassertThat(props.getKeepAliveIntervalMinutes()).isEqualTo(2);\n \n-\t\t\tTransportChannelProvider tcp = ctx.getBean(TransportChannelProvider.class);\n-\t\t\tassertThat(((InstantiatingGrpcChannelProvider) tcp).getKeepAliveTime().toMinutes())\n+\t\t\tTransportChannelProvider subscriberTcp = ctx.getBean(\"subscriberTransportChannelProvider\", TransportChannelProvider.class);\n+\t\t\tTransportChannelProvider publisherTcp = ctx.getBean(\"publisherTransportChannelProvider\", TransportChannelProvider.class);\n+\t\t\tassertThat(((InstantiatingGrpcChannelProvider) subscriberTcp).getKeepAliveTime().toMinutes())\n+\t\t\t\t\t.isEqualTo(2);\n+\t\t\tassertThat(((InstantiatingGrpcChannelProvider) publisherTcp).getKeepAliveTime().toMinutes())\n \t\t\t\t\t.isEqualTo(2);\n \t\t});\n \t}\n \n+\t@Test\n+\tpublic void maxInboundMessageSize_default() {\n+\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(GcpPubSubAutoConfiguration.class))\n+\t\t\t\t.withUserConfiguration(TestConfig.class);\n+\n+\t\tcontextRunner.run(ctx -> {\n+\n+\t\t\tTransportChannelProvider subscriberTcp = ctx.getBean(\"subscriberTransportChannelProvider\", TransportChannelProvider.class);\n+\t\t\tassertThat(FieldUtils.readField(subscriberTcp, \"maxInboundMessageSize\", true))\n+\t\t\t\t\t.isEqualTo(20 << 20);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893794f0f18d493eea05769c1f3ad04e6ec6427"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2MTU1NA==", "bodyText": "It's a copy-paste from the client library.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2520#discussion_r487061554", "createdAt": "2020-09-11T13:55:14Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/GcpPubSubAutoConfigurationTests.java", "diffHunk": "@@ -64,12 +69,33 @@ public void keepAliveValue_custom() {\n \t\t\tGcpPubSubProperties props = ctx.getBean(GcpPubSubProperties.class);\n \t\t\tassertThat(props.getKeepAliveIntervalMinutes()).isEqualTo(2);\n \n-\t\t\tTransportChannelProvider tcp = ctx.getBean(TransportChannelProvider.class);\n-\t\t\tassertThat(((InstantiatingGrpcChannelProvider) tcp).getKeepAliveTime().toMinutes())\n+\t\t\tTransportChannelProvider subscriberTcp = ctx.getBean(\"subscriberTransportChannelProvider\", TransportChannelProvider.class);\n+\t\t\tTransportChannelProvider publisherTcp = ctx.getBean(\"publisherTransportChannelProvider\", TransportChannelProvider.class);\n+\t\t\tassertThat(((InstantiatingGrpcChannelProvider) subscriberTcp).getKeepAliveTime().toMinutes())\n+\t\t\t\t\t.isEqualTo(2);\n+\t\t\tassertThat(((InstantiatingGrpcChannelProvider) publisherTcp).getKeepAliveTime().toMinutes())\n \t\t\t\t\t.isEqualTo(2);\n \t\t});\n \t}\n \n+\t@Test\n+\tpublic void maxInboundMessageSize_default() {\n+\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(GcpPubSubAutoConfiguration.class))\n+\t\t\t\t.withUserConfiguration(TestConfig.class);\n+\n+\t\tcontextRunner.run(ctx -> {\n+\n+\t\t\tTransportChannelProvider subscriberTcp = ctx.getBean(\"subscriberTransportChannelProvider\", TransportChannelProvider.class);\n+\t\t\tassertThat(FieldUtils.readField(subscriberTcp, \"maxInboundMessageSize\", true))\n+\t\t\t\t\t.isEqualTo(20 << 20);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MDEyNw=="}, "originalCommit": {"oid": "4893794f0f18d493eea05769c1f3ad04e6ec6427"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzE3Njk1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/pubsub/GcpPubSubAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjowMDo1OVrOHQkvCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjowNzo1MVrOHQk-Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0MTEzMA==", "bodyText": "I wonder if admin functionality should have its own. The most obvious usecase is needing different credentials for admin operations.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2520#discussion_r487141130", "createdAt": "2020-09-11T16:00:59Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/pubsub/GcpPubSubAutoConfiguration.java", "diffHunk": "@@ -352,12 +353,12 @@ public TopicAdminClient topicAdminClient(\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic TopicAdminSettings topicAdminSettings(\n-\t\t\tTransportChannelProvider transportChannelProvider) {\n+\t\t\t@Qualifier(\"publisherTransportChannelProvider\") TransportChannelProvider publisherTransportChannelProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861f199ed9481f5b0b3d44bc0c9266dfced13b1f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NDk4Mg==", "bodyText": "I thought that too, but I saw that they use exactly the same default for admin client.\nhttps://github.com/googleapis/java-pubsub/blob/8cf77ee3b31356f342942a9ffaa61db2d0686769/google-cloud-pubsub/src/main/java/com/google/cloud/pubsub/v1/SubscriptionAdminSettings.java#L227", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2520#discussion_r487144982", "createdAt": "2020-09-11T16:07:51Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/pubsub/GcpPubSubAutoConfiguration.java", "diffHunk": "@@ -352,12 +353,12 @@ public TopicAdminClient topicAdminClient(\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic TopicAdminSettings topicAdminSettings(\n-\t\t\tTransportChannelProvider transportChannelProvider) {\n+\t\t\t@Qualifier(\"publisherTransportChannelProvider\") TransportChannelProvider publisherTransportChannelProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0MTEzMA=="}, "originalCommit": {"oid": "861f199ed9481f5b0b3d44bc0c9266dfced13b1f"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2055, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}