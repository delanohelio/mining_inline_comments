{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjE2Mjgy", "number": 2223, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzoyNjozMVrODj_6qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToyMToxNVrODkZFBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDczOTYxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerTemplateConfiguration.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzoyNjozMVrOFwHXFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxOToxNlrOFwr_3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjU2NQ==", "bodyText": "I'm having second thoughts on the separation of the template from the bootstrap configuration. The main reason being that we wanted to re-use the template in the property source implementation, and currently we don't. If we do create the SecretManagerTemplate in the boostrap, does it remain accessible to the application context? If so, I'm not sure of what the benefit would be of this separate configuration class.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2223#discussion_r385996565", "createdAt": "2020-02-29T03:26:31Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerTemplateConfiguration.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.cloud.gcp.secretmanager.SecretManagerTemplate;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Autoconfiguration for GCP Secret Manager which provides an instance of the\n+ * {@link SecretManagerTemplate}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.2\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.template.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerTemplateConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8cc811db7a0281a884dbe149fb8b2ae943a1e8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NzE2NA==", "bodyText": "Also, do we want to support the use-case where someone doesn't want to use bootstrap properties but wants to use the template?\nSince loading secrets into the application context inadvertently may be risky, maybe we should even disable it by default, and the only thing you get with the starter by default, would be the template.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2223#discussion_r385997164", "createdAt": "2020-02-29T03:37:57Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerTemplateConfiguration.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.cloud.gcp.secretmanager.SecretManagerTemplate;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Autoconfiguration for GCP Secret Manager which provides an instance of the\n+ * {@link SecretManagerTemplate}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.2\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.template.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerTemplateConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjU2NQ=="}, "originalCommit": {"oid": "ae8cc811db7a0281a884dbe149fb8b2ae943a1e8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NjQ1OA==", "bodyText": "Right, I created two separate configurations in order to support the use-case where someone doesn't want to use bootstrap properties but wants to use the template. The would be able to choose which one to disable using @ConditionalOnProperty.\nIf you want the template in the property source impl, I can add an additional @ConditionalOnMissingBean SecretManagerTemplate to the bootstrap config. Then disable the bootstrap config by default?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2223#discussion_r386476458", "createdAt": "2020-03-02T15:50:47Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerTemplateConfiguration.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.cloud.gcp.secretmanager.SecretManagerTemplate;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Autoconfiguration for GCP Secret Manager which provides an instance of the\n+ * {@link SecretManagerTemplate}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.2\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.template.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerTemplateConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjU2NQ=="}, "originalCommit": {"oid": "ae8cc811db7a0281a884dbe149fb8b2ae943a1e8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5NjgzMQ==", "bodyText": "Resolved offline; see #2223 (comment)", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2223#discussion_r386596831", "createdAt": "2020-03-02T19:19:16Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerTemplateConfiguration.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.cloud.gcp.secretmanager.SecretManagerTemplate;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Autoconfiguration for GCP Secret Manager which provides an instance of the\n+ * {@link SecretManagerTemplate}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.2\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.template.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerTemplateConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjU2NQ=="}, "originalCommit": {"oid": "ae8cc811db7a0281a884dbe149fb8b2ae943a1e8"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA2NzA4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerTemplateConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NDo1OVrOFwkZjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxODo1MFrOFwr_CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjMzMg==", "bodyText": "GcpSecretManagerTemplateConfiguration and GcpSecretManagerBootstrapConfiguration end up being somewhat similar.\nI guess it's related to Mike's comment above, but possibly we should have one autoconfiguration with an optional conversion bean/property source additions that are blocked by an extra, off-by-default, property?\nIs there any harm in doing regular bean initialization during bootstrap phase if someone does opt for template-only without enabling property initialization?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2223#discussion_r386472332", "createdAt": "2020-03-02T15:44:59Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerTemplateConfiguration.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.cloud.gcp.secretmanager.SecretManagerTemplate;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Autoconfiguration for GCP Secret Manager which provides an instance of the\n+ * {@link SecretManagerTemplate}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.2\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.template.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerTemplateConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerTemplateConfiguration(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8cc811db7a0281a884dbe149fb8b2ae943a1e8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3ODU3OQ==", "bodyText": "Ohh I see, yes we can keep all beans in one configuration. I just created two because I wasn't sure if you could activate/deactivate beans by property as well.\nSo I could add a @ConditionalOnProperty to a bean definition?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2223#discussion_r386478579", "createdAt": "2020-03-02T15:53:43Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerTemplateConfiguration.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.cloud.gcp.secretmanager.SecretManagerTemplate;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Autoconfiguration for GCP Secret Manager which provides an instance of the\n+ * {@link SecretManagerTemplate}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.2\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.template.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerTemplateConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerTemplateConfiguration(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjMzMg=="}, "originalCommit": {"oid": "ae8cc811db7a0281a884dbe149fb8b2ae943a1e8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5NjYxNg==", "bodyText": "Discussed offline with @meltsufin; see: #2223 (comment)", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2223#discussion_r386596616", "createdAt": "2020-03-02T19:18:50Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerTemplateConfiguration.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.cloud.gcp.secretmanager.SecretManagerTemplate;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Autoconfiguration for GCP Secret Manager which provides an instance of the\n+ * {@link SecretManagerTemplate}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.2\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.template.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerTemplateConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerTemplateConfiguration(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjMzMg=="}, "originalCommit": {"oid": "ae8cc811db7a0281a884dbe149fb8b2ae943a1e8"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDg1MTIyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/templates/index.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxODowNVrOFwr9gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTozNjoxMFrOFwskCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5NjIyNA==", "bodyText": "The secret blends into the sentence. Maybe emphasize it a bit more?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <br/>application-secret: [[${applicationSecret}]]\n          \n          \n            \n              <br/><b>application-secret:</b> <i>[[${applicationSecret}]]</i>", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2223#discussion_r386596224", "createdAt": "2020-03-02T19:18:05Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/templates/index.html", "diffHunk": "@@ -0,0 +1,98 @@\n+<html>\n+\n+<style>\n+  html * {\n+    font-family: Roboto, Verdana, sans-serif;\n+  }\n+\n+  body {\n+    max-width: 50em;\n+  }\n+\n+  li {\n+    padding: 0.25em;\n+  }\n+\n+  .panel {\n+    margin: 1em;\n+    padding: 1em;\n+    border: 1px solid black;\n+    border-radius: 5px;\n+  }\n+\n+  .highlight {\n+    background-color: #d6f5d6;\n+  }\n+\n+\n+</style>\n+\n+<head>\n+  <title>Google Cloud Secret Manager Demo</title>\n+  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n+  <link type=\"text/css\" href=\"css/style.css\" rel=\"stylesheet\"/>\n+</head>\n+\n+<body>\n+<h1>Secret Manager Demo with Spring Cloud GCP</h1>\n+\n+<div class=\"panel\">\n+  <h3>Secret Manager Property Source</h3>\n+  At the bootstrap phase, we loaded the following secret into the application context:\n+  <br/>application-secret: [[${applicationSecret}]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8cc811db7a0281a884dbe149fb8b2ae943a1e8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwNjA4OQ==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2223#discussion_r386606089", "createdAt": "2020-03-02T19:36:10Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/templates/index.html", "diffHunk": "@@ -0,0 +1,98 @@\n+<html>\n+\n+<style>\n+  html * {\n+    font-family: Roboto, Verdana, sans-serif;\n+  }\n+\n+  body {\n+    max-width: 50em;\n+  }\n+\n+  li {\n+    padding: 0.25em;\n+  }\n+\n+  .panel {\n+    margin: 1em;\n+    padding: 1em;\n+    border: 1px solid black;\n+    border-radius: 5px;\n+  }\n+\n+  .highlight {\n+    background-color: #d6f5d6;\n+  }\n+\n+\n+</style>\n+\n+<head>\n+  <title>Google Cloud Secret Manager Demo</title>\n+  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n+  <link type=\"text/css\" href=\"css/style.css\" rel=\"stylesheet\"/>\n+</head>\n+\n+<body>\n+<h1>Secret Manager Demo with Spring Cloud GCP</h1>\n+\n+<div class=\"panel\">\n+  <h3>Secret Manager Property Source</h3>\n+  At the bootstrap phase, we loaded the following secret into the application context:\n+  <br/>application-secret: [[${applicationSecret}]]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5NjIyNA=="}, "originalCommit": {"oid": "ae8cc811db7a0281a884dbe149fb8b2ae943a1e8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDg2MjE0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/SecretManagerWebController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToyMToxNVrOFwsEQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTozNjoyNFrOFwskhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5Nzk1NQ==", "bodyText": "The redirect makes it hard to tell that something actually happened.\nMaybe just return a message like \"Secret created\".\nYou can of course also just use the ModelAndView with an additional \"message\" argument for this endpoint and the one above, but that's a bit more fancy.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2223#discussion_r386597955", "createdAt": "2020-03-02T19:21:15Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/SecretManagerWebController.java", "diffHunk": "@@ -18,30 +18,50 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.cloud.gcp.secretmanager.SecretManagerTemplate;\n import org.springframework.core.env.Environment;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.ModelMap;\n import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.servlet.ModelAndView;\n \n-@RestController\n-public class WebController {\n+@Controller\n+public class SecretManagerWebController {\n \n \t@Autowired\n \tprivate Environment environment;\n \n \t@Autowired\n \tprivate MyAppProperties properties;\n \n+\t@Autowired\n+\tprivate SecretManagerTemplate secretManagerTemplate;\n+\n \t// Application secrets can be accessed using @Value and passing in the secret name.\n \t// Note that the secret name is prefixed with \"secrets\" because of the prefix setting in\n \t// bootstrap.properties.\n \t@Value(\"${secrets.application-secret}\")\n \tprivate String applicationSecretValue;\n \n \t@GetMapping(\"/\")\n-\tpublic String getRoot() {\n-\t\t// In practice, you never want to print your secrets as plaintext.\n-\t\treturn \"<h1>Secret Manager Sample Application</h1>\"\n-\t\t\t\t+ \"The secret property is: \" + properties.getApplicationSecret() + \"<br/>\"\n-\t\t\t\t+ \"You can also access secrets using @Value: \" + applicationSecretValue + \"<br/>\";\n+\tpublic ModelAndView renderIndex(ModelMap map) {\n+\t\tmap.put(\"applicationSecret\", this.applicationSecretValue);\n+\t\treturn new ModelAndView(\"index.html\", map);\n+\t}\n+\n+\t@GetMapping(\"/getSecret\")\n+\t@ResponseBody\n+\tpublic String getSecret(@RequestParam String secretId, ModelMap map) {\n+\t\tString secretPayload = this.secretManagerTemplate.getSecretString(secretId);\n+\t\treturn \"Secret ID: \" + secretId + \" | Value: \" + secretPayload;\n+\t}\n+\n+\t@PostMapping(\"/createSecret\")\n+\tpublic String createSecret(@RequestParam String secretId, @RequestParam String secretPayload) {\n+\t\tthis.secretManagerTemplate.createSecret(secretId, secretPayload);\n+\t\treturn \"redirect:/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c830a5ce59eadbb3ad944a4561f90fa7f7b487b7"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwNjIxNQ==", "bodyText": "Done. Went with the additional param approach.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2223#discussion_r386606215", "createdAt": "2020-03-02T19:36:24Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/SecretManagerWebController.java", "diffHunk": "@@ -18,30 +18,50 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.cloud.gcp.secretmanager.SecretManagerTemplate;\n import org.springframework.core.env.Environment;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.ModelMap;\n import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.servlet.ModelAndView;\n \n-@RestController\n-public class WebController {\n+@Controller\n+public class SecretManagerWebController {\n \n \t@Autowired\n \tprivate Environment environment;\n \n \t@Autowired\n \tprivate MyAppProperties properties;\n \n+\t@Autowired\n+\tprivate SecretManagerTemplate secretManagerTemplate;\n+\n \t// Application secrets can be accessed using @Value and passing in the secret name.\n \t// Note that the secret name is prefixed with \"secrets\" because of the prefix setting in\n \t// bootstrap.properties.\n \t@Value(\"${secrets.application-secret}\")\n \tprivate String applicationSecretValue;\n \n \t@GetMapping(\"/\")\n-\tpublic String getRoot() {\n-\t\t// In practice, you never want to print your secrets as plaintext.\n-\t\treturn \"<h1>Secret Manager Sample Application</h1>\"\n-\t\t\t\t+ \"The secret property is: \" + properties.getApplicationSecret() + \"<br/>\"\n-\t\t\t\t+ \"You can also access secrets using @Value: \" + applicationSecretValue + \"<br/>\";\n+\tpublic ModelAndView renderIndex(ModelMap map) {\n+\t\tmap.put(\"applicationSecret\", this.applicationSecretValue);\n+\t\treturn new ModelAndView(\"index.html\", map);\n+\t}\n+\n+\t@GetMapping(\"/getSecret\")\n+\t@ResponseBody\n+\tpublic String getSecret(@RequestParam String secretId, ModelMap map) {\n+\t\tString secretPayload = this.secretManagerTemplate.getSecretString(secretId);\n+\t\treturn \"Secret ID: \" + secretId + \" | Value: \" + secretPayload;\n+\t}\n+\n+\t@PostMapping(\"/createSecret\")\n+\tpublic String createSecret(@RequestParam String secretId, @RequestParam String secretPayload) {\n+\t\tthis.secretManagerTemplate.createSecret(secretId, secretPayload);\n+\t\treturn \"redirect:/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5Nzk1NQ=="}, "originalCommit": {"oid": "c830a5ce59eadbb3ad944a4561f90fa7f7b487b7"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2276, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}