{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjE3NTA2", "number": 2224, "title": "Add the refdoc for Secret Manager API Integration", "bodyText": "Add the refdoc for the Secret Manager API Integration.\nContributes to #2176.\nShould be submitted after #2223.", "createdAt": "2020-02-28T22:07:42Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224", "merged": true, "mergeCommit": {"oid": "76035948b6a8fc1e069e79daa46fd614b78d4c70"}, "closed": true, "closedAt": "2020-03-02T21:45:59Z", "author": {"login": "dzou"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcI3UmEgH2gAyMzgxNjE3NTA2OmFkMzdkMDBiNTNkMjdiYmE5ZGRmODBjNjVkNTI3YzY1NzMyMWUzNWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJ0wtWAFqTM2NzU0NzY0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/ad37d00b53d27bba9ddf80c65d527c657321e35f", "committedDate": "2020-02-28T22:04:45Z", "message": "Add Refdoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzczNTIx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#pullrequestreview-366773521", "createdAt": "2020-02-29T03:28:40Z", "commit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzoyODo0MFrOFwHXbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMDoyNFrOFwHXug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjY1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * A convenience starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n          \n          \n            \n            * A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r385996652", "createdAt": "2020-02-29T03:28:40Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A convenience starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjczMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All secrets will be loaded into the application environment using their `secretId` as the property's names.\n          \n          \n            \n            All secrets will be loaded into the application environment using their `secretId` as the property name.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r385996730", "createdAt": "2020-02-29T03:30:24Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A convenience starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+After adding the starter dependency to your project, Spring Cloud GCP will automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property's names.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDY0MTk3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#pullrequestreview-367464197", "createdAt": "2020-03-02T19:26:06Z", "commit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToyNjowNlrOFwsPNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToyNjoyMFrOFwsPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwMDc1OA==", "bodyText": "Maybe add a NOTE: box saying that bootstrap has to be explicitly enabled.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386600758", "createdAt": "2020-03-02T19:26:06Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A convenience starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+After adding the starter dependency to your project, Spring Cloud GCP will automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwMDg4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. | No | `true`\n          \n          \n            \n            | `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. | No | `false`", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386600889", "createdAt": "2020-03-02T19:26:20Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A convenience starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+After adding the starter dependency to your project, Spring Cloud GCP will automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property's names.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. | No | `true`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "296fd5a807c1d5a4b5e00e2f9668e48c7b7cbb21", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/296fd5a807c1d5a4b5e00e2f9668e48c7b7cbb21", "committedDate": "2020-03-02T19:59:13Z", "message": "Update docs/src/main/asciidoc/secretmanager.adoc\n\nCo-Authored-By: Mike Eltsufin <meltsufin@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cc242f41657eb7ab5ff5658eacd4e676136064f", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1cc242f41657eb7ab5ff5658eacd4e676136064f", "committedDate": "2020-03-02T19:59:30Z", "message": "Update docs/src/main/asciidoc/secretmanager.adoc\n\nCo-Authored-By: Mike Eltsufin <meltsufin@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24c154443707d2d2ad37cc88afab5fb66195f3a5", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/24c154443707d2d2ad37cc88afab5fb66195f3a5", "committedDate": "2020-03-02T20:09:29Z", "message": "refdoc updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/cecd785609472701e7babc1a5021ed684e072c48", "committedDate": "2020-03-02T20:09:51Z", "message": "Merge remote-tracking branch 'origin/secret-manager-refdoc' into secret-manager-refdoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDk2NDIx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#pullrequestreview-367496421", "createdAt": "2020-03-02T20:16:08Z", "commit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxNjowOFrOFwtxCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxNjowOFrOFwtxCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNTgwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n          \n          \n            \n            NOTE: To begin using this feature, you must set `spring.cloud.gcp.secretmanager.bootstrap.enabled=true` because this feature is disabled by default.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386625800", "createdAt": "2020-03-02T20:16:08Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d845bcc371eaf95c02743befc5b6156e98a6722e", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d845bcc371eaf95c02743befc5b6156e98a6722e", "committedDate": "2020-03-02T20:21:46Z", "message": "Update docs/src/main/asciidoc/secretmanager.adoc\n\nCo-Authored-By: Mike Eltsufin <meltsufin@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ab278920b802966f6c91e5235de0c24cec67aa8", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4ab278920b802966f6c91e5235de0c24cec67aa8", "committedDate": "2020-03-02T20:23:58Z", "message": "Add secretmanager to index.adoc."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDk2NzY4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#pullrequestreview-367496768", "createdAt": "2020-03-02T20:16:38Z", "commit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxNjozOFrOFwtyFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDozMjoxOVrOFwuPkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjA2OQ==", "bodyText": "I'd move\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n          \n          \n            \n            NOTE: This feature disabled by default; to use it, you must set `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386626069", "createdAt": "2020-03-02T20:16:38Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjU4OQ==", "bodyText": "I am not sure I can english properly today, so check that this makes sense grammatically.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n          \n          \n            \n            | `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating to the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386626589", "createdAt": "2020-03-02T20:17:49Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNzE3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating with the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n          \n          \n            \n            | `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating to the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386627171", "createdAt": "2020-03-02T20:19:03Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating with the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMzE1Nw==", "bodyText": "Should we just vaguely say \"inject\" instead of \"autowire... using autowired\" despite showing an example of it?\nIn production code, autowire would not be commonly used.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386633157", "createdAt": "2020-03-02T20:31:15Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating with the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.project-id` | The GCP Project used to access Secret Manager API. | No | By default, infers the project from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.secret-name-prefix` | A prefix string to prepend to the property names of secrets read from Secret Manager | No | \"\" (empty string)\n+|===\n+\n+=== Secret Manager Template\n+\n+The `SecretManagerTemplate` class simplifies operations of creating, updating, and reading secrets.\n+\n+To begin using this class, you may autowire an instance of the class using `@Autowired` after adding the starter dependency to your project.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMzYxOQ==", "bodyText": "Is this section a duplicate?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386633619", "createdAt": "2020-03-02T20:32:19Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating with the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.project-id` | The GCP Project used to access Secret Manager API. | No | By default, infers the project from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.secret-name-prefix` | A prefix string to prepend to the property names of secrets read from Secret Manager | No | \"\" (empty string)\n+|===\n+\n+=== Secret Manager Template\n+\n+The `SecretManagerTemplate` class simplifies operations of creating, updating, and reading secrets.\n+\n+To begin using this class, you may autowire an instance of the class using `@Autowired` after adding the starter dependency to your project.\n+\n+[source, java]\n+----\n+@Autowired\n+private SecretManagerTemplate secretManagerTemplate;\n+----\n+\n+Please consult https://github.com/spring-cloud/spring-cloud-gcp/blob/master/spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java[`SecretManagerOperations`] for information on what operations are available for the Secret Manager template.\n+\n+|===", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NTA3NDY1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#pullrequestreview-367507465", "createdAt": "2020-03-02T20:34:29Z", "commit": {"oid": "4ab278920b802966f6c91e5235de0c24cec67aa8"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f41ee2ea4741f8b7ec0b215aa8a556800d5338b7", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f41ee2ea4741f8b7ec0b215aa8a556800d5338b7", "committedDate": "2020-03-02T20:55:41Z", "message": "PR Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NTI5MjYz", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#pullrequestreview-367529263", "createdAt": "2020-03-02T21:10:22Z", "commit": {"oid": "f41ee2ea4741f8b7ec0b215aa8a556800d5338b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToxMDoyMlrOFwvWaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToxMDoyMlrOFwvWaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1MTc1Mg==", "bodyText": "I'm afraid people may now miss the fact that auth settings are available.\nMaybe add a link here saying see auth setting below?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386651752", "createdAt": "2020-03-02T21:10:22Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: This feature disabled by default; to use it, you must set `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.secret-name-prefix` | A prefix string to prepend to the property names of secrets read from Secret Manager | No | \"\" (empty string)\n+|===\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41ee2ea4741f8b7ec0b215aa8a556800d5338b7"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ec4d778063e237271d1bef90aeb89823c82ae12", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1ec4d778063e237271d1bef90aeb89823c82ae12", "committedDate": "2020-03-02T21:26:47Z", "message": "Reference authentication settings section below."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NTQ0MDcw", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#pullrequestreview-367544070", "createdAt": "2020-03-02T21:33:48Z", "commit": {"oid": "1ec4d778063e237271d1bef90aeb89823c82ae12"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NTQ3NjQx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#pullrequestreview-367547641", "createdAt": "2020-03-02T21:39:40Z", "commit": {"oid": "1ec4d778063e237271d1bef90aeb89823c82ae12"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 560, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}