{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NjcwMzI0", "number": 5150, "title": "[go-experimental] Add oneOf support", "bodyText": "This PR adds oneOf support in the same way it was added for Java clients recently in #5120. It contains a lot of refactoring to be able to use the same mechanisms as were used to implement this feature for Java. Also see #4785 for discussion on semantics of oneOf and thoughts on why it was implemented that way for Java.\nNote that this PR doesn't contain any tests right now. I do want to add tests, but would like to do that after the general direction of this PR and the related refactoring is approved.\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.\n\n@antihax (2017/11) @bvwells (2017/12) @grokify (2018/07) @kemokemo (2018/09) @bkabrda (2019/07)", "createdAt": "2020-01-29T17:08:52Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150", "merged": true, "mergeCommit": {"oid": "0693a83cfeaaed4b751a6119ecda9b4e9f52da24"}, "closed": true, "closedAt": "2020-02-10T21:26:33Z", "author": {"login": "bkabrda"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBM70GAFqTM1MzQzNTEzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcC9ViiABqjMwMjI3NDk3OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDM1MTMw", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#pullrequestreview-353435130", "createdAt": "2020-02-05T02:37:39Z", "commit": {"oid": "7bb83cbe84bcc66c32dfeebbd02cc0b3edb53e12"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjozNzozOVrOFlqKww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0MjoyNlrOFlqPBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMjUxNQ==", "bodyText": "Related to this comment, and line 5672. From https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#discriminatorObject:\n\nWhen using the discriminator, inline schemas will not be considered.\n\nI think we'd need to move line 5672 above this loop, and if discriminator is present, don't honor inline models.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375032515", "createdAt": "2020-02-05T02:37:39Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -5519,4 +5641,40 @@ public FeatureSet getFeatureSet() {\n     public void setFeatureSet(final FeatureSet featureSet) {\n         this.featureSet = featureSet == null ? DefaultFeatureSet : featureSet;\n     }\n+\n+    //// Following methods are related to the \"useOneOfInterfaces\" feature\n+    /**\n+     * Add \"x-oneOf-name\" extension to a given oneOf schema (assuming it has at least 1 oneOf elements)\n+     * @param s schema to add the extension to\n+     * @param name name of the parent oneOf schema\n+     */\n+    public void addOneOfNameExtension(ComposedSchema s, String name) {\n+        if (s.getOneOf() != null && s.getOneOf().size() > 0) {\n+            s.addExtension(\"x-oneOf-name\", name);\n+        }\n+    }\n+\n+    /**\n+     * Add a given ComposedSchema as an interface model to be generated\n+     * @param cs ComposedSchema object to create as interface model\n+     * @param type name to use for the generated interface model\n+     */\n+    public void addOneOfInterfaceModel(ComposedSchema cs, String type) {\n+        CodegenModel cm = new CodegenModel();\n+\n+        for (Schema o : cs.getOneOf()) {\n+            // TODO: inline objects", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb83cbe84bcc66c32dfeebbd02cc0b3edb53e12"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzYwNw==", "bodyText": "This is probably the best javadoc in the project now, and I hope it sets the bar high for everyone :)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375033607", "createdAt": "2020-02-05T02:42:26Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/OneOfImplementorAdditionalData.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.openapitools.codegen.utils;\n+\n+import org.openapitools.codegen.CodegenConfig;\n+import org.openapitools.codegen.CodegenModel;\n+import org.openapitools.codegen.CodegenProperty;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class holds data to add to `oneOf` members. Let's consider this example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb83cbe84bcc66c32dfeebbd02cc0b3edb53e12"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDM3OTgx", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#pullrequestreview-353437981", "createdAt": "2020-02-05T02:48:42Z", "commit": {"oid": "7bb83cbe84bcc66c32dfeebbd02cc0b3edb53e12"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0ODo0MlrOFlqUNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0ODo0MlrOFlqUNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDkzMg==", "bodyText": "I have a PR to normalize vendor extensions to match the naming strategy defined in the OpenAPI Specification (must start with x-) and more specifically our rule defined in CONTRIBUTING.md (x- prefixed and lower-kebab-case).\nWould it be a huge pain to change this to x-is-one-of-interface in this PR, or should I wait for this to be merged and integrate up to my PR?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375034932", "createdAt": "2020-02-05T02:48:42Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -319,6 +326,65 @@ private void registerMustacheLambdas() {\n     // override with any special post-processing for all models\n     @SuppressWarnings({\"static-method\", \"unchecked\"})\n     public Map<String, Object> postProcessAllModels(Map<String, Object> objs) {\n+        if (this.useOneOfInterfaces) {\n+            // First, add newly created oneOf interfaces\n+            for (CodegenModel cm : addOneOfInterfaces) {\n+                Map<String, Object> modelValue = new HashMap<String, Object>() {{\n+                    putAll(additionalProperties());\n+                    put(\"model\", cm);\n+                }};\n+                List<Object> modelsValue = Arrays.asList(modelValue);\n+                List<Map<String, String>> importsValue = new ArrayList<Map<String, String>>();\n+                Map<String, Object> objsValue = new HashMap<String, Object>() {{\n+                    put(\"models\", modelsValue);\n+                    put(\"package\", modelPackage());\n+                    put(\"imports\", importsValue);\n+                    put(\"classname\", cm.classname);\n+                    putAll(additionalProperties);\n+                }};\n+                objs.put(cm.name, objsValue);\n+            }\n+\n+            // Gather data from all the models that contain oneOf into OneOfImplementorAdditionalData classes\n+            // (see docstring of that class to find out what information is gathered and why)\n+            Map<String, OneOfImplementorAdditionalData> additionalDataMap = new HashMap<String, OneOfImplementorAdditionalData>();\n+            for (Map.Entry modelsEntry : objs.entrySet()) {\n+                Map<String, Object> modelsAttrs = (Map<String, Object>) modelsEntry.getValue();\n+                List<Object> models = (List<Object>) modelsAttrs.get(\"models\");\n+                List<Map<String, String>> modelsImports = (List<Map<String, String>>) modelsAttrs.getOrDefault(\"imports\", new ArrayList<Map<String, String>>());\n+                for (Object _mo : models) {\n+                    Map<String, Object> mo = (Map<String, Object>) _mo;\n+                    CodegenModel cm = (CodegenModel) mo.get(\"model\");\n+                    if (cm.oneOf.size() > 0) {\n+                        cm.vendorExtensions.put(\"isOneOfInterface\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bb83cbe84bcc66c32dfeebbd02cc0b3edb53e12"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjkwMDM5", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#pullrequestreview-353690039", "createdAt": "2020-02-05T12:50:46Z", "commit": {"oid": "e3979bf5e704301e291b10725f2b8b87d0a2f991"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo1MDo0N1rOFl2mXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjo1MDo0N1rOFl2mXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIzNjE5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Convenience method to wrap this instance of {{classname}} in {{{.}}}\n          \n          \n            \n            // As{{{.}}} wraps this instance of {{classname}} in {{{.}}}", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375236190", "createdAt": "2020-02-05T12:50:47Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -152,6 +152,12 @@ func (s *{{classname}}) UnmarshalJSON(src []byte) error {\n     {{/discriminator}}\n }\n {{/vendorExtensions.x-is-one-of-interface}}\n+{{#vendorExtensions.implements}}\n+// Convenience method to wrap this instance of {{classname}} in {{{.}}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3979bf5e704301e291b10725f2b8b87d0a2f991"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNzg3MTA2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#pullrequestreview-353787106", "createdAt": "2020-02-05T15:04:48Z", "commit": {"oid": "a3a4915b9de16fa8aaa927629b94105e6edc55bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTowNDo0OFrOFl7GVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTowNDo0OFrOFl7GVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMwOTkwOQ==", "bodyText": "\ud83d\udcdbThank you!", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5150#discussion_r375309909", "createdAt": "2020-02-05T15:04:48Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -377,8 +377,9 @@ private void registerMustacheLambdas() {\n                 for (Object _implmo : models) {\n                     Map<String, Object> implmo = (Map<String, Object>) _implmo;\n                     CodegenModel implcm = (CodegenModel) implmo.get(\"model\");\n-                    if (additionalDataMap.containsKey(implcm.name)) {\n-                        additionalDataMap.get(implcm.name).addToImplementor(this, implcm, imports, addOneOfInterfaceImports);\n+                    String modelName = toModelName(implcm.name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a4915b9de16fa8aaa927629b94105e6edc55bd"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0f25449923030bf12dce8f097fed6d8566f1caf", "author": {"user": {"login": "bkabrda", "name": "Slavek Kabrda"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e0f25449923030bf12dce8f097fed6d8566f1caf", "committedDate": "2020-02-10T13:38:08Z", "message": "[go-experimental] Add oneOf support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40dbf3aa10b34b4b13019346080197200737cb1c", "author": {"user": {"login": "bkabrda", "name": "Slavek Kabrda"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/40dbf3aa10b34b4b13019346080197200737cb1c", "committedDate": "2020-02-10T13:38:25Z", "message": "Fix docs for the oneOf models"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b94ec8de689f4cf3af34cac9097970c477110f00", "author": {"user": {"login": "bkabrda", "name": "Slavek Kabrda"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b94ec8de689f4cf3af34cac9097970c477110f00", "committedDate": "2020-02-10T13:38:27Z", "message": "isOneOfInterface => x-is-one-of-interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbd5aa1dd0d7bf9b104d0ce460a4dea8ba129a55", "author": {"user": {"login": "bkabrda", "name": "Slavek Kabrda"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/dbd5aa1dd0d7bf9b104d0ce460a4dea8ba129a55", "committedDate": "2020-02-10T13:38:28Z", "message": "Add proper warnings when inline models are used in oneOf choices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fd47d6dbdffafc70c0d51e98e5a7e01f15aecda", "author": {"user": {"login": "bkabrda", "name": "Slavek Kabrda"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/7fd47d6dbdffafc70c0d51e98e5a7e01f15aecda", "committedDate": "2020-02-10T13:38:30Z", "message": "Add a convenience method to oneOf implementing structs to cast them as the oneOf interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "800bea5dd298d0a693bc6a0a8b7857f5c1ec3067", "author": {"user": {"login": "bkabrda", "name": "Slavek Kabrda"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/800bea5dd298d0a693bc6a0a8b7857f5c1ec3067", "committedDate": "2020-02-10T13:38:31Z", "message": "Update modules/openapi-generator/src/main/resources/go-experimental/model.mustache\n\nCo-Authored-By: Jiri Kuncar <jiri.kuncar@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b93a747b5f19200efbc985b5300c28edbd61da5d", "author": {"user": {"login": "bkabrda", "name": "Slavek Kabrda"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b93a747b5f19200efbc985b5300c28edbd61da5d", "committedDate": "2020-02-10T13:38:32Z", "message": "Fix retrieving data from additionalDataMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "347eaf77ded08e4423bc8d48b633193c4d69636a", "author": {"user": {"login": "bkabrda", "name": "Slavek Kabrda"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/347eaf77ded08e4423bc8d48b633193c4d69636a", "committedDate": "2020-02-10T13:38:33Z", "message": "Add basic tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01968ef23a6ef6d8bff492ab6f4ca95ae816fab8", "author": {"user": {"login": "bkabrda", "name": "Slavek Kabrda"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/01968ef23a6ef6d8bff492ab6f4ca95ae816fab8", "committedDate": "2020-02-06T13:20:29Z", "message": "Add basic tests"}, "afterCommit": {"oid": "347eaf77ded08e4423bc8d48b633193c4d69636a", "author": {"user": {"login": "bkabrda", "name": "Slavek Kabrda"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/347eaf77ded08e4423bc8d48b633193c4d69636a", "committedDate": "2020-02-10T13:38:33Z", "message": "Add basic tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2880, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}