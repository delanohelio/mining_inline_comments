{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNzU4ODY1", "number": 4975, "title": "[Slim4] Add string formats support to Data Mocker", "bodyText": "PR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.\n\nNew string formats mocking:\nuse OpenAPIServer\\Mock\\OpenApiDataMocker as Mocker;\n$mocker = new Mocker();\n$data = $mocker->mockFromSchema([\n    'type' => 'object',\n    'properties' => [\n        'byte' => [\n            'type' => 'string',\n            'format' => 'byte',\n        ],\n        'binary' => [\n            'type' => 'string',\n            'format' => 'binary',\n            'minLength' => 16,\n        ],\n        'date' => [\n            'type' => 'string',\n            'format' => 'date',\n        ],\n        'datetime' => [\n            'type' => 'string',\n            'format' => 'date-time',\n        ],\n        'password' => [\n            'type' => 'string',\n            'format' => 'password',\n        ],\n        'email' => [\n            'type' => 'string',\n            'format' => 'email',\n        ],\n        'uuid' => [\n            'type' => 'string',\n            'format' => 'uuid',\n        ],\n    ],\n]);\n\necho json_encode($data, JSON_PRETTY_PRINT);\nOutput:\n{\n    \"byte\": \"TA==\",\n    \"binary\": \"TG9yZW0gaXBzdQ==\",\n    \"date\": \"1975-10-19\",\n    \"datetime\": \"2006-08-03T00:43:34+00:00\",\n    \"password\": \"12345\",\n    \"email\": \"mlking@example.com\",\n    \"uuid\": \"5e1a245500fd5\"\n}\nRelated to #3545\ncc @jebentier, @dkarlovi, @mandrean, @jfastnacht, @ackintosh, @renepardon", "createdAt": "2020-01-11T19:42:31Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975", "merged": true, "mergeCommit": {"oid": "0366e946ba9d1a30a777cf085f24cffd7f404211"}, "closed": true, "closedAt": "2020-01-23T08:18:19Z", "author": {"login": "ybelenko"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5Y2YcAFqTM0MTUzODI4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6K-gwABqjI5NDU4MjkwNjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTM4Mjg1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#pullrequestreview-341538285", "createdAt": "2020-01-11T19:47:27Z", "commit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxOTo0NzoyN1rOFcmtUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMDowMzoxM1rOFcmwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODY0MA==", "bodyText": "I'm not sure that truncate data is necessary there. Don't know which argument is more important, minLength/maxLength or format.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365538640", "createdAt": "2020-01-11T19:47:27Z", "author": {"login": "ybelenko"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODk1MQ==", "bodyText": "Same applies to this part. Please, explain to me. Accordingly to OAS3 spec what properties has more priority, minLength/maxLength or date/date-time format? Is schema below valid:\ntype: string\nformat: date-time\nmaxLength: 1\nIt's not possible to write down date-time with single char, isn't it? It violates RFC standard for date-time specification too.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365538951", "createdAt": "2020-01-11T19:54:09Z", "author": {"login": "ybelenko"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');\n+                break;\n+            case IMocker::DATA_FORMAT_DATE:\n+            case IMocker::DATA_FORMAT_DATE_TIME:\n+                // min unix timestamp is 0 and max is 2147483647 for 32bit systems which equals 2038-01-19 03:14:07\n+                $date = DateTime::createFromFormat('U', mt_rand(0, 2147483647));\n+                $str = ($dataFormat === IMocker::DATA_FORMAT_DATE) ? $date->format('Y-m-d') : $date->format('Y-m-d\\TH:i:sP');\n+\n+                // truncate or pad datestring to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength, ' ');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTEyNg==", "bodyText": "If I understand spec correctly, email format is not supported, but is recognisable by some systems. I think I can truncate email values with no worries.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365539126", "createdAt": "2020-01-11T19:57:53Z", "author": {"login": "ybelenko"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');\n+                break;\n+            case IMocker::DATA_FORMAT_DATE:\n+            case IMocker::DATA_FORMAT_DATE_TIME:\n+                // min unix timestamp is 0 and max is 2147483647 for 32bit systems which equals 2038-01-19 03:14:07\n+                $date = DateTime::createFromFormat('U', mt_rand(0, 2147483647));\n+                $str = ($dataFormat === IMocker::DATA_FORMAT_DATE) ? $date->format('Y-m-d') : $date->format('Y-m-d\\TH:i:sP');\n+\n+                // truncate or pad datestring to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength, ' ');\n+                break;\n+            case IMocker::DATA_FORMAT_PASSWORD:\n+                // use list of most popular passwords\n+                $obviousPassList = [\n+                    'qwerty',\n+                    'qwerty12345',\n+                    'hello',\n+                    '12345',\n+                    '0000',\n+                    'qwerty12345!',\n+                    'qwertyuiop[]',\n+                ];\n+                $str = $obviousPassList[mt_rand(0, count($obviousPassList) - 1)];\n+\n+                // truncate or pad password to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);\n+                break;\n+            case IMocker::DATA_FORMAT_UUID:\n+                // use php built-in uniqid function\n+                $str = uniqid();\n+\n+                // truncate or pad password to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);\n+                break;\n+            case IMocker::DATA_FORMAT_EMAIL:\n+                // just for visionary purpose, not related to real persons\n+                $fakeEmailList = [\n+                    'johndoe',\n+                    'lhoswald',\n+                    'ojsimpson',\n+                    'mlking',\n+                    'jfkennedy',\n+                ];\n+                $str = $fakeEmailList[mt_rand(0, count($fakeEmailList) - 1)] . '@example.com';\n+\n+                // truncate or pad email to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTM4Mg==", "bodyText": "I tried to produce binary string data with random_bytes() php function, but resulted string can break std output. I don't know how binary format string should look like(raw, hex. base64 etc.). If somebody knows, please give an example.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365539382", "createdAt": "2020-01-11T20:03:13Z", "author": {"login": "ybelenko"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668", "committedDate": "2020-01-11T19:35:49Z", "message": "[Slim4] Refresh samples"}, "afterCommit": {"oid": "69c50b9889e7f57a67b6f498da808244e9a44abc", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/69c50b9889e7f57a67b6f498da808244e9a44abc", "committedDate": "2020-01-13T22:16:09Z", "message": "[Slim4] Refresh samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22ea6c1a44b1b705a599a2497e6d144a6cfb42cb", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/22ea6c1a44b1b705a599a2497e6d144a6cfb42cb", "committedDate": "2020-01-14T06:19:56Z", "message": "[Slim4] Support byte data format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17e5d3379cc2c1a213e79c9e92adffafdff22f89", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/17e5d3379cc2c1a213e79c9e92adffafdff22f89", "committedDate": "2020-01-14T06:19:56Z", "message": "[Slim4] Support date and date-time data formats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7c30e06d25737e9508d7d0651a2887bcc327ec5", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/f7c30e06d25737e9508d7d0651a2887bcc327ec5", "committedDate": "2020-01-14T06:19:56Z", "message": "[Slim4] Support password data format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cadc45237878316cde13ebc6e78051081436aba2", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/cadc45237878316cde13ebc6e78051081436aba2", "committedDate": "2020-01-14T06:19:56Z", "message": "[Slim4] Support uuid data format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd67fbf21b95591daf350d1b99f7bcc534f42bdd", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/cd67fbf21b95591daf350d1b99f7bcc534f42bdd", "committedDate": "2020-01-14T06:19:56Z", "message": "[Slim4] Fix test of password format mocking\n\n'00000' is numeric type, because PHPUnit doesn't make strict type\ncomparison."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4756cfc0a185a8028c8a824fa4550d8557f934d1", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/4756cfc0a185a8028c8a824fa4550d8557f934d1", "committedDate": "2020-01-14T06:19:56Z", "message": "[Slim4] Support binary data format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "564d57e92a5f30bdcc0f616b419ac825484666f1", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/564d57e92a5f30bdcc0f616b419ac825484666f1", "committedDate": "2020-01-14T06:19:56Z", "message": "[Slim4] Support email data format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6546981689437ad2ef5a64e321951b93e220a8f9", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/6546981689437ad2ef5a64e321951b93e220a8f9", "committedDate": "2020-01-14T06:19:56Z", "message": "[Slim4] Base64 encode binary format output\n\nRaw bytes string breaks PHP stdout output, so I've decided to use base64\nencoding format for binary format too."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebfab2d89562f105c4c1682dfa81211f5b738567", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ebfab2d89562f105c4c1682dfa81211f5b738567", "committedDate": "2020-01-14T06:19:56Z", "message": "[Slim4] Fix data format key in object mocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83353c39826fac28537914e78e47e5d401efb7c8", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/83353c39826fac28537914e78e47e5d401efb7c8", "committedDate": "2020-01-14T06:19:56Z", "message": "[Slim4] Refresh samples"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69c50b9889e7f57a67b6f498da808244e9a44abc", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/69c50b9889e7f57a67b6f498da808244e9a44abc", "committedDate": "2020-01-13T22:16:09Z", "message": "[Slim4] Refresh samples"}, "afterCommit": {"oid": "83353c39826fac28537914e78e47e5d401efb7c8", "author": {"user": {"login": "ybelenko", "name": "Yuriy Belenko"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/83353c39826fac28537914e78e47e5d401efb7c8", "committedDate": "2020-01-14T06:19:56Z", "message": "[Slim4] Refresh samples"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1976, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}