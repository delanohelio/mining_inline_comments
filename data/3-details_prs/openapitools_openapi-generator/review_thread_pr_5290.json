{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNzY1Njgy", "number": 5290, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjo0ODoyMVrODe4TqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDozNToyN1rODfC7Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzA2NDA5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjo0ODoyMVrOFoQs8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjoyNDozMFrOFo1Z1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2MTAwOQ==", "bodyText": "Note to reviewer: this was discussed with @wing328:\nIf I remember correctly, that refers to InlineModelResolver (https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/java/org/openapitools/codegen/InlineModelResolver.java) not supporting allOf  so the warning notifies the users to use $ref instead of defining the schema inline in allOf . We should have improved the InlineModelResolver to better handle inline schema allOf so I think it's ok to remove the warning.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5290#discussion_r377761009", "createdAt": "2020-02-11T16:48:21Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -1758,8 +1758,7 @@ public String toAllOfName(List<String> names, ComposedSchema composedSchema) {\n         } else if (names.size() == 1) {\n             return names.get(0);\n         } else {\n-            LOGGER.warn(\"allOf with multiple schemas defined. Using only the first one: {}. \" +\n-                \"To fully utilize allOf, please use $ref instead of inline schema definition\", names.get(0));\n+            LOGGER.warn(\"allOf with multiple schemas defined. Using only the first one: {}\", names.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d212d97897697b977a310a002809fa3ceb01ed"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0MTMzMA==", "bodyText": "I'm not aware of the discussion, but I don't know if it's related to InlineModelResolver. This method is only called from here: \n  \n    \n      openapi-generator/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java\n    \n    \n         Line 1725\n      in\n      0693a83\n    \n    \n    \n    \n\n        \n          \n           return toAllOfName(names, cs); \n        \n    \n  \n\n\ngetSchemaType will call ModelUtils.getInterfaces on a composed schema, then iterate all the schemas and get the first defined schema as the \"type\" of the composed schema. I don't think that behavior is correct because it assumes or suggests that composed schemas have some concept of \"interfaces\".\nInlineModelResolver has other issues, in that it tries to do a best-guess of models defined inline and resolve them to Schemas defined at the top of the document. This goes against requirements in the spec which claim that inline models should not be considered for composed schemas. At a certain point, we have no information whether our model was initially inline.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5290#discussion_r378041330", "createdAt": "2020-02-12T04:59:42Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -1758,8 +1758,7 @@ public String toAllOfName(List<String> names, ComposedSchema composedSchema) {\n         } else if (names.size() == 1) {\n             return names.get(0);\n         } else {\n-            LOGGER.warn(\"allOf with multiple schemas defined. Using only the first one: {}. \" +\n-                \"To fully utilize allOf, please use $ref instead of inline schema definition\", names.get(0));\n+            LOGGER.warn(\"allOf with multiple schemas defined. Using only the first one: {}\", names.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2MTAwOQ=="}, "originalCommit": {"oid": "a9d212d97897697b977a310a002809fa3ceb01ed"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MjMyNQ==", "bodyText": "There is also a non-obvious point: the 'allOf' name is constructed from the first element in the \"allOf\" list. If two separate authors want to model class inheritance, one OAS author may think it's better to put the \"parent\" class first, and another author may think it's better to put the \"parent\" last.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5290#discussion_r378362325", "createdAt": "2020-02-12T16:24:30Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -1758,8 +1758,7 @@ public String toAllOfName(List<String> names, ComposedSchema composedSchema) {\n         } else if (names.size() == 1) {\n             return names.get(0);\n         } else {\n-            LOGGER.warn(\"allOf with multiple schemas defined. Using only the first one: {}. \" +\n-                \"To fully utilize allOf, please use $ref instead of inline schema definition\", names.get(0));\n+            LOGGER.warn(\"allOf with multiple schemas defined. Using only the first one: {}\", names.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2MTAwOQ=="}, "originalCommit": {"oid": "a9d212d97897697b977a310a002809fa3ceb01ed"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODgwMzgzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDozNToyN1rOFohiJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzozODo0N1rOFpCaLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNjc3NQ==", "bodyText": "Just a heads up that I don't think this is intended to always indicate polymorphism in the specification. An allOf ref with discriminator is always supposed to indicate polymporphism, but the opposite isn't clear. The case that you've defined here, and that I'm assuming was intended to match the refedWithoutDiscriminator.size() == 1 condition below is a \"legacy\" implementation from when we'd began implementing allOf support but it wasn't fully supported by the generator.\nDetails:\n\ndiscriminator document starts with \"Adds support for polymorphism.\"\nComposition and Inheritance (Polymorphism) states: \"To support polymorphism, the OpenAPI Specification adds the discriminator field. When used, the discriminator will be the name of the property that decides which schema definition validates the structure of the model.\"\n\nIt doesn't explain this well enough, but from these two it seems like they're defining subtype polymorphism since other types of polymorphism are either irrelevant or don't make much sense in this usage.\nMore discussion (we could turn it into an issue as well):\nThere are additional details of OpenAPI Spec which aren't explained very well with allOf. For example, the discriminator for allOf can be in the $ref schema and not in the schema containing the allOf definition. In this case, the discriminator will use the schema name of the schema with the allOf and $ref. Example:\nPet:\n  \u2026\n  discriminator:\n    propertyName: type\n  properties:\n    name: type\n    type: String\nCat:\n  allOf:\n    - $ref: #/components/schemas/Pet\n\nEven without the discriminator, I don't think the LOGGER.warn message is totally accurate. For example, the json-schema combining doc shows this example:\n{\n  \"definitions\": {\n    \"address\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"street_address\": { \"type\": \"string\" },\n        \"city\":           { \"type\": \"string\" },\n        \"state\":          { \"type\": \"string\" }\n      },\n      \"required\": [\"street_address\", \"city\", \"state\"]\n    }\n  },\n\n  \"allOf\": [\n    { \"$ref\": \"#/definitions/address\" },\n    { \"properties\": {\n        \"type\": { \"enum\": [ \"residential\", \"business\" ] }\n      }\n    }\n  ]\n}\n\nUnfortunately, this doesn't define whether a codegen should model:\nAddress:\n  + StreetAddress: String\n  + City: String\n  + State: String\n\nTypedAddress <Address>:\n    Enum: [ Residential, Business ]\n\nor:\nAddress:\n  + StreetAddress: String\n  + City: String\n  + State: String\n    Enum: [ Residential, Business ]\n\nIn this issue, there's no clarification: OAI/OpenAPI-Specification#1467\nIn fact, if you consider from a REST input modeling perspective, it might make sense that all allOf without discriminator are unique types with properties of the $ref.\nI wonder if it may make sense for us to support a vendor extension as a hint whether the user wants to use composition or inheritance for these one-off allOf without a discriminator. Something like:\n\nx-codegen-prefer-polymorphism: true. When no discriminator is defined, we'll try to create a parent and child relationship if the target language/generator supports it\nx-codegen-prefer-polymorphism: false. When no discriminator is defined, we'll merge all properties into one \"super\" class.\n\nThe latter might be challenging to support the spec requirement that these are validated independently like in the case where two refs have the same property with different validation characteristics. This isn't a case we handle now.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5290#discussion_r378036775", "createdAt": "2020-02-12T04:35:27Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -988,19 +1029,34 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                         return parentName;\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n+                        hasAmbiguousParents = true;\n                         refedWithoutDiscriminator.add(parentName);\n                     }\n                 } else {\n-                    // not a ref, doing nothing\n+                    // not a ref, doing nothing, except counting the number of times the 'null' type\n+                    // is listed as composed element.\n+                    if (ModelUtils.isNullType(schema)) {\n+                        // If there are two interfaces, and one of them is the 'null' type,\n+                        // then the parent is obvious and there is no need to warn about specifying\n+                        // a determinator.\n+                        nullSchemaChildrenCount++;\n+                    }\n                 }\n             }\n+            if (refedWithoutDiscriminator.size() == 1 && nullSchemaChildrenCount == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e825bbce86fefc962995549c4ccf7941aedccb3b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0NzQyOA==", "bodyText": "Thank you for the quick feedback. Let me digest this and get back to you tomorrow.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5290#discussion_r378047428", "createdAt": "2020-02-12T05:31:42Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -988,19 +1029,34 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                         return parentName;\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n+                        hasAmbiguousParents = true;\n                         refedWithoutDiscriminator.add(parentName);\n                     }\n                 } else {\n-                    // not a ref, doing nothing\n+                    // not a ref, doing nothing, except counting the number of times the 'null' type\n+                    // is listed as composed element.\n+                    if (ModelUtils.isNullType(schema)) {\n+                        // If there are two interfaces, and one of them is the 'null' type,\n+                        // then the parent is obvious and there is no need to warn about specifying\n+                        // a determinator.\n+                        nullSchemaChildrenCount++;\n+                    }\n                 }\n             }\n+            if (refedWithoutDiscriminator.size() == 1 && nullSchemaChildrenCount == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNjc3NQ=="}, "originalCommit": {"oid": "e825bbce86fefc962995549c4ccf7941aedccb3b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2NzUyOQ==", "bodyText": "Unfortunately, this doesn't define whether a codegen should model:\nAddress:\n  + StreetAddress: String\n  + City: String\n  + State: String\n\nTypedAddress <Address>:\n    Enum: [ Residential, Business ]\n\nor:\nAddress:\n  + StreetAddress: String\n  + City: String\n  + State: String\n    Enum: [ Residential, Business ]\n\n\nAbove did you mean? 1) the generated code; 2) the serialization format of the JSON document; or 3) both? If (1), I agree it's not defined in the OAS spec, but OAS does not mandate how code generators should be implemented. If (2), isn't https://tools.ietf.org/html/draft-handrews-json-schema-02  section 9.2.1.1 mandating that it must be the second case?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5290#discussion_r378367529", "createdAt": "2020-02-12T16:32:35Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -988,19 +1029,34 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                         return parentName;\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n+                        hasAmbiguousParents = true;\n                         refedWithoutDiscriminator.add(parentName);\n                     }\n                 } else {\n-                    // not a ref, doing nothing\n+                    // not a ref, doing nothing, except counting the number of times the 'null' type\n+                    // is listed as composed element.\n+                    if (ModelUtils.isNullType(schema)) {\n+                        // If there are two interfaces, and one of them is the 'null' type,\n+                        // then the parent is obvious and there is no need to warn about specifying\n+                        // a determinator.\n+                        nullSchemaChildrenCount++;\n+                    }\n                 }\n             }\n+            if (refedWithoutDiscriminator.size() == 1 && nullSchemaChildrenCount == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNjc3NQ=="}, "originalCommit": {"oid": "e825bbce86fefc962995549c4ccf7941aedccb3b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM3NDA2MA==", "bodyText": "x-codegen-prefer-polymorphism: true. When no discriminator is defined, we'll try to create a parent and child relationship if the target language/generator supports it\nx-codegen-prefer-polymorphism: false. When no discriminator is defined, we'll merge all properties into one \"super\" class.\n\nThe latter might be challenging to support the spec requirement that these are validated independently like in the case where two refs have the same property with different validation characteristics. This isn't a case we handle now.\n\nI see there are related discussions about defined \"subclassOf\", but it does not seem to make much progress.\nI agree with all your points, they will have to be addressed in separate PRs. For example, I had an issue with inlined schema exactly as you mentioned, and I ended up doing a workaround by using a $ref.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5290#discussion_r378374060", "createdAt": "2020-02-12T16:42:31Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -988,19 +1029,34 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                         return parentName;\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n+                        hasAmbiguousParents = true;\n                         refedWithoutDiscriminator.add(parentName);\n                     }\n                 } else {\n-                    // not a ref, doing nothing\n+                    // not a ref, doing nothing, except counting the number of times the 'null' type\n+                    // is listed as composed element.\n+                    if (ModelUtils.isNullType(schema)) {\n+                        // If there are two interfaces, and one of them is the 'null' type,\n+                        // then the parent is obvious and there is no need to warn about specifying\n+                        // a determinator.\n+                        nullSchemaChildrenCount++;\n+                    }\n                 }\n             }\n+            if (refedWithoutDiscriminator.size() == 1 && nullSchemaChildrenCount == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNjc3NQ=="}, "originalCommit": {"oid": "e825bbce86fefc962995549c4ccf7941aedccb3b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3NTQwNA==", "bodyText": "Oh. I wasn't suggesting any additional changes here. I just wanted to comment on the allOf change because of the ambiguity, and hoped it'd generate discussion. There's a lot to be done for allOf support, and I'm hoping we'll make great progress in the 5.0 release.\nRegarding your comment:\n\nIf (2), isn't https://tools.ietf.org/html/draft-handrews-json-schema-02 section 9.2.1.1 mandating that it must be the second case?\n\nThe issue is that JSON Schema focuses on validation only and not on structure. This is further complicated because OpenAPI Specification disassociates it's allOf from JSON Schema:\n\nallOf - Inline or referenced schema MUST be of a Schema Object and not a standard JSON Schema.\n\nI think the only sane way to support it cleanly is by having good defaults and vendor extensions to modify each model's behavior. We may also want to consider a configuration option at generation to define a \"global\" default.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5290#discussion_r378575404", "createdAt": "2020-02-12T23:38:47Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -988,19 +1029,34 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                         return parentName;\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n+                        hasAmbiguousParents = true;\n                         refedWithoutDiscriminator.add(parentName);\n                     }\n                 } else {\n-                    // not a ref, doing nothing\n+                    // not a ref, doing nothing, except counting the number of times the 'null' type\n+                    // is listed as composed element.\n+                    if (ModelUtils.isNullType(schema)) {\n+                        // If there are two interfaces, and one of them is the 'null' type,\n+                        // then the parent is obvious and there is no need to warn about specifying\n+                        // a determinator.\n+                        nullSchemaChildrenCount++;\n+                    }\n                 }\n             }\n+            if (refedWithoutDiscriminator.size() == 1 && nullSchemaChildrenCount == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNjc3NQ=="}, "originalCommit": {"oid": "e825bbce86fefc962995549c4ccf7941aedccb3b"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3799, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}