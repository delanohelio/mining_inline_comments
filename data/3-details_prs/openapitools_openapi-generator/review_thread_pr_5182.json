{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NzU2MDk4", "number": 5182, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDoyMjozN1rODcWTPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNzowMzo1NlrODciN8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDUyMDkyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/DefaultCodegenTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDoyMjozN1rOFkW9zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDoyMjozN1rOFkW9zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY2OTMyNA==", "bodyText": "not sure how we ended up here having a test without any assertions :)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5182#discussion_r373669324", "createdAt": "2020-01-31T20:22:37Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/DefaultCodegenTest.java", "diffHunk": "@@ -528,9 +528,31 @@ public void testAllOfRequired() {\n         Schema child = openAPI.getComponents().getSchemas().get(\"clubForCreation\");\n         codegen.setOpenAPI(openAPI);\n         CodegenModel childModel = codegen.fromModel(\"clubForCreation\", child);\n-        showVars(childModel);\n+        Assert.assertEquals(getRequiredVars(childModel), Collections.singletonList(\"name\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce65af478ab209aa7279771c74f79a4888116219"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjQ3MzQ2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNzowMzo1NlrOFkn39w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNTozOTozMlrOFlInbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0NjM1OQ==", "bodyText": "is the comment above still valid?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5182#discussion_r373946359", "createdAt": "2020-02-03T07:03:56Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -996,13 +997,20 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                     } else {\n                         LOGGER.debug(\"Not a parent since discriminator.propertyName is not set {}\", s.get$ref());\n                         // not a parent since discriminator.propertyName is not set\n+                        refedParentNames.add(parentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce65af478ab209aa7279771c74f79a4888116219"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0NzQxNw==", "bodyText": "Yes it is. Also note the same existing comment in line 961 above.\nFor some reason, which is not clear to me, openapi generator treats this scenario (oneOf with a single $ref, where the referenced schema has no discriminator) as inheritance, despite the lack of discriminator (which would normally mean composition and not inheritance).\nMy fix doesn't change this behavior. It just makes it (i believe) more correct", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5182#discussion_r373947417", "createdAt": "2020-02-03T07:08:51Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -996,13 +997,20 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                     } else {\n                         LOGGER.debug(\"Not a parent since discriminator.propertyName is not set {}\", s.get$ref());\n                         // not a parent since discriminator.propertyName is not set\n+                        refedParentNames.add(parentName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0NjM1OQ=="}, "originalCommit": {"oid": "ce65af478ab209aa7279771c74f79a4888116219"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0ODAxNQ==", "bodyText": "actually, no. you're right, I need to clean this up.\nfirst off, the comment duplicates the log message - obvious redundancy.\nsecond, I think it should be exactly same message as in line 961 (currently it's kind of similar, but with diffirent flavors)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5182#discussion_r373948015", "createdAt": "2020-02-03T07:11:10Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -996,13 +997,20 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                     } else {\n                         LOGGER.debug(\"Not a parent since discriminator.propertyName is not set {}\", s.get$ref());\n                         // not a parent since discriminator.propertyName is not set\n+                        refedParentNames.add(parentName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0NjM1OQ=="}, "originalCommit": {"oid": "ce65af478ab209aa7279771c74f79a4888116219"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0ODY1MQ==", "bodyText": "@macjohnny sorry, I'm obviously not thinking clear tonight. Should just stop answering till tomorrow.\nGenerally, it looks like the same comments and messages are used in both places (here and inside getParentName() above). Which kind of is the intention. I'll double check tomorrow to make sure it still makes sense", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5182#discussion_r373948651", "createdAt": "2020-02-03T07:13:53Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -996,13 +997,20 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                     } else {\n                         LOGGER.debug(\"Not a parent since discriminator.propertyName is not set {}\", s.get$ref());\n                         // not a parent since discriminator.propertyName is not set\n+                        refedParentNames.add(parentName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0NjM1OQ=="}, "originalCommit": {"oid": "ce65af478ab209aa7279771c74f79a4888116219"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4Mjc5OA==", "bodyText": "I believe the comment here is still very precise.\nHowever, I removed the LOGGER.debug above that, which just repeated that comment.\nAlso renamed the variable to better reflect the intention. Hope it makes more sense now", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5182#discussion_r374482798", "createdAt": "2020-02-04T05:39:32Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -996,13 +997,20 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                     } else {\n                         LOGGER.debug(\"Not a parent since discriminator.propertyName is not set {}\", s.get$ref());\n                         // not a parent since discriminator.propertyName is not set\n+                        refedParentNames.add(parentName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0NjM1OQ=="}, "originalCommit": {"oid": "ce65af478ab209aa7279771c74f79a4888116219"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3897, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}