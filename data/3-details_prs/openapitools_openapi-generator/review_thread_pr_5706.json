{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDU2Mzkx", "number": 5706, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODozOTowNFrOEpX6Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NTozMVrOEy0uLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODE4ODIzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/ruby-client/partial_oneof_module.mustache", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODozOTowNFrOHbAQfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTowNTowNFrOHeU7tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3NzgyMA==", "bodyText": "This should be wrapped in a try/rescue. build_from_hash for enum values can raise. And when that's the case, the loop should continue to try the next model.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5706#discussion_r498077820", "createdAt": "2020-10-01T08:39:04Z", "author": {"login": "zippolyte"}, "path": "modules/openapi-generator/src/main/resources/ruby-client/partial_oneof_module.mustache", "diffHunk": "@@ -0,0 +1,69 @@\n+  {{#description}}\n+  # {{{description}}}\n+  {{/description}}\n+  module {{classname}}\n+    {{#oneOf}}\n+    {{#-first}}\n+    # List of class defined in oneOf (OpenAPI v3)\n+    def self.openapi_one_of\n+      [\n+    {{/-first}}\n+        :'{{{.}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      ]\n+    end\n+\n+    {{/-last}}\n+    {{/oneOf}}\n+    {{#discriminator}}\n+    {{#propertyName}}\n+    # discriminator's property name in OpenAPI v3\n+    def self.openapi_discriminator_name\n+      :'{{{.}}}'\n+    end\n+\n+    {{/propertyName}}\n+    {{#mappedModels}}\n+    {{#-first}}\n+    # discriminator's mapping in OpenAPI v3\n+    def self.openapi_discriminator_mapping\n+      {\n+    {{/-first}}\n+        :'{{{mappingName}}}' => :'{{{modelName}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      }\n+    end\n+    {{/-last}}\n+    {{/mappedModels}}\n+\n+    {{/discriminator}}\n+    # Builds the object from hash\n+    # @param [Hash] attributes Model attributes in the form of hash\n+    # @return [Object] Returns the model itself\n+    def self.build_from_hash(attributes)\n+    {{#discriminator}}\n+      discriminator_value = attributes[openapi_discriminator_name]\n+      return nil unless discriminator_value\n+    {{#mappedModels}}\n+    {{#-first}}\n+\n+      _class = openapi_discriminator_mapping[discriminator_value.to_sym]\n+      return nil unless _class\n+\n+      {{moduleName}}.const_get(_class).build_from_hash(attributes)\n+    {{/-first}}\n+    {{/mappedModels}}\n+    {{^mappedModels}}\n+      {{moduleName}}.const_get(discriminator_value).build_from_hash(attributes)\n+    {{/mappedModels}}\n+    {{/discriminator}}\n+    {{^discriminator}}\n+      openapi_one_of.each do |_class|\n+        model = {{moduleName}}.const_get(_class).build_from_hash(attributes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0a7464786eb727d1ca4b483ad711bc79bc2bdf6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0NDg1NQ==", "bodyText": "build_from_hash for enum values can raise\n\ncan you provide an example?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5706#discussion_r498644855", "createdAt": "2020-10-02T06:56:55Z", "author": {"login": "jfeltesse-mdsol"}, "path": "modules/openapi-generator/src/main/resources/ruby-client/partial_oneof_module.mustache", "diffHunk": "@@ -0,0 +1,69 @@\n+  {{#description}}\n+  # {{{description}}}\n+  {{/description}}\n+  module {{classname}}\n+    {{#oneOf}}\n+    {{#-first}}\n+    # List of class defined in oneOf (OpenAPI v3)\n+    def self.openapi_one_of\n+      [\n+    {{/-first}}\n+        :'{{{.}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      ]\n+    end\n+\n+    {{/-last}}\n+    {{/oneOf}}\n+    {{#discriminator}}\n+    {{#propertyName}}\n+    # discriminator's property name in OpenAPI v3\n+    def self.openapi_discriminator_name\n+      :'{{{.}}}'\n+    end\n+\n+    {{/propertyName}}\n+    {{#mappedModels}}\n+    {{#-first}}\n+    # discriminator's mapping in OpenAPI v3\n+    def self.openapi_discriminator_mapping\n+      {\n+    {{/-first}}\n+        :'{{{mappingName}}}' => :'{{{modelName}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      }\n+    end\n+    {{/-last}}\n+    {{/mappedModels}}\n+\n+    {{/discriminator}}\n+    # Builds the object from hash\n+    # @param [Hash] attributes Model attributes in the form of hash\n+    # @return [Object] Returns the model itself\n+    def self.build_from_hash(attributes)\n+    {{#discriminator}}\n+      discriminator_value = attributes[openapi_discriminator_name]\n+      return nil unless discriminator_value\n+    {{#mappedModels}}\n+    {{#-first}}\n+\n+      _class = openapi_discriminator_mapping[discriminator_value.to_sym]\n+      return nil unless _class\n+\n+      {{moduleName}}.const_get(_class).build_from_hash(attributes)\n+    {{/-first}}\n+    {{/mappedModels}}\n+    {{^mappedModels}}\n+      {{moduleName}}.const_get(discriminator_value).build_from_hash(attributes)\n+    {{/mappedModels}}\n+    {{/discriminator}}\n+    {{^discriminator}}\n+      openapi_one_of.each do |_class|\n+        model = {{moduleName}}.const_get(_class).build_from_hash(attributes)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3NzgyMA=="}, "originalCommit": {"oid": "a0a7464786eb727d1ca4b483ad711bc79bc2bdf6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0OTMyMg==", "bodyText": "It's in here \n  \n    \n      openapi-generator/modules/openapi-generator/src/main/resources/ruby-client/partial_model_enum_class.mustache\n    \n    \n         Line 17\n      in\n      a0a7464\n    \n    \n    \n    \n\n        \n          \n           raise \"Invalid ENUM value #{value} for class #{{{classname}}}\" if constantValues.empty?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5706#discussion_r498649322", "createdAt": "2020-10-02T07:09:50Z", "author": {"login": "zippolyte"}, "path": "modules/openapi-generator/src/main/resources/ruby-client/partial_oneof_module.mustache", "diffHunk": "@@ -0,0 +1,69 @@\n+  {{#description}}\n+  # {{{description}}}\n+  {{/description}}\n+  module {{classname}}\n+    {{#oneOf}}\n+    {{#-first}}\n+    # List of class defined in oneOf (OpenAPI v3)\n+    def self.openapi_one_of\n+      [\n+    {{/-first}}\n+        :'{{{.}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      ]\n+    end\n+\n+    {{/-last}}\n+    {{/oneOf}}\n+    {{#discriminator}}\n+    {{#propertyName}}\n+    # discriminator's property name in OpenAPI v3\n+    def self.openapi_discriminator_name\n+      :'{{{.}}}'\n+    end\n+\n+    {{/propertyName}}\n+    {{#mappedModels}}\n+    {{#-first}}\n+    # discriminator's mapping in OpenAPI v3\n+    def self.openapi_discriminator_mapping\n+      {\n+    {{/-first}}\n+        :'{{{mappingName}}}' => :'{{{modelName}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      }\n+    end\n+    {{/-last}}\n+    {{/mappedModels}}\n+\n+    {{/discriminator}}\n+    # Builds the object from hash\n+    # @param [Hash] attributes Model attributes in the form of hash\n+    # @return [Object] Returns the model itself\n+    def self.build_from_hash(attributes)\n+    {{#discriminator}}\n+      discriminator_value = attributes[openapi_discriminator_name]\n+      return nil unless discriminator_value\n+    {{#mappedModels}}\n+    {{#-first}}\n+\n+      _class = openapi_discriminator_mapping[discriminator_value.to_sym]\n+      return nil unless _class\n+\n+      {{moduleName}}.const_get(_class).build_from_hash(attributes)\n+    {{/-first}}\n+    {{/mappedModels}}\n+    {{^mappedModels}}\n+      {{moduleName}}.const_get(discriminator_value).build_from_hash(attributes)\n+    {{/mappedModels}}\n+    {{/discriminator}}\n+    {{^discriminator}}\n+      openapi_one_of.each do |_class|\n+        model = {{moduleName}}.const_get(_class).build_from_hash(attributes)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3NzgyMA=="}, "originalCommit": {"oid": "a0a7464786eb727d1ca4b483ad711bc79bc2bdf6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUzNDYwMQ==", "bodyText": "Oh one more thing I noticed, as I'm trying out this PR on our spec: the oneOf types can be primitive types like Float, String, ... so we can't call build_from_hash on those. Maybe you could add some special cases, comparing the openapi_one_of value to primitive types, and try to directly parse the value in that case ?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5706#discussion_r501534601", "createdAt": "2020-10-08T08:21:48Z", "author": {"login": "zippolyte"}, "path": "modules/openapi-generator/src/main/resources/ruby-client/partial_oneof_module.mustache", "diffHunk": "@@ -0,0 +1,69 @@\n+  {{#description}}\n+  # {{{description}}}\n+  {{/description}}\n+  module {{classname}}\n+    {{#oneOf}}\n+    {{#-first}}\n+    # List of class defined in oneOf (OpenAPI v3)\n+    def self.openapi_one_of\n+      [\n+    {{/-first}}\n+        :'{{{.}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      ]\n+    end\n+\n+    {{/-last}}\n+    {{/oneOf}}\n+    {{#discriminator}}\n+    {{#propertyName}}\n+    # discriminator's property name in OpenAPI v3\n+    def self.openapi_discriminator_name\n+      :'{{{.}}}'\n+    end\n+\n+    {{/propertyName}}\n+    {{#mappedModels}}\n+    {{#-first}}\n+    # discriminator's mapping in OpenAPI v3\n+    def self.openapi_discriminator_mapping\n+      {\n+    {{/-first}}\n+        :'{{{mappingName}}}' => :'{{{modelName}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      }\n+    end\n+    {{/-last}}\n+    {{/mappedModels}}\n+\n+    {{/discriminator}}\n+    # Builds the object from hash\n+    # @param [Hash] attributes Model attributes in the form of hash\n+    # @return [Object] Returns the model itself\n+    def self.build_from_hash(attributes)\n+    {{#discriminator}}\n+      discriminator_value = attributes[openapi_discriminator_name]\n+      return nil unless discriminator_value\n+    {{#mappedModels}}\n+    {{#-first}}\n+\n+      _class = openapi_discriminator_mapping[discriminator_value.to_sym]\n+      return nil unless _class\n+\n+      {{moduleName}}.const_get(_class).build_from_hash(attributes)\n+    {{/-first}}\n+    {{/mappedModels}}\n+    {{^mappedModels}}\n+      {{moduleName}}.const_get(discriminator_value).build_from_hash(attributes)\n+    {{/mappedModels}}\n+    {{/discriminator}}\n+    {{^discriminator}}\n+      openapi_one_of.each do |_class|\n+        model = {{moduleName}}.const_get(_class).build_from_hash(attributes)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3NzgyMA=="}, "originalCommit": {"oid": "a0a7464786eb727d1ca4b483ad711bc79bc2bdf6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUzNzQ5Mw==", "bodyText": "Yes, this has been pointed out and it is something I plan to address #5706 (comment)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5706#discussion_r501537493", "createdAt": "2020-10-08T08:26:27Z", "author": {"login": "jfeltesse-mdsol"}, "path": "modules/openapi-generator/src/main/resources/ruby-client/partial_oneof_module.mustache", "diffHunk": "@@ -0,0 +1,69 @@\n+  {{#description}}\n+  # {{{description}}}\n+  {{/description}}\n+  module {{classname}}\n+    {{#oneOf}}\n+    {{#-first}}\n+    # List of class defined in oneOf (OpenAPI v3)\n+    def self.openapi_one_of\n+      [\n+    {{/-first}}\n+        :'{{{.}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      ]\n+    end\n+\n+    {{/-last}}\n+    {{/oneOf}}\n+    {{#discriminator}}\n+    {{#propertyName}}\n+    # discriminator's property name in OpenAPI v3\n+    def self.openapi_discriminator_name\n+      :'{{{.}}}'\n+    end\n+\n+    {{/propertyName}}\n+    {{#mappedModels}}\n+    {{#-first}}\n+    # discriminator's mapping in OpenAPI v3\n+    def self.openapi_discriminator_mapping\n+      {\n+    {{/-first}}\n+        :'{{{mappingName}}}' => :'{{{modelName}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      }\n+    end\n+    {{/-last}}\n+    {{/mappedModels}}\n+\n+    {{/discriminator}}\n+    # Builds the object from hash\n+    # @param [Hash] attributes Model attributes in the form of hash\n+    # @return [Object] Returns the model itself\n+    def self.build_from_hash(attributes)\n+    {{#discriminator}}\n+      discriminator_value = attributes[openapi_discriminator_name]\n+      return nil unless discriminator_value\n+    {{#mappedModels}}\n+    {{#-first}}\n+\n+      _class = openapi_discriminator_mapping[discriminator_value.to_sym]\n+      return nil unless _class\n+\n+      {{moduleName}}.const_get(_class).build_from_hash(attributes)\n+    {{/-first}}\n+    {{/mappedModels}}\n+    {{^mappedModels}}\n+      {{moduleName}}.const_get(discriminator_value).build_from_hash(attributes)\n+    {{/mappedModels}}\n+    {{/discriminator}}\n+    {{^discriminator}}\n+      openapi_one_of.each do |_class|\n+        model = {{moduleName}}.const_get(_class).build_from_hash(attributes)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3NzgyMA=="}, "originalCommit": {"oid": "a0a7464786eb727d1ca4b483ad711bc79bc2bdf6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MjI5Mg==", "bodyText": "Ah right, sorry for the noise \ud83d\ude48", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5706#discussion_r501562292", "createdAt": "2020-10-08T09:05:04Z", "author": {"login": "zippolyte"}, "path": "modules/openapi-generator/src/main/resources/ruby-client/partial_oneof_module.mustache", "diffHunk": "@@ -0,0 +1,69 @@\n+  {{#description}}\n+  # {{{description}}}\n+  {{/description}}\n+  module {{classname}}\n+    {{#oneOf}}\n+    {{#-first}}\n+    # List of class defined in oneOf (OpenAPI v3)\n+    def self.openapi_one_of\n+      [\n+    {{/-first}}\n+        :'{{{.}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      ]\n+    end\n+\n+    {{/-last}}\n+    {{/oneOf}}\n+    {{#discriminator}}\n+    {{#propertyName}}\n+    # discriminator's property name in OpenAPI v3\n+    def self.openapi_discriminator_name\n+      :'{{{.}}}'\n+    end\n+\n+    {{/propertyName}}\n+    {{#mappedModels}}\n+    {{#-first}}\n+    # discriminator's mapping in OpenAPI v3\n+    def self.openapi_discriminator_mapping\n+      {\n+    {{/-first}}\n+        :'{{{mappingName}}}' => :'{{{modelName}}}'{{^-last}},{{/-last}}\n+    {{#-last}}\n+      }\n+    end\n+    {{/-last}}\n+    {{/mappedModels}}\n+\n+    {{/discriminator}}\n+    # Builds the object from hash\n+    # @param [Hash] attributes Model attributes in the form of hash\n+    # @return [Object] Returns the model itself\n+    def self.build_from_hash(attributes)\n+    {{#discriminator}}\n+      discriminator_value = attributes[openapi_discriminator_name]\n+      return nil unless discriminator_value\n+    {{#mappedModels}}\n+    {{#-first}}\n+\n+      _class = openapi_discriminator_mapping[discriminator_value.to_sym]\n+      return nil unless _class\n+\n+      {{moduleName}}.const_get(_class).build_from_hash(attributes)\n+    {{/-first}}\n+    {{/mappedModels}}\n+    {{^mappedModels}}\n+      {{moduleName}}.const_get(discriminator_value).build_from_hash(attributes)\n+    {{/mappedModels}}\n+    {{/discriminator}}\n+    {{^discriminator}}\n+      openapi_one_of.each do |_class|\n+        model = {{moduleName}}.const_get(_class).build_from_hash(attributes)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3NzgyMA=="}, "originalCommit": {"oid": "a0a7464786eb727d1ca4b483ad711bc79bc2bdf6"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTkwMzMxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/ruby-client/model_test.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMToxOTozMVrOHf6cow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNDowNFrOHiuVOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNTUwNw==", "bodyText": "probably missing a {{#-first}} here", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5706#discussion_r503225507", "createdAt": "2020-10-12T11:19:31Z", "author": {"login": "zippolyte"}, "path": "modules/openapi-generator/src/main/resources/ruby-client/model_test.mustache", "diffHunk": "@@ -43,6 +44,42 @@ describe '{{classname}}' do\n   end\n \n {{/vars}}\n+{{/oneOf}}\n+{{#oneOf}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24af61c49d7367b34fd29a196777c5891646a1af"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3MjczMQ==", "bodyText": "Indeed. Thanks for spotting that!", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5706#discussion_r506172731", "createdAt": "2020-10-16T08:34:04Z", "author": {"login": "jfeltesse-mdsol"}, "path": "modules/openapi-generator/src/main/resources/ruby-client/model_test.mustache", "diffHunk": "@@ -43,6 +44,42 @@ describe '{{classname}}' do\n   end\n \n {{/vars}}\n+{{/oneOf}}\n+{{#oneOf}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNTUwNw=="}, "originalCommit": {"oid": "24af61c49d7367b34fd29a196777c5891646a1af"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzI4MDQ3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/ruby-client/base_object.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NTozMVrOHprQTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMzo1NTozMVrOHprQTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ2MjM1MQ==", "bodyText": "Hmm I think you need to do the same check you did here  in api_client.mustache for build vs build_from_hash in the _deserialize method of base_object (line 72) in case the oneOf is a property of a regular object.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5706#discussion_r513462351", "createdAt": "2020-10-28T13:55:31Z", "author": {"login": "zippolyte"}, "path": "modules/openapi-generator/src/main/resources/ruby-client/base_object.mustache", "diffHunk": "@@ -93,7 +95,7 @@\n           is_nullable = self.class.openapi_nullable.include?(attr)\n           next if !is_nullable || (is_nullable && !instance_variable_defined?(:\"@#{attr}\"))\n         end\n-        \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528a64acc0143354b952a1c60f5a3995919fa685"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3700, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}