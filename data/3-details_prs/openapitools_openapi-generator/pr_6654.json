{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTYzMTA4", "number": 6654, "title": "[C++]Enable forward declaration for C++", "bodyText": "Fixes #6377\n@muttleyxd @MartinDelille @stkrwork @ravinikam\n@wing328\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project beforehand.\n Run the shell script ./bin/generate-samples.shto update all Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit as it would merge with master. These must match the expectations made by your contribution. You may regenerate an individual generator by passing the relevant config(s) as an argument to the script, for example ./bin/generate-samples.sh bin/config/java*. For Windows users, please run the script in Git BASH.\n File the PR against the correct branch: master\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.\n\nFixes this spec below\nopenapi: 3.0.0\ninfo:\n  version: 0.0.1\n  title: Test\npaths:\n  /endpoint:\n    get:\n      operationId: getOptions\n      description: \"-\"\n      parameters:\n      - name: OptionA\n        in: header\n        schema:\n          $ref: '#/components/schemas/OptionA'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OptionA'\ncomponents:\n  schemas:\n    OptionA:\n      type: object\n      description: 'OptionA'\n      properties:\n        suboptions:\n          type: array\n          description: 'Suboptions of OptionA'\n          items:\n            $ref: '#/components/schemas/OptionB'\n    OptionB:\n      type: object\n      description: 'OptionB'\n      properties:\n        suboptions1:\n          type: array\n          description: 'Suboptions 1 of OptionB'\n          items:\n            $ref: '#/components/schemas/OptionA'\n        suboptions2:\n          type: array\n          description: 'Suboptions 2 of OptionB'\n          items:\n            $ref: '#/components/schemas/OptionB'\nThis spec below cannot be fixed due to C++ limitations.\nopenapi: 3.0.0\ninfo:\n  version: 0.0.1\n  title: Test\npaths:\n  /endpoint:\n    get:\n      operationId: getOptions\n      description: \"-\"\n      parameters:\n      - name: OptionA\n        in: header\n        schema:\n          $ref: '#/components/schemas/OptionA'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OptionA'\ncomponents:\n  schemas:\n    OptionA:\n      type: object\n      description: 'OptionA'\n      properties:\n        suboptions:\n          $ref: '#/components/schemas/OptionB'\n    OptionB:\n      type: object\n      description: 'OptionB'\n      properties:\n        suboptions1:\n          $ref: '#/components/schemas/OptionA'\nGenerated code below has forward declaration and include as well.\n#ifndef OAIOptionB_H\n#define OAIOptionB_H\n\n#include <QJsonObject>\n\n#include \"OAIOptionA.h\"\n\n#include \"OAIEnum.h\"\n#include \"OAIObject.h\"\n\nnamespace OpenAPI {\nclass OAIOptionA;\n\nclass OAIOptionB : public OAIObject {\npublic:\n    OAIOptionB();\n    OAIOptionB(QString json);\n    ~OAIOptionB() override;\n\n    QString asJson() const override;\n    QJsonObject asJsonObject() const override;\n    void fromJsonObject(QJsonObject json) override;\n    void fromJson(QString jsonString) override;\n\n    OAIOptionA getSuboptions1() const;\n    void setSuboptions1(const OAIOptionA &suboptions1);\n    bool is_suboptions1_Set() const;\n    bool is_suboptions1_Valid() const;\n\n    virtual bool isSet() const override;\n    virtual bool isValid() const override;\n\nprivate:\n    void initializeModel();\n\n    OAIOptionA suboptions1;\n    bool m_suboptions1_isSet;\n    bool m_suboptions1_isValid;\n};\n\n} // namespace OpenAPI\nError for the one above\nOAIOptionB.h:53: error: field \u2018suboptions1\u2019 has incomplete type \u2018OpenAPI::OAIOptionA\u2019\n   53 |     OAIOptionA suboptions1;\n      |                ^~~~~~~~~~~", "createdAt": "2020-06-14T15:45:00Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6654", "merged": true, "mergeCommit": {"oid": "ec4e44a5f4c35f5eaaf34bcd1019c3983c77846f"}, "closed": true, "closedAt": "2020-06-21T21:17:04Z", "author": {"login": "etherealjoy"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrbvMwgFqTQzMDM5NDUwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrdTyQgBqjM0NDM0OTI1ODQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzk0NTAw", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6654#pullrequestreview-430394500", "createdAt": "2020-06-15T07:43:48Z", "commit": {"oid": "2467aa068c160b2a256e9d52458119be498a5bba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0Mzo0OVrOGjmqhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo0Mzo0OVrOGjmqhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4NjgyMQ==", "bodyText": "I don't do much Java, but this loop looks odd, too much indentation levels IMO.\nHalf-assed attempt at fixing this a little - but I went down to 4 indentation levels.\nI simply inverted the if statements, so they could probably be written in a smarter way.\nfor (CodegenProperty property : model.vars) {\n\tif (!(property.isContainer && property.mostInnerItems.isModel) && !(property.isModel))\n\t\tcontinue;\n\t\n\tString innerPropertyType = property.isContainer ? property.mostInnerItems.baseType : property.baseType;\n\tfor (final Entry<String, Object> mo : objs.entrySet()) {\n\t\tCodegenModel innerModel = ModelUtils.getModelByName(mo.getKey(), objs);\n\t\tif (!(innerPropertyType.equals(innerModel.classname) && !innerPropertyType.equals(model.classname) && innerModel.hasVars))\n\t\t\tcontinue;\n\t\tfor (CodegenProperty p : innerModel.vars) {\n\t\t\tif (!((p.isModel && p.dataType.equals(model.classname)) || (p.isContainer && p.mostInnerItems.baseType.equals(model.classname))))\n\t\t\t\tcontinue;\n\t\t\tString forwardDecl = \"class \" + innerModel.classname + \";\";\n\t\t\tif (!forwardDeclarations.contains(forwardDecl)) {\n\t\t\t\tforwardDeclarations.add(forwardDecl);\n\t\t\t}\n\t\t}\n\t}\n}", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6654#discussion_r439986821", "createdAt": "2020-06-15T07:43:49Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractCppCodegen.java", "diffHunk": "@@ -353,4 +357,47 @@ public void preprocessOpenAPI(OpenAPI openAPI) {\n         }\n         return postProcessModelsEnum(objs);\n     }\n+\n+    @Override\n+    public Map<String, Object> postProcessAllModels(Map<String, Object> objs){\n+        Map<String, Object> models = super.postProcessAllModels(objs);\n+        for (final Entry<String, Object> model : models.entrySet()) {\n+            CodegenModel mo = ModelUtils.getModelByName(model.getKey(), models);\n+            addForwardDeclarations(mo, models);\n+        }\n+        return models;\n+    }\n+\n+    private void addForwardDeclarations(CodegenModel model, Map<String, Object> objs) {\n+        List<String> forwardDeclarations = new ArrayList<String>();\n+        if(!model.hasVars) {\n+            return;\n+        }\n+        for(CodegenProperty property : model.vars){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2467aa068c160b2a256e9d52458119be498a5bba"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "825c53ece38328df0d60198b559ce3b25847c032", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/825c53ece38328df0d60198b559ce3b25847c032", "committedDate": "2020-06-15T09:32:58Z", "message": "Enable forward declaration for C++"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfbc6f4b56a814d48ba532ab85372021f9bef035", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/bfbc6f4b56a814d48ba532ab85372021f9bef035", "committedDate": "2020-06-15T09:32:58Z", "message": "Change local var name for readability and remove newline char"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "823275616ab6aef51e5d26a122823ba811c5d1a2", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/823275616ab6aef51e5d26a122823ba811c5d1a2", "committedDate": "2020-06-15T09:32:59Z", "message": "Rename variables and refactor if statements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2467aa068c160b2a256e9d52458119be498a5bba", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/2467aa068c160b2a256e9d52458119be498a5bba", "committedDate": "2020-06-14T22:51:31Z", "message": "Change local var name for readability and remove newline char"}, "afterCommit": {"oid": "823275616ab6aef51e5d26a122823ba811c5d1a2", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/823275616ab6aef51e5d26a122823ba811c5d1a2", "committedDate": "2020-06-15T09:32:59Z", "message": "Rename variables and refactor if statements"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2068, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}