{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNzQ1MDcw", "number": 4998, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjoyNDoxMlrODYO61w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNjoxMjozMFrODgOIqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzM2ODU1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/Java/ApiClient.mustache", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjoyNDoxMlrOFd-RAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTowNDoyMVrOFeVu4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk3MzE4Nw==", "bodyText": "We should probably check that serverIndex is within the length of servers, as it's a user-set value and can be wrong.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4998#discussion_r366973187", "createdAt": "2020-01-15T16:24:12Z", "author": {"login": "bkabrda"}, "path": "modules/openapi-generator/src/main/resources/Java/ApiClient.mustache", "diffHunk": "@@ -626,8 +684,15 @@ public class ApiClient {\n    * @return The full URL\n    */\n   private String buildUrl(String path, List<Pair> queryParams, List<Pair> collectionQueryParams) {\n+    String baseURL;\n+    if (serverIndex != null) {\n+      baseURL = servers[serverIndex].URL(serverVariables);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ddc182687ad5ae02a4d45ef3b61c01c6cf730e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMjc2Nw==", "bodyText": "It will raise anyway.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4998#discussion_r367002767", "createdAt": "2020-01-15T17:18:34Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/resources/Java/ApiClient.mustache", "diffHunk": "@@ -626,8 +684,15 @@ public class ApiClient {\n    * @return The full URL\n    */\n   private String buildUrl(String path, List<Pair> queryParams, List<Pair> collectionQueryParams) {\n+    String baseURL;\n+    if (serverIndex != null) {\n+      baseURL = servers[serverIndex].URL(serverVariables);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk3MzE4Nw=="}, "originalCommit": {"oid": "f1ddc182687ad5ae02a4d45ef3b61c01c6cf730e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxOTg2OQ==", "bodyText": "I agreed with @bkabrda to have a better error/exception message similar to what we've done in other generators, e.g. Python\n        except IndexError:\n            raise ValueError(\n                \"Invalid index {0} when selecting the host settings. \"\n                \"Must be less than {1}\".format(index, len(servers)))\n\nhttps://github.com/OpenAPITools/openapi-generator/blob/master/samples/client/petstore/python/petstore_api/configuration.py#L316", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4998#discussion_r367219869", "createdAt": "2020-01-16T03:53:17Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/resources/Java/ApiClient.mustache", "diffHunk": "@@ -626,8 +684,15 @@ public class ApiClient {\n    * @return The full URL\n    */\n   private String buildUrl(String path, List<Pair> queryParams, List<Pair> collectionQueryParams) {\n+    String baseURL;\n+    if (serverIndex != null) {\n+      baseURL = servers[serverIndex].URL(serverVariables);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk3MzE4Nw=="}, "originalCommit": {"oid": "f1ddc182687ad5ae02a4d45ef3b61c01c6cf730e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM1NzY2Ng==", "bodyText": "@wing328 I have added the range check.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4998#discussion_r367357666", "createdAt": "2020-01-16T11:04:21Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/resources/Java/ApiClient.mustache", "diffHunk": "@@ -626,8 +684,15 @@ public class ApiClient {\n    * @return The full URL\n    */\n   private String buildUrl(String path, List<Pair> queryParams, List<Pair> collectionQueryParams) {\n+    String baseURL;\n+    if (serverIndex != null) {\n+      baseURL = servers[serverIndex].URL(serverVariables);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk3MzE4Nw=="}, "originalCommit": {"oid": "f1ddc182687ad5ae02a4d45ef3b61c01c6cf730e"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzQxMjg0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/ApiClient.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjozNjozMFrOFd-s7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoxOToyMFrOFeAGBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk4MDMzMg==", "bodyText": "Maybe we could preserve backwards compatibility here by also keeping the method with its original signature, which would call this new method while passing operation=null?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4998#discussion_r366980332", "createdAt": "2020-01-15T16:36:30Z", "author": {"login": "bkabrda"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/ApiClient.mustache", "diffHunk": "@@ -684,12 +785,24 @@ public class ApiClient {\n    * @return The response body in type of string\n    * @throws ApiException API exception\n    */\n-  public <T> ApiResponse<T> invokeAPI(String path, String method, List<Pair> queryParams, Object body, Map<String, String> headerParams, Map<String, String> cookieParams, Map<String, Object> formParams, String accept, String contentType, String[] authNames, GenericType<T> returnType) throws ApiException {\n+  public <T> ApiResponse<T> invokeAPI(String operation, String path, String method, List<Pair> queryParams, Object body, Map<String, String> headerParams, Map<String, String> cookieParams, Map<String, Object> formParams, String accept, String contentType, String[] authNames, GenericType<T> returnType) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "594f055ff9191dbb375f846d341218c1b96b66a7"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMzE0Mg==", "bodyText": "I am adding:\ndiff --git a/modules/openapi-generator/src/main/resources/Java/libraries/jersey2/ApiClient.mustache b/modules/openapi-generator/src/main/resources/Java/libraries/jersey2/ApiClient.mustache\nindex ee4d7a6d10..bef8929e66 100644\n--- a/modules/openapi-generator/src/main/resources/Java/libraries/jersey2/ApiClient.mustache\n+++ b/modules/openapi-generator/src/main/resources/Java/libraries/jersey2/ApiClient.mustache\n@@ -906,6 +906,14 @@ public class ApiClient {\n     }\n   }\n \n+  /**\n+   * @deprecated Add qualified name of the operation as a first parameter.\n+   */\n+  @Deprecated\n+  public <T> ApiResponse<T> invokeAPI(String path, String method, List<Pair> queryParams, Object body, Map<String, String> headerParams, Map<String, String> cookieParams, Map<String, Object> formParams, String accept, String contentType, String[] authNames, GenericType<T> returnType) throws ApiException {\n+    return invokeAPI(null, path, method, queryParams, body, headerParams, cookieParams, formParams, accept, contentType, authNames, returnType);\n+  }\n+\n   /**\n    * Build the Client used to make HTTP requests.\n    * @param debugging Debug setting", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4998#discussion_r367003142", "createdAt": "2020-01-15T17:19:20Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/ApiClient.mustache", "diffHunk": "@@ -684,12 +785,24 @@ public class ApiClient {\n    * @return The response body in type of string\n    * @throws ApiException API exception\n    */\n-  public <T> ApiResponse<T> invokeAPI(String path, String method, List<Pair> queryParams, Object body, Map<String, String> headerParams, Map<String, String> cookieParams, Map<String, Object> formParams, String accept, String contentType, String[] authNames, GenericType<T> returnType) throws ApiException {\n+  public <T> ApiResponse<T> invokeAPI(String operation, String path, String method, List<Pair> queryParams, Object body, Map<String, String> headerParams, Map<String, String> cookieParams, Map<String, Object> formParams, String accept, String contentType, String[] authNames, GenericType<T> returnType) throws ApiException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk4MDMzMg=="}, "originalCommit": {"oid": "594f055ff9191dbb375f846d341218c1b96b66a7"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc2NzQyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/Java/ServerConfiguration.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozNjo0OFrOFoNznA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozNjo0OFrOFoNznA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxMzU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import com.datadog.api.v1.client.ServerVariable;\n          \n          \n            \n            import {{invokerPackage}}.ServerVariable;", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4998#discussion_r377713564", "createdAt": "2020-02-11T15:36:48Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/resources/Java/ServerConfiguration.mustache", "diffHunk": "@@ -0,0 +1,60 @@\n+package {{invokerPackage}};\n+\n+import java.util.Map;\n+\n+import com.datadog.api.v1.client.ServerVariable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b84f51db5d85d72f001ad713c02cc9d8cdf46f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTEyNjE5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/ApiClient.mustache", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNjoxMjozMFrOFqUIvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNjoxMjozMFrOFqUIvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxNDQzMA==", "bodyText": "Notice here to consumers that if new server variable functionality causes issue, one may call setServerIndex(null) to revert to previous behavior. Current default behavior with the server index 0 behaves in the same way as before, but moves the URL configuration to the servers array.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4998#discussion_r379914430", "createdAt": "2020-02-16T16:12:30Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/ApiClient.mustache", "diffHunk": "@@ -684,12 +783,36 @@ public class ApiClient {\n    * @return The response body in type of string\n    * @throws ApiException API exception\n    */\n-  public <T> ApiResponse<T> invokeAPI(String path, String method, List<Pair> queryParams, Object body, Map<String, String> headerParams, Map<String, String> cookieParams, Map<String, Object> formParams, String accept, String contentType, String[] authNames, GenericType<T> returnType) throws ApiException {\n+  public <T> ApiResponse<T> invokeAPI(String operation, String path, String method, List<Pair> queryParams, Object body, Map<String, String> headerParams, Map<String, String> cookieParams, Map<String, Object> formParams, String accept, String contentType, String[] authNames, GenericType<T> returnType) throws ApiException {\n     updateParamsForAuth(authNames, queryParams, headerParams, cookieParams);\n \n-    // Not using `.target(this.basePath).path(path)` below,\n+    // Not using `.target(targetURL).path(path)` below,\n     // to support (constant) query string in `path`, e.g. \"/posts?draft=1\"\n-    WebTarget target = httpClient.target(this.basePath + path);\n+    String targetURL;\n+    if (serverIndex != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e299f8da88b080b98788260d6b4cf08a1fa2cebb"}, "originalPosition": 148}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4036, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}