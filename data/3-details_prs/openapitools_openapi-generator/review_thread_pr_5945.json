{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDY0NTM4", "number": 5945, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMTozMjoyM1rODzgZGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMTozMjoyM1rODzgZGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzM0NjgxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMTozMjoyM1rOGH_5YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzoyMzowMVrOGJckGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0MDA5Nw==", "bodyText": "@sebastien-rosset can we discuss this over Skype?\nI am concerned with doing it this way because many python classes inherit from the object type. So if we did it this way, it would allow in a ton of other class instances that we shouldn't like set, tuple, and arbitrary other classes.\nSwagger/Openapi only allows specific types (string, int, float, dict, list, bytes, datetime, date, file_type, none_type)\nMy preference would be to instead convert these any type classes in python into a composed schema where it oneOf allows any type. As an added benefit, this could maybe be used to verify that we can have oneOf models with simple or complex types, which I'm not sure we can do.\nThings like:\noneOf:\n\nstring\nPet\n\nWhat do you think?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5945#discussion_r411040097", "createdAt": "2020-04-20T01:32:23Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -84,7 +84,7 @@ COERCION_INDEX_BY_TYPE = {\n     date: 10,\n     str: 11,\n     file_type: 12,   # 'file_type' is an alias for the built-in 'file' or 'io.IOBase' type.\n-    object: 13,      # Any type, the 'type' attribute is not specified in a schema in a OAS document.\n+    object: 13,      # The 'type' attribute is not specified in the OAS schema.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332d5f540b336db23fd622ec526788dbff4431d4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU1ODM2MQ==", "bodyText": "@sebastien-rosset can we discuss this over Skype?\nI am concerned with doing it this way because many python classes inherit from the object type. So if we did it this way, it would allow in a ton of other class instances that we shouldn't like set, tuple, and arbitrary other classes.\nSwagger/Openapi only allows specific types (string, int, float, dict, list, bytes, datetime, date, file_type, none_type)\nMy preference would be to instead convert these any type classes in python into a composed schema where it oneOf allows any type. As an added benefit, this could maybe be used to verify that we can have oneOf models with simple or complex types, which I'm not sure we can do.\nThings like:\noneOf:\n\nstring\nPet\n\nWhat do you think?\n\nYes I think that makes sense. Currently, when the type is \"any\", the generated openapi_types() function has a dict of properties to set of allowed types, and the allowed type is \"object\".  That currently causes a runtime exception. So instead of having \"object\" in the list, we would enumerate all possible types: str, bool, date, datetime, dict, float, int, list", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5945#discussion_r412558361", "createdAt": "2020-04-21T23:23:01Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -84,7 +84,7 @@ COERCION_INDEX_BY_TYPE = {\n     date: 10,\n     str: 11,\n     file_type: 12,   # 'file_type' is an alias for the built-in 'file' or 'io.IOBase' type.\n-    object: 13,      # Any type, the 'type' attribute is not specified in a schema in a OAS document.\n+    object: 13,      # The 'type' attribute is not specified in the OAS schema.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0MDA5Nw=="}, "originalCommit": {"oid": "332d5f540b336db23fd622ec526788dbff4431d4"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3556, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}