{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyOTk3NDI1", "number": 8103, "title": "[Go] Fix for 'Invalid code for files array in multipart/form-data request'\u2026", "bodyText": "Fixes invalid code generation, when multipart/form-data requestBody contains array of files (#8093).\nIn addition to existing ReadFormFileToTempFile function a new one introduced ReadFormFilesToTempFiles returning a slice of *os.File.\nTo avoid code duplication, common part related to FileHeader reading and storing in temporary file moved to new readFileHeaderToTempFile function.\ncontroller-api.mustache updated to invoke corresponding function, depending on either single or multiple files are in a request.\nCondition verifying the os package import extended in GoServerCodegen.java with a slice of files type.\nReplaced a temporary directory path \"tmp\" with \"\" in ioutil.TempFile call to make TempFile() using the default os.TempDir directory.\nTesting\nExisting automated tests passed. No new tests added.\nBuilt project locally, manually tested generated code with different specifications (single file, array of files, various file formats).\n\nTechnical committee\n@antihax @grokify @kemokemo @bkabrda\n\nPR checklist\n\n Read the contribution guidelines.\n Pull Request title clearly describes the work in the pull request and Pull Request description provides details about how to validate the work. Missing information here may result in delayed response from the community.\n If contributing template-only or documentation-only changes which will change sample output, build the project beforehand.\n Run the shell script ./bin/generate-samples.shto update all Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit as it would merge with master. These must match the expectations made by your contribution. You may regenerate an individual generator by passing the relevant config(s) as an argument to the script, for example ./bin/generate-samples.sh bin/configs/java*. For Windows users, please run the script in Git BASH.\n File the PR against the correct branch: master\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.", "createdAt": "2020-12-05T10:51:08Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8103", "merged": true, "mergeCommit": {"oid": "9e5610488f8b649856a72cd25695fc071b0ca1c4"}, "closed": true, "closedAt": "2020-12-10T10:48:45Z", "author": {"login": "aliakseiz"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjJjDWgH2gAyNTMyOTk3NDI1OjAzM2IwNmQ2Mzc4ZWUwYWZmOTEwMTVmNDNkMWRjY2NhOGI5N2UzMGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdyWAwPgFqTU3MzQyOTI0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "033b06d6378ee0aff91015f43d1dccca8b97e30b", "author": {"user": {"login": "aliakseiz", "name": "Aliaksei Zhuk"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/033b06d6378ee0aff91015f43d1dccca8b97e30b", "committedDate": "2020-12-05T10:12:01Z", "message": "Fix for 'Invalid code for files array in multipart/form-data request' (OpenAPITools#8093)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de9d4b7c1dad536e23610f5ac64a1136d5f6e5a2", "author": {"user": {"login": "aliakseiz", "name": "Aliaksei Zhuk"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/de9d4b7c1dad536e23610f5ac64a1136d5f6e5a2", "committedDate": "2020-12-05T12:56:04Z", "message": "Executed ensure-up-to-date"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2b22255bd2a5b39d6fa3f5f3d3b5e0863f1631f", "author": {"user": {"login": "aliakseiz", "name": "Aliaksei Zhuk"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a2b22255bd2a5b39d6fa3f5f3d3b5e0863f1631f", "committedDate": "2020-12-05T11:22:17Z", "message": "Ran ensure-up-to-date"}, "afterCommit": {"oid": "de9d4b7c1dad536e23610f5ac64a1136d5f6e5a2", "author": {"user": {"login": "aliakseiz", "name": "Aliaksei Zhuk"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/de9d4b7c1dad536e23610f5ac64a1136d5f6e5a2", "committedDate": "2020-12-05T12:56:04Z", "message": "Executed ensure-up-to-date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bb417ce40c9ef44e924f934accf041f5acc72f5", "author": {"user": {"login": "aliakseiz", "name": "Aliaksei Zhuk"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/2bb417ce40c9ef44e924f934accf041f5acc72f5", "committedDate": "2020-12-07T13:02:26Z", "message": "Replaced spaces with tabs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MDcyMDk3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8103#pullrequestreview-549072097", "createdAt": "2020-12-10T10:48:39Z", "commit": {"oid": "2bb417ce40c9ef44e924f934accf041f5acc72f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNDI5MjQy", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8103#pullrequestreview-573429242", "createdAt": "2021-01-21T15:12:11Z", "commit": {"oid": "2bb417ce40c9ef44e924f934accf041f5acc72f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNToxMjoxMVrOIX7MGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNToxMjoxMVrOIX7MGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk1NzkxMw==", "bodyText": "multipart is not defined as an import here. We should add \"mime/multipart\" in the import list", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8103#discussion_r561957913", "createdAt": "2021-01-21T15:12:11Z", "author": {"login": "ys"}, "path": "modules/openapi-generator/src/main/resources/go-server/routers.mustache", "diffHunk": "@@ -66,28 +66,61 @@ func EncodeJSONResponse(i interface{}, status *int, w http.ResponseWriter) error\n \n // ReadFormFileToTempFile reads file data from a request form and writes it to a temporary file\n func ReadFormFileToTempFile(r *http.Request, key string) (*os.File, error) {\n-\tr.ParseForm()\n-\tformFile, _, err := r.FormFile(key)\n+\t_, fileHeader, err := r.FormFile(key)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n \n-\tdefer formFile.Close()\n-\tfile, err := ioutil.TempFile(\"tmp\", key)\n+\treturn readFileHeaderToTempFile(fileHeader)\n+}\n+\n+// ReadFormFilesToTempFiles reads files array data from a request form and writes it to a temporary files\n+func ReadFormFilesToTempFiles(r *http.Request, key string) ([]*os.File, error) {\n+\tif err := r.ParseMultipartForm(32 << 20); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\tfiles := make([]*os.File, 0, len(r.MultipartForm.File[key]))\n+\n+\tfor _, fileHeader := range r.MultipartForm.File[key] {\n+\t\tfile, err := readFileHeaderToTempFile(fileHeader)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\n+\t\tfiles = append(files, file)\n+\t}\n+\n+\treturn files, nil\n+}\n+\n+// readFileHeaderToTempFile reads multipart.FileHeader and writes it to a temporary file\n+func readFileHeaderToTempFile(fileHeader *multipart.FileHeader) (*os.File, error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb417ce40c9ef44e924f934accf041f5acc72f5"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1903, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}