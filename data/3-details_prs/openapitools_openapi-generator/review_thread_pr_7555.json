{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NDY2MjAw", "number": 7555, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjowMjowNVrOEqYl0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMToxNjo1MFrOEynLNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODc4NTQ2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/model.mustache", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjowMjowNVrOHcjxlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjoxNjo0NFrOHo5T-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwODMxMA==", "bodyText": "This code looks good but it is being added to every model that is generated which creates a lot of extra lines.\nHow about centralizing a utility fn to do this or putting it as a class method in a base class?\nThat's what we do in python_experimental and we do it to minimize code duplication.\n\nmodelutils.model_to_dict\nusing it in a model template in our ModelNormal object based model class\nexample output model method", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7555#discussion_r499708310", "createdAt": "2020-10-05T16:02:05Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/model.mustache", "diffHunk": "@@ -221,6 +221,40 @@ class {{classname}}(object):\n \n         return result\n \n+    def to_json_dict(self):\n+        \"\"\"Returns the model properties as a dict\"\"\"\n+        result = {}\n+\n+        def get_value(val):\n+            if hasattr(val, \"to_json_dict\"):\n+                return val.to_json_dict()\n+            elif hasattr(val, \"to_dict\"):\n+                return val.to_dict()\n+            else:\n+                return val\n+\n+        for attr, _ in six.iteritems(self.openapi_types):\n+            value = getattr(self, attr)\n+            key = self.attribute_map.get(attr, attr)\n+            if isinstance(value, list):\n+                result[key] = list(map(\n+                    lambda x: get_value(x),\n+                    value\n+                ))\n+            elif hasattr(value, \"to_json_dict\"):\n+                result[key] = value.to_json_dict()\n+            elif hasattr(value, \"to_dict\"):\n+                result[key] = value.to_dict()\n+            elif isinstance(value, dict):\n+                result[key] = dict(map(\n+                    lambda item: (item[0], get_value(item[1])),\n+                    value.items()\n+                ))\n+            else:\n+                result[key] = value\n+\n+        return result\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "851284c2e009ae664a8067abe9d3fc7285c0893e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY0NDA4OQ==", "bodyText": "Hi @spacether \uff0chave updated the PR.  I modified the to_dict function instead of adding a new function, and it is compatible to those sdk which is not generated using the new code. Please help to review.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7555#discussion_r512644089", "createdAt": "2020-10-27T12:16:44Z", "author": {"login": "gtarcoder"}, "path": "modules/openapi-generator/src/main/resources/python/model.mustache", "diffHunk": "@@ -221,6 +221,40 @@ class {{classname}}(object):\n \n         return result\n \n+    def to_json_dict(self):\n+        \"\"\"Returns the model properties as a dict\"\"\"\n+        result = {}\n+\n+        def get_value(val):\n+            if hasattr(val, \"to_json_dict\"):\n+                return val.to_json_dict()\n+            elif hasattr(val, \"to_dict\"):\n+                return val.to_dict()\n+            else:\n+                return val\n+\n+        for attr, _ in six.iteritems(self.openapi_types):\n+            value = getattr(self, attr)\n+            key = self.attribute_map.get(attr, attr)\n+            if isinstance(value, list):\n+                result[key] = list(map(\n+                    lambda x: get_value(x),\n+                    value\n+                ))\n+            elif hasattr(value, \"to_json_dict\"):\n+                result[key] = value.to_json_dict()\n+            elif hasattr(value, \"to_dict\"):\n+                result[key] = value.to_dict()\n+            elif isinstance(value, dict):\n+                result[key] = dict(map(\n+                    lambda item: (item[0], get_value(item[1])),\n+                    value.items()\n+                ))\n+            else:\n+                result[key] = value\n+\n+        return result\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwODMxMA=="}, "originalCommit": {"oid": "851284c2e009ae664a8067abe9d3fc7285c0893e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTA2MTAwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/model.mustache", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMToxNjo1MFrOHpWiRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowODo1NVrOHuAaDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyMjg4NQ==", "bodyText": "Why would to_dict have more than 2 args?\nWhy is the number of arguments not constant?\nHow about:\ntry:\n    return x.to_dict(serialize)\nexcept AttributeError:\n    return x", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7555#discussion_r513122885", "createdAt": "2020-10-28T01:16:50Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/model.mustache", "diffHunk": "@@ -197,27 +197,37 @@ class {{classname}}(object):\n         return self.discriminator_value_class_map.get(discriminator_value)\n \n {{/discriminator}}\n-    def to_dict(self):\n+    def to_dict(self, serialize=False):\n         \"\"\"Returns the model properties as a dict\"\"\"\n         result = {}\n \n+        def convert(x):\n+            if hasattr(x, \"to_dict\"):\n+                args = inspect.getargspec(x.to_dict).args\n+                if len(args) == 1:\n+                    return x.to_dict()\n+                elif len(args) == 2:\n+                    return x.to_dict(serialize)\n+                else:\n+                    raise ValueError(\"Invalid argument size of to_dict\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da30ba4b37dd21cb892605be8f333e4cd4d71ba4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEzNDEyNA==", "bodyText": "Hi @spacether ,\nA model generated by newer openapi-generator-cli.jar should be able to apply to_dict function to its inner models which having only to_dict() but no to_dict(serialize) if those inner models are generated by an older openapi-generator-cli.jar\nSo I updated  to following code :\ndef convert(x):  \n    if hasattr(x, \"to_dict\"):\n        args = inspect.getargspec(x.to_dict).args  \n        if len(args) == 1:  \n            return x.to_dict()  \n        else:  \n            return x.to_dict(serialize)  \n    else:  \n        return x", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7555#discussion_r513134124", "createdAt": "2020-10-28T01:58:20Z", "author": {"login": "gtarcoder"}, "path": "modules/openapi-generator/src/main/resources/python/model.mustache", "diffHunk": "@@ -197,27 +197,37 @@ class {{classname}}(object):\n         return self.discriminator_value_class_map.get(discriminator_value)\n \n {{/discriminator}}\n-    def to_dict(self):\n+    def to_dict(self, serialize=False):\n         \"\"\"Returns the model properties as a dict\"\"\"\n         result = {}\n \n+        def convert(x):\n+            if hasattr(x, \"to_dict\"):\n+                args = inspect.getargspec(x.to_dict).args\n+                if len(args) == 1:\n+                    return x.to_dict()\n+                elif len(args) == 2:\n+                    return x.to_dict(serialize)\n+                else:\n+                    raise ValueError(\"Invalid argument size of to_dict\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyMjg4NQ=="}, "originalCommit": {"oid": "da30ba4b37dd21cb892605be8f333e4cd4d71ba4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwNjA3Nw==", "bodyText": "Hi @spacether ,  is the change ok to be merged?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7555#discussion_r514106077", "createdAt": "2020-10-29T09:11:15Z", "author": {"login": "gtarcoder"}, "path": "modules/openapi-generator/src/main/resources/python/model.mustache", "diffHunk": "@@ -197,27 +197,37 @@ class {{classname}}(object):\n         return self.discriminator_value_class_map.get(discriminator_value)\n \n {{/discriminator}}\n-    def to_dict(self):\n+    def to_dict(self, serialize=False):\n         \"\"\"Returns the model properties as a dict\"\"\"\n         result = {}\n \n+        def convert(x):\n+            if hasattr(x, \"to_dict\"):\n+                args = inspect.getargspec(x.to_dict).args\n+                if len(args) == 1:\n+                    return x.to_dict()\n+                elif len(args) == 2:\n+                    return x.to_dict(serialize)\n+                else:\n+                    raise ValueError(\"Invalid argument size of to_dict\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyMjg4NQ=="}, "originalCommit": {"oid": "da30ba4b37dd21cb892605be8f333e4cd4d71ba4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAwMzIxNQ==", "bodyText": "Hi @spacether  , would you please help to review this new change?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7555#discussion_r518003215", "createdAt": "2020-11-05T12:08:55Z", "author": {"login": "gtarcoder"}, "path": "modules/openapi-generator/src/main/resources/python/model.mustache", "diffHunk": "@@ -197,27 +197,37 @@ class {{classname}}(object):\n         return self.discriminator_value_class_map.get(discriminator_value)\n \n {{/discriminator}}\n-    def to_dict(self):\n+    def to_dict(self, serialize=False):\n         \"\"\"Returns the model properties as a dict\"\"\"\n         result = {}\n \n+        def convert(x):\n+            if hasattr(x, \"to_dict\"):\n+                args = inspect.getargspec(x.to_dict).args\n+                if len(args) == 1:\n+                    return x.to_dict()\n+                elif len(args) == 2:\n+                    return x.to_dict(serialize)\n+                else:\n+                    raise ValueError(\"Invalid argument size of to_dict\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyMjg4NQ=="}, "originalCommit": {"oid": "da30ba4b37dd21cb892605be8f333e4cd4d71ba4"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4130, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}