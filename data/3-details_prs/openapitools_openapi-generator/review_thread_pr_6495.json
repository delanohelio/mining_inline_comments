{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NDEzMDQz", "number": 6495, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMjoxNjoxN1rOEBkllA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMjoxOToyMlrOEBknUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDgzNDc2OnYy", "diffSide": "RIGHT", "path": "CI/samples.ci/client/petstore/java/test-manual/jersey2-java8/JSONComposedSchemaTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMjoxNjoxN1rOGdf4RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMjoxNjoxN1rOGdf4RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4NDE5Nw==", "bodyText": "@wing328 , I have temporarily commented out this code. If I enable it, then deserialization fails and the unit test fails. It looks like there is a problem when a compose schema (Drawing) has the additionalProperties keyword, in which case the generated Drawing.class extends from HashMap<String, X>", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6495#discussion_r433584197", "createdAt": "2020-06-02T02:16:17Z", "author": {"login": "sebastien-rosset"}, "path": "CI/samples.ci/client/petstore/java/test-manual/jersey2-java8/JSONComposedSchemaTest.java", "diffHunk": "@@ -46,23 +38,126 @@ public void testOneOfSchemaWithDiscriminator() throws Exception {\n         // Mammal can be one of whale, pig and zebra.\n         // pig has sub-classes.\n         String str = \"{ \\\"className\\\": \\\"whale\\\", \\\"hasBaleen\\\": true, \\\"hasTeeth\\\": false }\";\n-        /*\n-        DISABLING unit test for now until ambiguity of discriminator is resolved.\n         \n         // Note that the 'zebra' schema does not have any explicit property defined AND\n         // it has additionalProperties: true. Hence without a discriminator the above\n         // JSON payload would match both 'whale' and 'zebra'. This is because the 'hasBaleen'\n         // and 'hasTeeth' would be considered additional (undeclared) properties for 'zebra'.\n-        Mammal o = json.getContext(null).readValue(str, Mammal.class);\n+        AbstractOpenApiSchema o = json.getContext(null).readValue(str, Mammal.class);\n+        assertNotNull(o);\n         assertTrue(o.getActualInstance() instanceof Whale);\n \n         str = \"{ \\\"className\\\": \\\"zebra\\\" }\";\n         o = json.getContext(null).readValue(str, Mammal.class);\n+        assertNotNull(o);\n         assertTrue(o.getActualInstance() instanceof Zebra);\n \n+        // Deserialization test with indirections of 'oneOf' child schemas.\n+        // Mammal is oneOf whale, zebra and pig, and pig is itself one of BasquePig, DanishPig.\n         str = \"{ \\\"className\\\": \\\"BasquePig\\\" }\";\n         o = json.getContext(null).readValue(str, Mammal.class);\n         assertTrue(o.getActualInstance() instanceof BasquePig);\n+    }\n+\n+    @Test\n+    public void testOneOfNullable() throws Exception {\n+        String str = \"null\";\n+        // 'null' is a valid value for NullableShape because it is nullable.\n+        AbstractOpenApiSchema o = json.getContext(null).readValue(str, NullableShape.class);\n+        assertNull(o);\n+\n+        // 'null' is a valid value for ShapeOrNull because it is a oneOf with one of the\n+        // children being the null type.\n+        o = json.getContext(null).readValue(str, ShapeOrNull.class);\n+        assertNull(o);\n+\n+        // 'null' is not a valid value for the Shape model because it is not nullable.\n+        // An exception should be raised.\n+        Exception exception = assertThrows(JsonMappingException.class, () -> {\n+            json.getContext(null).readValue(str, Shape.class);\n+        });\n+        assertEquals(exception.getMessage(), \"Shape cannot be null\");\n+    }\n+\n+    /**\n+     * Test payload with more than one discriminator.\n+     */\n+    @Test\n+    public void testOneOfMultipleDiscriminators() throws Exception {\n+        // 'shapeType' is a discriminator for the 'Shape' model and\n+        // 'triangleType' is a discriminator forr the 'Triangle' model.\n+        String str = \"{ \\\"shapeType\\\": \\\"Triangle\\\", \\\"triangleType\\\": \\\"EquilateralTriangle\\\" }\";\n+\n+        // We should be able to deserialize a equilateral triangle into a EquilateralTriangle class.\n+        EquilateralTriangle t = json.getContext(null).readValue(str, EquilateralTriangle.class);\n+        assertNotNull(t);\n+\n+        // We should be able to deserialize a equilateral triangle into a triangle.\n+        AbstractOpenApiSchema o = json.getContext(null).readValue(str, Triangle.class);\n+        assertNotNull(o);\n+        assertTrue(o.getActualInstance() instanceof EquilateralTriangle);\n+\n+        // We should be able to deserialize a equilateral triangle into a shape.\n+        o = json.getContext(null).readValue(str, Shape.class);\n+        // The container is a shape, and the actual instance should be a EquilateralTriangle.        \n+        assertTrue(o instanceof Shape);\n+        assertTrue(o.getActualInstance() instanceof EquilateralTriangle);\n+\n+        // It is not valid to deserialize a equilateral triangle into a quadrilateral.\n+        Exception exception = assertThrows(JsonMappingException.class, () -> {\n+            json.getContext(null).readValue(str, Quadrilateral.class);\n+        });\n+        assertTrue(exception.getMessage().contains(\"Failed deserialization for Quadrilateral: 0 classes match result\"));\n+    }\n+\n+    @Test\n+    public void testOneOfNestedComposedSchema() throws Exception {\n+        /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa6f2bf8e34e3db7caa4fa761778ebb3188f123"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDgzNzU2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/anyof_model.mustache", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMjoxODowNVrOGdf59w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMjoxODowNVrOGdf59w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4NDYzMQ==", "bodyText": "@wing328 , is there a better way to fail deserialization of the null value that would work across all OAS schema types?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6495#discussion_r433584631", "createdAt": "2020-06-02T02:18:05Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/anyof_model.mustache", "diffHunk": "@@ -48,6 +52,19 @@ public class {{classname}} extends AbstractOpenApiSchema{{#vendorExtensions.x-im\n             {{/anyOf}}\n             throw new IOException(String.format(\"Failed deserialization for {{classname}}: no match found\"));\n         }\n+\n+        /**\n+         * Handle deserialization of the 'null' value.\n+         */\n+        @Override\n+        public {{classname}} getNullValue(DeserializationContext ctxt) throws JsonMappingException {\n+        {{#isNullable}}\n+            return null;\n+        {{/isNullable}}\n+        {{^isNullable}}\n+            throw new JsonMappingException(\"{{classname}} cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa6f2bf8e34e3db7caa4fa761778ebb3188f123"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDgzOTIyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/anyof_model.mustache", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMjoxOToyMlrOGdf7HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMjoxOToyMlrOGdf7HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4NDkyNA==", "bodyText": "@wing328 , it's a bit hacky for now, I'd rather not use a public method, but it's needed to have proper deserialization when there are multiple levels of oneOf/anyOf.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6495#discussion_r433584924", "createdAt": "2020-06-02T02:19:22Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/anyof_model.mustache", "diffHunk": "@@ -69,6 +86,7 @@ public class {{classname}} extends AbstractOpenApiSchema{{#vendorExtensions.x-im\n         schemas.put(\"{{{.}}}\", new GenericType<{{{.}}}>() {\n         });\n         {{/anyOf}}\n+        JSON.registerDescendants({{classname}}.class, Collections.unmodifiableMap(schemas));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa6f2bf8e34e3db7caa4fa761778ebb3188f123"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3394, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}