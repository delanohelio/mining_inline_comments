{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NjEzOTkw", "number": 6290, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMzo0NVrOD8PTSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNzoyNDo0N1rOD_LYag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkxODQ4OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMzo0NlrOGVDvlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxMTozOVrOGVFU9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDYxMg==", "bodyText": "@spacether , currently this unit test raises the following exception:\npetstore_api.exceptions.ApiValueError: Invalid input arguments input when making an instance of class Dog. Not all inputs were used. The unused input data is {'group': 'Terrier Group', 'size': 'medium'}\nIt looks like the existing code does not accept additional (undeclared) properties.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r424734612", "createdAt": "2020-05-13T21:13:46Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -176,3 +176,27 @@ def test_deserialize_fruit_null_value(self):\n \n         inst = petstore_api.FruitReq(None)\n         self.assertIsNone(inst)\n+\n+    def test_deserialize_all_of_with_additional_properties(self):\n+        \"\"\"\n+        deserialize data.\n+        \"\"\"\n+\n+        # Dog is allOf with two child schemas.\n+        # The OAS document for Dog does not specify the 'additionalProperties' keyword. \n+        # The additionalProperties keyword is used to control the handling of extra stuff,\n+        # that is, properties whose names are not listed in the properties keyword.\n+        # By default any additional properties are allowed.\n+        data = {\n+            'className': 'Dog',\n+            'color': 'brown',\n+            'breed': 'golden retriever',\n+            # Below are additional, undeclared properties\n+            'group': 'Terrier Group',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca81de731bb07e0eaa65ee565374870c54aad1c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0MTI2Ng==", "bodyText": "Does the java code set additionalProperties to true? I think that we should fix that on the java side, then the python will work.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r424741266", "createdAt": "2020-05-13T21:27:24Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -176,3 +176,27 @@ def test_deserialize_fruit_null_value(self):\n \n         inst = petstore_api.FruitReq(None)\n         self.assertIsNone(inst)\n+\n+    def test_deserialize_all_of_with_additional_properties(self):\n+        \"\"\"\n+        deserialize data.\n+        \"\"\"\n+\n+        # Dog is allOf with two child schemas.\n+        # The OAS document for Dog does not specify the 'additionalProperties' keyword. \n+        # The additionalProperties keyword is used to control the handling of extra stuff,\n+        # that is, properties whose names are not listed in the properties keyword.\n+        # By default any additional properties are allowed.\n+        data = {\n+            'className': 'Dog',\n+            'color': 'brown',\n+            'breed': 'golden retriever',\n+            # Below are additional, undeclared properties\n+            'group': 'Terrier Group',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDYxMg=="}, "originalCommit": {"oid": "fca81de731bb07e0eaa65ee565374870c54aad1c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0MzA1MA==", "bodyText": "The oas document spec version should determine this additionalProperties behavior", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r424743050", "createdAt": "2020-05-13T21:31:17Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -176,3 +176,27 @@ def test_deserialize_fruit_null_value(self):\n \n         inst = petstore_api.FruitReq(None)\n         self.assertIsNone(inst)\n+\n+    def test_deserialize_all_of_with_additional_properties(self):\n+        \"\"\"\n+        deserialize data.\n+        \"\"\"\n+\n+        # Dog is allOf with two child schemas.\n+        # The OAS document for Dog does not specify the 'additionalProperties' keyword. \n+        # The additionalProperties keyword is used to control the handling of extra stuff,\n+        # that is, properties whose names are not listed in the properties keyword.\n+        # By default any additional properties are allowed.\n+        data = {\n+            'className': 'Dog',\n+            'color': 'brown',\n+            'breed': 'golden retriever',\n+            # Below are additional, undeclared properties\n+            'group': 'Terrier Group',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDYxMg=="}, "originalCommit": {"oid": "fca81de731bb07e0eaa65ee565374870c54aad1c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0NDU3MA==", "bodyText": "Does the java code set additionalProperties to true? I think that we should fix that on the java side, then the python will work.\n\nok, let me check the Java side.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r424744570", "createdAt": "2020-05-13T21:34:48Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -176,3 +176,27 @@ def test_deserialize_fruit_null_value(self):\n \n         inst = petstore_api.FruitReq(None)\n         self.assertIsNone(inst)\n+\n+    def test_deserialize_all_of_with_additional_properties(self):\n+        \"\"\"\n+        deserialize data.\n+        \"\"\"\n+\n+        # Dog is allOf with two child schemas.\n+        # The OAS document for Dog does not specify the 'additionalProperties' keyword. \n+        # The additionalProperties keyword is used to control the handling of extra stuff,\n+        # that is, properties whose names are not listed in the properties keyword.\n+        # By default any additional properties are allowed.\n+        data = {\n+            'className': 'Dog',\n+            'color': 'brown',\n+            'breed': 'golden retriever',\n+            # Below are additional, undeclared properties\n+            'group': 'Terrier Group',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDYxMg=="}, "originalCommit": {"oid": "fca81de731bb07e0eaa65ee565374870c54aad1c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0NDk4OA==", "bodyText": "There is a good discussion at https://stackoverflow.com/questions/22689900/json-schema-allof-with-additionalproperties", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r424744988", "createdAt": "2020-05-13T21:35:43Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -176,3 +176,27 @@ def test_deserialize_fruit_null_value(self):\n \n         inst = petstore_api.FruitReq(None)\n         self.assertIsNone(inst)\n+\n+    def test_deserialize_all_of_with_additional_properties(self):\n+        \"\"\"\n+        deserialize data.\n+        \"\"\"\n+\n+        # Dog is allOf with two child schemas.\n+        # The OAS document for Dog does not specify the 'additionalProperties' keyword. \n+        # The additionalProperties keyword is used to control the handling of extra stuff,\n+        # that is, properties whose names are not listed in the properties keyword.\n+        # By default any additional properties are allowed.\n+        data = {\n+            'className': 'Dog',\n+            'color': 'brown',\n+            'breed': 'golden retriever',\n+            # Below are additional, undeclared properties\n+            'group': 'Terrier Group',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDYxMg=="}, "originalCommit": {"oid": "fca81de731bb07e0eaa65ee565374870c54aad1c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MDU2NA==", "bodyText": "Yes, this is a problem in Java codegen: https://github.com/OpenAPITools/openapi-generator/pull/6290/files#diff-57d7532cf464a8d7c24aab4b22ceb993R1102", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r424760564", "createdAt": "2020-05-13T22:11:39Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -176,3 +176,27 @@ def test_deserialize_fruit_null_value(self):\n \n         inst = petstore_api.FruitReq(None)\n         self.assertIsNone(inst)\n+\n+    def test_deserialize_all_of_with_additional_properties(self):\n+        \"\"\"\n+        deserialize data.\n+        \"\"\"\n+\n+        # Dog is allOf with two child schemas.\n+        # The OAS document for Dog does not specify the 'additionalProperties' keyword. \n+        # The additionalProperties keyword is used to control the handling of extra stuff,\n+        # that is, properties whose names are not listed in the properties keyword.\n+        # By default any additional properties are allowed.\n+        data = {\n+            'className': 'Dog',\n+            'color': 'brown',\n+            'breed': 'golden retriever',\n+            # Below are additional, undeclared properties\n+            'group': 'Terrier Group',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDYxMg=="}, "originalCommit": {"oid": "fca81de731bb07e0eaa65ee565374870c54aad1c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTQ0MzA5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjoyOToxMFrOGVwZug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0NzozNlrOGXLEIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA==", "bodyText": "@spacether , can you comment on:\n\nIn Python-experimental, what is the use case for modeling additionalProperties as a parent container? What is the purpose of calling addParentContainer()? I don't understand the use case.\n\nIf I comment out the call to addParentContainer(), nothing changes in the generated output of ./bin/openapi3/python-experimental-petstore.sh and ./openapi3/python-experimental-petstore.sh\n\n\nI am guessing the intent was addParentContainer should be called only when additionalProperties is a reference. It should not be called if additionalProperties: false. Right? I.e. if addProps is null, addParentContainer() should not be called.\nDoes it really matter if the additionalProperties are defined inline versus as a $ref? Shouldn't we set codegenModel.additionalPropertiesType in both cases? Or do we really need to model a $ref additionalProperties as a parent?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425466298", "createdAt": "2020-05-14T22:29:10Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -970,13 +972,17 @@ public String toInstantiationType(Schema property) {\n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n         Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        if (addProps != null) {\n+            if (addProps.get$ref() == null) {\n+                // if AdditionalProperties exists and is an inline definition, get its datatype and\n+                // store it in codegenModel.additionalPropertiesType.\n+                codegenModel.additionalPropertiesType = getTypeDeclaration(addProps);;\n+            } else {\n+                addParentContainer(codegenModel, codegenModel.name, schema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64723518dcd26fa487430e1a6a655c702019854e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ3NjYyMQ==", "bodyText": "So I'm not sure what benefit we get from calling addParentContainer. It looks like I copied and pasted that code from DefaultCodegen at:\n\n  \n    \n      openapi-generator/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java\n    \n    \n         Line 2796\n      in\n      dc1bdac\n    \n    \n    \n    \n\n        \n          \n           protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) { \n        \n    \n  \n\n\n\n\n\nThe way I read that code is that if additional properties exist, we call the if block.\nIf they don't call the else block. And the else block code is consistent with what the DefaultCodegen does in its own addAdditionPropertiesToCodeGenModel method.\n\n\nPer my #1 interpretation addParentContainer would be called if additionalProperties is false. It would also be called if additionalProperties is null.\n\n\nI don't think that it should matter if additionalProperties is inline or a $ref. Doesn't the code that we have work for both cases?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425476621", "createdAt": "2020-05-14T23:00:57Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -970,13 +972,17 @@ public String toInstantiationType(Schema property) {\n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n         Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        if (addProps != null) {\n+            if (addProps.get$ref() == null) {\n+                // if AdditionalProperties exists and is an inline definition, get its datatype and\n+                // store it in codegenModel.additionalPropertiesType.\n+                codegenModel.additionalPropertiesType = getTypeDeclaration(addProps);;\n+            } else {\n+                addParentContainer(codegenModel, codegenModel.name, schema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, "originalCommit": {"oid": "64723518dcd26fa487430e1a6a655c702019854e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ4MTE1Mg==", "bodyText": "v2.0 points us to the https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md JSON schema Draft 4 definition, and OpenAPI does not tell us a default value.\nPer here it sounds like an omitted additionalProperties should be an empty schema.\nv3.0.0 points us to the https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md JSON Schema Specification Wright Draft 00 definition, and OpenAPI does not tell us a default value.\nWright Draft 00 mentions\nIf \"additionalProperties\" is absent, it may be considered present with an empty schema as a value.\nbut that's a MAY not a MUST or SHALL. I can see us setting it to {} if omitted for v3.0.0 specs based on this.\nv3.0.3 explicitly says that it defaults to true here: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md\nSo it looks like in all of these examples the additionalProperties value should not be null before it gets here, it should be empty schema or True, do you agree?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425481152", "createdAt": "2020-05-14T23:16:08Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -970,13 +972,17 @@ public String toInstantiationType(Schema property) {\n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n         Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        if (addProps != null) {\n+            if (addProps.get$ref() == null) {\n+                // if AdditionalProperties exists and is an inline definition, get its datatype and\n+                // store it in codegenModel.additionalPropertiesType.\n+                codegenModel.additionalPropertiesType = getTypeDeclaration(addProps);;\n+            } else {\n+                addParentContainer(codegenModel, codegenModel.name, schema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, "originalCommit": {"oid": "64723518dcd26fa487430e1a6a655c702019854e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ4NDM3OA==", "bodyText": "I think the default is always specified regardless of the version, because of the following text in the OAS specs:\n\nThe following properties are taken from the JSON Schema definition but their definitions were adjusted to the OpenAPI Specification.\nadditionalProperties - Value can be boolean or object. Inline or referenced schema MUST be of a Schema Object and not a standard JSON Schema.\n\nNote OAS 2.0 is not exactly the same language as OAS 3.0, but they both mean the additionalProperties keyword is specified in the JSON schema validation draft.\nHence whatever is specified in JSON schema validation is applicable to OAS. Each OAS version is referring to a different version of the JSON drafts, but they all seem to have the same default behavior.\nSpecifically from https://tools.ietf.org/html/draft-wright-json-schema-validation-00#page-10:\n\nIf \"additionalProperties\" is absent, it may be considered present with an empty schema as a value.\n\nWhich means the values can be anything. So I don't think there is any version dependency.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425484378", "createdAt": "2020-05-14T23:27:17Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -970,13 +972,17 @@ public String toInstantiationType(Schema property) {\n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n         Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        if (addProps != null) {\n+            if (addProps.get$ref() == null) {\n+                // if AdditionalProperties exists and is an inline definition, get its datatype and\n+                // store it in codegenModel.additionalPropertiesType.\n+                codegenModel.additionalPropertiesType = getTypeDeclaration(addProps);;\n+            } else {\n+                addParentContainer(codegenModel, codegenModel.name, schema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, "originalCommit": {"oid": "64723518dcd26fa487430e1a6a655c702019854e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ4NTkxMw==", "bodyText": "BTW, this sentence in 3.0.3 is superfluous: \"Consistent with JSON Schema, additionalProperties defaults to true.\"  It's already defined in the JSON core/validation specs, hence it should not be repeated in OAS.\nIn fact in OAS 3.1, it was completely removed because the goal of the technical committee is for OAS to be a superset of JSON schema, i.e. supporting all JSON schema constructs as is, without the need to rephrase the JSON specification inside the OAS spec.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425485913", "createdAt": "2020-05-14T23:32:19Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -970,13 +972,17 @@ public String toInstantiationType(Schema property) {\n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n         Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        if (addProps != null) {\n+            if (addProps.get$ref() == null) {\n+                // if AdditionalProperties exists and is an inline definition, get its datatype and\n+                // store it in codegenModel.additionalPropertiesType.\n+                codegenModel.additionalPropertiesType = getTypeDeclaration(addProps);;\n+            } else {\n+                addParentContainer(codegenModel, codegenModel.name, schema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, "originalCommit": {"oid": "64723518dcd26fa487430e1a6a655c702019854e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ4NjM3OQ==", "bodyText": "The way I read that code is that if additional properties exist, we call the if block.\nIf they don't call the else block. And the else block code is consistent with what the DefaultCodegen does in its own addAdditionPropertiesToCodeGenModel method.\n\nok, let me try to refactor that code a bit so that it works the same whether it's a reference or not. I will add a unit test too to exercise the code.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425486379", "createdAt": "2020-05-14T23:33:52Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -970,13 +972,17 @@ public String toInstantiationType(Schema property) {\n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n         Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        if (addProps != null) {\n+            if (addProps.get$ref() == null) {\n+                // if AdditionalProperties exists and is an inline definition, get its datatype and\n+                // store it in codegenModel.additionalPropertiesType.\n+                codegenModel.additionalPropertiesType = getTypeDeclaration(addProps);;\n+            } else {\n+                addParentContainer(codegenModel, codegenModel.name, schema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, "originalCommit": {"oid": "64723518dcd26fa487430e1a6a655c702019854e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkzMDY5MA==", "bodyText": "Unfortunately, I found out the OpenAPI parser for a V2 document sets Schema.additionalProperties to the null value even when the OAS document has additionalProperties: true|false\nSo I need to add some logic that if the doc is version 2, then assume the old behavior, because we don't know if additionalProperties should be true or false. This seems to be a bug in the parser.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425930690", "createdAt": "2020-05-15T16:58:01Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -970,13 +972,17 @@ public String toInstantiationType(Schema property) {\n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n         Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        if (addProps != null) {\n+            if (addProps.get$ref() == null) {\n+                // if AdditionalProperties exists and is an inline definition, get its datatype and\n+                // store it in codegenModel.additionalPropertiesType.\n+                codegenModel.additionalPropertiesType = getTypeDeclaration(addProps);;\n+            } else {\n+                addParentContainer(codegenModel, codegenModel.name, schema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, "originalCommit": {"oid": "64723518dcd26fa487430e1a6a655c702019854e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2MjY2Ng==", "bodyText": "What if you added the CLI flag supportsAdditionalProperties\nAnd if the generator has it turned on, postprocess the spec to correctly set additionalProperties to {} if the input is null\nOr should that not be done, or be done in another PR?\nJust now I made this additionalProperties issue in swagger-parser to track it in that project", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425962666", "createdAt": "2020-05-15T18:00:43Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -970,13 +972,17 @@ public String toInstantiationType(Schema property) {\n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n         Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        if (addProps != null) {\n+            if (addProps.get$ref() == null) {\n+                // if AdditionalProperties exists and is an inline definition, get its datatype and\n+                // store it in codegenModel.additionalPropertiesType.\n+                codegenModel.additionalPropertiesType = getTypeDeclaration(addProps);;\n+            } else {\n+                addParentContainer(codegenModel, codegenModel.name, schema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, "originalCommit": {"oid": "64723518dcd26fa487430e1a6a655c702019854e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MTcxNA==", "bodyText": "I am adding a legacyAdditionalPropertiesBehavior CLI flag.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426951714", "createdAt": "2020-05-18T23:47:36Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -970,13 +972,17 @@ public String toInstantiationType(Schema property) {\n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n         Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        if (addProps != null) {\n+            if (addProps.get$ref() == null) {\n+                // if AdditionalProperties exists and is an inline definition, get its datatype and\n+                // store it in codegenModel.additionalPropertiesType.\n+                codegenModel.additionalPropertiesType = getTypeDeclaration(addProps);;\n+            } else {\n+                addParentContainer(codegenModel, codegenModel.name, schema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2NjI5OA=="}, "originalCommit": {"oid": "64723518dcd26fa487430e1a6a655c702019854e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTkwNDY0OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/models/drawing.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo1NjozNVrOGWIXIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMTo0MjowNFrOGWXZZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1ODg0OA==", "bodyText": "@spacether , here this is not correctly generated, it should be a reference to the Fruit class defined in ./petstore_api/models/fruit.py.\nI know the problem is in the addAdditionPropertiesToCodeGenModel function. When resolving a schema reference, the generated model name is not using the schema name because Schema.name is null. Do you have a recommendation how to fix this problem?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425858848", "createdAt": "2020-05-15T14:56:35Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/models/drawing.py", "diffHunk": "@@ -69,7 +69,7 @@ class Drawing(ModelNormal):\n     validations = {\n     }\n \n-    additional_properties_type = None\n+    additional_properties_type = (one_ofapplebanana.OneOfapplebanana,)  # noqa: E501", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ec230f74d25a22e49734e06bb39fbc7c18cfc6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5NDEyOA==", "bodyText": "This issue could be handled in that function or it could be handled in getTypeString.\nMy preference is to handle it in getTypeString because that is our function that handles conversions from Schemas to python types.\nHow about in get_type string we add an in block that handles the case where schema is of type composed schema? If that is the case we need to convert the referenced model name into a python module style model name, so Pet should become pet.Pet with:\n#get the model name from the Schema reference\nString modelName = ModelUtils.getSimpleRef(ref);\nmodelName = toModelName(modelName);\n# return this model name because it looks like pet.Pet\n\nAre we also handling this case for:\n\nobject type models in additionalproperties\narray type models in additionalproperties\nprimitive models (non-object and non-array type) WITHOUT validations and enums in additionalproperties? We do not produce models for these so we should return the simple type from the ref model\nprimitive models (non-object and non-array type) with validations and enums in additionalproperties? We do produce these models so we should return a type like model_simple.ModelSimple\n\nshould we handle those in a separate PR?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r425894128", "createdAt": "2020-05-15T15:53:14Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/models/drawing.py", "diffHunk": "@@ -69,7 +69,7 @@ class Drawing(ModelNormal):\n     validations = {\n     }\n \n-    additional_properties_type = None\n+    additional_properties_type = (one_ofapplebanana.OneOfapplebanana,)  # noqa: E501", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1ODg0OA=="}, "originalCommit": {"oid": "66ec230f74d25a22e49734e06bb39fbc7c18cfc6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwNTE4OQ==", "bodyText": "This issue could be handled in that function or it could be handled in getTypeString.\nMy preference is to handle it in getTypeString because that is our function that handles conversions from Schemas to python types.\n\nThanks for the suggestion. Done\n\nAre we also handling this case for:\n\n\nobject type models in additionalproperties\n\n\narray type models in additionalproperties\n\n\nprimitive models (non-object and non-array type) WITHOUT validations and enums in additionalproperties? We do not produce models for these so we should return the simple type from the ref model\n\n\nprimitive models (non-object and non-array type) with validations and enums in additionalproperties? We do produce these models so we should return a type like model_simple.ModelSimple\n\nshould we handle those in a separate PR?\n\n\n\n\nThis will be handled in a separate PR.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426105189", "createdAt": "2020-05-16T01:42:04Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/models/drawing.py", "diffHunk": "@@ -69,7 +69,7 @@ class Drawing(ModelNormal):\n     validations = {\n     }\n \n-    additional_properties_type = None\n+    additional_properties_type = (one_ofapplebanana.OneOfapplebanana,)  # noqa: E501", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1ODg0OA=="}, "originalCommit": {"oid": "66ec230f74d25a22e49734e06bb39fbc7c18cfc6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzU0Nzg4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwNDo1MjozNVrOGWYNXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjo0MTo1M1rOGW_TXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjExODQ5Mg==", "bodyText": "Should we handle this in a preprocessor before a v2 spec is converted to v3?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426118492", "createdAt": "2020-05-16T04:52:35Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1080,12 +1080,55 @@ public static Schema unaliasSchema(OpenAPI openAPI,\n         return schema;\n     }\n \n-    public static Schema getAdditionalProperties(Schema schema) {\n-        if (schema.getAdditionalProperties() instanceof Schema) {\n-            return (Schema) schema.getAdditionalProperties();\n+    /**\n+     * Returns the additionalProperties Schema for the specified input schema.\n+     * \n+     * The additionalProperties keyword is used to control the handling of additional, undeclared\n+     * properties, that is, properties whose names are not listed in the properties keyword.\n+     * The additionalProperties keyword may be either a boolean or an object.\n+     * If additionalProperties is a boolean and set to false, no additional properties are allowed.\n+     * By default when the additionalProperties keyword is not specified in the input schema,\n+     * any additional properties are allowed. This is equivalent to setting additionalProperties\n+     * to the boolean value True or setting additionalProperties: {}\n+     * \n+     * @param openAPI the object that encapsulates the OAS document.\n+     * @param schema the input schema that may or may not have the additionalProperties keyword.\n+     * @return the Schema of the additionalProperties. The null value is returned if no additional\n+     *         properties are allowed.\n+     */\n+    public static Schema getAdditionalProperties(OpenAPI openAPI, Schema schema) {\n+        Object addProps = schema.getAdditionalProperties();\n+        if (addProps instanceof Schema) {\n+            return (Schema) addProps;\n+        }\n+        if (addProps == null) {\n+            Map<String, Object> extensions = openAPI.getExtensions();\n+            if (extensions != null) {\n+                // Get original swagger version from OAS extension.\n+                // Note openAPI.getOpenapi() is always set to 3.x even when the document\n+                // is converted from a OAS/Swagger 2.0 document.\n+                // https://github.com/swagger-api/swagger-parser/pull/1374\n+                Object ext = extensions.get(\"x-original-swagger-version\");\n+                if (ext instanceof String) {\n+                    SemVer version = new SemVer((String)ext);\n+                    if (version.major == 2) {\n+                        // The OAS version 2 parser sets Schema.additionalProperties to the null value\n+                        // even if the OAS document has additionalProperties: true|false\n+                        // So we are unable to determine if additional properties are allowed or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1OTAwNw==", "bodyText": "This is fine handling for our current use case.\nIt looks like you are working on a 2.0 fix here in swagger-parser", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426759007", "createdAt": "2020-05-18T16:41:53Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1080,12 +1080,55 @@ public static Schema unaliasSchema(OpenAPI openAPI,\n         return schema;\n     }\n \n-    public static Schema getAdditionalProperties(Schema schema) {\n-        if (schema.getAdditionalProperties() instanceof Schema) {\n-            return (Schema) schema.getAdditionalProperties();\n+    /**\n+     * Returns the additionalProperties Schema for the specified input schema.\n+     * \n+     * The additionalProperties keyword is used to control the handling of additional, undeclared\n+     * properties, that is, properties whose names are not listed in the properties keyword.\n+     * The additionalProperties keyword may be either a boolean or an object.\n+     * If additionalProperties is a boolean and set to false, no additional properties are allowed.\n+     * By default when the additionalProperties keyword is not specified in the input schema,\n+     * any additional properties are allowed. This is equivalent to setting additionalProperties\n+     * to the boolean value True or setting additionalProperties: {}\n+     * \n+     * @param openAPI the object that encapsulates the OAS document.\n+     * @param schema the input schema that may or may not have the additionalProperties keyword.\n+     * @return the Schema of the additionalProperties. The null value is returned if no additional\n+     *         properties are allowed.\n+     */\n+    public static Schema getAdditionalProperties(OpenAPI openAPI, Schema schema) {\n+        Object addProps = schema.getAdditionalProperties();\n+        if (addProps instanceof Schema) {\n+            return (Schema) addProps;\n+        }\n+        if (addProps == null) {\n+            Map<String, Object> extensions = openAPI.getExtensions();\n+            if (extensions != null) {\n+                // Get original swagger version from OAS extension.\n+                // Note openAPI.getOpenapi() is always set to 3.x even when the document\n+                // is converted from a OAS/Swagger 2.0 document.\n+                // https://github.com/swagger-api/swagger-parser/pull/1374\n+                Object ext = extensions.get(\"x-original-swagger-version\");\n+                if (ext instanceof String) {\n+                    SemVer version = new SemVer((String)ext);\n+                    if (version.major == 2) {\n+                        // The OAS version 2 parser sets Schema.additionalProperties to the null value\n+                        // even if the OAS document has additionalProperties: true|false\n+                        // So we are unable to determine if additional properties are allowed or not.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjExODQ5Mg=="}, "originalCommit": {"oid": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzY3MDAwOnYy", "diffSide": "RIGHT", "path": "samples/client/petstore/python-experimental/petstore_api/models/additional_properties_any_type.py", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwODo0ODowNVrOGWZKew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDozMzo1NVrOGXPfuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNDEzOQ==", "bodyText": "Should this OAS document definition result in python classes that have identical vales for additional_properties_type? My understanding was that they should be identical for these models:\ncomponents:\n  AnyPropertiesAdditionalPropertiesOmitted:\n    type: object\n    properties:\n      name:\n        type: string\n  AnyPropertiesAdditionalPropertiesTrue:\n    type: object\n    properties:\n      name:\n        type: string\n    additionalProperties: True\n  AnyPropertiesAdditionalPropertiesEmptySchema:\n    type: object\n    properties:\n      name:\n        type: string\n    additionalProperties: {}\n  AnyPropertiesAdditionalPropertiesEmptyObject:\n    type: object\n    properties:\n      name:\n        type: string\n    additionalProperties:\n      type: object\n\nI had a misunderstanding here, I thought that AnyPropertiesAdditionalPropertiesEmptyObject was the same as the three other models:\n\nAnyPropertiesAdditionalPropertiesOmitted\nAnyPropertiesAdditionalPropertiesTrue\nAnyPropertiesAdditionalPropertiesEmptySchema\n\nBut I see from here that that interpretation is incorrect.\nHow about we update our model names and property names to convey this understanding to our users?\n/Users/justin/programming/openapi-generator/modules/openapi-generator/src/test/resources/2_0/python-client-experimental/petstore-with-fake-endpoints-models-for-testing.yaml\n\n\nHow about changing the model name AdditionalPropertiesArray to AdditionalPropertiesArrayOfMapAnytype\n\n\nHow about changing the model name AdditionalPropertiesAnyType to AdditionalPropertiesMapAnytype\n\n\nAdditionalPropertiesClass:\nmap_array_anytype:\n\nHow about changing the inner definition to {} rather than {type: object} to have the data type match this variable name?\n\nmap_map_anytype:\n\nHow about keeping the name and changing the definition to {} rather than {type: object} to have the data type match this variable name?\n\nanytype_1:\n\nHow about changing this name to map_anytype1 to have the data type match this variable name:\n\nanytype_2:\n\nI think that this should this result in the data type (bool, date, datetime, dict, float, int, list, str,)\nWhy is this data type the same as anytype_1 + anytype_3?\n\nanytype_3:\n\nHow about changing this name to map_anytype2 to have the data type match this variable name:", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426134139", "createdAt": "2020-05-16T08:48:05Z", "author": {"login": "spacether"}, "path": "samples/client/petstore/python-experimental/petstore_api/models/additional_properties_any_type.py", "diffHunk": "@@ -64,7 +64,7 @@ class AdditionalPropertiesAnyType(ModelNormal):\n     validations = {\n     }\n \n-    additional_properties_type = (bool, date, datetime, dict, float, int, list, str,)  # noqa: E501\n+    additional_properties_type = ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)  # noqa: E501", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1NjcyMw==", "bodyText": "How about changing the model name AdditionalPropertiesArray to AdditionalPropertiesArrayOfMapAnytype\n\nThe values of the undeclared (additional) properties must be an array, and the items in the array must be an object, they cannot be any type. So technically it's not \"any type\".\nI'd rather not change the names in this PR because it's easier to make comparisons of the generated code for the issue raised in this PR.\n\nanytype_2: I think that this should this result in the data type (bool, date, datetime, dict, float, int, list, str,).\n\nI am going to try to understand the code a bit more.\n\nWhy is this data type the same as anytype_1 + anytype_3?\n\nanytype_2 was already the same as anytype_1 + anytype_3 before (though without str and without none_type). Are you saying there is a bug in the existing code and the data type for anytype_2 should not be the same as anytype_1 + anytype_3?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426956723", "createdAt": "2020-05-19T00:05:09Z", "author": {"login": "sebastien-rosset"}, "path": "samples/client/petstore/python-experimental/petstore_api/models/additional_properties_any_type.py", "diffHunk": "@@ -64,7 +64,7 @@ class AdditionalPropertiesAnyType(ModelNormal):\n     validations = {\n     }\n \n-    additional_properties_type = (bool, date, datetime, dict, float, int, list, str,)  # noqa: E501\n+    additional_properties_type = ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)  # noqa: E501", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNDEzOQ=="}, "originalCommit": {"oid": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1ODc0OA==", "bodyText": "The OAS schema for anytype_1 is as below. That means the data type must be a dictionary; there are no declared properties, and since the additionalProperties keyword is not specified, there can be any undeclared properties and their value can be any type. In other words, anytype_1 is a bit of a misnomer.\n      anytype_1:\n        type: object\nBefore this PR, the generated data type was:\n'anytype_1': (bool, date, datetime, dict, float, int, list, str,),\n\nIsn't that incorrect? I.e. doesn't that mean that the value of anytype_1 can be a boolean, a date, float, etc? But that's not correct, anytype_1 cannot be a boolean, it must be a dict where the key is a string and the value can be anything.\nAFAIK, anytype_3 is exactly the same as anytype_1.\nOn the other hand, I think the value of anytype_2 can really be anything, hence the generated data type should be:\n'anytype_2': (bool, date, datetime, dict, float, int, list, str,),", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426958748", "createdAt": "2020-05-19T00:12:42Z", "author": {"login": "sebastien-rosset"}, "path": "samples/client/petstore/python-experimental/petstore_api/models/additional_properties_any_type.py", "diffHunk": "@@ -64,7 +64,7 @@ class AdditionalPropertiesAnyType(ModelNormal):\n     validations = {\n     }\n \n-    additional_properties_type = (bool, date, datetime, dict, float, int, list, str,)  # noqa: E501\n+    additional_properties_type = ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)  # noqa: E501", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNDEzOQ=="}, "originalCommit": {"oid": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2NTgxOA==", "bodyText": "How about changing the model name AdditionalPropertiesArray to AdditionalPropertiesArrayOfMapAnytype\nThe values of the undeclared (additional) properties must be an array, and the items in the array must be an object, they cannot be any type. So technically it's not \"any type\".\n\nI agree with you that's why I am suggesting a rename of:\nAdditionalPropertiesArrayOfMapAnytype\nMap is a synonym for dict/object. With the suffix MapAnytype I mean Map of AnyType, which means Map where the values can be any type. Is AdditionalPropertiesArrayOfMapOfAnytype clearer?\nSo I added these variables in a prior PR to give examples of AnyType and type: object usage. But my understanding at the time was incorrect. Now that we have a better  correct understanding here, why not make the values stored consistent with the variable names that describe those types?\nOtherwise we are giving our users examples which are confusing and where the type described by the variable is different than what the actual type is.\nAnother solution here is to rename the current variables to be consistent with the updated types that are accepted. But those names get very long.\nAdditionalPropertiesClass.map_array_anytype would be AdditionalPropertiesClass.map_map_array_anytype which feels less helpful to our users understanding because there are so many layers of types (4).\n\nanytype_1 is a bit of a misnomer\n\nYup, I agree, that's why I am asking that we rename those variables to:\n\nanytype_1 -> map_anytype1\nanytype_3 -> map_anytype2\nBecause we are storing dicts where the values can be any types.\n\nThe only case where the stored data type looks incorrect to me is anytype_2. All the other ones look like they were produced correcty.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426965818", "createdAt": "2020-05-19T00:39:52Z", "author": {"login": "spacether"}, "path": "samples/client/petstore/python-experimental/petstore_api/models/additional_properties_any_type.py", "diffHunk": "@@ -64,7 +64,7 @@ class AdditionalPropertiesAnyType(ModelNormal):\n     validations = {\n     }\n \n-    additional_properties_type = (bool, date, datetime, dict, float, int, list, str,)  # noqa: E501\n+    additional_properties_type = ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)  # noqa: E501", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNDEzOQ=="}, "originalCommit": {"oid": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3MTMyMA==", "bodyText": "So I added these variables in a prior PR to give examples of AnyType and type: object usage. But my understanding at the time was incorrect. Now that we have a better correct understanding here, why not make the values stored consistent with the variable names that describe those types?\n\nYes, I got that part from your earlier comment. I was saying I'd rather not make these changes in this PR because by keeping the names it's a lot easier to compare the changes introduced by this PR. The PR already has a lot of changes, it's getting tricky to compare all the changes.\n\nOtherwise we are giving our users examples which are confusing and where the type described by the variable is different than what the actual type is.\n\nYes, I understand, but I'd rather not make these changes here. It's a separate improvement.\n\nAnother solution here is to rename the current variables to be consistent with the updated types that are accepted. But those names get very long.\nAdditionalPropertiesClass.map_array_anytype would be AdditionalPropertiesClass.map_map_array_anytype which feels less helpful to our users understanding because there are so many layers of types (4).\n\nanytype_1 is a bit of a misnomer\n\nYup, I agree, that's why I am asking that we rename those variables to:\n\nanytype_1 -> map_anytype1\nanytype_3 -> map_anytype2\nBecause we are storing dicts where the values can be any types.\n\nThe only case where the stored data type looks incorrect to me is anytype_2. All the other ones look like they were produced correcty.\n\nOk, let me work on fixing the generated data type for anytype_2, independant of the renaming.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426971320", "createdAt": "2020-05-19T01:00:55Z", "author": {"login": "sebastien-rosset"}, "path": "samples/client/petstore/python-experimental/petstore_api/models/additional_properties_any_type.py", "diffHunk": "@@ -64,7 +64,7 @@ class AdditionalPropertiesAnyType(ModelNormal):\n     validations = {\n     }\n \n-    additional_properties_type = (bool, date, datetime, dict, float, int, list, str,)  # noqa: E501\n+    additional_properties_type = ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)  # noqa: E501", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNDEzOQ=="}, "originalCommit": {"oid": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3MzQ5OQ==", "bodyText": "Okay, sounds good", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426973499", "createdAt": "2020-05-19T01:08:56Z", "author": {"login": "spacether"}, "path": "samples/client/petstore/python-experimental/petstore_api/models/additional_properties_any_type.py", "diffHunk": "@@ -64,7 +64,7 @@ class AdditionalPropertiesAnyType(ModelNormal):\n     validations = {\n     }\n \n-    additional_properties_type = (bool, date, datetime, dict, float, int, list, str,)  # noqa: E501\n+    additional_properties_type = ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)  # noqa: E501", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNDEzOQ=="}, "originalCommit": {"oid": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NDM2Mw==", "bodyText": "Ah, the problem with anytype_2 is because the Schema.java instantiation is ObjectSchema with \"type: object\", so it is incorrectly considered a property of type object. I am digging.\nUpdate: on further investigation, the problem is caused by the 2.0 -> 3.0 swagger converter. I have added anytype_1, anytype_2, anytype_3 to the 3.0 doc and the output is correct. So the issue existed before, we need to track a separate issue with the swagger converter.\nI have raised swagger-api/swagger-parser#1378 to track the issue.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r426974363", "createdAt": "2020-05-19T01:12:11Z", "author": {"login": "sebastien-rosset"}, "path": "samples/client/petstore/python-experimental/petstore_api/models/additional_properties_any_type.py", "diffHunk": "@@ -64,7 +64,7 @@ class AdditionalPropertiesAnyType(ModelNormal):\n     validations = {\n     }\n \n-    additional_properties_type = (bool, date, datetime, dict, float, int, list, str,)  # noqa: E501\n+    additional_properties_type = ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)  # noqa: E501", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNDEzOQ=="}, "originalCommit": {"oid": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNDMxNQ==", "bodyText": "Marking as resolved.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427024315", "createdAt": "2020-05-19T04:33:55Z", "author": {"login": "sebastien-rosset"}, "path": "samples/client/petstore/python-experimental/petstore_api/models/additional_properties_any_type.py", "diffHunk": "@@ -64,7 +64,7 @@ class AdditionalPropertiesAnyType(ModelNormal):\n     validations = {\n     }\n \n-    additional_properties_type = (bool, date, datetime, dict, float, int, list, str,)  # noqa: E501\n+    additional_properties_type = ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)  # noqa: E501", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNDEzOQ=="}, "originalCommit": {"oid": "cd1f8fd2c585e0a3f3f146bacad63f5ded40bc1b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjYzNDI4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0OToyOVrOGXuEKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0ODo0OVrOGXyEAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTE2Mw==", "bodyText": "@spacether , here the model type is set in the codegenModel.additionalPropertiesType property, assigned by the addAdditionPropertiesToCodeGenModel() function. I need to add that type to the imports, otherwise Python cannot lookup the type.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427525163", "createdAt": "2020-05-19T18:49:29Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -907,18 +909,27 @@ private String getTypeString(Schema p, String prefix, String suffix) {\n         if (\")\".equals(suffix)) {\n             fullSuffix = \",\" + suffix;\n         }\n-        if (ModelUtils.isAnyTypeSchema(p)) {\n+        if (StringUtils.isNotEmpty(p.get$ref())) {\n+            // The input schema is a reference. If the resolved schema is\n+            // a composed schema, convert the name to a Python class.\n+            Schema s = ModelUtils.getReferencedSchema(this.openAPI, p);\n+            if (s instanceof ComposedSchema) {\n+                String modelName = ModelUtils.getSimpleRef(p.get$ref());\n+                return prefix + toModelName(modelName) + fullSuffix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b05b4150b8c7e99d34bb6c6658a5da400ff2bac9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MDY1OQ==", "bodyText": "Fixed in f57338d", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427590659", "createdAt": "2020-05-19T20:48:49Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -907,18 +909,27 @@ private String getTypeString(Schema p, String prefix, String suffix) {\n         if (\")\".equals(suffix)) {\n             fullSuffix = \",\" + suffix;\n         }\n-        if (ModelUtils.isAnyTypeSchema(p)) {\n+        if (StringUtils.isNotEmpty(p.get$ref())) {\n+            // The input schema is a reference. If the resolved schema is\n+            // a composed schema, convert the name to a Python class.\n+            Schema s = ModelUtils.getReferencedSchema(this.openAPI, p);\n+            if (s instanceof ComposedSchema) {\n+                String modelName = ModelUtils.getSimpleRef(p.get$ref());\n+                return prefix + toModelName(modelName) + fullSuffix;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNTE2Mw=="}, "originalCommit": {"oid": "b05b4150b8c7e99d34bb6c6658a5da400ff2bac9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzA0Njg4OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/models/shape_or_null.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1MTowOFrOGXyJDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1MTowOFrOGXyJDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MTk1MA==", "bodyText": "Note to self: the generated openapi_types() is wrong, it should include none_type.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427591950", "createdAt": "2020-05-19T20:51:08Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/models/shape_or_null.py", "diffHunk": "@@ -74,7 +74,7 @@ class ShapeOrNull(ModelComposed):\n     validations = {\n     }\n \n-    additional_properties_type = None\n+    additional_properties_type = (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501\n \n     @cached_property\n     def openapi_types():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57338d2110e0694dec7c0e07c9966c914c74359"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzY3OTk0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenConstants.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTozMjoyMlrOGX4PeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjoyNTo0NVrOGX5GuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MTg5Nw==", "bodyText": "This description is confusing to me. We are describing it as legacyAdditionalPropertiesBehavior.\nSo it sounds like True mean s use legacy behavior.\nBut then in our definition we say true is spec compliant behavior\nFalse is legacy non-compliant behavior here.\nHow about instead naming this something like:\n\nNULLABLE_ADDITIONAL_PROPERTIES_BEHAVIOR\nCOMPLIANT_ADDITIONAL_PROPERTIES_BEHAVIOR\nor keeping it:\nLEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR\nbut have True be non-compliant legacy behavior, and False be compliant behavior\n\nAlso, what generator sets this to True?\nI don't see that happening outside fo the tests. Did I miss it?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427691897", "createdAt": "2020-05-20T01:32:22Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenConstants.java", "diffHunk": "@@ -359,4 +359,18 @@\n     public static final String USE_SINGLE_REQUEST_PARAMETER = \"useSingleRequestParameter\";\n     public static final String USE_SINGLE_REQUEST_PARAMETER_DESC = \"Setting this property to true will generate functions with a single argument containing all API endpoint parameters instead of one argument per parameter.\";\n \n+    // The reason this parameter exists is because there is a dependency\n+    // on swagger-api/swagger-parser issue https://github.com/swagger-api/swagger-parser/issues/1369.\n+    // When that issue is resolved, this parameter should be removed.\n+    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR = \"legacyAdditionalPropertiesBehavior\";\n+    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR_DESC =\n+        \"If true, the 'additionalProperties' keyword is implemented as specified in the OAS and JSON schema specifications. \" +\n+        \"Full compliance currently works with OAS 3.0 documents only. \" +\n+        \"It is not supported for 2.0 documents until issues #1369 and #1371 have been resolved in the dependent swagger-parser project. \" +\n+        \"If false, codegen uses a legacy, non-compliant interpretation of the 'additionalProperties' keyword. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faecafdf61dbcb04be46c7e72087106aca9b4ee3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5NTIwNg==", "bodyText": "Good catch, I inadvertently swapped the values.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427695206", "createdAt": "2020-05-20T01:44:56Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenConstants.java", "diffHunk": "@@ -359,4 +359,18 @@\n     public static final String USE_SINGLE_REQUEST_PARAMETER = \"useSingleRequestParameter\";\n     public static final String USE_SINGLE_REQUEST_PARAMETER_DESC = \"Setting this property to true will generate functions with a single argument containing all API endpoint parameters instead of one argument per parameter.\";\n \n+    // The reason this parameter exists is because there is a dependency\n+    // on swagger-api/swagger-parser issue https://github.com/swagger-api/swagger-parser/issues/1369.\n+    // When that issue is resolved, this parameter should be removed.\n+    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR = \"legacyAdditionalPropertiesBehavior\";\n+    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR_DESC =\n+        \"If true, the 'additionalProperties' keyword is implemented as specified in the OAS and JSON schema specifications. \" +\n+        \"Full compliance currently works with OAS 3.0 documents only. \" +\n+        \"It is not supported for 2.0 documents until issues #1369 and #1371 have been resolved in the dependent swagger-parser project. \" +\n+        \"If false, codegen uses a legacy, non-compliant interpretation of the 'additionalProperties' keyword. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MTg5Nw=="}, "originalCommit": {"oid": "faecafdf61dbcb04be46c7e72087106aca9b4ee3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwNTI2Ng==", "bodyText": "Improved documentation. I don't think it's necessary to change the name based on the improved documentation.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427705266", "createdAt": "2020-05-20T02:22:51Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenConstants.java", "diffHunk": "@@ -359,4 +359,18 @@\n     public static final String USE_SINGLE_REQUEST_PARAMETER = \"useSingleRequestParameter\";\n     public static final String USE_SINGLE_REQUEST_PARAMETER_DESC = \"Setting this property to true will generate functions with a single argument containing all API endpoint parameters instead of one argument per parameter.\";\n \n+    // The reason this parameter exists is because there is a dependency\n+    // on swagger-api/swagger-parser issue https://github.com/swagger-api/swagger-parser/issues/1369.\n+    // When that issue is resolved, this parameter should be removed.\n+    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR = \"legacyAdditionalPropertiesBehavior\";\n+    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR_DESC =\n+        \"If true, the 'additionalProperties' keyword is implemented as specified in the OAS and JSON schema specifications. \" +\n+        \"Full compliance currently works with OAS 3.0 documents only. \" +\n+        \"It is not supported for 2.0 documents until issues #1369 and #1371 have been resolved in the dependent swagger-parser project. \" +\n+        \"If false, codegen uses a legacy, non-compliant interpretation of the 'additionalProperties' keyword. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MTg5Nw=="}, "originalCommit": {"oid": "faecafdf61dbcb04be46c7e72087106aca9b4ee3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwNjA0MQ==", "bodyText": "The default value is set at https://github.com/OpenAPITools/openapi-generator/pull/6290/files#diff-7cb46fa53f89a458a7b7cb201d2214a8R1511", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r427706041", "createdAt": "2020-05-20T02:25:45Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/CodegenConstants.java", "diffHunk": "@@ -359,4 +359,18 @@\n     public static final String USE_SINGLE_REQUEST_PARAMETER = \"useSingleRequestParameter\";\n     public static final String USE_SINGLE_REQUEST_PARAMETER_DESC = \"Setting this property to true will generate functions with a single argument containing all API endpoint parameters instead of one argument per parameter.\";\n \n+    // The reason this parameter exists is because there is a dependency\n+    // on swagger-api/swagger-parser issue https://github.com/swagger-api/swagger-parser/issues/1369.\n+    // When that issue is resolved, this parameter should be removed.\n+    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR = \"legacyAdditionalPropertiesBehavior\";\n+    public static final String LEGACY_ADDITIONAL_PROPERTIES_BEHAVIOR_DESC =\n+        \"If true, the 'additionalProperties' keyword is implemented as specified in the OAS and JSON schema specifications. \" +\n+        \"Full compliance currently works with OAS 3.0 documents only. \" +\n+        \"It is not supported for 2.0 documents until issues #1369 and #1371 have been resolved in the dependent swagger-parser project. \" +\n+        \"If false, codegen uses a legacy, non-compliant interpretation of the 'additionalProperties' keyword. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5MTg5Nw=="}, "originalCommit": {"oid": "faecafdf61dbcb04be46c7e72087106aca9b4ee3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDAxNzc5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjo1NjowM1rOGZdzyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzoxNDoxMVrOGZeRsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NTk3OQ==", "bodyText": "Should we also do codegenModel.imports.addAll(referencedModelNames);\nDo we have an example that uses this code? Where?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429355979", "createdAt": "2020-05-22T16:56:03Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -969,14 +1007,20 @@ public String toInstantiationType(Schema property) {\n \n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n-        Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        Schema addProps = getAdditionalProperties(schema);\n+        if (addProps != null) {\n+            // if AdditionalProperties exists, get its datatype and\n+            // store it in codegenModel.additionalPropertiesType.\n+            // The 'addProps' may be a reference, getTypeDeclaration will resolve\n+            // the reference.\n+            List<String> referencedModelNames = new ArrayList<String>();\n+            codegenModel.additionalPropertiesType = getTypeString(addProps, \"\", \"\", referencedModelNames);\n+            if (referencedModelNames.size() != 0) {\n+                codegenModel.vendorExtensions.put(referencedModelNamesExtension, referencedModelNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89117b9b54879154459c08fe790586cf6e03fbb8"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MzYzMg==", "bodyText": "Should we also do codegenModel.imports.addAll(referencedModelNames);\n\nCan you explain why? I can do it if you think this is required, I would like to understand why.\n\nDo we have an example that uses this code? Where?\n\nYes, here: https://github.com/OpenAPITools/openapi-generator/pull/6290/files#diff-ce668661a7662b4d1644917208c94d59R1951\nThe example would fail to execute without this import.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429363632", "createdAt": "2020-05-22T17:14:11Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -969,14 +1007,20 @@ public String toInstantiationType(Schema property) {\n \n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n-        Schema addProps = ModelUtils.getAdditionalProperties(schema);\n-        if (addProps != null && addProps.get$ref() == null) {\n-            // if AdditionalProperties exists and is an inline definition, get its datatype and store it in m.parent\n-            String typeString = getTypeDeclaration(addProps);\n-            codegenModel.additionalPropertiesType = typeString;\n-        } else {\n-            addParentContainer(codegenModel, codegenModel.name, schema);\n+        Schema addProps = getAdditionalProperties(schema);\n+        if (addProps != null) {\n+            // if AdditionalProperties exists, get its datatype and\n+            // store it in codegenModel.additionalPropertiesType.\n+            // The 'addProps' may be a reference, getTypeDeclaration will resolve\n+            // the reference.\n+            List<String> referencedModelNames = new ArrayList<String>();\n+            codegenModel.additionalPropertiesType = getTypeString(addProps, \"\", \"\", referencedModelNames);\n+            if (referencedModelNames.size() != 0) {\n+                codegenModel.vendorExtensions.put(referencedModelNamesExtension, referencedModelNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NTk3OQ=="}, "originalCommit": {"oid": "89117b9b54879154459c08fe790586cf6e03fbb8"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDAyMDQ5OnYy", "diffSide": "LEFT", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjo1NzowNFrOGZd1gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0MTo0MFrOGZfAtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NjQxNw==", "bodyText": "Why did we remove the imports check here?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429356417", "createdAt": "2020-05-22T16:57:04Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java", "diffHunk": "@@ -289,9 +289,8 @@ public void mapModelTest() {\n         Assert.assertEquals(cm.classname, \"sample.Sample\");\n         Assert.assertEquals(cm.description, \"a map model\");\n         Assert.assertEquals(cm.vars.size(), 0);\n-        Assert.assertEquals(cm.parent, \"dict\");\n-        Assert.assertEquals(cm.imports.size(), 1);\n-        Assert.assertEquals(Sets.intersection(cm.imports, Sets.newHashSet(\"children.Children\")).size(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89117b9b54879154459c08fe790586cf6e03fbb8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NzQ0MQ==", "bodyText": "Why did we remove the imports check here?\n\nBecause now that composed schemas support the additionalProperties keyword, the additional properties are no longer in the parent. The other unit tests cover the scenario of composed schema with additional properties.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429367441", "createdAt": "2020-05-22T17:22:55Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java", "diffHunk": "@@ -289,9 +289,8 @@ public void mapModelTest() {\n         Assert.assertEquals(cm.classname, \"sample.Sample\");\n         Assert.assertEquals(cm.description, \"a map model\");\n         Assert.assertEquals(cm.vars.size(), 0);\n-        Assert.assertEquals(cm.parent, \"dict\");\n-        Assert.assertEquals(cm.imports.size(), 1);\n-        Assert.assertEquals(Sets.intersection(cm.imports, Sets.newHashSet(\"children.Children\")).size(), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NjQxNw=="}, "originalCommit": {"oid": "89117b9b54879154459c08fe790586cf6e03fbb8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MjAwNQ==", "bodyText": "Okay, but  what should we expect to see in cm.imports here?\nAn empty list?\nIf it a list of length 1, what should it contain?\nCan you put the assertions back in verifying that the length and value of cm.imports is correct?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429372005", "createdAt": "2020-05-22T17:33:05Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java", "diffHunk": "@@ -289,9 +289,8 @@ public void mapModelTest() {\n         Assert.assertEquals(cm.classname, \"sample.Sample\");\n         Assert.assertEquals(cm.description, \"a map model\");\n         Assert.assertEquals(cm.vars.size(), 0);\n-        Assert.assertEquals(cm.parent, \"dict\");\n-        Assert.assertEquals(cm.imports.size(), 1);\n-        Assert.assertEquals(Sets.intersection(cm.imports, Sets.newHashSet(\"children.Children\")).size(), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NjQxNw=="}, "originalCommit": {"oid": "89117b9b54879154459c08fe790586cf6e03fbb8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NTY3MQ==", "bodyText": "The new assertion is there: https://github.com/OpenAPITools/openapi-generator/pull/6290/files/89117b9b54879154459c08fe790586cf6e03fbb8#diff-81a58419c148eb8bb7ddfa31ed3f0d2cR292\nI didn't just remove the assertion, I replaced them with the proper assertion.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429375671", "createdAt": "2020-05-22T17:41:40Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java", "diffHunk": "@@ -289,9 +289,8 @@ public void mapModelTest() {\n         Assert.assertEquals(cm.classname, \"sample.Sample\");\n         Assert.assertEquals(cm.description, \"a map model\");\n         Assert.assertEquals(cm.vars.size(), 0);\n-        Assert.assertEquals(cm.parent, \"dict\");\n-        Assert.assertEquals(cm.imports.size(), 1);\n-        Assert.assertEquals(Sets.intersection(cm.imports, Sets.newHashSet(\"children.Children\")).size(), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NjQxNw=="}, "originalCommit": {"oid": "89117b9b54879154459c08fe790586cf6e03fbb8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDA4MTY1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/test/resources/2_0/petstore-with-fake-endpoints-models-and-additional-properties-for-testing.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzoyMDoyNVrOGZecZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0MzoyMlrOGZfDfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NjM3NQ==", "bodyText": "Why make this separate yaml file?\nTo test disallowAdditionalPropertiesIfNotPresent=True/False?\nIf that is the case, can you make this spec much smaller, give it a file name like:\nissues_1369_1371.yaml or\nadditional_properties_spec.yaml\nand use it in DefaultCodegenTest.java?\nWe want to minimize the spec additions that we make.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429366375", "createdAt": "2020-05-22T17:20:25Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/resources/2_0/petstore-with-fake-endpoints-models-and-additional-properties-for-testing.yaml", "diffHunk": "@@ -0,0 +1,2009 @@\n+swagger: '2.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89117b9b54879154459c08fe790586cf6e03fbb8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTAwMQ==", "bodyText": "Why make this separate yaml file?\nTo test disallowAdditionalPropertiesIfNotPresent=True/False?\nIf that is the case, can you make this spec much smaller, give it a file name like:\nissues_1369_1371.yaml or\nadditional_properties_spec.yaml\nand use it in DefaultCodegenTest.java?\nWe want to minimize the spec additions that we make.\n\nBecause initially I modified the original YAML file, but it caused a huge number of changes because there are many other languages using the original file. Sure I can make this file smaller.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429369001", "createdAt": "2020-05-22T17:26:35Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/test/resources/2_0/petstore-with-fake-endpoints-models-and-additional-properties-for-testing.yaml", "diffHunk": "@@ -0,0 +1,2009 @@\n+swagger: '2.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NjM3NQ=="}, "originalCommit": {"oid": "89117b9b54879154459c08fe790586cf6e03fbb8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NjM4MQ==", "bodyText": "I reduced the size of the file.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429376381", "createdAt": "2020-05-22T17:43:22Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/test/resources/2_0/petstore-with-fake-endpoints-models-and-additional-properties-for-testing.yaml", "diffHunk": "@@ -0,0 +1,2009 @@\n+swagger: '2.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NjM3NQ=="}, "originalCommit": {"oid": "89117b9b54879154459c08fe790586cf6e03fbb8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDI5MTU3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxODo0MzoxOVrOGZgk_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxODo0MzoxOVrOGZgk_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwMTM0Mw==", "bodyText": "Great addition here. This is very helpful, thanks!", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429401343", "createdAt": "2020-05-22T18:43:19Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -52,11 +53,19 @@ public static OpenAPI parseFlattenSpec(String specFilePath) {\n      * @return A \"raw\" OpenAPI document\n      */\n     public static OpenAPI parseSpec(String specFilePath) {\n-        return new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();\n+        // Invoke helper function to get the original swagger version.\n+        // See https://github.com/swagger-api/swagger-parser/pull/1374\n+        // Also see https://github.com/swagger-api/swagger-parser/issues/1369.\n+        ModelUtils.getOpenApiVersion(openAPI, specFilePath, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5339ab728076ed348387f8c742ed9e7a2dfd6872"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDMyOTg4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/test/resources/3_0/python-experimental/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxODo1OToyN1rOGZg-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMzoyNzowN1rOGZl3vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzc1Mg==", "bodyText": "These property names are being added, but their values disagree with their descriptions.\nCan you change them to be consistent so our users aren't confused?\n\nanytype_1 results in {str: (bool, date, datetime, dict, float, int, list, str, none_type)} how about naming it map_of_anytype_1\nanytype_2 results in bool, date, datetime, dict, float, int, list, str, none_type so how about naming it anytype_1\nanytype_3 results in {str: (bool, date, datetime, dict, float, int, list, str, none_type)} so how about naming it map_of_anytype_2\nmap_with_additional_properties results in {str: (bool, date, datetime, dict, float, int, list, str, none_type)} so how about naming it map_of_anytype_3\nmap_without_additional_properties results in bool, date, datetime, dict, float, int, list, str so how about renaming it anytype_2\n\nmap_without_additional_properties lacks none_type in its resultant data_type? Is that correct or incorrect? Isn't that incorrect?\n\nShouldn't map_without_additional_properties be a map where only certain specific key property names are allowed because additionalProperties is False?\nDo we need to convert that into a a new separate object type CodegenModel which becomes a Python ModelNormal to enforce that behavior?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429407752", "createdAt": "2020-05-22T18:59:27Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/resources/3_0/python-experimental/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml", "diffHunk": "@@ -1539,6 +1543,22 @@ components:\n             type: object\n             additionalProperties:\n               type: string\n+        anytype_1:\n+          type: object\n+        anytype_2: {}\n+        anytype_3:\n+          type: object\n+          properties: {}\n+        map_with_additional_properties:\n+          type: object\n+          additionalProperties: true\n+        map_without_additional_properties:\n+          type: object\n+          additionalProperties: false\n+        map_string:\n+          type: object\n+          additionalProperties:\n+            type: string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5339ab728076ed348387f8c742ed9e7a2dfd6872"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1NDQyNQ==", "bodyText": "These property names are being added, but their values disagree with their descriptions.\nCan you change them to be consistent so our users aren't confused?\n\nanytype_1 results in {str: (bool, date, datetime, dict, float, int, list, str, none_type)} how about naming it map_of_anytype_1\n\n\ndone\n\n\nanytype_2 results in bool, date, datetime, dict, float, int, list, str, none_type so how about naming it anytype_1\n\n\ndone\n\n\nanytype_3 results in {str: (bool, date, datetime, dict, float, int, list, str, none_type)} so how about naming it map_of_anytype_2\n\n\ndone\n\n\nmap_with_additional_properties results in {str: (bool, date, datetime, dict, float, int, list, str, none_type)} so how about naming it map_of_anytype_3\n\n\ndone.\nUpdate: actually I don't think it's a good suggestion. We would lose the fact that the map allows undeclared properties using multiple variants. I will name it map_with_undeclared_properties_anytype_1/2/3.\nThere are three properties allowing undeclared properties.\n\n\nmap_without_additional_properties results in bool, date, datetime, dict, float, int, list, str so how about renaming it anytype_2\n\n\nI think it should be name empty_map. Since additionalProperties is False, undeclared properties are not allowed; and there are no declared properties, hence no properties are allowed. I think the allowed types are set to bool, date, datetime, dict, float, int, list, str because there are no restrictions on the type, but since there are no declared and undeclared properties, nothing will be allowed.\n\nmap_without_additional_properties lacks none_type in its resultant data_type? Is that correct or incorrect? Isn't that incorrect?\n\nShouldn't map_without_additional_properties be a map where only certain specific key property names are allowed because additionalProperties is False?\n\n\nNo, I wanted to have an empty map.\n\n\nDo we need to convert that into a a new separate object type CodegenModel which becomes a Python ModelNormal to enforce that behavior?\n\n\nWhat is that? Are you referring to map_without_additional_properties? Which I have renamed to empty_map? If so, no, I intentionally want to have it inline.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429454425", "createdAt": "2020-05-22T21:16:48Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/test/resources/3_0/python-experimental/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml", "diffHunk": "@@ -1539,6 +1543,22 @@ components:\n             type: object\n             additionalProperties:\n               type: string\n+        anytype_1:\n+          type: object\n+        anytype_2: {}\n+        anytype_3:\n+          type: object\n+          properties: {}\n+        map_with_additional_properties:\n+          type: object\n+          additionalProperties: true\n+        map_without_additional_properties:\n+          type: object\n+          additionalProperties: false\n+        map_string:\n+          type: object\n+          additionalProperties:\n+            type: string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzc1Mg=="}, "originalCommit": {"oid": "5339ab728076ed348387f8c742ed9e7a2dfd6872"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2NDU2OQ==", "bodyText": "I have some more questions here:\nmap_with_additional_properties results in {str: (bool, date, datetime, dict, float, int, list, str, none_type)} so how about naming it map_of_anytype_3\ndone.\nUpdate: actually I don't think it's a good suggestion. We would lose the fact that the map allows undeclared properties using multiple variants. I will name it map_with_undeclared_properties_anytype_1/2/3.\nThere are three properties allowing undeclared properties.\nThe names map_with_undeclared_properties_anytype_1/2/3 sounds good.\n\nWhat does multiple variants mean? Do you mean the three properties that all have the same data_type?\nWhat is the difference between undeclared properties and additionalProperties: True?\n\nThe example that you want to name empty_map.\nI am okay naming this empty_map, but the python code is not meeting your intention of only allowing an empty map here.\n\nHow do you propose having the python code only allow empty map for this property?\n\nThere are 2 solutions that I see:\na) when this condition is seen (property schema of type object with no properties and additionalProperties: False) in Java we need to set the maxItems for this property to 0. That will only allow empty dictionaries here.\nb) create a new CodegenModel from the inline schema with no properties and additionalProperties: False, this is a complicated solution. I prefer option a because it is simpler.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429464569", "createdAt": "2020-05-22T21:45:40Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/resources/3_0/python-experimental/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml", "diffHunk": "@@ -1539,6 +1543,22 @@ components:\n             type: object\n             additionalProperties:\n               type: string\n+        anytype_1:\n+          type: object\n+        anytype_2: {}\n+        anytype_3:\n+          type: object\n+          properties: {}\n+        map_with_additional_properties:\n+          type: object\n+          additionalProperties: true\n+        map_without_additional_properties:\n+          type: object\n+          additionalProperties: false\n+        map_string:\n+          type: object\n+          additionalProperties:\n+            type: string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzc1Mg=="}, "originalCommit": {"oid": "5339ab728076ed348387f8c742ed9e7a2dfd6872"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4ODA2MA==", "bodyText": "Separate issue #6400 is tracking this. Marking resolved.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429488060", "createdAt": "2020-05-22T23:27:07Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/test/resources/3_0/python-experimental/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml", "diffHunk": "@@ -1539,6 +1543,22 @@ components:\n             type: object\n             additionalProperties:\n               type: string\n+        anytype_1:\n+          type: object\n+        anytype_2: {}\n+        anytype_3:\n+          type: object\n+          properties: {}\n+        map_with_additional_properties:\n+          type: object\n+          additionalProperties: true\n+        map_without_additional_properties:\n+          type: object\n+          additionalProperties: false\n+        map_string:\n+          type: object\n+          additionalProperties:\n+            type: string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQwNzc1Mg=="}, "originalCommit": {"oid": "5339ab728076ed348387f8c742ed9e7a2dfd6872"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDQ0OTU5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/classvars.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo0Njo0MVrOGZiJwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMzoyNjoyMFrOGZl3UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyNzEzNg==", "bodyText": "Do we have a test where we test this new feature with assert None == NullableClass(None) for ModelNormal, ModelSimple, and ModelComposed classes?\nWhere?\nIf we don't have it, can you add it?\nNote: this feature uses our new _nullable data source and is different than the oneOf: - \"null\" data source.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429427136", "createdAt": "2020-05-22T19:46:41Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/classvars.mustache", "diffHunk": "@@ -100,6 +100,8 @@\n \n     additional_properties_type = {{#additionalPropertiesType}}({{{additionalPropertiesType}}},)  # noqa: E501{{/additionalPropertiesType}}{{^additionalPropertiesType}}None{{/additionalPropertiesType}}\n \n+    _nullable = {{#isNullable}}True{{/isNullable}}{{^isNullable}}False{{/isNullable}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5339ab728076ed348387f8c742ed9e7a2dfd6872"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2NjA2NQ==", "bodyText": "I'm going to cover the composed model in this PR. BTW, this is only relevant to the oneOf/anyOf children, for other cases it's already covered in the existing code and unit tests.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429466065", "createdAt": "2020-05-22T21:51:28Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/classvars.mustache", "diffHunk": "@@ -100,6 +100,8 @@\n \n     additional_properties_type = {{#additionalPropertiesType}}({{{additionalPropertiesType}}},)  # noqa: E501{{/additionalPropertiesType}}{{^additionalPropertiesType}}None{{/additionalPropertiesType}}\n \n+    _nullable = {{#isNullable}}True{{/isNullable}}{{^isNullable}}False{{/isNullable}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyNzEzNg=="}, "originalCommit": {"oid": "5339ab728076ed348387f8c742ed9e7a2dfd6872"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4Nzk1Mw==", "bodyText": "See 8fdbd27", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429487953", "createdAt": "2020-05-22T23:26:20Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/classvars.mustache", "diffHunk": "@@ -100,6 +100,8 @@\n \n     additional_properties_type = {{#additionalPropertiesType}}({{{additionalPropertiesType}}},)  # noqa: E501{{/additionalPropertiesType}}{{^additionalPropertiesType}}None{{/additionalPropertiesType}}\n \n+    _nullable = {{#isNullable}}True{{/isNullable}}{{^isNullable}}False{{/isNullable}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyNzEzNg=="}, "originalCommit": {"oid": "5339ab728076ed348387f8c742ed9e7a2dfd6872"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTM2MTc4OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_discard_unknown_properties.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNjoyNzoxOFrOGZqPRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNzo0OTozOVrOGZqksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1OTYyMg==", "bodyText": "Are unknown_keys the same as additional properties?\nHow about changing this variable name to discard_additional_properties?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429559622", "createdAt": "2020-05-23T16:27:18Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_discard_unknown_properties.py", "diffHunk": "@@ -36,51 +36,86 @@\n \n class DiscardUnknownPropertiesTests(unittest.TestCase):\n \n-    def test_deserialize_dog_do_not_discard_unknown_properties(self):\n-        \"\"\" deserialize str, Dog) with unknown properties, strict validation is enabled \"\"\"\n+    def test_deserialize_banana_req_do_not_discard_unknown_properties(self):\n+        \"\"\"\n+        deserialize bananaReq with unknown properties.\n+        Strict validation is enabled.\n+        Simple (non-composed) schema scenario.\n+        \"\"\"\n         config = Configuration(discard_unknown_keys=False)\n         api_client = petstore_api.ApiClient(config)\n         data = {\n-            \"class_name\": \"Dog\",\n-            \"color\": \"black\",\n-            \"breed\": \"husky\",\n-            \"unknown_property\": \"a-value\"\n+            'lengthCm': 21.3,\n+            'sweet': False,\n+            # Below are additional (undeclared) properties not specified in the bananaReq schema.\n+            'unknown_property': 'a-value'\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation raises an exception because the 'unknown_property'\n+        # is undeclared.\n+        with self.assertRaises(petstore_api.exceptions.ApiAttributeError) as cm:\n+            deserialized = api_client.deserialize(response, ((petstore_api.BananaReq),), True)\n+        self.assertTrue(re.match(\"BananaReq has no attribute 'unknown_property' at.*\", str(cm.exception)),\n+            'Exception message: {0}'.format(str(cm.exception)))\n+\n+\n+    def test_deserialize_isosceles_triangle_do_not_discard_unknown_properties(self):\n+        \"\"\"\n+        deserialize IsoscelesTriangle with unknown properties.\n+        Strict validation is enabled.\n+        Composed schema scenario.\n+        \"\"\"\n+        config = Configuration(discard_unknown_keys=False)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ad67c9ff5716abcada471cbe2a42a187363fd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NTEwNg==", "bodyText": "No \"unknown key\" means the client is sending something unknown (garbage data) to the server. I.e. the property is unknown because it's not explicitly declared in the OAS document. I have added code comments to help. I think it's better handled by having code comments, one other possibility would have been to use the word \"garbage\" to show it's not supposed to be there, but now with the code comments it should be pretty clear.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429565106", "createdAt": "2020-05-23T17:49:39Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_discard_unknown_properties.py", "diffHunk": "@@ -36,51 +36,86 @@\n \n class DiscardUnknownPropertiesTests(unittest.TestCase):\n \n-    def test_deserialize_dog_do_not_discard_unknown_properties(self):\n-        \"\"\" deserialize str, Dog) with unknown properties, strict validation is enabled \"\"\"\n+    def test_deserialize_banana_req_do_not_discard_unknown_properties(self):\n+        \"\"\"\n+        deserialize bananaReq with unknown properties.\n+        Strict validation is enabled.\n+        Simple (non-composed) schema scenario.\n+        \"\"\"\n         config = Configuration(discard_unknown_keys=False)\n         api_client = petstore_api.ApiClient(config)\n         data = {\n-            \"class_name\": \"Dog\",\n-            \"color\": \"black\",\n-            \"breed\": \"husky\",\n-            \"unknown_property\": \"a-value\"\n+            'lengthCm': 21.3,\n+            'sweet': False,\n+            # Below are additional (undeclared) properties not specified in the bananaReq schema.\n+            'unknown_property': 'a-value'\n+        }\n+        response = MockResponse(data=json.dumps(data))\n+\n+        # Deserializing with strict validation raises an exception because the 'unknown_property'\n+        # is undeclared.\n+        with self.assertRaises(petstore_api.exceptions.ApiAttributeError) as cm:\n+            deserialized = api_client.deserialize(response, ((petstore_api.BananaReq),), True)\n+        self.assertTrue(re.match(\"BananaReq has no attribute 'unknown_property' at.*\", str(cm.exception)),\n+            'Exception message: {0}'.format(str(cm.exception)))\n+\n+\n+    def test_deserialize_isosceles_triangle_do_not_discard_unknown_properties(self):\n+        \"\"\"\n+        deserialize IsoscelesTriangle with unknown properties.\n+        Strict validation is enabled.\n+        Composed schema scenario.\n+        \"\"\"\n+        config = Configuration(discard_unknown_keys=False)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1OTYyMg=="}, "originalCommit": {"oid": "e91ad67c9ff5716abcada471cbe2a42a187363fd"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTczMzU0OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/test/test_fruit.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNzoyNDo0N1rOGZtLPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzozNDoxNFrOGaG29w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNzc0Mg==", "bodyText": "@sebastien-rosset\nplease take a look at a branch that I made here which updates banana = petstore_api.Banana(None) to raise an exception and has this test assert that the exception is raised.\nWhich do you prefer to get this working?\n\nmerging the new branch that  made into this PR or\nhaving me build a separate PR which implements _nullable?\n\nIf we make a separate _nullable PR, then I would prefer that we\n\nland the _nullable PR before this one if this contains _nullable code or\nremove the _nullable code from this one and land them separately with no requirement on which lands first", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429607742", "createdAt": "2020-05-24T07:24:47Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_fruit.py", "diffHunk": "@@ -189,5 +189,24 @@ def testFruit(self):\n             fruit._additional_properties_model_instances, []\n         )\n \n+    def testFruitNullValue(self):\n+        # Since 'apple' is nullable, validate we can create an apple with the 'null' value.\n+        apple = petstore_api.Apple(None)\n+        self.assertIsNone(apple)\n+\n+        # But 'banana' is not nullable.\n+        banana = petstore_api.Banana(None)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0339d00f03ee4434a57698c071508de0506a4e4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk5NjAyNQ==", "bodyText": "Merged.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r429996025", "createdAt": "2020-05-25T15:42:53Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_fruit.py", "diffHunk": "@@ -189,5 +189,24 @@ def testFruit(self):\n             fruit._additional_properties_model_instances, []\n         )\n \n+    def testFruitNullValue(self):\n+        # Since 'apple' is nullable, validate we can create an apple with the 'null' value.\n+        apple = petstore_api.Apple(None)\n+        self.assertIsNone(apple)\n+\n+        # But 'banana' is not nullable.\n+        banana = petstore_api.Banana(None)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNzc0Mg=="}, "originalCommit": {"oid": "b0339d00f03ee4434a57698c071508de0506a4e4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyODUzNQ==", "bodyText": "Thank you for the merge!", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6290#discussion_r430028535", "createdAt": "2020-05-25T17:34:14Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_fruit.py", "diffHunk": "@@ -189,5 +189,24 @@ def testFruit(self):\n             fruit._additional_properties_model_instances, []\n         )\n \n+    def testFruitNullValue(self):\n+        # Since 'apple' is nullable, validate we can create an apple with the 'null' value.\n+        apple = petstore_api.Apple(None)\n+        self.assertIsNone(apple)\n+\n+        # But 'banana' is not nullable.\n+        banana = petstore_api.Banana(None)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYwNzc0Mg=="}, "originalCommit": {"oid": "b0339d00f03ee4434a57698c071508de0506a4e4"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3429, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}