{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NzUyNjQz", "number": 6357, "title": "[core] Refactor templating management", "bodyText": "This refactors template management to get logic out of DefaultGenerator\nand to provide a cleaner API to template search and read/compile.\nDeprecates MockDefaultGenerator, which is not a mock and causes\nin-memory retention of file contents. Maintainers should prefer\nexecuting a \"dryRun\" with new DefaultGenerator(true) or do true\nmock/spies if evaluating template intermediaries is truly necessary.\nTests may read written files with lower overhead than the in-process\nretention of those bytes.\nThis attempts to maintain some compatibility with existing templating\nadapter interfaces. Any breaking change here would be unintentional but\nminimal effort to retarget the new interface.\n\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.", "createdAt": "2020-05-18T21:31:12Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357", "merged": true, "mergeCommit": {"oid": "a47e522fae1a70d927d0701cb3915c08897b6c58"}, "closed": true, "closedAt": "2020-05-30T04:19:04Z", "author": {"login": "jimschubert"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj2nKigH2gAyNDE5NzUyNjQzOjYzNmM0ZGQyZDY2ODFkNjdhMTFjNWMzNzQ4MTQwMzQyNTdlZjc3NzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcx4g3OgFqTQ0MjY1ODIyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "636c4dd2d6681d67a11c5c374814034257ef7771", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/636c4dd2d6681d67a11c5c374814034257ef7771", "committedDate": "2020-05-22T18:31:05Z", "message": "[core] Refactor templating management\n\nThis refactors template management to get logic out of DefaultGenerator\nand to provide a cleaner API to template search and read/compile.\n\nDeprecates MockDefaultGenerator, which is not a mock and causes\nin-memory retention of file contents. Maintainers should prefer\nexecuting a \"dryRun\" with new DefaultGenerator(true) or do true\nmock/spies if evaluating template intermediaries is truly necessary.\nTests may read written files with lower overhead than the in-process\nretention of those bytes.\n\nThis attempts to maintain some compatibility with existing templating\nadapter interfaces. Any breaking change here would be unintentional but\nminimal effort to retarget the new interface."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d67d3d4e41adcb7a2588c11c06a9248b768d46a5", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/d67d3d4e41adcb7a2588c11c06a9248b768d46a5", "committedDate": "2020-05-22T18:31:21Z", "message": "Fix javadoc errs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66f49b6187bb5b6ca8baa2aaee6c613f60c3b18a", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/66f49b6187bb5b6ca8baa2aaee6c613f60c3b18a", "committedDate": "2020-05-22T18:31:21Z", "message": "Tests for dry run file outputs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a745de4df54390a55ed3cd1aadad611e64cb774", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/6a745de4df54390a55ed3cd1aadad611e64cb774", "committedDate": "2020-05-22T18:31:55Z", "message": "Update API usage in Meta, test TemplateManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b23d99ffb614ebba92b6f264ca756b1fc79adf", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a1b23d99ffb614ebba92b6f264ca756b1fc79adf", "committedDate": "2020-05-22T18:32:04Z", "message": "Fix temp file in overwrite test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ccf3c8a456ff7d0a8ae8bbfb0129ca977ac4dc", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/f3ccf3c8a456ff7d0a8ae8bbfb0129ca977ac4dc", "committedDate": "2020-05-22T18:32:04Z", "message": "Wait on lastModified, lookup by filename in SpringCodegenTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c3c28ea4326490578546a0cb1f82bd987e00694", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/4c3c28ea4326490578546a0cb1f82bd987e00694", "committedDate": "2020-05-22T18:32:04Z", "message": "Remove minimal update test from DefaultGenerator (dupe with TemplateManagerTest)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb804a4eba37bbb15e164d91475e5a6d6ae4a337", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/bb804a4eba37bbb15e164d91475e5a6d6ae4a337", "committedDate": "2020-05-22T18:32:05Z", "message": "Test DefaultGenerator + ignore file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb985ecfb00bfe97695d81dcba68d5b4d3474ae", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ecb985ecfb00bfe97695d81dcba68d5b4d3474ae", "committedDate": "2020-05-22T18:32:05Z", "message": "Move config.processOpenAPI in DefaultGenerator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f970e7cccff2c5e2cc71ddd567ed02b91fcb6ad6", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/f970e7cccff2c5e2cc71ddd567ed02b91fcb6ad6", "committedDate": "2020-05-22T18:32:05Z", "message": "Clarify comment in GeneratorTemplateContentLocator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8062b77829472f5ff3acd78f68d6f4609beba698", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/8062b77829472f5ff3acd78f68d6f4609beba698", "committedDate": "2020-05-22T18:32:06Z", "message": "Do not overwrite existing test files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "048cc6efa2b134a8cda0d541f9ed09ee2200ee30", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/048cc6efa2b134a8cda0d541f9ed09ee2200ee30", "committedDate": "2020-05-22T19:01:43Z", "message": "Fix wrong use of libraries templateDirector (java)\n\nThe samples scripts for Java incorrectly referenced the libraries\ndirectories directly rather than the upper-level Java directory. This\nwas incorrect usage of template directories, because the generator\nexpects to be given the \"language\" directory and perform a lookup for\nmissing templates in the order:\n\n* user defined libraries directory\n* user defined language root\n* embedded libraries directory\n* embedded language root\n* _common directory\n\nThis is incorrect in our samples scripts because a user or maintainer\nhas the expectation that any template change to files at the Java/ root\nshould also be honored on generation if the script specifies a custom\ntemplate directory."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5307f3184db13284f85ea1aab40213147a1b130", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/d5307f3184db13284f85ea1aab40213147a1b130", "committedDate": "2020-05-22T19:05:51Z", "message": "[samples] Regenerate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "066f916312c28df8f9953d3d1be02cfac3e6a187", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/066f916312c28df8f9953d3d1be02cfac3e6a187", "committedDate": "2020-05-22T02:03:03Z", "message": "Clarify comment in GeneratorTemplateContentLocator"}, "afterCommit": {"oid": "d5307f3184db13284f85ea1aab40213147a1b130", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/d5307f3184db13284f85ea1aab40213147a1b130", "committedDate": "2020-05-22T19:05:51Z", "message": "[samples] Regenerate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTMzNjg3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-417133687", "createdAt": "2020-05-22T19:09:55Z", "commit": {"oid": "d5307f3184db13284f85ea1aab40213147a1b130"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTowOTo1NVrOGZhT2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTowOTo1NVrOGZhT2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMzMzNw==", "bodyText": "FYI breaking change, but we should really try sticking to interfaces and move away from abstract base types.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#discussion_r429413337", "createdAt": "2020-05-22T19:09:55Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/AbstractGenerator.java", "diffHunk": "@@ -1,213 +0,0 @@\n-/*\n- * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n- * Copyright 2018 SmartBear Software\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.openapitools.codegen;\n-\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.StandardCopyOption;\n-import java.util.Arrays;\n-import org.apache.commons.lang3.StringUtils;\n-import org.openapitools.codegen.api.TemplatingGenerator;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.*;\n-import java.nio.file.Paths;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Scanner;\n-import java.util.regex.Pattern;\n-\n-public abstract class AbstractGenerator implements TemplatingGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5307f3184db13284f85ea1aab40213147a1b130"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTM0MDI5", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-417134029", "createdAt": "2020-05-22T19:10:42Z", "commit": {"oid": "d5307f3184db13284f85ea1aab40213147a1b130"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOToxMDo0MlrOGZhVEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOToxMDo0MlrOGZhVEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMzY0OA==", "bodyText": "this is now handled by template loading functionality, as that is not the responsibility of DefaultCodegen.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#discussion_r429413648", "createdAt": "2020-05-22T19:10:42Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -163,7 +163,6 @@ apiTemplateFiles are for API outputs only (controllers/handlers).\n     protected Map<String, String> reservedWordsMappings = new HashMap<String, String>();\n     protected String templateDir;\n     protected String embeddedTemplateDir;\n-    protected String commonTemplateDir = \"_common\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5307f3184db13284f85ea1aab40213147a1b130"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTM2MTk0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-417136194", "createdAt": "2020-05-22T19:15:05Z", "commit": {"oid": "d5307f3184db13284f85ea1aab40213147a1b130"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOToxNTowNVrOGZhbiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOToxNTowNVrOGZhbiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxNTMwNw==", "bodyText": "MockDefaultGenerator duplicates all written bytes. getTemplateBasedFile is used to \"inspect\" data passed to templates, but this should be tested differently in the future.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#discussion_r429415307", "createdAt": "2020-05-22T19:15:05Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -83,31 +88,32 @@ public static OpenAPI createOpenAPIWithOneSchema(String name, Schema schema) {\n         return openAPI;\n     }\n \n+    /**\n+     * Extract file from {@link MockDefaultGenerator}\n+     *\n+     * @param generator Generator\n+     * @param root root path\n+     * @param filename filename under root\n+     *\n+     * @return a {@link WrittenTemplateBasedFile}\n+     * @deprecated Since 5.0. Please avoid this method and usage of {@link MockDefaultGenerator}, prefer {@link DefaultGenerator#DefaultGenerator(Boolean)} with dryRun=true.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5307f3184db13284f85ea1aab40213147a1b130"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2671599651e455f56e662e7f91c5cee443edbbf", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e2671599651e455f56e662e7f91c5cee443edbbf", "committedDate": "2020-05-22T21:24:47Z", "message": "Merge branch 'master' into cleanup-template-management\n\n* master:\n  [samples] Regenerate python-experimental\n  [core][general] Add metadata file tracking to aid in \"Golden Tests\" regeneration (#6325)\n  [python-experimental] Add support for pep 3134, attach cause of exception (#6388)\n  [Java-jersey2] Add new ApiClient constructor with auth objects (#6393)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edaa59288c6741bca754f9be791a94e5474f7407", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/edaa59288c6741bca754f9be791a94e5474f7407", "committedDate": "2020-05-23T10:00:47Z", "message": "Fix handlebars extension usage, clean up Meta tasks\n\nHandlebarseEngineAdapter previously didn't handle files without\nextensions in the same was as the MustacheEngineAdapter. This now allows\nfor files without extension (or dotfiles) to lookup in the same\nlocation.\n\nMeta tasks are cleaned up to use template manager only, rather than\nattempting to create an \"empty\" generator to use the previous templating\nspecific methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccbcf6f69a8cb2220d5895c996e36c125af14d79", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ccbcf6f69a8cb2220d5895c996e36c125af14d79", "committedDate": "2020-05-23T11:00:41Z", "message": "Merge branch 'master' into cleanup-template-management\n\n* master:\n  update java jersey2 samples\n  [Java] Fix mustache tag in pom template for HTTP signature (#6404)\n  [Python-experimental] Rename from_server variable to json_variable_naming (#6390)\n  Add a link to medium blog post (#6403)\n  Clean up debug in test (#6398)\n  readding bin/swift5-petstore-readonlyProperties.json\n  remove ./bin/swift5-petstore-readonlyProperties.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef4e8359b707d07ca57dab4795d9045374ef51ca", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ef4e8359b707d07ca57dab4795d9045374ef51ca", "committedDate": "2020-05-23T13:44:25Z", "message": "Merge branch 'master' into cleanup-template-management\n\n* master:\n  decomission nodejs server generator (#6406)\n  [Java] Generate valid code if no Authentication implementations present (#5788)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00ebf203a32ce41bde07f71a584631e64d5179bd", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/00ebf203a32ce41bde07f71a584631e64d5179bd", "committedDate": "2020-05-23T21:37:36Z", "message": "Merge branch 'master' into cleanup-template-management\n\n* master:\n  [java-jersey2] Conditionally include http signature mustache template (#6413)\n  [bug] Fix path provider bug on CI (#6409)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f6368cf9f01dc979040e0f7f71258743f8b0fa7", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/5f6368cf9f01dc979040e0f7f71258743f8b0fa7", "committedDate": "2020-05-23T22:04:45Z", "message": "Move FILES/VERSION metadata gen to private methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b046c2c0eca4c8b69143b8a6d706a33135882f9", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/9b046c2c0eca4c8b69143b8a6d706a33135882f9", "committedDate": "2020-05-24T02:07:16Z", "message": "Update kotlin-multiplatform gradle wrapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8943146f5844d51cfce4995c61aaebeaa6fe3f5a", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/8943146f5844d51cfce4995c61aaebeaa6fe3f5a", "committedDate": "2020-05-24T12:54:42Z", "message": "Rename GraphQL .gitignore template\n\nThe .gitignore file is unable to load via classpath resource from the\ngraphql node server resource directory (for unknown reasons). Before\nthis change, the missing template would fail silently.\n\nA .gitignore file may exist in other directories and load as expected.\nAdded a default .gitignore to _common as a fallback so as not to break\nany custom generators which may also be failing silently."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d256cecf1a1388935ad78f224793ff6019203ac4", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/d256cecf1a1388935ad78f224793ff6019203ac4", "committedDate": "2020-05-24T12:57:35Z", "message": "Log entire stacktrace in go sdk built by gradle in AppVeyor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33f89fd4126b99dd644dd6d083699beedde32eb3", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/33f89fd4126b99dd644dd6d083699beedde32eb3", "committedDate": "2020-05-24T14:12:04Z", "message": "Rename PHP .gitignore to gitignore\n\nJava resources may not load .gitignore, this follows suit with other\ngenerators and uses \"gitignore\" (some use \"gitignore.mustache\")."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ea74693f038ab62471db5b5f950856058241400", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/3ea74693f038ab62471db5b5f950856058241400", "committedDate": "2020-05-24T15:46:39Z", "message": "[samples] Regenerate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc86eea56af4263a704d52d3f3251b63ff5cc931", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/bc86eea56af4263a704d52d3f3251b63ff5cc931", "committedDate": "2020-05-24T16:19:14Z", "message": "[php] Rename .gitignore templates to gitignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e934beca61b2ee293b8f142e12f382cb88cf0a55", "committedDate": "2020-05-25T02:46:35Z", "message": "Use same classpath lookup in common locator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjE5ODcy", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-417619872", "createdAt": "2020-05-25T10:31:39Z", "commit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjkzMDkw", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-417693090", "createdAt": "2020-05-25T12:57:01Z", "commit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjo1NzowMlrOGaASRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjo1NzowMlrOGaASRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMDgzNg==", "bodyText": "Note these removals of libraries/<library name> in the Java sample configs and scripts.\nWhile this syntax works if the entirety of the library code is in the named folder, this would cause fallbacks to fail if anyone were to remove something like model.mustache intending to fallback to resources/Java/model.mustache. We should avoid this possible confusion especially when these subdirectories are structured to follow our library lookup logic:\n\nUser customized library path (e.g. custom_template/libraries/feign/model.mustache)\nUser customized generator top-level path (e.g. custom_template/model.mustache)\nEmbedded library path (e.g. resources/Java/libraries/feign/model.mustache)\nEmbedded top-level path (e.g. resources/Java/model.mustache)\nCommon embedded path (e.g. resources/_common/model.mustache)\nthrow TemplateNotFoundException", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#discussion_r429920836", "createdAt": "2020-05-25T12:57:02Z", "author": {"login": "jimschubert"}, "path": "bin/ci/java-feign.json", "diffHunk": "@@ -3,7 +3,7 @@\n   \"generatorName\": \"java\",\n   \"inputSpec\": \"modules/openapi-generator/src/test/resources/2_0/petstore-with-fake-endpoints-models-for-testing.yaml\",\n   \"outputDir\": \"samples/client/petstore/java/feign\",\n-  \"templateDir\": \"modules/openapi-generator/src/main/resources/Java/libraries/feign\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjkzNzA4", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-417693708", "createdAt": "2020-05-25T12:58:08Z", "commit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjo1ODowOFrOGaAUKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjo1ODowOFrOGaAUKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMTMyMg==", "bodyText": "I'd like to leave --stacktrace here rather than --info. It was taking ~2 hours to get the feedback from AppVeyor after commit and I was unable to repro the issue in Windows locally.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#discussion_r429921322", "createdAt": "2020-05-25T12:58:08Z", "author": {"login": "jimschubert"}, "path": "appveyor.yml", "diffHunk": "@@ -50,7 +50,7 @@ build_script:\n   # install openapi-generator locally\n   - mvn clean install --quiet -Dorg.slf4j.simpleLogger.defaultLogLevel=error\n   # run the locally installed openapi-generator-gradle-plugin\n-  - gradle -b modules\\openapi-generator-gradle-plugin\\samples\\local-spec\\build.gradle buildGoSdk --info\n+  - gradle -b modules\\openapi-generator-gradle-plugin\\samples\\local-spec\\build.gradle buildGoSdk --stacktrace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Njk2Mzgy", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-417696382", "createdAt": "2020-05-25T13:02:51Z", "commit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowMjo1MlrOGaAcRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowMjo1MlrOGaAcRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMzM5OQ==", "bodyText": "Notice regarding the design\u2026\u00a0template processor no longer requires that we pass that logic through a DefaultGenerator instance, which holds logic for OpenAPI input generation to templated output.\nWe can now generate without tight coupling to OpenAPI documents. This is work directed toward #841 and somewhat related to #843.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#discussion_r429923399", "createdAt": "2020-05-25T13:02:52Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator-cli/src/main/java/org/openapitools/codegen/cmd/Meta.java", "diffHunk": "@@ -136,52 +141,38 @@ public void execute() {\n      */\n     private static Converter<SupportingFile, File> processFiles(final File targetDir,\n             final Map<String, Object> data) {\n-        return new Converter<SupportingFile, File>() {\n-            private DefaultGenerator generator = new DefaultGenerator();\n-\n-            @Override\n-            public File convert(SupportingFile support) {\n-                try {\n-                    File destinationFolder =\n-                            new File(new File(targetDir.getAbsolutePath()), support.folder);\n-                    File outputFile = new File(destinationFolder, support.destinationFilename);\n-\n-                    String template =\n-                            generator.readTemplate(new File(TEMPLATE_DIR_CLASSPATH,\n-                                    support.templateFile).getPath());\n-                    String formatted = template;\n-\n-                    if (support.templateFile.endsWith(MUSTACHE_EXTENSION)) {\n-                        LOGGER.info(\"writing file to {}\", outputFile.getAbsolutePath());\n-                        formatted =\n-                                Mustache.compiler().withLoader(loader(generator)).defaultValue(\"\")\n-                                        .compile(template).execute(data);\n-                    } else {\n-                        LOGGER.info(\"copying file to {}\", outputFile.getAbsolutePath());\n-                    }\n-\n-                    FileUtils.writeStringToFile(outputFile, formatted, StandardCharsets.UTF_8);\n-                    return outputFile;\n-\n-                } catch (IOException e) {\n-                    throw new RuntimeException(\"Can't generate project\", e);\n+        return support -> {\n+            try {\n+                File destinationFolder =\n+                        new File(new File(targetDir.getAbsolutePath()), support.folder);\n+                File outputFile = new File(destinationFolder, support.destinationFilename);\n+\n+                TemplateManager templateProcessor = new TemplateManager(\n+                        new TemplateManagerOptions(false, false),\n+                        new MustacheEngineAdapter(),\n+                        new TemplatePathLocator[]{ new CommonTemplateContentLocator(\"codegen\") }\n+                );\n+\n+                String template = templateProcessor.readTemplate(new File(TEMPLATE_DIR_CLASSPATH, support.templateFile).getPath());\n+\n+                String formatted = template;\n+\n+                Mustache.TemplateLoader loader = name -> templateProcessor.getTemplateReader(name.concat(MUSTACHE_EXTENSION));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Njk5MzY2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-417699366", "createdAt": "2020-05-25T13:08:22Z", "commit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowODoyMlrOGaAllg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowODoyMlrOGaAllg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyNTc4Mg==", "bodyText": "I found that .gitignore files sometimes don't load via this.getClass().getClassLoader().getResource(path).\nFor example, this works: this.getClass().getClassLoader().getResource(\"_common/.openapi-generator-ignore\") while this did not: this.getClass().getClassLoader().getResource(\"graphql-nodejs-express-server/.gitignore\"). This only seems to affect PHP and the GraphQL Express servers as everything else is either gitignore or gitignore.mustache (the formats documented as acceptable on Java documentation).", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#discussion_r429925782", "createdAt": "2020-05-25T13:08:22Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractPhpCodegen.java", "diffHunk": "@@ -218,7 +218,7 @@ public void processOpts() {\n         // supportingFiles.add(new SupportingFile(\"LICENSE\", \"\", \"LICENSE\"));\n \n         // all PHP codegens requires Composer, it means that we need to exclude from SVN at least vendor folder\n-        supportingFiles.add(new SupportingFile(\".gitignore\", \"\", \".gitignore\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzAyNjMx", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-417702631", "createdAt": "2020-05-25T13:13:56Z", "commit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoxMzo1N1rOGaAvkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoxMzo1N1rOGaAvkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyODMzOQ==", "bodyText": "This is required because filenames without extensions would become .hbs or .handlebars in the above loop. A file which isn't intended to be handled like REAMDE.md would become README.hbs or README.handlebars and would result in template not found without this as-is attempt.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#discussion_r429928339", "createdAt": "2020-05-25T13:13:57Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/templating/HandlebarsEngineAdapter.java", "diffHunk": "@@ -83,14 +82,22 @@ public TemplateSource sourceAt(String location) {\n         return tmpl.apply(context);\n     }\n \n-    public TemplateSource findTemplate(TemplatingGenerator generator, String templateFile) {\n-        for (String file : getModifiedFileLocation(templateFile)) {\n+    public TemplateSource findTemplate(TemplatingExecutor generator, String templateFile) {\n+        String[] possibilities = getModifiedFileLocation(templateFile);\n+        for (String file : possibilities) {\n             try {\n                 return new StringTemplateSource(file, generator.getFullTemplateContents(file));\n             } catch (Exception ignored) {\n             }\n         }\n-        throw new TemplateNotFoundException(templateFile);\n+\n+        // allow lookup of files without extension modification (such as .openapi-generator-ignore, README.md, etc)\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzA0NTIz", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-417704523", "createdAt": "2020-05-25T13:17:13Z", "commit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoxNzoxM1rOGaA1Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzoxNzoxM1rOGaA1Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyOTgyNg==", "bodyText": "I had issues executing this test locally with Bash 5.0. Had to update gradle in the example so the bash sourcing would succeed. I've only updated the generated output rather than the embedded files so we're not forcing users to update to a potentially invalid Gradle version as they regenerate the kotlin multiplatform generate.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#discussion_r429929826", "createdAt": "2020-05-25T13:17:13Z", "author": {"login": "jimschubert"}, "path": "samples/client/petstore/kotlin-multiplatform/.openapi-generator-ignore", "diffHunk": "@@ -1,23 +1,5 @@\n # OpenAPI Generator Ignore\n-# Generated by openapi-generator https://github.com/openapitools/openapi-generator\n-\n-# Use this file to prevent files from being overwritten by the generator.\n-# The patterns follow closely to .gitignore or .dockerignore.\n-\n-# As an example, the C# client generator defines ApiClient.cs.\n-# You can make changes and tell OpenAPI Generator to ignore just this file by uncommenting the following line:\n-#ApiClient.cs\n-\n-# You can match any string of characters against a directory, file or extension with a single asterisk (*):\n-#foo/*/qux\n-# The above matches foo/bar/qux and foo/baz/qux, but not foo/bar/baz/qux\n-\n-# You can recursively match patterns against a directory, file or extension with a double asterisk (**):\n-#foo/**/qux\n-# This matches foo/bar/qux, foo/baz/qux, and foo/bar/baz/qux\n-\n-# You can also negate patterns with an exclamation (!).\n-# For example, you can ignore all files in a docs folder with the file extension .md:\n-#docs/*.md\n-# Then explicitly reverse the ignore rule for a single file:\n-#!docs/README.md\n+gradle/wrapper/gradle-wrapper.jar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e934beca61b2ee293b8f142e12f382cb88cf0a55"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "062b4d276a3a676756ae788a331fae24077152bb", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/062b4d276a3a676756ae788a331fae24077152bb", "committedDate": "2020-05-27T00:58:28Z", "message": "Merge branch 'master' into cleanup-template-management\n\n* master:\n  [kotlin][client] add support for coroutines with OkHttp (#6362)\n  update package-json.lock (#6430)\n  fix hardcoded match type (#6431)\n  java jersey2 enhance anyOf (#6420)\n  [Java][jersey2] minor improvement to jersey2 tests (#6418)\n  ps minor style change (#6424)\n  [JS] mark ES5 as deprecated (#6408)\n  [ci] Execute maven and verify with no-snapshot-updates (#6415)\n  add new file in ts axios samples\n  Migrate all scala generators to use OAS3 (#6407)\n  migrate ruby samples to oas3 (#6414)\n  [PS] check if JSON properties is defined (#6419)\n  Add C++ UE4  client generator (#6399)\n  Add a link to the article in dev.to (#6421)\n  typescript-axios anytype is not defined (#6335)\n  [Java][jersey2] Make (de)serialization work for oneOf models, add convenience and comparison methods (#6323)\n  Migrate OCaml petstore to use OAS v3 spec (#6348)\n  [Python-experimental] Fix type error if oneof/anyof child schema is null type (#6387)\n  [Python-server] Fix blueplanet 'file not found' error  (#6411)\n  [nodejs] Fix deprecation notice when running sample nodejs script (#6412)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8faa77626cfbc0af673b2f39693ff2556207119a", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/8faa77626cfbc0af673b2f39693ff2556207119a", "committedDate": "2020-05-27T01:24:34Z", "message": "[samples] Regenerate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3dcb2fd6d90c878b388b06f2c7c8a235dad615e", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e3dcb2fd6d90c878b388b06f2c7c8a235dad615e", "committedDate": "2020-05-28T02:36:14Z", "message": "Merge branch 'master' into cleanup-template-management\n\n* master:\n  Fix ruby deprecation error (#6450)\n  [Java][Feign] decommission 9.x support (#6445)\n  fix struct export in rust reqwest (#6453)\n  [Rust][reqwest] add tests to CI (#6454)\n  set pester version (#6448)\n  update datadog logo\n  update groovy petstore samples\n  add datadog as sponsor (#6444)\n  Migrate Groovy samples to oas3 (#6435)\n  [samples] Renerate Kotlin coroutines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff91eec174e8de60ba7bd8515be3bee2e8a65453", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ff91eec174e8de60ba7bd8515be3bee2e8a65453", "committedDate": "2020-05-28T02:46:03Z", "message": "Regenerate rust samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a982d4ba6d98256440a4ba6ba67d99220560597", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/9a982d4ba6d98256440a4ba6ba67d99220560597", "committedDate": "2020-05-28T13:54:08Z", "message": "[rust] Properly escape empty triple-braces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5166440a46d785b5a1d114870320b9baced07046", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/5166440a46d785b5a1d114870320b9baced07046", "committedDate": "2020-05-30T00:52:28Z", "message": "Merge branch 'master' into cleanup-template-management\n\n* master:\n  [PS] Refactor the http signing auth with ecdsa support (#6397)\n  [Rust Server] Hyper 0.13 + Async/Await support (#6244)\n  [Rust] set supportAsync to true as the default (#6480)\n  [php-symfony] Set required PHP version ^7.1.3 (#6181)\n  update doc\n  [csharp] Rename netstandard to netstandard1.3 (#6460)\n  feat: support deprecated parameters for typescript-axios generator (#6475)\n  [REQ][typescript-axios] useSingleRequestParameter should mark parameter optional if all properties are optional (#6477)\n  better struct alias in rust (#6470)\n  Migrate Go server samples to OAS 3 only (#6471)\n  [Rust][reqwest] add async support (#6464)\n  [codegen][python-experimental] Composed schema with additionalProperties  (#6290)\n  [Java] Decommission Retrofit 1.x support (#6447)\n  remove scala oas3 samples (#6446)\n  [Java][jersey2] Fix RuntimeException when HTTP signature parameters are not configured (#6457)\n  [Java][jersey2] Improve http signature code comments (#6463)\n  [typescript-angular] drop support of angular below 6.0.0 (#6360)\n  [cli] new 'author template' command (#6441)\n  python-experimental updates ancestor + adds descendant discriminator tests (#6417)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2033a90ac82a8956facf8b4df6c22a13b2aee4f1", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/2033a90ac82a8956facf8b4df6c22a13b2aee4f1", "committedDate": "2020-05-30T02:05:59Z", "message": "[samples] Regenerate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjU4MTI3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-442658127", "createdAt": "2020-07-05T08:37:22Z", "commit": {"oid": "636c4dd2d6681d67a11c5c374814034257ef7771"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwODozNzoyMlrOGtAurw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwODozNzoyMlrOGtAurw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg1MTA1NQ==", "bodyText": "JAR classpath resource path requires '/' as file separator always, must not be OS dependent, e.g. '\\' under Windows won't work!\nSuggestion: use TemplateManager.getCPResourcePath(libTemplateFile), may extract to similar method like embeddedTemplateExists(String)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#discussion_r449851055", "createdAt": "2020-07-05T08:37:22Z", "author": {"login": "DenisKnoepfle"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/templating/GeneratorTemplateContentLocator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.openapitools.codegen.templating;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.CodegenConfig;\n+import org.openapitools.codegen.TemplateManager;\n+import org.openapitools.codegen.api.TemplatePathLocator;\n+\n+import java.io.File;\n+\n+/**\n+ * Locates templates according to {@link CodegenConfig} settings.\n+ */\n+public class GeneratorTemplateContentLocator implements TemplatePathLocator {\n+    private final CodegenConfig codegenConfig;\n+\n+    /**\n+     * Constructs a new instance of {@link GeneratorTemplateContentLocator} for the provided {@link CodegenConfig}\n+     *\n+     * @param codegenConfig A generator's configuration used for determining template file location.\n+     */\n+    public GeneratorTemplateContentLocator(CodegenConfig codegenConfig) {\n+        this.codegenConfig = codegenConfig;\n+    }\n+\n+    private String buildLibraryFilePath(String dir, String library, String file) {\n+        return dir + File.separator + \"libraries\" + File.separator + library + File.separator + file;\n+    }\n+\n+    /**\n+     * Determines whether an embedded file with the specified name exists.\n+     *\n+     * @param name The name of the file (i.e. relative to resource root)\n+     *\n+     * @return true if file is an embedded resource, false if it does not exist\n+     */\n+    public boolean embeddedTemplateExists(String name) {\n+        return this.getClass().getClassLoader().getResource(TemplateManager.getCPResourcePath(name)) != null;\n+    }\n+\n+    /**\n+     * Get the template file path with template dir prepended, and use the library template if exists.\n+     *\n+     * Precedence:\n+     * 1) (template dir)/libraries/(library)\n+     * 2) (template dir)\n+     * 3) (embedded template dir)/libraries/(library)\n+     * 4) (embedded template dir)\n+     *\n+     * Where \"template dir\" may be user defined and \"embedded template dir\" are the built-in templates for the given generator.\n+     *\n+     * @param relativeTemplateFile Template file\n+     * @return String Full template file path\n+     */\n+    @Override\n+    public String getFullTemplatePath(String relativeTemplateFile) {\n+        CodegenConfig config = this.codegenConfig;\n+\n+        //check the supplied template library folder for the file\n+        final String library = config.getLibrary();\n+        if (StringUtils.isNotEmpty(library)) {\n+            //look for the file in the library subfolder of the supplied template\n+            final String libTemplateFile = buildLibraryFilePath(config.templateDir(), library, relativeTemplateFile);\n+            if (new File(libTemplateFile).exists() || this.getClass().getClassLoader().getResource(libTemplateFile) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636c4dd2d6681d67a11c5c374814034257ef7771"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjU4MjIy", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#pullrequestreview-442658222", "createdAt": "2020-07-05T08:38:57Z", "commit": {"oid": "636c4dd2d6681d67a11c5c374814034257ef7771"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwODozODo1N1rOGtAvFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwODozODo1N1rOGtAvFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg1MTE1OA==", "bodyText": "Same issue with '\\' in resource path under windows, see line 63.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6357#discussion_r449851158", "createdAt": "2020-07-05T08:38:57Z", "author": {"login": "DenisKnoepfle"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/templating/GeneratorTemplateContentLocator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.openapitools.codegen.templating;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.CodegenConfig;\n+import org.openapitools.codegen.TemplateManager;\n+import org.openapitools.codegen.api.TemplatePathLocator;\n+\n+import java.io.File;\n+\n+/**\n+ * Locates templates according to {@link CodegenConfig} settings.\n+ */\n+public class GeneratorTemplateContentLocator implements TemplatePathLocator {\n+    private final CodegenConfig codegenConfig;\n+\n+    /**\n+     * Constructs a new instance of {@link GeneratorTemplateContentLocator} for the provided {@link CodegenConfig}\n+     *\n+     * @param codegenConfig A generator's configuration used for determining template file location.\n+     */\n+    public GeneratorTemplateContentLocator(CodegenConfig codegenConfig) {\n+        this.codegenConfig = codegenConfig;\n+    }\n+\n+    private String buildLibraryFilePath(String dir, String library, String file) {\n+        return dir + File.separator + \"libraries\" + File.separator + library + File.separator + file;\n+    }\n+\n+    /**\n+     * Determines whether an embedded file with the specified name exists.\n+     *\n+     * @param name The name of the file (i.e. relative to resource root)\n+     *\n+     * @return true if file is an embedded resource, false if it does not exist\n+     */\n+    public boolean embeddedTemplateExists(String name) {\n+        return this.getClass().getClassLoader().getResource(TemplateManager.getCPResourcePath(name)) != null;\n+    }\n+\n+    /**\n+     * Get the template file path with template dir prepended, and use the library template if exists.\n+     *\n+     * Precedence:\n+     * 1) (template dir)/libraries/(library)\n+     * 2) (template dir)\n+     * 3) (embedded template dir)/libraries/(library)\n+     * 4) (embedded template dir)\n+     *\n+     * Where \"template dir\" may be user defined and \"embedded template dir\" are the built-in templates for the given generator.\n+     *\n+     * @param relativeTemplateFile Template file\n+     * @return String Full template file path\n+     */\n+    @Override\n+    public String getFullTemplatePath(String relativeTemplateFile) {\n+        CodegenConfig config = this.codegenConfig;\n+\n+        //check the supplied template library folder for the file\n+        final String library = config.getLibrary();\n+        if (StringUtils.isNotEmpty(library)) {\n+            //look for the file in the library subfolder of the supplied template\n+            final String libTemplateFile = buildLibraryFilePath(config.templateDir(), library, relativeTemplateFile);\n+            if (new File(libTemplateFile).exists() || this.getClass().getClassLoader().getResource(libTemplateFile) != null) {\n+                return libTemplateFile;\n+            }\n+        }\n+\n+        //check the supplied template main folder for the file\n+        final String template = config.templateDir() + File.separator + relativeTemplateFile;\n+        if (new File(template).exists() || this.getClass().getClassLoader().getResource(template) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636c4dd2d6681d67a11c5c374814034257ef7771"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2272, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}