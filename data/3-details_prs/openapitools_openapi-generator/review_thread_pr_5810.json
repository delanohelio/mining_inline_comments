{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODYxMjA2", "number": 5810, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjoxNzo1OFrODwyrPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjoyNToyOFrODwyzOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDg4NTA5OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/model_utils.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjoxNzo1OFrOGD-8jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoyNDo1M1rOGEAp2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMDIyMw==", "bodyText": "How about using our hash method in out __eq__ method?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5810#discussion_r406830223", "createdAt": "2020-04-10T16:17:58Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/model_utils.py", "diffHunk": "@@ -204,6 +208,10 @@ def to_str(self):\n         \"\"\"Returns the string representation of the model\"\"\"\n         return pprint.pformat(self.to_dict())\n \n+    def __hash__(self):\n+        \"\"\"Returns the hash value of this object.\"\"\"\n+        return hash(frozenset(self._data_store.items()))\n+\n     def __eq__(self, other):\n         \"\"\"Returns true if both objects are equal\"\"\"\n         if not isinstance(other, self.__class__):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645162c289c5d4655c198e2dc2e63c5f11f4de2a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MTEyOA==", "bodyText": "How about using our hash method in out __eq__ method?\n\nWhat are you trying to achieve by doing this? hash can have collisions, so it cannot be used as is, we must do an actual equality comparison.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5810#discussion_r406841128", "createdAt": "2020-04-10T16:44:13Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/model_utils.py", "diffHunk": "@@ -204,6 +208,10 @@ def to_str(self):\n         \"\"\"Returns the string representation of the model\"\"\"\n         return pprint.pformat(self.to_dict())\n \n+    def __hash__(self):\n+        \"\"\"Returns the hash value of this object.\"\"\"\n+        return hash(frozenset(self._data_store.items()))\n+\n     def __eq__(self, other):\n         \"\"\"Returns true if both objects are equal\"\"\"\n         if not isinstance(other, self.__class__):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMDIyMw=="}, "originalCommit": {"oid": "645162c289c5d4655c198e2dc2e63c5f11f4de2a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODIwMg==", "bodyText": "My intent was to make our definition consistent with what I was reading in python docs about implementing __hash__ and __eq__. If we have a collision chance, I agree that keeping this as-is is better.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5810#discussion_r406858202", "createdAt": "2020-04-10T17:24:53Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/model_utils.py", "diffHunk": "@@ -204,6 +208,10 @@ def to_str(self):\n         \"\"\"Returns the string representation of the model\"\"\"\n         return pprint.pformat(self.to_dict())\n \n+    def __hash__(self):\n+        \"\"\"Returns the hash value of this object.\"\"\"\n+        return hash(frozenset(self._data_store.items()))\n+\n     def __eq__(self, other):\n         \"\"\"Returns true if both objects are equal\"\"\"\n         if not isinstance(other, self.__class__):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMDIyMw=="}, "originalCommit": {"oid": "645162c289c5d4655c198e2dc2e63c5f11f4de2a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDkwNTU0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_tostr_eq_simple.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjoyNToyOFrOGD_JAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjowMjoxNlrOGFnJUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMzQxMQ==", "bodyText": "Can you change this to hash(frozenset(self._data_store.items())) so it is the same as the one in modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_todict_tostr_eq_shared.mustache ? That will reduce the chance of hash collisions when we have different ModelSimple, ModelNormal, and ModelComposed instances in a set.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5810#discussion_r406833411", "createdAt": "2020-04-10T16:25:28Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_tostr_eq_simple.mustache", "diffHunk": "@@ -2,6 +2,10 @@\n         \"\"\"Returns the string representation of the model\"\"\"\n         return str(self.value)\n \n+    def __hash__(self):\n+        \"\"\"Returns the hash value of this object.\"\"\"\n+        return hash(self._data_store['value'])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645162c289c5d4655c198e2dc2e63c5f11f4de2a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyNjUyMQ==", "bodyText": "Based on the discussion, I think I can mark this resolved.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5810#discussion_r408526521", "createdAt": "2020-04-15T01:22:18Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_tostr_eq_simple.mustache", "diffHunk": "@@ -2,6 +2,10 @@\n         \"\"\"Returns the string representation of the model\"\"\"\n         return str(self.value)\n \n+    def __hash__(self):\n+        \"\"\"Returns the hash value of this object.\"\"\"\n+        return hash(self._data_store['value'])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMzQxMQ=="}, "originalCommit": {"oid": "645162c289c5d4655c198e2dc2e63c5f11f4de2a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzNzQyNg==", "bodyText": "Yup, and no need for this method anymore", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5810#discussion_r408537426", "createdAt": "2020-04-15T02:02:16Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_tostr_eq_simple.mustache", "diffHunk": "@@ -2,6 +2,10 @@\n         \"\"\"Returns the string representation of the model\"\"\"\n         return str(self.value)\n \n+    def __hash__(self):\n+        \"\"\"Returns the hash value of this object.\"\"\"\n+        return hash(self._data_store['value'])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMzQxMQ=="}, "originalCommit": {"oid": "645162c289c5d4655c198e2dc2e63c5f11f4de2a"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3636, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}