{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNzQwOTM4", "number": 6598, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjowOTo1OVrOED16Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxMzoyMFrOED1-6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDY0NDExOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator-core/src/main/java/org/openapitools/codegen/api/TemplatingEngineAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjowOTo1OVrOGhGORQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjowOTo1OVrOGhGORQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1ODE0OQ==", "bodyText": "lastIndexOf taking character is more performant", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6598#discussion_r437358149", "createdAt": "2020-06-09T12:09:59Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator-core/src/main/java/org/openapitools/codegen/api/TemplatingEngineAdapter.java", "diffHunk": "@@ -65,9 +75,10 @@ String compileTemplate(TemplatingExecutor executor, Map<String, Object> bundle,\n      * @param templateFile The original target filename\n      * @return True if the template is available in the template search path, false if it can not be found\n      */\n+    @SuppressWarnings({\"java:S2093\"}) // ignore java:S2093 because we have double-assignment to the closeable\n     default boolean templateExists(TemplatingExecutor generator, String templateFile) {\n         return Arrays.stream(getFileExtensions()).anyMatch(ext -> {\n-            int idx = templateFile.lastIndexOf(\".\");\n+            int idx = templateFile.lastIndexOf('.');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfc66d20ac3e86ec4c0f178d44c42f2b55ab53d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDY0ODQ3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/TemplateManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxMToxNFrOGhGQ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxMToxNFrOGhGQ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1ODgyMg==", "bodyText": "This fixes what I believe may have been a bug prior to this change\u2026\u00a0supporting files may not have resolved using the libraries path rules appropriately.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6598#discussion_r437358822", "createdAt": "2020-06-09T12:11:14Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/TemplateManager.java", "diffHunk": "@@ -145,18 +158,32 @@ public Reader getTemplateReader(String name) {\n      */\n     @Override\n     public File write(Map<String, Object> data, String template, File target) throws IOException {\n-        String templateContent = this.engineAdapter.compileTemplate(this, data, template);\n-        return writeToFile(target.getPath(), templateContent);\n+        if (this.engineAdapter.handlesFile(template)) {\n+            // Only pass files with valid endings through template engine\n+            String templateContent = this.engineAdapter.compileTemplate(this, data, template);\n+            return writeToFile(target.getPath(), templateContent);\n+        } else {\n+            // Do a straight copy of the file if not listed as supported by the template engine.\n+            InputStream is;\n+            try {\n+                // look up the file using the same template resolution logic the adapters would use.\n+                String fullTemplatePath = getFullTemplateFile(template);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfc66d20ac3e86ec4c0f178d44c42f2b55ab53d"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDY1MDg2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/TemplatingEngineLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxMTo1NFrOGhGSew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxMTo1NFrOGhGSew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1OTIyNw==", "bodyText": "%n uses system-specific newline rather than newline only.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6598#discussion_r437359227", "createdAt": "2020-06-09T12:11:54Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/TemplatingEngineLoader.java", "diffHunk": "@@ -37,7 +42,7 @@ public static TemplatingEngineAdapter byIdentifier(String id) {\n             // Attempt to load skipping SPI\n             return (TemplatingEngineAdapter) Class.forName(id).getDeclaredConstructor().newInstance();\n         } catch (Exception e) {\n-            throw new RuntimeException(String.format(Locale.ROOT, \"Couldn't load template engine adapter %s. Available options: \\n%s\", id, sb.toString()), e);\n+            throw new RuntimeException(String.format(Locale.ROOT, \"Couldn't load template engine adapter %s. Available options: %n%s\", id, sb.toString()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfc66d20ac3e86ec4c0f178d44c42f2b55ab53d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDY1NjQzOnYy", "diffSide": "LEFT", "path": "modules/openapi-generator/src/main/resources/rust/request.rs", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxMzoyMFrOGhGV2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxMzoyMFrOGhGV2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MDA4OA==", "bodyText": "This was added in the template management refactor because the file was being processed by Mustache engine (note file is request.rs not request.mustache and I missed this during the refactor)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6598#discussion_r437360088", "createdAt": "2020-06-09T12:13:20Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/resources/rust/request.rs", "diffHunk": "@@ -113,7 +113,7 @@ impl Request {\n         let mut path = self.path;\n         for (k, v) in self.path_params {\n             // replace {id} with the value of the id path param\n-            {{=<% %>=}}path = path.replace(&format!(\"{{{}}}\", k), &v);<%={{ }}=%>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbfc66d20ac3e86ec4c0f178d44c42f2b55ab53d"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3306, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}