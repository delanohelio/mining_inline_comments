{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTI2NjA5", "number": 6341, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMzozNTo1N1rOD_IiUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1MDozN1rOEAhEEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTI2NzM2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMzozNTo1N1rOGZpdcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMzo1MToxM1rOGZphtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0Njg2NQ==", "bodyText": "Heads-up: later we may switch it to something like r.is2XXCode as 2 or 3 other generators need is4XXCode and is5XXCode as well (and probably is3XXCode)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r429546865", "createdAt": "2020-05-23T13:35:57Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -3799,6 +3800,7 @@ public CodegenResponse fromResponse(String responseCode, ApiResponse response) {\n                 default:\n                     throw new RuntimeException(\"Invalid response code \" + responseCode);\n             }\n+            r.isSuccessCode = r.code.startsWith(\"2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d1864d02f5779bf19b4c185cc41a08a18cf9a3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0Nzk1Ng==", "bodyText": "Good catch! That's actually already the case - see the switch statement right above this line. I'll fix it later today.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r429547956", "createdAt": "2020-05-23T13:51:13Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -3799,6 +3800,7 @@ public CodegenResponse fromResponse(String responseCode, ApiResponse response) {\n                 default:\n                     throw new RuntimeException(\"Invalid response code \" + responseCode);\n             }\n+            r.isSuccessCode = r.code.startsWith(\"2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0Njg2NQ=="}, "originalCommit": {"oid": "41d1864d02f5779bf19b4c185cc41a08a18cf9a3"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODg3NDYwOnYy", "diffSide": "RIGHT", "path": "bin/typescript.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToyOTo0MlrOGbtG2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToyOTo0MlrOGbtG2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMzc3MA==", "bodyText": "please also add a windows version of this file", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431703770", "createdAt": "2020-05-28T09:29:42Z", "author": {"login": "macjohnny"}, "path": "bin/typescript.sh", "diffHunk": "@@ -0,0 +1,37 @@\n+#!/bin/sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODg4MjMxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTozMTo1NlrOGbtL7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTowNTo0MFrOGc8iHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNTA3MA==", "bodyText": "how about an updated copyright notice?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431705070", "createdAt": "2020-05-28T09:31:56Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -0,0 +1,865 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwNTA4NA==", "bodyText": "Most of this file is copied from AbstractClientCodegen - so I believe we have to at least maintain the SmartBearSoftware notice.\nI have updated the year for OAI-Gen Contributors though.\nIs there anything else which I should change?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r433005084", "createdAt": "2020-06-01T01:05:40Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -0,0 +1,865 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNTA3MA=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODg5NTAwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTozNToyMFrOGbtTtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMTozMzoyMlrOGcZGzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNzA2MQ==", "bodyText": "is this comment still up-to-date?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431707061", "createdAt": "2020-05-28T09:35:20Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -0,0 +1,865 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.NumberSchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.parameters.Parameter;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.meta.GeneratorMetadata;\n+import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+import static org.openapitools.codegen.utils.StringUtils.underscore;\n+\n+\n+public class TypeScriptClientCodegen extends DefaultCodegen implements CodegenConfig {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptClientCodegen.class);\n+\n+    private static final String X_DISCRIMINATOR_TYPE = \"x-discriminator-value\";\n+    private static final String UNDEFINED_VALUE = \"undefined\";\n+\n+    private static final String FRAMEWORK_SWITCH = \"framework\";\n+    private static final String FRAMEWORK_SWITCH_DESC = \"Specify the framework which should be used in the client code.\";\n+    private static final String[] FRAMEWORKS = { \"fetch-api\", \"jquery\" };\n+    private static final String PLATFORM_SWITCH = \"platform\";\n+    private static final String PLATFORM_SWITCH_DESC = \"Specifies the platform the code should run on. The default is 'node' for the 'request' framework and 'browser' otherwise.\";\n+    private static final String[] PLATFORMS = { \"browser\", \"node\" };\n+    private static final String FILE_CONTENT_DATA_TYPE= \"fileContentDataType\";\n+    private static final String FILE_CONTENT_DATA_TYPE_DESC = \"Specifies the type to use for the content of a file - i.e. Blob (Browser) / Buffer (node)\";\n+    private static final String USE_RXJS_SWITCH = \"useRxJS\";\n+    private static final String USE_RXJS_SWITCH_DESC = \"Enable this to internally use rxjs observables. If disabled, a stub is used instead. This is required for the 'angular' framework.\";\n+\n+    private final Map<String, String> frameworkToHttpLibMap;\n+    \n+    // NPM Options\n+    private static final String SNAPSHOT = \"snapshot\";\n+    @SuppressWarnings(\"squid:S5164\")\n+    protected static final ThreadLocal<SimpleDateFormat> SNAPSHOT_SUFFIX_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyyMMddHHmm\", Locale.ROOT));\n+    private static final String NPM_REPOSITORY = \"npmRepository\";\n+    private static final String NPM_NAME = \"npmName\";\n+    private static final String NPM_VERSION = \"npmVersion\";\n+\n+    // NPM Option Values\n+    protected String npmRepository = null;\n+    protected String snapshot = null;\n+    protected String npmName = null;\n+    protected String npmVersion = \"1.0.0\";\n+    protected String modelPropertyNaming = \"camelCase\";\n+    protected HashSet<String> languageGenericTypes;\n+\n+    public TypeScriptClientCodegen() {\n+        super();\n+            \n+        this.frameworkToHttpLibMap = new HashMap<>();\n+        this.frameworkToHttpLibMap.put(\"fetch-api\", \"isomorphic-fetch\");\n+        this.frameworkToHttpLibMap.put(\"jquery\", \"jquery\");\n+        \n+        \n+        this.generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata).stability(Stability.EXPERIMENTAL).build();\n+        \n+        // clear import mapping (from default generator) as TS does not use it\n+        // at the moment\n+        importMapping.clear();\n+        outputFolder = \"generated-code\" + File.separator + \"typescript\";\n+        embeddedTemplateDir = templateDir = \"typescript\";\n+\n+        supportsInheritance = true;\n+        \n+        // NOTE: TypeScript uses camel cased reserved words, while models are title cased. We don't want lowercase comparisons.\n+        reservedWords.addAll(Arrays.asList(\n+                // local variable names used in API methods (endpoints)\n+                \"varLocalPath\", \"queryParameters\", \"headerParams\", \"formParams\", \"useFormData\", \"varLocalDeferred\",\n+                \"requestOptions\",\n+                // Typescript reserved words\n+                \"abstract\", \"await\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"export\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"function\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"interface\", \"let\", \"long\", \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"transient\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"volatile\", \"while\", \"with\", \"yield\"));\n+\n+        languageSpecificPrimitives = new HashSet<>(Arrays.asList(\n+                \"string\",\n+                \"String\",\n+                \"boolean\",\n+                \"Boolean\",\n+                \"Double\",\n+                \"Integer\",\n+                \"Long\",\n+                \"Float\",\n+                \"Object\",\n+                \"Array\",\n+                \"Date\",\n+                \"number\",\n+                \"any\",\n+                \"File\",\n+                \"Error\",\n+                \"Map\"\n+        ));\n+\n+        languageGenericTypes = new HashSet<String>(Arrays.asList(\n+                \"Array\"\n+        ));\n+\n+        instantiationTypes.put(\"array\", \"Array\");\n+\n+        typeMapping = new HashMap<String, String>();\n+        typeMapping.put(\"Array\", \"Array\");\n+        typeMapping.put(\"array\", \"Array\");\n+        typeMapping.put(\"List\", \"Array\");\n+        typeMapping.put(\"boolean\", \"boolean\");\n+        typeMapping.put(\"string\", \"string\");\n+        typeMapping.put(\"int\", \"number\");\n+        typeMapping.put(\"float\", \"number\");\n+        typeMapping.put(\"number\", \"number\");\n+        typeMapping.put(\"long\", \"number\");\n+        typeMapping.put(\"short\", \"number\");\n+        typeMapping.put(\"char\", \"string\");\n+        typeMapping.put(\"double\", \"number\");\n+        typeMapping.put(\"object\", \"any\");\n+        typeMapping.put(\"integer\", \"number\");\n+        typeMapping.put(\"Map\", \"any\");\n+        typeMapping.put(\"date\", \"string\");\n+        typeMapping.put(\"DateTime\", \"Date\");\n+        typeMapping.put(\"binary\", \"any\");\n+        // TODO: allow other types for file e.g. Blob\n+        typeMapping.put(\"File\", \"any\");\n+        typeMapping.put(\"ByteArray\", \"string\");\n+        typeMapping.put(\"UUID\", \"string\");\n+        typeMapping.put(\"Error\", \"Error\");\n+                \n+\n+        cliOptions.add(new CliOption(NPM_NAME, \"The name under which you want to publish generated npm package.\" +\n+                \" Required to generate a full package\"));\n+        cliOptions.add(new CliOption(NPM_VERSION, \"The version of your npm package. If not provided, using the version from the OpenAPI specification file.\").defaultValue(this.getNpmVersion()));\n+        cliOptions.add(new CliOption(NPM_REPOSITORY, \"Use this property to set an url your private npmRepo in the package.json\"));\n+        cliOptions.add(CliOption.newBoolean(SNAPSHOT,\n+                \"When setting this property to true, the version will be suffixed with -SNAPSHOT.\" + this.SNAPSHOT_SUFFIX_FORMAT.get().toPattern(),\n+                false));\n+\n+        cliOptions.add(new CliOption(CodegenConstants.MODEL_PROPERTY_NAMING, CodegenConstants.MODEL_PROPERTY_NAMING_DESC).defaultValue(\"camelCase\"));\n+        cliOptions.add(new CliOption(CodegenConstants.SUPPORTS_ES6, CodegenConstants.SUPPORTS_ES6_DESC).defaultValue(\"false\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE, TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE_DESC).defaultValue(\"Buffer\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.USE_RXJS_SWITCH, TypeScriptClientCodegen.USE_RXJS_SWITCH_DESC).defaultValue(\"false\"));\n+\n+        CliOption frameworkOption = new CliOption(TypeScriptClientCodegen.FRAMEWORK_SWITCH, TypeScriptClientCodegen.FRAMEWORK_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.FRAMEWORKS) {\n+            // TODO: improve description?\n+            frameworkOption.addEnum(option, option);\n+        }\n+        frameworkOption.defaultValue(FRAMEWORKS[0]);\n+        cliOptions.add(frameworkOption);\n+\n+        CliOption platformOption = new CliOption(TypeScriptClientCodegen.PLATFORM_SWITCH, TypeScriptClientCodegen.PLATFORM_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.PLATFORMS) {\n+            // TODO: improve description?\n+            platformOption.addEnum(option, option);\n+        }\n+        platformOption.defaultValue(PLATFORMS[0]);\n+\n+        cliOptions.add(platformOption);\n+\n+\n+        // TODO: gen package.json?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNDY1NA==", "bodyText": "I would say no, we can already generate the package.json.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r432424654", "createdAt": "2020-05-29T11:33:22Z", "author": {"login": "bodograumann"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -0,0 +1,865 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.NumberSchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.parameters.Parameter;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.meta.GeneratorMetadata;\n+import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+import static org.openapitools.codegen.utils.StringUtils.underscore;\n+\n+\n+public class TypeScriptClientCodegen extends DefaultCodegen implements CodegenConfig {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptClientCodegen.class);\n+\n+    private static final String X_DISCRIMINATOR_TYPE = \"x-discriminator-value\";\n+    private static final String UNDEFINED_VALUE = \"undefined\";\n+\n+    private static final String FRAMEWORK_SWITCH = \"framework\";\n+    private static final String FRAMEWORK_SWITCH_DESC = \"Specify the framework which should be used in the client code.\";\n+    private static final String[] FRAMEWORKS = { \"fetch-api\", \"jquery\" };\n+    private static final String PLATFORM_SWITCH = \"platform\";\n+    private static final String PLATFORM_SWITCH_DESC = \"Specifies the platform the code should run on. The default is 'node' for the 'request' framework and 'browser' otherwise.\";\n+    private static final String[] PLATFORMS = { \"browser\", \"node\" };\n+    private static final String FILE_CONTENT_DATA_TYPE= \"fileContentDataType\";\n+    private static final String FILE_CONTENT_DATA_TYPE_DESC = \"Specifies the type to use for the content of a file - i.e. Blob (Browser) / Buffer (node)\";\n+    private static final String USE_RXJS_SWITCH = \"useRxJS\";\n+    private static final String USE_RXJS_SWITCH_DESC = \"Enable this to internally use rxjs observables. If disabled, a stub is used instead. This is required for the 'angular' framework.\";\n+\n+    private final Map<String, String> frameworkToHttpLibMap;\n+    \n+    // NPM Options\n+    private static final String SNAPSHOT = \"snapshot\";\n+    @SuppressWarnings(\"squid:S5164\")\n+    protected static final ThreadLocal<SimpleDateFormat> SNAPSHOT_SUFFIX_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyyMMddHHmm\", Locale.ROOT));\n+    private static final String NPM_REPOSITORY = \"npmRepository\";\n+    private static final String NPM_NAME = \"npmName\";\n+    private static final String NPM_VERSION = \"npmVersion\";\n+\n+    // NPM Option Values\n+    protected String npmRepository = null;\n+    protected String snapshot = null;\n+    protected String npmName = null;\n+    protected String npmVersion = \"1.0.0\";\n+    protected String modelPropertyNaming = \"camelCase\";\n+    protected HashSet<String> languageGenericTypes;\n+\n+    public TypeScriptClientCodegen() {\n+        super();\n+            \n+        this.frameworkToHttpLibMap = new HashMap<>();\n+        this.frameworkToHttpLibMap.put(\"fetch-api\", \"isomorphic-fetch\");\n+        this.frameworkToHttpLibMap.put(\"jquery\", \"jquery\");\n+        \n+        \n+        this.generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata).stability(Stability.EXPERIMENTAL).build();\n+        \n+        // clear import mapping (from default generator) as TS does not use it\n+        // at the moment\n+        importMapping.clear();\n+        outputFolder = \"generated-code\" + File.separator + \"typescript\";\n+        embeddedTemplateDir = templateDir = \"typescript\";\n+\n+        supportsInheritance = true;\n+        \n+        // NOTE: TypeScript uses camel cased reserved words, while models are title cased. We don't want lowercase comparisons.\n+        reservedWords.addAll(Arrays.asList(\n+                // local variable names used in API methods (endpoints)\n+                \"varLocalPath\", \"queryParameters\", \"headerParams\", \"formParams\", \"useFormData\", \"varLocalDeferred\",\n+                \"requestOptions\",\n+                // Typescript reserved words\n+                \"abstract\", \"await\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"export\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"function\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"interface\", \"let\", \"long\", \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"transient\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"volatile\", \"while\", \"with\", \"yield\"));\n+\n+        languageSpecificPrimitives = new HashSet<>(Arrays.asList(\n+                \"string\",\n+                \"String\",\n+                \"boolean\",\n+                \"Boolean\",\n+                \"Double\",\n+                \"Integer\",\n+                \"Long\",\n+                \"Float\",\n+                \"Object\",\n+                \"Array\",\n+                \"Date\",\n+                \"number\",\n+                \"any\",\n+                \"File\",\n+                \"Error\",\n+                \"Map\"\n+        ));\n+\n+        languageGenericTypes = new HashSet<String>(Arrays.asList(\n+                \"Array\"\n+        ));\n+\n+        instantiationTypes.put(\"array\", \"Array\");\n+\n+        typeMapping = new HashMap<String, String>();\n+        typeMapping.put(\"Array\", \"Array\");\n+        typeMapping.put(\"array\", \"Array\");\n+        typeMapping.put(\"List\", \"Array\");\n+        typeMapping.put(\"boolean\", \"boolean\");\n+        typeMapping.put(\"string\", \"string\");\n+        typeMapping.put(\"int\", \"number\");\n+        typeMapping.put(\"float\", \"number\");\n+        typeMapping.put(\"number\", \"number\");\n+        typeMapping.put(\"long\", \"number\");\n+        typeMapping.put(\"short\", \"number\");\n+        typeMapping.put(\"char\", \"string\");\n+        typeMapping.put(\"double\", \"number\");\n+        typeMapping.put(\"object\", \"any\");\n+        typeMapping.put(\"integer\", \"number\");\n+        typeMapping.put(\"Map\", \"any\");\n+        typeMapping.put(\"date\", \"string\");\n+        typeMapping.put(\"DateTime\", \"Date\");\n+        typeMapping.put(\"binary\", \"any\");\n+        // TODO: allow other types for file e.g. Blob\n+        typeMapping.put(\"File\", \"any\");\n+        typeMapping.put(\"ByteArray\", \"string\");\n+        typeMapping.put(\"UUID\", \"string\");\n+        typeMapping.put(\"Error\", \"Error\");\n+                \n+\n+        cliOptions.add(new CliOption(NPM_NAME, \"The name under which you want to publish generated npm package.\" +\n+                \" Required to generate a full package\"));\n+        cliOptions.add(new CliOption(NPM_VERSION, \"The version of your npm package. If not provided, using the version from the OpenAPI specification file.\").defaultValue(this.getNpmVersion()));\n+        cliOptions.add(new CliOption(NPM_REPOSITORY, \"Use this property to set an url your private npmRepo in the package.json\"));\n+        cliOptions.add(CliOption.newBoolean(SNAPSHOT,\n+                \"When setting this property to true, the version will be suffixed with -SNAPSHOT.\" + this.SNAPSHOT_SUFFIX_FORMAT.get().toPattern(),\n+                false));\n+\n+        cliOptions.add(new CliOption(CodegenConstants.MODEL_PROPERTY_NAMING, CodegenConstants.MODEL_PROPERTY_NAMING_DESC).defaultValue(\"camelCase\"));\n+        cliOptions.add(new CliOption(CodegenConstants.SUPPORTS_ES6, CodegenConstants.SUPPORTS_ES6_DESC).defaultValue(\"false\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE, TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE_DESC).defaultValue(\"Buffer\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.USE_RXJS_SWITCH, TypeScriptClientCodegen.USE_RXJS_SWITCH_DESC).defaultValue(\"false\"));\n+\n+        CliOption frameworkOption = new CliOption(TypeScriptClientCodegen.FRAMEWORK_SWITCH, TypeScriptClientCodegen.FRAMEWORK_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.FRAMEWORKS) {\n+            // TODO: improve description?\n+            frameworkOption.addEnum(option, option);\n+        }\n+        frameworkOption.defaultValue(FRAMEWORKS[0]);\n+        cliOptions.add(frameworkOption);\n+\n+        CliOption platformOption = new CliOption(TypeScriptClientCodegen.PLATFORM_SWITCH, TypeScriptClientCodegen.PLATFORM_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.PLATFORMS) {\n+            // TODO: improve description?\n+            platformOption.addEnum(option, option);\n+        }\n+        platformOption.defaultValue(PLATFORMS[0]);\n+\n+        cliOptions.add(platformOption);\n+\n+\n+        // TODO: gen package.json?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNzA2MQ=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODkwODAzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTozOToxMVrOGbtb6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMTowMDo1MlrOGc8fwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwOTE2MQ==", "bodyText": "how about using a list of strings and concatenating it at the end with |?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431709161", "createdAt": "2020-05-28T09:39:11Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -0,0 +1,865 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.NumberSchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.parameters.Parameter;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.meta.GeneratorMetadata;\n+import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+import static org.openapitools.codegen.utils.StringUtils.underscore;\n+\n+\n+public class TypeScriptClientCodegen extends DefaultCodegen implements CodegenConfig {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptClientCodegen.class);\n+\n+    private static final String X_DISCRIMINATOR_TYPE = \"x-discriminator-value\";\n+    private static final String UNDEFINED_VALUE = \"undefined\";\n+\n+    private static final String FRAMEWORK_SWITCH = \"framework\";\n+    private static final String FRAMEWORK_SWITCH_DESC = \"Specify the framework which should be used in the client code.\";\n+    private static final String[] FRAMEWORKS = { \"fetch-api\", \"jquery\" };\n+    private static final String PLATFORM_SWITCH = \"platform\";\n+    private static final String PLATFORM_SWITCH_DESC = \"Specifies the platform the code should run on. The default is 'node' for the 'request' framework and 'browser' otherwise.\";\n+    private static final String[] PLATFORMS = { \"browser\", \"node\" };\n+    private static final String FILE_CONTENT_DATA_TYPE= \"fileContentDataType\";\n+    private static final String FILE_CONTENT_DATA_TYPE_DESC = \"Specifies the type to use for the content of a file - i.e. Blob (Browser) / Buffer (node)\";\n+    private static final String USE_RXJS_SWITCH = \"useRxJS\";\n+    private static final String USE_RXJS_SWITCH_DESC = \"Enable this to internally use rxjs observables. If disabled, a stub is used instead. This is required for the 'angular' framework.\";\n+\n+    private final Map<String, String> frameworkToHttpLibMap;\n+    \n+    // NPM Options\n+    private static final String SNAPSHOT = \"snapshot\";\n+    @SuppressWarnings(\"squid:S5164\")\n+    protected static final ThreadLocal<SimpleDateFormat> SNAPSHOT_SUFFIX_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyyMMddHHmm\", Locale.ROOT));\n+    private static final String NPM_REPOSITORY = \"npmRepository\";\n+    private static final String NPM_NAME = \"npmName\";\n+    private static final String NPM_VERSION = \"npmVersion\";\n+\n+    // NPM Option Values\n+    protected String npmRepository = null;\n+    protected String snapshot = null;\n+    protected String npmName = null;\n+    protected String npmVersion = \"1.0.0\";\n+    protected String modelPropertyNaming = \"camelCase\";\n+    protected HashSet<String> languageGenericTypes;\n+\n+    public TypeScriptClientCodegen() {\n+        super();\n+            \n+        this.frameworkToHttpLibMap = new HashMap<>();\n+        this.frameworkToHttpLibMap.put(\"fetch-api\", \"isomorphic-fetch\");\n+        this.frameworkToHttpLibMap.put(\"jquery\", \"jquery\");\n+        \n+        \n+        this.generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata).stability(Stability.EXPERIMENTAL).build();\n+        \n+        // clear import mapping (from default generator) as TS does not use it\n+        // at the moment\n+        importMapping.clear();\n+        outputFolder = \"generated-code\" + File.separator + \"typescript\";\n+        embeddedTemplateDir = templateDir = \"typescript\";\n+\n+        supportsInheritance = true;\n+        \n+        // NOTE: TypeScript uses camel cased reserved words, while models are title cased. We don't want lowercase comparisons.\n+        reservedWords.addAll(Arrays.asList(\n+                // local variable names used in API methods (endpoints)\n+                \"varLocalPath\", \"queryParameters\", \"headerParams\", \"formParams\", \"useFormData\", \"varLocalDeferred\",\n+                \"requestOptions\",\n+                // Typescript reserved words\n+                \"abstract\", \"await\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"export\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"function\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"interface\", \"let\", \"long\", \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"transient\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"volatile\", \"while\", \"with\", \"yield\"));\n+\n+        languageSpecificPrimitives = new HashSet<>(Arrays.asList(\n+                \"string\",\n+                \"String\",\n+                \"boolean\",\n+                \"Boolean\",\n+                \"Double\",\n+                \"Integer\",\n+                \"Long\",\n+                \"Float\",\n+                \"Object\",\n+                \"Array\",\n+                \"Date\",\n+                \"number\",\n+                \"any\",\n+                \"File\",\n+                \"Error\",\n+                \"Map\"\n+        ));\n+\n+        languageGenericTypes = new HashSet<String>(Arrays.asList(\n+                \"Array\"\n+        ));\n+\n+        instantiationTypes.put(\"array\", \"Array\");\n+\n+        typeMapping = new HashMap<String, String>();\n+        typeMapping.put(\"Array\", \"Array\");\n+        typeMapping.put(\"array\", \"Array\");\n+        typeMapping.put(\"List\", \"Array\");\n+        typeMapping.put(\"boolean\", \"boolean\");\n+        typeMapping.put(\"string\", \"string\");\n+        typeMapping.put(\"int\", \"number\");\n+        typeMapping.put(\"float\", \"number\");\n+        typeMapping.put(\"number\", \"number\");\n+        typeMapping.put(\"long\", \"number\");\n+        typeMapping.put(\"short\", \"number\");\n+        typeMapping.put(\"char\", \"string\");\n+        typeMapping.put(\"double\", \"number\");\n+        typeMapping.put(\"object\", \"any\");\n+        typeMapping.put(\"integer\", \"number\");\n+        typeMapping.put(\"Map\", \"any\");\n+        typeMapping.put(\"date\", \"string\");\n+        typeMapping.put(\"DateTime\", \"Date\");\n+        typeMapping.put(\"binary\", \"any\");\n+        // TODO: allow other types for file e.g. Blob\n+        typeMapping.put(\"File\", \"any\");\n+        typeMapping.put(\"ByteArray\", \"string\");\n+        typeMapping.put(\"UUID\", \"string\");\n+        typeMapping.put(\"Error\", \"Error\");\n+                \n+\n+        cliOptions.add(new CliOption(NPM_NAME, \"The name under which you want to publish generated npm package.\" +\n+                \" Required to generate a full package\"));\n+        cliOptions.add(new CliOption(NPM_VERSION, \"The version of your npm package. If not provided, using the version from the OpenAPI specification file.\").defaultValue(this.getNpmVersion()));\n+        cliOptions.add(new CliOption(NPM_REPOSITORY, \"Use this property to set an url your private npmRepo in the package.json\"));\n+        cliOptions.add(CliOption.newBoolean(SNAPSHOT,\n+                \"When setting this property to true, the version will be suffixed with -SNAPSHOT.\" + this.SNAPSHOT_SUFFIX_FORMAT.get().toPattern(),\n+                false));\n+\n+        cliOptions.add(new CliOption(CodegenConstants.MODEL_PROPERTY_NAMING, CodegenConstants.MODEL_PROPERTY_NAMING_DESC).defaultValue(\"camelCase\"));\n+        cliOptions.add(new CliOption(CodegenConstants.SUPPORTS_ES6, CodegenConstants.SUPPORTS_ES6_DESC).defaultValue(\"false\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE, TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE_DESC).defaultValue(\"Buffer\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.USE_RXJS_SWITCH, TypeScriptClientCodegen.USE_RXJS_SWITCH_DESC).defaultValue(\"false\"));\n+\n+        CliOption frameworkOption = new CliOption(TypeScriptClientCodegen.FRAMEWORK_SWITCH, TypeScriptClientCodegen.FRAMEWORK_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.FRAMEWORKS) {\n+            // TODO: improve description?\n+            frameworkOption.addEnum(option, option);\n+        }\n+        frameworkOption.defaultValue(FRAMEWORKS[0]);\n+        cliOptions.add(frameworkOption);\n+\n+        CliOption platformOption = new CliOption(TypeScriptClientCodegen.PLATFORM_SWITCH, TypeScriptClientCodegen.PLATFORM_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.PLATFORMS) {\n+            // TODO: improve description?\n+            platformOption.addEnum(option, option);\n+        }\n+        platformOption.defaultValue(PLATFORMS[0]);\n+\n+        cliOptions.add(platformOption);\n+\n+\n+        // TODO: gen package.json?\n+        \n+        //Documentation\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", \"\", \"README.md\"));\n+        supportingFiles.add(new SupportingFile(\"package.mustache\", \"\", \"package.json\"));\n+        supportingFiles.add(new SupportingFile(\"tsconfig.mustache\", \"\", \"tsconfig.json\"));\n+        supportingFiles.add(new SupportingFile(\".gitignore.mustache\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        \n+        // Util\n+        supportingFiles.add(new SupportingFile(\"util.mustache\", \"\", \"util.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"exception.mustache\", \"apis\", \"exception.ts\"));\n+        // http\n+        supportingFiles.add(new SupportingFile(\"http\" + File.separator + \"http.mustache\", \"http\", \"http.ts\"));\n+        supportingFiles.add(new SupportingFile(\"http\" + File.separator + \"servers.mustache\", \"servers.ts\"));\n+\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", \"\", \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"auth\" + File.separator + \"auth.mustache\", \"auth\", \"auth.ts\"));\n+        \n+        supportingFiles.add(new SupportingFile(\"model\" + File.separator + \"models_all.mustache\", \"models\", \"all.ts\"));\n+\n+        // TODO: add supporting files depending on cli parameter e.g. fetch vs angular\n+        supportingFiles.add(new SupportingFile(\"types\" + File.separator + \"PromiseAPI.mustache\", \"types\", \"PromiseAPI.ts\"));\n+        supportingFiles.add(new SupportingFile(\"types\" + File.separator + \"ObservableAPI.mustache\", \"types\", \"ObservableAPI.ts\"));\n+\n+        // models\n+        // TODO: properly set model and api packages\n+        this.setModelPackage(\"\");\n+        supportingFiles.add(new SupportingFile(\"model\" + File.separator + \"ObjectSerializer.mustache\", \"models\", \"ObjectSerializer.ts\"));\n+        modelTemplateFiles.put(\"model\" + File.separator + \"model.mustache\", \".ts\");\n+\n+        // api\n+        this.setApiPackage(\"\");\n+        supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"middleware.mustache\", \"\", \"middleware.ts\"));\n+        this.supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"baseapi.mustache\", \"apis\", \"baseapi.ts\"));\n+        this.apiTemplateFiles.put(\"api\" + File.separator + \"api.mustache\", \".ts\");\n+    }\n+\n+    public String getNpmName() {\n+        return npmName;\n+    }\n+\n+    public void setNpmName(String npmName) {\n+        this.npmName = npmName;\n+    }\n+\n+    public String getNpmRepository() {\n+        return npmRepository;\n+    }\n+\n+    public void setNpmRepository(String npmRepository) {\n+        this.npmRepository = npmRepository;\n+    }\n+\n+    public String getNpmVersion() {\n+        return npmVersion;\n+    }\n+\n+    public void setNpmVersion(String npmVersion) {\n+        this.npmVersion = npmVersion;\n+    }\n+    \n+    @Override\n+    public CodegenType getTag() {\n+        return CodegenType.CLIENT;\n+    }\n+    \n+    @Override\n+    public void preprocessOpenAPI(OpenAPI openAPI) {\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+\n+            // If no npmVersion is provided in additional properties, version from API specification is used.\n+            // If none of them is provided then fallbacks to default version\n+            if (additionalProperties.containsKey(NPM_VERSION)) {\n+                this.setNpmVersion(additionalProperties.get(NPM_VERSION).toString());\n+            } else if (openAPI.getInfo() != null && openAPI.getInfo().getVersion() != null) {\n+                this.setNpmVersion(openAPI.getInfo().getVersion());\n+            }\n+\n+            if (additionalProperties.containsKey(SNAPSHOT) && Boolean.parseBoolean(additionalProperties.get(SNAPSHOT).toString())) {\n+                if (npmVersion.toUpperCase(Locale.ROOT).matches(\"^.*-SNAPSHOT$\")) {\n+                    this.setNpmVersion(npmVersion + \".\" + SNAPSHOT_SUFFIX_FORMAT.get().format(new Date()));\n+                } else {\n+                    this.setNpmVersion(npmVersion + \"-SNAPSHOT.\" + SNAPSHOT_SUFFIX_FORMAT.get().format(new Date()));\n+                }\n+            }\n+            additionalProperties.put(NPM_VERSION, npmVersion);\n+\n+        }\n+    }\n+    \n+    @Override\n+    public Map<String, Object> postProcessSupportingFileData(Map<String, Object> objs) {      \n+        final Object propFramework = additionalProperties.get(FRAMEWORK_SWITCH);\n+\n+        Map<String, Boolean> frameworks = new HashMap<>();\n+        for (String framework: FRAMEWORKS) {\n+            frameworks.put(framework, framework.equals(propFramework));\n+        }\n+        objs.put(\"framework\", propFramework);\n+        objs.put(\"frameworks\", frameworks);\n+\n+        objs.put(\"fileContentDataType\", additionalProperties.get(FILE_CONTENT_DATA_TYPE));\n+\n+        return objs;\n+    }\n+    \n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> operations, List<Object> models) {     \n+        \n+        // Add additional filename information for model imports in the apis\n+        List<Map<String, Object>> imports = (List<Map<String, Object>>) operations.get(\"imports\");\n+        for (Map<String, Object> im : imports) {\n+            im.put(\"filename\", ((String) im.get(\"import\")).replace(\".\", File.separator));\n+            im.put(\"classname\", getModelnameFromModelFilename(im.get(\"import\").toString()));\n+        }\n+        \n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Object> operationsMap = (Map<String, Object>) operations.get(\"operations\");\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operationsMap.get(\"operation\");\n+        for (CodegenOperation operation: operationList) {\n+            List<CodegenResponse> responses = operation.responses;\n+            operation.returnType = this.getReturnType(responses);          \n+        }\n+        return operations;\n+    }\n+    \n+    private String getReturnType(List<CodegenResponse> responses) {\n+        StringBuilder returnType = new StringBuilder();\n+        boolean firstReturnType = true;\n+        boolean atLeastOneSuccess = false;\n+        boolean addVoid = false;\n+        for (CodegenResponse response: responses) {\n+            // TODO: we should probably catch an exception here\n+            if (response.is2xx) {\n+                if (response.dataType != null) {\n+                    if (!firstReturnType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwNDQ4MA==", "bodyText": "Replaced with a Set and simplified the code", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r433004480", "createdAt": "2020-06-01T01:00:52Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -0,0 +1,865 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.NumberSchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.parameters.Parameter;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.meta.GeneratorMetadata;\n+import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+import static org.openapitools.codegen.utils.StringUtils.underscore;\n+\n+\n+public class TypeScriptClientCodegen extends DefaultCodegen implements CodegenConfig {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptClientCodegen.class);\n+\n+    private static final String X_DISCRIMINATOR_TYPE = \"x-discriminator-value\";\n+    private static final String UNDEFINED_VALUE = \"undefined\";\n+\n+    private static final String FRAMEWORK_SWITCH = \"framework\";\n+    private static final String FRAMEWORK_SWITCH_DESC = \"Specify the framework which should be used in the client code.\";\n+    private static final String[] FRAMEWORKS = { \"fetch-api\", \"jquery\" };\n+    private static final String PLATFORM_SWITCH = \"platform\";\n+    private static final String PLATFORM_SWITCH_DESC = \"Specifies the platform the code should run on. The default is 'node' for the 'request' framework and 'browser' otherwise.\";\n+    private static final String[] PLATFORMS = { \"browser\", \"node\" };\n+    private static final String FILE_CONTENT_DATA_TYPE= \"fileContentDataType\";\n+    private static final String FILE_CONTENT_DATA_TYPE_DESC = \"Specifies the type to use for the content of a file - i.e. Blob (Browser) / Buffer (node)\";\n+    private static final String USE_RXJS_SWITCH = \"useRxJS\";\n+    private static final String USE_RXJS_SWITCH_DESC = \"Enable this to internally use rxjs observables. If disabled, a stub is used instead. This is required for the 'angular' framework.\";\n+\n+    private final Map<String, String> frameworkToHttpLibMap;\n+    \n+    // NPM Options\n+    private static final String SNAPSHOT = \"snapshot\";\n+    @SuppressWarnings(\"squid:S5164\")\n+    protected static final ThreadLocal<SimpleDateFormat> SNAPSHOT_SUFFIX_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyyMMddHHmm\", Locale.ROOT));\n+    private static final String NPM_REPOSITORY = \"npmRepository\";\n+    private static final String NPM_NAME = \"npmName\";\n+    private static final String NPM_VERSION = \"npmVersion\";\n+\n+    // NPM Option Values\n+    protected String npmRepository = null;\n+    protected String snapshot = null;\n+    protected String npmName = null;\n+    protected String npmVersion = \"1.0.0\";\n+    protected String modelPropertyNaming = \"camelCase\";\n+    protected HashSet<String> languageGenericTypes;\n+\n+    public TypeScriptClientCodegen() {\n+        super();\n+            \n+        this.frameworkToHttpLibMap = new HashMap<>();\n+        this.frameworkToHttpLibMap.put(\"fetch-api\", \"isomorphic-fetch\");\n+        this.frameworkToHttpLibMap.put(\"jquery\", \"jquery\");\n+        \n+        \n+        this.generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata).stability(Stability.EXPERIMENTAL).build();\n+        \n+        // clear import mapping (from default generator) as TS does not use it\n+        // at the moment\n+        importMapping.clear();\n+        outputFolder = \"generated-code\" + File.separator + \"typescript\";\n+        embeddedTemplateDir = templateDir = \"typescript\";\n+\n+        supportsInheritance = true;\n+        \n+        // NOTE: TypeScript uses camel cased reserved words, while models are title cased. We don't want lowercase comparisons.\n+        reservedWords.addAll(Arrays.asList(\n+                // local variable names used in API methods (endpoints)\n+                \"varLocalPath\", \"queryParameters\", \"headerParams\", \"formParams\", \"useFormData\", \"varLocalDeferred\",\n+                \"requestOptions\",\n+                // Typescript reserved words\n+                \"abstract\", \"await\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"export\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"function\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"interface\", \"let\", \"long\", \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"transient\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"volatile\", \"while\", \"with\", \"yield\"));\n+\n+        languageSpecificPrimitives = new HashSet<>(Arrays.asList(\n+                \"string\",\n+                \"String\",\n+                \"boolean\",\n+                \"Boolean\",\n+                \"Double\",\n+                \"Integer\",\n+                \"Long\",\n+                \"Float\",\n+                \"Object\",\n+                \"Array\",\n+                \"Date\",\n+                \"number\",\n+                \"any\",\n+                \"File\",\n+                \"Error\",\n+                \"Map\"\n+        ));\n+\n+        languageGenericTypes = new HashSet<String>(Arrays.asList(\n+                \"Array\"\n+        ));\n+\n+        instantiationTypes.put(\"array\", \"Array\");\n+\n+        typeMapping = new HashMap<String, String>();\n+        typeMapping.put(\"Array\", \"Array\");\n+        typeMapping.put(\"array\", \"Array\");\n+        typeMapping.put(\"List\", \"Array\");\n+        typeMapping.put(\"boolean\", \"boolean\");\n+        typeMapping.put(\"string\", \"string\");\n+        typeMapping.put(\"int\", \"number\");\n+        typeMapping.put(\"float\", \"number\");\n+        typeMapping.put(\"number\", \"number\");\n+        typeMapping.put(\"long\", \"number\");\n+        typeMapping.put(\"short\", \"number\");\n+        typeMapping.put(\"char\", \"string\");\n+        typeMapping.put(\"double\", \"number\");\n+        typeMapping.put(\"object\", \"any\");\n+        typeMapping.put(\"integer\", \"number\");\n+        typeMapping.put(\"Map\", \"any\");\n+        typeMapping.put(\"date\", \"string\");\n+        typeMapping.put(\"DateTime\", \"Date\");\n+        typeMapping.put(\"binary\", \"any\");\n+        // TODO: allow other types for file e.g. Blob\n+        typeMapping.put(\"File\", \"any\");\n+        typeMapping.put(\"ByteArray\", \"string\");\n+        typeMapping.put(\"UUID\", \"string\");\n+        typeMapping.put(\"Error\", \"Error\");\n+                \n+\n+        cliOptions.add(new CliOption(NPM_NAME, \"The name under which you want to publish generated npm package.\" +\n+                \" Required to generate a full package\"));\n+        cliOptions.add(new CliOption(NPM_VERSION, \"The version of your npm package. If not provided, using the version from the OpenAPI specification file.\").defaultValue(this.getNpmVersion()));\n+        cliOptions.add(new CliOption(NPM_REPOSITORY, \"Use this property to set an url your private npmRepo in the package.json\"));\n+        cliOptions.add(CliOption.newBoolean(SNAPSHOT,\n+                \"When setting this property to true, the version will be suffixed with -SNAPSHOT.\" + this.SNAPSHOT_SUFFIX_FORMAT.get().toPattern(),\n+                false));\n+\n+        cliOptions.add(new CliOption(CodegenConstants.MODEL_PROPERTY_NAMING, CodegenConstants.MODEL_PROPERTY_NAMING_DESC).defaultValue(\"camelCase\"));\n+        cliOptions.add(new CliOption(CodegenConstants.SUPPORTS_ES6, CodegenConstants.SUPPORTS_ES6_DESC).defaultValue(\"false\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE, TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE_DESC).defaultValue(\"Buffer\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.USE_RXJS_SWITCH, TypeScriptClientCodegen.USE_RXJS_SWITCH_DESC).defaultValue(\"false\"));\n+\n+        CliOption frameworkOption = new CliOption(TypeScriptClientCodegen.FRAMEWORK_SWITCH, TypeScriptClientCodegen.FRAMEWORK_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.FRAMEWORKS) {\n+            // TODO: improve description?\n+            frameworkOption.addEnum(option, option);\n+        }\n+        frameworkOption.defaultValue(FRAMEWORKS[0]);\n+        cliOptions.add(frameworkOption);\n+\n+        CliOption platformOption = new CliOption(TypeScriptClientCodegen.PLATFORM_SWITCH, TypeScriptClientCodegen.PLATFORM_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.PLATFORMS) {\n+            // TODO: improve description?\n+            platformOption.addEnum(option, option);\n+        }\n+        platformOption.defaultValue(PLATFORMS[0]);\n+\n+        cliOptions.add(platformOption);\n+\n+\n+        // TODO: gen package.json?\n+        \n+        //Documentation\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", \"\", \"README.md\"));\n+        supportingFiles.add(new SupportingFile(\"package.mustache\", \"\", \"package.json\"));\n+        supportingFiles.add(new SupportingFile(\"tsconfig.mustache\", \"\", \"tsconfig.json\"));\n+        supportingFiles.add(new SupportingFile(\".gitignore.mustache\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        \n+        // Util\n+        supportingFiles.add(new SupportingFile(\"util.mustache\", \"\", \"util.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"exception.mustache\", \"apis\", \"exception.ts\"));\n+        // http\n+        supportingFiles.add(new SupportingFile(\"http\" + File.separator + \"http.mustache\", \"http\", \"http.ts\"));\n+        supportingFiles.add(new SupportingFile(\"http\" + File.separator + \"servers.mustache\", \"servers.ts\"));\n+\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", \"\", \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"auth\" + File.separator + \"auth.mustache\", \"auth\", \"auth.ts\"));\n+        \n+        supportingFiles.add(new SupportingFile(\"model\" + File.separator + \"models_all.mustache\", \"models\", \"all.ts\"));\n+\n+        // TODO: add supporting files depending on cli parameter e.g. fetch vs angular\n+        supportingFiles.add(new SupportingFile(\"types\" + File.separator + \"PromiseAPI.mustache\", \"types\", \"PromiseAPI.ts\"));\n+        supportingFiles.add(new SupportingFile(\"types\" + File.separator + \"ObservableAPI.mustache\", \"types\", \"ObservableAPI.ts\"));\n+\n+        // models\n+        // TODO: properly set model and api packages\n+        this.setModelPackage(\"\");\n+        supportingFiles.add(new SupportingFile(\"model\" + File.separator + \"ObjectSerializer.mustache\", \"models\", \"ObjectSerializer.ts\"));\n+        modelTemplateFiles.put(\"model\" + File.separator + \"model.mustache\", \".ts\");\n+\n+        // api\n+        this.setApiPackage(\"\");\n+        supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"middleware.mustache\", \"\", \"middleware.ts\"));\n+        this.supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"baseapi.mustache\", \"apis\", \"baseapi.ts\"));\n+        this.apiTemplateFiles.put(\"api\" + File.separator + \"api.mustache\", \".ts\");\n+    }\n+\n+    public String getNpmName() {\n+        return npmName;\n+    }\n+\n+    public void setNpmName(String npmName) {\n+        this.npmName = npmName;\n+    }\n+\n+    public String getNpmRepository() {\n+        return npmRepository;\n+    }\n+\n+    public void setNpmRepository(String npmRepository) {\n+        this.npmRepository = npmRepository;\n+    }\n+\n+    public String getNpmVersion() {\n+        return npmVersion;\n+    }\n+\n+    public void setNpmVersion(String npmVersion) {\n+        this.npmVersion = npmVersion;\n+    }\n+    \n+    @Override\n+    public CodegenType getTag() {\n+        return CodegenType.CLIENT;\n+    }\n+    \n+    @Override\n+    public void preprocessOpenAPI(OpenAPI openAPI) {\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+\n+            // If no npmVersion is provided in additional properties, version from API specification is used.\n+            // If none of them is provided then fallbacks to default version\n+            if (additionalProperties.containsKey(NPM_VERSION)) {\n+                this.setNpmVersion(additionalProperties.get(NPM_VERSION).toString());\n+            } else if (openAPI.getInfo() != null && openAPI.getInfo().getVersion() != null) {\n+                this.setNpmVersion(openAPI.getInfo().getVersion());\n+            }\n+\n+            if (additionalProperties.containsKey(SNAPSHOT) && Boolean.parseBoolean(additionalProperties.get(SNAPSHOT).toString())) {\n+                if (npmVersion.toUpperCase(Locale.ROOT).matches(\"^.*-SNAPSHOT$\")) {\n+                    this.setNpmVersion(npmVersion + \".\" + SNAPSHOT_SUFFIX_FORMAT.get().format(new Date()));\n+                } else {\n+                    this.setNpmVersion(npmVersion + \"-SNAPSHOT.\" + SNAPSHOT_SUFFIX_FORMAT.get().format(new Date()));\n+                }\n+            }\n+            additionalProperties.put(NPM_VERSION, npmVersion);\n+\n+        }\n+    }\n+    \n+    @Override\n+    public Map<String, Object> postProcessSupportingFileData(Map<String, Object> objs) {      \n+        final Object propFramework = additionalProperties.get(FRAMEWORK_SWITCH);\n+\n+        Map<String, Boolean> frameworks = new HashMap<>();\n+        for (String framework: FRAMEWORKS) {\n+            frameworks.put(framework, framework.equals(propFramework));\n+        }\n+        objs.put(\"framework\", propFramework);\n+        objs.put(\"frameworks\", frameworks);\n+\n+        objs.put(\"fileContentDataType\", additionalProperties.get(FILE_CONTENT_DATA_TYPE));\n+\n+        return objs;\n+    }\n+    \n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> operations, List<Object> models) {     \n+        \n+        // Add additional filename information for model imports in the apis\n+        List<Map<String, Object>> imports = (List<Map<String, Object>>) operations.get(\"imports\");\n+        for (Map<String, Object> im : imports) {\n+            im.put(\"filename\", ((String) im.get(\"import\")).replace(\".\", File.separator));\n+            im.put(\"classname\", getModelnameFromModelFilename(im.get(\"import\").toString()));\n+        }\n+        \n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Object> operationsMap = (Map<String, Object>) operations.get(\"operations\");\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operationsMap.get(\"operation\");\n+        for (CodegenOperation operation: operationList) {\n+            List<CodegenResponse> responses = operation.responses;\n+            operation.returnType = this.getReturnType(responses);          \n+        }\n+        return operations;\n+    }\n+    \n+    private String getReturnType(List<CodegenResponse> responses) {\n+        StringBuilder returnType = new StringBuilder();\n+        boolean firstReturnType = true;\n+        boolean atLeastOneSuccess = false;\n+        boolean addVoid = false;\n+        for (CodegenResponse response: responses) {\n+            // TODO: we should probably catch an exception here\n+            if (response.is2xx) {\n+                if (response.dataType != null) {\n+                    if (!firstReturnType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwOTE2MQ=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODkxMTcwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTo0MDoxMlrOGbtePg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTo0MDoxMlrOGbtePg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwOTc1OA==", "bodyText": "add some short doc", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431709758", "createdAt": "2020-05-28T09:40:12Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptClientCodegen.java", "diffHunk": "@@ -0,0 +1,865 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.NumberSchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.parameters.Parameter;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.meta.GeneratorMetadata;\n+import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.Map.Entry;\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+import static org.openapitools.codegen.utils.StringUtils.underscore;\n+\n+\n+public class TypeScriptClientCodegen extends DefaultCodegen implements CodegenConfig {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptClientCodegen.class);\n+\n+    private static final String X_DISCRIMINATOR_TYPE = \"x-discriminator-value\";\n+    private static final String UNDEFINED_VALUE = \"undefined\";\n+\n+    private static final String FRAMEWORK_SWITCH = \"framework\";\n+    private static final String FRAMEWORK_SWITCH_DESC = \"Specify the framework which should be used in the client code.\";\n+    private static final String[] FRAMEWORKS = { \"fetch-api\", \"jquery\" };\n+    private static final String PLATFORM_SWITCH = \"platform\";\n+    private static final String PLATFORM_SWITCH_DESC = \"Specifies the platform the code should run on. The default is 'node' for the 'request' framework and 'browser' otherwise.\";\n+    private static final String[] PLATFORMS = { \"browser\", \"node\" };\n+    private static final String FILE_CONTENT_DATA_TYPE= \"fileContentDataType\";\n+    private static final String FILE_CONTENT_DATA_TYPE_DESC = \"Specifies the type to use for the content of a file - i.e. Blob (Browser) / Buffer (node)\";\n+    private static final String USE_RXJS_SWITCH = \"useRxJS\";\n+    private static final String USE_RXJS_SWITCH_DESC = \"Enable this to internally use rxjs observables. If disabled, a stub is used instead. This is required for the 'angular' framework.\";\n+\n+    private final Map<String, String> frameworkToHttpLibMap;\n+    \n+    // NPM Options\n+    private static final String SNAPSHOT = \"snapshot\";\n+    @SuppressWarnings(\"squid:S5164\")\n+    protected static final ThreadLocal<SimpleDateFormat> SNAPSHOT_SUFFIX_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(\"yyyyMMddHHmm\", Locale.ROOT));\n+    private static final String NPM_REPOSITORY = \"npmRepository\";\n+    private static final String NPM_NAME = \"npmName\";\n+    private static final String NPM_VERSION = \"npmVersion\";\n+\n+    // NPM Option Values\n+    protected String npmRepository = null;\n+    protected String snapshot = null;\n+    protected String npmName = null;\n+    protected String npmVersion = \"1.0.0\";\n+    protected String modelPropertyNaming = \"camelCase\";\n+    protected HashSet<String> languageGenericTypes;\n+\n+    public TypeScriptClientCodegen() {\n+        super();\n+            \n+        this.frameworkToHttpLibMap = new HashMap<>();\n+        this.frameworkToHttpLibMap.put(\"fetch-api\", \"isomorphic-fetch\");\n+        this.frameworkToHttpLibMap.put(\"jquery\", \"jquery\");\n+        \n+        \n+        this.generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata).stability(Stability.EXPERIMENTAL).build();\n+        \n+        // clear import mapping (from default generator) as TS does not use it\n+        // at the moment\n+        importMapping.clear();\n+        outputFolder = \"generated-code\" + File.separator + \"typescript\";\n+        embeddedTemplateDir = templateDir = \"typescript\";\n+\n+        supportsInheritance = true;\n+        \n+        // NOTE: TypeScript uses camel cased reserved words, while models are title cased. We don't want lowercase comparisons.\n+        reservedWords.addAll(Arrays.asList(\n+                // local variable names used in API methods (endpoints)\n+                \"varLocalPath\", \"queryParameters\", \"headerParams\", \"formParams\", \"useFormData\", \"varLocalDeferred\",\n+                \"requestOptions\",\n+                // Typescript reserved words\n+                \"abstract\", \"await\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"char\", \"class\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"export\", \"extends\", \"false\", \"final\", \"finally\", \"float\", \"for\", \"function\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"interface\", \"let\", \"long\", \"native\", \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\", \"return\", \"short\", \"static\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"transient\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"volatile\", \"while\", \"with\", \"yield\"));\n+\n+        languageSpecificPrimitives = new HashSet<>(Arrays.asList(\n+                \"string\",\n+                \"String\",\n+                \"boolean\",\n+                \"Boolean\",\n+                \"Double\",\n+                \"Integer\",\n+                \"Long\",\n+                \"Float\",\n+                \"Object\",\n+                \"Array\",\n+                \"Date\",\n+                \"number\",\n+                \"any\",\n+                \"File\",\n+                \"Error\",\n+                \"Map\"\n+        ));\n+\n+        languageGenericTypes = new HashSet<String>(Arrays.asList(\n+                \"Array\"\n+        ));\n+\n+        instantiationTypes.put(\"array\", \"Array\");\n+\n+        typeMapping = new HashMap<String, String>();\n+        typeMapping.put(\"Array\", \"Array\");\n+        typeMapping.put(\"array\", \"Array\");\n+        typeMapping.put(\"List\", \"Array\");\n+        typeMapping.put(\"boolean\", \"boolean\");\n+        typeMapping.put(\"string\", \"string\");\n+        typeMapping.put(\"int\", \"number\");\n+        typeMapping.put(\"float\", \"number\");\n+        typeMapping.put(\"number\", \"number\");\n+        typeMapping.put(\"long\", \"number\");\n+        typeMapping.put(\"short\", \"number\");\n+        typeMapping.put(\"char\", \"string\");\n+        typeMapping.put(\"double\", \"number\");\n+        typeMapping.put(\"object\", \"any\");\n+        typeMapping.put(\"integer\", \"number\");\n+        typeMapping.put(\"Map\", \"any\");\n+        typeMapping.put(\"date\", \"string\");\n+        typeMapping.put(\"DateTime\", \"Date\");\n+        typeMapping.put(\"binary\", \"any\");\n+        // TODO: allow other types for file e.g. Blob\n+        typeMapping.put(\"File\", \"any\");\n+        typeMapping.put(\"ByteArray\", \"string\");\n+        typeMapping.put(\"UUID\", \"string\");\n+        typeMapping.put(\"Error\", \"Error\");\n+                \n+\n+        cliOptions.add(new CliOption(NPM_NAME, \"The name under which you want to publish generated npm package.\" +\n+                \" Required to generate a full package\"));\n+        cliOptions.add(new CliOption(NPM_VERSION, \"The version of your npm package. If not provided, using the version from the OpenAPI specification file.\").defaultValue(this.getNpmVersion()));\n+        cliOptions.add(new CliOption(NPM_REPOSITORY, \"Use this property to set an url your private npmRepo in the package.json\"));\n+        cliOptions.add(CliOption.newBoolean(SNAPSHOT,\n+                \"When setting this property to true, the version will be suffixed with -SNAPSHOT.\" + this.SNAPSHOT_SUFFIX_FORMAT.get().toPattern(),\n+                false));\n+\n+        cliOptions.add(new CliOption(CodegenConstants.MODEL_PROPERTY_NAMING, CodegenConstants.MODEL_PROPERTY_NAMING_DESC).defaultValue(\"camelCase\"));\n+        cliOptions.add(new CliOption(CodegenConstants.SUPPORTS_ES6, CodegenConstants.SUPPORTS_ES6_DESC).defaultValue(\"false\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE, TypeScriptClientCodegen.FILE_CONTENT_DATA_TYPE_DESC).defaultValue(\"Buffer\"));\n+        cliOptions.add(new CliOption(TypeScriptClientCodegen.USE_RXJS_SWITCH, TypeScriptClientCodegen.USE_RXJS_SWITCH_DESC).defaultValue(\"false\"));\n+\n+        CliOption frameworkOption = new CliOption(TypeScriptClientCodegen.FRAMEWORK_SWITCH, TypeScriptClientCodegen.FRAMEWORK_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.FRAMEWORKS) {\n+            // TODO: improve description?\n+            frameworkOption.addEnum(option, option);\n+        }\n+        frameworkOption.defaultValue(FRAMEWORKS[0]);\n+        cliOptions.add(frameworkOption);\n+\n+        CliOption platformOption = new CliOption(TypeScriptClientCodegen.PLATFORM_SWITCH, TypeScriptClientCodegen.PLATFORM_SWITCH_DESC);\n+        for (String option: TypeScriptClientCodegen.PLATFORMS) {\n+            // TODO: improve description?\n+            platformOption.addEnum(option, option);\n+        }\n+        platformOption.defaultValue(PLATFORMS[0]);\n+\n+        cliOptions.add(platformOption);\n+\n+\n+        // TODO: gen package.json?\n+        \n+        //Documentation\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", \"\", \"README.md\"));\n+        supportingFiles.add(new SupportingFile(\"package.mustache\", \"\", \"package.json\"));\n+        supportingFiles.add(new SupportingFile(\"tsconfig.mustache\", \"\", \"tsconfig.json\"));\n+        supportingFiles.add(new SupportingFile(\".gitignore.mustache\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        \n+        // Util\n+        supportingFiles.add(new SupportingFile(\"util.mustache\", \"\", \"util.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"exception.mustache\", \"apis\", \"exception.ts\"));\n+        // http\n+        supportingFiles.add(new SupportingFile(\"http\" + File.separator + \"http.mustache\", \"http\", \"http.ts\"));\n+        supportingFiles.add(new SupportingFile(\"http\" + File.separator + \"servers.mustache\", \"servers.ts\"));\n+\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", \"\", \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"auth\" + File.separator + \"auth.mustache\", \"auth\", \"auth.ts\"));\n+        \n+        supportingFiles.add(new SupportingFile(\"model\" + File.separator + \"models_all.mustache\", \"models\", \"all.ts\"));\n+\n+        // TODO: add supporting files depending on cli parameter e.g. fetch vs angular\n+        supportingFiles.add(new SupportingFile(\"types\" + File.separator + \"PromiseAPI.mustache\", \"types\", \"PromiseAPI.ts\"));\n+        supportingFiles.add(new SupportingFile(\"types\" + File.separator + \"ObservableAPI.mustache\", \"types\", \"ObservableAPI.ts\"));\n+\n+        // models\n+        // TODO: properly set model and api packages\n+        this.setModelPackage(\"\");\n+        supportingFiles.add(new SupportingFile(\"model\" + File.separator + \"ObjectSerializer.mustache\", \"models\", \"ObjectSerializer.ts\"));\n+        modelTemplateFiles.put(\"model\" + File.separator + \"model.mustache\", \".ts\");\n+\n+        // api\n+        this.setApiPackage(\"\");\n+        supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"middleware.mustache\", \"\", \"middleware.ts\"));\n+        this.supportingFiles.add(new SupportingFile(\"api\" + File.separator + \"baseapi.mustache\", \"apis\", \"baseapi.ts\"));\n+        this.apiTemplateFiles.put(\"api\" + File.separator + \"api.mustache\", \".ts\");\n+    }\n+\n+    public String getNpmName() {\n+        return npmName;\n+    }\n+\n+    public void setNpmName(String npmName) {\n+        this.npmName = npmName;\n+    }\n+\n+    public String getNpmRepository() {\n+        return npmRepository;\n+    }\n+\n+    public void setNpmRepository(String npmRepository) {\n+        this.npmRepository = npmRepository;\n+    }\n+\n+    public String getNpmVersion() {\n+        return npmVersion;\n+    }\n+\n+    public void setNpmVersion(String npmVersion) {\n+        this.npmVersion = npmVersion;\n+    }\n+    \n+    @Override\n+    public CodegenType getTag() {\n+        return CodegenType.CLIENT;\n+    }\n+    \n+    @Override\n+    public void preprocessOpenAPI(OpenAPI openAPI) {\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+\n+            // If no npmVersion is provided in additional properties, version from API specification is used.\n+            // If none of them is provided then fallbacks to default version\n+            if (additionalProperties.containsKey(NPM_VERSION)) {\n+                this.setNpmVersion(additionalProperties.get(NPM_VERSION).toString());\n+            } else if (openAPI.getInfo() != null && openAPI.getInfo().getVersion() != null) {\n+                this.setNpmVersion(openAPI.getInfo().getVersion());\n+            }\n+\n+            if (additionalProperties.containsKey(SNAPSHOT) && Boolean.parseBoolean(additionalProperties.get(SNAPSHOT).toString())) {\n+                if (npmVersion.toUpperCase(Locale.ROOT).matches(\"^.*-SNAPSHOT$\")) {\n+                    this.setNpmVersion(npmVersion + \".\" + SNAPSHOT_SUFFIX_FORMAT.get().format(new Date()));\n+                } else {\n+                    this.setNpmVersion(npmVersion + \"-SNAPSHOT.\" + SNAPSHOT_SUFFIX_FORMAT.get().format(new Date()));\n+                }\n+            }\n+            additionalProperties.put(NPM_VERSION, npmVersion);\n+\n+        }\n+    }\n+    \n+    @Override\n+    public Map<String, Object> postProcessSupportingFileData(Map<String, Object> objs) {      \n+        final Object propFramework = additionalProperties.get(FRAMEWORK_SWITCH);\n+\n+        Map<String, Boolean> frameworks = new HashMap<>();\n+        for (String framework: FRAMEWORKS) {\n+            frameworks.put(framework, framework.equals(propFramework));\n+        }\n+        objs.put(\"framework\", propFramework);\n+        objs.put(\"frameworks\", frameworks);\n+\n+        objs.put(\"fileContentDataType\", additionalProperties.get(FILE_CONTENT_DATA_TYPE));\n+\n+        return objs;\n+    }\n+    \n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> operations, List<Object> models) {     \n+        \n+        // Add additional filename information for model imports in the apis\n+        List<Map<String, Object>> imports = (List<Map<String, Object>>) operations.get(\"imports\");\n+        for (Map<String, Object> im : imports) {\n+            im.put(\"filename\", ((String) im.get(\"import\")).replace(\".\", File.separator));\n+            im.put(\"classname\", getModelnameFromModelFilename(im.get(\"import\").toString()));\n+        }\n+        \n+        @SuppressWarnings(\"unchecked\")\n+        Map<String, Object> operationsMap = (Map<String, Object>) operations.get(\"operations\");\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operationsMap.get(\"operation\");\n+        for (CodegenOperation operation: operationList) {\n+            List<CodegenResponse> responses = operation.responses;\n+            operation.returnType = this.getReturnType(responses);          \n+        }\n+        return operations;\n+    }\n+    \n+    private String getReturnType(List<CodegenResponse> responses) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 314}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODk0MjQ0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/typescript/api/api.mustache", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTo0OToxMVrOGbtyPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjoxNToyMlrOGc_2GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxNDg3Nw==", "bodyText": "how about collecting all params in one single object, to avoid ordering issues and naming conflicts?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: Configuration): RequestContext {\n          \n          \n            \n                public {{nickname}}(params: { {{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}} }, {{/allParams}}options?: Configuration): RequestContext {", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431714877", "createdAt": "2020-05-28T09:49:11Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/resources/typescript/api/api.mustache", "diffHunk": "@@ -0,0 +1,212 @@\n+// TODO: better import syntax?\n+import { BaseAPIRequestFactory, RequiredError } from './baseapi';\n+import {Configuration} from '../configuration';\n+import { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\n+{{#platforms}}\n+{{#node}}\n+import * as FormData from \"form-data\";\n+{{/node}}\n+{{/platforms}}\n+import {ObjectSerializer} from '../models/ObjectSerializer';\n+import {ApiException} from './exception';\n+import {isCodeInRange} from '../util';\n+\n+{{#imports}}\n+import { {{classname}} } from '..{{filename}}';\n+{{/imports}}\n+{{#operations}}\n+\n+/**\n+ * {{#description}}{{{description}}}{{/description}}{{^description}}no description{{/description}}\n+ */\n+export class {{classname}}RequestFactory extends BaseAPIRequestFactory {\n+\t\n+\t{{#operation}}\n+    /**\n+     {{#notes}}\n+     * {{&notes}}\n+     {{/notes}}\n+     {{#summary}}\n+     * {{&summary}}\n+     {{/summary}}\n+     {{#allParams}}\n+     * @param {{paramName}} {{description}}\n+     {{/allParams}}\n+     */\n+    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: Configuration): RequestContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxOTc5OA==", "bodyText": "I get your point, but personally I would prefer the current structure.\nOrdering or naming problems where never a problem in my experience.\nAlso, calling with an object would make usage slightly more complicated, especially with few arguments.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r432419798", "createdAt": "2020-05-29T11:22:04Z", "author": {"login": "bodograumann"}, "path": "modules/openapi-generator/src/main/resources/typescript/api/api.mustache", "diffHunk": "@@ -0,0 +1,212 @@\n+// TODO: better import syntax?\n+import { BaseAPIRequestFactory, RequiredError } from './baseapi';\n+import {Configuration} from '../configuration';\n+import { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\n+{{#platforms}}\n+{{#node}}\n+import * as FormData from \"form-data\";\n+{{/node}}\n+{{/platforms}}\n+import {ObjectSerializer} from '../models/ObjectSerializer';\n+import {ApiException} from './exception';\n+import {isCodeInRange} from '../util';\n+\n+{{#imports}}\n+import { {{classname}} } from '..{{filename}}';\n+{{/imports}}\n+{{#operations}}\n+\n+/**\n+ * {{#description}}{{{description}}}{{/description}}{{^description}}no description{{/description}}\n+ */\n+export class {{classname}}RequestFactory extends BaseAPIRequestFactory {\n+\t\n+\t{{#operation}}\n+    /**\n+     {{#notes}}\n+     * {{&notes}}\n+     {{/notes}}\n+     {{#summary}}\n+     * {{&summary}}\n+     {{/summary}}\n+     {{#allParams}}\n+     * @param {{paramName}} {{description}}\n+     {{/allParams}}\n+     */\n+    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: Configuration): RequestContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxNDg3Nw=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzMTA2NQ==", "bodyText": "combining the params into one single object can be very helpful when e.g. the api is refactored or extended, so that the compiler will immediately spot naming mismatches, even if the types would match.\nI guess it would be best to provide an option for that, see e.g.\n#6288\n#4479", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r432431065", "createdAt": "2020-05-29T11:48:17Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/resources/typescript/api/api.mustache", "diffHunk": "@@ -0,0 +1,212 @@\n+// TODO: better import syntax?\n+import { BaseAPIRequestFactory, RequiredError } from './baseapi';\n+import {Configuration} from '../configuration';\n+import { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\n+{{#platforms}}\n+{{#node}}\n+import * as FormData from \"form-data\";\n+{{/node}}\n+{{/platforms}}\n+import {ObjectSerializer} from '../models/ObjectSerializer';\n+import {ApiException} from './exception';\n+import {isCodeInRange} from '../util';\n+\n+{{#imports}}\n+import { {{classname}} } from '..{{filename}}';\n+{{/imports}}\n+{{#operations}}\n+\n+/**\n+ * {{#description}}{{{description}}}{{/description}}{{^description}}no description{{/description}}\n+ */\n+export class {{classname}}RequestFactory extends BaseAPIRequestFactory {\n+\t\n+\t{{#operation}}\n+    /**\n+     {{#notes}}\n+     * {{&notes}}\n+     {{/notes}}\n+     {{#summary}}\n+     * {{&summary}}\n+     {{/summary}}\n+     {{#allParams}}\n+     * @param {{paramName}} {{description}}\n+     {{/allParams}}\n+     */\n+    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: Configuration): RequestContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxNDg3Nw=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNDQzNw==", "bodyText": "That sounds good.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r432434437", "createdAt": "2020-05-29T11:56:24Z", "author": {"login": "bodograumann"}, "path": "modules/openapi-generator/src/main/resources/typescript/api/api.mustache", "diffHunk": "@@ -0,0 +1,212 @@\n+// TODO: better import syntax?\n+import { BaseAPIRequestFactory, RequiredError } from './baseapi';\n+import {Configuration} from '../configuration';\n+import { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\n+{{#platforms}}\n+{{#node}}\n+import * as FormData from \"form-data\";\n+{{/node}}\n+{{/platforms}}\n+import {ObjectSerializer} from '../models/ObjectSerializer';\n+import {ApiException} from './exception';\n+import {isCodeInRange} from '../util';\n+\n+{{#imports}}\n+import { {{classname}} } from '..{{filename}}';\n+{{/imports}}\n+{{#operations}}\n+\n+/**\n+ * {{#description}}{{{description}}}{{/description}}{{^description}}no description{{/description}}\n+ */\n+export class {{classname}}RequestFactory extends BaseAPIRequestFactory {\n+\t\n+\t{{#operation}}\n+    /**\n+     {{#notes}}\n+     * {{&notes}}\n+     {{/notes}}\n+     {{#summary}}\n+     * {{&summary}}\n+     {{/summary}}\n+     {{#allParams}}\n+     * @param {{paramName}} {{description}}\n+     {{/allParams}}\n+     */\n+    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: Configuration): RequestContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxNDg3Nw=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyOTA0OQ==", "bodyText": "@bodograumann Are you already working on this? If not I'll give it a shot tomorrow.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r432729049", "createdAt": "2020-05-29T20:51:17Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/resources/typescript/api/api.mustache", "diffHunk": "@@ -0,0 +1,212 @@\n+// TODO: better import syntax?\n+import { BaseAPIRequestFactory, RequiredError } from './baseapi';\n+import {Configuration} from '../configuration';\n+import { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\n+{{#platforms}}\n+{{#node}}\n+import * as FormData from \"form-data\";\n+{{/node}}\n+{{/platforms}}\n+import {ObjectSerializer} from '../models/ObjectSerializer';\n+import {ApiException} from './exception';\n+import {isCodeInRange} from '../util';\n+\n+{{#imports}}\n+import { {{classname}} } from '..{{filename}}';\n+{{/imports}}\n+{{#operations}}\n+\n+/**\n+ * {{#description}}{{{description}}}{{/description}}{{^description}}no description{{/description}}\n+ */\n+export class {{classname}}RequestFactory extends BaseAPIRequestFactory {\n+\t\n+\t{{#operation}}\n+    /**\n+     {{#notes}}\n+     * {{&notes}}\n+     {{/notes}}\n+     {{#summary}}\n+     * {{&summary}}\n+     {{/summary}}\n+     {{#allParams}}\n+     * @param {{paramName}} {{description}}\n+     {{/allParams}}\n+     */\n+    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: Configuration): RequestContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxNDg3Nw=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1OTM1Mw==", "bodyText": "No, I'm not working on this. Please go ahead :-)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r433059353", "createdAt": "2020-06-01T06:15:22Z", "author": {"login": "bodograumann"}, "path": "modules/openapi-generator/src/main/resources/typescript/api/api.mustache", "diffHunk": "@@ -0,0 +1,212 @@\n+// TODO: better import syntax?\n+import { BaseAPIRequestFactory, RequiredError } from './baseapi';\n+import {Configuration} from '../configuration';\n+import { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\n+{{#platforms}}\n+{{#node}}\n+import * as FormData from \"form-data\";\n+{{/node}}\n+{{/platforms}}\n+import {ObjectSerializer} from '../models/ObjectSerializer';\n+import {ApiException} from './exception';\n+import {isCodeInRange} from '../util';\n+\n+{{#imports}}\n+import { {{classname}} } from '..{{filename}}';\n+{{/imports}}\n+{{#operations}}\n+\n+/**\n+ * {{#description}}{{{description}}}{{/description}}{{^description}}no description{{/description}}\n+ */\n+export class {{classname}}RequestFactory extends BaseAPIRequestFactory {\n+\t\n+\t{{#operation}}\n+    /**\n+     {{#notes}}\n+     * {{&notes}}\n+     {{/notes}}\n+     {{#summary}}\n+     * {{&summary}}\n+     {{/summary}}\n+     {{#allParams}}\n+     * @param {{paramName}} {{description}}\n+     {{/allParams}}\n+     */\n+    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: Configuration): RequestContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxNDg3Nw=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTc2Nzc1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/typescript/http/http.mustache", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo0OTo0NVrOGb2AKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjoxNzo1NlrOGc_4jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0OTUxMw==", "bodyText": "is this really necessary in the browser?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431849513", "createdAt": "2020-05-28T13:49:45Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/resources/typescript/http/http.mustache", "diffHunk": "@@ -0,0 +1,246 @@\n+{{#platforms}}\n+{{#node}}\n+// TODO: evaluate if we can easily get rid of this library\n+import * as FormData from \"form-data\";\n+{{/node}}\n+{{/platforms}}\n+// typings of url-parse are incorrect...\n+// @ts-ignore \n+import * as URLParse from \"url-parse\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMzU1MA==", "bodyText": "In most browsers we probably could use URL.searchParams, except for IE.\nThis way we can use the same for all environments.\nNot sure if there is a URL.searchParams polyfill for both IE and node.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r432423550", "createdAt": "2020-05-29T11:30:51Z", "author": {"login": "bodograumann"}, "path": "modules/openapi-generator/src/main/resources/typescript/http/http.mustache", "diffHunk": "@@ -0,0 +1,246 @@\n+{{#platforms}}\n+{{#node}}\n+// TODO: evaluate if we can easily get rid of this library\n+import * as FormData from \"form-data\";\n+{{/node}}\n+{{/platforms}}\n+// typings of url-parse are incorrect...\n+// @ts-ignore \n+import * as URLParse from \"url-parse\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0OTUxMw=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMzY0NA==", "bodyText": "There's https://www.npmjs.com/package/url-search-params-polyfill which works for both IE and node, has no dependencies, and actually checks if URL.searchParams is available before using its own code.\nAlternatively, we could also just expect people to provide their own polyfill for IE, i.e. we only use URLParse in node and assume that URLParse is available in the browser\nWhich option would you prefer?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r432733644", "createdAt": "2020-05-29T21:02:19Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/resources/typescript/http/http.mustache", "diffHunk": "@@ -0,0 +1,246 @@\n+{{#platforms}}\n+{{#node}}\n+// TODO: evaluate if we can easily get rid of this library\n+import * as FormData from \"form-data\";\n+{{/node}}\n+{{/platforms}}\n+// typings of url-parse are incorrect...\n+// @ts-ignore \n+import * as URLParse from \"url-parse\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0OTUxMw=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwMjk4MA==", "bodyText": "Edit: It would be a giant pain to re-implement this without a polyfill - Given that url-parse has exactly 2 dependencies (including recursive dependencies), I'd propose to just use url-parse.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r433002980", "createdAt": "2020-06-01T00:47:55Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/resources/typescript/http/http.mustache", "diffHunk": "@@ -0,0 +1,246 @@\n+{{#platforms}}\n+{{#node}}\n+// TODO: evaluate if we can easily get rid of this library\n+import * as FormData from \"form-data\";\n+{{/node}}\n+{{/platforms}}\n+// typings of url-parse are incorrect...\n+// @ts-ignore \n+import * as URLParse from \"url-parse\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0OTUxMw=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1OTk4MA==", "bodyText": "I think it is fine for now, we can always improve this later, by using url-serach-params-polyfill instead and maybe add a configuration option to enable polyfills or not.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r433059980", "createdAt": "2020-06-01T06:17:56Z", "author": {"login": "bodograumann"}, "path": "modules/openapi-generator/src/main/resources/typescript/http/http.mustache", "diffHunk": "@@ -0,0 +1,246 @@\n+{{#platforms}}\n+{{#node}}\n+// TODO: evaluate if we can easily get rid of this library\n+import * as FormData from \"form-data\";\n+{{/node}}\n+{{/platforms}}\n+// typings of url-parse are incorrect...\n+// @ts-ignore \n+import * as URLParse from \"url-parse\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0OTUxMw=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTc3MTcxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/typescript/auth/auth.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1MDozN1rOGb2CsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMTowMzoyNlrOGcr_Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1MDE2MQ==", "bodyText": "is this necessary in the browser?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r431850161", "createdAt": "2020-05-28T13:50:37Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/resources/typescript/auth/auth.mustache", "diffHunk": "@@ -0,0 +1,152 @@\n+import {RequestContext} from '../http/http';\n+// typings for btoa are incorrect\n+//@ts-ignore\n+import * as btoa from \"btoa\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyNDQwOA==", "bodyText": "The polyfill would be needed in IE \u22649 and Opera \u2264 10.1.\nI would be fine with only including it in node context.\nWhat do you think, @TiFu ?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r432424408", "createdAt": "2020-05-29T11:32:49Z", "author": {"login": "bodograumann"}, "path": "modules/openapi-generator/src/main/resources/typescript/auth/auth.mustache", "diffHunk": "@@ -0,0 +1,152 @@\n+import {RequestContext} from '../http/http';\n+// typings for btoa are incorrect\n+//@ts-ignore\n+import * as btoa from \"btoa\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1MDE2MQ=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczNDA0Ng==", "bodyText": "Agreed - I'll exclude it", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6341#discussion_r432734046", "createdAt": "2020-05-29T21:03:26Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/resources/typescript/auth/auth.mustache", "diffHunk": "@@ -0,0 +1,152 @@\n+import {RequestContext} from '../http/http';\n+// typings for btoa are incorrect\n+//@ts-ignore\n+import * as btoa from \"btoa\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1MDE2MQ=="}, "originalCommit": {"oid": "33c8d19564e4d45d13ef3a7c5af534f793caab6b"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3441, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}