{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzkwNTQ2", "number": 6523, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo0MzoyNFrOEB9vFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo0NzoyN1rOEB9xfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDk1NTA4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo0MzoyNFrOGeId9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDoyODowMlrOGeVyYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0OTIwNg==", "bodyText": "@wing328 , this code avoids having the generated class extends from HashMap<String, T>. Instead, a additionalProperties field is added.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6523#discussion_r434249206", "createdAt": "2020-06-03T00:43:24Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java", "diffHunk": "@@ -1646,10 +1646,24 @@ public void setAdditionalModelTypeAnnotations(final List<String> additionalModel\n \n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n-        super.addAdditionPropertiesToCodeGenModel(codegenModel, schema);\n+        if (!supportsAdditionalPropertiesWithComposedSchema) {\n+            // The additional (undeclared) propertiees are modeled in Java as a HashMap.\n+            // \n+            // 1. supportsAdditionalPropertiesWithComposedSchema is set to false:\n+            //    The generated model class extends from the HashMap. That does not work\n+            //    with composed schemas that also use a discriminator because the model class\n+            //    is supposed to extend from the generated parent model class.\n+            // 2. supportsAdditionalPropertiesWithComposedSchema is set to true:\n+            //    The HashMap is a field.\n+            super.addAdditionPropertiesToCodeGenModel(codegenModel, schema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71b8497587c784b2f09f745461e373983252233f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2NzQyNQ==", "bodyText": "@sebastien-rosset I may have a better way for this. Let's have a chat via Slack today.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6523#discussion_r434467425", "createdAt": "2020-06-03T10:28:02Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java", "diffHunk": "@@ -1646,10 +1646,24 @@ public void setAdditionalModelTypeAnnotations(final List<String> additionalModel\n \n     @Override\n     protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n-        super.addAdditionPropertiesToCodeGenModel(codegenModel, schema);\n+        if (!supportsAdditionalPropertiesWithComposedSchema) {\n+            // The additional (undeclared) propertiees are modeled in Java as a HashMap.\n+            // \n+            // 1. supportsAdditionalPropertiesWithComposedSchema is set to false:\n+            //    The generated model class extends from the HashMap. That does not work\n+            //    with composed schemas that also use a discriminator because the model class\n+            //    is supposed to extend from the generated parent model class.\n+            // 2. supportsAdditionalPropertiesWithComposedSchema is set to true:\n+            //    The HashMap is a field.\n+            super.addAdditionPropertiesToCodeGenModel(codegenModel, schema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0OTIwNg=="}, "originalCommit": {"oid": "71b8497587c784b2f09f745461e373983252233f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDk1NzAyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/additional_properties.mustache", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo0NDo1M1rOGeIfNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo0NDo1M1rOGeIfNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0OTUyNQ==", "bodyText": "@wing328 , this is the code that has the additionalProperties field", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6523#discussion_r434249525", "createdAt": "2020-06-03T00:44:53Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/additional_properties.mustache", "diffHunk": "@@ -0,0 +1,31 @@\n+{{#additionalPropertiesType}}\n+  /**\n+   * A container for additional, undeclared properties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71b8497587c784b2f09f745461e373983252233f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDk2MTI0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/anyof_model.mustache", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo0NzoyN1rOGeIhvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo0Mzo0NVrOGfD6_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MDE3Mw==", "bodyText": "@wing328 , here we need to deserialize into the class, but we need to ignore the unknown properties and put them into the additionalProperties map.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6523#discussion_r434250173", "createdAt": "2020-06-03T00:47:27Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/anyof_model.mustache", "diffHunk": "@@ -33,9 +37,23 @@ public class {{classname}} extends AbstractOpenApiSchema{{#vendorExtensions.x-im\n             JsonNode tree = jp.readValueAsTree();\n \n             Object deserialized = null;\n+            {{#discriminator}}\n+            Class cls = JSON.getClassForElement(tree, {{classname}}.class);\n+            if (cls != null) {\n+                // When the OAS schema includes a discriminator, use the discriminator value to\n+                // discriminate the anyOf schemas.\n+                // Get the discriminator mapping value to get the class.\n+                // TODO: custom deserialization when additionalProperties is set.\n+                deserialized = tree.traverse(jp.getCodec()).readValueAs(cls);\n+                {{classname}} ret = new {{classname}}();\n+                ret.setActualInstance(deserialized);\n+                return ret;\n+            }\n+            {{/discriminator}}\n             {{#anyOf}}\n             // deserialzie {{{.}}}\n             try {\n+                // TODO: custom deserialization when additionalProperties is set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b6291cb605f72d7acb417b62761db797caeb67f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIyMzI5NA==", "bodyText": "\ud83d\udc4c Let me try to come up with a way to handle this use case.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6523#discussion_r435223294", "createdAt": "2020-06-04T12:43:45Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/anyof_model.mustache", "diffHunk": "@@ -33,9 +37,23 @@ public class {{classname}} extends AbstractOpenApiSchema{{#vendorExtensions.x-im\n             JsonNode tree = jp.readValueAsTree();\n \n             Object deserialized = null;\n+            {{#discriminator}}\n+            Class cls = JSON.getClassForElement(tree, {{classname}}.class);\n+            if (cls != null) {\n+                // When the OAS schema includes a discriminator, use the discriminator value to\n+                // discriminate the anyOf schemas.\n+                // Get the discriminator mapping value to get the class.\n+                // TODO: custom deserialization when additionalProperties is set.\n+                deserialized = tree.traverse(jp.getCodec()).readValueAs(cls);\n+                {{classname}} ret = new {{classname}}();\n+                ret.setActualInstance(deserialized);\n+                return ret;\n+            }\n+            {{/discriminator}}\n             {{#anyOf}}\n             // deserialzie {{{.}}}\n             try {\n+                // TODO: custom deserialization when additionalProperties is set.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MDE3Mw=="}, "originalCommit": {"oid": "0b6291cb605f72d7acb417b62761db797caeb67f"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3405, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}