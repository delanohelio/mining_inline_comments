{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzA4MTc3", "number": 5518, "title": "[typescript-nestjs] Add Nestjs Generator", "bodyText": "fixes #3336 adding nestjs generator\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.\n\n@TiFu (2017/07) @taxpon (2017/07) @sebastianhaas (2017/07) @kenisteward (2017/07) @Vrolijkx (2017/09) @macjohnny (2018/01) @nicokoenig (2018/09) @topce (2018/10) @akehir (2019/07) @petejohansonxo (2019/11) @amakhrov (2020/02)", "createdAt": "2020-03-04T02:46:15Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518", "merged": true, "mergeCommit": {"oid": "489f58a0e956c210da1053779963043ce972c4db"}, "closed": true, "closedAt": "2021-01-24T03:20:08Z", "author": {"login": "vfrank66"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbbfNHYAH2gAyMzgzMzA4MTc3OjE0Yjc2ZmQ3ZGJkY2NkMTg4OTkwNTM5OWE4MDZhYTAyYmI5YTJhNWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLQhifgFqTQ5MzEyNDI0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "14b76fd7dbdccd1889905399a806aa02bb9a2a5c", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/14b76fd7dbdccd1889905399a806aa02bb9a2a5c", "committedDate": "2019-10-10T22:32:16Z", "message": "#3336 add nestjs generator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aba9d52d25e4de42d81b77c93d07445f290fd85", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/2aba9d52d25e4de42d81b77c93d07445f290fd85", "committedDate": "2019-10-10T23:13:33Z", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7b351ed48d55f1ebf100210c366fed6682fee97", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a7b351ed48d55f1ebf100210c366fed6682fee97", "committedDate": "2020-02-04T15:44:08Z", "message": "#3336 add nestjs generator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdff3579e2d7610c025247b8d803451374bb1965", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/bdff3579e2d7610c025247b8d803451374bb1965", "committedDate": "2020-02-04T15:45:07Z", "message": "Merge branch 'master' of https://github.com/vfrank66/openapi-generator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ff567d9cce447c7cdd08b758c94a9d9c5cdf59d", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/6ff567d9cce447c7cdd08b758c94a9d9c5cdf59d", "committedDate": "2020-03-04T02:20:12Z", "message": "#3336 add nestjs generator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f5ac3bcb789d2ff94e3451b3b133cae8c0829ef", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/7f5ac3bcb789d2ff94e3451b3b133cae8c0829ef", "committedDate": "2020-03-04T02:21:53Z", "message": "#3336 add nestjs generator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "622fba812c5f90090bbad6cfa6ec6daba385c95d", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/622fba812c5f90090bbad6cfa6ec6daba385c95d", "committedDate": "2020-03-04T02:22:37Z", "message": "Merge branch 'master' of https://github.com/vfrank66/openapi-generator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f80f961ef0cd0e50b9d2bb856a3703d5b821640", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/7f80f961ef0cd0e50b9d2bb856a3703d5b821640", "committedDate": "2020-03-04T02:38:46Z", "message": "remove extra files from building"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e5310c45faf5c5fbedf8342ba0872cd35251062", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/3e5310c45faf5c5fbedf8342ba0872cd35251062", "committedDate": "2020-03-04T02:41:01Z", "message": "Revert \"remove extra files from building\"\n\nThis reverts commit 7f80f961ef0cd0e50b9d2bb856a3703d5b821640."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54425caa354bcafd973ad7d1161c8a80d22119ab", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/54425caa354bcafd973ad7d1161c8a80d22119ab", "committedDate": "2020-03-04T02:42:58Z", "message": "fix merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4059af4172d247f89e6218cf48af5cef4294359c", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/4059af4172d247f89e6218cf48af5cef4294359c", "committedDate": "2020-03-04T03:08:56Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2", "committedDate": "2020-03-04T03:20:40Z", "message": "Add missing test client options provider for nestjs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTQwNDE2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#pullrequestreview-368540416", "createdAt": "2020-03-04T06:57:12Z", "commit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjo1NzoxMlrOFxhzhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzowODoxN1rOFxiAQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3ODQwNA==", "bodyText": "is this import necessary? shouldn't the consumer import this on a global level?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387478404", "createdAt": "2020-03-04T06:57:12Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/api.module.mustache", "diffHunk": "@@ -0,0 +1,40 @@\n+import { DynamicModule, HttpService, HttpModule, Module, Global } from '@nestjs/common';\n+import { Configuration } from './configuration';\n+import { BASE_PATH } from './variables';\n+\n+{{#apiInfo}}\n+{{#apis}}\n+import { {{classname}} } from './{{importPath}}';\n+{{/apis}}\n+{{/apiInfo}}\n+\n+@Global\n+@Module({\n+  imports:      [ HttpModule ],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3ODk2Mg==", "bodyText": "I guess this file should be named .gitignore instead of gitignore", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387478962", "createdAt": "2020-03-04T06:59:00Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/gitignore", "diffHunk": "@@ -0,0 +1,4 @@\n+wwwroot/*.js", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3OTU1Nw==", "bodyText": "is the indentation correct?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387479557", "createdAt": "2020-03-04T07:00:57Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/modelGenericEnums.mustache", "diffHunk": "@@ -0,0 +1,30 @@\n+{{#hasEnums}}\n+\n+{{^stringEnums}}\n+export namespace {{classname}} {\n+{{/stringEnums}}\n+{{#vars}}\n+    {{#isEnum}}\n+{{#stringEnums}}\n+export enum {{classname}}{{enumName}} {\n+{{#allowableValues}}\n+{{#enumVars}}\n+    {{name}} = {{{value}}}{{^-last}},{{/-last}}\n+{{/enumVars}}\n+{{/allowableValues}}\n+};\n+{{/stringEnums}}\n+{{^stringEnums}}\n+    export type {{enumName}} = {{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}} | {{/-last}}{{/enumVars}}{{/allowableValues}};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3OTk1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"author\": \"Swagger Codegen Contributors\",\n          \n          \n            \n              \"author\": \"OpenAPI Generator Contributors\",", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387479955", "createdAt": "2020-03-04T07:02:07Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/package.mustache", "diffHunk": "@@ -0,0 +1,71 @@\n+{\n+  \"name\": \"{{{npmName}}}\",\n+  \"version\": \"{{{npmVersion}}}\",\n+  \"description\": \"swagger client for {{{npmName}}}\",\n+  \"author\": \"Swagger Codegen Contributors\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3OTk5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"description\": \"swagger client for {{{npmName}}}\",\n          \n          \n            \n              \"description\": \"REST client for {{{npmName}}}\",", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387479991", "createdAt": "2020-03-04T07:02:16Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/package.mustache", "diffHunk": "@@ -0,0 +1,71 @@\n+{\n+  \"name\": \"{{{npmName}}}\",\n+  \"version\": \"{{{npmVersion}}}\",\n+  \"description\": \"swagger client for {{{npmName}}}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDI0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"build:clean\": \"rm -rf dist/ 2> /dev/null && tsc -p tsconfig.build.json\",\n          \n          \n            \n                \"build:clean\": \"rimraf dist/ 2> /dev/null && tsc -p tsconfig.build.json\",", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387480243", "createdAt": "2020-03-04T07:03:06Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/package.mustache", "diffHunk": "@@ -0,0 +1,71 @@\n+{\n+  \"name\": \"{{{npmName}}}\",\n+  \"version\": \"{{{npmVersion}}}\",\n+  \"description\": \"swagger client for {{{npmName}}}\",\n+  \"author\": \"Swagger Codegen Contributors\",\n+  \"keywords\": [\n+    \"swagger-client\"\n+  ],\n+  \"license\": \"Unlicense\",\n+  \"scripts\": {\n+    \"build\": \"tsc -p tsconfig.build.json\",\n+    \"build:clean\": \"rm -rf dist/ 2> /dev/null && tsc -p tsconfig.build.json\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDc2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387480768", "createdAt": "2020-03-04T07:05:06Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/options/TypeScriptNestjsClientOptionsProvider.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDgzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387480832", "createdAt": "2020-03-04T07:05:22Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/typescriptnestjs/TypeScriptNestjsClientOptionsTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDg3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387480877", "createdAt": "2020-03-04T07:05:32Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/typescriptnestjs/TypeScriptNestjsModelTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDkxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387480915", "createdAt": "2020-03-04T07:05:39Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/typescriptnestjs/TypescriptNestjsAdditionalPropertiesIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MDk2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387480969", "createdAt": "2020-03-04T07:05:49Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/typescriptnestjs/TypescriptNestjsArrayAndObjectIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MTAyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387481024", "createdAt": "2020-03-04T07:06:01Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/typescriptnestjs/TypescriptNestjsPestoreIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MTA3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2018 SmartBear Software", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387481076", "createdAt": "2020-03-04T07:06:12Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MTQ2NQ==", "bodyText": "I guess the groovy files are unrelated to this PR?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387481465", "createdAt": "2020-03-04T07:07:38Z", "author": {"login": "macjohnny"}, "path": "samples/client/petstore/groovy/bin/main/org/openapitools/api/ApiUtils.groovy", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.openapitools.api\n+\n+import static groovyx.net.http.HttpBuilder.configure\n+import static java.net.URI.create\n+\n+class ApiUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MTY2Ng==", "bodyText": "I guess the kotlin files are unrelated to this PR", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387481666", "createdAt": "2020-03-04T07:08:17Z", "author": {"login": "macjohnny"}, "path": "samples/client/petstore/kotlin-nonpublic/bin/main/org/openapitools/client/apis/StoreApi.kt", "diffHunk": "@@ -0,0 +1,192 @@\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTQ1NDc1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#pullrequestreview-368545475", "createdAt": "2020-03-04T07:10:42Z", "commit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoxMDo0MlrOFxiDTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzoxMDo0MlrOFxiDTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ4MjQ0NQ==", "bodyText": "please also add an entry to\n\n  \n    \n      openapi-generator/bin/utils/ensure-up-to-date\n    \n    \n         Line 61\n      in\n      3e5fb67\n    \n    \n    \n    \n\n        \n          \n           \"${root}/bin/typescript-rxjs-petstore-all.sh\"", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387482445", "createdAt": "2020-03-04T07:10:42Z", "author": {"login": "macjohnny"}, "path": "bin/nestjs-client-petstore.sh", "diffHunk": "@@ -0,0 +1,31 @@\n+#!/bin/sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTY3MDQ0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#pullrequestreview-368567044", "createdAt": "2020-03-04T08:01:34Z", "commit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODowMTozNFrOFxjJSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODoxNToyNVrOFxjeyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwMDM2MA==", "bodyText": "could you please clarify how this option is used in the generated code?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387500360", "createdAt": "2020-03-04T08:01:34Z", "author": {"login": "amakhrov"}, "path": "docs/generators/typescript-nestjs.md", "diffHunk": "@@ -0,0 +1,29 @@\n+\n+---\n+id: generator-opts-client-typescript-nestjs\n+title: Config Options for typescript-nestjs\n+sidebar_label: typescript-nestjs\n+---\n+\n+| Option | Description | Values | Default |\n+| ------ | ----------- | ------ | ------- |\n+|sortParamsByRequiredFlag|Sort method arguments to place required parameters before optional parameters.| |true|\n+|ensureUniqueParams|Whether to ensure parameter names are unique in an operation (rename parameters that are not).| |true|\n+|allowUnicodeIdentifiers|boolean, toggles whether unicode identifiers are allowed in names or not, default is false| |false|\n+|prependFormOrBodyParameters|Add form or body parameters to the beginning of the parameter list.| |false|\n+|modelPropertyNaming|Naming convention for the property: 'camelCase', 'PascalCase', 'snake_case' and 'original', which keeps the original name| |camelCase|\n+|supportsES6|Generate code that conforms to ES6.| |false|\n+|npmName|The name under which you want to publish generated npm package. Required to generate a full package| |null|\n+|npmVersion|The version of your npm package. If not provided, using the version from the OpenAPI specification file.| |1.0.0|\n+|snapshot|When setting this property to true, the version will be suffixed with -SNAPSHOT.yyyyMMddHHmm| |false|\n+|npmRepository|Use this property to set an url your private npmRepo in the package.json| |null|\n+|withInterfaces|Setting this property to true will generate interfaces next to the default class implementations.| |false|\n+|taggedUnions|Use discriminators to create tagged unions instead of extending interfaces.| |false|\n+|providedInRoot|Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).| |false|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwMjk5NA==", "bodyText": "Most of these cli options duplicate the ones defined in the parent class. Is there a particular reason to duplicate it here also?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387502994", "createdAt": "2020-03-04T08:08:23Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNDQyNA==", "bodyText": "Looks like this logic was copied from the Angular generator. Does it apply to Nest framework with exactly same version numbers?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387504424", "createdAt": "2020-03-04T08:11:53Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));\n+        addImport(codegenModel, codegenModel.additionalPropertiesType);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"typescript-nestjs\";\n+    }\n+\n+    @Override\n+    public String getHelp() {\n+        return \"Generates a TypeScript Nestjs 6.x client library.\";\n+    }\n+\n+    @Override\n+    public void processOpts() {\n+        super.processOpts();\n+        supportingFiles.add(\n+                new SupportingFile(\"models.mustache\", modelPackage().replace('.', File.separatorChar), \"models.ts\"));\n+        supportingFiles\n+                .add(new SupportingFile(\"apis.mustache\", apiPackage().replace('.', File.separatorChar), \"api.ts\"));\n+        supportingFiles.add(new SupportingFile(\"index.mustache\", getIndexDirectory(), \"index.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api.module.mustache\", getIndexDirectory(), \"api.module.ts\"));\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", getIndexDirectory(), \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"variables.mustache\", getIndexDirectory(), \"variables.ts\"));\n+        supportingFiles.add(new SupportingFile(\"encoder.mustache\", getIndexDirectory(), \"encoder.ts\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", getIndexDirectory(), \"README.md\"));\n+\n+        // determine NG version\n+        SemVer nestVersion;\n+        if (additionalProperties.containsKey(NEST_VERSION)) {\n+            nestVersion = new SemVer(additionalProperties.get(NEST_VERSION).toString());\n+        } else {\n+            nestVersion = new SemVer(this.nestVersion);\n+            LOGGER.info(\"generating code for Nestjs {} ...\", nestVersion);\n+            LOGGER.info(\"  (you can select the nestjs version by setting the additionalProperty nestVersion)\");\n+        }\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+            addNpmPackageGeneration(nestVersion);\n+        }\n+\n+        if (additionalProperties.containsKey(STRING_ENUMS)) {\n+            setStringEnums(Boolean.valueOf(additionalProperties.get(STRING_ENUMS).toString()));\n+            additionalProperties.put(\"stringEnums\", getStringEnums());\n+            if (getStringEnums()) {\n+                enumSuffix = \"\";\n+                classEnumSeparator = \"\";\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(WITH_INTERFACES)) {\n+            boolean withInterfaces = Boolean.parseBoolean(additionalProperties.get(WITH_INTERFACES).toString());\n+            if (withInterfaces) {\n+                apiTemplateFiles.put(\"apiInterface.mustache\", \"Interface.ts\");\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(TAGGED_UNIONS)) {\n+            taggedUnions = Boolean.parseBoolean(additionalProperties.get(TAGGED_UNIONS).toString());\n+        }\n+\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            if (!additionalProperties.containsKey(PROVIDED_IN_ROOT)) {\n+                additionalProperties.put(PROVIDED_IN_ROOT, true);\n+            } else {\n+                additionalProperties.put(PROVIDED_IN_ROOT, Boolean.parseBoolean(\n+                    additionalProperties.get(PROVIDED_IN_ROOT).toString()\n+                ));\n+            }\n+        } else {\n+            additionalProperties.put(PROVIDED_IN_ROOT, false);\n+        }\n+\n+        additionalProperties.put(NEST_VERSION, nestVersion);\n+        additionalProperties.put(\"injectionToken\", nestVersion.atLeast(\"4.0.0\") ? \"InjectionToken\" : \"OpaqueToken\");\n+        additionalProperties.put(\"injectionTokenTyped\", nestVersion.atLeast(\"4.0.0\"));\n+        additionalProperties.put(\"useHttpClient\", nestVersion.atLeast(\"4.3.0\"));\n+        additionalProperties.put(\"useRxJS6\", nestVersion.atLeast(\"6.0.0\"));        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNTMzMQ==", "bodyText": "Is there a good reason to support old framework versions? Do you plan to use this generate in projects with old Nestjs?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387505331", "createdAt": "2020-03-04T08:14:08Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));\n+        addImport(codegenModel, codegenModel.additionalPropertiesType);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"typescript-nestjs\";\n+    }\n+\n+    @Override\n+    public String getHelp() {\n+        return \"Generates a TypeScript Nestjs 6.x client library.\";\n+    }\n+\n+    @Override\n+    public void processOpts() {\n+        super.processOpts();\n+        supportingFiles.add(\n+                new SupportingFile(\"models.mustache\", modelPackage().replace('.', File.separatorChar), \"models.ts\"));\n+        supportingFiles\n+                .add(new SupportingFile(\"apis.mustache\", apiPackage().replace('.', File.separatorChar), \"api.ts\"));\n+        supportingFiles.add(new SupportingFile(\"index.mustache\", getIndexDirectory(), \"index.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api.module.mustache\", getIndexDirectory(), \"api.module.ts\"));\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", getIndexDirectory(), \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"variables.mustache\", getIndexDirectory(), \"variables.ts\"));\n+        supportingFiles.add(new SupportingFile(\"encoder.mustache\", getIndexDirectory(), \"encoder.ts\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", getIndexDirectory(), \"README.md\"));\n+\n+        // determine NG version\n+        SemVer nestVersion;\n+        if (additionalProperties.containsKey(NEST_VERSION)) {\n+            nestVersion = new SemVer(additionalProperties.get(NEST_VERSION).toString());\n+        } else {\n+            nestVersion = new SemVer(this.nestVersion);\n+            LOGGER.info(\"generating code for Nestjs {} ...\", nestVersion);\n+            LOGGER.info(\"  (you can select the nestjs version by setting the additionalProperty nestVersion)\");\n+        }\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+            addNpmPackageGeneration(nestVersion);\n+        }\n+\n+        if (additionalProperties.containsKey(STRING_ENUMS)) {\n+            setStringEnums(Boolean.valueOf(additionalProperties.get(STRING_ENUMS).toString()));\n+            additionalProperties.put(\"stringEnums\", getStringEnums());\n+            if (getStringEnums()) {\n+                enumSuffix = \"\";\n+                classEnumSeparator = \"\";\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(WITH_INTERFACES)) {\n+            boolean withInterfaces = Boolean.parseBoolean(additionalProperties.get(WITH_INTERFACES).toString());\n+            if (withInterfaces) {\n+                apiTemplateFiles.put(\"apiInterface.mustache\", \"Interface.ts\");\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(TAGGED_UNIONS)) {\n+            taggedUnions = Boolean.parseBoolean(additionalProperties.get(TAGGED_UNIONS).toString());\n+        }\n+\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            if (!additionalProperties.containsKey(PROVIDED_IN_ROOT)) {\n+                additionalProperties.put(PROVIDED_IN_ROOT, true);\n+            } else {\n+                additionalProperties.put(PROVIDED_IN_ROOT, Boolean.parseBoolean(\n+                    additionalProperties.get(PROVIDED_IN_ROOT).toString()\n+                ));\n+            }\n+        } else {\n+            additionalProperties.put(PROVIDED_IN_ROOT, false);\n+        }\n+\n+        additionalProperties.put(NEST_VERSION, nestVersion);\n+        additionalProperties.put(\"injectionToken\", nestVersion.atLeast(\"4.0.0\") ? \"InjectionToken\" : \"OpaqueToken\");\n+        additionalProperties.put(\"injectionTokenTyped\", nestVersion.atLeast(\"4.0.0\"));\n+        additionalProperties.put(\"useHttpClient\", nestVersion.atLeast(\"4.3.0\"));\n+        additionalProperties.put(\"useRxJS6\", nestVersion.atLeast(\"6.0.0\"));        \n+        if (additionalProperties.containsKey(SERVICE_SUFFIX)) {\n+            serviceSuffix = additionalProperties.get(SERVICE_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Service\", serviceSuffix);\n+        }\n+        if (additionalProperties.containsKey(SERVICE_FILE_SUFFIX)) {\n+            serviceFileSuffix = additionalProperties.get(SERVICE_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Service\", serviceFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_SUFFIX)) {\n+            modelSuffix = additionalProperties.get(MODEL_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Model\", modelSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_FILE_SUFFIX)) {\n+            modelFileSuffix = additionalProperties.get(MODEL_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Model\", modelFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(FILE_NAMING)) {\n+            this.setFileNaming(additionalProperties.get(FILE_NAMING).toString());\n+        }\n+    }\n+\n+    private void addNpmPackageGeneration(SemVer nestVersion) {\n+\n+        if (additionalProperties.containsKey(NPM_REPOSITORY)) {\n+            this.setNpmRepository(additionalProperties.get(NPM_REPOSITORY).toString());\n+        }\n+\n+        // Set the typescript version compatible to the Nestjs version\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            additionalProperties.put(\"tsVersion\", \">=3.4.0 <3.6.0\");\n+        } else {\n+            // Nestjs v2-v4 requires typescript \">=2.1.5 <2.8\"\n+            additionalProperties.put(\"tsVersion\", \">=2.1.5 <2.8.0\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwNTg2NQ==", "bodyText": "broken link - seems to be copied from angular.\nis this logic applicable to nestjs anyway?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387505865", "createdAt": "2020-03-04T08:15:25Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));\n+        addImport(codegenModel, codegenModel.additionalPropertiesType);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"typescript-nestjs\";\n+    }\n+\n+    @Override\n+    public String getHelp() {\n+        return \"Generates a TypeScript Nestjs 6.x client library.\";\n+    }\n+\n+    @Override\n+    public void processOpts() {\n+        super.processOpts();\n+        supportingFiles.add(\n+                new SupportingFile(\"models.mustache\", modelPackage().replace('.', File.separatorChar), \"models.ts\"));\n+        supportingFiles\n+                .add(new SupportingFile(\"apis.mustache\", apiPackage().replace('.', File.separatorChar), \"api.ts\"));\n+        supportingFiles.add(new SupportingFile(\"index.mustache\", getIndexDirectory(), \"index.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api.module.mustache\", getIndexDirectory(), \"api.module.ts\"));\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", getIndexDirectory(), \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"variables.mustache\", getIndexDirectory(), \"variables.ts\"));\n+        supportingFiles.add(new SupportingFile(\"encoder.mustache\", getIndexDirectory(), \"encoder.ts\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", getIndexDirectory(), \"README.md\"));\n+\n+        // determine NG version\n+        SemVer nestVersion;\n+        if (additionalProperties.containsKey(NEST_VERSION)) {\n+            nestVersion = new SemVer(additionalProperties.get(NEST_VERSION).toString());\n+        } else {\n+            nestVersion = new SemVer(this.nestVersion);\n+            LOGGER.info(\"generating code for Nestjs {} ...\", nestVersion);\n+            LOGGER.info(\"  (you can select the nestjs version by setting the additionalProperty nestVersion)\");\n+        }\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+            addNpmPackageGeneration(nestVersion);\n+        }\n+\n+        if (additionalProperties.containsKey(STRING_ENUMS)) {\n+            setStringEnums(Boolean.valueOf(additionalProperties.get(STRING_ENUMS).toString()));\n+            additionalProperties.put(\"stringEnums\", getStringEnums());\n+            if (getStringEnums()) {\n+                enumSuffix = \"\";\n+                classEnumSeparator = \"\";\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(WITH_INTERFACES)) {\n+            boolean withInterfaces = Boolean.parseBoolean(additionalProperties.get(WITH_INTERFACES).toString());\n+            if (withInterfaces) {\n+                apiTemplateFiles.put(\"apiInterface.mustache\", \"Interface.ts\");\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(TAGGED_UNIONS)) {\n+            taggedUnions = Boolean.parseBoolean(additionalProperties.get(TAGGED_UNIONS).toString());\n+        }\n+\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            if (!additionalProperties.containsKey(PROVIDED_IN_ROOT)) {\n+                additionalProperties.put(PROVIDED_IN_ROOT, true);\n+            } else {\n+                additionalProperties.put(PROVIDED_IN_ROOT, Boolean.parseBoolean(\n+                    additionalProperties.get(PROVIDED_IN_ROOT).toString()\n+                ));\n+            }\n+        } else {\n+            additionalProperties.put(PROVIDED_IN_ROOT, false);\n+        }\n+\n+        additionalProperties.put(NEST_VERSION, nestVersion);\n+        additionalProperties.put(\"injectionToken\", nestVersion.atLeast(\"4.0.0\") ? \"InjectionToken\" : \"OpaqueToken\");\n+        additionalProperties.put(\"injectionTokenTyped\", nestVersion.atLeast(\"4.0.0\"));\n+        additionalProperties.put(\"useHttpClient\", nestVersion.atLeast(\"4.3.0\"));\n+        additionalProperties.put(\"useRxJS6\", nestVersion.atLeast(\"6.0.0\"));        \n+        if (additionalProperties.containsKey(SERVICE_SUFFIX)) {\n+            serviceSuffix = additionalProperties.get(SERVICE_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Service\", serviceSuffix);\n+        }\n+        if (additionalProperties.containsKey(SERVICE_FILE_SUFFIX)) {\n+            serviceFileSuffix = additionalProperties.get(SERVICE_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Service\", serviceFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_SUFFIX)) {\n+            modelSuffix = additionalProperties.get(MODEL_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Model\", modelSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_FILE_SUFFIX)) {\n+            modelFileSuffix = additionalProperties.get(MODEL_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Model\", modelFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(FILE_NAMING)) {\n+            this.setFileNaming(additionalProperties.get(FILE_NAMING).toString());\n+        }\n+    }\n+\n+    private void addNpmPackageGeneration(SemVer nestVersion) {\n+\n+        if (additionalProperties.containsKey(NPM_REPOSITORY)) {\n+            this.setNpmRepository(additionalProperties.get(NPM_REPOSITORY).toString());\n+        }\n+\n+        // Set the typescript version compatible to the Nestjs version\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            additionalProperties.put(\"tsVersion\", \">=3.4.0 <3.6.0\");\n+        } else {\n+            // Nestjs v2-v4 requires typescript \">=2.1.5 <2.8\"\n+            additionalProperties.put(\"tsVersion\", \">=2.1.5 <2.8.0\");\n+        }\n+        \n+        //Files for building our lib\n+        supportingFiles.add(new SupportingFile(\"package.mustache\", getIndexDirectory(), \"package.json\"));\n+        supportingFiles.add(new SupportingFile(\"tsconfig.build.mustache\", getIndexDirectory(), \"tsconfig.build.json\"));\n+        supportingFiles.add(new SupportingFile(\"tsconfig.mustache\", getIndexDirectory(), \"tsconfig.json\"));\n+        supportingFiles.add(new SupportingFile(\"tslint.mustache\", getIndexDirectory(), \"tslint.json\"));\n+    }\n+\n+    private String getIndexDirectory() {\n+        String indexPackage = modelPackage.substring(0, Math.max(0, modelPackage.lastIndexOf('.')));\n+        return indexPackage.replace('.', File.separatorChar);\n+    }\n+\n+    public void setStringEnums(boolean value) {\n+        stringEnums = value;\n+    }\n+\n+    public Boolean getStringEnums() {\n+        return stringEnums;\n+    }\n+\n+    @Override\n+    public boolean isDataTypeFile(final String dataType) {\n+        return dataType != null && dataType.equals(\"Blob\");\n+    }\n+\n+    @Override\n+    public String getTypeDeclaration(Schema p) {\n+        if (ModelUtils.isFileSchema(p)) {\n+            return \"Blob\";\n+        } else {\n+            return super.getTypeDeclaration(p);\n+        }\n+    }\n+\n+\n+    @Override\n+    public String getSchemaType(Schema p) {\n+        String openAPIType = super.getSchemaType(p);\n+        if (isLanguagePrimitive(openAPIType) || isLanguageGenericType(openAPIType)) {\n+            return openAPIType;\n+        }\n+        applyLocalTypeMapping(openAPIType);\n+        return openAPIType;\n+    }\n+\n+    private String applyLocalTypeMapping(String type) {\n+        if (typeMapping.containsKey(type)) {\n+            type = typeMapping.get(type);\n+        }\n+        return type;\n+    }\n+\n+    private boolean isLanguagePrimitive(String type) {\n+        return languageSpecificPrimitives.contains(type);\n+    }\n+\n+    private boolean isLanguageGenericType(String type) {\n+        for (String genericType : languageGenericTypes) {\n+            if (type.startsWith(genericType + \"<\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void postProcessParameter(CodegenParameter parameter) {\n+        super.postProcessParameter(parameter);\n+        parameter.dataType = applyLocalTypeMapping(parameter.dataType);\n+    }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> operations, List<Object> allModels) {\n+        Map<String, Object> objs = (Map<String, Object>) operations.get(\"operations\");\n+\n+        // Add filename information for api imports\n+        objs.put(\"apiFilename\", getApiFilenameFromClassname(objs.get(\"classname\").toString()));\n+\n+        List<CodegenOperation> ops = (List<CodegenOperation>) objs.get(\"operation\");\n+        boolean hasSomeFormParams = false;\n+        for (CodegenOperation op : ops) {\n+            if (op.getHasFormParams()) {\n+                hasSomeFormParams = true;\n+            }\n+            if ((boolean) additionalProperties.get(\"useHttpClient\")) {\n+                op.httpMethod = op.httpMethod.toLowerCase(Locale.ENGLISH);\n+            } else {\n+                // Convert httpMethod to Nestjs's RequestMethod enum\n+                // https://nestjs.io/docs/ts/latest/api/http/index/RequestMethod-enum.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 306}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTk3Njg4", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#pullrequestreview-368597688", "createdAt": "2020-03-04T08:56:09Z", "commit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo1NjoxMFrOFxkpmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDoyNjo0MVrOFxnuvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyNTAxNg==", "bodyText": "accidentally deleted newline?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387525016", "createdAt": "2020-03-04T08:56:10Z", "author": {"login": "quezak"}, "path": "docs/generators.md", "diffHunk": "@@ -5,8 +5,7 @@ title: Generators List\n \n The following generators are available:\n \n-## CLIENT generators\n-* [ada](generators/ada.md)  \n+## CLIENT generators* [ada](generators/ada.md)  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0MzIyMA==", "bodyText": "unchanged copied comment?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387543220", "createdAt": "2020-03-04T09:30:10Z", "author": {"login": "quezak"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));\n+        addImport(codegenModel, codegenModel.additionalPropertiesType);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"typescript-nestjs\";\n+    }\n+\n+    @Override\n+    public String getHelp() {\n+        return \"Generates a TypeScript Nestjs 6.x client library.\";\n+    }\n+\n+    @Override\n+    public void processOpts() {\n+        super.processOpts();\n+        supportingFiles.add(\n+                new SupportingFile(\"models.mustache\", modelPackage().replace('.', File.separatorChar), \"models.ts\"));\n+        supportingFiles\n+                .add(new SupportingFile(\"apis.mustache\", apiPackage().replace('.', File.separatorChar), \"api.ts\"));\n+        supportingFiles.add(new SupportingFile(\"index.mustache\", getIndexDirectory(), \"index.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api.module.mustache\", getIndexDirectory(), \"api.module.ts\"));\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", getIndexDirectory(), \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"variables.mustache\", getIndexDirectory(), \"variables.ts\"));\n+        supportingFiles.add(new SupportingFile(\"encoder.mustache\", getIndexDirectory(), \"encoder.ts\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", getIndexDirectory(), \"README.md\"));\n+\n+        // determine NG version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0ODQ2OA==", "bodyText": "this (and IDK how much more of this file) looks copied from angular and is not applicable to nest :)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387548468", "createdAt": "2020-03-04T09:39:21Z", "author": {"login": "quezak"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/README.mustache", "diffHunk": "@@ -0,0 +1,171 @@\n+## {{npmName}}@{{npmVersion}}\n+\n+### Building\n+\n+To install the required dependencies and to build the typescript sources run:\n+```\n+npm install\n+npm run build\n+```\n+\n+### publishing\n+\n+First build the package than run ```npm publish dist``` (don't forget to specify the `dist` folder!)\n+\n+### consuming\n+\n+Navigate to the folder of your consuming project and run one of next commands.\n+\n+_published:_\n+\n+```\n+npm install {{npmName}}@{{npmVersion}} --save\n+```\n+\n+_without publishing (not recommended):_\n+\n+```\n+npm install PATH_TO_GENERATED_PACKAGE/dist --save\n+```\n+\n+_using `npm link`:_\n+\n+In PATH_TO_GENERATED_PACKAGE/dist:\n+\n+```\n+npm link\n+```\n+\n+In your project:\n+```\n+npm link {{npmName}}\n+```\n+\n+\n+#### General usage\n+\n+In your Nestjs project:\n+\n+\n+```\n+// without configuring providers\n+import { ApiModule } from '{{npmName}}';\n+import { HttpModule } from '@nestjs/common';\n+\n+@Module({\n+    imports: [\n+        ApiModule,\n+        HttpModule\n+    ],\n+    providers: []\n+})\n+export class AppModule {}\n+```\n+\n+```\n+// configuring providers\n+import { ApiModule, Configuration, ConfigurationParameters } from '{{npmName}}';\n+\n+export function apiConfigFactory (): Configuration => {\n+  const params: ConfigurationParameters = {\n+    // set configuration parameters here.\n+  }\n+  return new Configuration(params);\n+}\n+\n+@Module({\n+    imports: [ ApiModule.forRoot(apiConfigFactory) ],\n+    declarations: [ AppComponent ],\n+    providers: [],\n+    bootstrap: [ AppComponent ]\n+})\n+export class AppModule {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1OTYyMA==", "bodyText": "Here is my main comment for this PR.\n\nWhy is the module named ApiModule? In my project, which isn't too large, I already have 8 different openapi-generated clients to connect to various 3rd party services, so I think the module should have a specific name.\nWhy is the module global? Did you maybe want to mark the forRoot dynamic module global instead? This way you'd import ApiModule.forRoot(...) in AppModule globally, to provide the Configuration in one place, and then import the plain ApiModule just in the modules that want to use the generated API client. If that's not the case, can you please show me a minimal example how do you intend this module to be used, so I can understand it better?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387559620", "createdAt": "2020-03-04T09:58:42Z", "author": {"login": "quezak"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/api.module.mustache", "diffHunk": "@@ -0,0 +1,40 @@\n+import { DynamicModule, HttpService, HttpModule, Module, Global } from '@nestjs/common';\n+import { Configuration } from './configuration';\n+import { BASE_PATH } from './variables';\n+\n+{{#apiInfo}}\n+{{#apis}}\n+import { {{classname}} } from './{{importPath}}';\n+{{/apis}}\n+{{/apiInfo}}\n+\n+@Global\n+@Module({\n+  imports:      [ HttpModule ],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MTU3OQ==", "bodyText": "Same as (1.) here: if this is just named Configuration, won't the injection break if you import multiple generated modules for different APIs? Also, what if you already have a service named Configuration in your app (which seems likely), won't this break the DI?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387561579", "createdAt": "2020-03-04T10:02:08Z", "author": {"login": "quezak"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/api.module.mustache", "diffHunk": "@@ -0,0 +1,40 @@\n+import { DynamicModule, HttpService, HttpModule, Module, Global } from '@nestjs/common';\n+import { Configuration } from './configuration';\n+import { BASE_PATH } from './variables';\n+\n+{{#apiInfo}}\n+{{#apis}}\n+import { {{classname}} } from './{{importPath}}';\n+{{/apis}}\n+{{/apiInfo}}\n+\n+@Global\n+@Module({\n+  imports:      [ HttpModule ],\n+  exports:      [   \n+    {{#apiInfo}}{{#apis}}{{classname}}{{#hasMore}},\n+    {{/hasMore}}{{/apis}}{{/apiInfo}} \n+  ],\n+  providers: [\n+    {\n+        provide: 'BASE_PATH',\n+        useValue: BASE_PATH\n+    },\n+    {{#apiInfo}}{{#apis}}{{classname}}{{#hasMore}},\n+    {{/hasMore}}{{/apis}}{{/apiInfo}} \n+  ]\n+})\n+export class ApiModule {\n+    public static forRoot(configurationFactory: () => Configuration): DynamicModule {\n+        return {\n+            module: ApiModule,\n+            providers: [ { provide: Configuration, useFactory: configurationFactory } ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MTkxOA==", "bodyText": "Why is this check needed, if the ApiModule explicitly imports HttpModule?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387561918", "createdAt": "2020-03-04T10:02:45Z", "author": {"login": "quezak"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/api.module.mustache", "diffHunk": "@@ -0,0 +1,40 @@\n+import { DynamicModule, HttpService, HttpModule, Module, Global } from '@nestjs/common';\n+import { Configuration } from './configuration';\n+import { BASE_PATH } from './variables';\n+\n+{{#apiInfo}}\n+{{#apis}}\n+import { {{classname}} } from './{{importPath}}';\n+{{/apis}}\n+{{/apiInfo}}\n+\n+@Global\n+@Module({\n+  imports:      [ HttpModule ],\n+  exports:      [   \n+    {{#apiInfo}}{{#apis}}{{classname}}{{#hasMore}},\n+    {{/hasMore}}{{/apis}}{{/apiInfo}} \n+  ],\n+  providers: [\n+    {\n+        provide: 'BASE_PATH',\n+        useValue: BASE_PATH\n+    },\n+    {{#apiInfo}}{{#apis}}{{classname}}{{#hasMore}},\n+    {{/hasMore}}{{/apis}}{{/apiInfo}} \n+  ]\n+})\n+export class ApiModule {\n+    public static forRoot(configurationFactory: () => Configuration): DynamicModule {\n+        return {\n+            module: ApiModule,\n+            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n+        };\n+    }\n+\n+    constructor( httpService: HttpService) {\n+        if (!httpService) {\n+            throw new Error('You need to import the {HttpModule in your AppModule!');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2NDY3OA==", "bodyText": "BASE_PATH DI token will also be ambiguous if you have multiple generated clients in the project. We probably want to give it a more specific and unique name, like _OPENAPI_GENERATED_{{apiName}}_BASE_PATH, so it doesn't collide with any DI tokens that the users might already have in their Nest apps.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387564678", "createdAt": "2020-03-04T10:07:41Z", "author": {"login": "quezak"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/api.service.mustache", "diffHunk": "@@ -0,0 +1,237 @@\n+{{>licenseInfo}}\n+/* tslint:disable:no-unused-variable member-ordering */\n+\n+import { HttpService, Inject, Injectable }                      from '@nestjs/common';\n+import { AxiosResponse } from 'axios';\n+import { Observable }                                        from 'rxjs';\n+{{#imports}}\n+import { {{classname}} } from '../{{filename}}';\n+{{/imports}}\n+import { Configuration }                                     from '../configuration';\n+import { COLLECTION_FORMATS }                     from '../variables';\n+{{#withInterfaces}}\n+import { {{classname}}Interface }                            from './{{classFilename}}Interface';\n+{{/withInterfaces}}\n+\n+{{#operations}}\n+\n+{{#description}}\n+/**\n+ * {{&description}}\n+ */\n+{{/description}}\n+@Injectable()\n+{{#withInterfaces}}\n+export class {{classname}} implements {{classname}}Interface {\n+{{/withInterfaces}}\n+{{^withInterfaces}}\n+export class {{classname}} {\n+{{/withInterfaces}}\n+\n+    protected basePath = '{{{basePath}}}';\n+    public defaultHeaders = new Map()\n+    public configuration = new Configuration();\n+\n+    constructor(protected httpClient: HttpService, @Inject('BASE_PATH') basePath: string, configuration: Configuration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2NTk0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    const form = 'multipart/form-data';\n          \n          \n            \n                    for (const consume of consumes) {\n          \n          \n            \n                        if (form === consume) {\n          \n          \n            \n                            return true;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    const form = 'multipart/form-data';\n          \n          \n            \n                    return consumes.includes(form);", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387565947", "createdAt": "2020-03-04T10:10:02Z", "author": {"login": "quezak"}, "path": "modules/openapi-generator/src/main/resources/typescript-nestjs/api.service.mustache", "diffHunk": "@@ -0,0 +1,237 @@\n+{{>licenseInfo}}\n+/* tslint:disable:no-unused-variable member-ordering */\n+\n+import { HttpService, Inject, Injectable }                      from '@nestjs/common';\n+import { AxiosResponse } from 'axios';\n+import { Observable }                                        from 'rxjs';\n+{{#imports}}\n+import { {{classname}} } from '../{{filename}}';\n+{{/imports}}\n+import { Configuration }                                     from '../configuration';\n+import { COLLECTION_FORMATS }                     from '../variables';\n+{{#withInterfaces}}\n+import { {{classname}}Interface }                            from './{{classFilename}}Interface';\n+{{/withInterfaces}}\n+\n+{{#operations}}\n+\n+{{#description}}\n+/**\n+ * {{&description}}\n+ */\n+{{/description}}\n+@Injectable()\n+{{#withInterfaces}}\n+export class {{classname}} implements {{classname}}Interface {\n+{{/withInterfaces}}\n+{{^withInterfaces}}\n+export class {{classname}} {\n+{{/withInterfaces}}\n+\n+    protected basePath = '{{{basePath}}}';\n+    public defaultHeaders = new Map()\n+    public configuration = new Configuration();\n+\n+    constructor(protected httpClient: HttpService, @Inject('BASE_PATH') basePath: string, configuration: Configuration) {\n+        if (basePath) {\n+            this.basePath = basePath;\n+        }\n+        if (configuration) {\n+            this.configuration = configuration;\n+            this.basePath = basePath || configuration.basePath || this.basePath;\n+        }\n+    }\n+\n+    /**\n+     * @param consumes string[] mime-types\n+     * @return true: consumes contains 'multipart/form-data', false: otherwise\n+     */\n+    private canConsumeForm(consumes: string[]): boolean {\n+        const form = 'multipart/form-data';\n+        for (const consume of consumes) {\n+            if (form === consume) {\n+                return true;\n+            }\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NTQ4NQ==", "bodyText": "why <3.6.0? We're successfully running Nest 6 with TS 3.7.5 and I'm not aware of any requirements that would limit the version to <3.6.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r387575485", "createdAt": "2020-03-04T10:26:41Z", "author": {"login": "quezak"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,603 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ * Copyright 2018 SmartBear Software\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String PROVIDED_IN_ROOT = \"providedInRoot\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(CliOption.newBoolean(PROVIDED_IN_ROOT,\n+                \"Use this property to provide Injectables in root (it is only valid in nestjs version greater or equal to 6.0.0).\",\n+                false));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));\n+        addImport(codegenModel, codegenModel.additionalPropertiesType);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"typescript-nestjs\";\n+    }\n+\n+    @Override\n+    public String getHelp() {\n+        return \"Generates a TypeScript Nestjs 6.x client library.\";\n+    }\n+\n+    @Override\n+    public void processOpts() {\n+        super.processOpts();\n+        supportingFiles.add(\n+                new SupportingFile(\"models.mustache\", modelPackage().replace('.', File.separatorChar), \"models.ts\"));\n+        supportingFiles\n+                .add(new SupportingFile(\"apis.mustache\", apiPackage().replace('.', File.separatorChar), \"api.ts\"));\n+        supportingFiles.add(new SupportingFile(\"index.mustache\", getIndexDirectory(), \"index.ts\"));\n+        supportingFiles.add(new SupportingFile(\"api.module.mustache\", getIndexDirectory(), \"api.module.ts\"));\n+        supportingFiles.add(new SupportingFile(\"configuration.mustache\", getIndexDirectory(), \"configuration.ts\"));\n+        supportingFiles.add(new SupportingFile(\"variables.mustache\", getIndexDirectory(), \"variables.ts\"));\n+        supportingFiles.add(new SupportingFile(\"encoder.mustache\", getIndexDirectory(), \"encoder.ts\"));\n+        supportingFiles.add(new SupportingFile(\"gitignore\", \"\", \".gitignore\"));\n+        supportingFiles.add(new SupportingFile(\"git_push.sh.mustache\", \"\", \"git_push.sh\"));\n+        supportingFiles.add(new SupportingFile(\"README.mustache\", getIndexDirectory(), \"README.md\"));\n+\n+        // determine NG version\n+        SemVer nestVersion;\n+        if (additionalProperties.containsKey(NEST_VERSION)) {\n+            nestVersion = new SemVer(additionalProperties.get(NEST_VERSION).toString());\n+        } else {\n+            nestVersion = new SemVer(this.nestVersion);\n+            LOGGER.info(\"generating code for Nestjs {} ...\", nestVersion);\n+            LOGGER.info(\"  (you can select the nestjs version by setting the additionalProperty nestVersion)\");\n+        }\n+\n+        if (additionalProperties.containsKey(NPM_NAME)) {\n+            addNpmPackageGeneration(nestVersion);\n+        }\n+\n+        if (additionalProperties.containsKey(STRING_ENUMS)) {\n+            setStringEnums(Boolean.valueOf(additionalProperties.get(STRING_ENUMS).toString()));\n+            additionalProperties.put(\"stringEnums\", getStringEnums());\n+            if (getStringEnums()) {\n+                enumSuffix = \"\";\n+                classEnumSeparator = \"\";\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(WITH_INTERFACES)) {\n+            boolean withInterfaces = Boolean.parseBoolean(additionalProperties.get(WITH_INTERFACES).toString());\n+            if (withInterfaces) {\n+                apiTemplateFiles.put(\"apiInterface.mustache\", \"Interface.ts\");\n+            }\n+        }\n+\n+        if (additionalProperties.containsKey(TAGGED_UNIONS)) {\n+            taggedUnions = Boolean.parseBoolean(additionalProperties.get(TAGGED_UNIONS).toString());\n+        }\n+\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            if (!additionalProperties.containsKey(PROVIDED_IN_ROOT)) {\n+                additionalProperties.put(PROVIDED_IN_ROOT, true);\n+            } else {\n+                additionalProperties.put(PROVIDED_IN_ROOT, Boolean.parseBoolean(\n+                    additionalProperties.get(PROVIDED_IN_ROOT).toString()\n+                ));\n+            }\n+        } else {\n+            additionalProperties.put(PROVIDED_IN_ROOT, false);\n+        }\n+\n+        additionalProperties.put(NEST_VERSION, nestVersion);\n+        additionalProperties.put(\"injectionToken\", nestVersion.atLeast(\"4.0.0\") ? \"InjectionToken\" : \"OpaqueToken\");\n+        additionalProperties.put(\"injectionTokenTyped\", nestVersion.atLeast(\"4.0.0\"));\n+        additionalProperties.put(\"useHttpClient\", nestVersion.atLeast(\"4.3.0\"));\n+        additionalProperties.put(\"useRxJS6\", nestVersion.atLeast(\"6.0.0\"));        \n+        if (additionalProperties.containsKey(SERVICE_SUFFIX)) {\n+            serviceSuffix = additionalProperties.get(SERVICE_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Service\", serviceSuffix);\n+        }\n+        if (additionalProperties.containsKey(SERVICE_FILE_SUFFIX)) {\n+            serviceFileSuffix = additionalProperties.get(SERVICE_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Service\", serviceFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_SUFFIX)) {\n+            modelSuffix = additionalProperties.get(MODEL_SUFFIX).toString();\n+            validateClassSuffixArgument(\"Model\", modelSuffix);\n+        }\n+        if (additionalProperties.containsKey(MODEL_FILE_SUFFIX)) {\n+            modelFileSuffix = additionalProperties.get(MODEL_FILE_SUFFIX).toString();\n+            validateFileSuffixArgument(\"Model\", modelFileSuffix);\n+        }\n+        if (additionalProperties.containsKey(FILE_NAMING)) {\n+            this.setFileNaming(additionalProperties.get(FILE_NAMING).toString());\n+        }\n+    }\n+\n+    private void addNpmPackageGeneration(SemVer nestVersion) {\n+\n+        if (additionalProperties.containsKey(NPM_REPOSITORY)) {\n+            this.setNpmRepository(additionalProperties.get(NPM_REPOSITORY).toString());\n+        }\n+\n+        // Set the typescript version compatible to the Nestjs version\n+        if (nestVersion.atLeast(\"6.0.0\")) {\n+            additionalProperties.put(\"tsVersion\", \">=3.4.0 <3.6.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 212}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11e88538ecdd94220e99e49c5d8d9dded3a293df", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/11e88538ecdd94220e99e49c5d8d9dded3a293df", "committedDate": "2020-09-11T18:23:31Z", "message": "Merge branch 'master' of https://github.com/OpenAPITools/openapi-generator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf22c22063124134771e5caa6859ff1ed2798c12", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/bf22c22063124134771e5caa6859ff1ed2798c12", "committedDate": "2020-09-11T19:42:44Z", "message": "cleanup PRS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTk2NjY5", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#pullrequestreview-479596669", "createdAt": "2020-09-01T10:10:41Z", "commit": {"oid": "54425caa354bcafd973ad7d1161c8a80d22119ab"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDoxMDo0MVrOHKvl0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoxODoxMlrOHVNKqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyNzUzOA==", "bodyText": "i think it's definitely a coincidence.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r481027538", "createdAt": "2020-09-01T10:10:41Z", "author": {"login": "Vmarci94"}, "path": "docs/generators.md", "diffHunk": "@@ -5,8 +5,7 @@ title: Generators List\n \n The following generators are available:\n \n-## CLIENT generators\n-* [ada](generators/ada.md)  \n+## CLIENT generators* [ada](generators/ada.md)  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyNTAxNg=="}, "originalCommit": {"oid": "c8b4dd193e8fefc38b9cdb840c9ea2dd1b7c10f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk5Nzg2NA==", "bodyText": "use de base getAdditionalProperties function!", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r491997864", "createdAt": "2020-09-21T12:18:12Z", "author": {"login": "Vmarci94"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -0,0 +1,548 @@\n+/*\n+ * Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.openapitools.codegen.languages;\n+\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.parser.util.SchemaTypeUtil;\n+import org.openapitools.codegen.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.openapitools.codegen.utils.SemVer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.apache.commons.lang3.StringUtils.capitalize;\n+import static org.openapitools.codegen.utils.StringUtils.*;\n+\n+public class TypeScriptNestjsClientCodegen extends AbstractTypeScriptClientCodegen {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TypeScriptNestjsClientCodegen.class);\n+\n+    private static String CLASS_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9]*$\";\n+    private static String FILE_NAME_SUFFIX_PATTERN = \"^[a-zA-Z0-9.-]*$\";\n+\n+    public static final String NPM_REPOSITORY = \"npmRepository\";\n+    public static final String WITH_INTERFACES = \"withInterfaces\";\n+    public static final String TAGGED_UNIONS = \"taggedUnions\";\n+    public static final String NEST_VERSION = \"nestVersion\";\n+    public static final String SERVICE_SUFFIX = \"serviceSuffix\";\n+    public static final String SERVICE_FILE_SUFFIX = \"serviceFileSuffix\";\n+    public static final String MODEL_SUFFIX = \"modelSuffix\";\n+    public static final String MODEL_FILE_SUFFIX = \"modelFileSuffix\";\n+    public static final String FILE_NAMING = \"fileNaming\";\n+    public static final String STRING_ENUMS = \"stringEnums\";\n+    public static final String STRING_ENUMS_DESC = \"Generate string enums instead of objects for enum values.\";\n+\n+    protected String nestVersion = \"6.0.0\";\n+    protected String npmRepository = null;\n+    protected String serviceSuffix = \"Service\";\n+    protected String serviceFileSuffix = \".service\";\n+    protected String modelSuffix = \"\";\n+    protected String modelFileSuffix = \"\";\n+    protected String fileNaming = \"camelCase\";\n+    protected Boolean stringEnums = false;\n+\n+    private boolean taggedUnions = false;\n+\n+    public TypeScriptNestjsClientCodegen() {\n+        super();\n+        this.outputFolder = \"generated-code/typescript-nestjs\";\n+\n+        supportsMultipleInheritance = true;\n+\n+        embeddedTemplateDir = templateDir = \"typescript-nestjs\";\n+        modelTemplateFiles.put(\"model.mustache\", \".ts\");\n+        apiTemplateFiles.put(\"api.service.mustache\", \".ts\");\n+        languageSpecificPrimitives.add(\"Blob\");\n+        typeMapping.put(\"file\", \"Blob\");\n+        apiPackage = \"api\";\n+        modelPackage = \"model\";\n+\n+        this.cliOptions.add(new CliOption(NPM_REPOSITORY,\n+                \"Use this property to set an url your private npmRepo in the package.json\"));\n+        this.cliOptions.add(CliOption.newBoolean(WITH_INTERFACES,\n+                \"Setting this property to true will generate interfaces next to the default class implementations.\",\n+                false));\n+        this.cliOptions.add(CliOption.newBoolean(TAGGED_UNIONS,\n+                \"Use discriminators to create tagged unions instead of extending interfaces.\",\n+                this.taggedUnions));\n+        this.cliOptions.add(new CliOption(NEST_VERSION, \"The version of Nestjs.\").defaultValue(this.nestVersion));\n+        this.cliOptions.add(new CliOption(SERVICE_SUFFIX, \"The suffix of the generated service.\").defaultValue(this.serviceSuffix));\n+        this.cliOptions.add(new CliOption(SERVICE_FILE_SUFFIX, \"The suffix of the file of the generated service (service<suffix>.ts).\").defaultValue(this.serviceFileSuffix));\n+        this.cliOptions.add(new CliOption(MODEL_SUFFIX, \"The suffix of the generated model.\"));\n+        this.cliOptions.add(new CliOption(MODEL_FILE_SUFFIX, \"The suffix of the file of the generated model (model<suffix>.ts).\"));\n+        this.cliOptions.add(new CliOption(FILE_NAMING, \"Naming convention for the output files: 'camelCase', 'kebab-case'.\").defaultValue(this.fileNaming));\n+        this.cliOptions.add(new CliOption(STRING_ENUMS, STRING_ENUMS_DESC).defaultValue(String.valueOf(this.stringEnums)));\n+    }\n+\n+    @Override\n+    protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Schema schema) {\n+        codegenModel.additionalPropertiesType = getTypeDeclaration(ModelUtils.getAdditionalProperties(schema));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf22c22063124134771e5caa6859ff1ed2798c12"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d661501f275fc1c547c4aa44bde6fa177ad55dd5", "author": {"user": {"login": "wing328", "name": "William Cheng"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/d661501f275fc1c547c4aa44bde6fa177ad55dd5", "committedDate": "2020-09-21T15:08:05Z", "message": "fix compilation error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMTI0MjQz", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#pullrequestreview-493124243", "createdAt": "2020-09-22T04:45:30Z", "commit": {"oid": "d661501f275fc1c547c4aa44bde6fa177ad55dd5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDo0NTozMFrOHVqEwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDo0NTozMFrOHVqEwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3MTQ4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param operation     the operation\n          \n          \n            \n                 * @param operation the operation", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5518#discussion_r492471489", "createdAt": "2020-09-22T04:45:30Z", "author": {"login": "Asafkbalink"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptNestjsClientCodegen.java", "diffHunk": "@@ -334,7 +330,7 @@ public void postProcessParameter(CodegenParameter parameter) {\n     /**\n      * Finds and returns a path parameter of an operation by its name\n      *\n-     * @param operation the operation\n+     * @param operation     the operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d661501f275fc1c547c4aa44bde6fa177ad55dd5"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2732, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}