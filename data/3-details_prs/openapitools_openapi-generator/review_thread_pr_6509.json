{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NzIwMjEx", "number": 6509, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMzoyODowNlrOEDJCYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozOTozOFrOEDJNzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzI5MjUwOnYy", "diffSide": "RIGHT", "path": "CI/.drone.yml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMzoyODowNlrOGgBkmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDoxNjo0NlrOGgBusw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMzM3MQ==", "bodyText": "I see that these are for both v2.X and v3.X samples, how about updating this comment to:\n# generate all petstore samples (client, servers, doc) includes v2.X + v3.X documents", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436233371", "createdAt": "2020-06-06T03:28:06Z", "author": {"login": "spacether"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2741747c7c2bbcdda8a407eb0405ab320d5219d9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNDA0Nw==", "bodyText": "I don't understand how that provides clarity to the comment... \"All petstore samples\" means everything.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436234047", "createdAt": "2020-06-06T03:40:12Z", "author": {"login": "jimschubert"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMzM3MQ=="}, "originalCommit": {"oid": "2741747c7c2bbcdda8a407eb0405ab320d5219d9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNDE4NA==", "bodyText": "btw something you might not be aware of is that all samples are being converted to OAS 3.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436234184", "createdAt": "2020-06-06T03:42:30Z", "author": {"login": "jimschubert"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMzM3MQ=="}, "originalCommit": {"oid": "2741747c7c2bbcdda8a407eb0405ab320d5219d9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNTk1NQ==", "bodyText": "Ah, I wasn't aware of that", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436235955", "createdAt": "2020-06-06T04:16:46Z", "author": {"login": "spacether"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMzM3MQ=="}, "originalCommit": {"oid": "2741747c7c2bbcdda8a407eb0405ab320d5219d9"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzMxMzExOnYy", "diffSide": "RIGHT", "path": "CI/.drone.yml", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDoxODo0OFrOGgBvKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoxMToxM1rOGglt2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjA3NA==", "bodyText": "So this other folder naming is still confusing to me\nThis comment says that all samples in the other folder are v3 samples\nlooking in them I see v2 samples. Is this comment incorrect?\nAre these v2 or v3?\nAre they non-petstore samples?\nCan you clarify this in the comment or the folder name?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436236074", "createdAt": "2020-06-06T04:18:48Z", "author": {"login": "spacether"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)\n-  - /bin/bash bin/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh\n   # generate all petstore samples (openapi3)\n-  - /bin/bash bin/openapi3/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh bin/configs/other/*.yaml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjQ2Mg==", "bodyText": "Everything will move to openapi3 shortly, so this comment will only be stale for a brief time.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436236462", "createdAt": "2020-06-06T04:25:49Z", "author": {"login": "jimschubert"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)\n-  - /bin/bash bin/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh\n   # generate all petstore samples (openapi3)\n-  - /bin/bash bin/openapi3/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh bin/configs/other/*.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjA3NA=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjY0Ng==", "bodyText": "So these are v2 samples only then?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436236646", "createdAt": "2020-06-06T04:28:50Z", "author": {"login": "spacether"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)\n-  - /bin/bash bin/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh\n   # generate all petstore samples (openapi3)\n-  - /bin/bash bin/openapi3/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh bin/configs/other/*.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjA3NA=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1NjE3MA==", "bodyText": "No. As mentioned in the PR, these are the samples which were not previously included in our ensure script.\nAny v2 samples in this directory won't be v2 for long, so the incorrectness of the comment is only temporary.\nWe don't really need to be flipping back and forth between words in comments to have them be correct across 20 or so commits (however many it'll take for conversion). There's a ton more that we can focus our energies on.\nPlus, if CI is already running or queued, making a change to a few comments wastes the time of authors and reviewers. It's also bad for the environment if we're churning out unnecessary builds over and over.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436256170", "createdAt": "2020-06-06T10:05:21Z", "author": {"login": "jimschubert"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)\n-  - /bin/bash bin/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh\n   # generate all petstore samples (openapi3)\n-  - /bin/bash bin/openapi3/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh bin/configs/other/*.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjA3NA=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3ODUwMg==", "bodyText": "I understand that changing a comment kicks off a new CI run, and that doing a ton of them is not good. One of the points that you highlighted was that before, people were updating incorrect locations for generators. Some reasons that they were doing this was that multiple locations were possible and also because they misunderstood what to do. My question is looking to clear up any misunderstanding that users have when trying to understand what the other folder is for. In my opinion kicking off one more CI run is a very low cost to clearing up confusion. But it's fine if we keep it as-is.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436278502", "createdAt": "2020-06-06T15:45:32Z", "author": {"login": "spacether"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)\n-  - /bin/bash bin/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh\n   # generate all petstore samples (openapi3)\n-  - /bin/bash bin/openapi3/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh bin/configs/other/*.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjA3NA=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5ODg4Mw==", "bodyText": "I reviewed and I think I only mentioned this in chat, so I'll reproduce it here\u2026\nI'd personally like to include all these yaml in a single directory. It only takes about a minute on my machine to generate all generators.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436298883", "createdAt": "2020-06-06T20:36:46Z", "author": {"login": "jimschubert"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)\n-  - /bin/bash bin/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh\n   # generate all petstore samples (openapi3)\n-  - /bin/bash bin/openapi3/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh bin/configs/other/*.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjA3NA=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyNTU2MQ==", "bodyText": "A single directory is clearer longer term. Keeping it separate for now is fine. This PR has been in review for a while and this item isn't a blocking concern to me.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436825561", "createdAt": "2020-06-08T16:11:13Z", "author": {"login": "spacether"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)\n-  - /bin/bash bin/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh\n   # generate all petstore samples (openapi3)\n-  - /bin/bash bin/openapi3/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh bin/configs/other/*.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjA3NA=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzMxODAyOnYy", "diffSide": "RIGHT", "path": "CI/bitrise.yml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozMDo0NFrOGgBx4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjozNTo0MlrOGgmsJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjc2OA==", "bodyText": "Aren't these samples also run in Drone when we invoke /bin/bash bin/generate-samples.sh why run them twice?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436236768", "createdAt": "2020-06-06T04:30:44Z", "author": {"login": "spacether"}, "path": "CI/bitrise.yml", "diffHunk": "@@ -38,7 +38,7 @@ workflows:\n \n             set -e\n \n-            sh bin/swift5-all.sh\n+            sh bin/generate-samples.sh bin/configs/swift5-*.yaml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1NTY1MQ==", "bodyText": "Different CI run in parallel and don't have a way to know this has been run.\nSee my comment in this PR about potentially using GitHub Workflow", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436255651", "createdAt": "2020-06-06T09:55:59Z", "author": {"login": "jimschubert"}, "path": "CI/bitrise.yml", "diffHunk": "@@ -38,7 +38,7 @@ workflows:\n \n             set -e\n \n-            sh bin/swift5-all.sh\n+            sh bin/generate-samples.sh bin/configs/swift5-*.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjc2OA=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwOTMzMw==", "bodyText": "Right. In other words, the jobs run independently on different CI providers.\n@spacether if you've further questions on the CI, PM me via Slack as I setup most of them.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436809333", "createdAt": "2020-06-08T15:47:55Z", "author": {"login": "wing328"}, "path": "CI/bitrise.yml", "diffHunk": "@@ -38,7 +38,7 @@ workflows:\n \n             set -e\n \n-            sh bin/swift5-all.sh\n+            sh bin/generate-samples.sh bin/configs/swift5-*.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjc2OA=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0MTUxMA==", "bodyText": "Thank you. Yup I was aware that they run in parallel + independently. What I didn't understand was why we need each of them. Jim pointed me to https://github.com/OpenAPITools/openapi-generator/wiki/Integration-Tests\nWhich shows that we use bitrise to test swift 4/5 so it looks like the reason that we generate them in both locations is that:\n\nin drone we are testing JDK11 test, OCaml client, etc and need the samples generated for that testing\nin bitrise we are specifically testing switft4/5 so we need to run sample generation prior to that", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436841510", "createdAt": "2020-06-08T16:35:42Z", "author": {"login": "spacether"}, "path": "CI/bitrise.yml", "diffHunk": "@@ -38,7 +38,7 @@ workflows:\n \n             set -e\n \n-            sh bin/swift5-all.sh\n+            sh bin/generate-samples.sh bin/configs/swift5-*.yaml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjc2OA=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzMyMDU0OnYy", "diffSide": "LEFT", "path": "CI/samples.ci/client/petstore/java/test-manual/jersey2/ApiClientTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozNjowOFrOGgBzHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo1Nzo1MFrOGglJ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzA4Nw==", "bodyText": "Note: this still exists at https://github.com/OpenAPITools/openapi-generator/blob/ensures/samples/client/petstore/java/jersey2-java8/src/test/java/org/openapitools/client/ApiClientTest.java", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436237087", "createdAt": "2020-06-06T04:36:08Z", "author": {"login": "spacether"}, "path": "CI/samples.ci/client/petstore/java/test-manual/jersey2/ApiClientTest.java", "diffHunk": "@@ -1,249 +0,0 @@\n-package org.openapitools.client;\n-\n-import org.openapitools.client.auth.*;\n-\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.*;\n-\n-import org.junit.*;\n-import static org.junit.Assert.*;\n-\n-\n-public class ApiClientTest {\n-    ApiClient apiClient = null;\n-\n-    @Before\n-    public void setup() {\n-        apiClient = new ApiClient();\n-    }\n-\n-    @Test\n-    public void testParseAndFormatDate() {\n-        // default date format\n-        String dateStr = \"2015-11-07T03:49:09.356Z\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T05:49:09.356+02:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T02:49:09.356-01:00\")));\n-\n-        // custom date format: without milli-seconds, custom time zone\n-        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\", Locale.ROOT);\n-        format.setTimeZone(TimeZone.getTimeZone(\"GMT+10\"));\n-        apiClient.setDateFormat(format);\n-        dateStr = \"2015-11-07T13:49:09+10:00\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T00:49:09-03:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T13:49:09+10:00\")));\n-    }\n-\n-    @Test\n-    public void testIsJsonMime() {\n-        assertFalse(apiClient.isJsonMime(null));\n-        assertFalse(apiClient.isJsonMime(\"\"));\n-        assertFalse(apiClient.isJsonMime(\"text/plain\"));\n-        assertFalse(apiClient.isJsonMime(\"application/xml\"));\n-        assertFalse(apiClient.isJsonMime(\"application/jsonp\"));\n-        assertFalse(apiClient.isJsonMime(\"example/json\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+jsonx\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+xjson\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/json\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json; charset=UTF8\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/JSON\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/problem+json\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/PROBLEM+JSON\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json\\t\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+bar+json\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json;x;y\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json\\t;\"));\n-        assertTrue(apiClient.isJsonMime(\"Example/fOO+JSON\"));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderAccept() {\n-        String[] accepts = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"APPLICATION/XML\", \"APPLICATION/JSON\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain,application/xml\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{};\n-        assertNull(apiClient.selectHeaderAccept(accepts));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderContentType() {\n-        String[] contentTypes = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"APPLICATION/JSON\", \"APPLICATION/XML\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-    }\n-\n-    @Test\n-    public void testGetAuthentications() {\n-        Map<String, Authentication> auths = apiClient.getAuthentications();\n-\n-        Authentication auth = auths.get(\"api_key\");\n-        assertNotNull(auth);\n-        assertTrue(auth instanceof ApiKeyAuth);\n-        ApiKeyAuth apiKeyAuth = (ApiKeyAuth) auth;\n-        assertEquals(\"header\", apiKeyAuth.getLocation());\n-        assertEquals(\"api_key\", apiKeyAuth.getParamName());\n-\n-        auth = auths.get(\"petstore_auth\");\n-        assertTrue(auth instanceof OAuth);\n-        assertSame(auth, apiClient.getAuthentication(\"petstore_auth\"));\n-\n-        assertNull(auths.get(\"unknown\"));\n-\n-        try {\n-            auths.put(\"my_auth\", new HttpBasicAuth());\n-            fail(\"the authentications returned should not be modifiable\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-    }\n-\n-    @Test\n-    public void testSetUsernameAndPassword() {\n-        HttpBasicAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof HttpBasicAuth) {\n-                auth = (HttpBasicAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-\n-        apiClient.setUsername(\"my-username\");\n-        apiClient.setPassword(\"my-password\");\n-        assertEquals(\"my-username\", auth.getUsername());\n-        assertEquals(\"my-password\", auth.getPassword());\n-\n-        // reset values\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-    }\n-\n-    @Test\n-    public void testSetApiKeyAndPrefix() {\n-        ApiKeyAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof ApiKeyAuth) {\n-                auth = (ApiKeyAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-\n-        apiClient.setApiKey(\"my-api-key\");\n-        apiClient.setApiKeyPrefix(\"Token\");\n-        assertEquals(\"my-api-key\", auth.getApiKey());\n-        assertEquals(\"Token\", auth.getApiKeyPrefix());\n-\n-        // reset values\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenNameIsInvalid() throws Exception {\n-        List<Pair> pairs_a = apiClient.parameterToPairs(\"csv\", null, new Integer(1));\n-        List<Pair> pairs_b = apiClient.parameterToPairs(\"csv\", \"\", new Integer(1));\n-\n-        assertTrue(pairs_a.isEmpty());\n-        assertTrue(pairs_b.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNull() throws Exception {\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", null);\n-\n-        assertTrue(pairs.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsEmptyStrings() throws Exception {\n-\n-        // single empty string\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", \" \");\n-        assertEquals(1, pairs.size());\n-\n-        // list of empty strings\n-        List<String> strs = new ArrayList<String>();\n-        strs.add(\" \");\n-        strs.add(\" \");\n-        strs.add(\" \");\n-\n-        List<Pair> concatStrings = apiClient.parameterToPairs(\"csv\", \"param-a\", strs);\n-\n-        assertEquals(1, concatStrings.size());\n-        assertFalse(concatStrings.get(0).getValue().isEmpty()); // should contain some delimiters\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNotCollection() throws Exception {\n-        String name = \"param-a\";\n-        Integer value = 1;\n-\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", name, value);\n-\n-        assertEquals(1, pairs.size());\n-        assertEquals(value, Integer.valueOf(pairs.get(0).getValue()));\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsCollection() throws Exception {\n-        Map<String, String> collectionFormatMap = new HashMap<String, String>();\n-        collectionFormatMap.put(\"csv\", \",\");\n-        collectionFormatMap.put(\"tsv\", \"\\t\");\n-        collectionFormatMap.put(\"ssv\", \" \");\n-        collectionFormatMap.put(\"pipes\", \"\\\\|\");\n-        collectionFormatMap.put(\"\", \",\"); // no format, must default to csv\n-        collectionFormatMap.put(\"unknown\", \",\"); // all other formats, must default to csv\n-\n-        String name = \"param-a\";\n-\n-        List<Object> values = new ArrayList<Object>();\n-        values.add(\"value-a\");\n-        values.add(123);\n-        values.add(new Date());\n-\n-        // check for multi separately\n-        List<Pair> multiPairs = apiClient.parameterToPairs(\"multi\", name, values);\n-        assertEquals(values.size(), multiPairs.size());\n-\n-        // all other formats\n-        for (String collectionFormat : collectionFormatMap.keySet()) {\n-            List<Pair> pairs = apiClient.parameterToPairs(collectionFormat, name, values);\n-\n-            assertEquals(1, pairs.size());\n-\n-            String delimiter = collectionFormatMap.get(collectionFormat);\n-            String[] pairValueSplit = pairs.get(0).getValue().split(delimiter);\n-\n-            // must equal input values\n-            assertEquals(values.size(), pairValueSplit.length);\n-        }\n-    }\n-}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1NjIyMw==", "bodyText": "What are there notes for, and who are they directed at?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436256223", "createdAt": "2020-06-06T10:06:09Z", "author": {"login": "jimschubert"}, "path": "CI/samples.ci/client/petstore/java/test-manual/jersey2/ApiClientTest.java", "diffHunk": "@@ -1,249 +0,0 @@\n-package org.openapitools.client;\n-\n-import org.openapitools.client.auth.*;\n-\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.*;\n-\n-import org.junit.*;\n-import static org.junit.Assert.*;\n-\n-\n-public class ApiClientTest {\n-    ApiClient apiClient = null;\n-\n-    @Before\n-    public void setup() {\n-        apiClient = new ApiClient();\n-    }\n-\n-    @Test\n-    public void testParseAndFormatDate() {\n-        // default date format\n-        String dateStr = \"2015-11-07T03:49:09.356Z\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T05:49:09.356+02:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T02:49:09.356-01:00\")));\n-\n-        // custom date format: without milli-seconds, custom time zone\n-        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\", Locale.ROOT);\n-        format.setTimeZone(TimeZone.getTimeZone(\"GMT+10\"));\n-        apiClient.setDateFormat(format);\n-        dateStr = \"2015-11-07T13:49:09+10:00\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T00:49:09-03:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T13:49:09+10:00\")));\n-    }\n-\n-    @Test\n-    public void testIsJsonMime() {\n-        assertFalse(apiClient.isJsonMime(null));\n-        assertFalse(apiClient.isJsonMime(\"\"));\n-        assertFalse(apiClient.isJsonMime(\"text/plain\"));\n-        assertFalse(apiClient.isJsonMime(\"application/xml\"));\n-        assertFalse(apiClient.isJsonMime(\"application/jsonp\"));\n-        assertFalse(apiClient.isJsonMime(\"example/json\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+jsonx\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+xjson\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/json\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json; charset=UTF8\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/JSON\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/problem+json\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/PROBLEM+JSON\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json\\t\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+bar+json\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json;x;y\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json\\t;\"));\n-        assertTrue(apiClient.isJsonMime(\"Example/fOO+JSON\"));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderAccept() {\n-        String[] accepts = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"APPLICATION/XML\", \"APPLICATION/JSON\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain,application/xml\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{};\n-        assertNull(apiClient.selectHeaderAccept(accepts));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderContentType() {\n-        String[] contentTypes = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"APPLICATION/JSON\", \"APPLICATION/XML\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-    }\n-\n-    @Test\n-    public void testGetAuthentications() {\n-        Map<String, Authentication> auths = apiClient.getAuthentications();\n-\n-        Authentication auth = auths.get(\"api_key\");\n-        assertNotNull(auth);\n-        assertTrue(auth instanceof ApiKeyAuth);\n-        ApiKeyAuth apiKeyAuth = (ApiKeyAuth) auth;\n-        assertEquals(\"header\", apiKeyAuth.getLocation());\n-        assertEquals(\"api_key\", apiKeyAuth.getParamName());\n-\n-        auth = auths.get(\"petstore_auth\");\n-        assertTrue(auth instanceof OAuth);\n-        assertSame(auth, apiClient.getAuthentication(\"petstore_auth\"));\n-\n-        assertNull(auths.get(\"unknown\"));\n-\n-        try {\n-            auths.put(\"my_auth\", new HttpBasicAuth());\n-            fail(\"the authentications returned should not be modifiable\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-    }\n-\n-    @Test\n-    public void testSetUsernameAndPassword() {\n-        HttpBasicAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof HttpBasicAuth) {\n-                auth = (HttpBasicAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-\n-        apiClient.setUsername(\"my-username\");\n-        apiClient.setPassword(\"my-password\");\n-        assertEquals(\"my-username\", auth.getUsername());\n-        assertEquals(\"my-password\", auth.getPassword());\n-\n-        // reset values\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-    }\n-\n-    @Test\n-    public void testSetApiKeyAndPrefix() {\n-        ApiKeyAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof ApiKeyAuth) {\n-                auth = (ApiKeyAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-\n-        apiClient.setApiKey(\"my-api-key\");\n-        apiClient.setApiKeyPrefix(\"Token\");\n-        assertEquals(\"my-api-key\", auth.getApiKey());\n-        assertEquals(\"Token\", auth.getApiKeyPrefix());\n-\n-        // reset values\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenNameIsInvalid() throws Exception {\n-        List<Pair> pairs_a = apiClient.parameterToPairs(\"csv\", null, new Integer(1));\n-        List<Pair> pairs_b = apiClient.parameterToPairs(\"csv\", \"\", new Integer(1));\n-\n-        assertTrue(pairs_a.isEmpty());\n-        assertTrue(pairs_b.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNull() throws Exception {\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", null);\n-\n-        assertTrue(pairs.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsEmptyStrings() throws Exception {\n-\n-        // single empty string\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", \" \");\n-        assertEquals(1, pairs.size());\n-\n-        // list of empty strings\n-        List<String> strs = new ArrayList<String>();\n-        strs.add(\" \");\n-        strs.add(\" \");\n-        strs.add(\" \");\n-\n-        List<Pair> concatStrings = apiClient.parameterToPairs(\"csv\", \"param-a\", strs);\n-\n-        assertEquals(1, concatStrings.size());\n-        assertFalse(concatStrings.get(0).getValue().isEmpty()); // should contain some delimiters\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNotCollection() throws Exception {\n-        String name = \"param-a\";\n-        Integer value = 1;\n-\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", name, value);\n-\n-        assertEquals(1, pairs.size());\n-        assertEquals(value, Integer.valueOf(pairs.get(0).getValue()));\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsCollection() throws Exception {\n-        Map<String, String> collectionFormatMap = new HashMap<String, String>();\n-        collectionFormatMap.put(\"csv\", \",\");\n-        collectionFormatMap.put(\"tsv\", \"\\t\");\n-        collectionFormatMap.put(\"ssv\", \" \");\n-        collectionFormatMap.put(\"pipes\", \"\\\\|\");\n-        collectionFormatMap.put(\"\", \",\"); // no format, must default to csv\n-        collectionFormatMap.put(\"unknown\", \",\"); // all other formats, must default to csv\n-\n-        String name = \"param-a\";\n-\n-        List<Object> values = new ArrayList<Object>();\n-        values.add(\"value-a\");\n-        values.add(123);\n-        values.add(new Date());\n-\n-        // check for multi separately\n-        List<Pair> multiPairs = apiClient.parameterToPairs(\"multi\", name, values);\n-        assertEquals(values.size(), multiPairs.size());\n-\n-        // all other formats\n-        for (String collectionFormat : collectionFormatMap.keySet()) {\n-            List<Pair> pairs = apiClient.parameterToPairs(collectionFormat, name, values);\n-\n-            assertEquals(1, pairs.size());\n-\n-            String delimiter = collectionFormatMap.get(collectionFormat);\n-            String[] pairValueSplit = pairs.get(0).getValue().split(delimiter);\n-\n-            // must equal input values\n-            assertEquals(values.size(), pairValueSplit.length);\n-        }\n-    }\n-}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzA4Nw=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3NzYzOQ==", "bodyText": "They are for me and other reviewers wondering if these tests still exist. Github does not tell us that this file was moved or still exist so it looks like these tests were permanently removed and that we are losing test coverage.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436277639", "createdAt": "2020-06-06T15:33:04Z", "author": {"login": "spacether"}, "path": "CI/samples.ci/client/petstore/java/test-manual/jersey2/ApiClientTest.java", "diffHunk": "@@ -1,249 +0,0 @@\n-package org.openapitools.client;\n-\n-import org.openapitools.client.auth.*;\n-\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.*;\n-\n-import org.junit.*;\n-import static org.junit.Assert.*;\n-\n-\n-public class ApiClientTest {\n-    ApiClient apiClient = null;\n-\n-    @Before\n-    public void setup() {\n-        apiClient = new ApiClient();\n-    }\n-\n-    @Test\n-    public void testParseAndFormatDate() {\n-        // default date format\n-        String dateStr = \"2015-11-07T03:49:09.356Z\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T05:49:09.356+02:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T02:49:09.356-01:00\")));\n-\n-        // custom date format: without milli-seconds, custom time zone\n-        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\", Locale.ROOT);\n-        format.setTimeZone(TimeZone.getTimeZone(\"GMT+10\"));\n-        apiClient.setDateFormat(format);\n-        dateStr = \"2015-11-07T13:49:09+10:00\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T00:49:09-03:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T13:49:09+10:00\")));\n-    }\n-\n-    @Test\n-    public void testIsJsonMime() {\n-        assertFalse(apiClient.isJsonMime(null));\n-        assertFalse(apiClient.isJsonMime(\"\"));\n-        assertFalse(apiClient.isJsonMime(\"text/plain\"));\n-        assertFalse(apiClient.isJsonMime(\"application/xml\"));\n-        assertFalse(apiClient.isJsonMime(\"application/jsonp\"));\n-        assertFalse(apiClient.isJsonMime(\"example/json\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+jsonx\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+xjson\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/json\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json; charset=UTF8\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/JSON\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/problem+json\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/PROBLEM+JSON\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json\\t\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+bar+json\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json;x;y\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json\\t;\"));\n-        assertTrue(apiClient.isJsonMime(\"Example/fOO+JSON\"));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderAccept() {\n-        String[] accepts = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"APPLICATION/XML\", \"APPLICATION/JSON\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain,application/xml\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{};\n-        assertNull(apiClient.selectHeaderAccept(accepts));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderContentType() {\n-        String[] contentTypes = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"APPLICATION/JSON\", \"APPLICATION/XML\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-    }\n-\n-    @Test\n-    public void testGetAuthentications() {\n-        Map<String, Authentication> auths = apiClient.getAuthentications();\n-\n-        Authentication auth = auths.get(\"api_key\");\n-        assertNotNull(auth);\n-        assertTrue(auth instanceof ApiKeyAuth);\n-        ApiKeyAuth apiKeyAuth = (ApiKeyAuth) auth;\n-        assertEquals(\"header\", apiKeyAuth.getLocation());\n-        assertEquals(\"api_key\", apiKeyAuth.getParamName());\n-\n-        auth = auths.get(\"petstore_auth\");\n-        assertTrue(auth instanceof OAuth);\n-        assertSame(auth, apiClient.getAuthentication(\"petstore_auth\"));\n-\n-        assertNull(auths.get(\"unknown\"));\n-\n-        try {\n-            auths.put(\"my_auth\", new HttpBasicAuth());\n-            fail(\"the authentications returned should not be modifiable\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-    }\n-\n-    @Test\n-    public void testSetUsernameAndPassword() {\n-        HttpBasicAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof HttpBasicAuth) {\n-                auth = (HttpBasicAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-\n-        apiClient.setUsername(\"my-username\");\n-        apiClient.setPassword(\"my-password\");\n-        assertEquals(\"my-username\", auth.getUsername());\n-        assertEquals(\"my-password\", auth.getPassword());\n-\n-        // reset values\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-    }\n-\n-    @Test\n-    public void testSetApiKeyAndPrefix() {\n-        ApiKeyAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof ApiKeyAuth) {\n-                auth = (ApiKeyAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-\n-        apiClient.setApiKey(\"my-api-key\");\n-        apiClient.setApiKeyPrefix(\"Token\");\n-        assertEquals(\"my-api-key\", auth.getApiKey());\n-        assertEquals(\"Token\", auth.getApiKeyPrefix());\n-\n-        // reset values\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenNameIsInvalid() throws Exception {\n-        List<Pair> pairs_a = apiClient.parameterToPairs(\"csv\", null, new Integer(1));\n-        List<Pair> pairs_b = apiClient.parameterToPairs(\"csv\", \"\", new Integer(1));\n-\n-        assertTrue(pairs_a.isEmpty());\n-        assertTrue(pairs_b.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNull() throws Exception {\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", null);\n-\n-        assertTrue(pairs.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsEmptyStrings() throws Exception {\n-\n-        // single empty string\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", \" \");\n-        assertEquals(1, pairs.size());\n-\n-        // list of empty strings\n-        List<String> strs = new ArrayList<String>();\n-        strs.add(\" \");\n-        strs.add(\" \");\n-        strs.add(\" \");\n-\n-        List<Pair> concatStrings = apiClient.parameterToPairs(\"csv\", \"param-a\", strs);\n-\n-        assertEquals(1, concatStrings.size());\n-        assertFalse(concatStrings.get(0).getValue().isEmpty()); // should contain some delimiters\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNotCollection() throws Exception {\n-        String name = \"param-a\";\n-        Integer value = 1;\n-\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", name, value);\n-\n-        assertEquals(1, pairs.size());\n-        assertEquals(value, Integer.valueOf(pairs.get(0).getValue()));\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsCollection() throws Exception {\n-        Map<String, String> collectionFormatMap = new HashMap<String, String>();\n-        collectionFormatMap.put(\"csv\", \",\");\n-        collectionFormatMap.put(\"tsv\", \"\\t\");\n-        collectionFormatMap.put(\"ssv\", \" \");\n-        collectionFormatMap.put(\"pipes\", \"\\\\|\");\n-        collectionFormatMap.put(\"\", \",\"); // no format, must default to csv\n-        collectionFormatMap.put(\"unknown\", \",\"); // all other formats, must default to csv\n-\n-        String name = \"param-a\";\n-\n-        List<Object> values = new ArrayList<Object>();\n-        values.add(\"value-a\");\n-        values.add(123);\n-        values.add(new Date());\n-\n-        // check for multi separately\n-        List<Pair> multiPairs = apiClient.parameterToPairs(\"multi\", name, values);\n-        assertEquals(values.size(), multiPairs.size());\n-\n-        // all other formats\n-        for (String collectionFormat : collectionFormatMap.keySet()) {\n-            List<Pair> pairs = apiClient.parameterToPairs(collectionFormat, name, values);\n-\n-            assertEquals(1, pairs.size());\n-\n-            String delimiter = collectionFormatMap.get(collectionFormat);\n-            String[] pairValueSplit = pairs.get(0).getValue().split(delimiter);\n-\n-            // must equal input values\n-            assertEquals(values.size(), pairValueSplit.length);\n-        }\n-    }\n-}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzA4Nw=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5ODY4NA==", "bodyText": "I see. It wasn't clear if you were making yourself a note, suggesting to me that I missed a file delete, or what.\nSome of our generators were deleting generated sample directories, then copying these files into the generated test directories. These files always existed in the targeted output directory, which is why GitHub doesn't show a move operation here. The delete + copy is just legacy practice which isn't really needed.\nThere's no reason to delete and copy these test files anymore because OpenAPI Generator doesn't overwrite existing tests and we support and honor the ignore file in the targeted directory.\nThose generators which previously deleted entire samples directories and regenerated into them were probably trying to address the issue of spec files changing (either changing models, adding or removing types, etc) which could leave stale files. We've long since moved toward separating specs according to generators and only making additive changes, so much of that original sample scripting is no longer necessary.\nAlso as mentioned in the PR description, cleanup using the FILES listing will be done later. At that point, we no longer need deletes or shuffling, we can very easily clean existing samples according to what files were generated by the previous run. We may end up with a stale file occasionally causing compilation failure but I'd take that over managing 600+ files separated by OS, OAS version, and shuffling around files rather than using the ignore file functionality.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436298684", "createdAt": "2020-06-06T20:33:50Z", "author": {"login": "jimschubert"}, "path": "CI/samples.ci/client/petstore/java/test-manual/jersey2/ApiClientTest.java", "diffHunk": "@@ -1,249 +0,0 @@\n-package org.openapitools.client;\n-\n-import org.openapitools.client.auth.*;\n-\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.*;\n-\n-import org.junit.*;\n-import static org.junit.Assert.*;\n-\n-\n-public class ApiClientTest {\n-    ApiClient apiClient = null;\n-\n-    @Before\n-    public void setup() {\n-        apiClient = new ApiClient();\n-    }\n-\n-    @Test\n-    public void testParseAndFormatDate() {\n-        // default date format\n-        String dateStr = \"2015-11-07T03:49:09.356Z\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T05:49:09.356+02:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T02:49:09.356-01:00\")));\n-\n-        // custom date format: without milli-seconds, custom time zone\n-        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\", Locale.ROOT);\n-        format.setTimeZone(TimeZone.getTimeZone(\"GMT+10\"));\n-        apiClient.setDateFormat(format);\n-        dateStr = \"2015-11-07T13:49:09+10:00\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T00:49:09-03:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T13:49:09+10:00\")));\n-    }\n-\n-    @Test\n-    public void testIsJsonMime() {\n-        assertFalse(apiClient.isJsonMime(null));\n-        assertFalse(apiClient.isJsonMime(\"\"));\n-        assertFalse(apiClient.isJsonMime(\"text/plain\"));\n-        assertFalse(apiClient.isJsonMime(\"application/xml\"));\n-        assertFalse(apiClient.isJsonMime(\"application/jsonp\"));\n-        assertFalse(apiClient.isJsonMime(\"example/json\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+jsonx\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+xjson\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/json\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json; charset=UTF8\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/JSON\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/problem+json\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/PROBLEM+JSON\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json\\t\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+bar+json\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json;x;y\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json\\t;\"));\n-        assertTrue(apiClient.isJsonMime(\"Example/fOO+JSON\"));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderAccept() {\n-        String[] accepts = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"APPLICATION/XML\", \"APPLICATION/JSON\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain,application/xml\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{};\n-        assertNull(apiClient.selectHeaderAccept(accepts));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderContentType() {\n-        String[] contentTypes = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"APPLICATION/JSON\", \"APPLICATION/XML\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-    }\n-\n-    @Test\n-    public void testGetAuthentications() {\n-        Map<String, Authentication> auths = apiClient.getAuthentications();\n-\n-        Authentication auth = auths.get(\"api_key\");\n-        assertNotNull(auth);\n-        assertTrue(auth instanceof ApiKeyAuth);\n-        ApiKeyAuth apiKeyAuth = (ApiKeyAuth) auth;\n-        assertEquals(\"header\", apiKeyAuth.getLocation());\n-        assertEquals(\"api_key\", apiKeyAuth.getParamName());\n-\n-        auth = auths.get(\"petstore_auth\");\n-        assertTrue(auth instanceof OAuth);\n-        assertSame(auth, apiClient.getAuthentication(\"petstore_auth\"));\n-\n-        assertNull(auths.get(\"unknown\"));\n-\n-        try {\n-            auths.put(\"my_auth\", new HttpBasicAuth());\n-            fail(\"the authentications returned should not be modifiable\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-    }\n-\n-    @Test\n-    public void testSetUsernameAndPassword() {\n-        HttpBasicAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof HttpBasicAuth) {\n-                auth = (HttpBasicAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-\n-        apiClient.setUsername(\"my-username\");\n-        apiClient.setPassword(\"my-password\");\n-        assertEquals(\"my-username\", auth.getUsername());\n-        assertEquals(\"my-password\", auth.getPassword());\n-\n-        // reset values\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-    }\n-\n-    @Test\n-    public void testSetApiKeyAndPrefix() {\n-        ApiKeyAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof ApiKeyAuth) {\n-                auth = (ApiKeyAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-\n-        apiClient.setApiKey(\"my-api-key\");\n-        apiClient.setApiKeyPrefix(\"Token\");\n-        assertEquals(\"my-api-key\", auth.getApiKey());\n-        assertEquals(\"Token\", auth.getApiKeyPrefix());\n-\n-        // reset values\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenNameIsInvalid() throws Exception {\n-        List<Pair> pairs_a = apiClient.parameterToPairs(\"csv\", null, new Integer(1));\n-        List<Pair> pairs_b = apiClient.parameterToPairs(\"csv\", \"\", new Integer(1));\n-\n-        assertTrue(pairs_a.isEmpty());\n-        assertTrue(pairs_b.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNull() throws Exception {\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", null);\n-\n-        assertTrue(pairs.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsEmptyStrings() throws Exception {\n-\n-        // single empty string\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", \" \");\n-        assertEquals(1, pairs.size());\n-\n-        // list of empty strings\n-        List<String> strs = new ArrayList<String>();\n-        strs.add(\" \");\n-        strs.add(\" \");\n-        strs.add(\" \");\n-\n-        List<Pair> concatStrings = apiClient.parameterToPairs(\"csv\", \"param-a\", strs);\n-\n-        assertEquals(1, concatStrings.size());\n-        assertFalse(concatStrings.get(0).getValue().isEmpty()); // should contain some delimiters\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNotCollection() throws Exception {\n-        String name = \"param-a\";\n-        Integer value = 1;\n-\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", name, value);\n-\n-        assertEquals(1, pairs.size());\n-        assertEquals(value, Integer.valueOf(pairs.get(0).getValue()));\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsCollection() throws Exception {\n-        Map<String, String> collectionFormatMap = new HashMap<String, String>();\n-        collectionFormatMap.put(\"csv\", \",\");\n-        collectionFormatMap.put(\"tsv\", \"\\t\");\n-        collectionFormatMap.put(\"ssv\", \" \");\n-        collectionFormatMap.put(\"pipes\", \"\\\\|\");\n-        collectionFormatMap.put(\"\", \",\"); // no format, must default to csv\n-        collectionFormatMap.put(\"unknown\", \",\"); // all other formats, must default to csv\n-\n-        String name = \"param-a\";\n-\n-        List<Object> values = new ArrayList<Object>();\n-        values.add(\"value-a\");\n-        values.add(123);\n-        values.add(new Date());\n-\n-        // check for multi separately\n-        List<Pair> multiPairs = apiClient.parameterToPairs(\"multi\", name, values);\n-        assertEquals(values.size(), multiPairs.size());\n-\n-        // all other formats\n-        for (String collectionFormat : collectionFormatMap.keySet()) {\n-            List<Pair> pairs = apiClient.parameterToPairs(collectionFormat, name, values);\n-\n-            assertEquals(1, pairs.size());\n-\n-            String delimiter = collectionFormatMap.get(collectionFormat);\n-            String[] pairValueSplit = pairs.get(0).getValue().split(delimiter);\n-\n-            // must equal input values\n-            assertEquals(values.size(), pairValueSplit.length);\n-        }\n-    }\n-}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzA4Nw=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxNjM1MQ==", "bodyText": "There's no reason to delete and copy these test files anymore because OpenAPI Generator doesn't overwrite existing tests and we support and honor the ignore file in the targeted directory.\n\nJust a bit more background on this (come up by @jmini if my memory serves me well). The solution aims to solve the problems that sometimes users manually empty the target output folder even though the test files are not manually overwritten during code generation. We encountered this occasionally from time to time (and yes we missed it in the PR which updates a lot of files and the test case removal becomes hard to spot) and restoring the test files did help us to ensure some tests were not removed as part of the PR.\nBut as I pointed out before, one drawback of this method is that it's a bit counter-intuitive to the contributors that they need to update some files under the CI folder in order to add more tests or adjust the tests as part of the change.\nI'm ok this is dropped as part of this PR and I may be able to come up with something later for us to better spot test cases removal as part of the PR review.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436816351", "createdAt": "2020-06-08T15:57:50Z", "author": {"login": "wing328"}, "path": "CI/samples.ci/client/petstore/java/test-manual/jersey2/ApiClientTest.java", "diffHunk": "@@ -1,249 +0,0 @@\n-package org.openapitools.client;\n-\n-import org.openapitools.client.auth.*;\n-\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.*;\n-\n-import org.junit.*;\n-import static org.junit.Assert.*;\n-\n-\n-public class ApiClientTest {\n-    ApiClient apiClient = null;\n-\n-    @Before\n-    public void setup() {\n-        apiClient = new ApiClient();\n-    }\n-\n-    @Test\n-    public void testParseAndFormatDate() {\n-        // default date format\n-        String dateStr = \"2015-11-07T03:49:09.356Z\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T05:49:09.356+02:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T02:49:09.356-01:00\")));\n-\n-        // custom date format: without milli-seconds, custom time zone\n-        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\", Locale.ROOT);\n-        format.setTimeZone(TimeZone.getTimeZone(\"GMT+10\"));\n-        apiClient.setDateFormat(format);\n-        dateStr = \"2015-11-07T13:49:09+10:00\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T00:49:09-03:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T13:49:09+10:00\")));\n-    }\n-\n-    @Test\n-    public void testIsJsonMime() {\n-        assertFalse(apiClient.isJsonMime(null));\n-        assertFalse(apiClient.isJsonMime(\"\"));\n-        assertFalse(apiClient.isJsonMime(\"text/plain\"));\n-        assertFalse(apiClient.isJsonMime(\"application/xml\"));\n-        assertFalse(apiClient.isJsonMime(\"application/jsonp\"));\n-        assertFalse(apiClient.isJsonMime(\"example/json\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+jsonx\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+xjson\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/json\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json; charset=UTF8\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/JSON\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/problem+json\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/PROBLEM+JSON\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json\\t\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+bar+json\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json;x;y\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json\\t;\"));\n-        assertTrue(apiClient.isJsonMime(\"Example/fOO+JSON\"));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderAccept() {\n-        String[] accepts = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"APPLICATION/XML\", \"APPLICATION/JSON\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain,application/xml\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{};\n-        assertNull(apiClient.selectHeaderAccept(accepts));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderContentType() {\n-        String[] contentTypes = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"APPLICATION/JSON\", \"APPLICATION/XML\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-    }\n-\n-    @Test\n-    public void testGetAuthentications() {\n-        Map<String, Authentication> auths = apiClient.getAuthentications();\n-\n-        Authentication auth = auths.get(\"api_key\");\n-        assertNotNull(auth);\n-        assertTrue(auth instanceof ApiKeyAuth);\n-        ApiKeyAuth apiKeyAuth = (ApiKeyAuth) auth;\n-        assertEquals(\"header\", apiKeyAuth.getLocation());\n-        assertEquals(\"api_key\", apiKeyAuth.getParamName());\n-\n-        auth = auths.get(\"petstore_auth\");\n-        assertTrue(auth instanceof OAuth);\n-        assertSame(auth, apiClient.getAuthentication(\"petstore_auth\"));\n-\n-        assertNull(auths.get(\"unknown\"));\n-\n-        try {\n-            auths.put(\"my_auth\", new HttpBasicAuth());\n-            fail(\"the authentications returned should not be modifiable\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-    }\n-\n-    @Test\n-    public void testSetUsernameAndPassword() {\n-        HttpBasicAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof HttpBasicAuth) {\n-                auth = (HttpBasicAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-\n-        apiClient.setUsername(\"my-username\");\n-        apiClient.setPassword(\"my-password\");\n-        assertEquals(\"my-username\", auth.getUsername());\n-        assertEquals(\"my-password\", auth.getPassword());\n-\n-        // reset values\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-    }\n-\n-    @Test\n-    public void testSetApiKeyAndPrefix() {\n-        ApiKeyAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof ApiKeyAuth) {\n-                auth = (ApiKeyAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-\n-        apiClient.setApiKey(\"my-api-key\");\n-        apiClient.setApiKeyPrefix(\"Token\");\n-        assertEquals(\"my-api-key\", auth.getApiKey());\n-        assertEquals(\"Token\", auth.getApiKeyPrefix());\n-\n-        // reset values\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenNameIsInvalid() throws Exception {\n-        List<Pair> pairs_a = apiClient.parameterToPairs(\"csv\", null, new Integer(1));\n-        List<Pair> pairs_b = apiClient.parameterToPairs(\"csv\", \"\", new Integer(1));\n-\n-        assertTrue(pairs_a.isEmpty());\n-        assertTrue(pairs_b.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNull() throws Exception {\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", null);\n-\n-        assertTrue(pairs.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsEmptyStrings() throws Exception {\n-\n-        // single empty string\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", \" \");\n-        assertEquals(1, pairs.size());\n-\n-        // list of empty strings\n-        List<String> strs = new ArrayList<String>();\n-        strs.add(\" \");\n-        strs.add(\" \");\n-        strs.add(\" \");\n-\n-        List<Pair> concatStrings = apiClient.parameterToPairs(\"csv\", \"param-a\", strs);\n-\n-        assertEquals(1, concatStrings.size());\n-        assertFalse(concatStrings.get(0).getValue().isEmpty()); // should contain some delimiters\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNotCollection() throws Exception {\n-        String name = \"param-a\";\n-        Integer value = 1;\n-\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", name, value);\n-\n-        assertEquals(1, pairs.size());\n-        assertEquals(value, Integer.valueOf(pairs.get(0).getValue()));\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsCollection() throws Exception {\n-        Map<String, String> collectionFormatMap = new HashMap<String, String>();\n-        collectionFormatMap.put(\"csv\", \",\");\n-        collectionFormatMap.put(\"tsv\", \"\\t\");\n-        collectionFormatMap.put(\"ssv\", \" \");\n-        collectionFormatMap.put(\"pipes\", \"\\\\|\");\n-        collectionFormatMap.put(\"\", \",\"); // no format, must default to csv\n-        collectionFormatMap.put(\"unknown\", \",\"); // all other formats, must default to csv\n-\n-        String name = \"param-a\";\n-\n-        List<Object> values = new ArrayList<Object>();\n-        values.add(\"value-a\");\n-        values.add(123);\n-        values.add(new Date());\n-\n-        // check for multi separately\n-        List<Pair> multiPairs = apiClient.parameterToPairs(\"multi\", name, values);\n-        assertEquals(values.size(), multiPairs.size());\n-\n-        // all other formats\n-        for (String collectionFormat : collectionFormatMap.keySet()) {\n-            List<Pair> pairs = apiClient.parameterToPairs(collectionFormat, name, values);\n-\n-            assertEquals(1, pairs.size());\n-\n-            String delimiter = collectionFormatMap.get(collectionFormat);\n-            String[] pairValueSplit = pairs.get(0).getValue().split(delimiter);\n-\n-            // must equal input values\n-            assertEquals(values.size(), pairValueSplit.length);\n-        }\n-    }\n-}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzA4Nw=="}, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzMyMTI0OnYy", "diffSide": "LEFT", "path": "CI/samples.ci/client/petstore/java/test-manual/okhttp-gson/JSONTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozNzo0M1rOGgBzdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozNzo0M1rOGgBzdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzE3Mw==", "bodyText": "From this PR, it looks like this test no longer exists, but it does exist at https://github.com/OpenAPITools/openapi-generator/blob/ensures/samples/client/petstore/java/okhttp-gson/src/test/java/org/openapitools/client/JSONTest.java", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436237173", "createdAt": "2020-06-06T04:37:43Z", "author": {"login": "spacether"}, "path": "CI/samples.ci/client/petstore/java/test-manual/okhttp-gson/JSONTest.java", "diffHunk": "@@ -1,202 +0,0 @@\n-package org.openapitools.client;\n-\n-import com.google.gson.reflect.TypeToken;\n-\n-import org.openapitools.client.model.Order;\n-\n-import java.lang.Exception;\n-import java.lang.reflect.Type;\n-import java.nio.charset.StandardCharsets;\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.GregorianCalendar;\n-import java.util.Locale;\n-import java.util.TimeZone;\n-\n-import okio.ByteString;\n-import org.junit.*;\n-import org.threeten.bp.LocalDate;\n-import org.threeten.bp.OffsetDateTime;\n-import org.threeten.bp.ZoneId;\n-import org.threeten.bp.ZoneOffset;\n-import org.threeten.bp.format.DateTimeFormatter;\n-\n-import static org.junit.Assert.*;\n-\n-public class JSONTest {\n-    private ApiClient apiClient = null;\n-    private JSON json = null;\n-    private Order order = null;\n-\n-    @Before\n-    public void setup() {\n-        apiClient = new ApiClient();\n-        json = apiClient.getJSON();\n-        order = new Order();\n-    }\n-\n-    @Test\n-    public void testSqlDateTypeAdapter() {\n-        final String str = \"\\\"2015-11-07\\\"\";\n-        final java.sql.Date date = java.sql.Date.valueOf(\"2015-11-07\");\n-\n-        assertEquals(str, json.serialize(date));\n-        assertEquals(json.deserialize(str, java.sql.Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.356\" + getCurrentTimezoneOffset() + \"\\\"\", java.sql.Date.class).toString(), date.toString());\n-\n-        // custom date format: without day\n-        DateFormat format = new SimpleDateFormat(\"yyyy-MM\", Locale.ROOT);\n-        apiClient.setSqlDateFormat(format);\n-        String dateStr = \"\\\"2015-11\\\"\";\n-        assertEquals(dateStr, json.serialize(json.deserialize(\"\\\"2015-11-07T03:49:09Z\\\"\", java.sql.Date.class)));\n-        assertEquals(dateStr, json.serialize(json.deserialize(\"\\\"2015-11\\\"\", java.sql.Date.class)));\n-    }\n-\n-    @Test\n-    public void testDateTypeAdapter() {\n-        Calendar cal = new GregorianCalendar(2015, 10, 7, 3, 49, 9);\n-        cal.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T05:49:09+02\\\"\", Date.class), cal.getTime());\n-\n-        cal.set(Calendar.MILLISECOND, 300);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.3Z\\\"\", Date.class), cal.getTime());\n-\n-        cal.set(Calendar.MILLISECOND, 356);\n-        Date date = cal.getTime();\n-\n-        final String utcDate = \"\\\"2015-11-07T03:49:09.356Z\\\"\";\n-        assertEquals(json.deserialize(utcDate, Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.356+00:00\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T05:49:09.356+02:00\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T02:49:09.356-01:00\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.356Z\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.356+00\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T02:49:09.356-0100\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.356456789Z\\\"\", Date.class), date);\n-\n-        assertEquals(utcDate, json.serialize(date));\n-\n-        // custom datetime format: without milli-seconds, custom time zone\n-        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\", Locale.ROOT);\n-        format.setTimeZone(TimeZone.getTimeZone(\"GMT+10\"));\n-        apiClient.setDateFormat(format);\n-\n-        String dateStr = \"\\\"2015-11-07T13:49:09+10:00\\\"\";\n-        assertEquals(dateStr, json.serialize(json.deserialize(\"\\\"2015-11-07T03:49:09+00:00\\\"\", Date.class)));\n-        assertEquals(dateStr, json.serialize(json.deserialize(\"\\\"2015-11-07T03:49:09Z\\\"\", Date.class)));\n-        assertEquals(dateStr, json.serialize(json.deserialize(\"\\\"2015-11-07T00:49:09-03:00\\\"\", Date.class)));\n-\n-        try {\n-            // invalid time zone format\n-            json.deserialize(\"\\\"2015-11-07T03:49:09+00\\\"\", Date.class);\n-            fail(\"json parsing should fail\");\n-        } catch (RuntimeException e) {\n-            // OK\n-        }\n-        try {\n-            // unexpected miliseconds\n-            json.deserialize(\"\\\"2015-11-07T03:49:09.000Z\\\"\", Date.class);\n-            fail(\"json parsing should fail\");\n-        } catch (RuntimeException e) {\n-            // OK\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testOffsetDateTimeTypeAdapter() {\n-        final String str = \"\\\"2016-09-09T08:02:03.123-03:00\\\"\";\n-        OffsetDateTime date = OffsetDateTime.of(2016, 9, 9, 8, 2, 3, 123000000, ZoneOffset.of(\"-3\"));\n-\n-        assertEquals(str, json.serialize(date));\n-        //Use toString() instead of isEqual to verify that the offset is preserved\n-        assertEquals(json.deserialize(str, OffsetDateTime.class).toString(), date.toString());\n-    }\n-\n-    @Test\n-    public void testLocalDateTypeAdapter() {\n-        final String str = \"\\\"2016-09-09\\\"\";\n-        final LocalDate date = LocalDate.of(2016, 9, 9);\n-\n-        assertEquals(str, json.serialize(date));\n-        assertEquals(json.deserialize(str, LocalDate.class), date);\n-    }\n-\n-\n-    @Test\n-    public void testDefaultDate() throws Exception {\n-        final DateTimeFormatter datetimeFormat = DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n-        final String dateStr = \"2015-11-07T14:11:05.267Z\";\n-        order.setShipDate(datetimeFormat.parse(dateStr, OffsetDateTime.FROM));\n-\n-        String str = json.serialize(order);\n-        Type type = new TypeToken<Order>() { }.getType();\n-        Order o = json.deserialize(str, type);\n-        assertEquals(dateStr, datetimeFormat.format(o.getShipDate()));\n-    }\n-\n-    @Test\n-    public void testCustomDate() throws Exception {\n-        final DateTimeFormatter datetimeFormat = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.of(\"Etc/GMT+2\"));\n-        final String dateStr = \"2015-11-07T14:11:05-02:00\";\n-        order.setShipDate(datetimeFormat.parse(dateStr, OffsetDateTime.FROM));\n-\n-        String str = json.serialize(order);\n-        Type type = new TypeToken<Order>() { }.getType();\n-        Order o = json.deserialize(str, type);\n-        assertEquals(dateStr, datetimeFormat.format(o.getShipDate()));\n-    }\n-\n-    @Test\n-    public void testByteArrayTypeAdapterSerialization() {\n-        // Arrange\n-        final String expectedBytesAsString = \"Let's pretend this a jpg or something\";\n-        final byte[] expectedBytes = expectedBytesAsString.getBytes(StandardCharsets.UTF_8);\n-\n-        // Act\n-        String serializedBytesWithQuotes = json.serialize(expectedBytes);\n-\n-        // Assert\n-        String serializedBytes = serializedBytesWithQuotes.substring(1, serializedBytesWithQuotes.length() - 1);\n-        if (json.getGson().htmlSafe()) {\n-            serializedBytes = serializedBytes.replaceAll(\"\\\\\\\\u003d\", \"=\");\n-        }\n-        ByteString actualAsByteString = ByteString.decodeBase64(serializedBytes);\n-        byte[] actualBytes = actualAsByteString.toByteArray();\n-        assertEquals(expectedBytesAsString, new String(actualBytes, StandardCharsets.UTF_8));\n-    }\n-\n-    @Test\n-    public void testByteArrayTypeAdapterDeserialization() {\n-        // Arrange\n-        final String expectedBytesAsString = \"Let's pretend this a jpg or something\";\n-        final byte[] expectedBytes = expectedBytesAsString.getBytes(StandardCharsets.UTF_8);\n-        final ByteString expectedByteString = ByteString.of(expectedBytes);\n-        final String serializedBytes = expectedByteString.base64();\n-        final String serializedBytesWithQuotes = \"\\\"\" + serializedBytes + \"\\\"\";\n-        Type type = new TypeToken<byte[]>() { }.getType();\n-\n-        // Act\n-        byte[] actualDeserializedBytes = json.deserialize(serializedBytesWithQuotes, type);\n-\n-        // Assert\n-        assertEquals(expectedBytesAsString, new String(actualDeserializedBytes, StandardCharsets.UTF_8));\n-    }\n-\n-    // Obtained 22JAN2018 from stackoverflow answer by PuguaSoft https://stackoverflow.com/questions/11399491/java-timezone-offset\n-    // Direct link https://stackoverflow.com/a/16680815/3166133\n-    public static String getCurrentTimezoneOffset() {\n-\n-        TimeZone tz = TimeZone.getDefault();\n-        Calendar cal = GregorianCalendar.getInstance(tz, Locale.ROOT);\n-        int offsetInMillis = tz.getOffset(cal.getTimeInMillis());\n-\n-        String offset = String.format(Locale.ROOT,\"%02d:%02d\", Math.abs(offsetInMillis / 3600000), Math.abs((offsetInMillis / 60000) % 60));\n-        offset = (offsetInMillis >= 0 ? \"+\" : \"-\") + offset;\n-\n-        return offset;\n-    }\n-}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzMyMTc0OnYy", "diffSide": "LEFT", "path": "CI/samples.ci/client/petstore/java/test-manual/okhttp-gson/api/PetApiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozOTozOFrOGgBzwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozOTozOFrOGgBzwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzI0OA==", "bodyText": "From this PR, it looks like this test no longer exists, but it does exist at https://github.com/OpenAPITools/openapi-generator/blob/ensures/samples/client/petstore/java/okhttp-gson/src/test/java/org/openapitools/client/api/PetApiTest.java", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436237248", "createdAt": "2020-06-06T04:39:38Z", "author": {"login": "spacether"}, "path": "CI/samples.ci/client/petstore/java/test-manual/okhttp-gson/api/PetApiTest.java", "diffHunk": "@@ -1,564 +0,0 @@\n-/*\n- * OpenAPI Petstore\n- * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \\\" \\\\\n- *\n- * OpenAPI spec version: 1.0.0\n- *\n- *\n- * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n- * https://openapi-generator.tech\n- * Do not edit the class manually.\n- */\n-\n-\n-package org.openapitools.client.api;\n-\n-import org.openapitools.client.ApiException;\n-import org.openapitools.client.model.Pet;\n-import org.openapitools.client.auth.*;\n-import org.openapitools.client.model.*;\n-import org.openapitools.client.*;\n-\n-import java.lang.reflect.Type;\n-import java.util.Arrays;\n-import java.util.ArrayList;\n-import java.util.concurrent.ConcurrentLinkedQueue;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.ThreadLocalRandom;\n-import java.io.BufferedWriter;\n-import java.io.File;\n-import java.io.FileWriter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.junit.*;\n-\n-import static org.junit.Assert.*;\n-\n-/**\n- * API tests for PetApi\n- */\n-public class PetApiTest {\n-\n-    private PetApi api = new PetApi();\n-    private static final Logger LOG = LoggerFactory.getLogger(PetApiTest.class);\n-    // In the circle.yml file, /etc/host is configured with an entry to resolve petstore.swagger.io to 127.0.0.1\n-    private static String basePath = \"http://petstore.swagger.io:80/v2\";\n-\n-    @Before\n-    public void setup() {\n-        // setup authentication\n-        ApiKeyAuth apiKeyAuth = (ApiKeyAuth) api.getApiClient().getAuthentication(\"api_key\");\n-        apiKeyAuth.setApiKey(\"special-key\");\n-        api.getApiClient().setBasePath(basePath);\n-    }\n-\n-    @Test\n-    public void testApiClient() {\n-        // the default api client is used\n-        assertEquals(Configuration.getDefaultApiClient(), api.getApiClient());\n-        assertNotNull(api.getApiClient());\n-        assertEquals(basePath, api.getApiClient().getBasePath());\n-        assertFalse(api.getApiClient().isDebugging());\n-\n-        ApiClient oldClient = api.getApiClient();\n-\n-        ApiClient newClient = new ApiClient();\n-        newClient.setVerifyingSsl(true);\n-        newClient.setBasePath(\"http://example.com\");\n-        newClient.setDebugging(true);\n-\n-        // set api client via constructor\n-        api = new PetApi(newClient);\n-        assertNotNull(api.getApiClient());\n-        assertEquals(\"http://example.com\", api.getApiClient().getBasePath());\n-        assertTrue(api.getApiClient().isDebugging());\n-\n-        // set api client via setter method\n-        api.setApiClient(oldClient);\n-        assertNotNull(api.getApiClient());\n-        assertEquals(basePath, api.getApiClient().getBasePath());\n-        assertFalse(api.getApiClient().isDebugging());\n-    }\n-\n-    @Test\n-    public void testCreateAndGetPet() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-\n-        Pet fetched = api.getPetById(pet.getId());\n-        assertPetMatches(pet, fetched);\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testCreateAndGetPetWithHttpInfo() throws Exception {\n-        Pet pet = createPet();\n-        api.addPetWithHttpInfo(pet);\n-\n-        ApiResponse<Pet> resp = api.getPetByIdWithHttpInfo(pet.getId());\n-        assertEquals(200, resp.getStatusCode());\n-        assertEquals(\"application/json\", resp.getHeaders().get(\"Content-Type\").get(0));\n-        Pet fetched = resp.getData();\n-\n-        assertPetMatches(pet, fetched);\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testCreateAndGetPetAsync() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-        // to store returned Pet or error message/exception\n-        final Map<String, Object> result = new HashMap<String, Object>();\n-\n-        api.getPetByIdAsync(pet.getId(), new ApiCallback<Pet>() {\n-            @Override\n-            public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {\n-                result.put(\"error\", e.getMessage());\n-            }\n-\n-            @Override\n-            public void onSuccess(Pet pet, int statusCode, Map<String, List<String>> responseHeaders) {\n-                result.put(\"pet\", pet);\n-            }\n-\n-            @Override\n-            public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {\n-                //empty\n-            }\n-\n-            @Override\n-            public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {\n-                //empty\n-            }\n-        });\n-\n-        // wait for the asynchronous call to finish (at most 10 seconds)\n-        final int maxTry = 10;\n-        int tryCount = 1;\n-        Pet fetched = null;\n-        do {\n-            if (tryCount > maxTry) fail(\"have not got result of getPetByIdAsync after 10 seconds\");\n-            Thread.sleep(1000);\n-            tryCount += 1;\n-            if (result.get(\"error\") != null) fail((String) result.get(\"error\"));\n-            if (result.get(\"pet\") != null) {\n-                fetched = (Pet) result.get(\"pet\");\n-                break;\n-            }\n-        } while (result.isEmpty());\n-        assertPetMatches(pet, fetched);\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testCreateAndGetPetAsyncInvalidID() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-        // to store returned Pet or error message/exception\n-        final Map<String, Object> result = new HashMap<String, Object>();\n-\n-        // test getting a nonexistent pet\n-        result.clear();\n-        api.getPetByIdAsync(-10000L, new ApiCallback<Pet>() {\n-            @Override\n-            public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {\n-                result.put(\"exception\", e);\n-            }\n-\n-            @Override\n-            public void onSuccess(Pet pet, int statusCode, Map<String, List<String>> responseHeaders) {\n-                result.put(\"pet\", pet);\n-            }\n-\n-            @Override\n-            public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {\n-                //empty\n-            }\n-\n-            @Override\n-            public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {\n-                //empty\n-            }\n-        });\n-\n-        // wait for the asynchronous call to finish (at most 10 seconds)\n-        final int maxTry = 10;\n-        int tryCount = 1;\n-        Pet fetched = null;\n-        ApiException exception = null;\n-\n-        do {\n-            if (tryCount > maxTry) fail(\"have not got result of getPetByIdAsync after 10 seconds\");\n-            Thread.sleep(1000);\n-            tryCount += 1;\n-            if (result.get(\"pet\") != null) fail(\"expected an error\");\n-            if (result.get(\"exception\") != null) {\n-                exception = (ApiException) result.get(\"exception\");\n-                break;\n-            }\n-        } while (result.isEmpty());\n-        assertNotNull(exception);\n-        assertEquals(404, exception.getCode());\n-        assertEquals(\"Not Found\", exception.getMessage());\n-        assertEquals(\"application/json\", exception.getResponseHeaders().get(\"Content-Type\").get(0));\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testCreateAndGetMultiplePetsAsync() throws Exception {\n-        Pet pet1 = createPet();\n-        Pet pet2 = createPet();\n-\n-        final CountDownLatch addLatch = new CountDownLatch(2);\n-        final TestApiCallback<Void> addCallback1 = new TestApiCallback<Void>(addLatch);\n-        final TestApiCallback<Void> addCallback2 = new TestApiCallback<Void>(addLatch);\n-\n-        // Make 2 simultaneous calls\n-        api.addPetAsync(pet1, addCallback1);\n-        api.addPetAsync(pet2, addCallback2);\n-\n-        // wait for both asynchronous calls to finish (at most 10 seconds)\n-        assertTrue(addLatch.await(10, TimeUnit.SECONDS));\n-\n-        assertTrue(addCallback1.isDone());\n-        assertTrue(addCallback2.isDone());\n-\n-        if (!addCallback1.isSuccess()) throw addCallback1.getException();\n-        if (!addCallback2.isSuccess()) throw addCallback2.getException();\n-\n-        assertValidProgress(addCallback1.getUploadProgress());\n-        assertValidProgress(addCallback2.getUploadProgress());\n-\n-        final CountDownLatch getLatch = new CountDownLatch(3);\n-        final TestApiCallback<Pet> getCallback1 = new TestApiCallback<Pet>(getLatch);\n-        final TestApiCallback<Pet> getCallback2 = new TestApiCallback<Pet>(getLatch);\n-        final TestApiCallback<Pet> getCallback3 = new TestApiCallback<Pet>(getLatch);\n-\n-        api.getPetByIdAsync(pet1.getId(), getCallback1);\n-        api.getPetByIdAsync(pet2.getId(), getCallback2);\n-        // Get nonexistent pet\n-        api.getPetByIdAsync(-10000L, getCallback3);\n-\n-        // wait for all asynchronous calls to finish (at most 10 seconds)\n-        assertTrue(getLatch.await(10, TimeUnit.SECONDS));\n-\n-        assertTrue(getCallback1.isDone());\n-        assertTrue(getCallback2.isDone());\n-        assertTrue(getCallback3.isDone());\n-\n-        if (!getCallback1.isSuccess()) throw getCallback1.getException();\n-        if (!getCallback2.isSuccess()) throw getCallback2.getException();\n-\n-        assertPetMatches(pet1, getCallback1.getResult());\n-        assertPetMatches(pet2, getCallback2.getResult());\n-\n-        assertValidProgress(getCallback1.getDownloadProgress());\n-        assertValidProgress(getCallback2.getDownloadProgress());\n-\n-        // Last callback should fail with ApiException\n-        assertFalse(getCallback3.isSuccess());\n-        final ApiException exception = getCallback3.getException();\n-        assertNotNull(exception);\n-        assertEquals(404, exception.getCode());\n-        api.deletePet(pet1.getId(), null);\n-        api.deletePet(pet2.getId(), null);\n-    }\n-\n-\n-    @Test\n-    public void testUpdatePet() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-        pet.setName(\"programmer\");\n-\n-        api.updatePet(pet);\n-\n-        Pet fetched = api.getPetById(pet.getId());\n-        assertPetMatches(pet, fetched);\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testFindPetsByStatus() throws Exception {\n-        assertEquals(basePath, api.getApiClient().getBasePath());\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-        pet.setName(\"programmer\");\n-        pet.setStatus(Pet.StatusEnum.PENDING);\n-        api.updatePet(pet);\n-\n-        List<Pet> pets = api.findPetsByStatus(Arrays.asList(\"pending\"));\n-        assertNotNull(pets);\n-\n-        boolean found = false;\n-        for (Pet fetched : pets) {\n-            if (fetched.getId().equals(pet.getId())) {\n-                found = true;\n-                break;\n-            }\n-        }\n-\n-        assertTrue(found);\n-\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    @Ignore\n-    public void testFindPetsByTags() throws Exception {\n-        Pet pet = createPet();\n-        pet.setName(\"monster\");\n-        pet.setStatus(Pet.StatusEnum.AVAILABLE);\n-\n-        List<Tag> tags = new ArrayList<Tag>();\n-        Tag tag1 = new Tag();\n-        tag1.setName(\"friendly\");\n-        tags.add(tag1);\n-        pet.setTags(tags);\n-\n-        api.updatePet(pet);\n-\n-        Set<Pet> pets = api.findPetsByTags(new HashSet<>(Arrays.asList(\"friendly\")));\n-        assertNotNull(pets);\n-\n-        boolean found = false;\n-        for (Pet fetched : pets) {\n-            if (fetched.getId().equals(pet.getId())) {\n-                found = true;\n-                break;\n-            }\n-        }\n-        assertTrue(found);\n-\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testUpdatePetWithForm() throws Exception {\n-        Pet pet = createPet();\n-        pet.setName(\"frank\");\n-        api.addPet(pet);\n-\n-        Pet fetched = api.getPetById(pet.getId());\n-\n-        api.updatePetWithForm(fetched.getId(), \"furt\", null);\n-        Pet updated = api.getPetById(fetched.getId());\n-\n-        assertEquals(updated.getName(), \"furt\");\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testDeletePet() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-\n-        Pet fetched = api.getPetById(pet.getId());\n-        api.deletePet(pet.getId(), null);\n-\n-        try {\n-            fetched = api.getPetById(fetched.getId());\n-            fail(\"expected an error\");\n-        } catch (ApiException e) {\n-            LOG.info(\"Code: {}. Message: {}\", e.getCode(), e.getMessage());\n-            assertEquals(404, e.getCode());\n-        }\n-    }\n-\n-    @Test\n-    public void testUploadFile() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-\n-        File file = new File(\"hello.txt\");\n-        BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n-        writer.write(\"Hello world!\");\n-        writer.close();\n-\n-        api.uploadFile(pet.getId(), \"a test file\", new File(file.getAbsolutePath()));\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testEqualsAndHashCode() {\n-        Pet pet1 = new Pet();\n-        Pet pet2 = new Pet();\n-        assertTrue(pet1.equals(pet2));\n-        assertTrue(pet2.equals(pet1));\n-        assertTrue(pet1.hashCode() == pet2.hashCode());\n-        assertTrue(pet1.equals(pet1));\n-        assertTrue(pet1.hashCode() == pet1.hashCode());\n-\n-        pet2.setName(\"really-happy\");\n-        pet2.setPhotoUrls(new HashSet<>(Arrays.asList(\"http://foo.bar.com/1\", \"http://foo.bar.com/2\")));\n-        assertFalse(pet1.equals(pet2));\n-        assertFalse(pet2.equals(pet1));\n-        assertFalse(pet1.hashCode() == (pet2.hashCode()));\n-        assertTrue(pet2.equals(pet2));\n-        assertTrue(pet2.hashCode() == pet2.hashCode());\n-\n-        pet1.setName(\"really-happy\");\n-        pet1.setPhotoUrls(new HashSet<>(Arrays.asList(\"http://foo.bar.com/1\", \"http://foo.bar.com/2\")));\n-        assertTrue(pet1.equals(pet2));\n-        assertTrue(pet2.equals(pet1));\n-        assertTrue(pet1.hashCode() == pet2.hashCode());\n-        assertTrue(pet1.equals(pet1));\n-        assertTrue(pet1.hashCode() == pet1.hashCode());\n-    }\n-\n-\n-    private Pet createPet() {\n-        Pet pet = new Pet();\n-        pet.setId(ThreadLocalRandom.current().nextLong(Long.MAX_VALUE));\n-        pet.setName(\"gorilla\");\n-\n-        Category category = new Category();\n-        category.setName(\"really-happy\");\n-\n-        pet.setCategory(category);\n-        pet.setStatus(Pet.StatusEnum.AVAILABLE);\n-        Set<String> photos = new HashSet<>(Arrays.asList(\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"));\n-        pet.setPhotoUrls(photos);\n-\n-        return pet;\n-    }\n-\n-    private String serializeJson(Object o, ApiClient apiClient) {\n-        return apiClient.getJSON().serialize(o);\n-    }\n-\n-    private <T> T deserializeJson(String json, Type type, ApiClient apiClient) {\n-        return (T) apiClient.getJSON().deserialize(json, type);\n-    }\n-\n-    private void assertPetMatches(Pet expected, Pet actual) {\n-        assertNotNull(actual);\n-        assertEquals(expected.getId(), actual.getId());\n-        assertNotNull(actual.getCategory());\n-        assertEquals(expected.getCategory().getName(),\n-                actual.getCategory().getName());\n-    }\n-\n-    /**\n-     * Assert that the given upload/download progress list satisfies the\n-     * following constraints:\n-     * <p>\n-     * - List is not empty\n-     * - Byte count should be nondecreasing\n-     * - The last element, and only the last element, should have done=true\n-     */\n-    private void assertValidProgress(List<Progress> progressList) {\n-        assertFalse(progressList.isEmpty());\n-\n-        Progress prev = null;\n-        int index = 0;\n-        for (Progress progress : progressList) {\n-            if (prev != null) {\n-                if (prev.done || prev.bytes > progress.bytes) {\n-                    fail(\"Progress list out of order at index \" + index\n-                            + \": \" + progressList);\n-                }\n-            }\n-            prev = progress;\n-            index += 1;\n-        }\n-\n-        if (!prev.done) {\n-            fail(\"Last progress item should have done=true: \" + progressList);\n-        }\n-    }\n-\n-    private static class TestApiCallback<T> implements ApiCallback<T> {\n-\n-        private final CountDownLatch latch;\n-        private final ConcurrentLinkedQueue<Progress> uploadProgress =\n-                new ConcurrentLinkedQueue<Progress>();\n-        private final ConcurrentLinkedQueue<Progress> downloadProgress =\n-                new ConcurrentLinkedQueue<Progress>();\n-\n-        private boolean done;\n-        private boolean success;\n-        private ApiException exception;\n-        private T result;\n-\n-        public TestApiCallback(CountDownLatch latch) {\n-            this.latch = latch;\n-            this.done = false;\n-        }\n-\n-        @Override\n-        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {\n-            exception = e;\n-            this.done = true;\n-            this.success = false;\n-            latch.countDown();\n-        }\n-\n-        @Override\n-        public void onSuccess(T result, int statusCode, Map<String, List<String>> responseHeaders) {\n-            this.result = result;\n-            this.done = true;\n-            this.success = true;\n-            latch.countDown();\n-        }\n-\n-        @Override\n-        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {\n-            uploadProgress.add(new Progress(bytesWritten, contentLength, done));\n-        }\n-\n-        @Override\n-        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {\n-            downloadProgress.add(new Progress(bytesRead, contentLength, done));\n-        }\n-\n-        public boolean isDone() {\n-            return done;\n-        }\n-\n-        public boolean isSuccess() {\n-            return success;\n-        }\n-\n-        public ApiException getException() {\n-            return exception;\n-        }\n-\n-        public T getResult() {\n-            return result;\n-        }\n-\n-        public List<Progress> getUploadProgress() {\n-            return new ArrayList<Progress>(uploadProgress);\n-        }\n-\n-        public List<Progress> getDownloadProgress() {\n-            return new ArrayList<Progress>(downloadProgress);\n-        }\n-    }\n-\n-    private static class Progress {\n-        public final long bytes;\n-        public final long contentLength;\n-        public final boolean done;\n-\n-        public Progress(long bytes, long contentLength, boolean done) {\n-            this.bytes = bytes;\n-            this.contentLength = contentLength;\n-            this.done = done;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return \"<Progress \" + bytes + \" \" + contentLength + \" \" + done + \">\";\n-        }\n-    }\n-}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 564}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3401, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}