{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NjQ4Mjg3", "number": 7189, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTowMjozNVrOEbeLcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTowMjozNVrOEbeLcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjQxNDU2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/kotlin-spring/apiInterface.mustache", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTowMjozNVrOHFa5Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yNVQxNTo1ODowMFrOJhVfig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ0NTUxMA==", "bodyText": "Using {{#lambda.titlecase}}{{#lambda.lowercase}} ... {{/lambda.lowercase}}{{/lambda.titlecase}} is fine. Later I may switch it to something else (e.g. x-kotlin-http-method) to make it easier for new users to understand.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7189#discussion_r475445510", "createdAt": "2020-08-24T09:02:35Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/resources/kotlin-spring/apiInterface.mustache", "diffHunk": "@@ -77,13 +71,13 @@ interface {{classname}} {\n         authorizations = [{{#authMethods}}Authorization(value = \"{{name}}\"{{#isOAuth}}, scopes = [{{#scopes}}AuthorizationScope(scope = \"{{scope}}\", description = \"{{description}}\"){{#hasMore}}, {{/hasMore}}{{/scopes}}]{{/isOAuth}}){{#hasMore}}, {{/hasMore}}{{/authMethods}}]{{/hasAuthMethods}})\n     @ApiResponses(\n         value = [{{#responses}}ApiResponse(code = {{{code}}}, message = \"{{{message}}}\"{{#baseType}}, response = {{{baseType}}}::class{{/baseType}}{{#containerType}}, responseContainer = \"{{{containerType}}}\"{{/containerType}}){{#hasMore}},{{/hasMore}}{{/responses}}]){{/swaggerAnnotations}}\n-    @RequestMapping(\n-            value = [\"{{#lambda.escapeDoubleQuote}}{{path}}{{/lambda.escapeDoubleQuote}}\"],{{#singleContentTypes}}{{#hasProduces}}\n-            produces = \"{{{vendorExtensions.x-accepts}}}\",{{/hasProduces}}{{#hasConsumes}}\n-            consumes = \"{{{vendorExtensions.x-contentType}}}\",{{/hasConsumes}}{{/singleContentTypes}}{{^singleContentTypes}}{{#hasProduces}}\n-            produces = [{{#produces}}\"{{{mediaType}}}\"{{^-last}}, {{/-last}}{{/produces}}], {{/hasProduces}}{{#hasConsumes}}\n-            consumes = [{{#consumes}}\"{{{mediaType}}}\"{{^-last}}, {{/-last}}{{/consumes}}],{{/hasConsumes}}{{/singleContentTypes}}\n-            method = [RequestMethod.{{httpMethod}}])\n+    @{{#lambda.titlecase}}{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{/lambda.titlecase}}Mapping(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6bbd51b5078dde410e811f9964bc72259dfe96d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODkzNDkyMg==", "bodyText": "Hello,\nI just encountered a case where this change is actually blocking for me to upgrade from 4.3.1 to 5.x.x.\nI do have an HTTP OPTIONS in my OpenAPI. This change generates an @OptionsMapping, but it does not exist in Spring. The previous version with @RequestMapping and setting the RequestMethod was working for all HTTP methods. I admit, it is more verbose, but at least it covers the various cases.\nThis change is only viable once there are annotations *Mapping for every RequestMethod values in Spring.\nYou can find more information in this Spring issue where it is a bit discussed: spring-projects/spring-framework#18565\nCan this change be reverted?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7189#discussion_r638934922", "createdAt": "2021-05-25T15:58:00Z", "author": {"login": "mwatel42"}, "path": "modules/openapi-generator/src/main/resources/kotlin-spring/apiInterface.mustache", "diffHunk": "@@ -77,13 +71,13 @@ interface {{classname}} {\n         authorizations = [{{#authMethods}}Authorization(value = \"{{name}}\"{{#isOAuth}}, scopes = [{{#scopes}}AuthorizationScope(scope = \"{{scope}}\", description = \"{{description}}\"){{#hasMore}}, {{/hasMore}}{{/scopes}}]{{/isOAuth}}){{#hasMore}}, {{/hasMore}}{{/authMethods}}]{{/hasAuthMethods}})\n     @ApiResponses(\n         value = [{{#responses}}ApiResponse(code = {{{code}}}, message = \"{{{message}}}\"{{#baseType}}, response = {{{baseType}}}::class{{/baseType}}{{#containerType}}, responseContainer = \"{{{containerType}}}\"{{/containerType}}){{#hasMore}},{{/hasMore}}{{/responses}}]){{/swaggerAnnotations}}\n-    @RequestMapping(\n-            value = [\"{{#lambda.escapeDoubleQuote}}{{path}}{{/lambda.escapeDoubleQuote}}\"],{{#singleContentTypes}}{{#hasProduces}}\n-            produces = \"{{{vendorExtensions.x-accepts}}}\",{{/hasProduces}}{{#hasConsumes}}\n-            consumes = \"{{{vendorExtensions.x-contentType}}}\",{{/hasConsumes}}{{/singleContentTypes}}{{^singleContentTypes}}{{#hasProduces}}\n-            produces = [{{#produces}}\"{{{mediaType}}}\"{{^-last}}, {{/-last}}{{/produces}}], {{/hasProduces}}{{#hasConsumes}}\n-            consumes = [{{#consumes}}\"{{{mediaType}}}\"{{^-last}}, {{/-last}}{{/consumes}}],{{/hasConsumes}}{{/singleContentTypes}}\n-            method = [RequestMethod.{{httpMethod}}])\n+    @{{#lambda.titlecase}}{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{/lambda.titlecase}}Mapping(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ0NTUxMA=="}, "originalCommit": {"oid": "d6bbd51b5078dde410e811f9964bc72259dfe96d"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4281, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}