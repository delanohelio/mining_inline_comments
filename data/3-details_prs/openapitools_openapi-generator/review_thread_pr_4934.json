{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5ODQyMjYy", "number": 4934, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDowMzowNFrODWffJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNDo0MjoxOVrODcbAgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTExMTQwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractGoCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDowMzowNFrOFbR_rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNDoxMzo1OFrOFbYFeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MDcwMw==", "bodyText": "Could you please provide a comment here on what this method does and why it does that? I think I understand it in the context of your PR, but if I was just looking at it in the codebase, I'd probably have no idea what's happening here and why.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4934#discussion_r364150703", "createdAt": "2020-01-08T10:03:04Z", "author": {"login": "bkabrda"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractGoCodegen.java", "diffHunk": "@@ -328,6 +329,16 @@ public String getSchemaType(Schema p) {\n             type = openAPIType;\n         return type;\n     }\n+    \n+    @Override\n+    public String toInstantiationType(Schema property) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a51b4689f4565c7d41b41a3f125012ae5865d6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI1MDQ4OA==", "bodyText": "sure, will do.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4934#discussion_r364250488", "createdAt": "2020-01-08T14:13:58Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractGoCodegen.java", "diffHunk": "@@ -328,6 +329,16 @@ public String getSchemaType(Schema p) {\n             type = openAPIType;\n         return type;\n     }\n+    \n+    @Override\n+    public String toInstantiationType(Schema property) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MDcwMw=="}, "originalCommit": {"oid": "23a51b4689f4565c7d41b41a3f125012ae5865d6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTExMzk1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/go-experimental/api.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDowMzo1M1rOFbSBJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNDozODoyM1rOFbY0Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MTA3OA==", "bodyText": "Why is this change necessary? Is it to make sure that the scope of variables defined in this block is limited?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4934#discussion_r364151078", "createdAt": "2020-01-08T10:03:53Z", "author": {"login": "bkabrda"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/api.mustache", "diffHunk": "@@ -134,14 +134,16 @@ func (a *{{{classname}}}Service) {{{nickname}}}(ctx _context.Context{{#hasParams\n \t{{#queryParams}}\n \t{{#required}}\n \t{{#isCollectionFormatMulti}}\n-\tt:={{paramName}}\n-\tif reflect.TypeOf(t).Kind() == reflect.Slice {\n-\t\ts := reflect.ValueOf(t)\n-\t\tfor i := 0; i < s.Len(); i++ {\n-\t\t\tlocalVarQueryParams.Add(\"{{baseName}}\", parameterToString(s.Index(i), \"{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}\"))\n+\t{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a51b4689f4565c7d41b41a3f125012ae5865d6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI2MjQ0Mw==", "bodyText": "This is totally independent of the embedded go struct enhancement, maybe I should have raised a separate PR, but it takes time to manage multiple PRs.\nWithout this change, there can be compilation errors and static analysis issues. This is because the block (which is now in curly braces) is repeated multiple times depending on how many query parameters there are in the OAS.\nIt boils down to the fact that this line will be generated multiple times:\nt:={{paramName}}\n\nHence the compiler will fail with the same variable being redefined multiple times.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4934#discussion_r364262443", "createdAt": "2020-01-08T14:38:23Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/api.mustache", "diffHunk": "@@ -134,14 +134,16 @@ func (a *{{{classname}}}Service) {{{nickname}}}(ctx _context.Context{{#hasParams\n \t{{#queryParams}}\n \t{{#required}}\n \t{{#isCollectionFormatMulti}}\n-\tt:={{paramName}}\n-\tif reflect.TypeOf(t).Kind() == reflect.Slice {\n-\t\ts := reflect.ValueOf(t)\n-\t\tfor i := 0; i < s.Len(); i++ {\n-\t\t\tlocalVarQueryParams.Add(\"{{baseName}}\", parameterToString(s.Index(i), \"{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}\"))\n+\t{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MTA3OA=="}, "originalCommit": {"oid": "23a51b4689f4565c7d41b41a3f125012ae5865d6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTI5MjE5OnYy", "diffSide": "RIGHT", "path": "samples/client/petstore/go-experimental/go-petstore/model_dog.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNDo0MjoxOVrOFkd7Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNDo0MjoxOVrOFkd7Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc4MzM3NQ==", "bodyText": "This is very cool. I'm not a pro in Go by any means, but I've just learned about field promotion in anonymous nested structs. ;)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4934#discussion_r373783375", "createdAt": "2020-02-01T14:42:19Z", "author": {"login": "jimschubert"}, "path": "samples/client/petstore/go-experimental/go-petstore/model_dog.go", "diffHunk": "@@ -16,59 +16,10 @@ import (\n \n // Dog struct for Dog\n type Dog struct {\n-\tClassName string `json:\"className\"`\n-\tColor *string `json:\"color,omitempty\"`\n+\tAnimal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16f563c93eaab84ae755170ad37e065ae4b9d077"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3994, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}