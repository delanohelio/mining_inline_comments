{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNDgxMTY0", "number": 6789, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNTo1N1rOEJMGQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODowMToyOFrOEXhCLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcwODUxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNTo1N1rOGpmxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowMDoyNlrOGrk28Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3OTk1OQ==", "bodyText": "please add some docs to describe what this does, with an example", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r446279959", "createdAt": "2020-06-26T16:15:57Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,65 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "234d2bd1c337bc19d893b7f15b10692474f57448"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NTg0MQ==", "bodyText": "I added the doc to the new method toModelImportMap", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r448345841", "createdAt": "2020-07-01T13:00:26Z", "author": {"login": "FrankEssenberger"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,65 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI3OTk1OQ=="}, "originalCommit": {"oid": "234d2bd1c337bc19d893b7f15b10692474f57448"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcwOTIwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNjowOVrOGpmxjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowNDoxOVrOGrk_xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDA3Ng==", "bodyText": "docs", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r446280076", "createdAt": "2020-06-26T16:16:09Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,65 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           return names.stream()\n+                   .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                   .map(noSpace->super.toModelImport(noSpace))\n+                   .collect(Collectors.joining(\"|\"));\n+        }\n+        return super.toModelImport(name);\n+    }\n+\n+    protected String toModelImportForUnionTypes(String name, Function<String,String> toModelImportSingle){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "234d2bd1c337bc19d893b7f15b10692474f57448"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0ODEwMA==", "bodyText": "removed the method.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r448348100", "createdAt": "2020-07-01T13:04:19Z", "author": {"login": "FrankEssenberger"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,65 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           return names.stream()\n+                   .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                   .map(noSpace->super.toModelImport(noSpace))\n+                   .collect(Collectors.joining(\"|\"));\n+        }\n+        return super.toModelImport(name);\n+    }\n+\n+    protected String toModelImportForUnionTypes(String name, Function<String,String> toModelImportSingle){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDA3Ng=="}, "originalCommit": {"oid": "234d2bd1c337bc19d893b7f15b10692474f57448"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDcxMjE1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoxNzowNFrOGpmzYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1Nzo1NFrOGqPrcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDU0Ng==", "bodyText": "@amakhrov @wing328  do you think such a complicated logic is necessary, or could this be solved elsewhere?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r446280546", "createdAt": "2020-06-26T16:17:04Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,65 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           return names.stream()\n+                   .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                   .map(noSpace->super.toModelImport(noSpace))\n+                   .collect(Collectors.joining(\"|\"));\n+        }\n+        return super.toModelImport(name);\n+    }\n+\n+    protected String toModelImportForUnionTypes(String name, Function<String,String> toModelImportSingle){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+            return names.stream()\n+                    .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                    .map(noSpace->toModelImportSingle.apply(noSpace))\n+                    .collect(Collectors.joining(\"|\"));\n+        }\n+        return toModelImportSingle.apply(name);\n+    }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(final Map<String, Object> objs, final List<Object> allModels) {\n+        Map<String, Object> objsUnderProcess=  super.postProcessOperationsWithModels(objs, allModels);\n+\n+        if(Boolean.valueOf(objsUnderProcess.get(\"hasImport\").toString())){\n+            objsUnderProcess.put(\"imports\", splitUniontypeImports((List<Map<String,String>>) objsUnderProcess.get(\"imports\")));\n+        }\n+        return objsUnderProcess;\n+    }\n+\n+    protected List<Object> splitUniontypeImports(List<Map<String,String>> imports){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "234d2bd1c337bc19d893b7f15b10692474f57448"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5OTYyNA==", "bodyText": "It looks quite similar to the existing logic in TypeScriptAngularClientCodegen (see postProcessAllModels and parseImports)\nMaybe we should lift the logic from AngularClient to AbstractTypescriptClient instead of pretty much repeating it?\nThe root problem, as I see it, is that toModelImport takes a string as an argument rather than a model and returns a string instead of a list. It makes it very limited in terms of handling composite models. But changing that would require a change in Generator and CodegenConfig interfaces. And generally means more work, of course.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r446299624", "createdAt": "2020-06-26T16:53:49Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,65 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           return names.stream()\n+                   .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                   .map(noSpace->super.toModelImport(noSpace))\n+                   .collect(Collectors.joining(\"|\"));\n+        }\n+        return super.toModelImport(name);\n+    }\n+\n+    protected String toModelImportForUnionTypes(String name, Function<String,String> toModelImportSingle){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+            return names.stream()\n+                    .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                    .map(noSpace->toModelImportSingle.apply(noSpace))\n+                    .collect(Collectors.joining(\"|\"));\n+        }\n+        return toModelImportSingle.apply(name);\n+    }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(final Map<String, Object> objs, final List<Object> allModels) {\n+        Map<String, Object> objsUnderProcess=  super.postProcessOperationsWithModels(objs, allModels);\n+\n+        if(Boolean.valueOf(objsUnderProcess.get(\"hasImport\").toString())){\n+            objsUnderProcess.put(\"imports\", splitUniontypeImports((List<Map<String,String>>) objsUnderProcess.get(\"imports\")));\n+        }\n+        return objsUnderProcess;\n+    }\n+\n+    protected List<Object> splitUniontypeImports(List<Map<String,String>> imports){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDU0Ng=="}, "originalCommit": {"oid": "234d2bd1c337bc19d893b7f15b10692474f57448"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MDI1OA==", "bodyText": "I totally agree on your analysis regarding the signature of the toModelImport(). I did not want to change that. I have also missed the implementation  already present in the AngularClient. I will try to move everything up to the parent class.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r446950258", "createdAt": "2020-06-29T12:57:54Z", "author": {"login": "FrankEssenberger"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,65 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           return names.stream()\n+                   .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                   .map(noSpace->super.toModelImport(noSpace))\n+                   .collect(Collectors.joining(\"|\"));\n+        }\n+        return super.toModelImport(name);\n+    }\n+\n+    protected String toModelImportForUnionTypes(String name, Function<String,String> toModelImportSingle){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+            return names.stream()\n+                    .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                    .map(noSpace->toModelImportSingle.apply(noSpace))\n+                    .collect(Collectors.joining(\"|\"));\n+        }\n+        return toModelImportSingle.apply(name);\n+    }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(final Map<String, Object> objs, final List<Object> allModels) {\n+        Map<String, Object> objsUnderProcess=  super.postProcessOperationsWithModels(objs, allModels);\n+\n+        if(Boolean.valueOf(objsUnderProcess.get(\"hasImport\").toString())){\n+            objsUnderProcess.put(\"imports\", splitUniontypeImports((List<Map<String,String>>) objsUnderProcess.get(\"imports\")));\n+        }\n+        return objsUnderProcess;\n+    }\n+\n+    protected List<Object> splitUniontypeImports(List<Map<String,String>> imports){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MDU0Ng=="}, "originalCommit": {"oid": "234d2bd1c337bc19d893b7f15b10692474f57448"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDMxNzkxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMTozMTozNVrOGsdleQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNzowOToxOFrOGsmDCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI3NTI1Nw==", "bodyText": "Is google.common.colllect preferred over java.util.* in OAI generator?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r449275257", "createdAt": "2020-07-02T21:31:35Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "diffHunk": "@@ -17,6 +17,8 @@\n \n package org.openapitools.codegen;\n \n+import com.google.common.collect.Lists;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f12d9a80cb2f3d8d2b74c32d6ad899e48803480"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQxMzg5Nw==", "bodyText": "Just an old habit from other projects. I used the basic java methods to create new Lists and Maps.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r449413897", "createdAt": "2020-07-03T07:09:18Z", "author": {"login": "FrankEssenberger"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "diffHunk": "@@ -17,6 +17,8 @@\n \n package org.openapitools.codegen;\n \n+import com.google.common.collect.Lists;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI3NTI1Nw=="}, "originalCommit": {"oid": "5f12d9a80cb2f3d8d2b74c32d6ad899e48803480"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjc1NTI4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxMjo0NVrOG7Pg_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzozNzoyMlrOG7Us6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MzM3NA==", "bodyText": "These two methods (toModelImportMap and toModelImport) look very similar (split by |, remove spaces, process each part). Should one method just delegate to the other? E.g. toModelImport could call toModelImportMap and then collect the resulting map back into a string.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r464773374", "createdAt": "2020-08-04T03:12:45Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,38 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){\n+        if(name.contains(\"|\")){\n+           List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           LOGGER.warn(\"The import is a union type. Consider using the toModelImportMap method.\");\n+           return names.stream()\n+                   .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                   .map(noSpace->super.toModelImport(noSpace))\n+                   .collect(Collectors.joining(\"|\"));\n+        }\n+        return super.toModelImport(name);\n+    }\n+\n+    /**\n+     * Maps the fully qualified model import to the initial given name. In case of union types the map will have multiple entries.\n+     * For example for \"classA | classB\" the map will two entries have [\"model.classA\",\"classA\"] and [\"model.classB\",\"classB\"].\n+     *\n+     * @param name the name of the \"Model\"\n+     * @return Map between the fully qualified model import and the initial given name.\n+     */\n+    @Override\n+    public Map<String,String> toModelImportMap( String name){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.replace(\" \",\"\").split(\"\\\\|\"));\n+            Map<String,String> result = Maps.newHashMap();\n+            names.forEach(s->result.put(toModelImport(s),s));\n+            return  result;\n+        }\n+        return Collections.singletonMap(toModelImport(name),name);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc0b16a6a888ce1aee8ee170fa1f4eccb287dbe"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1ODM0NQ==", "bodyText": "sure good point. I introduced small helper methods with a more descriptive name and used the map method inside the single entry one.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r464858345", "createdAt": "2020-08-04T07:37:22Z", "author": {"login": "FrankEssenberger"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractTypeScriptClientCodegen.java", "diffHunk": "@@ -221,6 +224,38 @@ public void processOpts() {\n         }\n     }\n \n+    @Override\n+    public String toModelImport( String name){\n+        if(name.contains(\"|\")){\n+           List<String> names = Arrays.asList(name.split(\"\\\\|\"));\n+           LOGGER.warn(\"The import is a union type. Consider using the toModelImportMap method.\");\n+           return names.stream()\n+                   .map(withSpace->withSpace.replaceAll(\" \",\"\"))\n+                   .map(noSpace->super.toModelImport(noSpace))\n+                   .collect(Collectors.joining(\"|\"));\n+        }\n+        return super.toModelImport(name);\n+    }\n+\n+    /**\n+     * Maps the fully qualified model import to the initial given name. In case of union types the map will have multiple entries.\n+     * For example for \"classA | classB\" the map will two entries have [\"model.classA\",\"classA\"] and [\"model.classB\",\"classB\"].\n+     *\n+     * @param name the name of the \"Model\"\n+     * @return Map between the fully qualified model import and the initial given name.\n+     */\n+    @Override\n+    public Map<String,String> toModelImportMap( String name){\n+        if(name.contains(\"|\")){\n+            List<String> names = Arrays.asList(name.replace(\" \",\"\").split(\"\\\\|\"));\n+            Map<String,String> result = Maps.newHashMap();\n+            names.forEach(s->result.put(toModelImport(s),s));\n+            return  result;\n+        }\n+        return Collections.singletonMap(toModelImport(name),name);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MzM3NA=="}, "originalCommit": {"oid": "7cc0b16a6a888ce1aee8ee170fa1f4eccb287dbe"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDkzOTMzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODowMToyOFrOG_WOnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyNzo1OVrOHAQzww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3NzY2Mw==", "bodyText": "Can you please add docstrings to explain what these new (private) functions do (e.g. avoid duplicates)?\nWe want to document all methods in the default codegen/generator class to make code easier to understand for new contributors. (I do not expect you to document all methods missing the docstring. The community can help with separate PRs)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r469077663", "createdAt": "2020-08-12T08:01:28Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "diffHunk": "@@ -1115,6 +1099,40 @@ private static String generateParameterId(Parameter parameter) {\n         return operations;\n     }\n \n+    private Map<String,String> getAllImportsMapppings(Set<String> allImports){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f376de14126f4fd13948741fda3db4b4cefc60f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzNzQ0Mw==", "bodyText": "I added some doc and used a Set to better represent that the entries are unique for the other method.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6789#discussion_r470037443", "createdAt": "2020-08-13T15:27:59Z", "author": {"login": "FrankEssenberger"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "diffHunk": "@@ -1115,6 +1099,40 @@ private static String generateParameterId(Parameter parameter) {\n         return operations;\n     }\n \n+    private Map<String,String> getAllImportsMapppings(Set<String> allImports){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3NzY2Mw=="}, "originalCommit": {"oid": "5f376de14126f4fd13948741fda3db4b4cefc60f"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4331, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}