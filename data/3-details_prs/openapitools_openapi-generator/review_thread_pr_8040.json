{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NzExMzI4", "number": 8040, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowNToyOVrOE-DyXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo1Mzo0NFrOFAmUCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTA5MjEyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RubyClientCodegen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowNToyOVrOH7Ehmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowNToyOVrOH7Ehmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMjE3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return \"\\\"\" + codegenProperty.example + \"\\\"\";\n          \n          \n            \n                                return \"'\" + codegenProperty.example + \"'\";", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040#discussion_r531702170", "createdAt": "2020-11-27T17:05:29Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RubyClientCodegen.java", "diffHunk": "@@ -667,4 +569,178 @@ protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Sc\n             codegenModel.additionalPropertiesType = getSchemaType(additionalProperties);\n         }\n     }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {\n+        objs = super.postProcessOperationsWithModels(objs, allModels);\n+        Map<String, Object> operations = (Map<String, Object>) objs.get(\"operations\");\n+        HashMap<String, CodegenModel> modelMaps = new HashMap<String, CodegenModel>();\n+        HashMap<String, Integer> processedModelMaps = new HashMap<String, Integer>();\n+\n+        for (Object o : allModels) {\n+            HashMap<String, Object> h = (HashMap<String, Object>) o;\n+            CodegenModel m = (CodegenModel) h.get(\"model\");\n+            modelMaps.put(m.classname, m);\n+        }\n+\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operations.get(\"operation\");\n+        for (CodegenOperation op : operationList) {\n+            for (CodegenParameter p : op.requiredParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+            for (CodegenParameter p : op.optionalParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+        }\n+\n+        return objs;\n+    }\n+\n+    private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenParameter.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenParameter.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenParameter.isPrimitiveType) { // primitive type\n+            if (codegenParameter.isString) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"\" + codegenParameter.paramName + \"_example\\\"\";\n+            } else if (codegenParameter.isBoolean) { // boolean\n+                if (Boolean.parseBoolean(codegenParameter.example)) {\n+                    return \"true\";\n+                }\n+                return \"false\";\n+            } else if (codegenParameter.isUri) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"https://example.com\\\"\";\n+            } else if (codegenParameter.isDateTime) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"DateTime.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"DateTime.now\";\n+            } else if (codegenParameter.isDate) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"Date.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"Date.today\";\n+            } else if (codegenParameter.isFile) {\n+                return \"File.new(\\\"/path/to/some/file\\\")\";\n+            } else if (codegenParameter.isInteger) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"37\";\n+            } else { // number\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"3.56\";\n+            }\n+        } else { // model\n+            // look up the model\n+            if (modelMaps.containsKey(codegenParameter.dataType)) {\n+                return constructExampleCode(modelMaps.get(codegenParameter.dataType), modelMaps, processedModelMap);\n+            } else {\n+                //LOGGER.error(\"Error in constructing examples. Failed to look up the model \" + codegenParameter.dataType);\n+                return \"TODO\";\n+            }\n+        }\n+    }\n+\n+    private String constructExampleCode(CodegenProperty codegenProperty, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenProperty.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenProperty.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenProperty.isPrimitiveType) { // primitive type\n+            if (codegenProperty.isString) {\n+                if (!StringUtils.isEmpty(codegenProperty.example) && !\"null\".equals(codegenProperty.example)) {\n+                    return \"\\\"\" + codegenProperty.example + \"\\\"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f7feec5d2cf25bfaf24880f4b9c7c1639f3b5db"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTA5MjQ3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RubyClientCodegen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowNTozOFrOH7Eh0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowNTozOFrOH7Eh0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMjIyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return \"\\\"\" + codegenProperty.name + \"_example\\\"\";\n          \n          \n            \n                                return \"'\" + codegenProperty.name + \"_example'\";", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040#discussion_r531702225", "createdAt": "2020-11-27T17:05:38Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RubyClientCodegen.java", "diffHunk": "@@ -667,4 +569,178 @@ protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Sc\n             codegenModel.additionalPropertiesType = getSchemaType(additionalProperties);\n         }\n     }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {\n+        objs = super.postProcessOperationsWithModels(objs, allModels);\n+        Map<String, Object> operations = (Map<String, Object>) objs.get(\"operations\");\n+        HashMap<String, CodegenModel> modelMaps = new HashMap<String, CodegenModel>();\n+        HashMap<String, Integer> processedModelMaps = new HashMap<String, Integer>();\n+\n+        for (Object o : allModels) {\n+            HashMap<String, Object> h = (HashMap<String, Object>) o;\n+            CodegenModel m = (CodegenModel) h.get(\"model\");\n+            modelMaps.put(m.classname, m);\n+        }\n+\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operations.get(\"operation\");\n+        for (CodegenOperation op : operationList) {\n+            for (CodegenParameter p : op.requiredParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+            for (CodegenParameter p : op.optionalParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+        }\n+\n+        return objs;\n+    }\n+\n+    private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenParameter.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenParameter.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenParameter.isPrimitiveType) { // primitive type\n+            if (codegenParameter.isString) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"\" + codegenParameter.paramName + \"_example\\\"\";\n+            } else if (codegenParameter.isBoolean) { // boolean\n+                if (Boolean.parseBoolean(codegenParameter.example)) {\n+                    return \"true\";\n+                }\n+                return \"false\";\n+            } else if (codegenParameter.isUri) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"https://example.com\\\"\";\n+            } else if (codegenParameter.isDateTime) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"DateTime.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"DateTime.now\";\n+            } else if (codegenParameter.isDate) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"Date.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"Date.today\";\n+            } else if (codegenParameter.isFile) {\n+                return \"File.new(\\\"/path/to/some/file\\\")\";\n+            } else if (codegenParameter.isInteger) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"37\";\n+            } else { // number\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"3.56\";\n+            }\n+        } else { // model\n+            // look up the model\n+            if (modelMaps.containsKey(codegenParameter.dataType)) {\n+                return constructExampleCode(modelMaps.get(codegenParameter.dataType), modelMaps, processedModelMap);\n+            } else {\n+                //LOGGER.error(\"Error in constructing examples. Failed to look up the model \" + codegenParameter.dataType);\n+                return \"TODO\";\n+            }\n+        }\n+    }\n+\n+    private String constructExampleCode(CodegenProperty codegenProperty, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenProperty.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenProperty.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenProperty.isPrimitiveType) { // primitive type\n+            if (codegenProperty.isString) {\n+                if (!StringUtils.isEmpty(codegenProperty.example) && !\"null\".equals(codegenProperty.example)) {\n+                    return \"\\\"\" + codegenProperty.example + \"\\\"\";\n+                } else {\n+                    return \"\\\"\" + codegenProperty.name + \"_example\\\"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f7feec5d2cf25bfaf24880f4b9c7c1639f3b5db"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTcyMDQyOnYy", "diffSide": "RIGHT", "path": "samples/client/petstore/ruby-faraday/docs/FakeApi.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo1Mzo0NFrOH--gVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo1Mzo0NFrOH--gVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5Nzg0NA==", "bodyText": "@zippolyte Shall we use Time instead?\nRef: #7656", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040#discussion_r535797844", "createdAt": "2020-12-04T02:53:44Z", "author": {"login": "wing328"}, "path": "samples/client/petstore/ruby-faraday/docs/FakeApi.md", "diffHunk": "@@ -457,19 +457,19 @@ Petstore.configure do |config|\n end\n \n api_instance = Petstore::FakeApi.new\n-number = 3.4 # Float | None\n-double = 3.4 # Float | None\n+number = 8.14 # Float | None\n+double = 1.2 # Float | None\n pattern_without_delimiter = 'pattern_without_delimiter_example' # String | None\n-byte = 'byte_example' # String | None\n+byte = 'BYTE_ARRAY_DATA_HERE' # String | None\n opts = {\n   integer: 56, # Integer | None\n   int32: 56, # Integer | None\n-  int64: 56, # Integer | None\n+  int64: 789, # Integer | None\n   float: 3.4, # Float | None\n   string: 'string_example', # String | None\n-  binary: File.new('/path/to/file'), # File | None\n+  binary: File.new('/path/to/some/file'), # File | None\n   date: Date.parse('2013-10-20'), # Date | None\n-  date_time: Time.parse('2013-10-20T19:20:30+01:00'), # Time | None\n+  date_time: DateTime.parse('2013-10-20T19:20:30+01:00'), # Time | None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e9f3554b64d4227591c660ca0bb04441f43306b"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3964, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}