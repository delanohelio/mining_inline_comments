{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MjA1OTAz", "number": 6060, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowNTo0MFrOD2_mng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1MzoxM1rOD4KoDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTkxNzc0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowNTo0MFrOGNAd0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzowOTozMFrOGOoeaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MjMwNQ==", "bodyText": "Don't know what this suppress does, but hope it's for good reasons.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6060#discussion_r416292305", "createdAt": "2020-04-28T03:05:40Z", "author": {"login": "ybelenko"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "diffHunk": "@@ -29,10 +29,10 @@\n \n import static org.openapitools.codegen.utils.StringUtils.underscore;\n \n+@SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60291043b3f16bfc3ab1ba8f757a401ec2e98b51"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NjM5NQ==", "bodyText": "In Java, generic types are \"erased\" at runtime, so if you cast like a Map<String, Object> to Map<String, CodegenModel>, some IDEs like IntelliJ will warn that the cast is unchecked. You should also see these warnings at compilation time.  You'll see these unchecked suppressions throughout our code because much of our ADT is Object typed and we extract into the concrete types. It's safe throughout because we manage the types privately, although it could fail if someone were to set a different type in an overridden method (but that would break everything anyway).\nI'm hoping to improve our ADT and template binding models for 5.0 to be typed better.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6060#discussion_r417996395", "createdAt": "2020-04-30T13:09:30Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "diffHunk": "@@ -29,10 +29,10 @@\n \n import static org.openapitools.codegen.utils.StringUtils.underscore;\n \n+@SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MjMwNQ=="}, "originalCommit": {"oid": "60291043b3f16bfc3ab1ba8f757a401ec2e98b51"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTkyODE2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoxMDowNFrOGNAjXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMToxMzo0MVrOGSVmqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MzcyNQ==", "bodyText": "CODEGEN_VENDOR_EXTENSION_KEY vs VENDOR_EXTENSION_MYSQL_SCHEMA?\nWhat difference does it make? \ud83d\ude04\nForget it, already done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6060#discussion_r416293725", "createdAt": "2020-04-28T03:10:04Z", "author": {"login": "ybelenko"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "diffHunk": "@@ -271,12 +271,11 @@ public void processOpts() {\n                 modelDescription = (modelDescription == null || modelDescription.isEmpty()) ? commentExtra : modelDescription + \". \" + commentExtra;\n             }\n \n-            if (modelVendorExtensions.containsKey(CODEGEN_VENDOR_EXTENSION_KEY)) {\n+            if (modelVendorExtensions.containsKey(VENDOR_EXTENSION_MYSQL_SCHEMA)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60291043b3f16bfc3ab1ba8f757a401ec2e98b51"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4MTUxMg==", "bodyText": "As a static field, this property has to make sense to consumers not only within this project but for those extending the artifact.\nMysqlSchemaCodegen.CODEGEN_VENDOR_EXTENSION_KEY doesn't explain what this key is. Although it's technically accurate, you're able to have any number of vendor extensions. The new name removes the redundant CODEGEN_ prefix and changes KEY which provides no details about the public field to MYSQL_SCHEMA which represents what the vendor extension is (x-mysql-schema).", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6060#discussion_r421881512", "createdAt": "2020-05-08T01:13:41Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "diffHunk": "@@ -271,12 +271,11 @@ public void processOpts() {\n                 modelDescription = (modelDescription == null || modelDescription.isEmpty()) ? commentExtra : modelDescription + \". \" + commentExtra;\n             }\n \n-            if (modelVendorExtensions.containsKey(CODEGEN_VENDOR_EXTENSION_KEY)) {\n+            if (modelVendorExtensions.containsKey(VENDOR_EXTENSION_MYSQL_SCHEMA)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MzcyNQ=="}, "originalCommit": {"oid": "60291043b3f16bfc3ab1ba8f757a401ec2e98b51"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTk0Mzc5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoxNjoyNlrOGNAraw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo1ODo1NFrOGOoEpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NTc4Nw==", "bodyText": "Didn't know that Java scalars shouldn't start with capital. Maybe you need to describe it somewhere in contributor guide. When created my first PR I used AbstractPhpCodegen as reference and it filled up with String declarations. Or maybe we need some Java linter to avoid this style changes in future.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6060#discussion_r416295787", "createdAt": "2020-04-28T03:16:26Z", "author": {"login": "ybelenko"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "diffHunk": "@@ -335,15 +334,15 @@ public void processIntegerTypeProperty(CodegenModel model, CodegenProperty prope\n         String description = property.getDescription();\n         String minimum = property.getMinimum();\n         String maximum = property.getMaximum();\n-        Boolean exclusiveMinimum = property.getExclusiveMinimum();\n-        Boolean exclusiveMaximum = property.getIExclusiveMaximum();\n+        boolean exclusiveMinimum = property.getExclusiveMinimum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60291043b3f16bfc3ab1ba8f757a401ec2e98b51"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4OTc5OQ==", "bodyText": "This is called boxing in Java. It'll be caught by Sonar, we just have low stats on Sonar at the moment and don't make it known that we track there.\nIn the past couple of months, we've also introduced some quality checks in build which would warn on boxing. I think reviewers just need to be diligent on quality review.\nThat's not to say this is wrong. A Boolean in Java is an object that wraps a primitive boolean. Its usually frowned upon in performance critical paths, while in others it makes the most sense because of the true/false/null triple states.  It should flag as a warning in most IDEs for a line like this one as unnecessary boxing, because the method you're calling returns boolean and there's no possibility of that third null state which would represent \"unset\".", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6060#discussion_r417989799", "createdAt": "2020-04-30T12:58:54Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "diffHunk": "@@ -335,15 +334,15 @@ public void processIntegerTypeProperty(CodegenModel model, CodegenProperty prope\n         String description = property.getDescription();\n         String minimum = property.getMinimum();\n         String maximum = property.getMaximum();\n-        Boolean exclusiveMinimum = property.getExclusiveMinimum();\n-        Boolean exclusiveMaximum = property.getIExclusiveMaximum();\n+        boolean exclusiveMinimum = property.getExclusiveMinimum();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5NTc4Nw=="}, "originalCommit": {"oid": "60291043b3f16bfc3ab1ba8f757a401ec2e98b51"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTk2MzMyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoyNDo1NFrOGNA1tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoyNDo1NFrOGNA1tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5ODQyMg==", "bodyText": "I used long declaration for readability, but it's ok. Don't like shortcuts in conditions because it's hard to read long if statements like if (!isPropValid() && !countErrors() && !$someVar){}.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6060#discussion_r416298422", "createdAt": "2020-04-28T03:24:54Z", "author": {"login": "ybelenko"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "diffHunk": "@@ -464,8 +461,8 @@ public void processDecimalTypeProperty(CodegenModel model, CodegenProperty prope\n         } else {\n             Float min = (minimum != null) ? Float.valueOf(minimum) : null;\n             Float max = (maximum != null) ? Float.valueOf(maximum) : null;\n-            if (exclusiveMinimum == true && min != null) min += 1;\n-            if (exclusiveMaximum == true && max != null) max -= 1;\n+            if (exclusiveMinimum && min != null) min += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60291043b3f16bfc3ab1ba8f757a401ec2e98b51"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTk2NjY4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoyNjowM1rOGNA3Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzoyNjowM1rOGNA3Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5ODg0Mw==", "bodyText": "Same done for readability here, but it's ok.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6060#discussion_r416298843", "createdAt": "2020-04-28T03:26:03Z", "author": {"login": "ybelenko"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/MysqlSchemaCodegen.java", "diffHunk": "@@ -1139,7 +1131,7 @@ public String escapeUnsafeCharacters(String input) {\n      */\n     public void setDefaultDatabaseName(String databaseName) {\n         String escapedName = toDatabaseName(databaseName);\n-        if (escapedName.equals(databaseName) == false) {\n+        if (!escapedName.equals(databaseName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60291043b3f16bfc3ab1ba8f757a401ec2e98b51"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjIwOTQxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1MzoxM1rOGO2Jpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1MzoxM1rOGO2Jpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMDQ1NA==", "bodyText": "This needs to be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    op.vendorExtensions.put(\"x-has-path-params\", !op.pathParams.isEmpty());\n          \n          \n            \n                    op.vendorExtensions.put(\"x-has-path-params\", hasPathParams);\n          \n      \n    \n    \n  \n\nBefore we were adding hasPathParams twice, once with !op.pathParams.isEmpty(), and then again with hasPathParams. This was probably caused by a mistaken merge.\nThis is causing the difference in samples", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6060#discussion_r418220454", "createdAt": "2020-04-30T18:53:13Z", "author": {"login": "richardwhiuk"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java", "diffHunk": "@@ -734,28 +731,20 @@ public CodegenOperation fromOperation(String path, String httpMethod, Operation\n         }\n \n         String underscoredOperationId = underscore(op.operationId);\n-        op.vendorExtensions.put(\"operation_id\", underscoredOperationId); // TODO: 5.0 Remove\n         op.vendorExtensions.put(\"x-operation-id\", underscoredOperationId);\n-        op.vendorExtensions.put(\"uppercase_operation_id\", underscoredOperationId.toUpperCase(Locale.ROOT)); // TODO: 5.0 Remove\n         op.vendorExtensions.put(\"x-uppercase-operation-id\", underscoredOperationId.toUpperCase(Locale.ROOT));\n         String vendorExtensionPath = op.path.replace(\"{\", \":\").replace(\"}\", \"\");\n-        op.vendorExtensions.put(\"path\", vendorExtensionPath);  // TODO: 5.0 Remove\n         op.vendorExtensions.put(\"x-path\",vendorExtensionPath);\n-        op.vendorExtensions.put(\"PATH_ID\", pathId); // TODO: 5.0 Remove\n         op.vendorExtensions.put(\"x-path-id\", pathId);\n-        op.vendorExtensions.put(\"hasPathParams\", !op.pathParams.isEmpty()); // TODO: 5.0 Remove\n         op.vendorExtensions.put(\"x-has-path-params\", !op.pathParams.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60291043b3f16bfc3ab1ba8f757a401ec2e98b51"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3595, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}