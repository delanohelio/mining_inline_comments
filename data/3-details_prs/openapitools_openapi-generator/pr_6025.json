{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3ODA4NjEx", "number": 6025, "title": "Implement Asp.Net Core 3.0/3.1 generator (#6009)", "bodyText": "Addresses #6009, mainly new templates but some minor changes to the aspnetcore generator:\n\nFixed some issues with the 2.x templates which meant the resulting code did not compile.\nImprove reporting, i.e. code shows correct .Net Core version\nIntroduced new templates for 3.x using idiomatic Asp.Net Core 3.\nChange default startup to show the swagger definition rather than a non-existent page.\nImproved the Docker file so that we can integrate into Visual Studio docker generation; not running under Docker at the moment\n\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.  @jimschubert, @frankyjuang, @shibayan", "createdAt": "2020-04-23T09:58:15Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025", "merged": true, "mergeCommit": {"oid": "e4cbaa721b28ba5edbe93eaf1b9776367162edee"}, "closed": true, "closedAt": "2020-05-03T08:32:27Z", "author": {"login": "phatcher"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaOYBEgH2gAyNDA3ODA4NjExOjFhODllMzVkMTQxZjQzYzM0MTFiZTM0ZWU5NTY3M2JjOTMzMTNmZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdBeuWgFqTQwNDE1MTg4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1a89e35d141f43c3411be34ee95673bc93313ffb", "author": {"user": {"login": "phatcher", "name": "Paul Hatcher"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/1a89e35d141f43c3411be34ee95673bc93313ffb", "committedDate": "2020-04-22T20:33:01Z", "message": "Minor changes to 2.1 templates to make them work or improve documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71f4ab95b0c6685334aedd852a309b83d4ee8e94", "author": {"user": {"login": "phatcher", "name": "Paul Hatcher"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/71f4ab95b0c6685334aedd852a309b83d4ee8e94", "committedDate": "2020-04-22T20:33:01Z", "message": "Support for ASP.NET Core 3.0 and 3.1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c0e6ac21de68194ae8e926f76d22a0fdcb49561", "author": {"user": {"login": "phatcher", "name": "Paul Hatcher"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/1c0e6ac21de68194ae8e926f76d22a0fdcb49561", "committedDate": "2020-04-23T09:31:28Z", "message": "Update aspnetcore test scripts and results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11ad8b2e3c3aa0425645005f26dfc5744ccdd75f", "author": {"user": {"login": "phatcher", "name": "Paul Hatcher"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/11ad8b2e3c3aa0425645005f26dfc5744ccdd75f", "committedDate": "2020-04-23T13:25:53Z", "message": "Update generated documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff4da94f22b9f74b6aa89c86ac4a5438719c4fd", "author": {"user": {"login": "wing328", "name": "William Cheng"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/fff4da94f22b9f74b6aa89c86ac4a5438719c4fd", "committedDate": "2020-04-27T15:39:14Z", "message": "update doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODU0MDYz", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#pullrequestreview-401854063", "createdAt": "2020-04-28T13:49:27Z", "commit": {"oid": "fff4da94f22b9f74b6aa89c86ac4a5438719c4fd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzo0OToyN1rOGNU-9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzo1NDozNlrOGNVOyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyODQ2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public Startup(IHostEnvironment env)\n          \n          \n            \n                    {\n          \n          \n            \n                        var builder = new ConfigurationBuilder()\n          \n          \n            \n                            .SetBasePath(env.ContentRootPath)\n          \n          \n            \n                            .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\n          \n          \n            \n                            .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n          \n          \n            \n                            .AddEnvironmentVariables();\n          \n          \n            \n            \n          \n          \n            \n                        Configuration = builder.Build();\n          \n          \n            \n                    }\n          \n          \n            \n                    public Startup(IConfiguration configuration)\n          \n          \n            \n                    {\n          \n          \n            \n                        Configuration = configuration;\n          \n          \n            \n                    }", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r416628468", "createdAt": "2020-04-28T13:49:27Z", "author": {"login": "shibayan"}, "path": "modules/openapi-generator/src/main/resources/aspnetcore/3.0/Startup.mustache", "diffHunk": "@@ -0,0 +1,170 @@\n+{{>partial_header}}\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using Microsoft.AspNetCore.Authorization;\n+using Microsoft.AspNetCore.Builder;\n+using Microsoft.AspNetCore.Hosting;\n+using Microsoft.Extensions.Configuration;\n+using Microsoft.Extensions.DependencyInjection;\n+using Microsoft.Extensions.Hosting;\n+{{#useSwashbuckle}}\n+using Microsoft.OpenApi.Models;\n+{{/useSwashbuckle}}\n+{{#useNewtonsoft}}\n+using Newtonsoft.Json.Converters;\n+using Newtonsoft.Json.Serialization;\n+{{/useNewtonsoft}}\n+using {{packageName}}.Authentication;\n+{{#useSwashbuckle}}\n+using {{packageName}}.Filters;\n+{{/useSwashbuckle}}\n+using {{packageName}}.OpenApi;\n+\n+namespace {{packageName}}\n+{\n+    /// <summary>\n+    /// Startup\n+    /// </summary>\n+    public class Startup\n+    {\n+        /// <summary>\n+        /// Constructor\n+        /// </summary>\n+        /// <param name=\"env\"></param>\n+        public Startup(IHostEnvironment env)\n+        {\n+            var builder = new ConfigurationBuilder()\n+                .SetBasePath(env.ContentRootPath)\n+                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\n+                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n+                .AddEnvironmentVariables();\n+\n+            Configuration = builder.Build();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff4da94f22b9f74b6aa89c86ac4a5438719c4fd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMDg4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        app\n          \n          \n            \n                            // TODO: Renable if you need MVC views as well as just the API\n          \n          \n            \n                            //.UseMvc()\n          \n          \n            \n                            .UseDefaultFiles()\n          \n          \n            \n                            .UseStaticFiles(){{#useSwashbuckle}}\n          \n          \n            \n                            .UseSwagger(c =>\n          \n          \n            \n                            {\n          \n          \n            \n                                c.RouteTemplate = \"swagger/{documentName}/openapi.json\";\n          \n          \n            \n                            })\n          \n          \n            \n                            .UseSwaggerUI(c =>\n          \n          \n            \n                            {\n          \n          \n            \n                                //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)\n          \n          \n            \n                                c.SwaggerEndpoint(\"/swagger/{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}/openapi.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}}\");\n          \n          \n            \n            \n          \n          \n            \n                                //TODO: Or alternatively use the original Swagger contract that's included in the static files\n          \n          \n            \n                                // c.SwaggerEndpoint(\"/openapi-original.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}} Original\");\n          \n          \n            \n                            }){{/useSwashbuckle}};\n          \n          \n            \n                        app.UseDefaultFiles();\n          \n          \n            \n                        app.UseStaticFiles();\n          \n          \n            \n            {{#useSwashbuckle}}\n          \n          \n            \n                        app.UseSwagger(c =>\n          \n          \n            \n                            {\n          \n          \n            \n                                c.RouteTemplate = \"swagger/{documentName}/openapi.json\";\n          \n          \n            \n                            })\n          \n          \n            \n                            .UseSwaggerUI(c =>\n          \n          \n            \n                            {\n          \n          \n            \n                                //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)\n          \n          \n            \n                                c.SwaggerEndpoint(\"/swagger/{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}/openapi.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}}\");\n          \n          \n            \n            \n          \n          \n            \n                                //TODO: Or alternatively use the original Swagger contract that's included in the static files\n          \n          \n            \n                                // c.SwaggerEndpoint(\"/openapi-original.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}} Original\");\n          \n          \n            \n                            }){{/useSwashbuckle}};", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r416630880", "createdAt": "2020-04-28T13:52:29Z", "author": {"login": "shibayan"}, "path": "modules/openapi-generator/src/main/resources/aspnetcore/3.0/Startup.mustache", "diffHunk": "@@ -0,0 +1,170 @@\n+{{>partial_header}}\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using Microsoft.AspNetCore.Authorization;\n+using Microsoft.AspNetCore.Builder;\n+using Microsoft.AspNetCore.Hosting;\n+using Microsoft.Extensions.Configuration;\n+using Microsoft.Extensions.DependencyInjection;\n+using Microsoft.Extensions.Hosting;\n+{{#useSwashbuckle}}\n+using Microsoft.OpenApi.Models;\n+{{/useSwashbuckle}}\n+{{#useNewtonsoft}}\n+using Newtonsoft.Json.Converters;\n+using Newtonsoft.Json.Serialization;\n+{{/useNewtonsoft}}\n+using {{packageName}}.Authentication;\n+{{#useSwashbuckle}}\n+using {{packageName}}.Filters;\n+{{/useSwashbuckle}}\n+using {{packageName}}.OpenApi;\n+\n+namespace {{packageName}}\n+{\n+    /// <summary>\n+    /// Startup\n+    /// </summary>\n+    public class Startup\n+    {\n+        /// <summary>\n+        /// Constructor\n+        /// </summary>\n+        /// <param name=\"env\"></param>\n+        public Startup(IHostEnvironment env)\n+        {\n+            var builder = new ConfigurationBuilder()\n+                .SetBasePath(env.ContentRootPath)\n+                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\n+                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n+                .AddEnvironmentVariables();\n+\n+            Configuration = builder.Build();\n+        }\n+\n+        /// <summary>\n+        /// The application configuration.\n+        /// </summary>\n+        public IConfiguration Configuration { get; }\n+\n+        /// <summary>\n+        /// This method gets called by the runtime. Use this method to add services to the container.\n+        /// </summary>\n+        /// <param name=\"services\"></param>\n+        public void ConfigureServices(IServiceCollection services)\n+        {\n+{{#authMethods}}\n+{{#isApiKey}}\n+            services.AddTransient<IAuthorizationHandler, ApiKeyRequirementHandler>();\n+            services.AddAuthorization(authConfig =>\n+            {\n+                authConfig.AddPolicy(\"{{name}}\", policyBuilder =>\n+                {\n+                    policyBuilder\n+                        .AddRequirements(new ApiKeyRequirement(new[] { \"my-secret-key\" },\"{{name}}\"));\n+                });\n+            });\n+{{/isApiKey}}\n+{{/authMethods}}\n+\n+            // Add framework services.\n+            services\n+                // Don't need the full MVC stack for an API, see https://andrewlock.net/comparing-startup-between-the-asp-net-core-3-templates/\n+                .AddControllers()\n+                {{#compatibilityVersion}}\n+                // Don't need this for 3.x - see https://docs.microsoft.com/en-us/aspnet/core/mvc/compatibility-version?view=aspnetcore-3.1\n+                //.SetCompatibilityVersion(CompatibilityVersion.{{compatibilityVersion}})\n+                {{/compatibilityVersion}}\n+                .{{#useNewtonsoft}}AddNewtonsoftJson{{/useNewtonsoft}}{{^useNewtonsoft}}AddJsonOptions{{/useNewtonsoft}}(opts =>\n+                {\n+                    opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();\n+                    opts.SerializerSettings.Converters.Add(new StringEnumConverter\n+                    {\n+                        {{#useNewtonsoft}}NamingStrategy = new CamelCaseNamingStrategy(){{/useNewtonsoft}}{{^useNewtonsoft}}CamelCaseText = true{{/useNewtonsoft}}\n+                    });\n+                });\n+{{#useSwashbuckle}}\n+\n+            services\n+                .AddSwaggerGen(c =>\n+                {\n+                    c.SwaggerDoc(\"{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}\", new OpenApiInfo\n+                    {\n+                        Title = \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}}\",\n+                        Description = \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}} (ASP.NET Core {{aspnetCoreVersion}})\",\n+                        TermsOfService = new Uri(\"{{#termsOfService}}{{{termsOfService}}}{{/termsOfService}}{{^termsOfService}}https://github.com/openapitools/openapi-generator{{/termsOfService}}\"),\n+                        Contact = new OpenApiContact\n+                        {\n+                            Name = \"{{#infoName}}{{{infoName}}}{{/infoName}}{{^infoName}}OpenAPI-Generator Contributors{{/infoName}}\",\n+                            Url = new Uri(\"{{#infoUrl}}{{{infoUrl}}}{{/infoUrl}}{{^infoUrl}}https://github.com/openapitools/openapi-generator{{/infoUrl}}\"),\n+                            Email = \"{{#infoEmail}}{{{infoEmail}}}{{/infoEmail}}\"\n+                        },\n+                        License = new OpenApiLicense\n+                        {\n+                            Name = \"{{licenseName}}\",\n+                            Url = new Uri(\"{{licenseUrl}}\")\n+                        },\n+                        Version = \"{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}\",\n+                    });\n+                    c.CustomSchemaIds(type => type.FriendlyId(true));\n+                    c.DescribeAllEnumsAsStrings();\n+                    c.IncludeXmlComments($\"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{Assembly.GetEntryAssembly().GetName().Name}.xml\");\n+                    {{#basePathWithoutHost}}\n+                    // Sets the basePath property in the Swagger document generated\n+                    c.DocumentFilter<BasePathFilter>(\"{{{basePathWithoutHost}}}\");\n+                    {{/basePathWithoutHost}}\n+\n+                    // Include DataAnnotation attributes on Controller Action parameters as Swagger validation rules (e.g required, pattern, ..)\n+                    // Use [ValidateModelState] on Actions to actually validate it in C# as well!\n+                    c.OperationFilter<GeneratePathParamsValidationFilter>();\n+                });\n+{{#useNewtonsoft}}\n+                services\n+                    .AddSwaggerGenNewtonsoftSupport();\n+{{/useNewtonsoft}}\n+{{/useSwashbuckle}}\n+        }\n+\n+        /// <summary>\n+        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n+        /// </summary>\n+        /// <param name=\"app\"></param>\n+        /// <param name=\"env\"></param>\n+        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n+        {\n+            if (env.IsDevelopment())\n+            {\n+                app.UseDeveloperExceptionPage();\n+            }\n+            else\n+            {\n+                app.UseHsts();\n+            }\n+\n+            app.UseHttpsRedirection();\n+            app\n+                // TODO: Renable if you need MVC views as well as just the API\n+                //.UseMvc()\n+                .UseDefaultFiles()\n+                .UseStaticFiles(){{#useSwashbuckle}}\n+                .UseSwagger(c =>\n+                {\n+                    c.RouteTemplate = \"swagger/{documentName}/openapi.json\";\n+                })\n+                .UseSwaggerUI(c =>\n+                {\n+                    //TODO: Either use the SwaggerGen generated Swagger contract (generated from C# classes)\n+                    c.SwaggerEndpoint(\"/swagger/{{#version}}{{{version}}}{{/version}}{{^version}}v1{{/version}}/openapi.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}}\");\n+\n+                    //TODO: Or alternatively use the original Swagger contract that's included in the static files\n+                    // c.SwaggerEndpoint(\"/openapi-original.json\", \"{{#appName}}{{{appName}}}{{/appName}}{{^appName}}{{packageName}}{{/appName}} Original\");\n+                }){{/useSwashbuckle}};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff4da94f22b9f74b6aa89c86ac4a5438719c4fd"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMjUyMA==", "bodyText": "Please delete this file.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r416632520", "createdAt": "2020-04-28T13:54:36Z", "author": {"login": "shibayan"}, "path": "modules/openapi-generator/src/main/resources/aspnetcore/3.0/wwwroot/web.config", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff4da94f22b9f74b6aa89c86ac4a5438719c4fd"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98cd254412a8b4b1881aea451317dc19cadd4e42", "author": {"user": {"login": "phatcher", "name": "Paul Hatcher"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/98cd254412a8b4b1881aea451317dc19cadd4e42", "committedDate": "2020-04-28T19:06:48Z", "message": "Update modules/openapi-generator/src/main/resources/aspnetcore/3.0/Startup.mustache\n\nCo-Authored-By: Tatsuro Shibamura <me@shibayan.jp>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14aa03928ec72e70106427d9b689ab1c6f302a1d", "author": {"user": {"login": "phatcher", "name": "Paul Hatcher"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/14aa03928ec72e70106427d9b689ab1c6f302a1d", "committedDate": "2020-04-28T19:06:57Z", "message": "Update modules/openapi-generator/src/main/resources/aspnetcore/3.0/Startup.mustache\n\nCo-Authored-By: Tatsuro Shibamura <me@shibayan.jp>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTUxODg3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#pullrequestreview-404151887", "createdAt": "2020-05-01T13:13:21Z", "commit": {"oid": "14aa03928ec72e70106427d9b689ab1c6f302a1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoxMzoyMVrOGPJWPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoxMzoyMVrOGPJWPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzNDk3NA==", "bodyText": "@phatcher thanks for the PR. I noticed these -first, -last tags are removed. Would it still work if the openapi spec contains multiple API key definitions?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6025#discussion_r418534974", "createdAt": "2020-05-01T13:13:21Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/resources/aspnetcore/2.1/Startup.mustache", "diffHunk": "@@ -44,17 +44,13 @@ namespace {{packageName}}\n         {\n {{#authMethods}}\n {{#isApiKey}}\n-{{#-first}}\n             services.AddTransient<IAuthorizationHandler, ApiKeyRequirementHandler>();\n             services.AddAuthorization(authConfig =>\n             {\n-{{/-first}}            \n                 authConfig.AddPolicy(\"{{name}}\",\n                     policyBuilder => policyBuilder\n                         .AddRequirements(new ApiKeyRequirement(new[] { \"my-secret-key\" },\"{{name}}\")));\n-{{#-last}}\n             });\n-{{/-last}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14aa03928ec72e70106427d9b689ab1c6f302a1d"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2469, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}