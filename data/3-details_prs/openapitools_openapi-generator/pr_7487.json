{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMzg3OTAz", "number": 7487, "title": "[java][groovy] Fix mangled src paths in some outputs on Windows", "bodyText": "Fixes #7434\nWhen generating on Windows, some outputs may look like:\n main.java.srcDirs = ['src/main\\java']\n\nThat's wrong and this fixes the issue. Common strings like src/main/java shouldn't be treated like a path; if it's used to write files then it's the responsibility of the template manager, if it's used in Gradle outputs then it's Gradle's responsibility to normalize the path for the given OS.\ncc @OpenAPITools/generator-core-team\ncc java technical committee\n@bbdouglas @sreeshas @jfiala @lukoyanov @cbornet @jeff9finger @karismann @Zomzog @lwlee2608 @bkabrda\n\nPR checklist\n\n Read the contribution guidelines.\n Pull Request title clearly describes the work in the pull request and Pull Request description provides details about how to validate the work. Missing information here may result in delayed response from the community.\n If contributing template-only or documentation-only changes which will change sample output, build the project beforehand.\n Run the shell script ./bin/generate-samples.shto update all Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit as it would merge with master. These must match the expectations made by your contribution. You may regenerate an individual generator by passing the relevant config(s) as an argument to the script, for example ./bin/generate-samples.sh bin/configs/java*. For Windows users, please run the script in Git BASH.\n File the PR against the correct branch: master\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.", "createdAt": "2020-09-23T02:18:19Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7487", "merged": true, "mergeCommit": {"oid": "1716ee315429d6f747de34c0659c5818cb73bbef"}, "closed": true, "closedAt": "2020-09-23T04:03:38Z", "author": {"login": "jimschubert"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLi3w4gH2gAyNDkxMzg3OTAzOjQ3NTY5MTk5MTg1ZTU4NmQyNTNjYWI2ZjRjNGMyYjAwZjI3MzNlOGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLjCbgAFqTQ5Mzk4MzQyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "47569199185e586d253cab6f4c4c2b00f2733e8b", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/47569199185e586d253cab6f4c4c2b00f2733e8b", "committedDate": "2020-09-23T02:08:05Z", "message": "[java][groovy] Fix mangled src paths in outputs on Windows"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTgzNDIx", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7487#pullrequestreview-493983421", "createdAt": "2020-09-23T02:19:44Z", "commit": {"oid": "47569199185e586d253cab6f4c4c2b00f2733e8b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjoxOTo0NFrOHWT7bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjoxOTo0NFrOHWT7bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE1NzIzMA==", "bodyText": "All above changes are minor cleanup. The assertions weren't in (actual, expected) format, which could lead to confusion on build failures.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7487#discussion_r493157230", "createdAt": "2020-09-23T02:19:44Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/java/AbstractJavaCodegenTest.java", "diffHunk": "@@ -42,27 +42,27 @@\n \n     @Test\n     public void toEnumVarNameShouldNotShortenUnderScore() throws Exception {\n-        Assert.assertEquals(\"UNDERSCORE\", fakeJavaCodegen.toEnumVarName(\"_\", \"String\"));\n-        Assert.assertEquals(\"__\", fakeJavaCodegen.toEnumVarName(\"__\", \"String\"));\n-        Assert.assertEquals(\"__\", fakeJavaCodegen.toEnumVarName(\"_,.\", \"String\"));\n+        Assert.assertEquals(fakeJavaCodegen.toEnumVarName(\"_\", \"String\"), \"UNDERSCORE\");\n+        Assert.assertEquals(fakeJavaCodegen.toEnumVarName(\"__\", \"String\"), \"__\");\n+        Assert.assertEquals(fakeJavaCodegen.toEnumVarName(\"_,.\", \"String\"), \"__\");\n     }\n \n     @Test\n     public void toVarNameShouldAvoidOverloadingGetClassMethod() throws Exception {\n-        Assert.assertEquals(\"propertyClass\", fakeJavaCodegen.toVarName(\"class\"));\n-        Assert.assertEquals(\"propertyClass\", fakeJavaCodegen.toVarName(\"_class\"));\n-        Assert.assertEquals(\"propertyClass\", fakeJavaCodegen.toVarName(\"__class\"));\n+        Assert.assertEquals(fakeJavaCodegen.toVarName(\"class\"), \"propertyClass\");\n+        Assert.assertEquals(fakeJavaCodegen.toVarName(\"_class\"), \"propertyClass\");\n+        Assert.assertEquals(fakeJavaCodegen.toVarName(\"__class\"), \"propertyClass\");\n     }\n \n     @Test\n     public void toModelNameShouldUseProvidedMapping() throws Exception {\n         fakeJavaCodegen.importMapping().put(\"json_myclass\", \"com.test.MyClass\");\n-        Assert.assertEquals(\"com.test.MyClass\", fakeJavaCodegen.toModelName(\"json_myclass\"));\n+        Assert.assertEquals(fakeJavaCodegen.toModelName(\"json_myclass\"), \"com.test.MyClass\");\n     }\n \n     @Test\n     public void toModelNameUsesPascalCase() throws Exception {\n-        Assert.assertEquals(\"JsonAnotherclass\", fakeJavaCodegen.toModelName(\"json_anotherclass\"));\n+        Assert.assertEquals(fakeJavaCodegen.toModelName(\"json_anotherclass\"), \"JsonAnotherclass\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47569199185e586d253cab6f4c4c2b00f2733e8b"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3152, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}