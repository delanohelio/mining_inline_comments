{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDQ3OTgz", "number": 6275, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo1MzoxMVrOD736RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowODozNlrOD75NhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTA4NjEyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDo1MzoxMVrOGUd3NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozODoxOFrOGUyBTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExMzk3Mw==", "bodyText": "@spacether , I think this test is needed to handle the scenario when 1) the input value is None, AND 2) the oneOf/anyOf schema has a child schema which is the 'null' type. Is there a better way to handle this scenario?\nI'm not sure if there is a more succinct way to test for the null schema, and potentially the 'nullable: true' attribute could be set along with oneOf/anyOf.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6275#discussion_r424113973", "createdAt": "2020-05-13T00:53:11Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -872,6 +872,65 @@ def attempt_convert_item(input_value, valid_classes, path_to_item,\n     return input_value\n \n \n+def is_type_nullable(input_type):\n+    \"\"\"\n+    Returns true if None is an allowed value for the specified input_type.\n+\n+    A type is nullable if at least one of the following conditions is true:\n+    1. The OAS 'nullable' attribute has been specified,\n+    1. The type is the 'null' type,\n+    1. The type is a anyOf/oneOf composed schema, and a child schema is\n+       the 'null' type.\n+    Args:\n+        input_type (type): the class of the input_value that we are\n+            checking\n+    Returns:\n+        bool\n+    \"\"\"\n+    if input_type is none_type:\n+        return True\n+    # TODO: how do we handle the 'nullable: true' scenario?\n+    if issubclass(input_type, ModelComposed):\n+        # If oneOf/anyOf, check if the 'null' type is one of the allowed types.            \n+        for t in input_type._composed_schemas.get('oneOf', ()):\n+            if t is none_type:\n+                return True\n+        for t in input_type._composed_schemas.get('anyOf', ()):\n+            if t is none_type:\n+                return True\n+    return False\n+\n+\n+def is_valid_type(input_class_simple, valid_classes):\n+    \"\"\"\n+    Args:\n+        input_class_simple (class): the class of the input_value that we are\n+            checking\n+        valid_classes (tuple): the valid classes that the current item\n+            should be\n+    Returns:\n+        bool\n+    \"\"\"\n+    valid_type = input_class_simple in valid_classes\n+    if not valid_type and (\n+            issubclass(input_class_simple, OpenApiModel) or\n+            input_class_simple is none_type):\n+        for valid_class in valid_classes:\n+            if not valid_class.discriminator:\n+                continue\n+            if input_class_simple is none_type and is_type_nullable(valid_class):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb4460025a30706ce3d436d69d619695f3ae91f4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NzQ3Ng==", "bodyText": "In my opinion this is the right way to test for this use case.\nWe can have a schema with:\noneOf:\n\nnull\ninteger\nstring\n\nIf we have this case with no discriminator, then we would never return True, because we continued on line 920\nHow about moving the none check to go before the discriminator continue block?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6275#discussion_r424147476", "createdAt": "2020-05-13T03:06:21Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -872,6 +872,65 @@ def attempt_convert_item(input_value, valid_classes, path_to_item,\n     return input_value\n \n \n+def is_type_nullable(input_type):\n+    \"\"\"\n+    Returns true if None is an allowed value for the specified input_type.\n+\n+    A type is nullable if at least one of the following conditions is true:\n+    1. The OAS 'nullable' attribute has been specified,\n+    1. The type is the 'null' type,\n+    1. The type is a anyOf/oneOf composed schema, and a child schema is\n+       the 'null' type.\n+    Args:\n+        input_type (type): the class of the input_value that we are\n+            checking\n+    Returns:\n+        bool\n+    \"\"\"\n+    if input_type is none_type:\n+        return True\n+    # TODO: how do we handle the 'nullable: true' scenario?\n+    if issubclass(input_type, ModelComposed):\n+        # If oneOf/anyOf, check if the 'null' type is one of the allowed types.            \n+        for t in input_type._composed_schemas.get('oneOf', ()):\n+            if t is none_type:\n+                return True\n+        for t in input_type._composed_schemas.get('anyOf', ()):\n+            if t is none_type:\n+                return True\n+    return False\n+\n+\n+def is_valid_type(input_class_simple, valid_classes):\n+    \"\"\"\n+    Args:\n+        input_class_simple (class): the class of the input_value that we are\n+            checking\n+        valid_classes (tuple): the valid classes that the current item\n+            should be\n+    Returns:\n+        bool\n+    \"\"\"\n+    valid_type = input_class_simple in valid_classes\n+    if not valid_type and (\n+            issubclass(input_class_simple, OpenApiModel) or\n+            input_class_simple is none_type):\n+        for valid_class in valid_classes:\n+            if not valid_class.discriminator:\n+                continue\n+            if input_class_simple is none_type and is_type_nullable(valid_class):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExMzk3Mw=="}, "originalCommit": {"oid": "bb4460025a30706ce3d436d69d619695f3ae91f4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NDIzNw==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6275#discussion_r424444237", "createdAt": "2020-05-13T13:38:18Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -872,6 +872,65 @@ def attempt_convert_item(input_value, valid_classes, path_to_item,\n     return input_value\n \n \n+def is_type_nullable(input_type):\n+    \"\"\"\n+    Returns true if None is an allowed value for the specified input_type.\n+\n+    A type is nullable if at least one of the following conditions is true:\n+    1. The OAS 'nullable' attribute has been specified,\n+    1. The type is the 'null' type,\n+    1. The type is a anyOf/oneOf composed schema, and a child schema is\n+       the 'null' type.\n+    Args:\n+        input_type (type): the class of the input_value that we are\n+            checking\n+    Returns:\n+        bool\n+    \"\"\"\n+    if input_type is none_type:\n+        return True\n+    # TODO: how do we handle the 'nullable: true' scenario?\n+    if issubclass(input_type, ModelComposed):\n+        # If oneOf/anyOf, check if the 'null' type is one of the allowed types.            \n+        for t in input_type._composed_schemas.get('oneOf', ()):\n+            if t is none_type:\n+                return True\n+        for t in input_type._composed_schemas.get('anyOf', ()):\n+            if t is none_type:\n+                return True\n+    return False\n+\n+\n+def is_valid_type(input_class_simple, valid_classes):\n+    \"\"\"\n+    Args:\n+        input_class_simple (class): the class of the input_value that we are\n+            checking\n+        valid_classes (tuple): the valid classes that the current item\n+            should be\n+    Returns:\n+        bool\n+    \"\"\"\n+    valid_type = input_class_simple in valid_classes\n+    if not valid_type and (\n+            issubclass(input_class_simple, OpenApiModel) or\n+            input_class_simple is none_type):\n+        for valid_class in valid_classes:\n+            if not valid_class.discriminator:\n+                continue\n+            if input_class_simple is none_type and is_type_nullable(valid_class):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExMzk3Mw=="}, "originalCommit": {"oid": "bb4460025a30706ce3d436d69d619695f3ae91f4"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI5OTI0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowODozNlrOGUf8DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozODowNVrOGUyAxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0Nzk4MQ==", "bodyText": "t could also be a ModelComposed subclass.\nHow about also recursively calling is_type_nullable on t here?\n\nthis also applies in the below anyOf block", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6275#discussion_r424147981", "createdAt": "2020-05-13T03:08:36Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -872,6 +872,65 @@ def attempt_convert_item(input_value, valid_classes, path_to_item,\n     return input_value\n \n \n+def is_type_nullable(input_type):\n+    \"\"\"\n+    Returns true if None is an allowed value for the specified input_type.\n+\n+    A type is nullable if at least one of the following conditions is true:\n+    1. The OAS 'nullable' attribute has been specified,\n+    1. The type is the 'null' type,\n+    1. The type is a anyOf/oneOf composed schema, and a child schema is\n+       the 'null' type.\n+    Args:\n+        input_type (type): the class of the input_value that we are\n+            checking\n+    Returns:\n+        bool\n+    \"\"\"\n+    if input_type is none_type:\n+        return True\n+    # TODO: how do we handle the 'nullable: true' scenario?\n+    if issubclass(input_type, ModelComposed):\n+        # If oneOf/anyOf, check if the 'null' type is one of the allowed types.            \n+        for t in input_type._composed_schemas.get('oneOf', ()):\n+            if t is none_type:\n+                return True", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb4460025a30706ce3d436d69d619695f3ae91f4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NDEwMA==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6275#discussion_r424444100", "createdAt": "2020-05-13T13:38:05Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -872,6 +872,65 @@ def attempt_convert_item(input_value, valid_classes, path_to_item,\n     return input_value\n \n \n+def is_type_nullable(input_type):\n+    \"\"\"\n+    Returns true if None is an allowed value for the specified input_type.\n+\n+    A type is nullable if at least one of the following conditions is true:\n+    1. The OAS 'nullable' attribute has been specified,\n+    1. The type is the 'null' type,\n+    1. The type is a anyOf/oneOf composed schema, and a child schema is\n+       the 'null' type.\n+    Args:\n+        input_type (type): the class of the input_value that we are\n+            checking\n+    Returns:\n+        bool\n+    \"\"\"\n+    if input_type is none_type:\n+        return True\n+    # TODO: how do we handle the 'nullable: true' scenario?\n+    if issubclass(input_type, ModelComposed):\n+        # If oneOf/anyOf, check if the 'null' type is one of the allowed types.            \n+        for t in input_type._composed_schemas.get('oneOf', ()):\n+            if t is none_type:\n+                return True", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0Nzk4MQ=="}, "originalCommit": {"oid": "bb4460025a30706ce3d436d69d619695f3ae91f4"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3533, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}