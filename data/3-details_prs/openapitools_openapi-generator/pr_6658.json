{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTkxMjc0", "number": 6658, "title": "[C++] [restsdk]Update CMakeLists.txt for seamless building on Windows and Linux", "bodyText": "Update CMakeLists.txt for easier building on Linux/Unix and Windows hosts.\n@stkrwork @MartinDelille @ravinikam @muttleyxd\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project beforehand.\n Run the shell script ./bin/generate-samples.shto update all Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit as it would merge with master. These must match the expectations made by your contribution. You may regenerate an individual generator by passing the relevant config(s) as an argument to the script, for example ./bin/generate-samples.sh bin/config/java*. For Windows users, please run the script in Git BASH.\n File the PR against the correct branch: master\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.", "createdAt": "2020-06-14T19:33:18Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658", "merged": true, "mergeCommit": {"oid": "e658c49f77e502fd27706ea4a787594f61dcc8de"}, "closed": true, "closedAt": "2020-06-15T07:08:36Z", "author": {"login": "etherealjoy"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrRRcgAH2gAyNDM0MTkxMjc0OmVhZTdlZGYwMmU3YmNjYjA2NjlkZmFlNDdiY2ZjYzIzODYwNjE1Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrVIZMAFqTQzMDI2MzgzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eae7edf02e7bccb0669dfae47bcfcc2386061577", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/eae7edf02e7bccb0669dfae47bcfcc2386061577", "committedDate": "2020-06-14T19:32:16Z", "message": "Update CMakeLists.txt for seamless building on Windows and Linux"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/1d12c440f989b729a34c8be51b8e060d3da76c27", "committedDate": "2020-06-14T21:01:17Z", "message": "Update CMakeLists.txt\n\nMissing the line ending"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjU1NDI1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#pullrequestreview-430255425", "createdAt": "2020-06-14T22:14:08Z", "commit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMjoxNDowOFrOGjfsiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQyMjoyMjo0MVrOGjfu7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MjY0OA==", "bodyText": "I would indent all statements inside if clauses by 2 or 4 spaces, so it's obvious it's if-else", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872648", "createdAt": "2020-06-14T22:14:08Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MjY2OQ==", "bodyText": "I'd use newer syntax - simply\nelse() - less confusing for users from other languages", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872669", "createdAt": "2020-06-14T22:14:35Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)\n+\n+message(STATUS \"Building client library for Linux/Unix\")\n+\n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable\")\n+\n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n \n-# build and set path to cpp rest sdk\n-set(CPPREST_ROOT ${PROJECT_SOURCE_DIR}/3rdParty/cpprest)\n-set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n-set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+else(UNIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MjY4OQ==", "bodyText": "Same as with else - endif()", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872689", "createdAt": "2020-06-14T22:14:46Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)\n+\n+message(STATUS \"Building client library for Linux/Unix\")\n+\n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable\")\n+\n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n \n-# build and set path to cpp rest sdk\n-set(CPPREST_ROOT ${PROJECT_SOURCE_DIR}/3rdParty/cpprest)\n-set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n-set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+else(UNIX)\n \n-include_directories(${PROJECT_SOURCE_DIR} api model ${CPPREST_INCLUDE_DIR})\n+message(STATUS \"Building client library for Windows\")\n \n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n+find_package(pthreads REQUIRED)\n \n-# If using vcpkg, set include directories. Also comment out CPPREST section above since vcpkg will handle it.\n-# To install required vcpkg packages execute:\n-# > vcpkg install cpprestsdk cpprestsdk:x64-windows boost-uuid boost-uuid:x64-windows\n-# set(VCPKG_ROOT \"C:\\\\vcpkg\\\\installed\\\\x64-windows\")\n-# set(VCPKG_INCLUDE_DIR ${VCPKG_ROOT}/include)\n-# set(VCPKG_LIBRARY_DIR ${VCPKG_ROOT}/lib)\n-# include_directories(${PROJECT_SOURCE_DIR} api model ${VCPKG_INCLUDE_DIR})\n+endif(UNIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3Mjg5Mg==", "bodyText": "I would use more modern target_include_directories - this would lead to less clutter if someone decides to do add_subdirectory on a directory containing this file - it would propagate and everything declared after would have these directories.\nIf projects linking to ${PROJECT_NAME} require to know these headers then do target_include_directories(${PROJECT_NAME} PUBLIC ...), if not then change PUBLIC with PRIVATE", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872892", "createdAt": "2020-06-14T22:17:44Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)\n+\n+message(STATUS \"Building client library for Linux/Unix\")\n+\n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable\")\n+\n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n \n-# build and set path to cpp rest sdk\n-set(CPPREST_ROOT ${PROJECT_SOURCE_DIR}/3rdParty/cpprest)\n-set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n-set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+else(UNIX)\n \n-include_directories(${PROJECT_SOURCE_DIR} api model ${CPPREST_INCLUDE_DIR})\n+message(STATUS \"Building client library for Windows\")\n \n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n+find_package(pthreads REQUIRED)\n \n-# If using vcpkg, set include directories. Also comment out CPPREST section above since vcpkg will handle it.\n-# To install required vcpkg packages execute:\n-# > vcpkg install cpprestsdk cpprestsdk:x64-windows boost-uuid boost-uuid:x64-windows\n-# set(VCPKG_ROOT \"C:\\\\vcpkg\\\\installed\\\\x64-windows\")\n-# set(VCPKG_INCLUDE_DIR ${VCPKG_ROOT}/include)\n-# set(VCPKG_LIBRARY_DIR ${VCPKG_ROOT}/lib)\n-# include_directories(${PROJECT_SOURCE_DIR} api model ${VCPKG_INCLUDE_DIR})\n+endif(UNIX)\n+\n+# Manually set the cpprestsdk paths\n+#set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n+#set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+#include_directories(${CPPREST_INCLUDE_DIR})\n+#link_directories(${CPPREST_LIBRARY_DIR})\n+\n+include_directories(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MjkwNw==", "bodyText": "Same as include_directories", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872907", "createdAt": "2020-06-14T22:17:57Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)\n+\n+message(STATUS \"Building client library for Linux/Unix\")\n+\n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable\")\n+\n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n \n-# build and set path to cpp rest sdk\n-set(CPPREST_ROOT ${PROJECT_SOURCE_DIR}/3rdParty/cpprest)\n-set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n-set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+else(UNIX)\n \n-include_directories(${PROJECT_SOURCE_DIR} api model ${CPPREST_INCLUDE_DIR})\n+message(STATUS \"Building client library for Windows\")\n \n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n+find_package(pthreads REQUIRED)\n \n-# If using vcpkg, set include directories. Also comment out CPPREST section above since vcpkg will handle it.\n-# To install required vcpkg packages execute:\n-# > vcpkg install cpprestsdk cpprestsdk:x64-windows boost-uuid boost-uuid:x64-windows\n-# set(VCPKG_ROOT \"C:\\\\vcpkg\\\\installed\\\\x64-windows\")\n-# set(VCPKG_INCLUDE_DIR ${VCPKG_ROOT}/include)\n-# set(VCPKG_LIBRARY_DIR ${VCPKG_ROOT}/lib)\n-# include_directories(${PROJECT_SOURCE_DIR} api model ${VCPKG_INCLUDE_DIR})\n+endif(UNIX)\n+\n+# Manually set the cpprestsdk paths\n+#set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n+#set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+#include_directories(${CPPREST_INCLUDE_DIR})\n+#link_directories(${CPPREST_LIBRARY_DIR})\n+\n+include_directories(\n+    ${Boost_INCLUDE_DIRS}\n+    ${CMAKE_CURRENT_SOURCE_DIR}/model\n+    ${CMAKE_CURRENT_SOURCE_DIR}/api\n+)\n+\n+link_directories(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3Mjk4NA==", "bodyText": "Same as first if", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439872984", "createdAt": "2020-06-14T22:19:27Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-rest-sdk-client/cmake-lists.mustache", "diffHunk": "@@ -27,28 +25,55 @@ endif()\n # BUILD TYPE\n message(\"A ${CMAKE_BUILD_TYPE} build configuration is detected\")\n \n-# Update require components as necessary\n-#find_package(Boost 1.45.0 REQUIRED COMPONENTS ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_REGEX_LIBRARY} ${Boost_DATE_TIME_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})\n+if (UNIX)\n+\n+message(STATUS \"Building client library for Linux/Unix\")\n+\n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable\")\n+\n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n \n-# build and set path to cpp rest sdk\n-set(CPPREST_ROOT ${PROJECT_SOURCE_DIR}/3rdParty/cpprest)\n-set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n-set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+else(UNIX)\n \n-include_directories(${PROJECT_SOURCE_DIR} api model ${CPPREST_INCLUDE_DIR})\n+message(STATUS \"Building client library for Windows\")\n \n+find_package(cpprestsdk REQUIRED)\n+find_package(Boost REQUIRED)\n+find_package(pthreads REQUIRED)\n \n-# If using vcpkg, set include directories. Also comment out CPPREST section above since vcpkg will handle it.\n-# To install required vcpkg packages execute:\n-# > vcpkg install cpprestsdk cpprestsdk:x64-windows boost-uuid boost-uuid:x64-windows\n-# set(VCPKG_ROOT \"C:\\\\vcpkg\\\\installed\\\\x64-windows\")\n-# set(VCPKG_INCLUDE_DIR ${VCPKG_ROOT}/include)\n-# set(VCPKG_LIBRARY_DIR ${VCPKG_ROOT}/lib)\n-# include_directories(${PROJECT_SOURCE_DIR} api model ${VCPKG_INCLUDE_DIR})\n+endif(UNIX)\n+\n+# Manually set the cpprestsdk paths\n+#set(CPPREST_INCLUDE_DIR ${CPPREST_ROOT}/include)\n+#set(CPPREST_LIBRARY_DIR ${CPPREST_ROOT}/lib)\n+#include_directories(${CPPREST_INCLUDE_DIR})\n+#link_directories(${CPPREST_LIBRARY_DIR})\n+\n+include_directories(\n+    ${Boost_INCLUDE_DIRS}\n+    ${CMAKE_CURRENT_SOURCE_DIR}/model\n+    ${CMAKE_CURRENT_SOURCE_DIR}/api\n+)\n+\n+link_directories(\n+    ${Boost_LIBRARY_DIRS}\n+)\n \n #SUPPORTING FILES\n set(SUPPORTING_FILES  \"ApiClient\" \"ApiConfiguration\" \"ApiException\" \"HttpContent\" \"IHttpBody\" \"JsonBody\" \"ModelBase\" \"MultipartFormData\" \"Object\")\n #SOURCE FILES\n file(GLOB SOURCE_FILES  \"api/*\"  \"model/*\")\n \n add_library(${PROJECT_NAME} ${SUPPORTING_FILES} ${SOURCE_FILES})\n+\n+if (UNIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzA4NQ==", "bodyText": "This is generally a bad idea. I'd leave build type out, user has to specify it IMO. Unless we have a good reason to do so.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873085", "createdAt": "2020-06-14T22:20:34Z", "author": {"login": "muttleyxd"}, "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -4,16 +4,29 @@ project(cpprest-petstore)\n set(CMAKE_VERBOSE_MAKEFILE ON)\n set(CMAKE_INCLUDE_CURRENT_DIR ON)\n \n+if (UNIX)\n \n-set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n-set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -std=c++14 -Wall -Wno-unused-variable\")\n+message(STATUS \"Building for Linux/Unix\")\n \n+set(CMAKE_BUILD_TYPE Debug)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzEzMQ==", "bodyText": "I think we can concatenate these with lines 14 and 15.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873131", "createdAt": "2020-06-14T22:21:01Z", "author": {"login": "muttleyxd"}, "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -4,16 +4,29 @@ project(cpprest-petstore)\n set(CMAKE_VERBOSE_MAKEFILE ON)\n set(CMAKE_INCLUDE_CURRENT_DIR ON)\n \n+if (UNIX)\n \n-set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")\n-set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -std=c++14 -Wall -Wno-unused-variable\")\n+message(STATUS \"Building for Linux/Unix\")\n \n+set(CMAKE_BUILD_TYPE Debug)\n+set(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS}   -fPIC -Wall -Wno-unused-variable\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzE2Mw==", "bodyText": "Same as previous if", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873163", "createdAt": "2020-06-14T22:21:29Z", "author": {"login": "muttleyxd"}, "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -4,16 +4,29 @@ project(cpprest-petstore)\n set(CMAKE_VERBOSE_MAKEFILE ON)\n set(CMAKE_INCLUDE_CURRENT_DIR ON)\n \n+if (UNIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzE3Nw==", "bodyText": "target_link_directories", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873177", "createdAt": "2020-06-14T22:21:45Z", "author": {"login": "muttleyxd"}, "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -23,15 +36,25 @@ include_directories(\n     ${CMAKE_CURRENT_SOURCE_DIR}/client\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/model\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/api\n+    ${Boost_INCLUDE_DIRS}\n )\n \n link_directories(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzI0Nw==", "bodyText": "Same as other if()", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873247", "createdAt": "2020-06-14T22:22:36Z", "author": {"login": "muttleyxd"}, "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -23,15 +36,25 @@ include_directories(\n     ${CMAKE_CURRENT_SOURCE_DIR}/client\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/model\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/api\n+    ${Boost_INCLUDE_DIRS}\n )\n \n link_directories(\n     ${Boost_LIBRARY_DIRS}\n )\n+\n add_executable(${PROJECT_NAME} ${SRCS})\n add_dependencies(${PROJECT_NAME} CppRestOpenAPIClient )\n-target_link_libraries(${PROJECT_NAME}  CppRestOpenAPIClient cpprest pthread boost_system crypto)\n+\n+if (UNIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg3MzI2Mw==", "bodyText": "Same as other if()", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#discussion_r439873263", "createdAt": "2020-06-14T22:22:41Z", "author": {"login": "muttleyxd"}, "path": "samples/client/petstore/cpp-restsdk/CMakeLists.txt", "diffHunk": "@@ -23,15 +36,25 @@ include_directories(\n     ${CMAKE_CURRENT_SOURCE_DIR}/client\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/model\n     ${CMAKE_CURRENT_SOURCE_DIR}/client/api\n+    ${Boost_INCLUDE_DIRS}\n )\n \n link_directories(\n     ${Boost_LIBRARY_DIRS}\n )\n+\n add_executable(${PROJECT_NAME} ${SRCS})\n add_dependencies(${PROJECT_NAME} CppRestOpenAPIClient )\n-target_link_libraries(${PROJECT_NAME}  CppRestOpenAPIClient cpprest pthread boost_system crypto)\n+\n+if (UNIX)\n+target_link_libraries(${PROJECT_NAME} PRIVATE CppRestOpenAPIClient cpprest pthread ${Boost_LIBRARIES} crypto)\n+else(UNIX)\n+target_link_libraries(${PROJECT_NAME} PRIVATE CppRestOpenAPIClient cpprestsdk::cpprest ${pthreads_LIBRARIES} ${Boost_LIBRARIES} bcrypt)\n+endif(UNIX)\n+\n set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 14)\n set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD_REQUIRED ON)\n \n+if (UNIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d12c440f989b729a34c8be51b8e060d3da76c27"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49293c5f6f1b5acd21cc0652d752e81d54402a1d", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/49293c5f6f1b5acd21cc0652d752e81d54402a1d", "committedDate": "2020-06-14T23:24:10Z", "message": "Indent if statements and use target specific directives"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a57a2797b885402c98846a1a40fa125b14abcb35", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a57a2797b885402c98846a1a40fa125b14abcb35", "committedDate": "2020-06-14T23:38:45Z", "message": "Change Client CMakeLists.txt to non Debug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjYzODMw", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6658#pullrequestreview-430263830", "createdAt": "2020-06-15T00:02:00Z", "commit": {"oid": "a57a2797b885402c98846a1a40fa125b14abcb35"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2072, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}