{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MDEyNTc5", "number": 7580, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjozMjoyMVrOEp4FTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo0NToxMVrOEp4UdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQ1OTMzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/typescript-axios/baseApi.mustache", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjozMjoyMVrOHb0Gaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzo1OTo0MVrOHdIMyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNzIxMQ==", "bodyText": "These should match those at https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java#L6606-L6607", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7580#discussion_r498927211", "createdAt": "2020-10-02T16:32:21Z", "author": {"login": "therockstorm"}, "path": "modules/openapi-generator/src/main/resources/typescript-axios/baseApi.mustache", "diffHunk": "@@ -20,6 +20,18 @@ export const COLLECTION_FORMATS = {\n     pipes: \"|\",\n };\n \n+/**\n+ *\n+ * @export\n+ */\n+export const JSON_MIME_PATTERN = new RegExp('application\\\\/json(;.*)?', 'i');\n+\n+/**\n+ *\n+ * @export\n+ */\n+export const JSON_VENDOR_MIME_PATTERN = new RegExp('application\\\\/vnd.(.*)+json(;.*)?', 'i');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982f0e97978bfea88176c8ba6c4ff125c69b8b06"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwNTA5Nw==", "bodyText": "maybe we could create a small function that does the check, similar to\n\n  \n    \n      openapi-generator/modules/openapi-generator/src/main/resources/typescript-angular/configuration.mustache\n    \n    \n        Lines 135 to 148\n      in\n      9236d56\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * Check if the given MIME is a JSON MIME. \n        \n\n        \n          \n                * JSON MIME examples: \n        \n\n        \n          \n                *   application/json \n        \n\n        \n          \n                *   application/json; charset=UTF8 \n        \n\n        \n          \n                *   APPLICATION/JSON \n        \n\n        \n          \n                *   application/vnd.company+json \n        \n\n        \n          \n                * @param mime - MIME (Multipurpose Internet Mail Extensions) \n        \n\n        \n          \n                * @return True if the given MIME is JSON, false otherwise. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               public isJsonMime(mime: string): boolean { \n        \n\n        \n          \n                   const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i'); \n        \n\n        \n          \n                   return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json'); \n        \n\n        \n          \n               }", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7580#discussion_r500305097", "createdAt": "2020-10-06T13:59:41Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/resources/typescript-axios/baseApi.mustache", "diffHunk": "@@ -20,6 +20,18 @@ export const COLLECTION_FORMATS = {\n     pipes: \"|\",\n };\n \n+/**\n+ *\n+ * @export\n+ */\n+export const JSON_MIME_PATTERN = new RegExp('application\\\\/json(;.*)?', 'i');\n+\n+/**\n+ *\n+ * @export\n+ */\n+export const JSON_VENDOR_MIME_PATTERN = new RegExp('application\\\\/vnd.(.*)+json(;.*)?', 'i');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNzIxMQ=="}, "originalCommit": {"oid": "982f0e97978bfea88176c8ba6c4ff125c69b8b06"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQ5ODEyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/typescript-axios/apiInner.mustache", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo0NToxMVrOHb0fSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo0NToxMVrOHb0fSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzMzU3Ng==", "bodyText": "This could be a breaking change if people were relying on this JSON.stringify with either an empty or non-JSON Content-Type. However, I didn't want to just add an exclusion for application/octet-stream since others (e.g., image/jpeg, etc.) wouldn't want JSON.stringify called either.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7580#discussion_r498933576", "createdAt": "2020-10-02T16:45:11Z", "author": {"login": "therockstorm"}, "path": "modules/openapi-generator/src/main/resources/typescript-axios/apiInner.mustache", "diffHunk": "@@ -203,7 +203,8 @@ export const {{classname}}AxiosParamCreator = function (configuration?: Configur\n             localVarRequestOptions.data = localVarFormParams{{#vendorExtensions}}{{^multipartFormData}}.toString(){{/multipartFormData}}{{/vendorExtensions}};\n     {{/hasFormParams}}\n     {{#bodyParam}}\n-            const needsSerialization = (typeof {{paramName}} !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n+            const contentType = localVarRequestOptions.headers['Content-Type'];\n+            const needsSerialization = (typeof {{paramName}} !== \"string\") && (contentType.match(JSON_MIME_PATTERN) || contentType.match(JSON_VENDOR_MIME_PATTERN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "982f0e97978bfea88176c8ba6c4ff125c69b8b06"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4137, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}