{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDQyMTkx", "number": 5526, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1ODoxOVrODnSBKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDozODozM1rODoBOCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTE2MjY3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1ODoxOVrOF1MGSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoxMjo0NFrOF1Ncfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzA2Ng==", "bodyText": "Typo: Schmea.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391317066", "createdAt": "2020-03-11T22:58:19Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1126,7 +1134,10 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n                         hasAmbiguousParents = true;\n-                        refedWithoutDiscriminator.add(parentName);\n+                        Boolean isNotExtractedInlineSchmea = !parentName.equals(schemaName+\"_allOf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbc71a836e0ff376e66de05d6f9f40608bb39b7d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzOTEzNA==", "bodyText": "Thanks for the catch. This typo has been corrected.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391339134", "createdAt": "2020-03-12T00:12:44Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1126,7 +1134,10 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n                         hasAmbiguousParents = true;\n-                        refedWithoutDiscriminator.add(parentName);\n+                        Boolean isNotExtractedInlineSchmea = !parentName.equals(schemaName+\"_allOf\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzA2Ng=="}, "originalCommit": {"oid": "bbc71a836e0ff376e66de05d6f9f40608bb39b7d"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODQzNTYzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOToxOTo0MVrOF1r_EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMDoxMjowNVrOF1tyxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzOTUwNQ==", "bodyText": "boolean instead of Boolean? Don't think we actually need an object here", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391839505", "createdAt": "2020-03-12T19:19:41Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1126,7 +1134,10 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n                         hasAmbiguousParents = true;\n-                        refedWithoutDiscriminator.add(parentName);\n+                        Boolean isNotExtractedInlineSchema = !parentName.equals(schemaName+\"_allOf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2OTEyNw==", "bodyText": "This has been changed to type boolean\nTrue we don't need an object but having it named conveys that we are checking that a schema isNotExtractedInlineSchema. This helps us understand the meaning of the code vs what it is doing.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391869127", "createdAt": "2020-03-12T20:12:05Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1126,7 +1134,10 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n                         hasAmbiguousParents = true;\n-                        refedWithoutDiscriminator.add(parentName);\n+                        Boolean isNotExtractedInlineSchema = !parentName.equals(schemaName+\"_allOf\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzOTUwNQ=="}, "originalCommit": {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODQ0MTA4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOToyMToyNlrOF1sCfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTozMjoyN1rOF2IMyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw==", "bodyText": "Call TestUtils.parseSpec instead of reimplementing parsing here?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391840383", "createdAt": "2020-03-12T19:21:26Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2NDExNQ==", "bodyText": "The long term intention is to deprecate, possibly remove, or change the location of parseSpec. For that reason these functions should be independent of each other.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391864115", "createdAt": "2020-03-12T20:05:08Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, "originalCommit": {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg2ODI1Ng==", "bodyText": "Is this request blocking? Why?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391868256", "createdAt": "2020-03-12T20:10:16Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, "originalCommit": {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkzODk3Ng==", "bodyText": "Sounds good.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r391938976", "createdAt": "2020-03-12T22:27:03Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, "originalCommit": {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAwMDcyMA==", "bodyText": "The long term intention is to deprecate, possibly remove, or change the location of parseSpec.\n\nNot true. We will still need parseSpec for current and future classes which operate on \"raw\" spec files.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392000720", "createdAt": "2020-03-13T02:39:58Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, "originalCommit": {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAxOTA5MQ==", "bodyText": "Sorry, I meant my long term intention, not ours. @jimschubert classes which operate on raw files aren't something that I know about. What are some examples? Are they not being tested right now?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392019091", "createdAt": "2020-03-13T03:56:05Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, "originalCommit": {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE5NjEwOA==", "bodyText": "InlineModelResolver, and as mentioned in your other PR, I will be reworking Spec processing using a transformer pipeline which will need this too.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392196108", "createdAt": "2020-03-13T12:25:04Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, "originalCommit": {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5NDYxOQ==", "bodyText": "Thank you for clarifying that. That other use case is newer and is not yet in the code path. Per that conversation in the other PR this issue: #843 documents the spec processing.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392294619", "createdAt": "2020-03-13T15:20:45Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, "originalCommit": {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwMTc2OQ==", "bodyText": "parseFlattenSpec has been updated to call parseSpec because we need to keep parseSpec as a public util", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392301769", "createdAt": "2020-03-13T15:32:27Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = new OpenAPIParser().readLocation(specFilePath, null, new ParseOptions()).getOpenAPI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0MDM4Mw=="}, "originalCommit": {"oid": "180e1902f70ff68f02b3aaf2bc027209dad42d10"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg4NzE3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/ModelUtilsTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDozMzowN1rOF2WmGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQyMTo0NDoyM1rOF2butQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzYyNQ==", "bodyText": "Be careful when refactoring things like this. While YAML (as used in this method) may process schemas in a consistent order, JSON does not have a determinate order on object properties.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392537625", "createdAt": "2020-03-14T00:33:07Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/ModelUtilsTest.java", "diffHunk": "@@ -26,86 +26,84 @@\n import org.testng.Assert;\n import org.testng.annotations.Test;\n \n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n \n public class ModelUtilsTest {\n \n     @Test\n     public void testGetAllUsedSchemas() {\n-        final OpenAPI openAPI = TestUtils.parseSpec(\"src/test/resources/3_0/unusedSchemas.yaml\");\n+        final OpenAPI openAPI = TestUtils.parseFlattenSpec(\"src/test/resources/3_0/unusedSchemas.yaml\");\n         List<String> allUsedSchemas = ModelUtils.getAllUsedSchemas(openAPI);\n-        Assert.assertEquals(allUsedSchemas.size(), 41);\n-\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObjShared\"), \"contains 'SomeObjShared'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj1\"), \"contains 'UnusedObj1'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj2\"), \"contains 'SomeObj2'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj3\"), \"contains 'SomeObj3'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj6\"), \"contains 'SomeObj6'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj7\"), \"contains 'SomeObj7'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj8\"), \"contains 'SomeObj8'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj9A\"), \"contains 'SomeObj9A'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj9B\"), \"contains 'SomeObj9B'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj10A\"), \"contains 'SomeObj10A'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj10B\"), \"contains 'SomeObj10B'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj11\"), \"contains 'SomeObj11'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeArrayObj12\"), \"contains 'SomeArrayObj12'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"ArrayItem12\"), \"contains 'ArrayItem12'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeArrayObj13\"), \"contains 'SomeArrayObj13'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"ArrayItem13\"), \"contains 'ArrayItem13'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj14\"), \"contains 'SomeObj14'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PropertyObj14\"), \"contains 'PropertyObj14'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj15\"), \"contains 'SomeObj15'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeMapObj16\"), \"contains 'SomeMapObj16'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"MapItem16\"), \"contains 'MapItem16'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj17\"), \"contains 'SomeObj17'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj18\"), \"contains 'SomeObj18'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Common18\"), \"contains 'Common18'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Obj19ByAge\"), \"contains 'Obj19ByAge'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Obj19ByType\"), \"contains 'Obj19ByType'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj20\"), \"contains 'SomeObj20'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"OtherObj20\"), \"contains 'OtherObj20'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PingDataInput21\"), \"contains 'PingDataInput21'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PingDataOutput21\"), \"contains 'PingDataOutput21'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SInput22\"), \"contains 'SInput22'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SOutput22\"), \"contains 'SInput22'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeHeader23\"), \"contains 'SomeHeader23'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeHeader24\"), \"contains 'SomeHeader24'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj25\"), \"contains 'SomeObj25'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj26\"), \"contains 'SomeObj26'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Param27\"), \"contains 'Param27'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Param28\"), \"contains 'Param28'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Parent30\"), \"contains 'Parent30'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"AChild30\"), \"contains 'AChild30'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"BChild30\"), \"contains 'BChild30'\");\n+        Assert.assertEquals(allUsedSchemas.size(), 42);\n+        List<String> expectedallUsedSchemas = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef117ed484472069f098f2931d3603bf2fb485e1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxODY2OA==", "bodyText": "Thank you for sharing that json and yaml are processed differently; I didn't know that. Do you want me to change this back to our old testing style so it will work if we swap in json in the future?\nMaybe we should add a method checkJsonYamlCollectionPresence(list1, list2)\nwith a comment:\n// YAML may process items in a consistent order, JSON does not have a determinate order on items", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392618668", "createdAt": "2020-03-14T20:57:24Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/ModelUtilsTest.java", "diffHunk": "@@ -26,86 +26,84 @@\n import org.testng.Assert;\n import org.testng.annotations.Test;\n \n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n \n public class ModelUtilsTest {\n \n     @Test\n     public void testGetAllUsedSchemas() {\n-        final OpenAPI openAPI = TestUtils.parseSpec(\"src/test/resources/3_0/unusedSchemas.yaml\");\n+        final OpenAPI openAPI = TestUtils.parseFlattenSpec(\"src/test/resources/3_0/unusedSchemas.yaml\");\n         List<String> allUsedSchemas = ModelUtils.getAllUsedSchemas(openAPI);\n-        Assert.assertEquals(allUsedSchemas.size(), 41);\n-\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObjShared\"), \"contains 'SomeObjShared'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj1\"), \"contains 'UnusedObj1'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj2\"), \"contains 'SomeObj2'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj3\"), \"contains 'SomeObj3'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj6\"), \"contains 'SomeObj6'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj7\"), \"contains 'SomeObj7'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj8\"), \"contains 'SomeObj8'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj9A\"), \"contains 'SomeObj9A'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj9B\"), \"contains 'SomeObj9B'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj10A\"), \"contains 'SomeObj10A'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj10B\"), \"contains 'SomeObj10B'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj11\"), \"contains 'SomeObj11'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeArrayObj12\"), \"contains 'SomeArrayObj12'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"ArrayItem12\"), \"contains 'ArrayItem12'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeArrayObj13\"), \"contains 'SomeArrayObj13'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"ArrayItem13\"), \"contains 'ArrayItem13'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj14\"), \"contains 'SomeObj14'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PropertyObj14\"), \"contains 'PropertyObj14'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj15\"), \"contains 'SomeObj15'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeMapObj16\"), \"contains 'SomeMapObj16'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"MapItem16\"), \"contains 'MapItem16'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj17\"), \"contains 'SomeObj17'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj18\"), \"contains 'SomeObj18'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Common18\"), \"contains 'Common18'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Obj19ByAge\"), \"contains 'Obj19ByAge'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Obj19ByType\"), \"contains 'Obj19ByType'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj20\"), \"contains 'SomeObj20'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"OtherObj20\"), \"contains 'OtherObj20'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PingDataInput21\"), \"contains 'PingDataInput21'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PingDataOutput21\"), \"contains 'PingDataOutput21'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SInput22\"), \"contains 'SInput22'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SOutput22\"), \"contains 'SInput22'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeHeader23\"), \"contains 'SomeHeader23'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeHeader24\"), \"contains 'SomeHeader24'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj25\"), \"contains 'SomeObj25'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj26\"), \"contains 'SomeObj26'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Param27\"), \"contains 'Param27'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Param28\"), \"contains 'Param28'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Parent30\"), \"contains 'Parent30'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"AChild30\"), \"contains 'AChild30'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"BChild30\"), \"contains 'BChild30'\");\n+        Assert.assertEquals(allUsedSchemas.size(), 42);\n+        List<String> expectedallUsedSchemas = Arrays.asList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzYyNQ=="}, "originalCommit": {"oid": "ef117ed484472069f098f2931d3603bf2fb485e1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyMTM4OQ==", "bodyText": "Or optionally I could cast them to sets and check equality of the sets.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392621389", "createdAt": "2020-03-14T21:38:48Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/ModelUtilsTest.java", "diffHunk": "@@ -26,86 +26,84 @@\n import org.testng.Assert;\n import org.testng.annotations.Test;\n \n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n \n public class ModelUtilsTest {\n \n     @Test\n     public void testGetAllUsedSchemas() {\n-        final OpenAPI openAPI = TestUtils.parseSpec(\"src/test/resources/3_0/unusedSchemas.yaml\");\n+        final OpenAPI openAPI = TestUtils.parseFlattenSpec(\"src/test/resources/3_0/unusedSchemas.yaml\");\n         List<String> allUsedSchemas = ModelUtils.getAllUsedSchemas(openAPI);\n-        Assert.assertEquals(allUsedSchemas.size(), 41);\n-\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObjShared\"), \"contains 'SomeObjShared'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj1\"), \"contains 'UnusedObj1'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj2\"), \"contains 'SomeObj2'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj3\"), \"contains 'SomeObj3'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj6\"), \"contains 'SomeObj6'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj7\"), \"contains 'SomeObj7'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj8\"), \"contains 'SomeObj8'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj9A\"), \"contains 'SomeObj9A'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj9B\"), \"contains 'SomeObj9B'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj10A\"), \"contains 'SomeObj10A'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj10B\"), \"contains 'SomeObj10B'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj11\"), \"contains 'SomeObj11'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeArrayObj12\"), \"contains 'SomeArrayObj12'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"ArrayItem12\"), \"contains 'ArrayItem12'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeArrayObj13\"), \"contains 'SomeArrayObj13'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"ArrayItem13\"), \"contains 'ArrayItem13'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj14\"), \"contains 'SomeObj14'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PropertyObj14\"), \"contains 'PropertyObj14'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj15\"), \"contains 'SomeObj15'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeMapObj16\"), \"contains 'SomeMapObj16'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"MapItem16\"), \"contains 'MapItem16'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj17\"), \"contains 'SomeObj17'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj18\"), \"contains 'SomeObj18'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Common18\"), \"contains 'Common18'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Obj19ByAge\"), \"contains 'Obj19ByAge'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Obj19ByType\"), \"contains 'Obj19ByType'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj20\"), \"contains 'SomeObj20'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"OtherObj20\"), \"contains 'OtherObj20'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PingDataInput21\"), \"contains 'PingDataInput21'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PingDataOutput21\"), \"contains 'PingDataOutput21'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SInput22\"), \"contains 'SInput22'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SOutput22\"), \"contains 'SInput22'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeHeader23\"), \"contains 'SomeHeader23'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeHeader24\"), \"contains 'SomeHeader24'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj25\"), \"contains 'SomeObj25'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj26\"), \"contains 'SomeObj26'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Param27\"), \"contains 'Param27'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Param28\"), \"contains 'Param28'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Parent30\"), \"contains 'Parent30'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"AChild30\"), \"contains 'AChild30'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"BChild30\"), \"contains 'BChild30'\");\n+        Assert.assertEquals(allUsedSchemas.size(), 42);\n+        List<String> expectedallUsedSchemas = Arrays.asList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzYyNQ=="}, "originalCommit": {"oid": "ef117ed484472069f098f2931d3603bf2fb485e1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyMTc0OQ==", "bodyText": "This check has been changed to use List.containsAll to check presence rather than order.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392621749", "createdAt": "2020-03-14T21:44:23Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/ModelUtilsTest.java", "diffHunk": "@@ -26,86 +26,84 @@\n import org.testng.Assert;\n import org.testng.annotations.Test;\n \n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n \n public class ModelUtilsTest {\n \n     @Test\n     public void testGetAllUsedSchemas() {\n-        final OpenAPI openAPI = TestUtils.parseSpec(\"src/test/resources/3_0/unusedSchemas.yaml\");\n+        final OpenAPI openAPI = TestUtils.parseFlattenSpec(\"src/test/resources/3_0/unusedSchemas.yaml\");\n         List<String> allUsedSchemas = ModelUtils.getAllUsedSchemas(openAPI);\n-        Assert.assertEquals(allUsedSchemas.size(), 41);\n-\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObjShared\"), \"contains 'SomeObjShared'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj1\"), \"contains 'UnusedObj1'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj2\"), \"contains 'SomeObj2'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj3\"), \"contains 'SomeObj3'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj6\"), \"contains 'SomeObj6'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj7\"), \"contains 'SomeObj7'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj8\"), \"contains 'SomeObj8'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj9A\"), \"contains 'SomeObj9A'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj9B\"), \"contains 'SomeObj9B'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj10A\"), \"contains 'SomeObj10A'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj10B\"), \"contains 'SomeObj10B'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj11\"), \"contains 'SomeObj11'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeArrayObj12\"), \"contains 'SomeArrayObj12'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"ArrayItem12\"), \"contains 'ArrayItem12'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeArrayObj13\"), \"contains 'SomeArrayObj13'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"ArrayItem13\"), \"contains 'ArrayItem13'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj14\"), \"contains 'SomeObj14'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PropertyObj14\"), \"contains 'PropertyObj14'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj15\"), \"contains 'SomeObj15'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeMapObj16\"), \"contains 'SomeMapObj16'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"MapItem16\"), \"contains 'MapItem16'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj17\"), \"contains 'SomeObj17'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj18\"), \"contains 'SomeObj18'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Common18\"), \"contains 'Common18'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Obj19ByAge\"), \"contains 'Obj19ByAge'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Obj19ByType\"), \"contains 'Obj19ByType'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj20\"), \"contains 'SomeObj20'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"OtherObj20\"), \"contains 'OtherObj20'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PingDataInput21\"), \"contains 'PingDataInput21'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"PingDataOutput21\"), \"contains 'PingDataOutput21'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SInput22\"), \"contains 'SInput22'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SOutput22\"), \"contains 'SInput22'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeHeader23\"), \"contains 'SomeHeader23'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeHeader24\"), \"contains 'SomeHeader24'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj25\"), \"contains 'SomeObj25'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"SomeObj26\"), \"contains 'SomeObj26'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Param27\"), \"contains 'Param27'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Param28\"), \"contains 'Param28'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"Parent30\"), \"contains 'Parent30'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"AChild30\"), \"contains 'AChild30'\");\n-        Assert.assertTrue(allUsedSchemas.contains(\"BChild30\"), \"contains 'BChild30'\");\n+        Assert.assertEquals(allUsedSchemas.size(), 42);\n+        List<String> expectedallUsedSchemas = Arrays.asList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzYyNQ=="}, "originalCommit": {"oid": "ef117ed484472069f098f2931d3603bf2fb485e1"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg4Nzg5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDozNDowNFrOF2WmlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQyMDo1ODo1MVrOF2bjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzc0OQ==", "bodyText": "This comment is unnecessary.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392537749", "createdAt": "2020-03-14T00:34:04Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = parseSpec(specFilePath);\n+        // resolve inline models", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef117ed484472069f098f2931d3603bf2fb485e1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxODc3OA==", "bodyText": "This comment has been removed", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392618778", "createdAt": "2020-03-14T20:58:51Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/TestUtils.java", "diffHunk": "@@ -28,6 +28,30 @@\n \n public class TestUtils {\n \n+    /**\n+     * Helper method for parsing specs as a generator would be presented at runtime (inline models resolved, flattened).\n+     *\n+     * @param specFilePath The path to the specification file\n+     * @return A processed OpenAPI document\n+     */\n+    public static OpenAPI parseFlattenSpec(String specFilePath) {\n+        OpenAPI openAPI = parseSpec(specFilePath);\n+        // resolve inline models", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzNzc0OQ=="}, "originalCommit": {"oid": "ef117ed484472069f098f2931d3603bf2fb485e1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg5NjA4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDozODozM1rOF2Wr3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMToxMDoyN1rOF3KwpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzOTEwMQ==", "bodyText": "What is the point of this for loop? Why can't you just do composedSchema.getName() to get this schema's name? I think this needs a comment because it could be a pretty large performance impact on huge schema documents.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392539101", "createdAt": "2020-03-14T00:38:33Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1110,6 +1110,14 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n         int nullSchemaChildrenCount = 0;\n         boolean hasAmbiguousParents = false;\n         List<String> refedWithoutDiscriminator = new ArrayList<>();\n+        String schemaName = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef117ed484472069f098f2931d3603bf2fb485e1"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxOTQ1NA==", "bodyText": "@jimschubert we use this for loop to find out the name of the name of the composedSchema and we use it below to check that one of the oneOf models is an extracted inline schema.\nThis for loop is needed because the Schema.name is null for all schemas in allSchemas and in composedSchema.\nDo you want me to edit the getSchemas method to set the names in the returned schemas? Then I could Use composedSchema.getName() like you have described.\nHowever, that may have widespread impacts because comparing two schemas would then give different results if one had the name and one didn't have it.\nFor reference:\n    public static Map<String, Schema> getSchemas(OpenAPI openAPI) {\n        if (openAPI != null && openAPI.getComponents() != null && openAPI.getComponents().getSchemas() != null) {\n            return openAPI.getComponents().getSchemas();\n        }\n        return Collections.emptyMap();\n    }\n\nWhen we return openAPI.getComponents().getSchemas() none of those schemas have name set in them.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r392619454", "createdAt": "2020-03-14T21:10:03Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1110,6 +1110,14 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n         int nullSchemaChildrenCount = 0;\n         boolean hasAmbiguousParents = false;\n         List<String> refedWithoutDiscriminator = new ArrayList<>();\n+        String schemaName = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzOTEwMQ=="}, "originalCommit": {"oid": "ef117ed484472069f098f2931d3603bf2fb485e1"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MjI5Mg==", "bodyText": "I see. No need to change, as I suspect ModelUtils will change pretty heavily by 5.0 anyway.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5526#discussion_r393392292", "createdAt": "2020-03-17T01:10:27Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1110,6 +1110,14 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n         int nullSchemaChildrenCount = 0;\n         boolean hasAmbiguousParents = false;\n         List<String> refedWithoutDiscriminator = new ArrayList<>();\n+        String schemaName = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzOTEwMQ=="}, "originalCommit": {"oid": "ef117ed484472069f098f2931d3603bf2fb485e1"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3770, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}