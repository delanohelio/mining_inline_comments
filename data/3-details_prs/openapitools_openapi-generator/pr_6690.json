{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTEyNjAx", "number": 6690, "title": "[Core, Rust Server] anyOf / oneOf support for Rust Server", "bodyText": "This adds anyOf/oneOf support for the Rust Server generator using the support added in Metaswitch/swagger-rs#112\nThere's a couple of minor core changes to InlineModelResolver - @OpenAPITools/generator-core-team:\n\n\nIf we get a model named 12345AnyOfObject, rename it to _12345AnyOfObject, not _2345AnyOfObject.\nThis means for Rust Server, it'll end up as Model12345AnyOfObject, instead of Model2345AnyOfObject, which is nonsensical.\n\u26a0\ufe0f I think this is technically breaking, but it's clearly bugged at the moment.\n\n\nPerform inline model resolution for enums, and pass the type through when performing inline model resolution.\n\n\nThere's a couple of minor fixups in Rust Server:\n\n\nSome minor template tweaking, including putting the IntoHeader implementation below the model definition.\n\n\nUpdate the supported features - we've support XML Structure Definition for a while - but the global feature flag is wrong - see user feedback in #5594.\n\n\nHandle FromStr properly, which breaks for the oneOf model otherwise.\n\n\nOptimistically, I'd like to merge this before 5.0 gets cut.\nThis change is by @mirw and myself on behalf of @Metaswitch.\nRust Server Technical Committee\n\n@frol\n@farcaller\n@paladinzh\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project beforehand.\n Run the shell script ./bin/generate-samples.shto update all Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit as it would merge with master. These must match the expectations made by your contribution. You may regenerate an individual generator by passing the relevant config(s) as an argument to the script, for example ./bin/generate-samples.sh bin/config/java*. For Windows users, please run the script in Git BASH.\n File the PR against the correct branch: master\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.", "createdAt": "2020-06-16T23:08:39Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6690", "merged": true, "mergeCommit": {"oid": "5f2ca618626ee15778a71e06211c4b02533fe951"}, "closed": true, "closedAt": "2021-01-23T21:32:52Z", "author": {"login": "richardwhiuk"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr9aHzAH2gAyNDM1NTEyNjAxOjYwOWNlMTQ4ZjFjNmQzNGJiYjAyODFlOWU0ZWU2NTdmZGQ1MWEzZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdy-Qd8gH2gAyNDM1NTEyNjAxOjI1NWJmZDc2ODIzYWNjMGVjNTU3MzdhNDc5ODkzNDBiMTQ1ZTQzNWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "609ce148f1c6d34bbb0281e9e4ee657fdd51a3d9", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/609ce148f1c6d34bbb0281e9e4ee657fdd51a3d9", "committedDate": "2020-06-16T22:57:34Z", "message": "[Core] Inline Model Resolution of Enums\n\nEnums need to be named types, so handle them as part of inline model resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f51f0c6273ed60bdd64bcf174193a477bde21e7", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/2f51f0c6273ed60bdd64bcf174193a477bde21e7", "committedDate": "2020-06-16T22:57:34Z", "message": "[Rust Server] Handle models starting with a number correctly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf6c4522163ce869c89887be5b8c67ed1c23c528", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/cf6c4522163ce869c89887be5b8c67ed1c23c528", "committedDate": "2020-06-16T22:57:34Z", "message": "[Rust Server] Additional debug logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af12d5fd53d995d80849c757d41ab7bbef956a41", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/af12d5fd53d995d80849c757d41ab7bbef956a41", "committedDate": "2020-06-16T22:57:34Z", "message": "[Rust Server] Add support for oneOf/anyOf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15fd91a9ba343c63f469f36ed8c75a198f14ec1d", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/15fd91a9ba343c63f469f36ed8c75a198f14ec1d", "committedDate": "2020-06-16T22:57:34Z", "message": "[Rust Server] Update supported features"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e70b79a4fb6437523d985c4e925824a7f96cb4a", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/8e70b79a4fb6437523d985c4e925824a7f96cb4a", "committedDate": "2020-06-16T22:57:34Z", "message": "[Rust Server] General template tidy up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3171e57b35c4d8f32c9a75aa360565dbafbe52ba", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/3171e57b35c4d8f32c9a75aa360565dbafbe52ba", "committedDate": "2020-06-16T22:57:34Z", "message": "[Rust Server] Implement IntoHeaderValue for wrapped data types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca56ff833da0dc3e80d17f6273eed1f3cb491ca0", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ca56ff833da0dc3e80d17f6273eed1f3cb491ca0", "committedDate": "2020-06-16T22:57:34Z", "message": "[Rust Server] Convert from string correctly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2d433d6e16485f8d27a488927bc23c3babf4431", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/c2d433d6e16485f8d27a488927bc23c3babf4431", "committedDate": "2020-06-16T22:57:34Z", "message": "[Rust Server] Test for anyOf/oneOf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f967bc0e4b3b8759bdd16aa19ac06975dde447a", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/7f967bc0e4b3b8759bdd16aa19ac06975dde447a", "committedDate": "2020-06-16T22:57:34Z", "message": "Update samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d868d32f3e3c0d179b65c6e747005e38a1e8d2a4", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/d868d32f3e3c0d179b65c6e747005e38a1e8d2a4", "committedDate": "2020-06-17T08:37:50Z", "message": "Update samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a15ecbf43bfc7b7106da601b81be3dc469f6d76", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/0a15ecbf43bfc7b7106da601b81be3dc469f6d76", "committedDate": "2020-06-17T17:51:00Z", "message": "Update docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NzM2NDc1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6690#pullrequestreview-436736475", "createdAt": "2020-06-24T15:01:49Z", "commit": {"oid": "0a15ecbf43bfc7b7106da601b81be3dc469f6d76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowMTo0OVrOGoWTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowMTo0OVrOGoWTgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2MTY2Nw==", "bodyText": "cc @OpenAPITools/generator-core-team for review", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6690#discussion_r444961667", "createdAt": "2020-06-24T15:01:49Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/InlineModelResolver.java", "diffHunk": "@@ -362,38 +362,33 @@ private void flattenComposedChildren(OpenAPI openAPI, String key, List<Schema> c\n         ListIterator<Schema> listIterator = children.listIterator();\n         while (listIterator.hasNext()) {\n             Schema component = listIterator.next();\n-            if (component instanceof ObjectSchema || // for inline schema with type:object\n-                    (component != null && component.getProperties() != null &&\n-                            !component.getProperties().isEmpty())) { // for inline schema without type:object\n-                Schema op = component;\n-                if (op.get$ref() == null && op.getProperties() != null && op.getProperties().size() > 0) {\n-                    // If a `title` attribute is defined in the inline schema, codegen uses it to name the\n-                    // inline schema. Otherwise, we'll use the default naming such as InlineObject1, etc.\n-                    // We know that this is not the best way to name the model.\n-                    //\n-                    // Such naming strategy may result in issues. If the value of the 'title' attribute\n-                    // happens to match a schema defined elsewhere in the specification, 'innerModelName'\n-                    // will be the same as that other schema.\n-                    //\n-                    // To have complete control of the model naming, one can define the model separately\n-                    // instead of inline.\n-                    String innerModelName = resolveModelName(op.getTitle(), key);\n-                    Schema innerModel = modelFromProperty(openAPI, op, innerModelName);\n-                    String existing = matchGenerated(innerModel);\n-                    if (existing == null) {\n-                        openAPI.getComponents().addSchemas(innerModelName, innerModel);\n-                        addGenerated(innerModelName, innerModel);\n-                        Schema schema = new Schema().$ref(innerModelName);\n-                        schema.setRequired(op.getRequired());\n-                        listIterator.set(schema);\n-                    } else {\n-                        Schema schema = new Schema().$ref(existing);\n-                        schema.setRequired(op.getRequired());\n-                        listIterator.set(schema);\n-                    }\n+            if ((component.get$ref() == null) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15ecbf43bfc7b7106da601b81be3dc469f6d76"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0ODIxOTcz", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6690#pullrequestreview-564821973", "createdAt": "2021-01-10T01:37:27Z", "commit": {"oid": "0a15ecbf43bfc7b7106da601b81be3dc469f6d76"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQwMTozNzoyOFrOIQzudA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQwMTo0NDozNVrOIQzwcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ5NTYwNA==", "bodyText": "This needs the component != null check that's part of the removed check condition because, unfortunately, people using the generator code programmatically could provide a component array with null as an array item. As an alternative, I guess we could convert from direct iterator usage to a stream and filter by Object::nonNull.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6690#discussion_r554495604", "createdAt": "2021-01-10T01:37:28Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/InlineModelResolver.java", "diffHunk": "@@ -362,38 +362,33 @@ private void flattenComposedChildren(OpenAPI openAPI, String key, List<Schema> c\n         ListIterator<Schema> listIterator = children.listIterator();\n         while (listIterator.hasNext()) {\n             Schema component = listIterator.next();\n-            if (component instanceof ObjectSchema || // for inline schema with type:object\n-                    (component != null && component.getProperties() != null &&\n-                            !component.getProperties().isEmpty())) { // for inline schema without type:object\n-                Schema op = component;\n-                if (op.get$ref() == null && op.getProperties() != null && op.getProperties().size() > 0) {\n-                    // If a `title` attribute is defined in the inline schema, codegen uses it to name the\n-                    // inline schema. Otherwise, we'll use the default naming such as InlineObject1, etc.\n-                    // We know that this is not the best way to name the model.\n-                    //\n-                    // Such naming strategy may result in issues. If the value of the 'title' attribute\n-                    // happens to match a schema defined elsewhere in the specification, 'innerModelName'\n-                    // will be the same as that other schema.\n-                    //\n-                    // To have complete control of the model naming, one can define the model separately\n-                    // instead of inline.\n-                    String innerModelName = resolveModelName(op.getTitle(), key);\n-                    Schema innerModel = modelFromProperty(openAPI, op, innerModelName);\n-                    String existing = matchGenerated(innerModel);\n-                    if (existing == null) {\n-                        openAPI.getComponents().addSchemas(innerModelName, innerModel);\n-                        addGenerated(innerModelName, innerModel);\n-                        Schema schema = new Schema().$ref(innerModelName);\n-                        schema.setRequired(op.getRequired());\n-                        listIterator.set(schema);\n-                    } else {\n-                        Schema schema = new Schema().$ref(existing);\n-                        schema.setRequired(op.getRequired());\n-                        listIterator.set(schema);\n-                    }\n+            if ((component.get$ref() == null) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2MTY2Nw=="}, "originalCommit": {"oid": "0a15ecbf43bfc7b7106da601b81be3dc469f6d76"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ5NTk4Ng==", "bodyText": "As a user with debug enabled, I'd have three concerns:\n\nThe use of debug calls in this method will cause a ton of noise as it'll be invoked with somewhat large object dumps every time for every model, potentially more than once per model\nIt's not clear from the log message what the difference is between fromModel (schema):, fromModel (base end):, and fromModel (end):.\nThe types being dumped are all different (Schema input, ADT before mutation, and ADT after mutation), which could be confusing especially if they have similar properties.\n\nAs a small point, the logging framework will interpolate content based on whether or not this log level is enabled using the {} formatter. Without this, a new string and model dump (which may or may not just be member reference string in this case, depends on the toString of the types) will be concatenated every time this line is hit regardless of whether or not debug is enabled.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.debug(\"fromModel (schema): \" + model);\n          \n          \n            \n                    LOGGER.debug(\"fromModel (schema): {}\", model);", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6690#discussion_r554495986", "createdAt": "2021-01-10T01:43:11Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java", "diffHunk": "@@ -1191,8 +1189,13 @@ public String toInstantiationType(Schema p) {\n \n     @Override\n     public CodegenModel fromModel(String name, Schema model) {\n+        LOGGER.debug(\"fromModel (schema): \" + model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15ecbf43bfc7b7106da601b81be3dc469f6d76"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ5NjAwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.debug(\"fromModel (base end): \" + mdl);\n          \n          \n            \n                    LOGGER.debug(\"fromModel (base end): {}\", mdl);", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6690#discussion_r554496008", "createdAt": "2021-01-10T01:43:25Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java", "diffHunk": "@@ -1191,8 +1189,13 @@ public String toInstantiationType(Schema p) {\n \n     @Override\n     public CodegenModel fromModel(String name, Schema model) {\n+        LOGGER.debug(\"fromModel (schema): \" + model);\n+\n         Map<String, Schema> allDefinitions = ModelUtils.getSchemas(this.openAPI);\n         CodegenModel mdl = super.fromModel(name, model);\n+\n+        LOGGER.debug(\"fromModel (base end): \" + mdl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15ecbf43bfc7b7106da601b81be3dc469f6d76"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ5NjAzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.debug(\"fromModel (end): \" + mdl);\n          \n          \n            \n                    LOGGER.debug(\"fromModel (end): {}\", mdl);", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6690#discussion_r554496033", "createdAt": "2021-01-10T01:43:37Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java", "diffHunk": "@@ -1245,6 +1250,8 @@ public CodegenModel fromModel(String name, Schema model) {\n             mdl.additionalPropertiesType = getTypeDeclaration(additionalProperties);\n         }\n \n+        LOGGER.debug(\"fromModel (end): \" + mdl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15ecbf43bfc7b7106da601b81be3dc469f6d76"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ5NjExNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.debug(\"postProcessModels: \" + cm);\n          \n          \n            \n                        LOGGER.debug(\"postProcessModels: {}\", cm);", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6690#discussion_r554496115", "createdAt": "2021-01-10T01:44:35Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RustServerCodegen.java", "diffHunk": "@@ -1529,6 +1558,8 @@ private String matchingIntType(boolean unsigned, Long inclusiveMin, Long inclusi\n             Map<String, Object> mo = (Map<String, Object>) _mo;\n             CodegenModel cm = (CodegenModel) mo.get(\"model\");\n \n+            LOGGER.debug(\"postProcessModels: \" + cm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a15ecbf43bfc7b7106da601b81be3dc469f6d76"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bcd59a70696ccc7fec93cebcf68c6f903b0ad71", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/2bcd59a70696ccc7fec93cebcf68c6f903b0ad71", "committedDate": "2021-01-23T13:51:02Z", "message": "[Core, Rust Server] Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78bdb0bb9f1c5a61e474ccbac019b741da281761", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/78bdb0bb9f1c5a61e474ccbac019b741da281761", "committedDate": "2021-01-23T13:49:35Z", "message": "[Core, Rust Server] Address review comments"}, "afterCommit": {"oid": "2bcd59a70696ccc7fec93cebcf68c6f903b0ad71", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/2bcd59a70696ccc7fec93cebcf68c6f903b0ad71", "committedDate": "2021-01-23T13:51:02Z", "message": "[Core, Rust Server] Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "472ce46a4c23b41cb9851b81e3a74d20b9be5ec6", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/472ce46a4c23b41cb9851b81e3a74d20b9be5ec6", "committedDate": "2021-01-23T14:01:36Z", "message": "Merge branch 'master' into rust-server-any-of"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "255bfd76823acc0ec55737a47989340b145e435d", "author": {"user": {"login": "richardwhiuk", "name": "Richard Whitehouse"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/255bfd76823acc0ec55737a47989340b145e435d", "committedDate": "2021-01-23T14:05:33Z", "message": "[Rust Server] Downgrade logs to trace"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2092, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}