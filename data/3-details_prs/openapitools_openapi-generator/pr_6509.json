{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NzIwMjEx", "number": 6509, "title": "[ci][cli] Moving ensures script to config-based batch generation of samples", "bodyText": "All samples scripts are now config based with a single bash entry point: bin/generate-samples.sh.\nFile cleanup using the FILES file will be done later.\nElm is currently skipped as it requires that we skip validation of the spec, so will need to be configured.\nRunning against the 179 configurations in bin/configs I see the following stats:\n[SUCCESS] Batch generation completed successfully.\n./bin/generate-samples.sh  54.20s user 6.64s system 243% cpu 24.954 total\n\nThis should address conversation in #6333.\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.", "createdAt": "2020-06-01T02:42:26Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509", "merged": true, "mergeCommit": {"oid": "60ceded171e173810198a1bf6145beb928d289d0"}, "closed": true, "closedAt": "2020-06-09T10:28:59Z", "author": {"login": "jimschubert"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmtS4EgH2gAyNDI1NzIwMjExOmFjNGViMjA2MzE1MjI4OTZlNTFjYzQyNDlhYTkwMDhjZDc5MGRkZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpif89gFqTQyNzAwNTEyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ac4eb20631522896e51cc4249aa9008cd790dde2", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ac4eb20631522896e51cc4249aa9008cd790dde2", "committedDate": "2020-05-31T15:21:33Z", "message": "Ensure CLI-level generator settings are available in additional properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "198b0366bc693a25e98acd9724aed8a588d44669", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/198b0366bc693a25e98acd9724aed8a588d44669", "committedDate": "2020-05-31T16:06:54Z", "message": "Initial conversion to yaml configs\n\nConfigs prefix with 1- need to be manually evaluated."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc8c6bc640c4d2b25b7d7a549d08f9d747068cec", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/bc8c6bc640c4d2b25b7d7a549d08f9d747068cec", "committedDate": "2020-05-31T16:58:16Z", "message": "Add \"other\" configs not in ensure-up-to-date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7c3911bcd0383e840f0894ba9c43a23760c6e0c", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b7c3911bcd0383e840f0894ba9c43a23760c6e0c", "committedDate": "2020-05-31T17:07:20Z", "message": "Add other/openapi3 files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad328b21c2098f58b141f278ab3cecf5b104c03e", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ad328b21c2098f58b141f278ab3cecf5b104c03e", "committedDate": "2020-05-31T17:13:15Z", "message": "Cleanup all generation scripts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b73136ef20909625eba8f8a1eb3b8ffa1243b1d", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/9b73136ef20909625eba8f8a1eb3b8ffa1243b1d", "committedDate": "2020-06-01T02:18:28Z", "message": "Clean up: add missed configs and fix some openapi 3 diffs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc8ee472460f9f1040a6e9b27b50aa26b739f9d6", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/cc8ee472460f9f1040a6e9b27b50aa26b739f9d6", "committedDate": "2020-06-01T02:39:41Z", "message": "Move generate-samples script, error on batch failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0686c49ebfc9c47e9e56de3dfa52531294124f5d", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/0686c49ebfc9c47e9e56de3dfa52531294124f5d", "committedDate": "2020-06-01T02:47:45Z", "message": "Temporarily disable elm which requires skip validation of spec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b5c20326445da535b3d1ca875faf677f12bc416", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/7b5c20326445da535b3d1ca875faf677f12bc416", "committedDate": "2020-06-01T22:30:19Z", "message": "CI updates (todo: run all generators through appveyor or move to github workflows)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "838dea59d33e3b434c4086c8c8a6f25226fe499b", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/838dea59d33e3b434c4086c8c8a6f25226fe499b", "committedDate": "2020-06-01T22:38:14Z", "message": "Add success count to batch generation command output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "957ab0a5adaa630b152ae95020f4eb7450f18266", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/957ab0a5adaa630b152ae95020f4eb7450f18266", "committedDate": "2020-06-02T00:59:22Z", "message": "[samples] Regenerate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41fbed74d7763ac4d54aeca8c8568a8824823eae", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/41fbed74d7763ac4d54aeca8c8568a8824823eae", "committedDate": "2020-06-02T01:05:41Z", "message": "Remove bin/windows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68bbb4ae8b1c865dc5c1c8a724f550ac8fa460a8", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/68bbb4ae8b1c865dc5c1c8a724f550ac8fa460a8", "committedDate": "2020-06-02T01:06:01Z", "message": "Generate swift5 samples in bitrise"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1aa03d42b1939a82ce0cfef9d28c9a1defa6a1f0", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/1aa03d42b1939a82ce0cfef9d28c9a1defa6a1f0", "committedDate": "2020-06-02T01:31:49Z", "message": "Merge branch 'master' into ensures\n\n* master:\n  Update Generate.java (#6515)\n  Undo PR #6451 (#6514)\n  Minor enhancement to Python client generator's code format (#6510)\n  [python-experimental] Quicken package loading (#6437)\n  [Python][Client] Fix delimiter collision issue #5981 (#6451)\n  [Java][Jersey2] add petstore integration tests (#6508)\n  UE4 client generator fixes (#6438)\n  Fix docs typos (#6478)\n  [php-laravel] Show required PHP version in docs (#6502)\n  [php-lumen] Show required PHP version in docs (#6501)\n  [Java][Jersey2] Fix typo and script, Log enhancements, HTTP signature, deserialization (#6476)\n  Remove deprecations 5.0 (#6060)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb881192839b9592fb7bcb2123618cb74fc089b8", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/fb881192839b9592fb7bcb2123618cb74fc089b8", "committedDate": "2020-06-02T01:54:31Z", "message": "Expand user input glob pattern"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "582f81478cedabb1cb657d70bd34792ad5332922", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/582f81478cedabb1cb657d70bd34792ad5332922", "committedDate": "2020-06-02T02:00:48Z", "message": "Regenerate samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "898d28c166030b72c87eb56f1955a85803259b09", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/898d28c166030b72c87eb56f1955a85803259b09", "committedDate": "2020-06-02T02:14:15Z", "message": "Update PR template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "886ed4c42f72f97faa2fd8f0697e467f958e2215", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/886ed4c42f72f97faa2fd8f0697e467f958e2215", "committedDate": "2020-06-02T02:46:11Z", "message": "Support config based generateAliasAsModel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef688cc74e00795f4135c88314c277f5aa27d5a", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/bef688cc74e00795f4135c88314c277f5aa27d5a", "committedDate": "2020-06-02T02:46:38Z", "message": "[samples] Regenerate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8727e8cfc53846146bbe36d220a9fd9b5ca0f1be", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/8727e8cfc53846146bbe36d220a9fd9b5ca0f1be", "committedDate": "2020-06-03T01:11:26Z", "message": "[rust] Generate as alias for all samples configs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62e9c1a84040500f253e494c3585c1a6b3d88bc8", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/62e9c1a84040500f253e494c3585c1a6b3d88bc8", "committedDate": "2020-06-03T01:29:27Z", "message": "[csharp] Move test staged file changes to in-directory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b246774e0f686a049877a262c05586d46aa22ba0", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b246774e0f686a049877a262c05586d46aa22ba0", "committedDate": "2020-06-03T01:52:36Z", "message": "Include \"live\" test files and ignore test cache files from samples.ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2790efd932db91e5ab3bfed86b08af1dfede5a2", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e2790efd932db91e5ab3bfed86b08af1dfede5a2", "committedDate": "2020-06-03T01:53:45Z", "message": "Remove concept of samples.ci staging\n\nGenerators support .openapi-generator-ignore, allowing maintainers to\nexplicitly ignore the regeneration of files which have been modified.\n\nNote that the tooling does not overwrite test files whenever those files\nexist, and it's not entirely necessary to add test files to the ignore\nfile."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9aa567596da4a943443fb5d5e85dd36a33385ac0", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/9aa567596da4a943443fb5d5e85dd36a33385ac0", "committedDate": "2020-06-03T01:55:37Z", "message": "Merge branch 'master' into ensures\n\n* master:\n  [Go][Experimental] Fix discriminator lookup (#6521)\n  Typescript-rxjs: print param name (#6368)\n  add oneof discrimistrator lookup to go experimental (#6517)\n  [PowerShell] Add useOneOfDiscriminatorLookup option (#6516)\n  add discriminator support to anyOf powershell client (#6512)\n  [Go][Experimental] Add discriminator support to anyOf (#6511)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "305e52f358a19ee4d77c770bead6b5b1872a18d9", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/305e52f358a19ee4d77c770bead6b5b1872a18d9", "committedDate": "2020-06-03T02:08:26Z", "message": "Re-add meta generator scripts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "818e14130fab70519dc26543ab2fe6996879fb8d", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/818e14130fab70519dc26543ab2fe6996879fb8d", "committedDate": "2020-06-03T02:20:14Z", "message": "Modify ensure-up-to-date to log stdout, so script does not look like it hangs on slower machines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "679a1279cde09d2ce267d092675beef1580332fd", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/679a1279cde09d2ce267d092675beef1580332fd", "committedDate": "2020-06-03T02:20:31Z", "message": "[csharp] Regenerate sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a76b99189c7517f706f237ef0d9ba8cfa4c5422f", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a76b99189c7517f706f237ef0d9ba8cfa4c5422f", "committedDate": "2020-06-03T03:54:48Z", "message": "Set generateAliasAsModel CodegenConfigurator#toContext\n\nThis ensures the property (which is effectively a thread-local) gets set\nas expected if the caller resets GlobalSettings as is done in the\nGenerateBatch command."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "631987949a9e31725dd29efe985bbe6349dc270a", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/631987949a9e31725dd29efe985bbe6349dc270a", "committedDate": "2020-06-03T03:57:16Z", "message": "[rust] Regenerate samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35ebf9bebb4bee654d5aa256a3532221f5e5e1b1", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/35ebf9bebb4bee654d5aa256a3532221f5e5e1b1", "committedDate": "2020-06-04T00:32:23Z", "message": "Re-enable elm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "549ca380c930b354be886bfbfdecbf59f58b96f1", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/549ca380c930b354be886bfbfdecbf59f58b96f1", "committedDate": "2020-06-04T01:43:02Z", "message": "Merge branch 'master' into ensures\n\n* master:\n  [samples] regenerate (#6533)\n  [python] Fix date-time parsing (#6458)\n  Register OAuth2ClientContext as bean (#6172)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ee614f43481cd8fb7c2ca7c72e19d1193edc382", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/1ee614f43481cd8fb7c2ca7c72e19d1193edc382", "committedDate": "2020-06-04T02:06:23Z", "message": "[java] Support OffsetDateTime example, fail ensures script on any generation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e5e81bf9645d7890f750c8c4495a109bae29628", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/4e5e81bf9645d7890f750c8c4495a109bae29628", "committedDate": "2020-06-04T02:06:34Z", "message": "[samples] Regenerate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ddc45cffe1750d2221e26d70506b02c8e2b34a4", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/9ddc45cffe1750d2221e26d70506b02c8e2b34a4", "committedDate": "2020-06-06T02:19:33Z", "message": "Merge branch 'master' into ensures\n\n* master:\n  Fix typescript generator for parameter collectionFormat for pipes ssv (#6553)\n  [C++][Pistache] Catch HttpError from user-provided handler (#6520)\n  remove scala related profile from the pom (#6554)\n  move ruby tests to travis (#6555)\n  [Java][jersey2] fix cast error for default value in DateTimeOffset object (#6547)\n  [Swift] fix GET request with array parameter (#6549)\n  [kotlin][spring] Fix ApiUtil compilation (#6084)\n  update python samples\n  [Python] Fixed docstrings in api.mustache (#6391)\n  [BUG][python] Support named arrays (#6493)\n  [Go] whitelist AdditionalProperties in the field name (#6543)\n  [kotlin][client] remove tabs usage (#6526)\n  [PS] automatically derive discriminator mapping for oneOf/anyOf  (#6542)\n  [C++][Ue4] various bus fixes (#6539)\n  Fix incorrect npx command (#6537)\n  update pester to 5.x (#6536)\n  comment out openapi3 java jersey2-java8 tests\n  add additional properties support to powershell client generator (#6528)\n  [Go][Experimental] Support additionalProperties (#6525)\n  #5476 [kotlin] [spring] fix swagger and spring annotation for defaultValue (#6101)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2741747c7c2bbcdda8a407eb0405ab320d5219d9", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/2741747c7c2bbcdda8a407eb0405ab320d5219d9", "committedDate": "2020-06-06T02:33:39Z", "message": "Fix jersey2-java8 ignore file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzA5NTU2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#pullrequestreview-425709556", "createdAt": "2020-06-06T03:28:06Z", "commit": {"oid": "2741747c7c2bbcdda8a407eb0405ab320d5219d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMzoyODowNlrOGgBkmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMzoyODowNlrOGgBkmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMzM3MQ==", "bodyText": "I see that these are for both v2.X and v3.X samples, how about updating this comment to:\n# generate all petstore samples (client, servers, doc) includes v2.X + v3.X documents", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436233371", "createdAt": "2020-06-06T03:28:06Z", "author": {"login": "spacether"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2741747c7c2bbcdda8a407eb0405ab320d5219d9"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68763d4cca178ad1c2c9c41249f57b1185add978", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/68763d4cca178ad1c2c9c41249f57b1185add978", "committedDate": "2020-06-06T03:49:29Z", "message": "Fix elm spec validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/97e84ebbc396f0f39aa33124d10975e5e1e2bf5a", "committedDate": "2020-06-06T03:58:23Z", "message": "Force UTC in sample generation to avoid timezone conflicts during generation (user vs ci)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzEyMDYy", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#pullrequestreview-425712062", "createdAt": "2020-06-06T04:18:48Z", "commit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDoxODo0OFrOGgBvKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDoxODo0OFrOGgBvKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjA3NA==", "bodyText": "So this other folder naming is still confusing to me\nThis comment says that all samples in the other folder are v3 samples\nlooking in them I see v2 samples. Is this comment incorrect?\nAre these v2 or v3?\nAre they non-petstore samples?\nCan you clarify this in the comment or the folder name?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436236074", "createdAt": "2020-06-06T04:18:48Z", "author": {"login": "spacether"}, "path": "CI/.drone.yml", "diffHunk": "@@ -38,6 +38,6 @@ steps:\n   # generate test scripts\n   - /bin/bash bin/tests/run-all-test\n   # generate all petstore samples (client, servers, doc)\n-  - /bin/bash bin/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh\n   # generate all petstore samples (openapi3)\n-  - /bin/bash bin/openapi3/run-all-petstore\n+  - /bin/bash bin/generate-samples.sh bin/configs/other/*.yaml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzEyNjUy", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#pullrequestreview-425712652", "createdAt": "2020-06-06T04:30:44Z", "commit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozMDo0NFrOGgBx4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozMDo0NFrOGgBx4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNjc2OA==", "bodyText": "Aren't these samples also run in Drone when we invoke /bin/bash bin/generate-samples.sh why run them twice?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436236768", "createdAt": "2020-06-06T04:30:44Z", "author": {"login": "spacether"}, "path": "CI/bitrise.yml", "diffHunk": "@@ -38,7 +38,7 @@ workflows:\n \n             set -e\n \n-            sh bin/swift5-all.sh\n+            sh bin/generate-samples.sh bin/configs/swift5-*.yaml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzEyOTQ0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#pullrequestreview-425712944", "createdAt": "2020-06-06T04:36:07Z", "commit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozNjowOFrOGgBzHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozNjowOFrOGgBzHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzA4Nw==", "bodyText": "Note: this still exists at https://github.com/OpenAPITools/openapi-generator/blob/ensures/samples/client/petstore/java/jersey2-java8/src/test/java/org/openapitools/client/ApiClientTest.java", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436237087", "createdAt": "2020-06-06T04:36:08Z", "author": {"login": "spacether"}, "path": "CI/samples.ci/client/petstore/java/test-manual/jersey2/ApiClientTest.java", "diffHunk": "@@ -1,249 +0,0 @@\n-package org.openapitools.client;\n-\n-import org.openapitools.client.auth.*;\n-\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.*;\n-\n-import org.junit.*;\n-import static org.junit.Assert.*;\n-\n-\n-public class ApiClientTest {\n-    ApiClient apiClient = null;\n-\n-    @Before\n-    public void setup() {\n-        apiClient = new ApiClient();\n-    }\n-\n-    @Test\n-    public void testParseAndFormatDate() {\n-        // default date format\n-        String dateStr = \"2015-11-07T03:49:09.356Z\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09.356Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T05:49:09.356+02:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T02:49:09.356-01:00\")));\n-\n-        // custom date format: without milli-seconds, custom time zone\n-        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\", Locale.ROOT);\n-        format.setTimeZone(TimeZone.getTimeZone(\"GMT+10\"));\n-        apiClient.setDateFormat(format);\n-        dateStr = \"2015-11-07T13:49:09+10:00\";\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09+00:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T03:49:09Z\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T00:49:09-03:00\")));\n-        assertEquals(dateStr, apiClient.formatDate(apiClient.parseDate(\"2015-11-07T13:49:09+10:00\")));\n-    }\n-\n-    @Test\n-    public void testIsJsonMime() {\n-        assertFalse(apiClient.isJsonMime(null));\n-        assertFalse(apiClient.isJsonMime(\"\"));\n-        assertFalse(apiClient.isJsonMime(\"text/plain\"));\n-        assertFalse(apiClient.isJsonMime(\"application/xml\"));\n-        assertFalse(apiClient.isJsonMime(\"application/jsonp\"));\n-        assertFalse(apiClient.isJsonMime(\"example/json\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+jsonx\"));\n-        assertFalse(apiClient.isJsonMime(\"example/foo+bar+xjson\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/json\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json; charset=UTF8\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/JSON\"));\n-\n-        assertTrue(apiClient.isJsonMime(\"application/problem+json\"));\n-        assertTrue(apiClient.isJsonMime(\"APPLICATION/PROBLEM+JSON\"));\n-        assertTrue(apiClient.isJsonMime(\"application/json\\t\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+bar+json\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json;x;y\"));\n-        assertTrue(apiClient.isJsonMime(\"example/foo+json\\t;\"));\n-        assertTrue(apiClient.isJsonMime(\"Example/fOO+JSON\"));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderAccept() {\n-        String[] accepts = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"APPLICATION/XML\", \"APPLICATION/JSON\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain,application/xml\", apiClient.selectHeaderAccept(accepts));\n-\n-        accepts = new String[]{};\n-        assertNull(apiClient.selectHeaderAccept(accepts));\n-    }\n-\n-    @Test\n-    public void testSelectHeaderContentType() {\n-        String[] contentTypes = {\"application/json\", \"application/xml\"};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"APPLICATION/JSON\", \"APPLICATION/XML\"};\n-        assertEquals(\"APPLICATION/JSON\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"application/xml\", \"application/json; charset=UTF8\"};\n-        assertEquals(\"application/json; charset=UTF8\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{\"text/plain\", \"application/xml\"};\n-        assertEquals(\"text/plain\", apiClient.selectHeaderContentType(contentTypes));\n-\n-        contentTypes = new String[]{};\n-        assertEquals(\"application/json\", apiClient.selectHeaderContentType(contentTypes));\n-    }\n-\n-    @Test\n-    public void testGetAuthentications() {\n-        Map<String, Authentication> auths = apiClient.getAuthentications();\n-\n-        Authentication auth = auths.get(\"api_key\");\n-        assertNotNull(auth);\n-        assertTrue(auth instanceof ApiKeyAuth);\n-        ApiKeyAuth apiKeyAuth = (ApiKeyAuth) auth;\n-        assertEquals(\"header\", apiKeyAuth.getLocation());\n-        assertEquals(\"api_key\", apiKeyAuth.getParamName());\n-\n-        auth = auths.get(\"petstore_auth\");\n-        assertTrue(auth instanceof OAuth);\n-        assertSame(auth, apiClient.getAuthentication(\"petstore_auth\"));\n-\n-        assertNull(auths.get(\"unknown\"));\n-\n-        try {\n-            auths.put(\"my_auth\", new HttpBasicAuth());\n-            fail(\"the authentications returned should not be modifiable\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-    }\n-\n-    @Test\n-    public void testSetUsernameAndPassword() {\n-        HttpBasicAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof HttpBasicAuth) {\n-                auth = (HttpBasicAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-\n-        apiClient.setUsername(\"my-username\");\n-        apiClient.setPassword(\"my-password\");\n-        assertEquals(\"my-username\", auth.getUsername());\n-        assertEquals(\"my-password\", auth.getPassword());\n-\n-        // reset values\n-        auth.setUsername(null);\n-        auth.setPassword(null);\n-    }\n-\n-    @Test\n-    public void testSetApiKeyAndPrefix() {\n-        ApiKeyAuth auth = null;\n-        for (Authentication _auth : apiClient.getAuthentications().values()) {\n-            if (_auth instanceof ApiKeyAuth) {\n-                auth = (ApiKeyAuth) _auth;\n-                break;\n-            }\n-        }\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-\n-        apiClient.setApiKey(\"my-api-key\");\n-        apiClient.setApiKeyPrefix(\"Token\");\n-        assertEquals(\"my-api-key\", auth.getApiKey());\n-        assertEquals(\"Token\", auth.getApiKeyPrefix());\n-\n-        // reset values\n-        auth.setApiKey(null);\n-        auth.setApiKeyPrefix(null);\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenNameIsInvalid() throws Exception {\n-        List<Pair> pairs_a = apiClient.parameterToPairs(\"csv\", null, new Integer(1));\n-        List<Pair> pairs_b = apiClient.parameterToPairs(\"csv\", \"\", new Integer(1));\n-\n-        assertTrue(pairs_a.isEmpty());\n-        assertTrue(pairs_b.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNull() throws Exception {\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", null);\n-\n-        assertTrue(pairs.isEmpty());\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsEmptyStrings() throws Exception {\n-\n-        // single empty string\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", \"param-a\", \" \");\n-        assertEquals(1, pairs.size());\n-\n-        // list of empty strings\n-        List<String> strs = new ArrayList<String>();\n-        strs.add(\" \");\n-        strs.add(\" \");\n-        strs.add(\" \");\n-\n-        List<Pair> concatStrings = apiClient.parameterToPairs(\"csv\", \"param-a\", strs);\n-\n-        assertEquals(1, concatStrings.size());\n-        assertFalse(concatStrings.get(0).getValue().isEmpty()); // should contain some delimiters\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsNotCollection() throws Exception {\n-        String name = \"param-a\";\n-        Integer value = 1;\n-\n-        List<Pair> pairs = apiClient.parameterToPairs(\"csv\", name, value);\n-\n-        assertEquals(1, pairs.size());\n-        assertEquals(value, Integer.valueOf(pairs.get(0).getValue()));\n-    }\n-\n-    @Test\n-    public void testParameterToPairsWhenValueIsCollection() throws Exception {\n-        Map<String, String> collectionFormatMap = new HashMap<String, String>();\n-        collectionFormatMap.put(\"csv\", \",\");\n-        collectionFormatMap.put(\"tsv\", \"\\t\");\n-        collectionFormatMap.put(\"ssv\", \" \");\n-        collectionFormatMap.put(\"pipes\", \"\\\\|\");\n-        collectionFormatMap.put(\"\", \",\"); // no format, must default to csv\n-        collectionFormatMap.put(\"unknown\", \",\"); // all other formats, must default to csv\n-\n-        String name = \"param-a\";\n-\n-        List<Object> values = new ArrayList<Object>();\n-        values.add(\"value-a\");\n-        values.add(123);\n-        values.add(new Date());\n-\n-        // check for multi separately\n-        List<Pair> multiPairs = apiClient.parameterToPairs(\"multi\", name, values);\n-        assertEquals(values.size(), multiPairs.size());\n-\n-        // all other formats\n-        for (String collectionFormat : collectionFormatMap.keySet()) {\n-            List<Pair> pairs = apiClient.parameterToPairs(collectionFormat, name, values);\n-\n-            assertEquals(1, pairs.size());\n-\n-            String delimiter = collectionFormatMap.get(collectionFormat);\n-            String[] pairValueSplit = pairs.get(0).getValue().split(delimiter);\n-\n-            // must equal input values\n-            assertEquals(values.size(), pairValueSplit.length);\n-        }\n-    }\n-}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 249}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzEzMDEx", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#pullrequestreview-425713011", "createdAt": "2020-06-06T04:37:43Z", "commit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozNzo0M1rOGgBzdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozNzo0M1rOGgBzdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzE3Mw==", "bodyText": "From this PR, it looks like this test no longer exists, but it does exist at https://github.com/OpenAPITools/openapi-generator/blob/ensures/samples/client/petstore/java/okhttp-gson/src/test/java/org/openapitools/client/JSONTest.java", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436237173", "createdAt": "2020-06-06T04:37:43Z", "author": {"login": "spacether"}, "path": "CI/samples.ci/client/petstore/java/test-manual/okhttp-gson/JSONTest.java", "diffHunk": "@@ -1,202 +0,0 @@\n-package org.openapitools.client;\n-\n-import com.google.gson.reflect.TypeToken;\n-\n-import org.openapitools.client.model.Order;\n-\n-import java.lang.Exception;\n-import java.lang.reflect.Type;\n-import java.nio.charset.StandardCharsets;\n-import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.GregorianCalendar;\n-import java.util.Locale;\n-import java.util.TimeZone;\n-\n-import okio.ByteString;\n-import org.junit.*;\n-import org.threeten.bp.LocalDate;\n-import org.threeten.bp.OffsetDateTime;\n-import org.threeten.bp.ZoneId;\n-import org.threeten.bp.ZoneOffset;\n-import org.threeten.bp.format.DateTimeFormatter;\n-\n-import static org.junit.Assert.*;\n-\n-public class JSONTest {\n-    private ApiClient apiClient = null;\n-    private JSON json = null;\n-    private Order order = null;\n-\n-    @Before\n-    public void setup() {\n-        apiClient = new ApiClient();\n-        json = apiClient.getJSON();\n-        order = new Order();\n-    }\n-\n-    @Test\n-    public void testSqlDateTypeAdapter() {\n-        final String str = \"\\\"2015-11-07\\\"\";\n-        final java.sql.Date date = java.sql.Date.valueOf(\"2015-11-07\");\n-\n-        assertEquals(str, json.serialize(date));\n-        assertEquals(json.deserialize(str, java.sql.Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.356\" + getCurrentTimezoneOffset() + \"\\\"\", java.sql.Date.class).toString(), date.toString());\n-\n-        // custom date format: without day\n-        DateFormat format = new SimpleDateFormat(\"yyyy-MM\", Locale.ROOT);\n-        apiClient.setSqlDateFormat(format);\n-        String dateStr = \"\\\"2015-11\\\"\";\n-        assertEquals(dateStr, json.serialize(json.deserialize(\"\\\"2015-11-07T03:49:09Z\\\"\", java.sql.Date.class)));\n-        assertEquals(dateStr, json.serialize(json.deserialize(\"\\\"2015-11\\\"\", java.sql.Date.class)));\n-    }\n-\n-    @Test\n-    public void testDateTypeAdapter() {\n-        Calendar cal = new GregorianCalendar(2015, 10, 7, 3, 49, 9);\n-        cal.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T05:49:09+02\\\"\", Date.class), cal.getTime());\n-\n-        cal.set(Calendar.MILLISECOND, 300);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.3Z\\\"\", Date.class), cal.getTime());\n-\n-        cal.set(Calendar.MILLISECOND, 356);\n-        Date date = cal.getTime();\n-\n-        final String utcDate = \"\\\"2015-11-07T03:49:09.356Z\\\"\";\n-        assertEquals(json.deserialize(utcDate, Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.356+00:00\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T05:49:09.356+02:00\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T02:49:09.356-01:00\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.356Z\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.356+00\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T02:49:09.356-0100\\\"\", Date.class), date);\n-        assertEquals(json.deserialize(\"\\\"2015-11-07T03:49:09.356456789Z\\\"\", Date.class), date);\n-\n-        assertEquals(utcDate, json.serialize(date));\n-\n-        // custom datetime format: without milli-seconds, custom time zone\n-        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\", Locale.ROOT);\n-        format.setTimeZone(TimeZone.getTimeZone(\"GMT+10\"));\n-        apiClient.setDateFormat(format);\n-\n-        String dateStr = \"\\\"2015-11-07T13:49:09+10:00\\\"\";\n-        assertEquals(dateStr, json.serialize(json.deserialize(\"\\\"2015-11-07T03:49:09+00:00\\\"\", Date.class)));\n-        assertEquals(dateStr, json.serialize(json.deserialize(\"\\\"2015-11-07T03:49:09Z\\\"\", Date.class)));\n-        assertEquals(dateStr, json.serialize(json.deserialize(\"\\\"2015-11-07T00:49:09-03:00\\\"\", Date.class)));\n-\n-        try {\n-            // invalid time zone format\n-            json.deserialize(\"\\\"2015-11-07T03:49:09+00\\\"\", Date.class);\n-            fail(\"json parsing should fail\");\n-        } catch (RuntimeException e) {\n-            // OK\n-        }\n-        try {\n-            // unexpected miliseconds\n-            json.deserialize(\"\\\"2015-11-07T03:49:09.000Z\\\"\", Date.class);\n-            fail(\"json parsing should fail\");\n-        } catch (RuntimeException e) {\n-            // OK\n-        }\n-\n-    }\n-\n-    @Test\n-    public void testOffsetDateTimeTypeAdapter() {\n-        final String str = \"\\\"2016-09-09T08:02:03.123-03:00\\\"\";\n-        OffsetDateTime date = OffsetDateTime.of(2016, 9, 9, 8, 2, 3, 123000000, ZoneOffset.of(\"-3\"));\n-\n-        assertEquals(str, json.serialize(date));\n-        //Use toString() instead of isEqual to verify that the offset is preserved\n-        assertEquals(json.deserialize(str, OffsetDateTime.class).toString(), date.toString());\n-    }\n-\n-    @Test\n-    public void testLocalDateTypeAdapter() {\n-        final String str = \"\\\"2016-09-09\\\"\";\n-        final LocalDate date = LocalDate.of(2016, 9, 9);\n-\n-        assertEquals(str, json.serialize(date));\n-        assertEquals(json.deserialize(str, LocalDate.class), date);\n-    }\n-\n-\n-    @Test\n-    public void testDefaultDate() throws Exception {\n-        final DateTimeFormatter datetimeFormat = DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n-        final String dateStr = \"2015-11-07T14:11:05.267Z\";\n-        order.setShipDate(datetimeFormat.parse(dateStr, OffsetDateTime.FROM));\n-\n-        String str = json.serialize(order);\n-        Type type = new TypeToken<Order>() { }.getType();\n-        Order o = json.deserialize(str, type);\n-        assertEquals(dateStr, datetimeFormat.format(o.getShipDate()));\n-    }\n-\n-    @Test\n-    public void testCustomDate() throws Exception {\n-        final DateTimeFormatter datetimeFormat = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.of(\"Etc/GMT+2\"));\n-        final String dateStr = \"2015-11-07T14:11:05-02:00\";\n-        order.setShipDate(datetimeFormat.parse(dateStr, OffsetDateTime.FROM));\n-\n-        String str = json.serialize(order);\n-        Type type = new TypeToken<Order>() { }.getType();\n-        Order o = json.deserialize(str, type);\n-        assertEquals(dateStr, datetimeFormat.format(o.getShipDate()));\n-    }\n-\n-    @Test\n-    public void testByteArrayTypeAdapterSerialization() {\n-        // Arrange\n-        final String expectedBytesAsString = \"Let's pretend this a jpg or something\";\n-        final byte[] expectedBytes = expectedBytesAsString.getBytes(StandardCharsets.UTF_8);\n-\n-        // Act\n-        String serializedBytesWithQuotes = json.serialize(expectedBytes);\n-\n-        // Assert\n-        String serializedBytes = serializedBytesWithQuotes.substring(1, serializedBytesWithQuotes.length() - 1);\n-        if (json.getGson().htmlSafe()) {\n-            serializedBytes = serializedBytes.replaceAll(\"\\\\\\\\u003d\", \"=\");\n-        }\n-        ByteString actualAsByteString = ByteString.decodeBase64(serializedBytes);\n-        byte[] actualBytes = actualAsByteString.toByteArray();\n-        assertEquals(expectedBytesAsString, new String(actualBytes, StandardCharsets.UTF_8));\n-    }\n-\n-    @Test\n-    public void testByteArrayTypeAdapterDeserialization() {\n-        // Arrange\n-        final String expectedBytesAsString = \"Let's pretend this a jpg or something\";\n-        final byte[] expectedBytes = expectedBytesAsString.getBytes(StandardCharsets.UTF_8);\n-        final ByteString expectedByteString = ByteString.of(expectedBytes);\n-        final String serializedBytes = expectedByteString.base64();\n-        final String serializedBytesWithQuotes = \"\\\"\" + serializedBytes + \"\\\"\";\n-        Type type = new TypeToken<byte[]>() { }.getType();\n-\n-        // Act\n-        byte[] actualDeserializedBytes = json.deserialize(serializedBytesWithQuotes, type);\n-\n-        // Assert\n-        assertEquals(expectedBytesAsString, new String(actualDeserializedBytes, StandardCharsets.UTF_8));\n-    }\n-\n-    // Obtained 22JAN2018 from stackoverflow answer by PuguaSoft https://stackoverflow.com/questions/11399491/java-timezone-offset\n-    // Direct link https://stackoverflow.com/a/16680815/3166133\n-    public static String getCurrentTimezoneOffset() {\n-\n-        TimeZone tz = TimeZone.getDefault();\n-        Calendar cal = GregorianCalendar.getInstance(tz, Locale.ROOT);\n-        int offsetInMillis = tz.getOffset(cal.getTimeInMillis());\n-\n-        String offset = String.format(Locale.ROOT,\"%02d:%02d\", Math.abs(offsetInMillis / 3600000), Math.abs((offsetInMillis / 60000) % 60));\n-        offset = (offsetInMillis >= 0 ? \"+\" : \"-\") + offset;\n-\n-        return offset;\n-    }\n-}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 202}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzEzMDkx", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#pullrequestreview-425713091", "createdAt": "2020-06-06T04:39:38Z", "commit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozOTozOFrOGgBzwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDozOTozOFrOGgBzwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzI0OA==", "bodyText": "From this PR, it looks like this test no longer exists, but it does exist at https://github.com/OpenAPITools/openapi-generator/blob/ensures/samples/client/petstore/java/okhttp-gson/src/test/java/org/openapitools/client/api/PetApiTest.java", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#discussion_r436237248", "createdAt": "2020-06-06T04:39:38Z", "author": {"login": "spacether"}, "path": "CI/samples.ci/client/petstore/java/test-manual/okhttp-gson/api/PetApiTest.java", "diffHunk": "@@ -1,564 +0,0 @@\n-/*\n- * OpenAPI Petstore\n- * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \\\" \\\\\n- *\n- * OpenAPI spec version: 1.0.0\n- *\n- *\n- * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n- * https://openapi-generator.tech\n- * Do not edit the class manually.\n- */\n-\n-\n-package org.openapitools.client.api;\n-\n-import org.openapitools.client.ApiException;\n-import org.openapitools.client.model.Pet;\n-import org.openapitools.client.auth.*;\n-import org.openapitools.client.model.*;\n-import org.openapitools.client.*;\n-\n-import java.lang.reflect.Type;\n-import java.util.Arrays;\n-import java.util.ArrayList;\n-import java.util.concurrent.ConcurrentLinkedQueue;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.ThreadLocalRandom;\n-import java.io.BufferedWriter;\n-import java.io.File;\n-import java.io.FileWriter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.junit.*;\n-\n-import static org.junit.Assert.*;\n-\n-/**\n- * API tests for PetApi\n- */\n-public class PetApiTest {\n-\n-    private PetApi api = new PetApi();\n-    private static final Logger LOG = LoggerFactory.getLogger(PetApiTest.class);\n-    // In the circle.yml file, /etc/host is configured with an entry to resolve petstore.swagger.io to 127.0.0.1\n-    private static String basePath = \"http://petstore.swagger.io:80/v2\";\n-\n-    @Before\n-    public void setup() {\n-        // setup authentication\n-        ApiKeyAuth apiKeyAuth = (ApiKeyAuth) api.getApiClient().getAuthentication(\"api_key\");\n-        apiKeyAuth.setApiKey(\"special-key\");\n-        api.getApiClient().setBasePath(basePath);\n-    }\n-\n-    @Test\n-    public void testApiClient() {\n-        // the default api client is used\n-        assertEquals(Configuration.getDefaultApiClient(), api.getApiClient());\n-        assertNotNull(api.getApiClient());\n-        assertEquals(basePath, api.getApiClient().getBasePath());\n-        assertFalse(api.getApiClient().isDebugging());\n-\n-        ApiClient oldClient = api.getApiClient();\n-\n-        ApiClient newClient = new ApiClient();\n-        newClient.setVerifyingSsl(true);\n-        newClient.setBasePath(\"http://example.com\");\n-        newClient.setDebugging(true);\n-\n-        // set api client via constructor\n-        api = new PetApi(newClient);\n-        assertNotNull(api.getApiClient());\n-        assertEquals(\"http://example.com\", api.getApiClient().getBasePath());\n-        assertTrue(api.getApiClient().isDebugging());\n-\n-        // set api client via setter method\n-        api.setApiClient(oldClient);\n-        assertNotNull(api.getApiClient());\n-        assertEquals(basePath, api.getApiClient().getBasePath());\n-        assertFalse(api.getApiClient().isDebugging());\n-    }\n-\n-    @Test\n-    public void testCreateAndGetPet() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-\n-        Pet fetched = api.getPetById(pet.getId());\n-        assertPetMatches(pet, fetched);\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testCreateAndGetPetWithHttpInfo() throws Exception {\n-        Pet pet = createPet();\n-        api.addPetWithHttpInfo(pet);\n-\n-        ApiResponse<Pet> resp = api.getPetByIdWithHttpInfo(pet.getId());\n-        assertEquals(200, resp.getStatusCode());\n-        assertEquals(\"application/json\", resp.getHeaders().get(\"Content-Type\").get(0));\n-        Pet fetched = resp.getData();\n-\n-        assertPetMatches(pet, fetched);\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testCreateAndGetPetAsync() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-        // to store returned Pet or error message/exception\n-        final Map<String, Object> result = new HashMap<String, Object>();\n-\n-        api.getPetByIdAsync(pet.getId(), new ApiCallback<Pet>() {\n-            @Override\n-            public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {\n-                result.put(\"error\", e.getMessage());\n-            }\n-\n-            @Override\n-            public void onSuccess(Pet pet, int statusCode, Map<String, List<String>> responseHeaders) {\n-                result.put(\"pet\", pet);\n-            }\n-\n-            @Override\n-            public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {\n-                //empty\n-            }\n-\n-            @Override\n-            public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {\n-                //empty\n-            }\n-        });\n-\n-        // wait for the asynchronous call to finish (at most 10 seconds)\n-        final int maxTry = 10;\n-        int tryCount = 1;\n-        Pet fetched = null;\n-        do {\n-            if (tryCount > maxTry) fail(\"have not got result of getPetByIdAsync after 10 seconds\");\n-            Thread.sleep(1000);\n-            tryCount += 1;\n-            if (result.get(\"error\") != null) fail((String) result.get(\"error\"));\n-            if (result.get(\"pet\") != null) {\n-                fetched = (Pet) result.get(\"pet\");\n-                break;\n-            }\n-        } while (result.isEmpty());\n-        assertPetMatches(pet, fetched);\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testCreateAndGetPetAsyncInvalidID() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-        // to store returned Pet or error message/exception\n-        final Map<String, Object> result = new HashMap<String, Object>();\n-\n-        // test getting a nonexistent pet\n-        result.clear();\n-        api.getPetByIdAsync(-10000L, new ApiCallback<Pet>() {\n-            @Override\n-            public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {\n-                result.put(\"exception\", e);\n-            }\n-\n-            @Override\n-            public void onSuccess(Pet pet, int statusCode, Map<String, List<String>> responseHeaders) {\n-                result.put(\"pet\", pet);\n-            }\n-\n-            @Override\n-            public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {\n-                //empty\n-            }\n-\n-            @Override\n-            public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {\n-                //empty\n-            }\n-        });\n-\n-        // wait for the asynchronous call to finish (at most 10 seconds)\n-        final int maxTry = 10;\n-        int tryCount = 1;\n-        Pet fetched = null;\n-        ApiException exception = null;\n-\n-        do {\n-            if (tryCount > maxTry) fail(\"have not got result of getPetByIdAsync after 10 seconds\");\n-            Thread.sleep(1000);\n-            tryCount += 1;\n-            if (result.get(\"pet\") != null) fail(\"expected an error\");\n-            if (result.get(\"exception\") != null) {\n-                exception = (ApiException) result.get(\"exception\");\n-                break;\n-            }\n-        } while (result.isEmpty());\n-        assertNotNull(exception);\n-        assertEquals(404, exception.getCode());\n-        assertEquals(\"Not Found\", exception.getMessage());\n-        assertEquals(\"application/json\", exception.getResponseHeaders().get(\"Content-Type\").get(0));\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testCreateAndGetMultiplePetsAsync() throws Exception {\n-        Pet pet1 = createPet();\n-        Pet pet2 = createPet();\n-\n-        final CountDownLatch addLatch = new CountDownLatch(2);\n-        final TestApiCallback<Void> addCallback1 = new TestApiCallback<Void>(addLatch);\n-        final TestApiCallback<Void> addCallback2 = new TestApiCallback<Void>(addLatch);\n-\n-        // Make 2 simultaneous calls\n-        api.addPetAsync(pet1, addCallback1);\n-        api.addPetAsync(pet2, addCallback2);\n-\n-        // wait for both asynchronous calls to finish (at most 10 seconds)\n-        assertTrue(addLatch.await(10, TimeUnit.SECONDS));\n-\n-        assertTrue(addCallback1.isDone());\n-        assertTrue(addCallback2.isDone());\n-\n-        if (!addCallback1.isSuccess()) throw addCallback1.getException();\n-        if (!addCallback2.isSuccess()) throw addCallback2.getException();\n-\n-        assertValidProgress(addCallback1.getUploadProgress());\n-        assertValidProgress(addCallback2.getUploadProgress());\n-\n-        final CountDownLatch getLatch = new CountDownLatch(3);\n-        final TestApiCallback<Pet> getCallback1 = new TestApiCallback<Pet>(getLatch);\n-        final TestApiCallback<Pet> getCallback2 = new TestApiCallback<Pet>(getLatch);\n-        final TestApiCallback<Pet> getCallback3 = new TestApiCallback<Pet>(getLatch);\n-\n-        api.getPetByIdAsync(pet1.getId(), getCallback1);\n-        api.getPetByIdAsync(pet2.getId(), getCallback2);\n-        // Get nonexistent pet\n-        api.getPetByIdAsync(-10000L, getCallback3);\n-\n-        // wait for all asynchronous calls to finish (at most 10 seconds)\n-        assertTrue(getLatch.await(10, TimeUnit.SECONDS));\n-\n-        assertTrue(getCallback1.isDone());\n-        assertTrue(getCallback2.isDone());\n-        assertTrue(getCallback3.isDone());\n-\n-        if (!getCallback1.isSuccess()) throw getCallback1.getException();\n-        if (!getCallback2.isSuccess()) throw getCallback2.getException();\n-\n-        assertPetMatches(pet1, getCallback1.getResult());\n-        assertPetMatches(pet2, getCallback2.getResult());\n-\n-        assertValidProgress(getCallback1.getDownloadProgress());\n-        assertValidProgress(getCallback2.getDownloadProgress());\n-\n-        // Last callback should fail with ApiException\n-        assertFalse(getCallback3.isSuccess());\n-        final ApiException exception = getCallback3.getException();\n-        assertNotNull(exception);\n-        assertEquals(404, exception.getCode());\n-        api.deletePet(pet1.getId(), null);\n-        api.deletePet(pet2.getId(), null);\n-    }\n-\n-\n-    @Test\n-    public void testUpdatePet() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-        pet.setName(\"programmer\");\n-\n-        api.updatePet(pet);\n-\n-        Pet fetched = api.getPetById(pet.getId());\n-        assertPetMatches(pet, fetched);\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testFindPetsByStatus() throws Exception {\n-        assertEquals(basePath, api.getApiClient().getBasePath());\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-        pet.setName(\"programmer\");\n-        pet.setStatus(Pet.StatusEnum.PENDING);\n-        api.updatePet(pet);\n-\n-        List<Pet> pets = api.findPetsByStatus(Arrays.asList(\"pending\"));\n-        assertNotNull(pets);\n-\n-        boolean found = false;\n-        for (Pet fetched : pets) {\n-            if (fetched.getId().equals(pet.getId())) {\n-                found = true;\n-                break;\n-            }\n-        }\n-\n-        assertTrue(found);\n-\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    @Ignore\n-    public void testFindPetsByTags() throws Exception {\n-        Pet pet = createPet();\n-        pet.setName(\"monster\");\n-        pet.setStatus(Pet.StatusEnum.AVAILABLE);\n-\n-        List<Tag> tags = new ArrayList<Tag>();\n-        Tag tag1 = new Tag();\n-        tag1.setName(\"friendly\");\n-        tags.add(tag1);\n-        pet.setTags(tags);\n-\n-        api.updatePet(pet);\n-\n-        Set<Pet> pets = api.findPetsByTags(new HashSet<>(Arrays.asList(\"friendly\")));\n-        assertNotNull(pets);\n-\n-        boolean found = false;\n-        for (Pet fetched : pets) {\n-            if (fetched.getId().equals(pet.getId())) {\n-                found = true;\n-                break;\n-            }\n-        }\n-        assertTrue(found);\n-\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testUpdatePetWithForm() throws Exception {\n-        Pet pet = createPet();\n-        pet.setName(\"frank\");\n-        api.addPet(pet);\n-\n-        Pet fetched = api.getPetById(pet.getId());\n-\n-        api.updatePetWithForm(fetched.getId(), \"furt\", null);\n-        Pet updated = api.getPetById(fetched.getId());\n-\n-        assertEquals(updated.getName(), \"furt\");\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testDeletePet() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-\n-        Pet fetched = api.getPetById(pet.getId());\n-        api.deletePet(pet.getId(), null);\n-\n-        try {\n-            fetched = api.getPetById(fetched.getId());\n-            fail(\"expected an error\");\n-        } catch (ApiException e) {\n-            LOG.info(\"Code: {}. Message: {}\", e.getCode(), e.getMessage());\n-            assertEquals(404, e.getCode());\n-        }\n-    }\n-\n-    @Test\n-    public void testUploadFile() throws Exception {\n-        Pet pet = createPet();\n-        api.addPet(pet);\n-\n-        File file = new File(\"hello.txt\");\n-        BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n-        writer.write(\"Hello world!\");\n-        writer.close();\n-\n-        api.uploadFile(pet.getId(), \"a test file\", new File(file.getAbsolutePath()));\n-        api.deletePet(pet.getId(), null);\n-    }\n-\n-    @Test\n-    public void testEqualsAndHashCode() {\n-        Pet pet1 = new Pet();\n-        Pet pet2 = new Pet();\n-        assertTrue(pet1.equals(pet2));\n-        assertTrue(pet2.equals(pet1));\n-        assertTrue(pet1.hashCode() == pet2.hashCode());\n-        assertTrue(pet1.equals(pet1));\n-        assertTrue(pet1.hashCode() == pet1.hashCode());\n-\n-        pet2.setName(\"really-happy\");\n-        pet2.setPhotoUrls(new HashSet<>(Arrays.asList(\"http://foo.bar.com/1\", \"http://foo.bar.com/2\")));\n-        assertFalse(pet1.equals(pet2));\n-        assertFalse(pet2.equals(pet1));\n-        assertFalse(pet1.hashCode() == (pet2.hashCode()));\n-        assertTrue(pet2.equals(pet2));\n-        assertTrue(pet2.hashCode() == pet2.hashCode());\n-\n-        pet1.setName(\"really-happy\");\n-        pet1.setPhotoUrls(new HashSet<>(Arrays.asList(\"http://foo.bar.com/1\", \"http://foo.bar.com/2\")));\n-        assertTrue(pet1.equals(pet2));\n-        assertTrue(pet2.equals(pet1));\n-        assertTrue(pet1.hashCode() == pet2.hashCode());\n-        assertTrue(pet1.equals(pet1));\n-        assertTrue(pet1.hashCode() == pet1.hashCode());\n-    }\n-\n-\n-    private Pet createPet() {\n-        Pet pet = new Pet();\n-        pet.setId(ThreadLocalRandom.current().nextLong(Long.MAX_VALUE));\n-        pet.setName(\"gorilla\");\n-\n-        Category category = new Category();\n-        category.setName(\"really-happy\");\n-\n-        pet.setCategory(category);\n-        pet.setStatus(Pet.StatusEnum.AVAILABLE);\n-        Set<String> photos = new HashSet<>(Arrays.asList(\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"));\n-        pet.setPhotoUrls(photos);\n-\n-        return pet;\n-    }\n-\n-    private String serializeJson(Object o, ApiClient apiClient) {\n-        return apiClient.getJSON().serialize(o);\n-    }\n-\n-    private <T> T deserializeJson(String json, Type type, ApiClient apiClient) {\n-        return (T) apiClient.getJSON().deserialize(json, type);\n-    }\n-\n-    private void assertPetMatches(Pet expected, Pet actual) {\n-        assertNotNull(actual);\n-        assertEquals(expected.getId(), actual.getId());\n-        assertNotNull(actual.getCategory());\n-        assertEquals(expected.getCategory().getName(),\n-                actual.getCategory().getName());\n-    }\n-\n-    /**\n-     * Assert that the given upload/download progress list satisfies the\n-     * following constraints:\n-     * <p>\n-     * - List is not empty\n-     * - Byte count should be nondecreasing\n-     * - The last element, and only the last element, should have done=true\n-     */\n-    private void assertValidProgress(List<Progress> progressList) {\n-        assertFalse(progressList.isEmpty());\n-\n-        Progress prev = null;\n-        int index = 0;\n-        for (Progress progress : progressList) {\n-            if (prev != null) {\n-                if (prev.done || prev.bytes > progress.bytes) {\n-                    fail(\"Progress list out of order at index \" + index\n-                            + \": \" + progressList);\n-                }\n-            }\n-            prev = progress;\n-            index += 1;\n-        }\n-\n-        if (!prev.done) {\n-            fail(\"Last progress item should have done=true: \" + progressList);\n-        }\n-    }\n-\n-    private static class TestApiCallback<T> implements ApiCallback<T> {\n-\n-        private final CountDownLatch latch;\n-        private final ConcurrentLinkedQueue<Progress> uploadProgress =\n-                new ConcurrentLinkedQueue<Progress>();\n-        private final ConcurrentLinkedQueue<Progress> downloadProgress =\n-                new ConcurrentLinkedQueue<Progress>();\n-\n-        private boolean done;\n-        private boolean success;\n-        private ApiException exception;\n-        private T result;\n-\n-        public TestApiCallback(CountDownLatch latch) {\n-            this.latch = latch;\n-            this.done = false;\n-        }\n-\n-        @Override\n-        public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {\n-            exception = e;\n-            this.done = true;\n-            this.success = false;\n-            latch.countDown();\n-        }\n-\n-        @Override\n-        public void onSuccess(T result, int statusCode, Map<String, List<String>> responseHeaders) {\n-            this.result = result;\n-            this.done = true;\n-            this.success = true;\n-            latch.countDown();\n-        }\n-\n-        @Override\n-        public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {\n-            uploadProgress.add(new Progress(bytesWritten, contentLength, done));\n-        }\n-\n-        @Override\n-        public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {\n-            downloadProgress.add(new Progress(bytesRead, contentLength, done));\n-        }\n-\n-        public boolean isDone() {\n-            return done;\n-        }\n-\n-        public boolean isSuccess() {\n-            return success;\n-        }\n-\n-        public ApiException getException() {\n-            return exception;\n-        }\n-\n-        public T getResult() {\n-            return result;\n-        }\n-\n-        public List<Progress> getUploadProgress() {\n-            return new ArrayList<Progress>(uploadProgress);\n-        }\n-\n-        public List<Progress> getDownloadProgress() {\n-            return new ArrayList<Progress>(downloadProgress);\n-        }\n-    }\n-\n-    private static class Progress {\n-        public final long bytes;\n-        public final long contentLength;\n-        public final boolean done;\n-\n-        public Progress(long bytes, long contentLength, boolean done) {\n-            this.bytes = bytes;\n-            this.contentLength = contentLength;\n-            this.done = done;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return \"<Progress \" + bytes + \" \" + contentLength + \" \" + done + \">\";\n-        }\n-    }\n-}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "originalPosition": 564}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzUxMDY1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#pullrequestreview-425751065", "createdAt": "2020-06-06T16:13:35Z", "commit": {"oid": "97e84ebbc396f0f39aa33124d10975e5e1e2bf5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fea207aa8e87d39afd64d672e0f0618873d5d18c", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/fea207aa8e87d39afd64d672e0f0618873d5d18c", "committedDate": "2020-06-06T20:40:16Z", "message": "Merge branch 'master' into ensures\n\n* master:\n  fix elm test spec (#6572)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63ba5573c061461a9279d758c2a1ea2df758370f", "author": {"user": {"login": "wing328", "name": "William Cheng"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/63ba5573c061461a9279d758c2a1ea2df758370f", "committedDate": "2020-06-08T14:18:11Z", "message": "Merge branch 'master' into ensures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "080581bc655d331e5825a92a0dfed87bf33beed6", "author": {"user": {"login": "wing328", "name": "William Cheng"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/080581bc655d331e5825a92a0dfed87bf33beed6", "committedDate": "2020-06-09T08:12:38Z", "message": "Merge remote-tracking branch 'origin/master' into ensures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDA1MTI0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6509#pullrequestreview-427005124", "createdAt": "2020-06-09T10:28:39Z", "commit": {"oid": "080581bc655d331e5825a92a0dfed87bf33beed6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2194, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}