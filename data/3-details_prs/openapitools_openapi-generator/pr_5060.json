{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MDA0NzAx", "number": 5060, "title": "[C++] [Qt5]Add support for response compression and various enhancements", "bodyText": "PR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.\n\ncc:\n@muttleyxd @MartinDelille @stkrwork @ravinikam\nChanges\n\nSupport Content-Encoding: gzip, deflate\nPad response body to error log for negative responses\nadd switch to enable content compression, false by default. --additional-properties contentCompression=true\nLinking to zlib will not be done when the contentCompression is inactive\n\nSample usage\n#include <QCoreApplication>\n#include <QObject>\n#include <QtGlobal>\n#include \"OAISampleApi.h\"\n\nusing namespace OpenAPI;\nint main(int argc, char *argv[]) {\n    Q_UNUSED(argc);\n    Q_UNUSED(argv);\n    QCoreApplication a(argc, argv);\n    auto api = new OAISampleApi();\n    api->setHost(QString(\"172.17.0.2\"));\n    api->setPort(8080);\n    api->enableContentCompression();\n    QObject::connect(api, &OAISampleApi::sampleGetV1SignalFull,\n               [](OAIHttpRequestWorker *worker, OAIV1_0_response summary){\n        Q_UNUSED(summary);\n        qDebug() << \"response length : \" << worker->response.length();\n        qDebug() << QString(worker->response) ;\n    });\n    api->sampleGetV1(0);\n    a.exec();\n}", "createdAt": "2020-01-20T21:14:43Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5060", "merged": true, "mergeCommit": {"oid": "a1d21f6d3aed561145a2cbe41ed07e03eec208a4"}, "closed": true, "closedAt": "2020-01-21T11:11:44Z", "author": {"login": "etherealjoy"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8TVMkABqjI5NjQyMTU5ODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8eY-agFqTM0NTc2NDAxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7cd28dcc3f3cfa2102e80b949dfaf3aeb55eca1a", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/7cd28dcc3f3cfa2102e80b949dfaf3aeb55eca1a", "committedDate": "2020-01-20T21:05:42Z", "message": "Add support for response compression and add response body to error string"}, "afterCommit": {"oid": "b563926f923b6ba4323f0b4ccc2ae05cb303f792", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b563926f923b6ba4323f0b4ccc2ae05cb303f792", "committedDate": "2020-01-20T21:20:20Z", "message": "Add support for response compression and add response body to error string"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NTY3Mzg3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5060#pullrequestreview-345567387", "createdAt": "2020-01-20T23:12:14Z", "commit": {"oid": "b563926f923b6ba4323f0b4ccc2ae05cb303f792"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMzoxMjoxNFrOFfq90w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMzoyMzozMlrOFfrFiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1NDEzMQ==", "bodyText": "wild spaces appear \ud83d\ude01", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5060#discussion_r368754131", "createdAt": "2020-01-20T23:12:14Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "diffHunk": "@@ -332,15 +341,14 @@ void {{prefix}}HttpRequestWorker::execute({{prefix}}HttpRequestInput *input) {\n \n void {{prefix}}HttpRequestWorker::on_manager_finished(QNetworkReply *reply) {\n     error_type = reply->error();\n-    response = reply->readAll();\n     error_str = reply->errorString();\n     if (reply->rawHeaderPairs().count() > 0) {\n         for (const auto &item : reply->rawHeaderPairs()) {\n             headers.insert(item.first, item.second);\n         }\n     }\n-    reply->deleteLater();\n-    process_form_response();\n+    process_response(reply);\n+    reply->deleteLater();    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b563926f923b6ba4323f0b4ccc2ae05cb303f792"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1NTg3NA==", "bodyText": "wouldn't it be better to zero-initialize strm?\nz_stream strm{};\n\nwith this you could get rid of\n        strm.zalloc = Z_NULL;\n        strm.zfree = Z_NULL;\n        strm.opaque = Z_NULL;", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5060#discussion_r368755874", "createdAt": "2020-01-20T23:22:15Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "diffHunk": "@@ -368,18 +376,61 @@ void {{prefix}}HttpRequestWorker::process_form_response() {\n                 }\n             }\n             {{prefix}}HttpFileElement felement;\n-            felement.saveToFile(QString(), workingDirectory + QDir::separator() + filename, filename, contentType, response.data());\n+            felement.saveToFile(QString(), workingDirectory + QDir::separator() + filename, filename, contentType, reply->readAll());\n             files.insert(filename, felement);\n         }\n \n     } else if (getResponseHeaders().contains(QString(\"Content-Type\"))) {\n         auto contentType = getResponseHeaders().value(QString(\"Content-Type\").toUtf8()).split(QString(\";\"), QString::SkipEmptyParts);\n         if ((contentType.count() > 0) && (contentType.first() == QString(\"multipart/form-data\"))) {\n+            // TODO : Handle Multipart responses\n         } else {\n+            if(headers.contains(\"Content-Encoding\")){\n+                auto encoding = headers.value(\"Content-Encoding\").split(',');\n+                if(encoding.contains(\"gzip\", Qt::CaseInsensitive) || encoding.contains(\"deflate\", Qt::CaseInsensitive)){\n+                    response = decompress(reply->readAll());\n+                }\n+            }\n+            else {\n+                response = reply->readAll();\n+            }\n         }\n     }\n }\n \n+QByteArray {{prefix}}HttpRequestWorker::decompress(const QByteArray& data){\n+    QByteArray result;\n+    bool sts = false;{{#contentCompression}}\n+    do{\n+        z_stream strm;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b563926f923b6ba4323f0b4ccc2ae05cb303f792"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1NTk3NQ==", "bodyText": "Please format this a little better, like this:\nreturn sts ? result : QByteArray();", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5060#discussion_r368755975", "createdAt": "2020-01-20T23:22:53Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "diffHunk": "@@ -368,18 +376,61 @@ void {{prefix}}HttpRequestWorker::process_form_response() {\n                 }\n             }\n             {{prefix}}HttpFileElement felement;\n-            felement.saveToFile(QString(), workingDirectory + QDir::separator() + filename, filename, contentType, response.data());\n+            felement.saveToFile(QString(), workingDirectory + QDir::separator() + filename, filename, contentType, reply->readAll());\n             files.insert(filename, felement);\n         }\n \n     } else if (getResponseHeaders().contains(QString(\"Content-Type\"))) {\n         auto contentType = getResponseHeaders().value(QString(\"Content-Type\").toUtf8()).split(QString(\";\"), QString::SkipEmptyParts);\n         if ((contentType.count() > 0) && (contentType.first() == QString(\"multipart/form-data\"))) {\n+            // TODO : Handle Multipart responses\n         } else {\n+            if(headers.contains(\"Content-Encoding\")){\n+                auto encoding = headers.value(\"Content-Encoding\").split(',');\n+                if(encoding.contains(\"gzip\", Qt::CaseInsensitive) || encoding.contains(\"deflate\", Qt::CaseInsensitive)){\n+                    response = decompress(reply->readAll());\n+                }\n+            }\n+            else {\n+                response = reply->readAll();\n+            }\n         }\n     }\n }\n \n+QByteArray {{prefix}}HttpRequestWorker::decompress(const QByteArray& data){\n+    QByteArray result;\n+    bool sts = false;{{#contentCompression}}\n+    do{\n+        z_stream strm;\n+        static const int CHUNK_SIZE = 2048;\n+        char out[CHUNK_SIZE];\n+        if (data.size() <= 4) {\n+            break;\n+        }\n+        strm.zalloc = Z_NULL;\n+        strm.zfree = Z_NULL;\n+        strm.opaque = Z_NULL;\n+        strm.avail_in = data.size();\n+        strm.next_in = (Bytef*)(data.data());\n+        if(Z_OK != inflateInit2(&strm, 15 + 32)){\n+            break;\n+        }\n+        do {\n+            sts = false;\n+            strm.avail_out = CHUNK_SIZE;\n+            strm.next_out = (Bytef*)(out);\n+            if(inflate(&strm, Z_NO_FLUSH) < Z_OK){\n+                break;\n+            }\n+            result.append(out, CHUNK_SIZE - strm.avail_out);\n+            sts = true;\n+        } while (strm.avail_out == 0);\n+        inflateEnd(&strm);\n+    } while(false);{{/contentCompression}}\n+    return sts?result:QByteArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b563926f923b6ba4323f0b4ccc2ae05cb303f792"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1NjEwNQ==", "bodyText": "Do we need this space?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5060#discussion_r368756105", "createdAt": "2020-01-20T23:23:32Z", "author": {"login": "muttleyxd"}, "path": "samples/client/petstore/cpp-qt5/client/CMakeLists.txt", "diffHunk": "@@ -15,7 +15,7 @@ file(GLOB SRCS\n )\n \n add_library(${PROJECT_NAME} ${SRCS})\n-target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Core Qt5::Network ssl crypto)\n+target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Core Qt5::Network ssl crypto )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b563926f923b6ba4323f0b4ccc2ae05cb303f792"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1904038a2946ba9cd795b12c00a525bd1f7f0d3", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/d1904038a2946ba9cd795b12c00a525bd1f7f0d3", "committedDate": "2020-01-21T00:08:05Z", "message": "Add support for response compression and add response body to error string"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b563926f923b6ba4323f0b4ccc2ae05cb303f792", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b563926f923b6ba4323f0b4ccc2ae05cb303f792", "committedDate": "2020-01-20T21:20:20Z", "message": "Add support for response compression and add response body to error string"}, "afterCommit": {"oid": "d1904038a2946ba9cd795b12c00a525bd1f7f0d3", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/d1904038a2946ba9cd795b12c00a525bd1f7f0d3", "committedDate": "2020-01-21T00:08:05Z", "message": "Add support for response compression and add response body to error string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e138b02b7a71d67cf18e69f9781b958e5cd3d891", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e138b02b7a71d67cf18e69f9781b958e5cd3d891", "committedDate": "2020-01-21T00:27:50Z", "message": "Improve robustness while parsing quality and compression levels"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NzY0MDE4", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5060#pullrequestreview-345764018", "createdAt": "2020-01-21T10:14:49Z", "commit": {"oid": "e138b02b7a71d67cf18e69f9781b958e5cd3d891"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2017, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}