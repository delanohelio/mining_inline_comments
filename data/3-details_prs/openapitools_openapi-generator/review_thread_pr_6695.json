{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NzUwOTQ1", "number": 6695, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1NTo1N1rOEGYzSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowMTo0NlrOEGY-Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTMzMjU4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_oneof_doc.mustache", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1NTo1N1rOGlJu-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMzozNDowMVrOGlebvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTk3Nw==", "bodyText": "What about when we combine allOf and oneOf together?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6695#discussion_r441609977", "createdAt": "2020-06-17T14:55:57Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_oneof_doc.mustache", "diffHunk": "@@ -0,0 +1,38 @@\n+# {{classname}}\n+\n+{{#description}}\n+{{&description}}\n+\n+{{/description}}\n+## oneOf schemas\n+{{#oneOf}}\n+* [{{{.}}}]({{{.}}}.md)\n+{{/oneOf}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6884c1671c0531678bd6d9000eadf44f55b923c7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY1ODA1Mg==", "bodyText": "Let's step back. What does \"combine allOf and oneOf together\" really mean? Can you give an example of use case on that? What does the payload look like?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6695#discussion_r441658052", "createdAt": "2020-06-17T16:02:49Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_oneof_doc.mustache", "diffHunk": "@@ -0,0 +1,38 @@\n+# {{classname}}\n+\n+{{#description}}\n+{{&description}}\n+\n+{{/description}}\n+## oneOf schemas\n+{{#oneOf}}\n+* [{{{.}}}]({{{.}}}.md)\n+{{/oneOf}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTk3Nw=="}, "originalCommit": {"oid": "6884c1671c0531678bd6d9000eadf44f55b923c7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMDY2Nw==", "bodyText": "Sure. A use case for this is when a user extracts common shared properties into a schema and they choose to have those properties stored in the oneOf schema as additionalProperties, not through allOf inheritance.\nLet's look at an example:\nEdibleInterface:\n  type: object\n  properties:\n    calories:\n      type: integer\nApple:\n  type: object\n  properties:\n    color:\n      type: string\n    varietal:\n      type: string\nComposedSchema:\n  allOf:\n    - $ref: '#/components/schemas/EdibleInterface'\n  oneOf:\n    - $ref: '#/components/schemas/Apple'\n\nAnd a sample payload is:\n{\"calories\": 110, \"color\": \"yellow\", \"varietal\": \"golden delicious\"}\nAt the ComposedSchema level, allOf validates + oneOf validates, and if we chose to return an instance of Apple when deserializing ComposedSchema, Apple includes the property calories as an additionalProperty.\nAren't json schema definitions additive?\nComposedSchema says that a payload must validate both EdibleInterface + Apple, schemas together, correct?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6695#discussion_r441700667", "createdAt": "2020-06-17T17:12:46Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_oneof_doc.mustache", "diffHunk": "@@ -0,0 +1,38 @@\n+# {{classname}}\n+\n+{{#description}}\n+{{&description}}\n+\n+{{/description}}\n+## oneOf schemas\n+{{#oneOf}}\n+* [{{{.}}}]({{{.}}}.md)\n+{{/oneOf}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTk3Nw=="}, "originalCommit": {"oid": "6884c1671c0531678bd6d9000eadf44f55b923c7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxODY4Mw==", "bodyText": "Let's focus on \"ComposedSchema\" and please forget about my implementation for the time being. Given the following:\nComposedSchema:\n  allOf:\n    - $ref: '#/components/schemas/EdibleInterface'\n  oneOf:\n    - $ref: '#/components/schemas/Apple'\n\noneOf and allOf are defined at the same level. Your understanding is that the properties defined in the oneOf schema are automatically unfolded and included in the object \"ComposedSchema\" (same level as the properties defined in the allOf schema), right?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6695#discussion_r441918683", "createdAt": "2020-06-18T01:30:43Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_oneof_doc.mustache", "diffHunk": "@@ -0,0 +1,38 @@\n+# {{classname}}\n+\n+{{#description}}\n+{{&description}}\n+\n+{{/description}}\n+## oneOf schemas\n+{{#oneOf}}\n+* [{{{.}}}]({{{.}}}.md)\n+{{/oneOf}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTk3Nw=="}, "originalCommit": {"oid": "6884c1671c0531678bd6d9000eadf44f55b923c7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkyMDQyNA==", "bodyText": "Yes, that's what I am trying to convey with the question\nComposedSchema says that a payload must validate both EdibleInterface + Apple, schemas together, correct?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6695#discussion_r441920424", "createdAt": "2020-06-18T01:37:47Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_oneof_doc.mustache", "diffHunk": "@@ -0,0 +1,38 @@\n+# {{classname}}\n+\n+{{#description}}\n+{{&description}}\n+\n+{{/description}}\n+## oneOf schemas\n+{{#oneOf}}\n+* [{{{.}}}]({{{.}}}.md)\n+{{/oneOf}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTk3Nw=="}, "originalCommit": {"oid": "6884c1671c0531678bd6d9000eadf44f55b923c7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMDA4NQ==", "bodyText": "Assuming the answer to your question is yes, then the following is also valid, right?\nComposedSchema:\n  allOf:\n    - $ref: '#/components/schemas/EdibleInterface'\n  oneOf:\n    - type: string\n    - type: integer\n\nDoes it make sense to you? If it does, what does the payload (e.g. JSON) look like?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6695#discussion_r441930085", "createdAt": "2020-06-18T02:16:06Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_oneof_doc.mustache", "diffHunk": "@@ -0,0 +1,38 @@\n+# {{classname}}\n+\n+{{#description}}\n+{{&description}}\n+\n+{{/description}}\n+## oneOf schemas\n+{{#oneOf}}\n+* [{{{.}}}]({{{.}}}.md)\n+{{/oneOf}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTk3Nw=="}, "originalCommit": {"oid": "6884c1671c0531678bd6d9000eadf44f55b923c7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTk5Mw==", "bodyText": "I think that it can only be combined when they are of the same type. What do you think?\nBecause your example asks us to do this\n3 + {\"calories\": 3}\nAlso, your example also applies to allof of different types which is not possible:\nallOf:\n\nApple\ninteger", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6695#discussion_r441935993", "createdAt": "2020-06-18T02:40:02Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_oneof_doc.mustache", "diffHunk": "@@ -0,0 +1,38 @@\n+# {{classname}}\n+\n+{{#description}}\n+{{&description}}\n+\n+{{/description}}\n+## oneOf schemas\n+{{#oneOf}}\n+* [{{{.}}}]({{{.}}}.md)\n+{{/oneOf}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTk3Nw=="}, "originalCommit": {"oid": "6884c1671c0531678bd6d9000eadf44f55b923c7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0MTA0MQ==", "bodyText": "I think that it can only be combined when they are of the same type. What do you think?\n\nMy view is that it's not up to me (or you) whether there's such a rule to ensure the same type. It comes down to the definition in JSON schema. I may have missed it but I don't see such a rule explicitly (or implicitly) defined.\nOne more example. What about the following:\nComposedSchema:\n  allOf:\n    - $ref: '#/components/schemas/EdibleInterface'\n  oneOf:\n    - $ref: '#/components/schemas/Apple'\n    - $ref: '#/components/schemas/Banana'\n  oneOf:\n    - $ref: '#/components/schemas/Dog'\n    - $ref: '#/components/schemas/Cat'\n\nI assume it's also valid. Do you agree?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6695#discussion_r441941041", "createdAt": "2020-06-18T02:59:58Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_oneof_doc.mustache", "diffHunk": "@@ -0,0 +1,38 @@\n+# {{classname}}\n+\n+{{#description}}\n+{{&description}}\n+\n+{{/description}}\n+## oneOf schemas\n+{{#oneOf}}\n+* [{{{.}}}]({{{.}}}.md)\n+{{/oneOf}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTk3Nw=="}, "originalCommit": {"oid": "6884c1671c0531678bd6d9000eadf44f55b923c7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0NjIwNw==", "bodyText": "Hmm isn't oneof a key? I thought that it was and that you can't have two of the same key.\nBased on that thought, I think that it is not valid.\nI will need to look at the spec to see what it says. Yup it is not up to us, I am asking about your understanding and interpretation.\nIs allOf of mixed types valid to you? If so, what payload can meet those requirements?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6695#discussion_r441946207", "createdAt": "2020-06-18T03:21:29Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_oneof_doc.mustache", "diffHunk": "@@ -0,0 +1,38 @@\n+# {{classname}}\n+\n+{{#description}}\n+{{&description}}\n+\n+{{/description}}\n+## oneOf schemas\n+{{#oneOf}}\n+* [{{{.}}}]({{{.}}}.md)\n+{{/oneOf}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTk3Nw=="}, "originalCommit": {"oid": "6884c1671c0531678bd6d9000eadf44f55b923c7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0OTExOQ==", "bodyText": "From the spec allof is defined as:\nThe OpenAPI Specification allows combining and extending model definitions using the allOf property of JSON Schema, in effect offering model composition. allOf takes an array of object definitions that are validated independently but together compose a single object.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6695#discussion_r441949119", "createdAt": "2020-06-18T03:34:01Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_oneof_doc.mustache", "diffHunk": "@@ -0,0 +1,38 @@\n+# {{classname}}\n+\n+{{#description}}\n+{{&description}}\n+\n+{{/description}}\n+## oneOf schemas\n+{{#oneOf}}\n+* [{{{.}}}]({{{.}}}.md)\n+{{/oneOf}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwOTk3Nw=="}, "originalCommit": {"oid": "6884c1671c0531678bd6d9000eadf44f55b923c7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTM2MDk5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_doc.mustache", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowMTo0NlrOGlKBUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowMTo0NlrOGlKBUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxNDY3Mw==", "bodyText": "What about when properties are set in the composed schema and we have oneOf or anyOf?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6695#discussion_r441614673", "createdAt": "2020-06-17T15:01:46Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/Java/libraries/jersey2/model_doc.mustache", "diffHunk": "@@ -0,0 +1,19 @@\n+{{#models}}{{#model}}\n+\n+{{#isEnum}}\n+{{>enum_outer_doc}}\n+{{/isEnum}}\n+{{^isEnum}}\n+{{^oneOf.isEmpty}}\n+{{>model_oneof_doc}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6884c1671c0531678bd6d9000eadf44f55b923c7"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3331, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}