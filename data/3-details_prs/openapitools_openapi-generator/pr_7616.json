{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MDU5MDY4", "number": 7616, "title": "Small tweaks for php generator, PHPStan level 3, Psalm level 7", "bodyText": "Summary\nThis is a followup to #7376, #7528, trying to get the generated code quality up to a standard where strong static analysis tools like PHPStan, Psalm can be used to verify the generated output in CI.\nThis reaches level 3 for PHPStan (0 is most lax, 8 is most strict), level 7 for Psalm (8 is most lax, 1 is most strict).\nPR checklist\n\n Read the contribution guidelines.\n Pull Request title clearly describes the work in the pull request and Pull Request description provides details about how to validate the work. Missing information here may result in delayed response from the community.\n If contributing template-only or documentation-only changes which will change sample output, build the project beforehand.\n Run the shell script ./bin/generate-samples.shto update all Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit as it would merge with master. These must match the expectations made by your contribution. You may regenerate an individual generator by passing the relevant config(s) as an argument to the script, for example ./bin/generate-samples.sh bin/configs/java*. For Windows users, please run the script in Git BASH.\n File the PR against the correct branch: master\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.\n\n@jebentier (2017/07), @dkarlovi (2017/07), @mandrean (2017/08), @jfastnacht (2017/09), @ackintosh (2017/09) heart, @ybelenko (2018/07), @renepardon (2018/12)", "createdAt": "2020-10-07T07:58:25Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616", "merged": true, "mergeCommit": {"oid": "240c046f35db04c173f0fee320dfad164f06db59"}, "closed": true, "closedAt": "2020-10-21T07:38:11Z", "author": {"login": "dkarlovi"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQIZWOgFqTUwMzYyMzIxNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUoXTzgFqTUxMzM4NjUzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNjIzMjE3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#pullrequestreview-503623217", "createdAt": "2020-10-07T08:06:56Z", "commit": {"oid": "d4883baf6bd24318f02eddf366cb56a37e0638d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowNjo1N1rOHdnbvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowNjo1N1rOHdnbvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNjgyOQ==", "bodyText": "This one is interesting, Psalm found it's nonsensical since it includes object, which is already handled a few lines above, meaning this branch can never be reached with that specific \"class\".\nThis introduces the first tool-specific annotation, but I believe it's not a big issue since Doctrine and PHPUnit already use them natively.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#discussion_r500816829", "createdAt": "2020-10-07T08:06:57Z", "author": {"login": "dkarlovi"}, "path": "modules/openapi-generator/src/main/resources/php/ObjectSerializer.mustache", "diffHunk": "@@ -307,6 +314,7 @@ class ObjectSerializer\n             }\n         }\n \n+        /** @psalm-suppress ParadoxicalCondition */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4883baf6bd24318f02eddf366cb56a37e0638d2"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNjI1NTQw", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#pullrequestreview-503625540", "createdAt": "2020-10-07T08:09:47Z", "commit": {"oid": "d4883baf6bd24318f02eddf366cb56a37e0638d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowOTo0N1rOHdnizA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowOTo0N1rOHdnizA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxODYzNg==", "bodyText": "Using is_callable is safer than using method_exists, while also being more correct.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#discussion_r500818636", "createdAt": "2020-10-07T08:09:47Z", "author": {"login": "dkarlovi"}, "path": "modules/openapi-generator/src/main/resources/php/ObjectSerializer.mustache", "diffHunk": "@@ -159,8 +165,9 @@ class ObjectSerializer\n      */\n     public static function toHeaderValue($value)\n     {\n-        if (method_exists($value, 'toHeaderValue')) {\n-            return $value->toHeaderValue();\n+        $callable = [$value, 'toHeaderValue'];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4883baf6bd24318f02eddf366cb56a37e0638d2"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4883baf6bd24318f02eddf366cb56a37e0638d2", "author": {"user": {"login": "dkarlovi", "name": "Dalibor Karlovi\u0107"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/d4883baf6bd24318f02eddf366cb56a37e0638d2", "committedDate": "2020-10-07T07:53:38Z", "message": "Small tweaks for php generator, PHPStan level 3"}, "afterCommit": {"oid": "cf5679f1b4f72c56604c3fe6178a9c7b37b4c28c", "author": {"user": {"login": "dkarlovi", "name": "Dalibor Karlovi\u0107"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/cf5679f1b4f72c56604c3fe6178a9c7b37b4c28c", "committedDate": "2020-10-07T08:25:03Z", "message": "Small tweaks for php generator, PHPStan level 3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48ed5c83ad12430aae70ca53bf63c4aab28ffd6b", "author": {"user": {"login": "dkarlovi", "name": "Dalibor Karlovi\u0107"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/48ed5c83ad12430aae70ca53bf63c4aab28ffd6b", "committedDate": "2020-10-20T15:42:59Z", "message": "Small tweaks for php generator, PHPStan level 3"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf5679f1b4f72c56604c3fe6178a9c7b37b4c28c", "author": {"user": {"login": "dkarlovi", "name": "Dalibor Karlovi\u0107"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/cf5679f1b4f72c56604c3fe6178a9c7b37b4c28c", "committedDate": "2020-10-07T08:25:03Z", "message": "Small tweaks for php generator, PHPStan level 3"}, "afterCommit": {"oid": "48ed5c83ad12430aae70ca53bf63c4aab28ffd6b", "author": {"user": {"login": "dkarlovi", "name": "Dalibor Karlovi\u0107"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/48ed5c83ad12430aae70ca53bf63c4aab28ffd6b", "committedDate": "2020-10-20T15:42:59Z", "message": "Small tweaks for php generator, PHPStan level 3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMDYyNTY4", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#pullrequestreview-513062568", "createdAt": "2020-10-20T19:26:30Z", "commit": {"oid": "48ed5c83ad12430aae70ca53bf63c4aab28ffd6b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToyNjozMFrOHlNrLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToyNjozMFrOHlNrLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4MzQwNA==", "bodyText": "@dkarlovi So... instead of one big condition you decided to use three nested conditions? It's weird that PHPStan doesn't complain about that. It usually says to me \"consider refactoring\" when I have the third nested condition. \ud83d\ude15", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#discussion_r508783404", "createdAt": "2020-10-20T19:26:30Z", "author": {"login": "ybelenko"}, "path": "samples/client/petstore/php/OpenAPIClient-php/lib/ObjectSerializer.php", "diffHunk": "@@ -87,12 +87,16 @@ public static function sanitizeForSerialization($data, $type = null, $format = n\n                 foreach ($data::openAPITypes() as $property => $openAPIType) {\n                     $getter = $data::getters()[$property];\n                     $value = $data->$getter();\n-                    if ($value !== null\n-                        && !in_array($openAPIType, ['DateTime', 'bool', 'boolean', 'byte', 'double', 'float', 'int', 'integer', 'mixed', 'number', 'object', 'string', 'void'], true)\n-                        && method_exists($openAPIType, 'getAllowableEnumValues')\n-                        && !in_array($value, $openAPIType::getAllowableEnumValues(), true)) {\n-                        $imploded = implode(\"', '\", $openAPIType::getAllowableEnumValues());\n-                        throw new \\InvalidArgumentException(\"Invalid value for enum '$openAPIType', must be one of: '$imploded'\");\n+                    if ($value !== null && !in_array($openAPIType, ['DateTime', 'bool', 'boolean', 'byte', 'double', 'float', 'int', 'integer', 'mixed', 'number', 'object', 'string', 'void'], true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed5c83ad12430aae70ca53bf63c4aab28ffd6b"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzgzODIx", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#pullrequestreview-513383821", "createdAt": "2020-10-21T07:33:52Z", "commit": {"oid": "48ed5c83ad12430aae70ca53bf63c4aab28ffd6b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzozMzo1MlrOHleFhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzozMzo1MlrOHleFhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MjI5Mg==", "bodyText": "Oh no, copy paste. \ud83d\ude48\nShould be\n/** array $allowedEnumTypes */", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#discussion_r509052292", "createdAt": "2020-10-21T07:33:52Z", "author": {"login": "dkarlovi"}, "path": "samples/client/petstore/php/OpenAPIClient-php/lib/ObjectSerializer.php", "diffHunk": "@@ -87,12 +87,16 @@ public static function sanitizeForSerialization($data, $type = null, $format = n\n                 foreach ($data::openAPITypes() as $property => $openAPIType) {\n                     $getter = $data::getters()[$property];\n                     $value = $data->$getter();\n-                    if ($value !== null\n-                        && !in_array($openAPIType, ['DateTime', 'bool', 'boolean', 'byte', 'double', 'float', 'int', 'integer', 'mixed', 'number', 'object', 'string', 'void'], true)\n-                        && method_exists($openAPIType, 'getAllowableEnumValues')\n-                        && !in_array($value, $openAPIType::getAllowableEnumValues(), true)) {\n-                        $imploded = implode(\"', '\", $openAPIType::getAllowableEnumValues());\n-                        throw new \\InvalidArgumentException(\"Invalid value for enum '$openAPIType', must be one of: '$imploded'\");\n+                    if ($value !== null && !in_array($openAPIType, ['DateTime', 'bool', 'boolean', 'byte', 'double', 'float', 'int', 'integer', 'mixed', 'number', 'object', 'string', 'void'], true)) {\n+                        $callable = [$openAPIType, 'getAllowableEnumValues'];\n+                        if (is_callable($callable)) {\n+                            /** array $callable */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48ed5c83ad12430aae70ca53bf63c4aab28ffd6b"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzg2NTM0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7616#pullrequestreview-513386534", "createdAt": "2020-10-21T07:37:23Z", "commit": {"oid": "48ed5c83ad12430aae70ca53bf63c4aab28ffd6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3090, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}