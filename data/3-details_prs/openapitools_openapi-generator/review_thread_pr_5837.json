{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5Mzc3Mjk0", "number": 5837, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzowMjo0MlrODu_ivw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzowMzo0N1rODu_kGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjAyMTc1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "isResolved": false, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzowMjo0MlrOGBKMig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo1MDo0NlrOGBWJ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA==", "bodyText": "Why this fake encode/decode is needed ?  If uses do not define -DOPENSSL, but use the function base64decode or base64encode ,  they will not get the result that they want.\nI think if the users want to use the function base64decode or base64encode defined by openapi-generator/c-libcurl , they must define -DOPENSSL in CMakefile.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403868810", "createdAt": "2020-04-06T07:02:42Z", "author": {"login": "ityuhui"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwNzQwNQ==", "bodyText": "I didn't get it. What if -DOPENSSL is not defined? What do you intend to happen in that case? I didn't have it defined, and the function \"returned\" without issuing a return statement.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403907405", "createdAt": "2020-04-06T08:17:06Z", "author": {"login": "michelealbano"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyMDU1NQ==", "bodyText": "e.g.\nIf uses do not define -DOPENSSL, but use the function base64encode, the returned char * is still equal to the original string, not a base64 encoded string.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403920555", "createdAt": "2020-04-06T08:39:16Z", "author": {"login": "ityuhui"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyMTMzNg==", "bodyText": "I thought that was idea, and that's the code I implemented. The original code did nothing (not even return a buffer).", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403921336", "createdAt": "2020-04-06T08:40:33Z", "author": {"login": "michelealbano"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMTgwMA==", "bodyText": "Yes. I know.\nSo I suggest adding a warning message here if this code is needed:\ne.g.\n#else // OPENSSL\n    fprintf(stderr, \"The data will not be decoded. If you want to use this function, please define \\\"-DOPENSSL\\\" when building.\\n\");\n    char* ret = malloc(decode_this_many_bytes);\n    memcpy(ret, b64_decode_this, decode_this_many_bytes-1);\n    ret[decode_this_many_bytes] = 0;\n   *decoded_bytes = decode_this_many_bytes;\n    return ret;\n#endif // OPENSSL", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403931800", "createdAt": "2020-04-06T08:57:20Z", "author": {"login": "ityuhui"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzODUxMw==", "bodyText": "ok, will do that", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403938513", "createdAt": "2020-04-06T09:07:53Z", "author": {"login": "michelealbano"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0MjEyOQ==", "bodyText": "Message proposal:\nThe data will not be encoded. If you want to use this function \"base64encode\", please define \"-DOPENSSL\" when building the library.\nThe base64 data will not be decoded. If you want to use this function, \"base64decode\", please define \"-DOPENSSL\" when building the library.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403942129", "createdAt": "2020-04-06T09:13:38Z", "author": {"login": "ityuhui"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0NDQ3Ng==", "bodyText": "I would suggest returning NULL so the whole API call exits with an error.  this is because we use strlen to get the length of the data when we add data to curl handle. This will break if the data has binary(may include null termination). So for a safer side, I would suggest to return NULL or mandate OpenSSL installation as a prerequisite.\nAlso if the server is expecting a base64 encoded string then we cannot send unencoded data.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403944476", "createdAt": "2020-04-06T09:17:29Z", "author": {"login": "zhemant"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0ODMxMw==", "bodyText": "What if I don't have OpenSSL, and I just want to generate unencrypted APIs?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403948313", "createdAt": "2020-04-06T09:23:44Z", "author": {"login": "michelealbano"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTI3Ng==", "bodyText": "If you don't have OpenSSL then you cannot send or receive binary data.\nAlso, I didn't get what you mean by unencrypted API? Because OpenSSL is used only for encoding binary data. It is not used for encryption.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403951276", "createdAt": "2020-04-06T09:28:32Z", "author": {"login": "zhemant"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2Mzg2Mg==", "bodyText": "Ok.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403963862", "createdAt": "2020-04-06T09:48:54Z", "author": {"login": "michelealbano"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDc1MQ==", "bodyText": "I updated also CMakeLists.txt, but I am not an expert on cmake.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r404064751", "createdAt": "2020-04-06T12:50:46Z", "author": {"login": "michelealbano"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/apiClient.c.mustache", "diffHunk": "@@ -632,7 +632,12 @@ char *base64encode (const void *b64_encode_this, int encode_this_many_bytes){\n     BUF_MEM_grow(mem_bio_mem_ptr, (*mem_bio_mem_ptr).length + 1);   //Makes space for end null.\n     (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\\0';  //Adds null-terminator to tail.\n     return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: \"buf_mem_st\" struct).\n-#endif\n+#else // OPENSSL\n+    char* ret = malloc(encode_this_many_bytes);\n+    memcpy(ret, b64_encode_this, encode_this_many_bytes-1);\n+    ret[encode_this_many_bytes] = 0;\n+    return ret;\n+#endif // OPENSSL\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODgxMA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjAyNTIwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/C-libcurl/model-header.mustache", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzowMzo0OFrOGBKOhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo0NToxOVrOGBNlVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2OTMxOA==", "bodyText": "The two functions base64encode or base64decode are declarated in apiClient.h\nSo why are they needed here ?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403869318", "createdAt": "2020-04-06T07:03:48Z", "author": {"login": "ityuhui"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/model-header.mustache", "diffHunk": "@@ -11,6 +11,11 @@\n #include \"../external/cJSON.h\"\n #include \"../include/list.h\"\n #include \"../include/keyValuePair.h\"\n+#include \"../include/binary.h\"\n+\n+char *base64encode(const void *b64_encode_this, int encode_this_many_bytes);\n+\n+char *base64decode(const void *b64_decode_this, int decode_this_many_bytes, int *decoded_bytes);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwODQzNA==", "bodyText": "Because I don't #include apiClient.h everywhere. I am actually considering to move base64* to binary.h / binary.c", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403908434", "createdAt": "2020-04-06T08:18:52Z", "author": {"login": "michelealbano"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/model-header.mustache", "diffHunk": "@@ -11,6 +11,11 @@\n #include \"../external/cJSON.h\"\n #include \"../include/list.h\"\n #include \"../include/keyValuePair.h\"\n+#include \"../include/binary.h\"\n+\n+char *base64encode(const void *b64_encode_this, int encode_this_many_bytes);\n+\n+char *base64decode(const void *b64_decode_this, int decode_this_many_bytes, int *decoded_bytes);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2OTMxOA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxNjU4NA==", "bodyText": "OK. I got it.\nBut users may want to use these 2 functions , but they do not want to include \"binary.h\"\nSo I suggest keeping the definition and decalration of the base64* functions in apiClient.h|c, but add the declarations to binary.h\nMoving to binary.h/binary.c is also acceptable for me.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403916584", "createdAt": "2020-04-06T08:32:50Z", "author": {"login": "ityuhui"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/model-header.mustache", "diffHunk": "@@ -11,6 +11,11 @@\n #include \"../external/cJSON.h\"\n #include \"../include/list.h\"\n #include \"../include/keyValuePair.h\"\n+#include \"../include/binary.h\"\n+\n+char *base64encode(const void *b64_encode_this, int encode_this_many_bytes);\n+\n+char *base64decode(const void *b64_decode_this, int decode_this_many_bytes, int *decoded_bytes);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2OTMxOA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyMTY4Nw==", "bodyText": "ok", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403921687", "createdAt": "2020-04-06T08:41:09Z", "author": {"login": "michelealbano"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/model-header.mustache", "diffHunk": "@@ -11,6 +11,11 @@\n #include \"../external/cJSON.h\"\n #include \"../include/list.h\"\n #include \"../include/keyValuePair.h\"\n+#include \"../include/binary.h\"\n+\n+char *base64encode(const void *b64_encode_this, int encode_this_many_bytes);\n+\n+char *base64decode(const void *b64_decode_this, int decode_this_many_bytes, int *decoded_bytes);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2OTMxOA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyMzMxNg==", "bodyText": "Moving to binary.h/binary.c is also acceptable for me.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403923316", "createdAt": "2020-04-06T08:43:45Z", "author": {"login": "ityuhui"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/model-header.mustache", "diffHunk": "@@ -11,6 +11,11 @@\n #include \"../external/cJSON.h\"\n #include \"../include/list.h\"\n #include \"../include/keyValuePair.h\"\n+#include \"../include/binary.h\"\n+\n+char *base64encode(const void *b64_encode_this, int encode_this_many_bytes);\n+\n+char *base64decode(const void *b64_decode_this, int decode_this_many_bytes, int *decoded_bytes);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2OTMxOA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNDA4Nw==", "bodyText": "@michelealbano you dont need to include apiClient.h any where. You just need to import the main api's api.h this will import all the models required and supporting files for that API", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403924087", "createdAt": "2020-04-06T08:44:56Z", "author": {"login": "zhemant"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/model-header.mustache", "diffHunk": "@@ -11,6 +11,11 @@\n #include \"../external/cJSON.h\"\n #include \"../include/list.h\"\n #include \"../include/keyValuePair.h\"\n+#include \"../include/binary.h\"\n+\n+char *base64encode(const void *b64_encode_this, int encode_this_many_bytes);\n+\n+char *base64decode(const void *b64_decode_this, int decode_this_many_bytes, int *decoded_bytes);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2OTMxOA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyNDMxMQ==", "bodyText": "Thinking about it, I will move them to binary.h/binary.c. I #include \"../include/binary.h\" in apiClient.h, thus the functions are available to whoever includes apiClient.h.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5837#discussion_r403924311", "createdAt": "2020-04-06T08:45:19Z", "author": {"login": "michelealbano"}, "path": "modules/openapi-generator/src/main/resources/C-libcurl/model-header.mustache", "diffHunk": "@@ -11,6 +11,11 @@\n #include \"../external/cJSON.h\"\n #include \"../include/list.h\"\n #include \"../include/keyValuePair.h\"\n+#include \"../include/binary.h\"\n+\n+char *base64encode(const void *b64_encode_this, int encode_this_many_bytes);\n+\n+char *base64decode(const void *b64_decode_this, int decode_this_many_bytes, int *decoded_bytes);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2OTMxOA=="}, "originalCommit": {"oid": "8514ae6354f4a3492f43b045c0e0447597362323"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3645, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}