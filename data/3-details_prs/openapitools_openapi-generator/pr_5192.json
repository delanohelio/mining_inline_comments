{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMDQ5NTQ5", "number": 5192, "title": "[core] Normalizing vendor extension naming", "bodyText": "According to OAS 2.0 and OAS 3.0 Specifications:\n\nAllows extensions to the OpenAPI Schema. The field name MUST begin with x-,\nfor example, x-internal-id. The value can be null, a primitive, an array or an object.\nCan have any valid JSON format value.\n\nThis commit attempts to define a clear identifier design format of maintaining lower-kebab casing and following the x- prefix defined by OAI Specification.\nFollowing a convention that matches that used by others (see autorest), we will remove any confusion about naming strategies for template authors and customizers. Following the lower-kebab convention will allow us to convert from camelCase and missing prefixes to the desired format. For example, these conversions are simple to make for template consistency:\n\ncustomValue => x-custom-value\nx-customValue => x-custom-value\nx-custom-value => x-custom-value\n\nThis convention also allows us to define a single standard for use across all generators. This means no occurrence of x-operationId in one generator and x-operation-id in another.\nIncluded in this PR is a logger which will log a warning message only once. This could be used for ModelUtils and UrlUtils to reduce stdout/stderr noise. The LoggerWrapper implementation is supported by an in-memory (caffeine) cache. I've added support for the following system properties so consumers with more advanced use cases can tweak/disable the caching OnceLogger:\n\norg.openapitools.codegen.utils.oncelogger.enabled: set to false to disable the caching OnceLogger. Set to true to enable (the default).\norg.openapitools.codegen.utils.oncelogger.cachesize: modify the cache size from the default of 200 messages (this is log message, not message count)\norg.openapitools.codegen.utils.oncelogger.expiry: set the expiration time in millis to control how long messages remain in-memory. The default is 2000 (2 seconds), but could be made lower for high traffic consumers. For one-off use cases such as CLI, Maven Plugin, and Gradle Plugin, changing this property may not be useful.\n\nNOTE This will require additional template work and removal of older extensions in the 5.0 branch. We'll need document the change(s) and upgrade path for the 5.0 release as well.\ncc @OpenAPITools/generator-core-team @OpenAPITools/openapi-generator-collaborators\n\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.", "createdAt": "2020-02-02T20:05:25Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5192", "merged": true, "mergeCommit": {"oid": "8d6286dfae0c37d53ce9d27cd00b8e8ef87bcfe1"}, "closed": true, "closedAt": "2020-02-06T14:52:59Z", "author": {"login": "jimschubert"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAdaWxgH2gAyMzcwMDQ5NTQ5OjczNTUzNzlmMTZiYTk1NWY1ZGI5NDQ0OTE3OTk0OTY0MTA1ZjFhMWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBr9IpAFqTM1NDUwOTY4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7355379f16ba955f5db9444917994964105f1a1e", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/7355379f16ba955f5db9444917994964105f1a1e", "committedDate": "2020-02-02T19:22:07Z", "message": "[core] Normalizing vendor extension naming\n\nAccording to [OAS 2.0][1] and [OAS 3.0][2] Specifications:\n\n> Allows extensions to the OpenAPI Schema. The field name MUST begin with x-,\n>  for example, x-internal-id. The value can be null, a primitive, an array or an object.\n>  Can have any valid JSON format value.\n\nThis commit attempts to define a [clear identifier design format][3] of\nmaintaining lower-kebab casing and following the x- prefix defined by\nOAI Specification.\n\nFollowing a convention that matches that used by others (see [autorest][4]), we will remove\nany confusion about naming strategies for template authors and\ncustomizers. Following the lower-kebab convention will allow us to\nconvert from camelCase and missing prefixes to the desired format. For\nexample, these conversions are simple to make for template consistency:\n\n* customValue => x-custom-value\n* x-customValue => x-custom-value\n* x-custom-value => x-custom-value\n\nThis convention also allows us to define a single standard for use\nacross all generators. This means no occurrence of x-operationId in one\ngenerator and x-operation-id in another.\n\n[1]: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#patterned-objects\n[2]: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#specificationExtensions\n[3]: https://tools.ietf.org/html/draft-wilde-registries-01#section-3.4\n[4]: https://github.com/Azure/autorest/tree/master/docs/extensions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTY1NzY3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5192#pullrequestreview-351965767", "createdAt": "2020-02-02T20:38:19Z", "commit": {"oid": "7355379f16ba955f5db9444917994964105f1a1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTY2Mzk2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5192#pullrequestreview-351966396", "createdAt": "2020-02-02T20:49:07Z", "commit": {"oid": "7355379f16ba955f5db9444917994964105f1a1e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMDo0OTowN1rOFkjdAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMDo0OTowN1rOFkjdAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3MzkyMg==", "bodyText": "maybe a single operation if you want to avoid races?\nmessageCountCache.asMap().merge(msg, 1, count -> count + 1)\nor an atomic counter if you want to avoid locking except on the initial mapping?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5192#discussion_r373873922", "createdAt": "2020-02-02T20:49:07Z", "author": {"login": "ben-manes"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/OnceLogger.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.openapitools.codegen.utils;\n+\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import org.openapitools.codegen.config.GlobalSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+import org.slf4j.MarkerFactory;\n+import org.slf4j.ext.LoggerWrapper;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Provides calling code a way to log important messages only once, regardless of how many times the invocation has occurred.\n+ * This can be used, for instance, to log a warning like \"One or more schemas aren't declared\" without logging that message\n+ * for every time the schema is mentioned in a document.\n+ *\n+ * This implementation currently only supports single-argument string literal log methods (e.g. {@link Logger#debug(String)}).\n+ */\n+@SuppressWarnings(\"FieldCanBeLocal\")\n+public class OnceLogger extends LoggerWrapper {\n+    /**\n+     * Allow advanced users to modify cache size of the OnceLogger (more for performance tuning in hosted environments)\n+     */\n+    private static final String CACHE_SIZE_PROPERTY = \"org.openapitools.codegen.utils.oncelogger.cachesize\";\n+\n+    /**\n+     * Allow advanced users to disable the OnceLogger (more for performance tuning in hosted environments).\n+     * This is really only useful or necessary if this implementation causes issues.\n+     */\n+    private static final String ENABLE_ONCE_LOGGER_PROPERTY = \"org.openapitools.codegen.utils.oncelogger.enabled\";\n+\n+    /**\n+     * Allow advanced users to modify cache expiration of the OnceLogger (more for performance tuning in hosted environments)\n+     */\n+    private static final String EXPIRY_PROPERTY = \"org.openapitools.codegen.utils.oncelogger.expiry\";\n+\n+    /**\n+     * The fully qualified class name of the <b>logger instance</b>,\n+     * typically the logger class, logger bridge or a logger wrapper.\n+     */\n+    private static final String FQCN = OnceLogger.class.getName();\n+\n+    /**\n+     * Gets the marker instance. This can be used by supported log implementations to filter/manage logs coming from\n+     * this implementation differently than others (i.e. make them stand out since they're to be logged once).\n+     */\n+    private static final Marker MARKER = MarkerFactory.getMarker(\"ONCE\");\n+\n+    /**\n+     * The allowed size of the cache.\n+     */\n+    private static int maxCacheSize = Integer.parseInt(GlobalSettings.getProperty(CACHE_SIZE_PROPERTY, \"200\"));\n+\n+    /**\n+     * The millis to expire a cached log message.\n+     */\n+    private static int expireMillis = Integer.parseInt(GlobalSettings.getProperty(EXPIRY_PROPERTY, \"2000\"));\n+\n+    /**\n+     * The number of allowed repetitions.\n+     */\n+    private static int maxRepetitions = 1;\n+\n+    /**\n+     * Internal message cache for logger decorated with the onceler.\n+     */\n+    private static Cache<String, Integer> messageCountCache;\n+\n+    OnceLogger(Logger logger) {\n+        this(logger, FQCN);\n+    }\n+\n+    OnceLogger(Logger logger, String fqcn) {\n+        super(logger, fqcn);\n+    }\n+\n+    static {\n+        messageCountCache = Caffeine.newBuilder()\n+                .maximumSize(maxCacheSize)\n+                .expireAfterWrite(expireMillis, TimeUnit.MILLISECONDS)\n+                .build();\n+    }\n+\n+    public static Logger once(Logger logger) {\n+        try {\n+            if (Boolean.parseBoolean(GlobalSettings.getProperty(ENABLE_ONCE_LOGGER_PROPERTY, \"true\"))) {\n+                return new OnceLogger(logger);\n+            }\n+        } catch (Exception ex) {\n+            logger.warn(\"Unable to wrap logger instance in OnceLogger. Falling back to non-decorated implementation, which may be noisy.\");\n+        }\n+        return logger;\n+    }\n+\n+    /**\n+     * Delegate to the appropriate method of the underlying logger.\n+     *\n+     * @param msg\n+     */\n+    @Override\n+    public void trace(String msg) {\n+        if (!isTraceEnabled() || !isTraceEnabled(MARKER)) return;\n+\n+        if (shouldLog(msg)) super.trace(MARKER, msg);\n+    }\n+\n+    private boolean shouldLog(final String msg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7355379f16ba955f5db9444917994964105f1a1e"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b9866ff338b6e6e0261ba9874ee26c6d5033fa", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b2b9866ff338b6e6e0261ba9874ee26c6d5033fa", "committedDate": "2020-02-03T02:30:55Z", "message": "Incorporate feedback to avoid race/blocking in OnceLogger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ebfe9459faac15a3014f1ea28e5818b81101681", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/6ebfe9459faac15a3014f1ea28e5818b81101681", "committedDate": "2020-02-03T02:31:11Z", "message": "Merge branch 'master' into normalizing-vendor-extensions\n\n* master:\n  [cli] Optional colorized outputs (#5193)\n  [bug] fix null pointer exception while evaluating recommend\u2026 (#5191)\n  [csharp-netcore] Improved `Multimap` and `ClientUtils` implementation (#5122)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee2208559ad5f8f6c4933de862182ad138fb7539", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ee2208559ad5f8f6c4933de862182ad138fb7539", "committedDate": "2020-02-03T02:51:48Z", "message": "Remove unnecessary additional log config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0343106b15f57731681f166a0c0fa2e8a4c3b0d1", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/0343106b15f57731681f166a0c0fa2e8a4c3b0d1", "committedDate": "2020-02-04T02:27:03Z", "message": "Add tests,comments for OnceLogger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cecbb832109179da87905673233908c6b3435952", "author": {"user": {"login": "jimschubert", "name": "Jim Schubert"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/cecbb832109179da87905673233908c6b3435952", "committedDate": "2020-02-05T02:22:10Z", "message": "Test caffeine cache with FakeTicker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NTA5Njg1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5192#pullrequestreview-354509685", "createdAt": "2020-02-06T14:52:42Z", "commit": {"oid": "cecbb832109179da87905673233908c6b3435952"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2925, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}