{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MjkzNzQ1", "number": 5088, "title": "[C++] [Qt5] Add request compression and handling identity", "bodyText": "Summay\nSupport request compression and improve response compression support in Qt5 client.\nChanges\n\nSplit response and request compression\nAdd request compression\nAdd handling of identity Content-Encoding\nDefault gzip for requests and response compression\n\nSample Test spec\n---\n# This is a sample Swagger spec, describing a simple API as a starting point.\n\nswagger: \"2.0\"\ninfo:\n  description: Application Test Description\n  version: 1.0.0\n  title: ApplicationTemplate\n\nhost: 0.0.0.0:8080\nbasePath: /api\nschemes:\n- http\n\ntags:\n- name : CompressionTestServices\n  x-displayName : \"CompressionTestServices\"\n  description : |\n    \"Test Services offered by the application\"\n\npaths:\n  /simpleEndpoint:\n    post:\n      tags:\n        - CompressionTestServices\n      summary: provide a list of Notifications\n      operationId: setGetCompressedData\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      parameters:\n        - name: reqBody\n          in: body\n          required: true\n          schema:\n            $ref: '#/definitions/Message'\n      responses:\n        '200':\n          description: Success\n          schema:\n            $ref: '#/definitions/Message'\n        '400':\n          description: Bad Request\n          schema:\n            $ref: '#/definitions/Message'\n            \ndefinitions:\n  Message:\n    description: Type to be used to inform about errors happening while executing a command.\n    type: object\n    properties:\n      content:\n        description: Provide a list of all errors happened\n        type: string\nUsage\n#include <QCoreApplication>\n#include <QObject>\n#include <QtGlobal>\n#include <QFile>\n#include <QString>\n\n#include \"OAICompressionTestServicesApi.h\"\n\nusing namespace OpenAPI;\nint main(int argc, char *argv[]) {\n    QCoreApplication a(argc, argv);\n    auto api = new OAICompressionTestServicesApi();\n    api->setHost(QString(\"127.0.0.1\"));\n    api->setPort(8080);\n    api->enableRequestCompression();\n    api->enableResponseCompression();\n    QFile file(\"request.txt\");\n    QByteArray bArray;\n    if (file.exists()) {\n        file.open(QIODevice::ReadOnly);\n        bArray = file.readAll();\n        file.close();\n    }\n    QObject::connect(api, &OAICompressionTestServicesApi::setGetCompressedDataSignalFull, [] \\\n(OAIHttpRequestWorker *worker, OAIMessage summary){\n        Q_UNUSED(worker);\n        QFile file(\"response.txt\");\n        if (file.exists()) {\n            file.remove();\n        }\n        file.open(QIODevice::WriteOnly);\n        file.write(summary.getContent().toUtf8());\n        file.close();\n    });\n    OAIMessage msg;\n    msg.setContent(QString(bArray));\n    api->setGetCompressedData(msg);\n    a.exec();\n}\nServer\n\nASP.NET core with response and request compression\n\nVerification\n\nOpen wireshark and check the data transferred during the request and response before and after\napi->enableRequestCompression();/api->enableResponseCompression(); are called.\n\nReferences\n\nhttps://zlib.net/manual.html\nhttps://zlib.net/zlib_how.html\n\n@muttleyxd @ravinikam @stkrwork @MartinDelille\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.", "createdAt": "2020-01-23T10:40:04Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5088", "merged": true, "mergeCommit": {"oid": "138232d557e5c7b39427b6e351993b85cc5df93c"}, "closed": true, "closedAt": "2020-01-23T19:43:41Z", "author": {"login": "etherealjoy"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9H5nzgH2gAyMzY2MjkzNzQ1OjA1NzJlZGRmMjU2MzdmODdkYWM3ZGU4OTUzYTNlY2JjMTg5ZmFlMjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9MFOwgFqTM0NzM4NzU1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0572eddf25637f87dac7de8953a3ecbc189fae21", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/0572eddf25637f87dac7de8953a3ecbc189fae21", "committedDate": "2020-01-23T10:36:35Z", "message": "Add request and response compression and handling identity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MjIxNTc2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5088#pullrequestreview-347221576", "createdAt": "2020-01-23T11:16:50Z", "commit": {"oid": "0572eddf25637f87dac7de8953a3ecbc189fae21"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMToxNjo1MFrOFg6thg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMToyMDo0OFrOFg6zjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA2MDY3OA==", "bodyText": "This whole block could be simplified I think (or did I miss something?)\n(omitted brackets for shorter code, but I'm fine with them staying)\nif(!isFormData && (input->var_layout != MULTIPART) && isRequestCompressionEnabled)\n   request_content.append(compress(input->request_body, 7, {{prefix}}CompressionType::Gzip));\nelse\n   request_content.append(input->request_body);", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5088#discussion_r370060678", "createdAt": "2020-01-23T11:16:50Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "diffHunk": "@@ -285,7 +289,15 @@ void {{prefix}}HttpRequestWorker::execute({{prefix}}HttpRequestInput *input) {\n     if (input->request_body.size() > 0) {\n         qDebug() << \"got a request body\";\n         request_content.clear();\n-        request_content.append(input->request_body);\n+        if(!isFormData && (input->var_layout != MULTIPART)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0572eddf25637f87dac7de8953a3ecbc189fae21"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA2MjIyMw==", "bodyText": "Are these called 'windows bit' or 'window bit'?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5088#discussion_r370062223", "createdAt": "2020-01-23T11:20:48Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "diffHunk": "@@ -427,8 +444,65 @@ QByteArray {{prefix}}HttpRequestWorker::decompress(const QByteArray& data){\n             sts = true;\n         } while (strm.avail_out == 0);\n         inflateEnd(&strm);\n-    } while(false);{{/contentCompression}}\n-    return sts ? result : QByteArray();\n+    } while(false);\n+    return sts ? result : QByteArray();{{/contentCompression}}{{^contentCompression}}\n+    Q_UNUSED(data);\n+    return QByteArray();{{/contentCompression}}\n+}\n+\n+QByteArray {{prefix}}HttpRequestWorker::compress(const QByteArray& input, int level, {{prefix}}CompressionType compressType) {\n+    {{#contentCompression}}QByteArray output;\n+    static const int GZIP_WINDOWS_BIT = 15+16;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0572eddf25637f87dac7de8953a3ecbc189fae21"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d8ad952e9273b9212faebcb70ad5f36f0d8733a", "author": {"user": {"login": "etherealjoy", "name": "sunn"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/0d8ad952e9273b9212faebcb70ad5f36f0d8733a", "committedDate": "2020-01-23T15:17:26Z", "message": "Minor updates for identity and if conditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3Mzg3NTUx", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5088#pullrequestreview-347387551", "createdAt": "2020-01-23T15:28:53Z", "commit": {"oid": "0d8ad952e9273b9212faebcb70ad5f36f0d8733a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2845, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}