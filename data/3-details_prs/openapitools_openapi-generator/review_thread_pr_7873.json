{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MjYwNTc2", "number": 7873, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTo1MToyNFrOE3JU0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwODowNzo0M1rOE78NwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjU5OTIzOnYy", "diffSide": "RIGHT", "path": "Dockerfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTo1MToyNFrOHwUdWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoxNTo0MVrOHwVecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyODg5MA==", "bodyText": "Is this just a leftover from local testing? I don't think we should turn off tests.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r520428890", "createdAt": "2020-11-10T09:51:24Z", "author": {"login": "bkabrda"}, "path": "Dockerfile", "diffHunk": "@@ -20,7 +20,7 @@ COPY ./modules/openapi-generator ${GEN_DIR}/modules/openapi-generator\n COPY ./pom.xml ${GEN_DIR}\n \n # Pre-compile openapi-generator-cli\n-RUN mvn -am -pl \"modules/openapi-generator-cli\" package\n+RUN mvn -DskipTests -am -pl \"modules/openapi-generator-cli\" package", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bdb91ff37abac9790f2cd44054927174846440b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0NTU1NA==", "bodyText": "Yep removing.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r520445554", "createdAt": "2020-11-10T10:15:41Z", "author": {"login": "therve"}, "path": "Dockerfile", "diffHunk": "@@ -20,7 +20,7 @@ COPY ./modules/openapi-generator ${GEN_DIR}/modules/openapi-generator\n COPY ./pom.xml ${GEN_DIR}\n \n # Pre-compile openapi-generator-cli\n-RUN mvn -am -pl \"modules/openapi-generator-cli\" package\n+RUN mvn -DskipTests -am -pl \"modules/openapi-generator-cli\" package", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyODg5MA=="}, "originalCommit": {"oid": "9bdb91ff37abac9790f2cd44054927174846440b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjY3NDk0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoClientCodegen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDowODo0OVrOHwVMiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoyMjo0NVrOHwVwhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0MDk2OQ==", "bodyText": "I'd suggest using \"map[string][]\".length() instead of 13. It's self-commenting and also prevents off-by-one errors. (There are couple instances of this, so please fix them all)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r520440969", "createdAt": "2020-11-10T10:08:49Z", "author": {"login": "bkabrda"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoClientCodegen.java", "diffHunk": "@@ -448,26 +448,44 @@ public CodegenProperty fromProperty(String name, Schema p) {\n             for (CodegenParameter p : op.allParams) {\n                 p.vendorExtensions.put(\"x-go-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n             }\n+            processedModelMaps.clear();\n         }\n \n-        processedModelMaps.clear();\n         for (CodegenOperation operation : operationList) {\n+            boolean needTimeImport = false;\n             for (CodegenParameter cp : operation.allParams) {\n                 cp.vendorExtensions.put(\"x-go-example\", constructExampleCode(cp, modelMaps, processedModelMaps));\n+                if (cp.isDateTime || cp.isDate) { // datetime or date\n+                    needTimeImport = true;\n+                }\n+            }\n+            if (needTimeImport) {\n+                operation.vendorExtensions.put(\"x-go-import\", \"    \\\"time\\\"\");\n             }\n+            processedModelMaps.clear();\n         }\n \n         return objs;\n     }\n \n     private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n         if (codegenParameter.isArray) { // array\n-            return codegenParameter.dataType + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = codegenParameter.dataType.substring(2);\n+            if (modelMaps.containsKey(dataType)) {\n+                prefix = \"[]\" + goImportAlias + \".\" + dataType;\n+            }\n+            return prefix + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n         } else if (codegenParameter.isMap) {\n-            return codegenParameter.dataType + \"{ \\\"key\\\": \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = codegenParameter.dataType.substring(13); // map[string][]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bdb91ff37abac9790f2cd44054927174846440b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ1MDE4MA==", "bodyText": "Good thinking. I tried removeStart  which seems even more clear, let me know if it works.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r520450180", "createdAt": "2020-11-10T10:22:45Z", "author": {"login": "therve"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoClientCodegen.java", "diffHunk": "@@ -448,26 +448,44 @@ public CodegenProperty fromProperty(String name, Schema p) {\n             for (CodegenParameter p : op.allParams) {\n                 p.vendorExtensions.put(\"x-go-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n             }\n+            processedModelMaps.clear();\n         }\n \n-        processedModelMaps.clear();\n         for (CodegenOperation operation : operationList) {\n+            boolean needTimeImport = false;\n             for (CodegenParameter cp : operation.allParams) {\n                 cp.vendorExtensions.put(\"x-go-example\", constructExampleCode(cp, modelMaps, processedModelMaps));\n+                if (cp.isDateTime || cp.isDate) { // datetime or date\n+                    needTimeImport = true;\n+                }\n+            }\n+            if (needTimeImport) {\n+                operation.vendorExtensions.put(\"x-go-import\", \"    \\\"time\\\"\");\n             }\n+            processedModelMaps.clear();\n         }\n \n         return objs;\n     }\n \n     private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n         if (codegenParameter.isArray) { // array\n-            return codegenParameter.dataType + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = codegenParameter.dataType.substring(2);\n+            if (modelMaps.containsKey(dataType)) {\n+                prefix = \"[]\" + goImportAlias + \".\" + dataType;\n+            }\n+            return prefix + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n         } else if (codegenParameter.isMap) {\n-            return codegenParameter.dataType + \"{ \\\"key\\\": \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = codegenParameter.dataType.substring(13); // map[string][]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0MDk2OQ=="}, "originalCommit": {"oid": "9bdb91ff37abac9790f2cd44054927174846440b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjY5MDQ4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/go/api_doc.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoxMjoyNVrOHwVV9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDoxMjoyNVrOHwVV9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ0MzM4Mw==", "bodyText": "I think if you just use\n{{#vendorExtensions.x-go-import}}\n{{{vendorExtensions.x-go-import}}}\n{{/vendorExtensions.x-go-import}}\n\nwithout any heading/trailing whitespace, it will still produce no output (not even blank lines) if there are no extra imports - this would make the template code nicer.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r520443383", "createdAt": "2020-11-10T10:12:25Z", "author": {"login": "bkabrda"}, "path": "modules/openapi-generator/src/main/resources/go/api_doc.mustache", "diffHunk": "@@ -28,7 +28,8 @@ package main\n import (\n     \"context\"\n     \"fmt\"\n-    \"os\"\n+    \"os\"{{#vendorExtensions.x-go-import}}\n+{{{vendorExtensions.x-go-import}}}{{/vendorExtensions.x-go-import}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bdb91ff37abac9790f2cd44054927174846440b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjg4MDAxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoClientCodegen.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwODowNzo0M1rOH30zvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMzowOTo0MFrOH326og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5ODk0Mg==", "bodyText": "@therve FYI. I've fled #7998 to fix the string comparison in this line and a few other lines in this file.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r528298942", "createdAt": "2020-11-22T08:07:43Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoClientCodegen.java", "diffHunk": "@@ -448,26 +448,44 @@ public CodegenProperty fromProperty(String name, Schema p) {\n             for (CodegenParameter p : op.allParams) {\n                 p.vendorExtensions.put(\"x-go-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n             }\n+            processedModelMaps.clear();\n         }\n \n-        processedModelMaps.clear();\n         for (CodegenOperation operation : operationList) {\n+            boolean needTimeImport = false;\n             for (CodegenParameter cp : operation.allParams) {\n                 cp.vendorExtensions.put(\"x-go-example\", constructExampleCode(cp, modelMaps, processedModelMaps));\n+                if (cp.isDateTime || cp.isDate) { // datetime or date\n+                    needTimeImport = true;\n+                }\n+            }\n+            if (needTimeImport) {\n+                operation.vendorExtensions.put(\"x-go-import\", \"    \\\"time\\\"\");\n             }\n+            processedModelMaps.clear();\n         }\n \n         return objs;\n     }\n \n     private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n         if (codegenParameter.isArray) { // array\n-            return codegenParameter.dataType + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = StringUtils.removeStart(codegenParameter.dataType, \"[]\");\n+            if (modelMaps.containsKey(dataType)) {\n+                prefix = \"[]\" + goImportAlias + \".\" + dataType;\n+            }\n+            return prefix + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n         } else if (codegenParameter.isMap) {\n-            return codegenParameter.dataType + \"{ \\\"key\\\": \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = StringUtils.removeStart(codegenParameter.dataType, \"map[string][]\");\n+            if (modelMaps.containsKey(dataType)) {\n+                prefix = \"map[string][]\" + goImportAlias + \".\" + dataType;\n+            }\n+            return prefix + \"{\\\"key\\\": \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n         } else if (codegenParameter.isPrimitiveType) { // primitive type\n             if (codegenParameter.isString) {\n-                if (StringUtils.isEmpty(codegenParameter.example)) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && codegenParameter.example != \"null\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f35ab0e226c8e547feca668f029e0d815d2cf87"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMzMzA5MA==", "bodyText": "Sorry about. Not sure why I didn't catch that during testing :/", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r528333090", "createdAt": "2020-11-22T13:06:17Z", "author": {"login": "therve"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoClientCodegen.java", "diffHunk": "@@ -448,26 +448,44 @@ public CodegenProperty fromProperty(String name, Schema p) {\n             for (CodegenParameter p : op.allParams) {\n                 p.vendorExtensions.put(\"x-go-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n             }\n+            processedModelMaps.clear();\n         }\n \n-        processedModelMaps.clear();\n         for (CodegenOperation operation : operationList) {\n+            boolean needTimeImport = false;\n             for (CodegenParameter cp : operation.allParams) {\n                 cp.vendorExtensions.put(\"x-go-example\", constructExampleCode(cp, modelMaps, processedModelMaps));\n+                if (cp.isDateTime || cp.isDate) { // datetime or date\n+                    needTimeImport = true;\n+                }\n+            }\n+            if (needTimeImport) {\n+                operation.vendorExtensions.put(\"x-go-import\", \"    \\\"time\\\"\");\n             }\n+            processedModelMaps.clear();\n         }\n \n         return objs;\n     }\n \n     private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n         if (codegenParameter.isArray) { // array\n-            return codegenParameter.dataType + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = StringUtils.removeStart(codegenParameter.dataType, \"[]\");\n+            if (modelMaps.containsKey(dataType)) {\n+                prefix = \"[]\" + goImportAlias + \".\" + dataType;\n+            }\n+            return prefix + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n         } else if (codegenParameter.isMap) {\n-            return codegenParameter.dataType + \"{ \\\"key\\\": \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = StringUtils.removeStart(codegenParameter.dataType, \"map[string][]\");\n+            if (modelMaps.containsKey(dataType)) {\n+                prefix = \"map[string][]\" + goImportAlias + \".\" + dataType;\n+            }\n+            return prefix + \"{\\\"key\\\": \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n         } else if (codegenParameter.isPrimitiveType) { // primitive type\n             if (codegenParameter.isString) {\n-                if (StringUtils.isEmpty(codegenParameter.example)) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && codegenParameter.example != \"null\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5ODk0Mg=="}, "originalCommit": {"oid": "8f35ab0e226c8e547feca668f029e0d815d2cf87"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMzMzQ3NA==", "bodyText": "No worries. No one complains. We spotted it with a code analyser.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7873#discussion_r528333474", "createdAt": "2020-11-22T13:09:40Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoClientCodegen.java", "diffHunk": "@@ -448,26 +448,44 @@ public CodegenProperty fromProperty(String name, Schema p) {\n             for (CodegenParameter p : op.allParams) {\n                 p.vendorExtensions.put(\"x-go-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n             }\n+            processedModelMaps.clear();\n         }\n \n-        processedModelMaps.clear();\n         for (CodegenOperation operation : operationList) {\n+            boolean needTimeImport = false;\n             for (CodegenParameter cp : operation.allParams) {\n                 cp.vendorExtensions.put(\"x-go-example\", constructExampleCode(cp, modelMaps, processedModelMaps));\n+                if (cp.isDateTime || cp.isDate) { // datetime or date\n+                    needTimeImport = true;\n+                }\n+            }\n+            if (needTimeImport) {\n+                operation.vendorExtensions.put(\"x-go-import\", \"    \\\"time\\\"\");\n             }\n+            processedModelMaps.clear();\n         }\n \n         return objs;\n     }\n \n     private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n         if (codegenParameter.isArray) { // array\n-            return codegenParameter.dataType + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = StringUtils.removeStart(codegenParameter.dataType, \"[]\");\n+            if (modelMaps.containsKey(dataType)) {\n+                prefix = \"[]\" + goImportAlias + \".\" + dataType;\n+            }\n+            return prefix + \"{\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n         } else if (codegenParameter.isMap) {\n-            return codegenParameter.dataType + \"{ \\\"key\\\": \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+            String prefix = codegenParameter.dataType;\n+            String dataType = StringUtils.removeStart(codegenParameter.dataType, \"map[string][]\");\n+            if (modelMaps.containsKey(dataType)) {\n+                prefix = \"map[string][]\" + goImportAlias + \".\" + dataType;\n+            }\n+            return prefix + \"{\\\"key\\\": \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n         } else if (codegenParameter.isPrimitiveType) { // primitive type\n             if (codegenParameter.isString) {\n-                if (StringUtils.isEmpty(codegenParameter.example)) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && codegenParameter.example != \"null\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5ODk0Mg=="}, "originalCommit": {"oid": "8f35ab0e226c8e547feca668f029e0d815d2cf87"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4067, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}