{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTc3MjA0", "number": 4969, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMzozMDowOVrODXalFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMzozMToyOVrODXalhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODc5MzE2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/SpringCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMzozMDowOVrOFcs0Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1MTowN1rOFdA6dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzODcwMg==", "bodyText": "We need a case for Long (isLongSchema) and add \"L\" at the end of the default value. Please see the error message below for details.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4969#discussion_r365638702", "createdAt": "2020-01-13T03:30:09Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/SpringCodegen.java", "diffHunk": "@@ -849,4 +852,83 @@ public void setPerformBeanValidation(boolean performBeanValidation) {\n     public void setUseOptional(boolean useOptional) {\n         this.useOptional = useOptional;\n     }\n+\n+    @Override\n+    public String toDefaultValue(Schema p) {\n+        // we use a custom version of this function to remove the l, d, and f suffixes from integer and double values\n+        // these values are later converted from strings to the primitive types using parseInt, parseLong etc so they\n+        // should not include type suffix literals\n+        // https://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10\n+        if (ModelUtils.isArraySchema(p)) {\n+            final ArraySchema ap = (ArraySchema) p;\n+            final String pattern;\n+            if (fullJavaUtil) {\n+                pattern = \"new java.util.ArrayList<%s>()\";\n+            } else {\n+                pattern = \"new ArrayList<%s>()\";\n+            }\n+            if (ap.getItems() == null) {\n+                return null;\n+            }\n+\n+            String typeDeclaration = getTypeDeclaration(ap.getItems());\n+            Object java8obj = additionalProperties.get(\"java8\");\n+            if (java8obj != null) {\n+                Boolean java8 = Boolean.valueOf(java8obj.toString());\n+                if (java8 != null && java8) {\n+                    typeDeclaration = \"\";\n+                }\n+            }\n+\n+            return String.format(Locale.ROOT, pattern, typeDeclaration);\n+        } else if (ModelUtils.isMapSchema(p)) {\n+            final String pattern;\n+            if (fullJavaUtil) {\n+                pattern = \"new java.util.HashMap<%s>()\";\n+            } else {\n+                pattern = \"new HashMap<%s>()\";\n+            }\n+            if (ModelUtils.getAdditionalProperties(p) == null) {\n+                return null;\n+            }\n+\n+            String typeDeclaration = String.format(Locale.ROOT, \"String, %s\", getTypeDeclaration(ModelUtils.getAdditionalProperties(p)));\n+            Object java8obj = additionalProperties.get(\"java8\");\n+            if (java8obj != null) {\n+                Boolean java8 = Boolean.valueOf(java8obj.toString());\n+                if (java8 != null && java8) {\n+                    typeDeclaration = \"\";\n+                }\n+            }\n+\n+            return String.format(Locale.ROOT, pattern, typeDeclaration);\n+        } else if (ModelUtils.isIntegerSchema(p)) {\n+            if (p.getDefault() != null) {\n+                return p.getDefault().toString();\n+            }\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be281e895143b262e7552d6a705bce66c8ccc16"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2Nzk5MA==", "bodyText": "For CodegenProperty, I changed the code back to preserve the \"l\" suffix for this case. If you need me to change our existing code in AbstractJavaCodegen.java from adding \"l\" to \"L\" please let me know.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4969#discussion_r365967990", "createdAt": "2020-01-13T18:51:07Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/SpringCodegen.java", "diffHunk": "@@ -849,4 +852,83 @@ public void setPerformBeanValidation(boolean performBeanValidation) {\n     public void setUseOptional(boolean useOptional) {\n         this.useOptional = useOptional;\n     }\n+\n+    @Override\n+    public String toDefaultValue(Schema p) {\n+        // we use a custom version of this function to remove the l, d, and f suffixes from integer and double values\n+        // these values are later converted from strings to the primitive types using parseInt, parseLong etc so they\n+        // should not include type suffix literals\n+        // https://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10\n+        if (ModelUtils.isArraySchema(p)) {\n+            final ArraySchema ap = (ArraySchema) p;\n+            final String pattern;\n+            if (fullJavaUtil) {\n+                pattern = \"new java.util.ArrayList<%s>()\";\n+            } else {\n+                pattern = \"new ArrayList<%s>()\";\n+            }\n+            if (ap.getItems() == null) {\n+                return null;\n+            }\n+\n+            String typeDeclaration = getTypeDeclaration(ap.getItems());\n+            Object java8obj = additionalProperties.get(\"java8\");\n+            if (java8obj != null) {\n+                Boolean java8 = Boolean.valueOf(java8obj.toString());\n+                if (java8 != null && java8) {\n+                    typeDeclaration = \"\";\n+                }\n+            }\n+\n+            return String.format(Locale.ROOT, pattern, typeDeclaration);\n+        } else if (ModelUtils.isMapSchema(p)) {\n+            final String pattern;\n+            if (fullJavaUtil) {\n+                pattern = \"new java.util.HashMap<%s>()\";\n+            } else {\n+                pattern = \"new HashMap<%s>()\";\n+            }\n+            if (ModelUtils.getAdditionalProperties(p) == null) {\n+                return null;\n+            }\n+\n+            String typeDeclaration = String.format(Locale.ROOT, \"String, %s\", getTypeDeclaration(ModelUtils.getAdditionalProperties(p)));\n+            Object java8obj = additionalProperties.get(\"java8\");\n+            if (java8obj != null) {\n+                Boolean java8 = Boolean.valueOf(java8obj.toString());\n+                if (java8 != null && java8) {\n+                    typeDeclaration = \"\";\n+                }\n+            }\n+\n+            return String.format(Locale.ROOT, pattern, typeDeclaration);\n+        } else if (ModelUtils.isIntegerSchema(p)) {\n+            if (p.getDefault() != null) {\n+                return p.getDefault().toString();\n+            }\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzODcwMg=="}, "originalCommit": {"oid": "4be281e895143b262e7552d6a705bce66c8ccc16"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODc5MzQwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/SpringCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMzozMDoyN1rOFcs0Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1MTozOFrOFdA7Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzODczNQ==", "bodyText": "We need a case for Float (isFloatSchema) and add \"F\" at the end of the default value. Please see the error message below for details.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4969#discussion_r365638735", "createdAt": "2020-01-13T03:30:27Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/SpringCodegen.java", "diffHunk": "@@ -849,4 +852,83 @@ public void setPerformBeanValidation(boolean performBeanValidation) {\n     public void setUseOptional(boolean useOptional) {\n         this.useOptional = useOptional;\n     }\n+\n+    @Override\n+    public String toDefaultValue(Schema p) {\n+        // we use a custom version of this function to remove the l, d, and f suffixes from integer and double values\n+        // these values are later converted from strings to the primitive types using parseInt, parseLong etc so they\n+        // should not include type suffix literals\n+        // https://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10\n+        if (ModelUtils.isArraySchema(p)) {\n+            final ArraySchema ap = (ArraySchema) p;\n+            final String pattern;\n+            if (fullJavaUtil) {\n+                pattern = \"new java.util.ArrayList<%s>()\";\n+            } else {\n+                pattern = \"new ArrayList<%s>()\";\n+            }\n+            if (ap.getItems() == null) {\n+                return null;\n+            }\n+\n+            String typeDeclaration = getTypeDeclaration(ap.getItems());\n+            Object java8obj = additionalProperties.get(\"java8\");\n+            if (java8obj != null) {\n+                Boolean java8 = Boolean.valueOf(java8obj.toString());\n+                if (java8 != null && java8) {\n+                    typeDeclaration = \"\";\n+                }\n+            }\n+\n+            return String.format(Locale.ROOT, pattern, typeDeclaration);\n+        } else if (ModelUtils.isMapSchema(p)) {\n+            final String pattern;\n+            if (fullJavaUtil) {\n+                pattern = \"new java.util.HashMap<%s>()\";\n+            } else {\n+                pattern = \"new HashMap<%s>()\";\n+            }\n+            if (ModelUtils.getAdditionalProperties(p) == null) {\n+                return null;\n+            }\n+\n+            String typeDeclaration = String.format(Locale.ROOT, \"String, %s\", getTypeDeclaration(ModelUtils.getAdditionalProperties(p)));\n+            Object java8obj = additionalProperties.get(\"java8\");\n+            if (java8obj != null) {\n+                Boolean java8 = Boolean.valueOf(java8obj.toString());\n+                if (java8 != null && java8) {\n+                    typeDeclaration = \"\";\n+                }\n+            }\n+\n+            return String.format(Locale.ROOT, pattern, typeDeclaration);\n+        } else if (ModelUtils.isIntegerSchema(p)) {\n+            if (p.getDefault() != null) {\n+                return p.getDefault().toString();\n+            }\n+            return null;\n+        } else if (ModelUtils.isNumberSchema(p)) {\n+            if (p.getDefault() != null) {\n+                return p.getDefault().toString();\n+            }\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be281e895143b262e7552d6a705bce66c8ccc16"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2ODIzMQ==", "bodyText": "For CodegenProperty, I changed the code back to preserve the \"f\" suffix for this case. If you need me to change our existing code in AbstractJavaCodegen.java from adding \"f\" to \"F\" please let me know.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4969#discussion_r365968231", "createdAt": "2020-01-13T18:51:38Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/SpringCodegen.java", "diffHunk": "@@ -849,4 +852,83 @@ public void setPerformBeanValidation(boolean performBeanValidation) {\n     public void setUseOptional(boolean useOptional) {\n         this.useOptional = useOptional;\n     }\n+\n+    @Override\n+    public String toDefaultValue(Schema p) {\n+        // we use a custom version of this function to remove the l, d, and f suffixes from integer and double values\n+        // these values are later converted from strings to the primitive types using parseInt, parseLong etc so they\n+        // should not include type suffix literals\n+        // https://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10\n+        if (ModelUtils.isArraySchema(p)) {\n+            final ArraySchema ap = (ArraySchema) p;\n+            final String pattern;\n+            if (fullJavaUtil) {\n+                pattern = \"new java.util.ArrayList<%s>()\";\n+            } else {\n+                pattern = \"new ArrayList<%s>()\";\n+            }\n+            if (ap.getItems() == null) {\n+                return null;\n+            }\n+\n+            String typeDeclaration = getTypeDeclaration(ap.getItems());\n+            Object java8obj = additionalProperties.get(\"java8\");\n+            if (java8obj != null) {\n+                Boolean java8 = Boolean.valueOf(java8obj.toString());\n+                if (java8 != null && java8) {\n+                    typeDeclaration = \"\";\n+                }\n+            }\n+\n+            return String.format(Locale.ROOT, pattern, typeDeclaration);\n+        } else if (ModelUtils.isMapSchema(p)) {\n+            final String pattern;\n+            if (fullJavaUtil) {\n+                pattern = \"new java.util.HashMap<%s>()\";\n+            } else {\n+                pattern = \"new HashMap<%s>()\";\n+            }\n+            if (ModelUtils.getAdditionalProperties(p) == null) {\n+                return null;\n+            }\n+\n+            String typeDeclaration = String.format(Locale.ROOT, \"String, %s\", getTypeDeclaration(ModelUtils.getAdditionalProperties(p)));\n+            Object java8obj = additionalProperties.get(\"java8\");\n+            if (java8obj != null) {\n+                Boolean java8 = Boolean.valueOf(java8obj.toString());\n+                if (java8 != null && java8) {\n+                    typeDeclaration = \"\";\n+                }\n+            }\n+\n+            return String.format(Locale.ROOT, pattern, typeDeclaration);\n+        } else if (ModelUtils.isIntegerSchema(p)) {\n+            if (p.getDefault() != null) {\n+                return p.getDefault().toString();\n+            }\n+            return null;\n+        } else if (ModelUtils.isNumberSchema(p)) {\n+            if (p.getDefault() != null) {\n+                return p.getDefault().toString();\n+            }\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzODczNQ=="}, "originalCommit": {"oid": "4be281e895143b262e7552d6a705bce66c8ccc16"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODc5NDMxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/test/resources/2_0/issue1226.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMzozMToyOVrOFcs00g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo1MjoxNlrOFdA8qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzODg2Ng==", "bodyText": "FYI. I got the following when testing the spring app generated from this spec:\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.7.0:compile (default-compile) on project openapi-spring: Compilation failure\n[ERROR] /private/tmp/spring/src/main/java/org/openapitools/model/NumberHolder.java:[20,24] integer number too large: 9223372036854775807\n\nAppended \"L\" at the end of the default value fixes it.\nFor float, I fixed the issue by appending \"F\" to the default value.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4969#discussion_r365638866", "createdAt": "2020-01-13T03:31:29Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/test/resources/2_0/issue1226.yaml", "diffHunk": "@@ -0,0 +1,71 @@\n+swagger: '2.0'\n+info:\n+  description: 'blah'\n+  version: 1.0.0\n+  title: sample spec\n+host: fake.site.com\n+tags: []\n+schemes:\n+  - https\n+paths:\n+  /numberdata:\n+    post:\n+      summary: Get back a NumberHolder\n+      description: ''\n+      operationId: getNumberHolder\n+      consumes:\n+        - application/json\n+      produces:\n+        - application/json\n+      parameters: []\n+      responses:\n+        '200':\n+          description: successful operation\n+          schema:\n+            $ref: '#/definitions/NumberHolder'\n+  /numericqueryparams:\n+    get:\n+      tags:\n+        - user\n+      summary: a test route for numeric query params\n+      description: ''\n+      operationId: numericQueryParams\n+      produces:\n+        - application/json\n+      parameters:\n+        - in: query\n+          name: int64\n+          type: integer\n+          format: int64\n+          default: 9223372036854775807", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be281e895143b262e7552d6a705bce66c8ccc16"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2ODU1NQ==", "bodyText": "For CodegenProperty, I changed the code back to preserve the \"l\" suffix for this case. If you need me to change our existing code in AbstractJavaCodegen.java from adding \"l\" to \"L\" please let me know.\nFor CodegenProperty, I changed the code back to preserve the \"f\" suffix for this case. If you need me to change our existing code in AbstractJavaCodegen.java from adding \"f\" to \"F\" please let me know.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4969#discussion_r365968555", "createdAt": "2020-01-13T18:52:16Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/resources/2_0/issue1226.yaml", "diffHunk": "@@ -0,0 +1,71 @@\n+swagger: '2.0'\n+info:\n+  description: 'blah'\n+  version: 1.0.0\n+  title: sample spec\n+host: fake.site.com\n+tags: []\n+schemes:\n+  - https\n+paths:\n+  /numberdata:\n+    post:\n+      summary: Get back a NumberHolder\n+      description: ''\n+      operationId: getNumberHolder\n+      consumes:\n+        - application/json\n+      produces:\n+        - application/json\n+      parameters: []\n+      responses:\n+        '200':\n+          description: successful operation\n+          schema:\n+            $ref: '#/definitions/NumberHolder'\n+  /numericqueryparams:\n+    get:\n+      tags:\n+        - user\n+      summary: a test route for numeric query params\n+      description: ''\n+      operationId: numericQueryParams\n+      produces:\n+        - application/json\n+      parameters:\n+        - in: query\n+          name: int64\n+          type: integer\n+          format: int64\n+          default: 9223372036854775807", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzODg2Ng=="}, "originalCommit": {"oid": "4be281e895143b262e7552d6a705bce66c8ccc16"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4017, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}