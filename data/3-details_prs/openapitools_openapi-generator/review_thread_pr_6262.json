{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDM2Nzgx", "number": 6262, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjoxOTozMVrOD7ui6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTo0MjoxM1rOD7zHtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTU1MTc5OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjoxOTozMVrOGUOm3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODozNTowNVrOGUT0Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2NDAyOA==", "bodyText": "Thanks for adding this test\nThis test is helpful because it demonstrates that there is a bug here and drawings are not able to accept Shape/Triangle instances because type checking is failing.\nSo the pattern that we have been using is to have this test_deserialization.py file verify deserializing json payloads into python classes.\nWe use the files like test_drawing.py to demonstrate that we can instantiate model instances correctly.\nIn order to follow our patterns on where tests are how about\n\nmoving this test into samples/openapi3/client/petstore/python-experimental/test/test_drawing.py ?\n\nIf you want to add a test here can you update it to demonstrate deserializing a Drawing json payload?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423864028", "createdAt": "2020-05-12T16:19:31Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -161,3 +161,26 @@ def test_deserialize_mammal(self):\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n         self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_oneof_reference(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "603b6fb200ebf372ef7343f1e81aa4b6b64a6ccd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0OTM5OQ==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423949399", "createdAt": "2020-05-12T18:35:05Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -161,3 +161,26 @@ def test_deserialize_mammal(self):\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n         self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_oneof_reference(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2NDAyOA=="}, "originalCommit": {"oid": "603b6fb200ebf372ef7343f1e81aa4b6b64a6ccd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTU2OTE3OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjoyMzo0NFrOGUOyYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo0NTowN1rOGUUKzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2Njk3OQ==", "bodyText": "This line is hard for me to understand. Why are we expecting the instance type to be BiologyHominid. Should it be petstore_api .Drawing?\nAlso, because Drawing is an object type schema (ModelNormal subclass) in python, and doesn't have a discriminator, we will never pick a different class when moving through the new method, so we are sure that instances that we make from it will always be of type Drawing.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423866979", "createdAt": "2020-05-12T16:23:44Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -161,3 +161,26 @@ def test_deserialize_mammal(self):\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n         self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_oneof_reference(self):\n+\n+        inst = petstore_api.Drawing(\n+            # 'main_shape' has type 'Shape', which is a oneOf [triangle, quadrilateral]\n+            # composed schema. So we should be able to assign a petstore_api.Triangle\n+            # to a 'main_shape'.\n+            main_shape=petstore_api.Triangle(\n+                shape_type=\"Triangle\",\n+                triangle_type=\"IsoscelesTriangle\"\n+            ),\n+            shapes=[\n+                petstore_api.Triangle(\n+                    shape_type=\"Triangle\",\n+                    triangle_type=\"IsoscelesTriangle\"\n+                ),\n+                petstore_api.Shape(\n+                    shape_type=\"Quadrilateral\",\n+                    quadrilateral_type=\"ComplexQuadrilateral\"\n+                ),\n+            ],\n+        )\n+        assert isinstance(inst, petstore_api.BiologyHominid)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "603b6fb200ebf372ef7343f1e81aa4b6b64a6ccd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MDk2NQ==", "bodyText": "This line is hard for me to understand. Why are we expecting the instance type to be BiologyHominid. Should it be petstore_api .Drawing?\n\nThis is a typo.\n\nAlso, because Drawing is an object type schema (ModelNormal subclass) in python, and doesn't have a discriminator, we will never pick a different class when moving through the new method, so we are sure that instances that we make from it will always be of type Drawing.\n\nSure, it's just that I was planning to add more assertions, and it does not hurt to add an assertion.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423950965", "createdAt": "2020-05-12T18:37:51Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -161,3 +161,26 @@ def test_deserialize_mammal(self):\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n         self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_oneof_reference(self):\n+\n+        inst = petstore_api.Drawing(\n+            # 'main_shape' has type 'Shape', which is a oneOf [triangle, quadrilateral]\n+            # composed schema. So we should be able to assign a petstore_api.Triangle\n+            # to a 'main_shape'.\n+            main_shape=petstore_api.Triangle(\n+                shape_type=\"Triangle\",\n+                triangle_type=\"IsoscelesTriangle\"\n+            ),\n+            shapes=[\n+                petstore_api.Triangle(\n+                    shape_type=\"Triangle\",\n+                    triangle_type=\"IsoscelesTriangle\"\n+                ),\n+                petstore_api.Shape(\n+                    shape_type=\"Quadrilateral\",\n+                    quadrilateral_type=\"ComplexQuadrilateral\"\n+                ),\n+            ],\n+        )\n+        assert isinstance(inst, petstore_api.BiologyHominid)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2Njk3OQ=="}, "originalCommit": {"oid": "603b6fb200ebf372ef7343f1e81aa4b6b64a6ccd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1NTE1MQ==", "bodyText": "Nope it doesn't hurt", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423955151", "createdAt": "2020-05-12T18:45:07Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -161,3 +161,26 @@ def test_deserialize_mammal(self):\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n         self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_oneof_reference(self):\n+\n+        inst = petstore_api.Drawing(\n+            # 'main_shape' has type 'Shape', which is a oneOf [triangle, quadrilateral]\n+            # composed schema. So we should be able to assign a petstore_api.Triangle\n+            # to a 'main_shape'.\n+            main_shape=petstore_api.Triangle(\n+                shape_type=\"Triangle\",\n+                triangle_type=\"IsoscelesTriangle\"\n+            ),\n+            shapes=[\n+                petstore_api.Triangle(\n+                    shape_type=\"Triangle\",\n+                    triangle_type=\"IsoscelesTriangle\"\n+                ),\n+                petstore_api.Shape(\n+                    shape_type=\"Quadrilateral\",\n+                    quadrilateral_type=\"ComplexQuadrilateral\"\n+                ),\n+            ],\n+        )\n+        assert isinstance(inst, petstore_api.BiologyHominid)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2Njk3OQ=="}, "originalCommit": {"oid": "603b6fb200ebf372ef7343f1e81aa4b6b64a6ccd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDMwMTMzOnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/test/test_drawing.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTo0MjoxM1rOGUWMXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTo1MDoxNFrOGUWc0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4ODMxNw==", "bodyText": "Can we keep one of these classes as Triangle, or a specific one like EquilateralTriangle?\nThat requires that our solution depends upon Shape's discriminator and not on instance._visited_composed_classes containing Shape.\nWe should be able to pass any of these class inputs for shapes:\n\npetstore_api.Shape\npetstore_api.Triangle\npetstore_api.EquilateralTriangle\netc", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423988317", "createdAt": "2020-05-12T19:42:13Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_drawing.py", "diffHunk": "@@ -0,0 +1,58 @@\n+# coding: utf-8\n+\n+\"\"\"\n+    OpenAPI Petstore\n+\n+    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \\\" \\\\  # noqa: E501\n+\n+    The version of the OpenAPI document: 1.0.0\n+    Generated by: https://openapi-generator.tech\n+\"\"\"\n+\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+import petstore_api\n+\n+\n+class TestDrawing(unittest.TestCase):\n+    \"\"\"Drawing unit test stubs\"\"\"\n+\n+    def setUp(self):\n+        self.api_client = petstore_api.ApiClient()\n+\n+    def tearDown(self):\n+        pass\n+\n+    def test_deserialize_oneof_reference(self):\n+        isosceles_triangle = petstore_api.Shape(\n+            shape_type=\"Triangle\",\n+            triangle_type=\"IsoscelesTriangle\"\n+        )\n+        assert isinstance(isosceles_triangle, petstore_api.IsoscelesTriangle)\n+        inst = petstore_api.Drawing(\n+            # 'main_shape' has type 'Shape', which is a oneOf [triangle, quadrilateral]\n+            # composed schema. So we should be able to assign a petstore_api.Triangle\n+            # to a 'main_shape'.\n+            main_shape=isosceles_triangle,\n+            shapes=[\n+                petstore_api.Shape(\n+                    shape_type=\"Triangle\",\n+                    triangle_type=\"EquilateralTriangle\"\n+                ),\n+                petstore_api.Shape(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a05ff65b341a1a7b57498c26f0ae57a4a391bd3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5MjUzMQ==", "bodyText": "I've improved the unit tests.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6262#discussion_r423992531", "createdAt": "2020-05-12T19:50:14Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_drawing.py", "diffHunk": "@@ -0,0 +1,58 @@\n+# coding: utf-8\n+\n+\"\"\"\n+    OpenAPI Petstore\n+\n+    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \\\" \\\\  # noqa: E501\n+\n+    The version of the OpenAPI document: 1.0.0\n+    Generated by: https://openapi-generator.tech\n+\"\"\"\n+\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+import petstore_api\n+\n+\n+class TestDrawing(unittest.TestCase):\n+    \"\"\"Drawing unit test stubs\"\"\"\n+\n+    def setUp(self):\n+        self.api_client = petstore_api.ApiClient()\n+\n+    def tearDown(self):\n+        pass\n+\n+    def test_deserialize_oneof_reference(self):\n+        isosceles_triangle = petstore_api.Shape(\n+            shape_type=\"Triangle\",\n+            triangle_type=\"IsoscelesTriangle\"\n+        )\n+        assert isinstance(isosceles_triangle, petstore_api.IsoscelesTriangle)\n+        inst = petstore_api.Drawing(\n+            # 'main_shape' has type 'Shape', which is a oneOf [triangle, quadrilateral]\n+            # composed schema. So we should be able to assign a petstore_api.Triangle\n+            # to a 'main_shape'.\n+            main_shape=isosceles_triangle,\n+            shapes=[\n+                petstore_api.Shape(\n+                    shape_type=\"Triangle\",\n+                    triangle_type=\"EquilateralTriangle\"\n+                ),\n+                petstore_api.Shape(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4ODMxNw=="}, "originalCommit": {"oid": "3a05ff65b341a1a7b57498c26f0ae57a4a391bd3"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3530, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}