{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwODI3NjU5", "number": 8067, "title": "[R] Bug - Invalid code generated for POST with no request object", "bodyText": "PR is just a suggestion of how I think you can fix it. I'm not setup to actually run the build system at the moment. i.e. I'm not claiming this is ready to merge as is, it's just what I expect will address the issue based on my observation. I.e. You can think of this more as a bug report with attached code pointer if you like.\n\nDescription\n\nOur model has a POST that has no request modeled. i.e. no body. The code generated normally for a PUT with a request generates something akin to:\n       if (!missing(`athena.create.table.request`)) {\n         body <- `athena.create.table.request`$toJSONString()\n       } else {\n         body <- NULL\n       }\n\n...\n\n      resp <- self$apiClient$CallApi(url = paste0(self$apiClient$basePath, urlPath),\n                                 method = \"PUT\",\n                                 queryParams = queryParams,\n                                 headerParams = headerParams,\n                                 body = body,\n                                 ...)\n\nIn the case where no request object is modeled, this initial code block (where body is set) isn't generated, so you just end up with something like:\n      resp <- self$apiClient$CallApi(url = paste0(self$apiClient$basePath, urlPath),\n                                 method = \"POST\",\n                                 queryParams = queryParams,\n                                 headerParams = headerParams,\n                                 body = body,\n                                 ...)\n\nThis in turn means  self$apiClient$CallApi is called with body set as the vale of the built in function base::body (as body isn't a local variable).\nbase::body\n==>\nfunction (fun = sys.function(sys.parent())) \n{\n    if (is.character(fun)) \n        fun <- get(fun, mode = \"function\", envir = parent.frame())\n    .Internal(body(fun))\n}\n\nThis results in a strange error indicating that body was unexpected:\napi.instance <- DefaultApi$new()\nresult <- api.instance$TokenExchangeStsPost()\n\nwhere TokenExchangeStsPost is a POST with no request body modeled.\nError: Unknown type of `body`: must be NULL, FALSE, character, raw or list\nTraceback:\n\n1. api.instance$TokenExchangeStsPost()\n2. self$TokenExchangeStsPostWithHttpInfo(...)\n3. self$apiClient$CallApi(url = paste0(self$apiClient$basePath, \n .     urlPath), method = \"POST\", queryParams = queryParams, headerParams = headerParams, \n .     body = body, ...)\n4. httr::POST(url, query = queryParams, headers, body = body, httr::content_type(\"application/json\"), \n .     httpTimeout, httr::user_agent(self$userAgent), ...)\n5. request_build(\"POST\", hu$url, body_config(body, match.arg(encode)), \n .     as.request(config), ...)\n6. body_config(body, match.arg(encode))\n7. stop(\"Unknown type of `body`: must be NULL, FALSE, character, raw or list\", \n .     call. = FALSE)\n\nSwagger-codegen version\nBuild package: org.openapitools.codegen.languages.RClientCodegen\n  <dependency>\n    <groupId>org.openapitools</groupId>\n    <artifactId>openapi-generator-cli</artifactId>\n    <version>4.2.3</version>\n  </dependency>\n\n\nSwagger declaration file content or url\nNote: I removed some of our model from what does the repro (to not expose certain info). The important bit is that the token_exchange_sts is a post, and has no request defined.\nopenapi: \"3.0.1\"\ninfo:\n    title: \"${title}\"\n    version: \"1.0\"\n    description: \"${description}\"\nx-amazon-apigateway-policy: ${policy}\nservers:\n    -\n        url: \"${endpoint}\"\n        x-amazon-apigateway-endpoint-configuration:\n            vpcEndpointIds:\n                - \"${vpc_ep_id}\"\n\npaths:\n    /token_exchange_sts:\n        post:\n            responses:\n                '200':\n                    description: Success\n                    content:\n                        application/json:\n                            schema:\n                                $ref: '#/components/schemas/tokenExchangeSTSResponse'\n            x-amazon-apigateway-integration:\n                httpMethod: POST\n                type: aws_proxy\n                uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${service_function_arn}:${alias}/invocations\n                credentials: ${service_invoker_role_arn}\n\n  \n\nsecurity:\n    - CustomAuthorizer: []\ncomponents:\n    securitySchemes:\n        CustomAuthorizer:\n            in: header\n            type: apiKey\n            name: Authorization\n            x-amazon-apigateway-authorizer:\n                type: token\n                authorizerResultTtlInSeconds: 300\n                authorizerUri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${authorizer_function_arn}:${alias}/invocations\n                identityValidationExpression: Bearer .+\n                authorizerCredentials: ${auth_invoker_role_arn}\n            x-amazon-apigateway-authtype: custom\n    schemas:\n        # Response Models\n        tokenExchangeSTSResponse:\n            type: object\n            properties:\n                token:\n                    $ref: '#/components/schemas/stsCredentials'\n\n            required:\n                - token\n\n\n        # Object Models\n        stsCredentials:\n            description: Represents STS credentials for a Session (An assumed role)\n            type: object\n            properties:\n                access_key_id:\n                    type: string\n                    readOnly: true\n                secret_access_key:\n                    format: password  # Hint that this shouldn't be exposed.\n                    type: string\n                    readOnly: true\n                session_token:\n                    type: string\n                    readOnly: true\n            required:\n                - access_key_id\n                - secret_access_key\n                - session_token\nCommand line used for generation\n        \"-J-Dmodels\",\n        \"-J-Dapis\",\n        \"-J-DsupportingFiles\",\n        \"-J-DmodelTests=false\",\n        \"-J-DapiTests=false\",\n        \"generate\",\n        \"-i\",\n        \"MY FILE.yaml\",\n        \"-g\",\n        \"r\",\n        \"-o\",\n        \"MY OUTPUT PATH\",\n        \"-p\",\n        \"packageName=rproxyserviceclient\"\n\nSteps to reproduce\n\nGenerate the client in R for a POST model with no request body (as shown in the example).\nObserve that the file default_api.R has the following:\n\nTokenExchangeStsPostWithHttpInfo = function(...){\n      args <- list(...)\n      queryParams <- list()\n      headerParams <- c()\n\n      urlPath <- \"/token_exchange_sts\"\n      # API key authentication\n      if (\"Authorization\" %in% names(self$apiClient$apiKeys) && nchar(self$apiClient$apiKeys[\"Authorization\"]) > 0) {\n        headerParams['Authorization'] <- paste(unlist(self$apiClient$apiKeys[\"Authorization\"]), collapse='')\n      }\n\n      resp <- self$apiClient$CallApi(url = paste0(self$apiClient$basePath, urlPath),\n                                 method = \"POST\",\n                                 queryParams = queryParams,\n                                 headerParams = headerParams,\n                                 body = body,\n                                 ...)\n\n      if (httr::status_code(resp) >= 200 && httr::status_code(resp) <= 299) {\n        deserializedRespObj <- tryCatch(\n          self$apiClient$deserialize(resp, \"TokenExchangeSTSResponse\", loadNamespace(\"rproxyserviceclient\")),\n          error = function(e){\n             stop(\"Failed to deserialize response\")\n          }\n        )\n        ApiResponse$new(deserializedRespObj, resp)\n      } else if (httr::status_code(resp) >= 300 && httr::status_code(resp) <= 399) {\n        ApiResponse$new(paste(\"Server returned \" , httr::status_code(resp) , \" response status code.\"), resp)\n      } else if (httr::status_code(resp) >= 400 && httr::status_code(resp) <= 499) {\n        ApiResponse$new(\"API client error\", resp)\n      } else if (httr::status_code(resp) >= 500 && httr::status_code(resp) <= 599) {\n        ApiResponse$new(\"API server error\", resp)\n      }\n    }\n\nYou can see this code is invalid:\n                                 body = body,\n\nis \"broken\".\nYou can validate it by running the client like so:\nlibrary(rproxyserviceclient)\napi.instance <- DefaultApi$new()\nresult <- api.instance$TokenExchangeStsPost()\n\napi.instance$TokenExchangeStsPost() will break (Unknown type of body: must be NULL, FALSE, character, raw or list\").\nSuggest a fix/enhancement\n\nI think you should either set\nbody <- NULL\n\nabove in the case where no request is defined. I believe that will fix it.\nSetting it here:\n\n  \n    \n      openapi-generator/modules/openapi-generator/src/main/resources/r/api.mustache\n    \n    \n         Line 180\n      in\n      634c4c0\n    \n    \n    \n    \n\n        \n          \n            \n        \n    \n  \n\n\nwould effectively default it to NULL, and then the rest of the code generation could override it.\nAlternatively if you weren't using a variable name that maps to the base::body, then that might avoid it as well.\nI made a local change to api_client.R\n      # Default body to NULL when incorrectly set to a function.\n      # Body is incorrectly set to base::body (a built-in R function) in\n      # some cases due to a bug in the OpenAPI code generator\n      # (it assumes it has generated a local variable body when it hasn't).\n      # This workaround sets body to NULL if it's ever set as function by the time it gets here.\n      if (is.function(body)) {\n          body = NULL\n      }\n\nbut that's clearly a hack.. it works because the body is assigned to the built in function in this special case, is otherwise not a function. I only made the change in this file, as it doesn't change as we update the model, unlike default_api.R, so I changed api_client.R and added it to the ignore file for the generator (so the fix sticks).\nFYI : the same template works fine in Python without any changes/hacks.", "createdAt": "2020-12-02T07:57:32Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8067", "merged": true, "mergeCommit": {"oid": "7644f3ee834fda937809f0e40ed33760c6f5cdc2"}, "closed": true, "closedAt": "2020-12-03T08:21:09Z", "author": {"login": "robertpyke"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiJiS-AH2gAyNTMwODI3NjU5OjgyZmFkOWZhMjQ4NGViYzZiYzBjN2FhZTdiNWI5MWIxODY0Njk2YzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdidO6qAH2gAyNTMwODI3NjU5OjU4Y2Y2MDU2MWEzYjUxNjU3YThmZWIyNTgwZmUyMGM0OTZkNmYxMDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "82fad9fa2484ebc6bc0c7aae7b5b91b1864696c3", "author": {"user": {"login": "robertpyke", "name": "Robert Pyke"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/82fad9fa2484ebc6bc0c7aae7b5b91b1864696c3", "committedDate": "2020-12-02T07:37:16Z", "message": "Default body to NULL"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNTc2MTM3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8067#pullrequestreview-542576137", "createdAt": "2020-12-02T08:00:14Z", "commit": {"oid": "82fad9fa2484ebc6bc0c7aae7b5b91b1864696c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODowMDoxNFrOH9OiVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODowMDoxNFrOH9OiVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2MzM0OA==", "bodyText": "This would no longer be needed, as it's defaulted to NULL by my new code above.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8067#discussion_r533963348", "createdAt": "2020-12-02T08:00:14Z", "author": {"login": "robertpyke"}, "path": "modules/openapi-generator/src/main/resources/r/api.mustache", "diffHunk": "@@ -220,8 +221,6 @@\n         {{^isArray}}\n         body <- `{{paramName}}`$toJSONString()\n         {{/isArray}}\n-      } else {\n-        body <- NULL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82fad9fa2484ebc6bc0c7aae7b5b91b1864696c3"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ff382ae8fa0f24a613d65fd3af93caaef2ab5b1", "author": {"user": {"login": "wing328", "name": "William Cheng"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/2ff382ae8fa0f24a613d65fd3af93caaef2ab5b1", "committedDate": "2020-12-02T13:58:28Z", "message": "update samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d11fc83370fd6dd20674c712dea0482c6533f7c", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/6d11fc83370fd6dd20674c712dea0482c6533f7c", "committedDate": "2020-12-03T05:27:22Z", "message": "Update to set body to NULL only when no hasBodyParam"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0bc10ffcf323f376819ff9fdef434f3171a5c37", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e0bc10ffcf323f376819ff9fdef434f3171a5c37", "committedDate": "2020-12-03T06:03:50Z", "message": "Revert any whitespace changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58cf60561a3b51657a8feb2580fe20c496d6f104", "author": {"user": null}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/58cf60561a3b51657a8feb2580fe20c496d6f104", "committedDate": "2020-12-03T06:34:12Z", "message": "Makes defaulting body conditional on hasFormParams also not being set"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1892, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}