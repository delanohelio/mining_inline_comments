{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MjkzNzQ1", "number": 5088, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMToxNjo1MFrODaIm7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMToyMDo0OFrODaIq-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzMwNjA3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMToxNjo1MFrOFg6thg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMToxNjo1MFrOFg6thg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA2MDY3OA==", "bodyText": "This whole block could be simplified I think (or did I miss something?)\n(omitted brackets for shorter code, but I'm fine with them staying)\nif(!isFormData && (input->var_layout != MULTIPART) && isRequestCompressionEnabled)\n   request_content.append(compress(input->request_body, 7, {{prefix}}CompressionType::Gzip));\nelse\n   request_content.append(input->request_body);", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5088#discussion_r370060678", "createdAt": "2020-01-23T11:16:50Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "diffHunk": "@@ -285,7 +289,15 @@ void {{prefix}}HttpRequestWorker::execute({{prefix}}HttpRequestInput *input) {\n     if (input->request_body.size() > 0) {\n         qDebug() << \"got a request body\";\n         request_content.clear();\n-        request_content.append(input->request_body);\n+        if(!isFormData && (input->var_layout != MULTIPART)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0572eddf25637f87dac7de8953a3ecbc189fae21"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzMxNjQyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMToyMDo0OFrOFg6zjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDo0MDowMVrOFhAgQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA2MjIyMw==", "bodyText": "Are these called 'windows bit' or 'window bit'?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5088#discussion_r370062223", "createdAt": "2020-01-23T11:20:48Z", "author": {"login": "muttleyxd"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "diffHunk": "@@ -427,8 +444,65 @@ QByteArray {{prefix}}HttpRequestWorker::decompress(const QByteArray& data){\n             sts = true;\n         } while (strm.avail_out == 0);\n         inflateEnd(&strm);\n-    } while(false);{{/contentCompression}}\n-    return sts ? result : QByteArray();\n+    } while(false);\n+    return sts ? result : QByteArray();{{/contentCompression}}{{^contentCompression}}\n+    Q_UNUSED(data);\n+    return QByteArray();{{/contentCompression}}\n+}\n+\n+QByteArray {{prefix}}HttpRequestWorker::compress(const QByteArray& input, int level, {{prefix}}CompressionType compressType) {\n+    {{#contentCompression}}QByteArray output;\n+    static const int GZIP_WINDOWS_BIT = 15+16;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0572eddf25637f87dac7de8953a3ecbc189fae21"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE1NTU4Ng==", "bodyText": "It is window bit", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5088#discussion_r370155586", "createdAt": "2020-01-23T14:40:01Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/HttpRequest.cpp.mustache", "diffHunk": "@@ -427,8 +444,65 @@ QByteArray {{prefix}}HttpRequestWorker::decompress(const QByteArray& data){\n             sts = true;\n         } while (strm.avail_out == 0);\n         inflateEnd(&strm);\n-    } while(false);{{/contentCompression}}\n-    return sts ? result : QByteArray();\n+    } while(false);\n+    return sts ? result : QByteArray();{{/contentCompression}}{{^contentCompression}}\n+    Q_UNUSED(data);\n+    return QByteArray();{{/contentCompression}}\n+}\n+\n+QByteArray {{prefix}}HttpRequestWorker::compress(const QByteArray& input, int level, {{prefix}}CompressionType compressType) {\n+    {{#contentCompression}}QByteArray output;\n+    static const int GZIP_WINDOWS_BIT = 15+16;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA2MjIyMw=="}, "originalCommit": {"oid": "0572eddf25637f87dac7de8953a3ecbc189fae21"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3848, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}