{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NzExMzI4", "number": 8040, "title": "[ruby] Improve ruby client examples", "bodyText": "Improve ruby client examples for models, by building models with required properties set.\nGoal is to have examples a bit more copy/pastable directly\nAdds constructExampleCode methods, similarly to a few other clients like go, or powershell\n\nPR checklist\n\n Read the contribution guidelines.\n Pull Request title clearly describes the work in the pull request and Pull Request description provides details about how to validate the work. Missing information here may result in delayed response from the community.\n If contributing template-only or documentation-only changes which will change sample output, build the project beforehand.\n Run the shell script ./bin/generate-samples.shto update all Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit as it would merge with master. These must match the expectations made by your contribution. You may regenerate an individual generator by passing the relevant config(s) as an argument to the script, for example ./bin/generate-samples.sh bin/configs/java*. For Windows users, please run the script in Git BASH.\n File the PR against the correct branch: master\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.", "createdAt": "2020-11-27T16:50:16Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040", "merged": true, "mergeCommit": {"oid": "81a5e44a6c211da0d0a98259e723f255d2888200"}, "closed": true, "closedAt": "2020-12-15T16:10:04Z", "author": {"login": "zippolyte"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgqqt6gFqTU0MDEwNTgxNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdma_LnABqjQxMTQ3ODEyOTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTA1ODE3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040#pullrequestreview-540105817", "createdAt": "2020-11-27T17:05:29Z", "commit": {"oid": "3f7feec5d2cf25bfaf24880f4b9c7c1639f3b5db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowNToyOVrOH7Ehmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowNToyOVrOH7Ehmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMjE3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return \"\\\"\" + codegenProperty.example + \"\\\"\";\n          \n          \n            \n                                return \"'\" + codegenProperty.example + \"'\";", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040#discussion_r531702170", "createdAt": "2020-11-27T17:05:29Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RubyClientCodegen.java", "diffHunk": "@@ -667,4 +569,178 @@ protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Sc\n             codegenModel.additionalPropertiesType = getSchemaType(additionalProperties);\n         }\n     }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {\n+        objs = super.postProcessOperationsWithModels(objs, allModels);\n+        Map<String, Object> operations = (Map<String, Object>) objs.get(\"operations\");\n+        HashMap<String, CodegenModel> modelMaps = new HashMap<String, CodegenModel>();\n+        HashMap<String, Integer> processedModelMaps = new HashMap<String, Integer>();\n+\n+        for (Object o : allModels) {\n+            HashMap<String, Object> h = (HashMap<String, Object>) o;\n+            CodegenModel m = (CodegenModel) h.get(\"model\");\n+            modelMaps.put(m.classname, m);\n+        }\n+\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operations.get(\"operation\");\n+        for (CodegenOperation op : operationList) {\n+            for (CodegenParameter p : op.requiredParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+            for (CodegenParameter p : op.optionalParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+        }\n+\n+        return objs;\n+    }\n+\n+    private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenParameter.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenParameter.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenParameter.isPrimitiveType) { // primitive type\n+            if (codegenParameter.isString) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"\" + codegenParameter.paramName + \"_example\\\"\";\n+            } else if (codegenParameter.isBoolean) { // boolean\n+                if (Boolean.parseBoolean(codegenParameter.example)) {\n+                    return \"true\";\n+                }\n+                return \"false\";\n+            } else if (codegenParameter.isUri) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"https://example.com\\\"\";\n+            } else if (codegenParameter.isDateTime) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"DateTime.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"DateTime.now\";\n+            } else if (codegenParameter.isDate) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"Date.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"Date.today\";\n+            } else if (codegenParameter.isFile) {\n+                return \"File.new(\\\"/path/to/some/file\\\")\";\n+            } else if (codegenParameter.isInteger) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"37\";\n+            } else { // number\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"3.56\";\n+            }\n+        } else { // model\n+            // look up the model\n+            if (modelMaps.containsKey(codegenParameter.dataType)) {\n+                return constructExampleCode(modelMaps.get(codegenParameter.dataType), modelMaps, processedModelMap);\n+            } else {\n+                //LOGGER.error(\"Error in constructing examples. Failed to look up the model \" + codegenParameter.dataType);\n+                return \"TODO\";\n+            }\n+        }\n+    }\n+\n+    private String constructExampleCode(CodegenProperty codegenProperty, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenProperty.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenProperty.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenProperty.isPrimitiveType) { // primitive type\n+            if (codegenProperty.isString) {\n+                if (!StringUtils.isEmpty(codegenProperty.example) && !\"null\".equals(codegenProperty.example)) {\n+                    return \"\\\"\" + codegenProperty.example + \"\\\"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f7feec5d2cf25bfaf24880f4b9c7c1639f3b5db"}, "originalPosition": 279}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTA1ODgz", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040#pullrequestreview-540105883", "createdAt": "2020-11-27T17:05:38Z", "commit": {"oid": "3f7feec5d2cf25bfaf24880f4b9c7c1639f3b5db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowNTozOFrOH7Eh0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowNTozOFrOH7Eh0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMjIyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return \"\\\"\" + codegenProperty.name + \"_example\\\"\";\n          \n          \n            \n                                return \"'\" + codegenProperty.name + \"_example'\";", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040#discussion_r531702225", "createdAt": "2020-11-27T17:05:38Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/RubyClientCodegen.java", "diffHunk": "@@ -667,4 +569,178 @@ protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Sc\n             codegenModel.additionalPropertiesType = getSchemaType(additionalProperties);\n         }\n     }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {\n+        objs = super.postProcessOperationsWithModels(objs, allModels);\n+        Map<String, Object> operations = (Map<String, Object>) objs.get(\"operations\");\n+        HashMap<String, CodegenModel> modelMaps = new HashMap<String, CodegenModel>();\n+        HashMap<String, Integer> processedModelMaps = new HashMap<String, Integer>();\n+\n+        for (Object o : allModels) {\n+            HashMap<String, Object> h = (HashMap<String, Object>) o;\n+            CodegenModel m = (CodegenModel) h.get(\"model\");\n+            modelMaps.put(m.classname, m);\n+        }\n+\n+        List<CodegenOperation> operationList = (List<CodegenOperation>) operations.get(\"operation\");\n+        for (CodegenOperation op : operationList) {\n+            for (CodegenParameter p : op.requiredParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+            for (CodegenParameter p : op.optionalParams) {\n+                p.vendorExtensions.put(\"x-ruby-example\", constructExampleCode(p, modelMaps, processedModelMaps));\n+            }\n+            processedModelMaps.clear();\n+        }\n+\n+        return objs;\n+    }\n+\n+    private String constructExampleCode(CodegenParameter codegenParameter, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenParameter.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenParameter.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenParameter.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenParameter.isPrimitiveType) { // primitive type\n+            if (codegenParameter.isString) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"\" + codegenParameter.paramName + \"_example\\\"\";\n+            } else if (codegenParameter.isBoolean) { // boolean\n+                if (Boolean.parseBoolean(codegenParameter.example)) {\n+                    return \"true\";\n+                }\n+                return \"false\";\n+            } else if (codegenParameter.isUri) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"\\\"\" + codegenParameter.example + \"\\\"\";\n+                }\n+                return \"\\\"https://example.com\\\"\";\n+            } else if (codegenParameter.isDateTime) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"DateTime.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"DateTime.now\";\n+            } else if (codegenParameter.isDate) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return \"Date.parse(\\\"\" + codegenParameter.example + \"\\\")\";\n+                }\n+                return \"Date.today\";\n+            } else if (codegenParameter.isFile) {\n+                return \"File.new(\\\"/path/to/some/file\\\")\";\n+            } else if (codegenParameter.isInteger) {\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"37\";\n+            } else { // number\n+                if (!StringUtils.isEmpty(codegenParameter.example) && !\"null\".equals(codegenParameter.example)) {\n+                    return codegenParameter.example;\n+                }\n+                return \"3.56\";\n+            }\n+        } else { // model\n+            // look up the model\n+            if (modelMaps.containsKey(codegenParameter.dataType)) {\n+                return constructExampleCode(modelMaps.get(codegenParameter.dataType), modelMaps, processedModelMap);\n+            } else {\n+                //LOGGER.error(\"Error in constructing examples. Failed to look up the model \" + codegenParameter.dataType);\n+                return \"TODO\";\n+            }\n+        }\n+    }\n+\n+    private String constructExampleCode(CodegenProperty codegenProperty, HashMap<String, CodegenModel> modelMaps, HashMap<String, Integer> processedModelMap) {\n+        if (codegenProperty.isArray) { // array\n+            return \"[\" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"]\";\n+        } else if (codegenProperty.isMap) {\n+            return \"{ key: \" + constructExampleCode(codegenProperty.items, modelMaps, processedModelMap) + \"}\";\n+        } else if (codegenProperty.isPrimitiveType) { // primitive type\n+            if (codegenProperty.isString) {\n+                if (!StringUtils.isEmpty(codegenProperty.example) && !\"null\".equals(codegenProperty.example)) {\n+                    return \"\\\"\" + codegenProperty.example + \"\\\"\";\n+                } else {\n+                    return \"\\\"\" + codegenProperty.name + \"_example\\\"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f7feec5d2cf25bfaf24880f4b9c7c1639f3b5db"}, "originalPosition": 281}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NjIwOTM3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040#pullrequestreview-544620937", "createdAt": "2020-12-04T02:53:43Z", "commit": {"oid": "7e9f3554b64d4227591c660ca0bb04441f43306b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo1Mzo0NFrOH--gVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjo1Mzo0NFrOH--gVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5Nzg0NA==", "bodyText": "@zippolyte Shall we use Time instead?\nRef: #7656", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8040#discussion_r535797844", "createdAt": "2020-12-04T02:53:44Z", "author": {"login": "wing328"}, "path": "samples/client/petstore/ruby-faraday/docs/FakeApi.md", "diffHunk": "@@ -457,19 +457,19 @@ Petstore.configure do |config|\n end\n \n api_instance = Petstore::FakeApi.new\n-number = 3.4 # Float | None\n-double = 3.4 # Float | None\n+number = 8.14 # Float | None\n+double = 1.2 # Float | None\n pattern_without_delimiter = 'pattern_without_delimiter_example' # String | None\n-byte = 'byte_example' # String | None\n+byte = 'BYTE_ARRAY_DATA_HERE' # String | None\n opts = {\n   integer: 56, # Integer | None\n   int32: 56, # Integer | None\n-  int64: 56, # Integer | None\n+  int64: 789, # Integer | None\n   float: 3.4, # Float | None\n   string: 'string_example', # String | None\n-  binary: File.new('/path/to/file'), # File | None\n+  binary: File.new('/path/to/some/file'), # File | None\n   date: Date.parse('2013-10-20'), # Date | None\n-  date_time: Time.parse('2013-10-20T19:20:30+01:00'), # Time | None\n+  date_time: DateTime.parse('2013-10-20T19:20:30+01:00'), # Time | None", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e9f3554b64d4227591c660ca0bb04441f43306b"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bce27167fd630c5d4e3358fa82568f7134161eb", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/9bce27167fd630c5d4e3358fa82568f7134161eb", "committedDate": "2020-12-04T09:32:28Z", "message": "use Time"}, "afterCommit": {"oid": "28211cdba6e1f0418f94585e826d8cd25fdef048", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/28211cdba6e1f0418f94585e826d8cd25fdef048", "committedDate": "2020-12-07T08:04:03Z", "message": "merge master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28211cdba6e1f0418f94585e826d8cd25fdef048", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/28211cdba6e1f0418f94585e826d8cd25fdef048", "committedDate": "2020-12-07T08:04:03Z", "message": "merge master"}, "afterCommit": {"oid": "a6200f4358fc20c68800842442a0d6fc9affe724", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a6200f4358fc20c68800842442a0d6fc9affe724", "committedDate": "2020-12-07T08:06:14Z", "message": "use Time"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6200f4358fc20c68800842442a0d6fc9affe724", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a6200f4358fc20c68800842442a0d6fc9affe724", "committedDate": "2020-12-07T08:06:14Z", "message": "use Time"}, "afterCommit": {"oid": "76e9d5bb202d9c25e101241f6f924086cc0b3856", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/76e9d5bb202d9c25e101241f6f924086cc0b3856", "committedDate": "2020-12-07T08:16:51Z", "message": "use Time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc1bc4b415908ecaef2a5ea25fd0562bc5e69ac2", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/dc1bc4b415908ecaef2a5ea25fd0562bc5e69ac2", "committedDate": "2020-12-15T14:12:42Z", "message": "[ruby] Improve ruby client examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a850384787f61d73c6589ff75658b7cd0e63b0d", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/9a850384787f61d73c6589ff75658b7cd0e63b0d", "committedDate": "2020-12-15T14:12:43Z", "message": "samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cac1416addbac823aebe29d1cb55c628499196f", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/7cac1416addbac823aebe29d1cb55c628499196f", "committedDate": "2020-12-15T14:12:43Z", "message": "quote fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e99d7f0bb65cb884f2a85fa278d86ca6dd47168b", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e99d7f0bb65cb884f2a85fa278d86ca6dd47168b", "committedDate": "2020-12-15T14:12:43Z", "message": "Keep enum value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5657a89733037d7f8e3e72d45ff7510f962bb32f", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/5657a89733037d7f8e3e72d45ff7510f962bb32f", "committedDate": "2020-12-15T14:12:44Z", "message": "better string type handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5175b95360df07ee0538147767f4da54f110350", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/f5175b95360df07ee0538147767f4da54f110350", "committedDate": "2020-12-15T14:12:44Z", "message": "fix failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4653b9962d9214a647caeca841a923fbfbfe3275", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/4653b9962d9214a647caeca841a923fbfbfe3275", "committedDate": "2020-12-15T14:12:44Z", "message": "add space after comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab15d7472a8c109edc143fc4741f32473ccd2f21", "author": {"user": {"login": "wing328", "name": "William Cheng"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ab15d7472a8c109edc143fc4741f32473ccd2f21", "committedDate": "2020-12-15T14:12:45Z", "message": "update samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "109716d8ccc0cd8610e4351973fe12d7e49e534a", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/109716d8ccc0cd8610e4351973fe12d7e49e534a", "committedDate": "2020-12-15T14:12:45Z", "message": "use Time"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76e9d5bb202d9c25e101241f6f924086cc0b3856", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/76e9d5bb202d9c25e101241f6f924086cc0b3856", "committedDate": "2020-12-07T08:16:51Z", "message": "use Time"}, "afterCommit": {"oid": "109716d8ccc0cd8610e4351973fe12d7e49e534a", "author": {"user": {"login": "zippolyte", "name": "Hippolyte HENRY"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/109716d8ccc0cd8610e4351973fe12d7e49e534a", "committedDate": "2020-12-15T14:12:45Z", "message": "use Time"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1880, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}