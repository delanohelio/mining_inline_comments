{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDk3MDUz", "number": 5429, "title": "[scala] new scala-sttp client generator", "bodyText": "Scala sttp client template regarding to #5292\nTemplate extending scala-akka template as model generation the same (probably some code could be extracted to AbstractScalaGenerator).\nIntegration test included in the sample\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.\n\n@clasnake @jimschubert  @shijinkui  @ramzimaalej", "createdAt": "2020-02-25T10:33:54Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429", "merged": true, "mergeCommit": {"oid": "40cbbbfefdeff2c9cc1f19895adbbc32122b5724"}, "closed": true, "closedAt": "2020-02-28T07:48:56Z", "author": {"login": "chameleon82"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHMCVpAH2gAyMzc5NDk3MDUzOjE2MjBhZDUwNzFhMzlmNDhlMDUyMzljMzljODA1ODYxNTg1YjBlNGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIq8Z4AFqTM2NjIwNjA5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1620ad5071a39f48e05239c39c805861585b0e4e", "author": {"user": {"login": "chameleon82", "name": "Aleksandr Nekrasov"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/1620ad5071a39f48e05239c39c805861585b0e4e", "committedDate": "2020-02-23T17:04:58Z", "message": "scala-sttp-client template"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35d120d2f44a2230c57c85550f8f2c476e45590b", "author": {"user": {"login": "chameleon82", "name": "Aleksandr Nekrasov"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/35d120d2f44a2230c57c85550f8f2c476e45590b", "committedDate": "2020-02-25T10:28:51Z", "message": "invoker for sttp fixed and tests added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b20fdb17f7637f4ba5aad62a345b28c7e89f4da4", "author": {"user": {"login": "chameleon82", "name": "Aleksandr Nekrasov"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b20fdb17f7637f4ba5aad62a345b28c7e89f4da4", "committedDate": "2020-02-25T10:39:00Z", "message": "clean up pet api test from redunant comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b", "author": {"user": {"login": "chameleon82", "name": "Aleksandr Nekrasov"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/262d0890094d600ed4a37f12a9745fdd87f4633b", "committedDate": "2020-02-26T05:00:34Z", "message": "docs updated"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjQ2ODU3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#pullrequestreview-364646857", "createdAt": "2020-02-26T06:24:29Z", "commit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjoyNDozMFrOFuffBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoxMzo1OFrOFugTfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NDY2Mg==", "bodyText": "is it possible to make SttpSerializer\n\njson agnostic (some endpoints require binary serializers)\nlibrary agnostic (what if instead json4s I want to use jackson or circe)\n\nOne of the approach is to have intermediate serialization abstraction or at least interface", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384294662", "createdAt": "2020-02-26T06:24:30Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/apiInvoker.mustache", "diffHunk": "@@ -0,0 +1,54 @@\n+{{>licenseInfo}}\n+package {{{mainPackage}}}.core\n+\n+import java.io.File\n+\n+import org.joda.time.DateTime\n+import org.joda.time.format.ISODateTimeFormat\n+import org.json4s.JsonAST.JString\n+import org.json4s._\n+import sttp.client._\n+import org.openapitools.client.api.EnumsSerializers\n+import org.openapitools.client.core.ApiInvoker.DateTimeSerializer\n+import sttp.client.json4s.SttpJson4sApi\n+import sttp.client.monad.MonadError\n+\n+class SttpSerializer(implicit val format: Formats = DefaultFormats ++ EnumsSerializers.all + DateTimeSerializer,\n+                     implicit val serialization: org.json4s.Serialization = org.json4s.jackson.Serialization) extends SttpJson4sApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NDg3OA==", "bodyText": "if you'll move (implicit backend: SttpBackend[R, Nothing, Nothing]) to this line, we can make ApiRequestImprovements as AnyVal implicit class and reduce memory allocation", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384294878", "createdAt": "2020-02-26T06:25:16Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/apiInvoker.mustache", "diffHunk": "@@ -0,0 +1,54 @@\n+{{>licenseInfo}}\n+package {{{mainPackage}}}.core\n+\n+import java.io.File\n+\n+import org.joda.time.DateTime\n+import org.joda.time.format.ISODateTimeFormat\n+import org.json4s.JsonAST.JString\n+import org.json4s._\n+import sttp.client._\n+import org.openapitools.client.api.EnumsSerializers\n+import org.openapitools.client.core.ApiInvoker.DateTimeSerializer\n+import sttp.client.json4s.SttpJson4sApi\n+import sttp.client.monad.MonadError\n+\n+class SttpSerializer(implicit val format: Formats = DefaultFormats ++ EnumsSerializers.all + DateTimeSerializer,\n+                     implicit val serialization: org.json4s.Serialization = org.json4s.jackson.Serialization) extends SttpJson4sApi\n+\n+class HttpException(val statusCode: Int, val statusText: String, val message: String) extends Exception(s\"[$statusCode] $statusText: $message\")\n+\n+object ApiInvoker {\n+\n+  /**\n+    * Allows request execution without calling apiInvoker.execute(request)\n+    * request.result can be used to get a monad wrapped content.\n+    *\n+    * @param request the apiRequest to be executed\n+    */\n+  implicit class ApiRequestImprovements[R[_], RE, T](request: RequestT[Identity, Either[ResponseError[Exception], T], Nothing])\n+                                                    (implicit backend: SttpBackend[R, Nothing, Nothing]) {\n+\n+    def result: R[T] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMTIxOA==", "bodyText": "from https://www.joda.org/joda-time/:\n\nNote that from Java SE 8 onwards, users are asked to migrate to java.time (JSR-310) - a core part of the JDK which replaces this project.\n\nLet's migrate to Java's date/time API?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384301218", "createdAt": "2020-02-26T06:49:20Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/build.sbt.mustache", "diffHunk": "@@ -0,0 +1,29 @@\n+version := \"{{artifactVersion}}\"\n+name := \"{{artifactId}}\"\n+organization := \"{{groupId}}\"\n+scalaVersion := \"2.12.8\"\n+\n+val sttp = \"2.0.0\"\n+\n+libraryDependencies ++= Seq(\n+  \"com.softwaremill.sttp.client\" %% \"core\" % sttp,\n+  \"com.softwaremill.sttp.client\" %% \"json4s\" % sttp,\n+\n+  \"joda-time\" % \"joda-time\" % \"2.10.1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMTMyOQ==", "bodyText": "for consistency I'd put \"3.6.5\" as val", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384301329", "createdAt": "2020-02-26T06:49:42Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/build.sbt.mustache", "diffHunk": "@@ -0,0 +1,29 @@\n+version := \"{{artifactVersion}}\"\n+name := \"{{artifactId}}\"\n+organization := \"{{groupId}}\"\n+scalaVersion := \"2.12.8\"\n+\n+val sttp = \"2.0.0\"\n+\n+libraryDependencies ++= Seq(\n+  \"com.softwaremill.sttp.client\" %% \"core\" % sttp,\n+  \"com.softwaremill.sttp.client\" %% \"json4s\" % sttp,\n+\n+  \"joda-time\" % \"joda-time\" % \"2.10.1\",\n+  \"org.json4s\" %% \"json4s-jackson\" % \"3.6.5\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMTQ3NQ==", "bodyText": "I believe library users won't need maven local?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384301475", "createdAt": "2020-02-26T06:50:18Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/build.sbt.mustache", "diffHunk": "@@ -0,0 +1,29 @@\n+version := \"{{artifactVersion}}\"\n+name := \"{{artifactId}}\"\n+organization := \"{{groupId}}\"\n+scalaVersion := \"2.12.8\"\n+\n+val sttp = \"2.0.0\"\n+\n+libraryDependencies ++= Seq(\n+  \"com.softwaremill.sttp.client\" %% \"core\" % sttp,\n+  \"com.softwaremill.sttp.client\" %% \"json4s\" % sttp,\n+\n+  \"joda-time\" % \"joda-time\" % \"2.10.1\",\n+  \"org.json4s\" %% \"json4s-jackson\" % \"3.6.5\",\n+  \"org.json4s\" %% \"json4s-ext\" % \"3.6.5\",\n+\n+  // test dependencies\n+  \"org.scalatest\" %% \"scalatest\" % \"3.0.5\" % \"test\",\n+  \"junit\" % \"junit\" % \"4.13\" % \"test\"\n+)\n+\n+resolvers ++= Seq(Resolver.mavenLocal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMjg1Mg==", "bodyText": "question - if you generate multiple clients, how would you differentiate settings from each other?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384302852", "createdAt": "2020-02-26T06:55:29Z", "author": {"login": "eugeniyk"}, "path": "samples/client/petstore/scala-sttp/src/main/resources/reference.conf", "diffHunk": "@@ -0,0 +1,24 @@\n+org.openapitools.client {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMzAzNg==", "bodyText": "is maven required here?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384303036", "createdAt": "2020-02-26T06:56:08Z", "author": {"login": "eugeniyk"}, "path": "samples/client/petstore/scala-sttp/pom.xml", "diffHunk": "@@ -0,0 +1,259 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMzkyMw==", "bodyText": "I'd suggest to change this to\nimplicit class OptionalParams(val request: RequestT[Identity, Either[String, String], Nothing]) extends AnyVal {\nfor gc-free extension method", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384303923", "createdAt": "2020-02-26T06:59:25Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/api.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+package {{package}}\n+\n+{{#imports}}\n+import {{import}}\n+{{/imports}}\n+import {{mainPackage}}.core._\n+import {{mainPackage}}.core.CollectionFormats._\n+import sttp.client._\n+import sttp.model.Method\n+import sttp.client.json4s.SttpJson4sApi\n+\n+{{#operations}}\n+object {{classname}} {\n+\n+  def apply(baseUrl: String = \"{{{basePath}}}\")(implicit serializer: SttpSerializer) = new {{classname}}(baseUrl)\n+}\n+\n+class {{classname}}(baseUrl: String)(implicit serializer: SttpSerializer) {\n+\n+  import serializer._\n+\n+  /*\n+   * Helper to handle Optional header parameters\n+   **/\n+  implicit class optionalParams(request: RequestT[Identity, Either[String, String], Nothing]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNDE3OA==", "bodyText": "there must be string constant from sttp for \"application/json\"", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384304178", "createdAt": "2020-02-26T07:00:18Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/api.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+package {{package}}\n+\n+{{#imports}}\n+import {{import}}\n+{{/imports}}\n+import {{mainPackage}}.core._\n+import {{mainPackage}}.core.CollectionFormats._\n+import sttp.client._\n+import sttp.model.Method\n+import sttp.client.json4s.SttpJson4sApi\n+\n+{{#operations}}\n+object {{classname}} {\n+\n+  def apply(baseUrl: String = \"{{{basePath}}}\")(implicit serializer: SttpSerializer) = new {{classname}}(baseUrl)\n+}\n+\n+class {{classname}}(baseUrl: String)(implicit serializer: SttpSerializer) {\n+\n+  import serializer._\n+\n+  /*\n+   * Helper to handle Optional header parameters\n+   **/\n+  implicit class optionalParams(request: RequestT[Identity, Either[String, String], Nothing]) {\n+   def header( header: String, optValue: Option[Any]): RequestT[Identity, Either[String, String], Nothing] = {\n+      optValue.map( value => request.header(header, value.toString)).getOrElse(request)\n+    }\n+  }\n+\n+{{#operation}}\n+{{#javadocRenderer}}\n+{{>javadoc}}\n+{{/javadocRenderer}}\n+  def {{operationId}}({{>methodParameters}}): RequestT[Identity, Either[ResponseError[Exception], {{>operationReturnType}}], Nothing] =\n+    basicRequest\n+      .method(Method.{{httpMethod.toUpperCase}}, uri\"$baseUrl{{{path}}}{{#queryParams.0}}?{{#queryParams}}{{baseName}}=${{{paramName}}}{{^-last}}&{{/-last}}{{/queryParams}}{{/queryParams.0}}\")\n+      .contentType({{#consumes.0}}\"{{{mediaType}}}\"{{/consumes.0}}{{^consumes}}\"application/json\"{{/consumes}}){{#headerParams}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNDYyMQ==", "bodyText": "in generated doc missing doc for apiKey", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384304621", "createdAt": "2020-02-26T07:01:52Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/api.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+package {{package}}\n+\n+{{#imports}}\n+import {{import}}\n+{{/imports}}\n+import {{mainPackage}}.core._\n+import {{mainPackage}}.core.CollectionFormats._\n+import sttp.client._\n+import sttp.model.Method\n+import sttp.client.json4s.SttpJson4sApi\n+\n+{{#operations}}\n+object {{classname}} {\n+\n+  def apply(baseUrl: String = \"{{{basePath}}}\")(implicit serializer: SttpSerializer) = new {{classname}}(baseUrl)\n+}\n+\n+class {{classname}}(baseUrl: String)(implicit serializer: SttpSerializer) {\n+\n+  import serializer._\n+\n+  /*\n+   * Helper to handle Optional header parameters\n+   **/\n+  implicit class optionalParams(request: RequestT[Identity, Either[String, String], Nothing]) {\n+   def header( header: String, optValue: Option[Any]): RequestT[Identity, Either[String, String], Nothing] = {\n+      optValue.map( value => request.header(header, value.toString)).getOrElse(request)\n+    }\n+  }\n+\n+{{#operation}}\n+{{#javadocRenderer}}\n+{{>javadoc}}\n+{{/javadocRenderer}}\n+  def {{operationId}}({{>methodParameters}}): RequestT[Identity, Either[ResponseError[Exception], {{>operationReturnType}}], Nothing] =\n+    basicRequest\n+      .method(Method.{{httpMethod.toUpperCase}}, uri\"$baseUrl{{{path}}}{{#queryParams.0}}?{{#queryParams}}{{baseName}}=${{{paramName}}}{{^-last}}&{{/-last}}{{/queryParams}}{{/queryParams.0}}\")\n+      .contentType({{#consumes.0}}\"{{{mediaType}}}\"{{/consumes.0}}{{^consumes}}\"application/json\"{{/consumes}}){{#headerParams}}\n+      .header({{>paramCreation}}){{/headerParams}}{{#formParams.0}}\n+      .body(Map({{#formParams}}\n+        {{>paramFormCreation}},{{/formParams}}\n+      )){{/formParams.0}}{{#bodyParam}}\n+      .body({{paramName}}){{/bodyParam}}\n+      .response(asJson[{{>operationReturnType}}])\n+\n+\n+{{#x-skip-this}}\n+\n+\n+      {{#authMethods}}{{#isApiKey}}.withApiKey(apiKey, \"{{keyParamName}}\", {{#isKeyInQuery}}QUERY{{/isKeyInQuery}}{{#isKeyInHeader}}HEADER{{/isKeyInHeader}}{{#isKeyInCookie}}COOKIE{{/isKeyInCookie}})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNTM4OA==", "bodyText": "misc - add optional cross compilation for scala 2.11/2.13", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384305388", "createdAt": "2020-02-26T07:04:50Z", "author": {"login": "eugeniyk"}, "path": "samples/client/petstore/scala-sttp/build.sbt", "diffHunk": "@@ -0,0 +1,29 @@\n+version := \"1.0.0\"\n+name := \"scala-akka-petstore-client\"\n+organization := \"org.openapitools\"\n+scalaVersion := \"2.12.8\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNTg5Mg==", "bodyText": "for common types like RequestT[Identity, Either[ResponseError[Exception], Unit], Nothing] it will be convenient to have type alias", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384305892", "createdAt": "2020-02-26T07:06:33Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/api.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+package {{package}}\n+\n+{{#imports}}\n+import {{import}}\n+{{/imports}}\n+import {{mainPackage}}.core._\n+import {{mainPackage}}.core.CollectionFormats._\n+import sttp.client._\n+import sttp.model.Method\n+import sttp.client.json4s.SttpJson4sApi\n+\n+{{#operations}}\n+object {{classname}} {\n+\n+  def apply(baseUrl: String = \"{{{basePath}}}\")(implicit serializer: SttpSerializer) = new {{classname}}(baseUrl)\n+}\n+\n+class {{classname}}(baseUrl: String)(implicit serializer: SttpSerializer) {\n+\n+  import serializer._\n+\n+  /*\n+   * Helper to handle Optional header parameters\n+   **/\n+  implicit class optionalParams(request: RequestT[Identity, Either[String, String], Nothing]) {\n+   def header( header: String, optValue: Option[Any]): RequestT[Identity, Either[String, String], Nothing] = {\n+      optValue.map( value => request.header(header, value.toString)).getOrElse(request)\n+    }\n+  }\n+\n+{{#operation}}\n+{{#javadocRenderer}}\n+{{>javadoc}}\n+{{/javadocRenderer}}\n+  def {{operationId}}({{>methodParameters}}): RequestT[Identity, Either[ResponseError[Exception], {{>operationReturnType}}], Nothing] =\n+    basicRequest\n+      .method(Method.{{httpMethod.toUpperCase}}, uri\"$baseUrl{{{path}}}{{#queryParams.0}}?{{#queryParams}}{{baseName}}=${{{paramName}}}{{^-last}}&{{/-last}}{{/queryParams}}{{/queryParams.0}}\")\n+      .contentType({{#consumes.0}}\"{{{mediaType}}}\"{{/consumes.0}}{{^consumes}}\"application/json\"{{/consumes}}){{#headerParams}}\n+      .header({{>paramCreation}}){{/headerParams}}{{#formParams.0}}\n+      .body(Map({{#formParams}}\n+        {{>paramFormCreation}},{{/formParams}}\n+      )){{/formParams.0}}{{#bodyParam}}\n+      .body({{paramName}}){{/bodyParam}}\n+      .response(asJson[{{>operationReturnType}}])\n+\n+\n+{{#x-skip-this}}\n+\n+\n+      {{#authMethods}}{{#isApiKey}}.withApiKey(apiKey, \"{{keyParamName}}\", {{#isKeyInQuery}}QUERY{{/isKeyInQuery}}{{#isKeyInHeader}}HEADER{{/isKeyInHeader}}{{#isKeyInCookie}}COOKIE{{/isKeyInCookie}})\n+      {{/isApiKey}}{{#isBasic}}{{#isBasicBasic}}.withCredentials(basicAuth){{/isBasicBasic}}{{#isBasicBearer}}.withCredentials(bearerToken){{/isBasicBearer}}{{/isBasic}}{{/authMethods}}\n+\n+{{#responses}}{{^isWildcard}}{{#dataType}}.with{{>responseState}}Response[{{dataType}}]({{code}})\n+      {{/dataType}}{{^dataType}}.with{{>responseState}}Response[Unit]({{code}})\n+      {{/dataType}}{{/isWildcard}}{{/responses}}{{#responses}}{{#isWildcard}}{{#dataType}}.withDefault{{>responseState}}Response[{{dataType}}]\n+      {{/dataType}}{{^dataType}}.withDefault{{>responseState}}Response[Unit]\n+      {{/dataType}}{{/isWildcard}}{{/responses}}\n+{{/x-skip-this}}\n+\n+{{/operation}}\n+\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNjU2Mw==", "bodyText": "I'd use simplified ApiRequest instead, since it's mostly wrapper?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384306563", "createdAt": "2020-02-26T07:08:47Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/apiInvoker.mustache", "diffHunk": "@@ -0,0 +1,54 @@\n+{{>licenseInfo}}\n+package {{{mainPackage}}}.core\n+\n+import java.io.File\n+\n+import org.joda.time.DateTime\n+import org.joda.time.format.ISODateTimeFormat\n+import org.json4s.JsonAST.JString\n+import org.json4s._\n+import sttp.client._\n+import org.openapitools.client.api.EnumsSerializers\n+import org.openapitools.client.core.ApiInvoker.DateTimeSerializer\n+import sttp.client.json4s.SttpJson4sApi\n+import sttp.client.monad.MonadError\n+\n+class SttpSerializer(implicit val format: Formats = DefaultFormats ++ EnumsSerializers.all + DateTimeSerializer,\n+                     implicit val serialization: org.json4s.Serialization = org.json4s.jackson.Serialization) extends SttpJson4sApi\n+\n+class HttpException(val statusCode: Int, val statusText: String, val message: String) extends Exception(s\"[$statusCode] $statusText: $message\")\n+\n+object ApiInvoker {\n+\n+  /**\n+    * Allows request execution without calling apiInvoker.execute(request)\n+    * request.result can be used to get a monad wrapped content.\n+    *\n+    * @param request the apiRequest to be executed\n+    */\n+  implicit class ApiRequestImprovements[R[_], RE, T](request: RequestT[Identity, Either[ResponseError[Exception], T], Nothing])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNjc5OQ==", "bodyText": "Missing comments for public API (is this a part of generator API or generated (pets) API?)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384306799", "createdAt": "2020-02-26T07:09:39Z", "author": {"login": "eugeniyk"}, "path": "samples/client/petstore/scala-sttp/src/main/scala/org/openapitools/client/model/ApiResponse.scala", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * OpenAPI Petstore\n+ * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n+ *\n+ * The version of the OpenAPI document: 1.0.0\n+ * \n+ *\n+ * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n+ * https://openapi-generator.tech\n+ * Do not edit the class manually.\n+ */\n+package org.openapitools.client.model\n+\n+import org.openapitools.client.core.ApiModel\n+\n+case class ApiResponse (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNzUzNA==", "bodyText": "RE looks unused", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384307534", "createdAt": "2020-02-26T07:12:06Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp-client/apiInvoker.mustache", "diffHunk": "@@ -0,0 +1,54 @@\n+{{>licenseInfo}}\n+package {{{mainPackage}}}.core\n+\n+import java.io.File\n+\n+import org.joda.time.DateTime\n+import org.joda.time.format.ISODateTimeFormat\n+import org.json4s.JsonAST.JString\n+import org.json4s._\n+import sttp.client._\n+import org.openapitools.client.api.EnumsSerializers\n+import org.openapitools.client.core.ApiInvoker.DateTimeSerializer\n+import sttp.client.json4s.SttpJson4sApi\n+import sttp.client.monad.MonadError\n+\n+class SttpSerializer(implicit val format: Formats = DefaultFormats ++ EnumsSerializers.all + DateTimeSerializer,\n+                     implicit val serialization: org.json4s.Serialization = org.json4s.jackson.Serialization) extends SttpJson4sApi\n+\n+class HttpException(val statusCode: Int, val statusText: String, val message: String) extends Exception(s\"[$statusCode] $statusText: $message\")\n+\n+object ApiInvoker {\n+\n+  /**\n+    * Allows request execution without calling apiInvoker.execute(request)\n+    * request.result can be used to get a monad wrapped content.\n+    *\n+    * @param request the apiRequest to be executed\n+    */\n+  implicit class ApiRequestImprovements[R[_], RE, T](request: RequestT[Identity, Either[ResponseError[Exception], T], Nothing])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNjU2Mw=="}, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwODA5Mw==", "bodyText": "here and below, names should be changed accordingly to sttp", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384308093", "createdAt": "2020-02-26T07:13:58Z", "author": {"login": "eugeniyk"}, "path": "samples/client/petstore/scala-sttp/README.md", "diffHunk": "@@ -0,0 +1,121 @@\n+# scala-akka-petstore-client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "262d0890094d600ed4a37f12a9745fdd87f4633b"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7c8b80c19ccb2721d0a1bf3a60e1dddc7eae4fb", "author": {"user": {"login": "chameleon82", "name": "Aleksandr Nekrasov"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/f7c8b80c19ccb2721d0a1bf3a60e1dddc7eae4fb", "committedDate": "2020-02-26T09:43:00Z", "message": "fix artefact name, model comments and redunant generic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "897b077239dd8c15132a5b8c707faa1cb814da59", "author": {"user": {"login": "chameleon82", "name": "Aleksandr Nekrasov"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/897b077239dd8c15132a5b8c707faa1cb814da59", "committedDate": "2020-02-26T12:52:05Z", "message": "code optimization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cab8e99659e46db72ec7b0d13d4b685815d3fee", "author": {"user": {"login": "chameleon82", "name": "Aleksandr Nekrasov"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/1cab8e99659e46db72ec7b0d13d4b685815d3fee", "committedDate": "2020-02-26T13:07:47Z", "message": "cross scala versions 2.11 2.12 2.13"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDgwODk3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#pullrequestreview-365480897", "createdAt": "2020-02-27T08:13:35Z", "commit": {"oid": "1cab8e99659e46db72ec7b0d13d4b685815d3fee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoxMzozNVrOFvIoYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoxMzozNVrOFvIoYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2ODgwMA==", "bodyText": "can we use sttp type / alias for status code instead?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384968800", "createdAt": "2020-02-27T08:13:35Z", "author": {"login": "eugeniyk"}, "path": "samples/client/petstore/scala-sttp/src/main/scala/org/openapitools/client/core/ApiInvoker.scala", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * OpenAPI Petstore\n+ * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n+ *\n+ * The version of the OpenAPI document: 1.0.0\n+ * \n+ *\n+ * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n+ * https://openapi-generator.tech\n+ * Do not edit the class manually.\n+ */\n+package org.openapitools.client.core\n+\n+import org.joda.time.DateTime\n+import org.joda.time.format.ISODateTimeFormat\n+import org.json4s.JsonAST.JString\n+import org.json4s._\n+import sttp.client._\n+import org.openapitools.client.api.EnumsSerializers\n+import org.openapitools.client.core.ApiInvoker.DateTimeSerializer\n+import sttp.client.json4s.SttpJson4sApi\n+import sttp.client.monad.MonadError\n+\n+class SttpSerializer(implicit val format: Formats = DefaultFormats ++ EnumsSerializers.all + DateTimeSerializer,\n+                     implicit val serialization: org.json4s.Serialization = org.json4s.jackson.Serialization) extends SttpJson4sApi\n+\n+class HttpException(val statusCode: Int, val statusText: String, val message: String) extends Exception(s\"[$statusCode] $statusText: $message\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cab8e99659e46db72ec7b0d13d4b685815d3fee"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDgxMzQ0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#pullrequestreview-365481344", "createdAt": "2020-02-27T08:14:30Z", "commit": {"oid": "1cab8e99659e46db72ec7b0d13d4b685815d3fee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoxNDozMFrOFvIpwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoxNDozMFrOFvIpwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2OTE1Mw==", "bodyText": "let's try to remove blank spaces (the moto is to think that the client was created by human rather than by machine..)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#discussion_r384969153", "createdAt": "2020-02-27T08:14:30Z", "author": {"login": "eugeniyk"}, "path": "samples/client/petstore/scala-sttp/src/main/scala/org/openapitools/client/api/UserApi.scala", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * OpenAPI Petstore\n+ * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n+ *\n+ * The version of the OpenAPI document: 1.0.0\n+ * \n+ *\n+ * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n+ * https://openapi-generator.tech\n+ * Do not edit the class manually.\n+ */\n+package org.openapitools.client.api\n+\n+import org.openapitools.client.model.User\n+import org.openapitools.client.core._\n+import alias._\n+import sttp.client._\n+import sttp.model.Method\n+\n+object UserApi {\n+\n+  def apply(baseUrl: String = \"http://petstore.swagger.io/v2\")(implicit serializer: SttpSerializer) = new UserApi(baseUrl)\n+}\n+\n+class UserApi(baseUrl: String)(implicit serializer: SttpSerializer) {\n+\n+  import Helpers._\n+  import serializer._\n+\n+  /**\n+   * This can only be done by the logged in user.\n+   * \n+   * Expected answers:\n+   *   code 0 :  (successful operation)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   * \n+   * @param user Created user object\n+   */\n+  def createUser(user: User)(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.POST, uri\"$baseUrl/user\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .body(user)\n+      .response(asJson[Unit])\n+\n+\n+\n+  /**\n+   * Expected answers:\n+   *   code 0 :  (successful operation)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   * \n+   * @param user List of user object\n+   */\n+  def createUsersWithArrayInput(user: Seq[User])(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.POST, uri\"$baseUrl/user/createWithArray\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .body(user)\n+      .response(asJson[Unit])\n+\n+\n+\n+  /**\n+   * Expected answers:\n+   *   code 0 :  (successful operation)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   * \n+   * @param user List of user object\n+   */\n+  def createUsersWithListInput(user: Seq[User])(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.POST, uri\"$baseUrl/user/createWithList\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .body(user)\n+      .response(asJson[Unit])\n+\n+\n+\n+  /**\n+   * This can only be done by the logged in user.\n+   * \n+   * Expected answers:\n+   *   code 400 :  (Invalid username supplied)\n+   *   code 404 :  (User not found)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   * \n+   * @param username The name that needs to be deleted\n+   */\n+  def deleteUser(username: String)(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.DELETE, uri\"$baseUrl/user/${username}\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .response(asJson[Unit])\n+\n+\n+\n+  /**\n+   * Expected answers:\n+   *   code 200 : User (successful operation)\n+   *   code 400 :  (Invalid username supplied)\n+   *   code 404 :  (User not found)\n+   * \n+   * @param username The name that needs to be fetched. Use user1 for testing.\n+   */\n+  def getUserByName(username: String): ApiRequestT[User] =\n+    basicRequest\n+      .method(Method.GET, uri\"$baseUrl/user/${username}\")\n+      .contentType(\"application/json\")\n+      .response(asJson[User])\n+\n+\n+\n+  /**\n+   * Expected answers:\n+   *   code 200 : String (successful operation)\n+   *              Headers :\n+   *                Set-Cookie - Cookie authentication key for use with the `auth_cookie` apiKey authentication.\n+   *                X-Rate-Limit - calls per hour allowed by the user\n+   *                X-Expires-After - date in UTC when toekn expires\n+   *   code 400 :  (Invalid username/password supplied)\n+   * \n+   * @param username The user name for login\n+   * @param password The password for login in clear text\n+   */\n+  def loginUser(username: String, password: String): ApiRequestT[String] =\n+    basicRequest\n+      .method(Method.GET, uri\"$baseUrl/user/login?username=$username&password=$password\")\n+      .contentType(\"application/json\")\n+      .response(asJson[String])\n+\n+\n+\n+  /**\n+   * Expected answers:\n+   *   code 0 :  (successful operation)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   */\n+  def logoutUser()(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.GET, uri\"$baseUrl/user/logout\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .response(asJson[Unit])\n+\n+\n+\n+  /**\n+   * This can only be done by the logged in user.\n+   * \n+   * Expected answers:\n+   *   code 400 :  (Invalid user supplied)\n+   *   code 404 :  (User not found)\n+   * \n+   * Available security schemes:\n+   *   auth_cookie (apiKey)\n+   * \n+   * @param username name that need to be deleted\n+   * @param user Updated user object\n+   */\n+  def updateUser(username: String, user: User)(implicit apiKey: ApiKeyValue): ApiRequestT[Unit] =\n+    basicRequest\n+      .method(Method.PUT, uri\"$baseUrl/user/${username}\")\n+      .contentType(\"application/json\")\n+      .cookie(\"AUTH_KEY\", apiKey.value)\n+      .body(user)\n+      .response(asJson[Unit])\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cab8e99659e46db72ec7b0d13d4b685815d3fee"}, "originalPosition": 182}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66903ef5182b60ffe7e37ba92b20df226b997bf5", "author": {"user": {"login": "chameleon82", "name": "Aleksandr Nekrasov"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/66903ef5182b60ffe7e37ba92b20df226b997bf5", "committedDate": "2020-02-27T11:25:24Z", "message": "date serializers extracted and joda enabled as default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07a58b0269326653b18ccad04390cff7d97623da", "author": {"user": {"login": "chameleon82", "name": "Aleksandr Nekrasov"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/07a58b0269326653b18ccad04390cff7d97623da", "committedDate": "2020-02-27T12:05:35Z", "message": "basic and bearer authorization added, apikey in query supported"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NzczNjk4", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#pullrequestreview-365773698", "createdAt": "2020-02-27T15:53:00Z", "commit": {"oid": "07a58b0269326653b18ccad04390cff7d97623da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MjA2MDk0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5429#pullrequestreview-366206094", "createdAt": "2020-02-28T07:39:28Z", "commit": {"oid": "07a58b0269326653b18ccad04390cff7d97623da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2685, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}