{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzk1OTE1", "number": 6121, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyODozNFrOD4Npog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0OToxNlrOD6e1gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcwNDk4OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/models/fruit_req.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyODozNFrOGO6_Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyODozNFrOGO6_Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5OTY1MQ==", "bodyText": "@spacether , I need to fix this such that this import is not generated.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418299651", "createdAt": "2020-04-30T21:28:34Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/models/fruit_req.py", "diffHunk": "@@ -39,6 +39,11 @@\n except ImportError:\n     banana_req = sys.modules[\n         'petstore_api.models.banana_req']\n+try:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26865b3f58281b479609fd7826fe58166451d17b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcwODE5OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/go-experimental/go-petstore/api/openapi.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyOTozN1rOGO7A6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDo1NjoxOVrOGO_OPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDEzOQ==", "bodyText": "I've just added this \"null\" type here to have one scenario with the \"null\" type in OneOf and validate the impact of having this type. @spacether , are you ok with this?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418300139", "createdAt": "2020-04-30T21:29:37Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/go-experimental/go-petstore/api/openapi.yaml", "diffHunk": "@@ -1973,6 +1973,7 @@ components:\n           type: string\n     fruitReq:\n       oneOf:\n+      - type: \"null\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26865b3f58281b479609fd7826fe58166451d17b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2OTA4NQ==", "bodyText": "Yup, I am okay adding this to our sample spec", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418369085", "createdAt": "2020-05-01T00:56:19Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/go-experimental/go-petstore/api/openapi.yaml", "diffHunk": "@@ -1973,6 +1973,7 @@ components:\n           type: string\n     fruitReq:\n       oneOf:\n+      - type: \"null\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDEzOQ=="}, "originalCommit": {"oid": "26865b3f58281b479609fd7826fe58166451d17b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjc3NTA0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo1Mzo0MlrOGO7p6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo1Mzo0MlrOGO7p6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDYzMw==", "bodyText": "@spacether , this is one way to ensure the import below is not generated, but it's brittle. Is there a better way to skip these special case imports?\ntry:\n    from openapi_client.models import null\nexcept ImportError:\n    null = sys.modules[\n        'openapi_client.models.null']\nUPDATE: I've made a change which I think is more robust.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418310633", "createdAt": "2020-04-30T21:53:42Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -388,7 +388,9 @@ private void fixModelImports(Set<String> imports) {\n                 composedSchemaSets.add(cm.oneOf);\n                 for (Set<String> importSet : composedSchemaSets) {\n                     for (String otherModelName : importSet) {\n-                        cm.imports.add(otherModelName);\n+                        if (!\"none_type\".equals(otherModelName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c310e2acca71894b531445f3b6e99a7e7bb551"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjgxNjI2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjowODo1M1rOGO8C_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjowODo1M1rOGO8C_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzA1Mg==", "bodyText": "This is to avoid creating an import for \"none_type\".", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418317052", "createdAt": "2020-04-30T22:08:53Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -388,7 +388,9 @@ private void fixModelImports(Set<String> imports) {\n                 composedSchemaSets.add(cm.oneOf);\n                 for (Set<String> importSet : composedSchemaSets) {\n                     for (String otherModelName : importSet) {\n-                        cm.imports.add(otherModelName);\n+                        if (!languageSpecificPrimitives.contains(otherModelName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4e9f84bd22c8a5d93c9060632338745ac1dae6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzE2NzQyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMTowMDozOFrOGO_SQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMjo1MjozNFrOGPAwlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MDExNA==", "bodyText": "Did you mean anyof_instances.append..?\nAlso, I don't think that we should add model_args to anyof_instances.\nanyof_instances is meant to store ModelSimple or ModelComposed instances, not None.\nIn my mind, this None case should return None in the place of a model instance\nIf we wait for #6124 to land, then we can do this in the __new__ method.\nThis logic would apply to none_type in oneOf + anyOf\nWhat do you think?\nThis is what I think should happen:\na = FruitReq(None)\na == None -> True\n\nWe need access to the positional argument None, which we get in __new__", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418370114", "createdAt": "2020-05-01T01:00:38Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1043,6 +1050,13 @@ def get_anyof_instances(self, model_args, constant_args):\n         return anyof_instances\n \n     for anyof_class in self._composed_schemas()['anyOf']:\n+        if anyof_class is none_type:\n+            # The only way the input data can match the 'None' type\n+            # is if the input data is the 'null' value.\n+            if model_args is None:\n+                # The input data matches the 'None' type.\n+                oneof_instances.append(model_args)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b362f92a47253bc76b7bd59236adaa3a170b4e3c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MDk1OQ==", "bodyText": "Yes, good catch, I copy/pasted.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418370959", "createdAt": "2020-05-01T01:04:20Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1043,6 +1050,13 @@ def get_anyof_instances(self, model_args, constant_args):\n         return anyof_instances\n \n     for anyof_class in self._composed_schemas()['anyOf']:\n+        if anyof_class is none_type:\n+            # The only way the input data can match the 'None' type\n+            # is if the input data is the 'null' value.\n+            if model_args is None:\n+                # The input data matches the 'None' type.\n+                oneof_instances.append(model_args)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MDExNA=="}, "originalCommit": {"oid": "b362f92a47253bc76b7bd59236adaa3a170b4e3c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MTU3Mw==", "bodyText": "Also, I don't think that we should add model_args to anyof_instances.\nanyof_instances is meant to store ModelSimple or ModelComposed instances, not None.\nLet's just delete this if clause and continue.\n\nBut then potentially if len(anyof_instances) == 0: would be true, if the input data is the null value and the OAS schema has anyOf: [type: 'null', a, b, c]\nSo do you mean just return None? The caller needs to know there was a match for the None value.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418371573", "createdAt": "2020-05-01T01:07:03Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1043,6 +1050,13 @@ def get_anyof_instances(self, model_args, constant_args):\n         return anyof_instances\n \n     for anyof_class in self._composed_schemas()['anyOf']:\n+        if anyof_class is none_type:\n+            # The only way the input data can match the 'None' type\n+            # is if the input data is the 'null' value.\n+            if model_args is None:\n+                # The input data matches the 'None' type.\n+                oneof_instances.append(model_args)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MDExNA=="}, "originalCommit": {"oid": "b362f92a47253bc76b7bd59236adaa3a170b4e3c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3Mzk4Nw==", "bodyText": "Yes, return None. The spec says that None is a valid value. We raise exceptions if deserialization fails. We return None with no exception, so deserialization succeeded.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418373987", "createdAt": "2020-05-01T01:17:34Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1043,6 +1050,13 @@ def get_anyof_instances(self, model_args, constant_args):\n         return anyof_instances\n \n     for anyof_class in self._composed_schemas()['anyOf']:\n+        if anyof_class is none_type:\n+            # The only way the input data can match the 'None' type\n+            # is if the input data is the 'null' value.\n+            if model_args is None:\n+                # The input data matches the 'None' type.\n+                oneof_instances.append(model_args)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MDExNA=="}, "originalCommit": {"oid": "b362f92a47253bc76b7bd59236adaa3a170b4e3c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NDU5Ng==", "bodyText": "We never get to counting oneOf or anyOf instance because we returned None in the ComposedSchema.__new__ method and ComposedSchema.__init__ is never called.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418374596", "createdAt": "2020-05-01T01:20:02Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1043,6 +1050,13 @@ def get_anyof_instances(self, model_args, constant_args):\n         return anyof_instances\n \n     for anyof_class in self._composed_schemas()['anyOf']:\n+        if anyof_class is none_type:\n+            # The only way the input data can match the 'None' type\n+            # is if the input data is the 'null' value.\n+            if model_args is None:\n+                # The input data matches the 'None' type.\n+                oneof_instances.append(model_args)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MDExNA=="}, "originalCommit": {"oid": "b362f92a47253bc76b7bd59236adaa3a170b4e3c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NTA5Mw==", "bodyText": "a = FruitReq(None)\na == None -> True\nisisnstance(a, FruitReq) -> False\nisisnstance(a, none_type) -> True", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418375093", "createdAt": "2020-05-01T01:22:12Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1043,6 +1050,13 @@ def get_anyof_instances(self, model_args, constant_args):\n         return anyof_instances\n \n     for anyof_class in self._composed_schemas()['anyOf']:\n+        if anyof_class is none_type:\n+            # The only way the input data can match the 'None' type\n+            # is if the input data is the 'null' value.\n+            if model_args is None:\n+                # The input data matches the 'None' type.\n+                oneof_instances.append(model_args)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MDExNA=="}, "originalCommit": {"oid": "b362f92a47253bc76b7bd59236adaa3a170b4e3c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM5NDI2Mg==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418394262", "createdAt": "2020-05-01T02:52:34Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1043,6 +1050,13 @@ def get_anyof_instances(self, model_args, constant_args):\n         return anyof_instances\n \n     for anyof_class in self._composed_schemas()['anyOf']:\n+        if anyof_class is none_type:\n+            # The only way the input data can match the 'None' type\n+            # is if the input data is the 'null' value.\n+            if model_args is None:\n+                # The input data matches the 'None' type.\n+                oneof_instances.append(model_args)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MDExNA=="}, "originalCommit": {"oid": "b362f92a47253bc76b7bd59236adaa3a170b4e3c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzE2OTM1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMTowMTo0OFrOGO_TZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMjo0Nzo1MlrOGPAs9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MDQwNQ==", "bodyText": "With my suggested below solution, None types deserialization would never reach here.\nIf we do reach here though:\nIf model_args can be None please update our docstrings to show that\n\nhere +\nget_oneof_instance\nany calling function that passes it in", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418370405", "createdAt": "2020-05-01T01:01:48Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1043,6 +1050,13 @@ def get_anyof_instances(self, model_args, constant_args):\n         return anyof_instances\n \n     for anyof_class in self._composed_schemas()['anyOf']:\n+        if anyof_class is none_type:\n+            # The only way the input data can match the 'None' type\n+            # is if the input data is the 'null' value.\n+            if model_args is None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b362f92a47253bc76b7bd59236adaa3a170b4e3c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM5MzMzNQ==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r418393335", "createdAt": "2020-05-01T02:47:52Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1043,6 +1050,13 @@ def get_anyof_instances(self, model_args, constant_args):\n         return anyof_instances\n \n     for anyof_class in self._composed_schemas()['anyOf']:\n+        if anyof_class is none_type:\n+            # The only way the input data can match the 'None' type\n+            # is if the input data is the 'null' value.\n+            if model_args is None:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3MDQwNQ=="}, "originalCommit": {"oid": "b362f92a47253bc76b7bd59236adaa3a170b4e3c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTAwNjUyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/test/resources/3_0/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QyMTowMTozNFrOGPvegA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo0Mjo1OFrOGQGP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE1OTY4MA==", "bodyText": "Can you add this to the v3 python-experimental spec also?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r419159680", "createdAt": "2020-05-03T21:01:34Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/resources/3_0/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml", "diffHunk": "@@ -1855,6 +1855,7 @@ components:\n           - $ref: '#/components/schemas/banana'\n     fruitReq:\n        oneOf:\n+          - type: 'null'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUzMjc1Mw==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r419532753", "createdAt": "2020-05-04T15:42:58Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/test/resources/3_0/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml", "diffHunk": "@@ -1855,6 +1855,7 @@ components:\n           - $ref: '#/components/schemas/banana'\n     fruitReq:\n        oneOf:\n+          - type: 'null'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE1OTY4MA=="}, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTAxMTcwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QyMTowNzoxMFrOGPvhBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QyMTowNzoxMFrOGPvhBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MDMyNQ==", "bodyText": "With the neswest code we will never reach here when deserializing None.\nCan you remove the None additions from this docstirng?\n\nthis also applies to get_anyof_instances", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r419160325", "createdAt": "2020-05-03T21:07:10Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1024,9 +1024,10 @@ def get_oneof_instance(self, model_args, constant_args):\n     schemas described by oneOf.\n     Args:\n         self: the class we are handling\n-        model_args (dict): var_name to var_value\n+        model_args (dict/None): var_name to var_value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTAxMjYzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QyMTowODoyNlrOGPvhiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyOTozMVrOGQFqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MDQ1Nw==", "bodyText": "Can you delete this if model_args is None: block?\nWe will still go through this code path for deserializing pojo payloads but we should continue through the None like you are doing.\n\nthis also applies to get_anyof_instances", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r419160457", "createdAt": "2020-05-03T21:08:26Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1041,6 +1042,13 @@ def get_oneof_instance(self, model_args, constant_args):\n     # Iterate over each oneOf schema and determine if the input data\n     # matches the oneOf schemas.\n     for oneof_class in self._composed_schemas['oneOf']:\n+        if oneof_class is none_type:\n+            # The only way the input data can match the 'None' type\n+            # is if the input data is the 'null' value.\n+            if model_args is None:\n+                # The input data matches the 'None' type.\n+                oneof_instances.append(model_args)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMzE4MQ==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r419523181", "createdAt": "2020-05-04T15:29:31Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1041,6 +1042,13 @@ def get_oneof_instance(self, model_args, constant_args):\n     # Iterate over each oneOf schema and determine if the input data\n     # matches the oneOf schemas.\n     for oneof_class in self._composed_schemas['oneOf']:\n+        if oneof_class is none_type:\n+            # The only way the input data can match the 'None' type\n+            # is if the input data is the 'null' value.\n+            if model_args is None:\n+                # The input data matches the 'None' type.\n+                oneof_instances.append(model_args)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MDQ1Nw=="}, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTAyNTM4OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QyMToyMjowN1rOGPvnwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjo0NzoxMVrOGQyT_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MjA0OQ==", "bodyText": "I don't think that this will work anymore.\nHow about here\nadding:\noneof_anyof_classes = cls._composed_schemas.get('oneOf', ()) + cls._composed_schemas.get('anyOf', ())\nif oneof_anyof_classes and none_type in oneof_anyof_classes and args[0] is None:\n  return None\n\nThen you can also delete the oneof_anyof_classes definition from lines 78-80.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r419162049", "createdAt": "2020-05-03T21:22:07Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -125,4 +125,16 @@ def test_deserialize_mammal(self):\n         deserialized = self.deserialize(response, (petstore_api.Mammal,), True)\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n-        self.assertEqual(deserialized.class_name, class_name)\n\\ No newline at end of file\n+        self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_fruit(self):\n+        \"\"\"\n+        deserialize fruit\n+        fruitReq is a oneOf composed schema model with discriminator, including 'null' type.\n+        \"\"\"\n+\n+        # Unmarshal 'null' value\n+        data = None\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = self.deserialize(response, (petstore_api.FruitReq, type(None)), True)\n+        self.assertEqual(type(deserialized), type(None))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMTY4Mg==", "bodyText": "Where was this done? In the PR I don't see any code added in the __new__ method.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r419631682", "createdAt": "2020-05-04T18:15:26Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -125,4 +125,16 @@ def test_deserialize_mammal(self):\n         deserialized = self.deserialize(response, (petstore_api.Mammal,), True)\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n-        self.assertEqual(deserialized.class_name, class_name)\n\\ No newline at end of file\n+        self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_fruit(self):\n+        \"\"\"\n+        deserialize fruit\n+        fruitReq is a oneOf composed schema model with discriminator, including 'null' type.\n+        \"\"\"\n+\n+        # Unmarshal 'null' value\n+        data = None\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = self.deserialize(response, (petstore_api.FruitReq, type(None)), True)\n+        self.assertEqual(type(deserialized), type(None))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MjA0OQ=="}, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg2OTA0OA==", "bodyText": "Where was this done? In the PR I don't see any code added in the __new__ method.\n\nWhere was what done?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r419869048", "createdAt": "2020-05-05T05:20:51Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -125,4 +125,16 @@ def test_deserialize_mammal(self):\n         deserialized = self.deserialize(response, (petstore_api.Mammal,), True)\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n-        self.assertEqual(deserialized.class_name, class_name)\n\\ No newline at end of file\n+        self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_fruit(self):\n+        \"\"\"\n+        deserialize fruit\n+        fruitReq is a oneOf composed schema model with discriminator, including 'null' type.\n+        \"\"\"\n+\n+        # Unmarshal 'null' value\n+        data = None\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = self.deserialize(response, (petstore_api.FruitReq, type(None)), True)\n+        self.assertEqual(type(deserialized), type(None))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MjA0OQ=="}, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MTM1MQ==", "bodyText": "My above suggestion asked that you add code in the new method. So I am asking where the requested code was added.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r419891351", "createdAt": "2020-05-05T06:34:36Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -125,4 +125,16 @@ def test_deserialize_mammal(self):\n         deserialized = self.deserialize(response, (petstore_api.Mammal,), True)\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n-        self.assertEqual(deserialized.class_name, class_name)\n\\ No newline at end of file\n+        self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_fruit(self):\n+        \"\"\"\n+        deserialize fruit\n+        fruitReq is a oneOf composed schema model with discriminator, including 'null' type.\n+        \"\"\"\n+\n+        # Unmarshal 'null' value\n+        data = None\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = self.deserialize(response, (petstore_api.FruitReq, type(None)), True)\n+        self.assertEqual(type(deserialized), type(None))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MjA0OQ=="}, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMTM3MA==", "bodyText": "ok, I missed that proposed change.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r420221370", "createdAt": "2020-05-05T15:58:41Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -125,4 +125,16 @@ def test_deserialize_mammal(self):\n         deserialized = self.deserialize(response, (petstore_api.Mammal,), True)\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n-        self.assertEqual(deserialized.class_name, class_name)\n\\ No newline at end of file\n+        self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_fruit(self):\n+        \"\"\"\n+        deserialize fruit\n+        fruitReq is a oneOf composed schema model with discriminator, including 'null' type.\n+        \"\"\"\n+\n+        # Unmarshal 'null' value\n+        data = None\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = self.deserialize(response, (petstore_api.FruitReq, type(None)), True)\n+        self.assertEqual(type(deserialized), type(None))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MjA0OQ=="}, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMjU5MA==", "bodyText": "Is it expected that your proposed change has no check for \"allOf\"?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r420222590", "createdAt": "2020-05-05T16:00:07Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -125,4 +125,16 @@ def test_deserialize_mammal(self):\n         deserialized = self.deserialize(response, (petstore_api.Mammal,), True)\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n-        self.assertEqual(deserialized.class_name, class_name)\n\\ No newline at end of file\n+        self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_fruit(self):\n+        \"\"\"\n+        deserialize fruit\n+        fruitReq is a oneOf composed schema model with discriminator, including 'null' type.\n+        \"\"\"\n+\n+        # Unmarshal 'null' value\n+        data = None\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = self.deserialize(response, (petstore_api.FruitReq, type(None)), True)\n+        self.assertEqual(type(deserialized), type(None))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MjA0OQ=="}, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDAxNA==", "bodyText": "Can you describe a payload and schema that would need this allOf check where the check is missing?\nwhen deserializing None where none is in OneOf or AnyOf, any allOf definition of object property fields can never be met by a None payload because None is not a pojo.\nFurther down in the new function we cover the use case where we have allof definitions, verify that the payload conforms to it then deserialize to an anyof or oneof pojo payload.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r420230014", "createdAt": "2020-05-05T16:10:27Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -125,4 +125,16 @@ def test_deserialize_mammal(self):\n         deserialized = self.deserialize(response, (petstore_api.Mammal,), True)\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n-        self.assertEqual(deserialized.class_name, class_name)\n\\ No newline at end of file\n+        self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_fruit(self):\n+        \"\"\"\n+        deserialize fruit\n+        fruitReq is a oneOf composed schema model with discriminator, including 'null' type.\n+        \"\"\"\n+\n+        # Unmarshal 'null' value\n+        data = None\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = self.deserialize(response, (petstore_api.FruitReq, type(None)), True)\n+        self.assertEqual(type(deserialized), type(None))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MjA0OQ=="}, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMTg3Mw==", "bodyText": "That was a question for you. You wrote this code, so I am asking you.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r420231873", "createdAt": "2020-05-05T16:13:12Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -125,4 +125,16 @@ def test_deserialize_mammal(self):\n         deserialized = self.deserialize(response, (petstore_api.Mammal,), True)\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n-        self.assertEqual(deserialized.class_name, class_name)\n\\ No newline at end of file\n+        self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_fruit(self):\n+        \"\"\"\n+        deserialize fruit\n+        fruitReq is a oneOf composed schema model with discriminator, including 'null' type.\n+        \"\"\"\n+\n+        # Unmarshal 'null' value\n+        data = None\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = self.deserialize(response, (petstore_api.FruitReq, type(None)), True)\n+        self.assertEqual(type(deserialized), type(None))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MjA0OQ=="}, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDk2OA==", "bodyText": "Does my above answer meet your needs? I don't understand when we would need to check allof but we miss that check. In the answer I describe both cases that do and don't check allof and why.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r420240968", "createdAt": "2020-05-05T16:26:37Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -125,4 +125,16 @@ def test_deserialize_mammal(self):\n         deserialized = self.deserialize(response, (petstore_api.Mammal,), True)\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n-        self.assertEqual(deserialized.class_name, class_name)\n\\ No newline at end of file\n+        self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_fruit(self):\n+        \"\"\"\n+        deserialize fruit\n+        fruitReq is a oneOf composed schema model with discriminator, including 'null' type.\n+        \"\"\"\n+\n+        # Unmarshal 'null' value\n+        data = None\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = self.deserialize(response, (petstore_api.FruitReq, type(None)), True)\n+        self.assertEqual(type(deserialized), type(None))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MjA0OQ=="}, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1NDcxOQ==", "bodyText": "Thanks. I just copied your code as is without checking the correctness.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r420254719", "createdAt": "2020-05-05T16:47:11Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_deserialization.py", "diffHunk": "@@ -125,4 +125,16 @@ def test_deserialize_mammal(self):\n         deserialized = self.deserialize(response, (petstore_api.Mammal,), True)\n         self.assertTrue(isinstance(deserialized, petstore_api.Zebra))\n         self.assertEqual(deserialized.type, zebra_type)\n-        self.assertEqual(deserialized.class_name, class_name)\n\\ No newline at end of file\n+        self.assertEqual(deserialized.class_name, class_name)\n+\n+    def test_deserialize_fruit(self):\n+        \"\"\"\n+        deserialize fruit\n+        fruitReq is a oneOf composed schema model with discriminator, including 'null' type.\n+        \"\"\"\n+\n+        # Unmarshal 'null' value\n+        data = None\n+        response = MockResponse(data=json.dumps(data))\n+        deserialized = self.deserialize(response, (petstore_api.FruitReq, type(None)), True)\n+        self.assertEqual(type(deserialized), type(None))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MjA0OQ=="}, "originalCommit": {"oid": "e449c82139bea9402160e5829b84be8b04809fc2"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTMwMjk5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo1NTo1NlrOGQqnHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1MzozMFrOGQwCPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEyODU0Mw==", "bodyText": "I would use LOGGER.warn instead and make it clear it's for the upcoming OAS v3.1\n(after OAS v3.1 release, I would expect the parser (swagger-parser) to catch this kind of issue)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r420128543", "createdAt": "2020-05-05T13:55:56Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -2986,6 +2993,12 @@ public CodegenProperty fromProperty(String name, Schema p) {\n         } else if (ModelUtils.isFreeFormObject(p)) {\n             property.isFreeFormObject = true;\n         } else if (ModelUtils.isAnyTypeSchema(p)) {\n+            // The 'null' value is allowed when the OAS schema is 'any type'.\n+            // See https://github.com/OAI/OpenAPI-Specification/issues/1389\n+            if (Boolean.FALSE.equals(p.getNullable())) {\n+                LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\", p.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc7a7e05b4d1890c36e40507d3edbce67e5c006b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxNzQwNg==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r420217406", "createdAt": "2020-05-05T15:53:30Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -2986,6 +2993,12 @@ public CodegenProperty fromProperty(String name, Schema p) {\n         } else if (ModelUtils.isFreeFormObject(p)) {\n             property.isFreeFormObject = true;\n         } else if (ModelUtils.isAnyTypeSchema(p)) {\n+            // The 'null' value is allowed when the OAS schema is 'any type'.\n+            // See https://github.com/OAI/OpenAPI-Specification/issues/1389\n+            if (Boolean.FALSE.equals(p.getNullable())) {\n+                LOGGER.error(\"Schema '{}' is any type, which includes the 'null' value. 'nullable' cannot be set to 'false'\", p.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEyODU0Mw=="}, "originalCommit": {"oid": "dc7a7e05b4d1890c36e40507d3edbce67e5c006b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjQ5MDg4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0ODo0MFrOGSWLXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo1NDoyOVrOGSWRjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5MDkwOA==", "bodyText": "We will only reach this code if we are deserializing a dict payload.\nThis is because the __new__ method is run before the __init__ method. And in __new__ we return None rather than an instance of the composed class when we pass in None and oneOf contains None type.\nSo in that case, get_oneof_instance is never called. So in this loop, all we need to do is skip over the none_types.\nCan you change this if block to be only this?\nif oneof_class is none_type:\n  # skip none_types because we are deserializing dict data. none_type deserialization is handled in the __new__ method\n  continue", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r421890908", "createdAt": "2020-05-08T01:48:40Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1041,6 +1043,16 @@ def get_oneof_instance(self, model_args, constant_args):\n     # Iterate over each oneOf schema and determine if the input data\n     # matches the oneOf schemas.\n     for oneof_class in self._composed_schemas['oneOf']:\n+        # The composed oneOf schema allows the 'null' type and the input data\n+        # is the null value. This is a OAS >= 3.1 feature.\n+        if oneof_class is none_type:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82cb0e91d3758bc510ca893640eef73d513da796"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5MTMyMg==", "bodyText": "Actually, I just added this code because otherwise the existing unit tests fail. This code IS executed when the unit tests are executed, but let me try your proposed change.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r421891322", "createdAt": "2020-05-08T01:50:08Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1041,6 +1043,16 @@ def get_oneof_instance(self, model_args, constant_args):\n     # Iterate over each oneOf schema and determine if the input data\n     # matches the oneOf schemas.\n     for oneof_class in self._composed_schemas['oneOf']:\n+        # The composed oneOf schema allows the 'null' type and the input data\n+        # is the null value. This is a OAS >= 3.1 feature.\n+        if oneof_class is none_type:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5MDkwOA=="}, "originalCommit": {"oid": "82cb0e91d3758bc510ca893640eef73d513da796"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5MjQ5Mw==", "bodyText": "Thank you for the change. I just tested it. It works.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r421892493", "createdAt": "2020-05-08T01:54:29Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1041,6 +1043,16 @@ def get_oneof_instance(self, model_args, constant_args):\n     # Iterate over each oneOf schema and determine if the input data\n     # matches the oneOf schemas.\n     for oneof_class in self._composed_schemas['oneOf']:\n+        # The composed oneOf schema allows the 'null' type and the input data\n+        # is the null value. This is a OAS >= 3.1 feature.\n+        if oneof_class is none_type:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5MDkwOA=="}, "originalCommit": {"oid": "82cb0e91d3758bc510ca893640eef73d513da796"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjQ5MjE4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0OToxNlrOGSWMGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0OToxNlrOGSWMGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5MTA5OA==", "bodyText": "We will only reach this code if we are deserializing a dict payload.\nThis is because the __new__ method is run before the __init__ method. And in __new__ we return None rather than an instance of the composed class when we pass in None and oneOf contains None type.\nSo in that case, get_anyof_instances is never called. So in this loop, all we need to do is skip over the none_types.\nCan you change this if block to be only this?\nif anyof_class is none_type:\n  # skip none_types because we are deserializing dict data. none_type deserialization is handled in the __new__ method\n  continue", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6121#discussion_r421891098", "createdAt": "2020-05-08T01:49:16Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_utils.mustache", "diffHunk": "@@ -1098,6 +1112,16 @@ def get_anyof_instances(self, model_args, constant_args):\n         return anyof_instances\n \n     for anyof_class in self._composed_schemas['anyOf']:\n+        # The composed oneOf schema allows the 'null' type and the input data\n+        # is the null value. This is a OAS >= 3.1 feature.\n+        if anyof_class is none_type:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82cb0e91d3758bc510ca893640eef73d513da796"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3479, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}