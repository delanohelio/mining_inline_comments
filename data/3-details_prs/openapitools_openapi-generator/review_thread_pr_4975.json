{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNzU4ODY1", "number": 4975, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxOTo0NzoyN1rODXV-mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMDowMzoxM1rODXWA8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODAzOTI5OnYy", "diffSide": "RIGHT", "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxOTo0NzoyN1rOFcmtUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMjo1MzozM1rOFcsluA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODY0MA==", "bodyText": "I'm not sure that truncate data is necessary there. Don't know which argument is more important, minLength/maxLength or format.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365538640", "createdAt": "2020-01-11T19:47:27Z", "author": {"login": "ybelenko"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzNTAwMA==", "bodyText": "I'm ok with truncated data since it's fake anyway as you've pointed out.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365635000", "createdAt": "2020-01-13T02:53:33Z", "author": {"login": "wing328"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODY0MA=="}, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODA0MTczOnYy", "diffSide": "RIGHT", "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxOTo1NDowOVrOFcmuhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoxMToyMlrOFdW66w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODk1MQ==", "bodyText": "Same applies to this part. Please, explain to me. Accordingly to OAS3 spec what properties has more priority, minLength/maxLength or date/date-time format? Is schema below valid:\ntype: string\nformat: date-time\nmaxLength: 1\nIt's not possible to write down date-time with single char, isn't it? It violates RFC standard for date-time specification too.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365538951", "createdAt": "2020-01-11T19:54:09Z", "author": {"login": "ybelenko"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');\n+                break;\n+            case IMocker::DATA_FORMAT_DATE:\n+            case IMocker::DATA_FORMAT_DATE_TIME:\n+                // min unix timestamp is 0 and max is 2147483647 for 32bit systems which equals 2038-01-19 03:14:07\n+                $date = DateTime::createFromFormat('U', mt_rand(0, 2147483647));\n+                $str = ($dataFormat === IMocker::DATA_FORMAT_DATE) ? $date->format('Y-m-d') : $date->format('Y-m-d\\TH:i:sP');\n+\n+                // truncate or pad datestring to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength, ' ');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzNTE1Mw==", "bodyText": "Right, maxLength: 1 doesn't conform to RFC3339", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365635153", "createdAt": "2020-01-13T02:54:52Z", "author": {"login": "wing328"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');\n+                break;\n+            case IMocker::DATA_FORMAT_DATE:\n+            case IMocker::DATA_FORMAT_DATE_TIME:\n+                // min unix timestamp is 0 and max is 2147483647 for 32bit systems which equals 2038-01-19 03:14:07\n+                $date = DateTime::createFromFormat('U', mt_rand(0, 2147483647));\n+                $str = ($dataFormat === IMocker::DATA_FORMAT_DATE) ? $date->format('Y-m-d') : $date->format('Y-m-d\\TH:i:sP');\n+\n+                // truncate or pad datestring to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength, ' ');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODk1MQ=="}, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0OTg3OQ==", "bodyText": "Right, maxLength: 1 doesn't conform to RFC3339\n\nSo described spec is invalid or not? Will validate function of generator pass this part of spec? Should I add extra checks against RFC3339 and throw additional exceptions?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365649879", "createdAt": "2020-01-13T05:19:38Z", "author": {"login": "ybelenko"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');\n+                break;\n+            case IMocker::DATA_FORMAT_DATE:\n+            case IMocker::DATA_FORMAT_DATE_TIME:\n+                // min unix timestamp is 0 and max is 2147483647 for 32bit systems which equals 2038-01-19 03:14:07\n+                $date = DateTime::createFromFormat('U', mt_rand(0, 2147483647));\n+                $str = ($dataFormat === IMocker::DATA_FORMAT_DATE) ? $date->format('Y-m-d') : $date->format('Y-m-d\\TH:i:sP');\n+\n+                // truncate or pad datestring to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength, ' ');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODk1MQ=="}, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyODU1NQ==", "bodyText": "If someone defines the following:\ntype: string\nformat: date-time\nmaxLength: 1\n\nI don't think it's our fault. I suggest we revisit this edge case when users bring it up.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r366328555", "createdAt": "2020-01-14T13:11:22Z", "author": {"login": "wing328"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');\n+                break;\n+            case IMocker::DATA_FORMAT_DATE:\n+            case IMocker::DATA_FORMAT_DATE_TIME:\n+                // min unix timestamp is 0 and max is 2147483647 for 32bit systems which equals 2038-01-19 03:14:07\n+                $date = DateTime::createFromFormat('U', mt_rand(0, 2147483647));\n+                $str = ($dataFormat === IMocker::DATA_FORMAT_DATE) ? $date->format('Y-m-d') : $date->format('Y-m-d\\TH:i:sP');\n+\n+                // truncate or pad datestring to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength, ' ');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzODk1MQ=="}, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODA0MzE4OnYy", "diffSide": "RIGHT", "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxOTo1Nzo1M1rOFcmvNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMjo1Nzo0NFrOFcsncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTEyNg==", "bodyText": "If I understand spec correctly, email format is not supported, but is recognisable by some systems. I think I can truncate email values with no worries.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365539126", "createdAt": "2020-01-11T19:57:53Z", "author": {"login": "ybelenko"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');\n+                break;\n+            case IMocker::DATA_FORMAT_DATE:\n+            case IMocker::DATA_FORMAT_DATE_TIME:\n+                // min unix timestamp is 0 and max is 2147483647 for 32bit systems which equals 2038-01-19 03:14:07\n+                $date = DateTime::createFromFormat('U', mt_rand(0, 2147483647));\n+                $str = ($dataFormat === IMocker::DATA_FORMAT_DATE) ? $date->format('Y-m-d') : $date->format('Y-m-d\\TH:i:sP');\n+\n+                // truncate or pad datestring to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength, ' ');\n+                break;\n+            case IMocker::DATA_FORMAT_PASSWORD:\n+                // use list of most popular passwords\n+                $obviousPassList = [\n+                    'qwerty',\n+                    'qwerty12345',\n+                    'hello',\n+                    '12345',\n+                    '0000',\n+                    'qwerty12345!',\n+                    'qwertyuiop[]',\n+                ];\n+                $str = $obviousPassList[mt_rand(0, count($obviousPassList) - 1)];\n+\n+                // truncate or pad password to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);\n+                break;\n+            case IMocker::DATA_FORMAT_UUID:\n+                // use php built-in uniqid function\n+                $str = uniqid();\n+\n+                // truncate or pad password to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);\n+                break;\n+            case IMocker::DATA_FORMAT_EMAIL:\n+                // just for visionary purpose, not related to real persons\n+                $fakeEmailList = [\n+                    'johndoe',\n+                    'lhoswald',\n+                    'ojsimpson',\n+                    'mlking',\n+                    'jfkennedy',\n+                ];\n+                $str = $fakeEmailList[mt_rand(0, count($fakeEmailList) - 1)] . '@example.com';\n+\n+                // truncate or pad email to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzNTQ0Mg==", "bodyText": "format field for type: string can be anything according to the spec so email is valid. I agree with you not every tool supports email as the format.\nLet's go with your current approach to see how it goes.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365635442", "createdAt": "2020-01-13T02:57:44Z", "author": {"login": "wing328"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:\n+                // base64 encoded string\n+                $inputLength = 1;\n+                $str = base64_encode($getLoremIpsum($inputLength));\n+                while (mb_strlen($str) < $minLength) {\n+                    $inputLength++;\n+                    $str = base64_encode($getLoremIpsum($inputLength));\n+                }\n+\n+                // base64 encoding produces strings devided by 4, so resulted string can exceed maxLength parameter\n+                // I think truncated(invalid) base64 string is better than oversized, cause this data is fake anyway\n+                $str = $truncateOrPad($str, null, $maxLength, '. ');\n+                break;\n+            case IMocker::DATA_FORMAT_DATE:\n+            case IMocker::DATA_FORMAT_DATE_TIME:\n+                // min unix timestamp is 0 and max is 2147483647 for 32bit systems which equals 2038-01-19 03:14:07\n+                $date = DateTime::createFromFormat('U', mt_rand(0, 2147483647));\n+                $str = ($dataFormat === IMocker::DATA_FORMAT_DATE) ? $date->format('Y-m-d') : $date->format('Y-m-d\\TH:i:sP');\n+\n+                // truncate or pad datestring to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength, ' ');\n+                break;\n+            case IMocker::DATA_FORMAT_PASSWORD:\n+                // use list of most popular passwords\n+                $obviousPassList = [\n+                    'qwerty',\n+                    'qwerty12345',\n+                    'hello',\n+                    '12345',\n+                    '0000',\n+                    'qwerty12345!',\n+                    'qwertyuiop[]',\n+                ];\n+                $str = $obviousPassList[mt_rand(0, count($obviousPassList) - 1)];\n+\n+                // truncate or pad password to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);\n+                break;\n+            case IMocker::DATA_FORMAT_UUID:\n+                // use php built-in uniqid function\n+                $str = uniqid();\n+\n+                // truncate or pad password to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);\n+                break;\n+            case IMocker::DATA_FORMAT_EMAIL:\n+                // just for visionary purpose, not related to real persons\n+                $fakeEmailList = [\n+                    'johndoe',\n+                    'lhoswald',\n+                    'ojsimpson',\n+                    'mlking',\n+                    'jfkennedy',\n+                ];\n+                $str = $fakeEmailList[mt_rand(0, count($fakeEmailList) - 1)] . '@example.com';\n+\n+                // truncate or pad email to fit minLength and maxLength\n+                $str = $truncateOrPad($str, $minLength, $maxLength);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTEyNg=="}, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODA0NTMxOnYy", "diffSide": "RIGHT", "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMDowMzoxM1rOFcmwNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoyMDo1N1rOFdXMTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTM4Mg==", "bodyText": "I tried to produce binary string data with random_bytes() php function, but resulted string can break std output. I don't know how binary format string should look like(raw, hex. base64 etc.). If somebody knows, please give an example.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365539382", "createdAt": "2020-01-11T20:03:13Z", "author": {"login": "ybelenko"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYzNDYyNQ==", "bodyText": "What about using a random string generator mentioned in https://stackoverflow.com/a/4356295/677735 ?\n\nhow binary format string should look like(raw, hex. base64 etc.).\n\nShould be simply just raw.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365634625", "createdAt": "2020-01-13T02:49:14Z", "author": {"login": "wing328"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTM4Mg=="}, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MDM3NA==", "bodyText": "Function from link looks like a base62 encoded string to me. Raw binary string contains non UTF characters which breaks PHP output or even JSON.\nI thought that raw binary string in php is:\necho random_bytes(10);\n// ????U???", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r365650374", "createdAt": "2020-01-13T05:24:23Z", "author": {"login": "ybelenko"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTM4Mg=="}, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyOTY0OQ==", "bodyText": "But your concern is that it may break the std output, right?\nIf that's not a concern, please start with random_bytes", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r366329649", "createdAt": "2020-01-14T13:13:35Z", "author": {"login": "wing328"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTM4Mg=="}, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMzAwNA==", "bodyText": "It's not my concern, I know that it breaks output \ud83d\ude04 I've checked. Maybe it should be encoded somehow to be presented inside of JSON or http request.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4975#discussion_r366333004", "createdAt": "2020-01-14T13:20:57Z", "author": {"login": "ybelenko"}, "path": "samples/server/petstore/php-slim4/lib/Mock/OpenApiDataMocker.php", "diffHunk": "@@ -207,7 +228,72 @@ public function mockString(\n             throw new InvalidArgumentException('\"maxLength\" value cannot be less than \"minLength\"');\n         }\n \n-        return str_pad('', mt_rand($minLength, $maxLength), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. ', \\STR_PAD_RIGHT);\n+        switch ($dataFormat) {\n+            case IMocker::DATA_FORMAT_BYTE:\n+            case IMocker::DATA_FORMAT_BINARY:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzOTM4Mg=="}, "originalCommit": {"oid": "6aad9c37cb844ca41ef92d3f8ccc8ee59d22f668"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4019, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}