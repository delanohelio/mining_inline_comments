{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NTczMDg0", "number": 6504, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDo1NTo0NFrOEVCbDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDo1NTo0NFrOEVCbDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDk1MjQ1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/Javascript/ApiClient.mustache", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDo1NTo0NFrOG7kRCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1NToyMVrOG7m1fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExMzM1Mw==", "bodyText": "The Number.isNaN() method determines whether a value is NaN (Not-A-Number).\n\nRef: https://www.w3schools.com/jsref/jsref_isnan_number.asp\nDid you mean to check if str is a number?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6504#discussion_r465113353", "createdAt": "2020-08-04T14:55:44Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/resources/Javascript/ApiClient.mustache", "diffHunk": "@@ -541,12 +541,15 @@\n {{/usePromises}}  };\n \n {{#emitJSDoc}}  /**\n-   * Parses an ISO-8601 string representation of a date value.\n+   * Parses an ISO-8601 string representation or epoch representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n {{/emitJSDoc}}  exports.parseDate = function(str) {\n-    return new Date(str.replace(/T/i, ' '));\n+    if (isNaN(str)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd7910c47ea3a12ad63677c26087d9b7b2c3b37c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEyMjcxMg==", "bodyText": "No I meant to check if str is not a number. If it's not a number then we'll default to the existing logic otherwise it's a number that we can just pass into Date.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6504#discussion_r465122712", "createdAt": "2020-08-04T15:08:34Z", "author": {"login": "tray2100"}, "path": "modules/openapi-generator/src/main/resources/Javascript/ApiClient.mustache", "diffHunk": "@@ -541,12 +541,15 @@\n {{/usePromises}}  };\n \n {{#emitJSDoc}}  /**\n-   * Parses an ISO-8601 string representation of a date value.\n+   * Parses an ISO-8601 string representation or epoch representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n {{/emitJSDoc}}  exports.parseDate = function(str) {\n-    return new Date(str.replace(/T/i, ' '));\n+    if (isNaN(str)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExMzM1Mw=="}, "originalCommit": {"oid": "cd7910c47ea3a12ad63677c26087d9b7b2c3b37c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NTQ1Mw==", "bodyText": "OK. After reading https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN, I think we can go with your fix.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6504#discussion_r465155453", "createdAt": "2020-08-04T15:55:21Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/resources/Javascript/ApiClient.mustache", "diffHunk": "@@ -541,12 +541,15 @@\n {{/usePromises}}  };\n \n {{#emitJSDoc}}  /**\n-   * Parses an ISO-8601 string representation of a date value.\n+   * Parses an ISO-8601 string representation or epoch representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n {{/emitJSDoc}}  exports.parseDate = function(str) {\n-    return new Date(str.replace(/T/i, ' '));\n+    if (isNaN(str)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTExMzM1Mw=="}, "originalCommit": {"oid": "cd7910c47ea3a12ad63677c26087d9b7b2c3b37c"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3397, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}