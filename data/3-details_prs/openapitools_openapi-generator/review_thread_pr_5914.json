{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNzIxMDEy", "number": 5914, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzowMDoxM1rODxTzqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QyMToxNzoxMFrOEbWttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDMxMzM4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/go/GoClientOptionsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzowMDoxM1rOGEtOoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMToxODo0OFrOHKR9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4ODUxMg==", "bodyText": "I didn't see any reason this repeated the setWithXml from the previous line, so I think this was a bug.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5914#discussion_r407588512", "createdAt": "2020-04-13T17:00:13Z", "author": {"login": "arvindth"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/go/GoClientOptionsTest.java", "diffHunk": "@@ -45,10 +45,11 @@ protected void verifyOptions() {\n         verify(clientCodegen).setPackageName(GoClientOptionsProvider.PACKAGE_NAME_VALUE);\n         verify(clientCodegen).setWithGoCodegenComment(GoClientOptionsProvider.WITH_GO_CODEGEN_COMMENT_VALUE);\n         verify(clientCodegen).setWithXml(GoClientOptionsProvider.WITH_XML_VALUE);\n-        verify(clientCodegen).setWithXml(GoClientOptionsProvider.ENUM_CLASS_PREFIX_VALUE);\n+        verify(clientCodegen).setEnumClassPrefix(GoClientOptionsProvider.ENUM_CLASS_PREFIX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70c24e1a258f2c17896718a13426d2531a989b75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU0MjAxNw==", "bodyText": "Yeah, apparently this was just previously running this twice:\nverify(clientCodegen).setWithXml(true);", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5914#discussion_r480542017", "createdAt": "2020-09-01T01:18:48Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/go/GoClientOptionsTest.java", "diffHunk": "@@ -45,10 +45,11 @@ protected void verifyOptions() {\n         verify(clientCodegen).setPackageName(GoClientOptionsProvider.PACKAGE_NAME_VALUE);\n         verify(clientCodegen).setWithGoCodegenComment(GoClientOptionsProvider.WITH_GO_CODEGEN_COMMENT_VALUE);\n         verify(clientCodegen).setWithXml(GoClientOptionsProvider.WITH_XML_VALUE);\n-        verify(clientCodegen).setWithXml(GoClientOptionsProvider.ENUM_CLASS_PREFIX_VALUE);\n+        verify(clientCodegen).setEnumClassPrefix(GoClientOptionsProvider.ENUM_CLASS_PREFIX_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4ODUxMg=="}, "originalCommit": {"oid": "70c24e1a258f2c17896718a13426d2531a989b75"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzExNTYyOnYy", "diffSide": "RIGHT", "path": "CI/circle_parallel.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMzo0MzoxM1rOG6eE8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToyMzowOFrOG8OsOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2MzM3OA==", "bodyText": "Why is all this necessary?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5914#discussion_r463963378", "createdAt": "2020-08-01T13:43:13Z", "author": {"login": "jimschubert"}, "path": "CI/circle_parallel.sh", "diffHunk": "@@ -33,6 +33,12 @@ elif [ \"$NODE_INDEX\" = \"2\" ]; then\n   if [[ $project_version == *\"-SNAPSHOT\" ]]; then\n     echo \"Running node $NODE_INDEX to test ensure-up-to-date\"\n     java -version\n+    # Install golang version 1.14\n+    go version\n+    sudo mkdir /usr/local/go1.14\n+    wget -c https://dl.google.com/go/go1.14.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local/go1.14", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4769d9683c87575978e2e7fe149e0f639ef6ea8e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4NzY4OQ==", "bodyText": "it's probably to run checks against latest version of go, but this looks far out of scope for this projects and IMO shouldn't be here, that's another thing to remember and maintain.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5914#discussion_r463987689", "createdAt": "2020-08-01T18:30:36Z", "author": {"login": "agilob"}, "path": "CI/circle_parallel.sh", "diffHunk": "@@ -33,6 +33,12 @@ elif [ \"$NODE_INDEX\" = \"2\" ]; then\n   if [[ $project_version == *\"-SNAPSHOT\" ]]; then\n     echo \"Running node $NODE_INDEX to test ensure-up-to-date\"\n     java -version\n+    # Install golang version 1.14\n+    go version\n+    sudo mkdir /usr/local/go1.14\n+    wget -c https://dl.google.com/go/go1.14.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local/go1.14", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2MzM3OA=="}, "originalCommit": {"oid": "4769d9683c87575978e2e7fe149e0f639ef6ea8e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwODQ0MA==", "bodyText": "Yeah, I deliberately put this in the last commit as a POC to showcase the usage of the mocks in the test. I can definitely take it out.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5914#discussion_r465808440", "createdAt": "2020-08-05T15:23:08Z", "author": {"login": "arvindth"}, "path": "CI/circle_parallel.sh", "diffHunk": "@@ -33,6 +33,12 @@ elif [ \"$NODE_INDEX\" = \"2\" ]; then\n   if [[ $project_version == *\"-SNAPSHOT\" ]]; then\n     echo \"Running node $NODE_INDEX to test ensure-up-to-date\"\n     java -version\n+    # Install golang version 1.14\n+    go version\n+    sudo mkdir /usr/local/go1.14\n+    wget -c https://dl.google.com/go/go1.14.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local/go1.14", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2MzM3OA=="}, "originalCommit": {"oid": "4769d9683c87575978e2e7fe149e0f639ef6ea8e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzExNjU2OnYy", "diffSide": "RIGHT", "path": "bin/go-experimental-petstore.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMzo0NDoxOVrOG6eFZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMzo0NDoxOVrOG6eFZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2MzQ5NQ==", "bodyText": "This does not belong in the generation script.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5914#discussion_r463963495", "createdAt": "2020-08-01T13:44:19Z", "author": {"login": "jimschubert"}, "path": "bin/go-experimental-petstore.sh", "diffHunk": "@@ -34,6 +34,17 @@ rm -rf $STUB_DIR\n \n # if you've executed sbt assembly previously it will use that instead.\n export JAVA_OPTS=\"${JAVA_OPTS} -Xmx1024M -DloggerPath=conf/log4j.properties\"\n-ags=\"generate -t modules/openapi-generator/src/main/resources/$GENERATOR -i $SPEC -g $GENERATOR -o $STUB_DIR --additional-properties packageName=petstore $@\"\n+ags=\"generate -t modules/openapi-generator/src/main/resources/$GENERATOR -i $SPEC -g $GENERATOR -o $STUB_DIR --additional-properties packageName=petstore,generateInterfaces=true $@\"\n \n java $JAVA_OPTS -jar $executable $ags\n+\n+# Generate mocks for testing the samples\n+cd samples/client/petstore/go-experimental/go-petstore/\n+echo \"which go = $(which go)\"\n+go version\n+gopath=$(go env GOPATH)\n+GO111MODULE=on go get github.com/golang/mock/mockgen@v1.4.3\n+mockgencmd=\"${gopath%%:*}/bin/mockgen -source=api_pet.go -destination=mock_api_pet.go -package petstore\"\n+echo \"Running $mockgencmd\"\n+$mockgencmd\n+cd -", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4769d9683c87575978e2e7fe149e0f639ef6ea8e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTE5MTU2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/go-experimental/api.mustache", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QyMToxNzoxMFrOHFQFqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QyMToxNzoxMFrOHFQFqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI2ODUyMw==", "bodyText": "Rather than requiring callers to call the new backward incompatible *Execute methods in Service directly, I've re-added the original Execute method in *Request, which just redirects the call to the Service's *Execute, in order to maintain backward compatibility.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5914#discussion_r475268523", "createdAt": "2020-08-23T21:17:10Z", "author": {"login": "arvindth"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/api.mustache", "diffHunk": "@@ -15,49 +15,77 @@ import (\n var (\n \t_ _context.Context\n )\n+{{#generateInterfaces}}\n+\n+type {{classname}} interface {\n+  {{#operation}}\n+\n+  /*\n+   * {{operationId}}{{#summary}} {{{.}}}{{/summary}}{{^summary}} Method for {{operationId}}{{/summary}}\n+  {{#notes}}\n+   * {{{unescapedNotes}}}\n+  {{/notes}}\n+   * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().{{#pathParams}}\n+   * @param {{paramName}}{{#description}} {{{.}}}{{/description}}{{/pathParams}}\n+   * @return Api{{operationId}}Request\n+   */\n+  {{{nickname}}}(ctx _context.Context{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}) Api{{operationId}}Request\n+\n+  /*\n+   * {{nickname}}Execute executes the request{{#returnType}}\n+   * @return {{{.}}}{{/returnType}}\n+   */\n+  {{nickname}}Execute(r Api{{operationId}}Request) ({{#returnType}}{{{.}}}, {{/returnType}}*_nethttp.Response, error)\n+  {{/operation}}\n+}\n+{{/generateInterfaces}}\n \n // {{classname}}Service {{classname}} service\n type {{classname}}Service service\n-\n {{#operation}}\n-type api{{operationId}}Request struct {\n-\tctx _context.Context\n-\tapiService *{{classname}}Service{{#allParams}}\n-\t{{paramName}} {{^isPathParam}}*{{/isPathParam}}{{{dataType}}}{{/allParams}}\n-}\n \n+type Api{{operationId}}Request struct {\n+\tctx _context.Context{{#generateInterfaces}}\n+\tApiService {{classname}}\n+{{/generateInterfaces}}{{^generateInterfaces}}\n+\tApiService *{{classname}}Service\n+{{/generateInterfaces}}\n {{#allParams}}\n-{{^isPathParam}}\n-func (r api{{operationId}}Request) {{vendorExtensions.x-export-param-name}}({{paramName}} {{{dataType}}}) api{{operationId}}Request {\n+\t{{paramName}} {{^isPathParam}}*{{/isPathParam}}{{{dataType}}}\n+{{/allParams}}\n+}\n+{{#allParams}}{{^isPathParam}}\n+func (r Api{{operationId}}Request) {{vendorExtensions.x-export-param-name}}({{paramName}} {{{dataType}}}) Api{{operationId}}Request {\n \tr.{{paramName}} = &{{paramName}}\n \treturn r\n+}{{/isPathParam}}{{/allParams}}\n+\n+func (r Api{{operationId}}Request) Execute() ({{#returnType}}{{{.}}}, {{/returnType}}*_nethttp.Response, error) {\n+    return r.ApiService.{{nickname}}Execute(r)\n }\n-{{/isPathParam}}\n-{{/allParams}}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af471d8c47696aefde9056c0d0326de9b257b6af"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3660, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}