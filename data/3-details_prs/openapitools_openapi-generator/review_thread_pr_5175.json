{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NTMwODI2", "number": 5175, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMToyNTozMVrODcNVRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTowNTo1NFrODdILfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTA1MTU5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMToyNTozMVrOFkIoIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDowNjo1M1rOFkWlmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDQwMg==", "bodyText": "can you add a docstring?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r373434402", "createdAt": "2020-01-31T11:25:31Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -38,6 +38,19 @@ type {{classname}} struct {\n \t{{name}} {{^required}}*{{/required}}{{{dataType}}} `json:\"{{baseName}}{{^required}},omitempty{{/required}}\"{{#withXml}} xml:\"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}\"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`\n {{/vars}}\n }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df0d30588383359169a54e2eee6008c117619f5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzODU1NQ==", "bodyText": "Any reason not to require the required Params in the input?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r373438555", "createdAt": "2020-01-31T11:36:50Z", "author": {"login": "platinummonkey"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -38,6 +38,19 @@ type {{classname}} struct {\n \t{{name}} {{^required}}*{{/required}}{{{dataType}}} `json:\"{{baseName}}{{^required}},omitempty{{/required}}\"{{#withXml}} xml:\"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}\"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`\n {{/vars}}\n }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDQwMg=="}, "originalCommit": {"oid": "9df0d30588383359169a54e2eee6008c117619f5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTEwOQ==", "bodyText": "@jirikuncar thanks for pointing out the docs I'll fix that.\n@platinummonkey I think the problem here is that it's not straightforward what to do with required params that have defaults set. Should these be required arguments for the constructor or not? I think that this uncertainty is why generated constructors in other similar languages don't have required params either. I'd like to stay consistent here, so that's why I chose this approach.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r373469109", "createdAt": "2020-01-31T13:04:22Z", "author": {"login": "bkabrda"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -38,6 +38,19 @@ type {{classname}} struct {\n \t{{name}} {{^required}}*{{/required}}{{{dataType}}} `json:\"{{baseName}}{{^required}},omitempty{{/required}}\"{{#withXml}} xml:\"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}\"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`\n {{/vars}}\n }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDQwMg=="}, "originalCommit": {"oid": "9df0d30588383359169a54e2eee6008c117619f5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3MTczNA==", "bodyText": "I pushed a new commit that adds both the docstring and also documentation in model_doc.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r373471734", "createdAt": "2020-01-31T13:11:33Z", "author": {"login": "bkabrda"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -38,6 +38,19 @@ type {{classname}} struct {\n \t{{name}} {{^required}}*{{/required}}{{{dataType}}} `json:\"{{baseName}}{{^required}},omitempty{{/required}}\"{{#withXml}} xml:\"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}\"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`\n {{/vars}}\n }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDQwMg=="}, "originalCommit": {"oid": "9df0d30588383359169a54e2eee6008c117619f5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5MDYyNg==", "bodyText": "New<ClassName>(args....) vs NewDefault<ClassName>() maybe is more clear?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r373490626", "createdAt": "2020-01-31T13:56:52Z", "author": {"login": "platinummonkey"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -38,6 +38,19 @@ type {{classname}} struct {\n \t{{name}} {{^required}}*{{/required}}{{{dataType}}} `json:\"{{baseName}}{{^required}},omitempty{{/required}}\"{{#withXml}} xml:\"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}\"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`\n {{/vars}}\n }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDQwMg=="}, "originalCommit": {"oid": "9df0d30588383359169a54e2eee6008c117619f5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUxODA0Nw==", "bodyText": "@platinummonkey I just realized one more reason that is problematic with the required properties:\nImagine that you have required properties A and B and code generated for that: NewFoo(A, B). Now a change happens that makes B optional. You regenerate the code and suddenly you get NewFoo(A) - so that's backwards incompatible. But the change you did in API is backwards compatible, so this breaks the promise of not breaking API of the generated client when a non-breaking API change happens.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r373518047", "createdAt": "2020-01-31T14:51:03Z", "author": {"login": "bkabrda"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -38,6 +38,19 @@ type {{classname}} struct {\n \t{{name}} {{^required}}*{{/required}}{{{dataType}}} `json:\"{{baseName}}{{^required}},omitempty{{/required}}\"{{#withXml}} xml:\"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}\"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`\n {{/vars}}\n }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDQwMg=="}, "originalCommit": {"oid": "9df0d30588383359169a54e2eee6008c117619f5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU0OTcwMw==", "bodyText": "I'm not actually sure that's a problem, if you need to introduce a var, this this method signature is also changed. The alternative is to list all variables, and if one becomes non-optional though or a new one is added then still the signature is changed. Seem moot given go's syntax.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r373549703", "createdAt": "2020-01-31T15:52:49Z", "author": {"login": "platinummonkey"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -38,6 +38,19 @@ type {{classname}} struct {\n \t{{name}} {{^required}}*{{/required}}{{{dataType}}} `json:\"{{baseName}}{{^required}},omitempty{{/required}}\"{{#withXml}} xml:\"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}\"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`\n {{/vars}}\n }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDQwMg=="}, "originalCommit": {"oid": "9df0d30588383359169a54e2eee6008c117619f5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY2MzEyOA==", "bodyText": "The signature of this method will never change, as it never accepts any arguments. But I think I'm starting to like the solution proposed in your previous comment with New(required, args, ...) and NewWithDefaults(). Assuming we clearly document that the contract of the former will always change when the set of required arguments changes, it should be ok. I'll work on this.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r373663128", "createdAt": "2020-01-31T20:06:53Z", "author": {"login": "bkabrda"}, "path": "modules/openapi-generator/src/main/resources/go-experimental/model.mustache", "diffHunk": "@@ -38,6 +38,19 @@ type {{classname}} struct {\n \t{{name}} {{^required}}*{{/required}}{{{dataType}}} `json:\"{{baseName}}{{^required}},omitempty{{/required}}\"{{#withXml}} xml:\"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}\"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`\n {{/vars}}\n }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNDQwMg=="}, "originalCommit": {"oid": "9df0d30588383359169a54e2eee6008c117619f5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTA4MTUyOnYy", "diffSide": "RIGHT", "path": "samples/client/petstore/go-experimental/go-petstore/model_animal.go", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMTozODoxOVrOFkI6Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTowMjoyM1rOFkOHFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzOTAyMw==", "bodyText": "Typically vars are camelCase. Types are TitleCase. So these two lines read very oddly", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r373439023", "createdAt": "2020-01-31T11:38:19Z", "author": {"login": "platinummonkey"}, "path": "samples/client/petstore/go-experimental/go-petstore/model_animal.go", "diffHunk": "@@ -20,6 +20,13 @@ type Animal struct {\n \tColor *string `json:\"color,omitempty\"`\n }\n \n+func NewAnimal() *Animal {\n+    this := Animal{}\n+    var Color string = \"red\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df0d30588383359169a54e2eee6008c117619f5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5MTY5Mg==", "bodyText": "Yeah, I just used the name of the var. I think there might be a camelCase version of this somewhere in the rendering context, let me try to find and use it.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r373491692", "createdAt": "2020-01-31T13:59:07Z", "author": {"login": "bkabrda"}, "path": "samples/client/petstore/go-experimental/go-petstore/model_animal.go", "diffHunk": "@@ -20,6 +20,13 @@ type Animal struct {\n \tColor *string `json:\"color,omitempty\"`\n }\n \n+func NewAnimal() *Animal {\n+    this := Animal{}\n+    var Color string = \"red\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzOTAyMw=="}, "originalCommit": {"oid": "9df0d30588383359169a54e2eee6008c117619f5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNDI0Nw==", "bodyText": "Fixed.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r373524247", "createdAt": "2020-01-31T15:02:23Z", "author": {"login": "bkabrda"}, "path": "samples/client/petstore/go-experimental/go-petstore/model_animal.go", "diffHunk": "@@ -20,6 +20,13 @@ type Animal struct {\n \tColor *string `json:\"color,omitempty\"`\n }\n \n+func NewAnimal() *Animal {\n+    this := Animal{}\n+    var Color string = \"red\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzOTAyMw=="}, "originalCommit": {"oid": "9df0d30588383359169a54e2eee6008c117619f5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODY5MzA5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoClientExperimentalCodegen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTowNTo1NFrOFljccQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTowNTo1NFrOFljccQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyMjM1Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5175#discussion_r374922353", "createdAt": "2020-02-04T21:05:54Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoClientExperimentalCodegen.java", "diffHunk": "@@ -122,7 +130,11 @@ public String toDefaultValue(Schema p) {\n     @Override\n     public CodegenProperty fromProperty(String name, Schema p) {\n         CodegenProperty prop = super.fromProperty(name, p);\n-        prop.nameInCamelCase = camelize(prop.name, true);\n+        String cc = camelize(prop.name, true);\n+        if (isReservedWord(cc)) {\n+            cc = escapeReservedWord(cc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8661844eccbce4064a6cde9e0fd421a99077d5ff"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3890, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}