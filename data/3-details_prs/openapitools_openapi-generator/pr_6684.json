{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MjIyMDUw", "number": 6684, "title": "Improve sttpOpenApiClient generator", "bodyText": "We'd like to propose the following changes to the scala-sttp generator. While the existing version works quite well (thanks to all of the contributors!), in a couple of places it diverges from the way sttp is most often used in the wild, and from the original design goals.\nList of changes together with reasons behind them:\n\nallow libraries' versions customization - although it is not hard to change them by hand we think that it plays nicely with the rest of the cli options and improves the overal user's experience\nreturn erros by default in a separate error channel - being explicit in terms of  returned error types is the way to go in scala (there is a switch which allows to restore the old behavior)\nsome of the helper functions were incorporated into sttp directly\nsome of the helper functions were removed as they were redundant/unnecessary\nauth parameters are passed explicitly rather than implicitly - we belive that the rule of tumb to follow when choosing between imlicit vs explicit arguments is whether they are business or techincal one. Auth parameters belongs to the first category.\nbecause credentials were no longer passed implicitly there was no need to keep custom auth releated classes\njson processing related instances are now imported via single import statement\nfixed multipart requests\nremoved ApiModel class - it was artifical and redundant\nadded circe as another json library - circe is as popular as json4s if not more\nremoved sttpClientCodegen inheritance from akkaClientCodegen\nextract classes to deal with cli properties - Dealing with them is quite cumbersome and what is worse it is error-prone. It is easy to make a mistake, especially when dealing with properties which mutually exlude themselfs. Having another layer of abstraction on top of them makes things much easier.\nbuild.sbt was reduced to minimum\n\nDespite breaking changes I opened this PR against master branch since the sttp generator is marked as beta. But let me know if that needs to be changed.\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project beforehand.\n Run the shell script ./bin/generate-samples.shto update all Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit as it would merge with master. These must match the expectations made by your contribution. You may regenerate an individual generator by passing the relevant config(s) as an argument to the script, for example ./bin/generate-samples.sh bin/config/java*. For Windows users, please run the script in Git BASH.\n File the PR against the correct branch: master\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.\n\nSummoning technical committee:\n@clasnake  @jimschubert , @shijinkui , @ramzimaalej , @chameleon82 , @Bouillie", "createdAt": "2020-06-16T13:41:06Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684", "merged": true, "mergeCommit": {"oid": "323cd38b5c7085321dcad0f65cb3a293603bae13"}, "closed": true, "closedAt": "2020-07-01T01:14:35Z", "author": {"login": "ghostbuster91"}, "timelineItems": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr1frsAH2gAyNDM1MjIyMDUwOmEwOTgyMmUxNjllYTBiZTFkMWE5NjU4MTQxY2Y2YmVkODQxMzdlZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwfvfzgFqTQ0MDQ4MzYyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a09822e169ea0be1d1a9658141cf6bed84137ed6", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a09822e169ea0be1d1a9658141cf6bed84137ed6", "committedDate": "2020-06-16T13:44:24Z", "message": "Base changes\n- remove apiModel\n- do not preinline response type\n- define sbt version\n- replace ApiRequestT with Request\n- update sttp version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4124448cab670d23a573f5d49e38dbc1d55a667", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a4124448cab670d23a573f5d49e38dbc1d55a667", "committedDate": "2020-06-16T13:44:24Z", "message": "Fix rendering too many colons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8c3890ae141daab6a201b3d7e17aa39a9339516", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e8c3890ae141daab6a201b3d7e17aa39a9339516", "committedDate": "2020-06-16T13:44:24Z", "message": "Fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3a065486b4bbe2dfefc0cf56cbf92d698d93603", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e3a065486b4bbe2dfefc0cf56cbf92d698d93603", "committedDate": "2020-06-16T13:44:25Z", "message": "Allow sttp version customization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ac88948881c79431077e4a1cca2ebdcedb1aa08", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/4ac88948881c79431077e4a1cca2ebdcedb1aa08", "committedDate": "2020-06-16T13:44:25Z", "message": "Add option to return errors in terms of monadError"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88908e29dc71a86de7da2e959a9bb3396955f4e1", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/88908e29dc71a86de7da2e959a9bb3396955f4e1", "committedDate": "2020-06-16T13:44:26Z", "message": "Add option to customize jodaTime version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c255e49f436356bc613220ba0e7ff6f7346030c", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/5c255e49f436356bc613220ba0e7ff6f7346030c", "committedDate": "2020-06-16T13:44:26Z", "message": "Add option to customize json4s version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c5d7920dedfc77c67b6dd4c511915340e955af2", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/6c5d7920dedfc77c67b6dd4c511915340e955af2", "committedDate": "2020-06-16T13:44:26Z", "message": "Simplify jsonHandling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b27bc5610995db1767c3b009677a945440c8b25", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/3b27bc5610995db1767c3b009677a945440c8b25", "committedDate": "2020-06-16T13:44:26Z", "message": "Remove helpers as such functionality was added to sttp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cac19fc5f566ecbb527360508941d4230738c452", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/cac19fc5f566ecbb527360508941d4230738c452", "committedDate": "2020-06-16T13:44:27Z", "message": "Rename file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86ec499e20829087f7b13ab772ed8472ef4dca11", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/86ec499e20829087f7b13ab772ed8472ef4dca11", "committedDate": "2020-06-16T13:44:27Z", "message": "Fix uploading multipart data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97fd17fbf32204db864eccb4050469cd7e4100a7", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/97fd17fbf32204db864eccb4050469cd7e4100a7", "committedDate": "2020-06-16T13:44:27Z", "message": "Extract common abstraction for generator properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7a15a2c987daed38d75b7ee8ebdb98318d418fb", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a7a15a2c987daed38d75b7ee8ebdb98318d418fb", "committedDate": "2020-06-16T13:44:27Z", "message": "Add partial circe support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "551bb35b7acf1c899878505d51c6baeec8e7ca85", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/551bb35b7acf1c899878505d51c6baeec8e7ca85", "committedDate": "2020-06-16T13:44:28Z", "message": "Remove unsed method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a91b11e68079bf303a695daff43b6482ac3c89d", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/2a91b11e68079bf303a695daff43b6482ac3c89d", "committedDate": "2020-06-16T13:44:28Z", "message": "Refactor picking up json library"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3805310f3475cdfe1a73bd8e535abb141cdd4d0", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a3805310f3475cdfe1a73bd8e535abb141cdd4d0", "committedDate": "2020-06-16T13:44:28Z", "message": "Add missing DateSerializers for circe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cab35de96bab3f93b1fff6a930fdb3cb28e3aa0", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/5cab35de96bab3f93b1fff6a930fdb3cb28e3aa0", "committedDate": "2020-06-16T13:44:28Z", "message": "Simplify credentials"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "714f93055040103b8671bd1a6d24c4a577173547", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/714f93055040103b8671bd1a6d24c4a577173547", "committedDate": "2020-06-16T13:44:29Z", "message": "Simplify code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5f0a054c019ea61091454cc5ff1494f6ac8b7ac", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a5f0a054c019ea61091454cc5ff1494f6ac8b7ac", "committedDate": "2020-06-16T13:45:56Z", "message": "Update docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfca277654a9dc89f86bd1d281a0b1cfc18ffaf4", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/dfca277654a9dc89f86bd1d281a0b1cfc18ffaf4", "committedDate": "2020-06-16T13:45:57Z", "message": "Fix auto formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5efad875885d024c4da466d7d0282f6224445c4c", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/5efad875885d024c4da466d7d0282f6224445c4c", "committedDate": "2020-06-16T13:46:00Z", "message": "Simplify code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c836f9296f38e5f50fa39cfbe80ca8f450cdfe6", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/3c836f9296f38e5f50fa39cfbe80ca8f450cdfe6", "committedDate": "2020-06-16T13:46:00Z", "message": "SttpCodegen should not depend on akka"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a377921a832828e5497bdfc74f5ab58828f97710", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a377921a832828e5497bdfc74f5ab58828f97710", "committedDate": "2020-06-16T13:46:00Z", "message": "Rewrite properties handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d176eebb61def78e848e089636b12335d35a2b63", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/d176eebb61def78e848e089636b12335d35a2b63", "committedDate": "2020-06-16T13:46:00Z", "message": "Fix mainProperty application"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7c384c01a5e878255f0b65c1c541359872a7c04", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/f7c384c01a5e878255f0b65c1c541359872a7c04", "committedDate": "2020-06-16T13:46:00Z", "message": "Pass credentials to methods as regular parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a5ff2791d74c147eee0437db0f08422890edcbd", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/4a5ff2791d74c147eee0437db0f08422890edcbd", "committedDate": "2020-06-16T13:46:01Z", "message": "Put auth params first"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2df636df394c713d68b9223d960999d58bd2bc7", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e2df636df394c713d68b9223d960999d58bd2bc7", "committedDate": "2020-06-16T13:46:55Z", "message": "[Sttp] SeparateErrorChannel is true by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3017bb838a59e9c698f4a130bae6f41e01063ba", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b3017bb838a59e9c698f4a130bae6f41e01063ba", "committedDate": "2020-06-16T13:46:55Z", "message": "[Sttp] Simplify generated build.sbt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86150cb88f5bdbb39a5d38fee0fb7fb8456c5861", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/86150cb88f5bdbb39a5d38fee0fb7fb8456c5861", "committedDate": "2020-06-16T13:46:55Z", "message": "[Sttp] Regenerate project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4588362969fa47fa2aa9e126fbb7a36e3af860ce", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/4588362969fa47fa2aa9e126fbb7a36e3af860ce", "committedDate": "2020-06-16T13:46:56Z", "message": "[Sttp] Update default version to 2.2.0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72247e9e7d1993f0147bfd81518bb4629ebcfe50", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/72247e9e7d1993f0147bfd81518bb4629ebcfe50", "committedDate": "2020-06-16T13:38:21Z", "message": "[Sttp] Update default version to 2.2.0"}, "afterCommit": {"oid": "4588362969fa47fa2aa9e126fbb7a36e3af860ce", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/4588362969fa47fa2aa9e126fbb7a36e3af860ce", "committedDate": "2020-06-16T13:46:56Z", "message": "[Sttp] Update default version to 2.2.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b572673b70b7076f67ac072c771f629ffbc57106", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b572673b70b7076f67ac072c771f629ffbc57106", "committedDate": "2020-06-16T14:03:14Z", "message": "Regenerate petstore sample"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTA2NDEy", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#pullrequestreview-434506412", "createdAt": "2020-06-21T14:32:23Z", "commit": {"oid": "b572673b70b7076f67ac072c771f629ffbc57106"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDozMjoyNFrOGmsVQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNTowNToxN1rOGmshRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNTQwOQ==", "bodyText": "This variable can be also configurable, or, at least support cross-compilation with scala 2.12 until EOL.\nFor example, we use projects which required client for both 2.12 and 2.13", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r443225409", "createdAt": "2020-06-21T14:32:24Z", "author": {"login": "chameleon82"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp/build.sbt.mustache", "diffHunk": "@@ -2,26 +2,27 @@ version := \"{{artifactVersion}}\"\n name := \"{{artifactId}}\"\n organization := \"{{groupId}}\"\n \n-scalaVersion := \"2.13.0\"\n-\n-crossScalaVersions := Seq(scalaVersion.value, \"2.12.10\",  \"2.11.12\")\n+scalaVersion := \"2.13.2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b572673b70b7076f67ac072c771f629ffbc57106"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNjE5NA==", "bodyText": "seems like an error as mainPackage is missed here.\nalso when you fix this next scenario will probably failed:\n\"--mainPackage=my.custom.package&--apiPackage=my.custom.api.different.package\"\nbecause Map can have those properties in unwanted order\nCould you please cover this method with unit tests?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r443226194", "createdAt": "2020-06-21T14:40:42Z", "author": {"login": "chameleon82"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ScalaSttpClientCodegen.java", "diffHunk": "@@ -87,4 +207,290 @@ public CodegenOperation fromOperation(String path,\n         op.path = encodePath(path);\n         return op;\n     }\n+\n+    @Override\n+    public CodegenType getTag() {\n+        return CodegenType.CLIENT;\n+    }\n+\n+    @Override\n+    public String escapeReservedWord(String name) {\n+        if (this.reservedWordsMappings().containsKey(name)) {\n+            return this.reservedWordsMappings().get(name);\n+        }\n+        return \"`\" + name + \"`\";\n+    }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {\n+        if (registerNonStandardStatusCodes) {\n+            try {\n+                @SuppressWarnings(\"unchecked\")\n+                Map<String, ArrayList<CodegenOperation>> opsMap = (Map<String, ArrayList<CodegenOperation>>) objs.get(\"operations\");\n+                HashSet<Integer> unknownCodes = new HashSet<Integer>();\n+                for (CodegenOperation operation : opsMap.get(\"operation\")) {\n+                    for (CodegenResponse response : operation.responses) {\n+                        if (\"default\".equals(response.code)) {\n+                            continue;\n+                        }\n+                        try {\n+                            int code = Integer.parseInt(response.code);\n+                            if (code >= 600) {\n+                                unknownCodes.add(code);\n+                            }\n+                        } catch (NumberFormatException e) {\n+                            LOGGER.error(\"Status code is not an integer : response.code\", e);\n+                        }\n+                    }\n+                }\n+                if (!unknownCodes.isEmpty()) {\n+                    additionalProperties.put(\"unknownStatusCodes\", unknownCodes);\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(\"Unable to find operations List\", e);\n+            }\n+        }\n+        return super.postProcessOperationsWithModels(objs, allModels);\n+    }\n+\n+    @Override\n+    public List<CodegenSecurity> fromSecurity(Map<String, SecurityScheme> schemes) {\n+        final List<CodegenSecurity> codegenSecurities = super.fromSecurity(schemes);\n+        if (!removeOAuthSecurities) {\n+            return codegenSecurities;\n+        }\n+\n+        // Remove OAuth securities\n+        Iterator<CodegenSecurity> it = codegenSecurities.iterator();\n+        while (it.hasNext()) {\n+            final CodegenSecurity security = it.next();\n+            if (security.isOAuth) {\n+                it.remove();\n+            }\n+        }\n+        // Adapt 'hasMore'\n+        it = codegenSecurities.iterator();\n+        while (it.hasNext()) {\n+            final CodegenSecurity security = it.next();\n+            security.hasMore = it.hasNext();\n+        }\n+\n+        if (codegenSecurities.isEmpty()) {\n+            return null;\n+        }\n+        return codegenSecurities;\n+    }\n+\n+    @Override\n+    public String toParamName(String name) {\n+        return formatIdentifier(name, false);\n+    }\n+\n+    @Override\n+    public String toEnumName(CodegenProperty property) {\n+        return formatIdentifier(property.baseName, true);\n+    }\n+\n+    @Override\n+    public String toDefaultValue(Schema p) {\n+        if (p.getRequired() != null && p.getRequired().contains(p.getName())) {\n+            return \"None\";\n+        }\n+\n+        if (ModelUtils.isBooleanSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isDateSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isDateTimeSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isNumberSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isIntegerSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isMapSchema(p)) {\n+            String inner = getSchemaType(getAdditionalProperties(p));\n+            return \"Map[String, \" + inner + \"].empty \";\n+        } else if (ModelUtils.isArraySchema(p)) {\n+            ArraySchema ap = (ArraySchema) p;\n+            String inner = getSchemaType(ap.getItems());\n+            if (ModelUtils.isSet(ap)) {\n+                return \"Set[\" + inner + \"].empty \";\n+            }\n+            return \"Seq[\" + inner + \"].empty \";\n+        } else if (ModelUtils.isStringSchema(p)) {\n+            return null;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private static abstract class Property<T> {\n+        final String name;\n+        final String description;\n+        final T defaultValue;\n+\n+        private Property(String name, String description, T defaultValue) {\n+            this.name = name;\n+            this.description = description;\n+            this.defaultValue = defaultValue;\n+        }\n+\n+        public abstract CliOption toCliOption();\n+\n+        public abstract void updateAdditionalProperties(Map<String, Object> additionalProperties);\n+\n+        public abstract T getValue(Map<String, Object> additionalProperties);\n+\n+        public void setValue(Map<String, Object> additionalProperties, T value) {\n+            additionalProperties.put(name, value);\n+        }\n+    }\n+\n+    private static class StringProperty extends Property<String> {\n+        private StringProperty(String name, String description, String defaultValue) {\n+            super(name, description, defaultValue);\n+        }\n+\n+        @Override\n+        public CliOption toCliOption() {\n+            return CliOption.newString(name, description).defaultValue(defaultValue);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            if (!additionalProperties.containsKey(name)) {\n+                additionalProperties.put(name, defaultValue);\n+            }\n+        }\n+\n+        @Override\n+        public String getValue(Map<String, Object> additionalProperties) {\n+            return additionalProperties.getOrDefault(name, defaultValue).toString();\n+        }\n+    }\n+\n+    private static class BooleanProperty extends Property<Boolean> {\n+        private BooleanProperty(String name, String description, Boolean defaultValue) {\n+            super(name, description, defaultValue);\n+        }\n+\n+        @Override\n+        public CliOption toCliOption() {\n+            return CliOption.newBoolean(name, description, defaultValue);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            Boolean value = getValue(additionalProperties);\n+            additionalProperties.put(name, value);\n+        }\n+\n+        @Override\n+        public Boolean getValue(Map<String, Object> additionalProperties) {\n+            return Boolean.valueOf(additionalProperties.getOrDefault(name, defaultValue.toString()).toString());\n+        }\n+    }\n+\n+    private static class JsonLibraryProperty extends StringProperty {\n+        private static final String JSON4S = \"json4s\";\n+        private static final String CIRCE = \"circe\";\n+\n+        private JsonLibraryProperty() {\n+            super(\"jsonLibrary\", \"Json library to use. Possible values are: json4s and circe.\", JSON4S);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            String value = getValue(additionalProperties);\n+            if (value.equals(CIRCE) || value.equals(JSON4S)) {\n+                additionalProperties.put(CIRCE, value.equals(CIRCE));\n+                additionalProperties.put(JSON4S, value.equals(JSON4S));\n+            } else {\n+                IllegalArgumentException exception =\n+                        new IllegalArgumentException(\"Invalid json library: \" + value + \". Must be \" + CIRCE + \" \" +\n+                                \"or \" + JSON4S);\n+                throw exception;\n+            }\n+        }\n+    }\n+\n+    private static class MainPackageProperty extends StringProperty {\n+\n+        private MainPackageProperty() {\n+            super(\"mainPackage\", \"Top-level package name, which defines 'apiPackage', 'modelPackage', \" +\n+                    \"'invokerPackage'\", DEFAULT_PACKAGE_NAME);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            if (additionalProperties.containsKey(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b572673b70b7076f67ac072c771f629ffbc57106"}, "originalPosition": 412}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNjMzOA==", "bodyText": "some of those imports and mappings already exists in AbstractScalaCodegen. Is it possible to reuse them instead of overwrite with the same values?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r443226338", "createdAt": "2020-06-21T14:42:11Z", "author": {"login": "chameleon82"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ScalaSttpClientCodegen.java", "diffHunk": "@@ -16,50 +16,170 @@\n \n package org.openapitools.codegen.languages;\n \n+import com.samskivert.mustache.Mustache;\n+import com.samskivert.mustache.Template;\n import io.swagger.v3.oas.models.Operation;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n import io.swagger.v3.oas.models.servers.Server;\n-import org.openapitools.codegen.CodegenConfig;\n-import org.openapitools.codegen.CodegenOperation;\n-import org.openapitools.codegen.SupportingFile;\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n import org.openapitools.codegen.meta.GeneratorMetadata;\n import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.meta.features.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.File;\n-import java.util.List;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.*;\n+\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+\n+public class ScalaSttpClientCodegen extends AbstractScalaCodegen implements CodegenConfig {\n+    private static final StringProperty STTP_CLIENT_VERSION = new StringProperty(\"sttpClientVersion\", \"The version of \" +\n+            \"sttp client\", \"2.2.0\");\n+    private static final BooleanProperty USE_SEPARATE_ERROR_CHANNEL = new BooleanProperty(\"separateErrorChannel\",\n+            \"Whether to return response as \" +\n+                    \"F[Either[ResponseError[ErrorType], ReturnType]]] or to flatten \" +\n+                    \"response's error raising them through enclosing monad (F[ReturnType]).\", true);\n+    private static final StringProperty JODA_TIME_VERSION = new StringProperty(\"jodaTimeVersion\", \"The version of \" +\n+            \"joda-time library\", \"2.10.6\");\n+    private static final StringProperty JSON4S_VERSION = new StringProperty(\"json4sVersion\", \"The version of json4s \" +\n+            \"library\", \"3.6.8\");\n+    private static final StringProperty CIRCE_VERSION = new StringProperty(\"circeVersion\", \"The version of circe \" +\n+            \"library\", \"0.13.0\");\n+    private static final JsonLibraryProperty JSON_LIBRARY_PROPERTY = new JsonLibraryProperty();\n+\n+    private static final String DEFAULT_PACKAGE_NAME = \"org.openapitools.client\";\n+    private static final MainPackageProperty MAIN_PACKAGE = new MainPackageProperty();\n+    private static final StringProperty MODEL_PACKAGE = new StringProperty(CodegenConstants.MODEL_PACKAGE,\n+            CodegenConstants.MODEL_PACKAGE_DESC, DEFAULT_PACKAGE_NAME + \".model\");\n+    private static final StringProperty INVOKER_PACKAGE = new StringProperty(CodegenConstants.INVOKER_PACKAGE,\n+            CodegenConstants.MODEL_PACKAGE_DESC, DEFAULT_PACKAGE_NAME + \".core\");\n+    private static final StringProperty API_PACKAGE = new StringProperty(CodegenConstants.API_PACKAGE,\n+            CodegenConstants.API_PACKAGE_DESC, DEFAULT_PACKAGE_NAME + \".api\");\n+\n+    private static final List<Property> properties = Arrays.asList(STTP_CLIENT_VERSION, USE_SEPARATE_ERROR_CHANNEL,\n+            JODA_TIME_VERSION, JSON4S_VERSION, CIRCE_VERSION, JSON_LIBRARY_PROPERTY,MAIN_PACKAGE, API_PACKAGE,\n+            MODEL_PACKAGE, INVOKER_PACKAGE);\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(ScalaSttpClientCodegen.class);\n+\n+    protected String mainPackage = \"org.openapitools.client\";\n+    protected String groupId = \"org.openapitools\";\n+    protected String artifactId = \"openapi-client\";\n+    protected String artifactVersion = \"1.0.0\";\n+    protected boolean registerNonStandardStatusCodes = true;\n+    protected boolean renderJavadoc = true;\n+    protected boolean removeOAuthSecurities = true;\n \n-public class ScalaSttpClientCodegen extends ScalaAkkaClientCodegen implements CodegenConfig {\n     public ScalaSttpClientCodegen() {\n         super();\n         generatorMetadata = GeneratorMetadata.newBuilder(generatorMetadata)\n                 .stability(Stability.BETA)\n                 .build();\n \n-        embeddedTemplateDir = templateDir = \"scala-sttp\";\n+        modifyFeatureSet(features -> features\n+                .includeDocumentationFeatures(DocumentationFeature.Readme)\n+                .wireFormatFeatures(EnumSet.of(WireFormatFeature.JSON, WireFormatFeature.XML, WireFormatFeature.Custom))\n+                .securityFeatures(EnumSet.of(\n+                        SecurityFeature.BasicAuth,\n+                        SecurityFeature.ApiKey,\n+                        SecurityFeature.BearerToken\n+                ))\n+                .excludeGlobalFeatures(\n+                        GlobalFeature.XMLStructureDefinitions,\n+                        GlobalFeature.Callbacks,\n+                        GlobalFeature.LinkObjects,\n+                        GlobalFeature.ParameterStyling\n+                )\n+                .excludeSchemaSupportFeatures(\n+                        SchemaSupportFeature.Polymorphism\n+                )\n+                .excludeParameterFeatures(\n+                        ParameterFeature.Cookie\n+                )\n+                .includeClientModificationFeatures(\n+                        ClientModificationFeature.BasePath,\n+                        ClientModificationFeature.UserAgent\n+                )\n+        );\n+\n         outputFolder = \"generated-code/scala-sttp\";\n+        modelTemplateFiles.put(\"model.mustache\", \".scala\");\n+        apiTemplateFiles.put(\"api.mustache\", \".scala\");\n+        embeddedTemplateDir = templateDir = \"scala-sttp\";\n+        apiPackage = mainPackage + \".api\";\n+        modelPackage = mainPackage + \".model\";\n+        invokerPackage = mainPackage + \".core\";\n+\n+        setReservedWordsLowerCase(\n+                Arrays.asList(\n+                        \"abstract\", \"case\", \"catch\", \"class\", \"def\", \"do\", \"else\", \"extends\",\n+                        \"false\", \"final\", \"finally\", \"for\", \"forSome\", \"if\", \"implicit\",\n+                        \"import\", \"lazy\", \"match\", \"new\", \"null\", \"object\", \"override\", \"package\",\n+                        \"private\", \"protected\", \"return\", \"sealed\", \"super\", \"this\", \"throw\",\n+                        \"trait\", \"try\", \"true\", \"type\", \"val\", \"var\", \"while\", \"with\", \"yield\")\n+        );\n+\n+        additionalProperties.put(CodegenConstants.GROUP_ID, groupId);\n+        additionalProperties.put(CodegenConstants.ARTIFACT_ID, artifactId);\n+        additionalProperties.put(CodegenConstants.ARTIFACT_VERSION, artifactVersion);\n+        if (renderJavadoc) {\n+            additionalProperties.put(\"javadocRenderer\", new JavadocLambda());\n+        }\n+        additionalProperties.put(\"fnCapitalize\", new CapitalizeLambda());\n+        additionalProperties.put(\"fnCamelize\", new CamelizeLambda(false));\n+        additionalProperties.put(\"fnEnumEntry\", new EnumEntryLambda());\n+\n+        importMapping.remove(\"Seq\");\n+        importMapping.remove(\"List\");\n+        importMapping.remove(\"Set\");\n+        importMapping.remove(\"Map\");\n+\n+        typeMapping = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b572673b70b7076f67ac072c771f629ffbc57106"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNzQxMg==", "bodyText": "Could we have companion objects for api classes?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r443227412", "createdAt": "2020-06-21T14:53:12Z", "author": {"login": "chameleon82"}, "path": "samples/client/petstore/scala-sttp/src/main/scala/org/openapitools/client/api/PetApi.scala", "diffHunk": "@@ -14,20 +14,11 @@ package org.openapitools.client.api\n import org.openapitools.client.model.ApiResponse\n import java.io.File\n import org.openapitools.client.model.Pet\n-import org.openapitools.client.core._\n-import alias._\n+import org.openapitools.client.core.JsonSupport._\n import sttp.client._\n import sttp.model.Method\n \n-object PetApi {\n-\n-  def apply(baseUrl: String = \"http://petstore.swagger.io/v2\")(implicit serializer: SttpSerializer) = new PetApi(baseUrl)\n-}\n-\n-class PetApi(baseUrl: String)(implicit serializer: SttpSerializer) {\n-\n-  import Helpers._\n-  import serializer._\n+class PetApi(baseUrl: String = \"http://petstore.swagger.io/v2\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b572673b70b7076f67ac072c771f629ffbc57106"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNzkyNA==", "bodyText": "Could we have kinda helper to get final results? Otherwise it could lead code duplication in applications or be implemented there", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r443227924", "createdAt": "2020-06-21T14:58:48Z", "author": {"login": "chameleon82"}, "path": "samples/client/petstore/scala-sttp/src/main/scala/org/openapitools/client/core/ApiInvoker.scala", "diffHunk": "@@ -1,60 +0,0 @@\n-/**\n- * OpenAPI Petstore\n- * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.\n- *\n- * The version of the OpenAPI document: 1.0.0\n- * \n- *\n- * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n- * https://openapi-generator.tech\n- * Do not edit the class manually.\n- */\n-package org.openapitools.client.core\n-\n-import org.json4s._\n-import sttp.client._\n-import sttp.model.StatusCode\n-import org.openapitools.client.api.EnumsSerializers\n-import sttp.client.json4s.SttpJson4sApi\n-import sttp.client.monad.MonadError\n-\n-class SttpSerializer(implicit val format: Formats = DefaultFormats ++ EnumsSerializers.all ++ Serializers.all,\n-                     implicit val serialization: org.json4s.Serialization = org.json4s.jackson.Serialization) extends SttpJson4sApi\n-\n-class HttpException(val statusCode: StatusCode, val statusText: String, val message: String) extends Exception(s\"[$statusCode] $statusText: $message\")\n-\n-object Helpers {\n-\n-  // Helper to handle Optional header parameters\n-  implicit class optionalParams(val request: RequestT[Identity, Either[String, String], Nothing]) extends AnyVal {\n-    def header( header: String, optValue: Option[Any]): RequestT[Identity, Either[String, String], Nothing] = {\n-      optValue.map( value => request.header(header, value.toString)).getOrElse(request)\n-    }\n-  }\n-\n-}\n-\n-object ApiInvoker {\n-\n-  /**\n-    * Allows request execution without calling apiInvoker.execute(request)\n-    * request.result can be used to get a monad wrapped content.\n-    *\n-    * @param request the apiRequest to be executed\n-    */\n-  implicit class ApiRequestImprovements[R[_], T](request: RequestT[Identity, Either[ResponseError[Exception], T], Nothing]) {\n-\n-    def result(implicit backend: SttpBackend[R, Nothing, Nothing]): R[T] = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b572673b70b7076f67ac072c771f629ffbc57106"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyODQ4NA==", "bodyText": "Looks good. Could you help to separate api errors as exceptions as described here softwaremill/sttp-model#5 ? The main idea is to split application exceptions (ideally with models) from transport level exceptions by using expected status codes.\nThanks", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r443228484", "createdAt": "2020-06-21T15:05:17Z", "author": {"login": "chameleon82"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp/api.mustache", "diffHunk": "@@ -4,42 +4,35 @@ package {{package}}\n {{#imports}}\n import {{import}}\n {{/imports}}\n-import {{invokerPackage}}._\n-import alias._\n+import {{invokerPackage}}.JsonSupport._\n import sttp.client._\n import sttp.model.Method\n \n {{#operations}}\n-object {{classname}} {\n-\n-  def apply(baseUrl: String = \"{{{basePath}}}\")(implicit serializer: SttpSerializer) = new {{classname}}(baseUrl)\n-}\n-\n-class {{classname}}(baseUrl: String)(implicit serializer: SttpSerializer) {\n-\n-  import Helpers._\n-  import serializer._\n+class {{classname}}(baseUrl: String = \"{{{basePath}}}\") {\n \n {{#operation}}\n {{#javadocRenderer}}\n {{>javadoc}}\n {{/javadocRenderer}}\n-  def {{operationId}}({{>methodParameters}}): ApiRequestT[{{>operationReturnType}}] =\n+  def {{operationId}}({{>methodParameters}}): Request[{{#separateErrorChannel}}Either[ResponseError[Exception], {{>operationReturnType}}]{{/separateErrorChannel}}{{^separateErrorChannel}}{{>operationReturnType}}{{/separateErrorChannel}}, Nothing] =\n     basicRequest\n       .method(Method.{{httpMethod.toUpperCase}}, uri\"$baseUrl{{{path}}}{{#queryParams.0}}?{{#queryParams}}{{baseName}}=${{{paramName}}}{{^-last}}&{{/-last}}{{/queryParams}}{{/queryParams.0}}{{#isApiKey}}{{#isKeyInQuery}}{{^queryParams.0}}?{{/queryParams.0}}{{#queryParams.0}}&{{/queryParams.0}}{{keyParamName}}=${apiKey.value}&{{/isKeyInQuery}}{{/isApiKey}}\")\n       .contentType({{#consumes.0}}\"{{{mediaType}}}\"{{/consumes.0}}{{^consumes}}\"application/json\"{{/consumes}}){{#headerParams}}\n       .header({{>paramCreation}}){{/headerParams}}{{#authMethods}}{{#isBasic}}{{#isBasicBasic}}\n-      .auth.withCredentials(basicAuth.user, basicAuth.password){{/isBasicBasic}}{{#isBasicBearer}}\n-      .auth.bearer(bearerToken.token){{/isBasicBearer}}{{/isBasic}}{{#isApiKey}}{{#isKeyInHeader}}\n-      .header(\"{{keyParamName}}\", apiKey.value){{/isKeyInHeader}}{{#isKeyInCookie}}\n-      .cookie(\"{{keyParamName}}\", apiKey.value){{/isKeyInCookie}}{{/isApiKey}}{{/authMethods}}{{#formParams.0}}\n+      .auth.withCredentials(username, password){{/isBasicBasic}}{{#isBasicBearer}}\n+      .auth.bearer(bearerToken){{/isBasicBearer}}{{/isBasic}}{{#isApiKey}}{{#isKeyInHeader}}\n+      .header(\"{{keyParamName}}\", apiKey){{/isKeyInHeader}}{{#isKeyInCookie}}\n+      .cookie(\"{{keyParamName}}\", apiKey){{/isKeyInCookie}}{{/isApiKey}}{{/authMethods}}{{#formParams.0}}{{^isMultipart}}\n       .body(Map({{#formParams}}\n-        {{>paramFormCreation}},{{/formParams}}\n-      )){{/formParams.0}}{{#bodyParam}}\n+        {{>paramFormCreation}}{{#hasMore}}, {{/hasMore}}{{/formParams}}\n+      )){{/isMultipart}}{{#isMultipart}}\n+      .multipartBody(Seq({{#formParams}}\n+        {{>paramMultipartCreation}}{{#hasMore}}, {{/hasMore}}{{/formParams}}\n+      ).flatten){{/isMultipart}}{{/formParams.0}}{{#bodyParam}}\n       .body({{paramName}}){{/bodyParam}}\n-      .response(asJson[{{>operationReturnType}}])\n+      .response({{#separateErrorChannel}}asJson{{/separateErrorChannel}}{{^separateErrorChannel}}asJsonAlwaysUnsafe{{/separateErrorChannel}}[{{>operationReturnType}}])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b572673b70b7076f67ac072c771f629ffbc57106"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91dd9b036ebc6b53efacdc32d7c16a89ccb342f6", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/91dd9b036ebc6b53efacdc32d7c16a89ccb342f6", "committedDate": "2020-06-23T06:15:21Z", "message": "Restore cross-compilation to scala 2.12"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9242bc4b661686d554786e65a671deb41ae3a4d7", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/9242bc4b661686d554786e65a671deb41ae3a4d7", "committedDate": "2020-06-23T06:30:30Z", "message": "Restore syntax with companion object for api definitions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de82caf10a7b2192a179ebb3354ded82425f3751", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/de82caf10a7b2192a179ebb3354ded82425f3751", "committedDate": "2020-06-23T06:43:03Z", "message": "Remove specifying reservedWords as it was already specified in upper class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d868eda1df48acccb0b420cec437068d6ade472c", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/d868eda1df48acccb0b420cec437068d6ade472c", "committedDate": "2020-06-23T08:32:43Z", "message": "Refactor mainPackageProperty and add tests for it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjkzNDI4", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#pullrequestreview-436293428", "createdAt": "2020-06-24T03:05:48Z", "commit": {"oid": "d868eda1df48acccb0b420cec437068d6ade472c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMzowNTo0OFrOGoBY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMzowNTo0OFrOGoBY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxOTAwNw==", "bodyText": "This file/version might be the cause of CI build failed with next error:\nhttps://app.circleci.com/pipelines/github/OpenAPITools/openapi-generator/3736/workflows/1d16cd64-dd72-4f2b-8a68-92adfbdb29b7/jobs/17104/steps\n[warn] \t::::::::::::::::::::::::::::::::::::::::::::::\n[warn] \t::          UNRESOLVED DEPENDENCIES         ::\n[warn] \t::::::::::::::::::::::::::::::::::::::::::::::\n[warn] \t:: org.scala-sbt#compiler-bridge_2.13;1.2.3: not found\n[warn] \t::::::::::::::::::::::::::::::::::::::::::::::\n[error] ## Exception when compiling 14 sources to /home/circleci/OpenAPITools/openapi-generator/samples/client/petstore/scala-sttp/target/scala-2.13/classes\n[error] The compiler bridge sources org.scala-sbt:compiler-bridge_2.13:1.2.3:compile could not be retrieved.\n[error]  \n[error] \tNote: Unresolved dependencies path:\n[error] \t\torg.scala-sbt:compiler-bridge_2.13:1.2.3\n[error] \t\t  +- org.scala-sbt.temp:temp-module-52f238aede5a1d8d7a484c2bec27a144810e2ac0:1.2.3\n\nCould you try sbt.version=1.2.8? Should we even specify this version explicitly?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r444619007", "createdAt": "2020-06-24T03:05:48Z", "author": {"login": "chameleon82"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp/project/build.properties.mustache", "diffHunk": "@@ -0,0 +1 @@\n+sbt.version=1.2.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d868eda1df48acccb0b420cec437068d6ade472c"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDAyNTIy", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#pullrequestreview-438002522", "createdAt": "2020-06-26T04:16:09Z", "commit": {"oid": "d868eda1df48acccb0b420cec437068d6ade472c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDoxNjowOVrOGpTI-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjowNzozNFrOGpUyTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk1ODM5Mw==", "bodyText": "oh that's nice\n0.12+ stops supporting scala 2.11", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r445958393", "createdAt": "2020-06-26T04:16:09Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ScalaSttpClientCodegen.java", "diffHunk": "@@ -16,50 +16,154 @@\n \n package org.openapitools.codegen.languages;\n \n+import com.samskivert.mustache.Mustache;\n+import com.samskivert.mustache.Template;\n import io.swagger.v3.oas.models.Operation;\n+import io.swagger.v3.oas.models.media.ArraySchema;\n+import io.swagger.v3.oas.models.media.Schema;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n import io.swagger.v3.oas.models.servers.Server;\n-import org.openapitools.codegen.CodegenConfig;\n-import org.openapitools.codegen.CodegenOperation;\n-import org.openapitools.codegen.SupportingFile;\n+import org.apache.commons.lang3.StringUtils;\n+import org.openapitools.codegen.*;\n import org.openapitools.codegen.meta.GeneratorMetadata;\n import org.openapitools.codegen.meta.Stability;\n+import org.openapitools.codegen.meta.features.*;\n+import org.openapitools.codegen.utils.ModelUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.File;\n-import java.util.List;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.*;\n+\n+import static org.openapitools.codegen.utils.StringUtils.camelize;\n+\n+public class ScalaSttpClientCodegen extends AbstractScalaCodegen implements CodegenConfig {\n+    private static final StringProperty STTP_CLIENT_VERSION = new StringProperty(\"sttpClientVersion\", \"The version of \" +\n+            \"sttp client\", \"2.2.0\");\n+    private static final BooleanProperty USE_SEPARATE_ERROR_CHANNEL = new BooleanProperty(\"separateErrorChannel\",\n+            \"Whether to return response as \" +\n+                    \"F[Either[ResponseError[ErrorType], ReturnType]]] or to flatten \" +\n+                    \"response's error raising them through enclosing monad (F[ReturnType]).\", true);\n+    private static final StringProperty JODA_TIME_VERSION = new StringProperty(\"jodaTimeVersion\", \"The version of \" +\n+            \"joda-time library\", \"2.10.6\");\n+    private static final StringProperty JSON4S_VERSION = new StringProperty(\"json4sVersion\", \"The version of json4s \" +\n+            \"library\", \"3.6.8\");\n+    private static final StringProperty CIRCE_VERSION = new StringProperty(\"circeVersion\", \"The version of circe \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d868eda1df48acccb0b420cec437068d6ade472c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2NjkxMg==", "bodyText": "how about exposing other http metadata inside errors, like status / status code, headers (some APIs expose debug/tracing information), hostname, etc?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r445966912", "createdAt": "2020-06-26T04:55:29Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp/api.mustache", "diffHunk": "@@ -4,42 +4,35 @@ package {{package}}\n {{#imports}}\n import {{import}}\n {{/imports}}\n-import {{invokerPackage}}._\n-import alias._\n+import {{invokerPackage}}.JsonSupport._\n import sttp.client._\n import sttp.model.Method\n \n {{#operations}}\n-object {{classname}} {\n-\n-  def apply(baseUrl: String = \"{{{basePath}}}\")(implicit serializer: SttpSerializer) = new {{classname}}(baseUrl)\n-}\n-\n-class {{classname}}(baseUrl: String)(implicit serializer: SttpSerializer) {\n-\n-  import Helpers._\n-  import serializer._\n+class {{classname}}(baseUrl: String = \"{{{basePath}}}\") {\n \n {{#operation}}\n {{#javadocRenderer}}\n {{>javadoc}}\n {{/javadocRenderer}}\n-  def {{operationId}}({{>methodParameters}}): ApiRequestT[{{>operationReturnType}}] =\n+  def {{operationId}}({{>methodParameters}}): Request[{{#separateErrorChannel}}Either[ResponseError[Exception], {{>operationReturnType}}]{{/separateErrorChannel}}{{^separateErrorChannel}}{{>operationReturnType}}{{/separateErrorChannel}}, Nothing] =\n     basicRequest\n       .method(Method.{{httpMethod.toUpperCase}}, uri\"$baseUrl{{{path}}}{{#queryParams.0}}?{{#queryParams}}{{baseName}}=${{{paramName}}}{{^-last}}&{{/-last}}{{/queryParams}}{{/queryParams.0}}{{#isApiKey}}{{#isKeyInQuery}}{{^queryParams.0}}?{{/queryParams.0}}{{#queryParams.0}}&{{/queryParams.0}}{{keyParamName}}=${apiKey.value}&{{/isKeyInQuery}}{{/isApiKey}}\")\n       .contentType({{#consumes.0}}\"{{{mediaType}}}\"{{/consumes.0}}{{^consumes}}\"application/json\"{{/consumes}}){{#headerParams}}\n       .header({{>paramCreation}}){{/headerParams}}{{#authMethods}}{{#isBasic}}{{#isBasicBasic}}\n-      .auth.withCredentials(basicAuth.user, basicAuth.password){{/isBasicBasic}}{{#isBasicBearer}}\n-      .auth.bearer(bearerToken.token){{/isBasicBearer}}{{/isBasic}}{{#isApiKey}}{{#isKeyInHeader}}\n-      .header(\"{{keyParamName}}\", apiKey.value){{/isKeyInHeader}}{{#isKeyInCookie}}\n-      .cookie(\"{{keyParamName}}\", apiKey.value){{/isKeyInCookie}}{{/isApiKey}}{{/authMethods}}{{#formParams.0}}\n+      .auth.withCredentials(username, password){{/isBasicBasic}}{{#isBasicBearer}}\n+      .auth.bearer(bearerToken){{/isBasicBearer}}{{/isBasic}}{{#isApiKey}}{{#isKeyInHeader}}\n+      .header(\"{{keyParamName}}\", apiKey){{/isKeyInHeader}}{{#isKeyInCookie}}\n+      .cookie(\"{{keyParamName}}\", apiKey){{/isKeyInCookie}}{{/isApiKey}}{{/authMethods}}{{#formParams.0}}{{^isMultipart}}\n       .body(Map({{#formParams}}\n-        {{>paramFormCreation}},{{/formParams}}\n-      )){{/formParams.0}}{{#bodyParam}}\n+        {{>paramFormCreation}}{{#hasMore}}, {{/hasMore}}{{/formParams}}\n+      )){{/isMultipart}}{{#isMultipart}}\n+      .multipartBody(Seq({{#formParams}}\n+        {{>paramMultipartCreation}}{{#hasMore}}, {{/hasMore}}{{/formParams}}\n+      ).flatten){{/isMultipart}}{{/formParams.0}}{{#bodyParam}}\n       .body({{paramName}}){{/bodyParam}}\n-      .response(asJson[{{>operationReturnType}}])\n+      .response({{#separateErrorChannel}}asJson{{/separateErrorChannel}}{{^separateErrorChannel}}asJsonAlwaysUnsafe{{/separateErrorChannel}}[{{>operationReturnType}}])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyODQ4NA=="}, "originalCommit": {"oid": "b572673b70b7076f67ac072c771f629ffbc57106"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2NzIwNQ==", "bodyText": "another question (and I'm not sure whether OpenAPI Spec supports it) to return same info for correct (V) responses", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r445967205", "createdAt": "2020-06-26T04:56:42Z", "author": {"login": "eugeniyk"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp/api.mustache", "diffHunk": "@@ -4,42 +4,35 @@ package {{package}}\n {{#imports}}\n import {{import}}\n {{/imports}}\n-import {{invokerPackage}}._\n-import alias._\n+import {{invokerPackage}}.JsonSupport._\n import sttp.client._\n import sttp.model.Method\n \n {{#operations}}\n-object {{classname}} {\n-\n-  def apply(baseUrl: String = \"{{{basePath}}}\")(implicit serializer: SttpSerializer) = new {{classname}}(baseUrl)\n-}\n-\n-class {{classname}}(baseUrl: String)(implicit serializer: SttpSerializer) {\n-\n-  import Helpers._\n-  import serializer._\n+class {{classname}}(baseUrl: String = \"{{{basePath}}}\") {\n \n {{#operation}}\n {{#javadocRenderer}}\n {{>javadoc}}\n {{/javadocRenderer}}\n-  def {{operationId}}({{>methodParameters}}): ApiRequestT[{{>operationReturnType}}] =\n+  def {{operationId}}({{>methodParameters}}): Request[{{#separateErrorChannel}}Either[ResponseError[Exception], {{>operationReturnType}}]{{/separateErrorChannel}}{{^separateErrorChannel}}{{>operationReturnType}}{{/separateErrorChannel}}, Nothing] =\n     basicRequest\n       .method(Method.{{httpMethod.toUpperCase}}, uri\"$baseUrl{{{path}}}{{#queryParams.0}}?{{#queryParams}}{{baseName}}=${{{paramName}}}{{^-last}}&{{/-last}}{{/queryParams}}{{/queryParams.0}}{{#isApiKey}}{{#isKeyInQuery}}{{^queryParams.0}}?{{/queryParams.0}}{{#queryParams.0}}&{{/queryParams.0}}{{keyParamName}}=${apiKey.value}&{{/isKeyInQuery}}{{/isApiKey}}\")\n       .contentType({{#consumes.0}}\"{{{mediaType}}}\"{{/consumes.0}}{{^consumes}}\"application/json\"{{/consumes}}){{#headerParams}}\n       .header({{>paramCreation}}){{/headerParams}}{{#authMethods}}{{#isBasic}}{{#isBasicBasic}}\n-      .auth.withCredentials(basicAuth.user, basicAuth.password){{/isBasicBasic}}{{#isBasicBearer}}\n-      .auth.bearer(bearerToken.token){{/isBasicBearer}}{{/isBasic}}{{#isApiKey}}{{#isKeyInHeader}}\n-      .header(\"{{keyParamName}}\", apiKey.value){{/isKeyInHeader}}{{#isKeyInCookie}}\n-      .cookie(\"{{keyParamName}}\", apiKey.value){{/isKeyInCookie}}{{/isApiKey}}{{/authMethods}}{{#formParams.0}}\n+      .auth.withCredentials(username, password){{/isBasicBasic}}{{#isBasicBearer}}\n+      .auth.bearer(bearerToken){{/isBasicBearer}}{{/isBasic}}{{#isApiKey}}{{#isKeyInHeader}}\n+      .header(\"{{keyParamName}}\", apiKey){{/isKeyInHeader}}{{#isKeyInCookie}}\n+      .cookie(\"{{keyParamName}}\", apiKey){{/isKeyInCookie}}{{/isApiKey}}{{/authMethods}}{{#formParams.0}}{{^isMultipart}}\n       .body(Map({{#formParams}}\n-        {{>paramFormCreation}},{{/formParams}}\n-      )){{/formParams.0}}{{#bodyParam}}\n+        {{>paramFormCreation}}{{#hasMore}}, {{/hasMore}}{{/formParams}}\n+      )){{/isMultipart}}{{#isMultipart}}\n+      .multipartBody(Seq({{#formParams}}\n+        {{>paramMultipartCreation}}{{#hasMore}}, {{/hasMore}}{{/formParams}}\n+      ).flatten){{/isMultipart}}{{/formParams.0}}{{#bodyParam}}\n       .body({{paramName}}){{/bodyParam}}\n-      .response(asJson[{{>operationReturnType}}])\n+      .response({{#separateErrorChannel}}asJson{{/separateErrorChannel}}{{^separateErrorChannel}}asJsonAlwaysUnsafe{{/separateErrorChannel}}[{{>operationReturnType}}])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyODQ4NA=="}, "originalCommit": {"oid": "b572673b70b7076f67ac072c771f629ffbc57106"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NTM1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            crossScalaVersions := Seq(scalaVersion.value, \"2.12.10\")\n          \n          \n            \n            crossScalaVersions := Seq(scalaVersion.value, \"2.12.11\")", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r445985357", "createdAt": "2020-06-26T06:07:34Z", "author": {"login": "eugeniyk"}, "path": "samples/client/petstore/scala-sttp/build.sbt", "diffHunk": "@@ -2,23 +2,17 @@ version := \"1.0.0\"\n name := \"scala-sttp-petstore\"\n organization := \"org.openapitools\"\n \n-scalaVersion := \"2.13.0\"\n-\n-crossScalaVersions := Seq(scalaVersion.value, \"2.12.10\",  \"2.11.12\")\n+scalaVersion := \"2.13.2\"\n+crossScalaVersions := Seq(scalaVersion.value, \"2.12.10\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d868eda1df48acccb0b420cec437068d6ade472c"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f9cd3e9657c748e0fa8c78c7aaab25fdcef7ea3", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/1f9cd3e9657c748e0fa8c78c7aaab25fdcef7ea3", "committedDate": "2020-06-29T11:04:05Z", "message": "Update samples/client/petstore/scala-sttp/build.sbt\n\nCo-authored-by: eugeniyk <keatrance@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6647d287f304f4b41bed5e19918ee8e5a415909", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a6647d287f304f4b41bed5e19918ee8e5a415909", "committedDate": "2020-06-29T11:09:57Z", "message": "Update sbt to 1.3.12"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f5a98f036a846ba113dba13e9b8cb839b9a6f81", "author": {"user": {"login": "ghostbuster91", "name": "Kasper Kondzielski"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/8f5a98f036a846ba113dba13e9b8cb839b9a6f81", "committedDate": "2020-06-29T13:05:07Z", "message": "Run bin/utils/ensure-up-to-date and commit changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MzA1OTM2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#pullrequestreview-439305936", "createdAt": "2020-06-29T16:21:31Z", "commit": {"oid": "8f5a98f036a846ba113dba13e9b8cb839b9a6f81"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDgzNjIw", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#pullrequestreview-440483620", "createdAt": "2020-07-01T01:10:03Z", "commit": {"oid": "8f5a98f036a846ba113dba13e9b8cb839b9a6f81"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMToxMDowM1rOGrTgzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMToxMjo1OVrOGrTj7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2MTY0NQ==", "bodyText": "Note that at we have well-tested lambdas in the org.openapitools.codegen.templating.mustache package which handle camel case, title case, uppercase, lowercase, etc. We should probably move these to use the tested lambdas at some point.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r448061645", "createdAt": "2020-07-01T01:10:03Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/ScalaSttpClientCodegen.java", "diffHunk": "@@ -87,4 +191,300 @@ public CodegenOperation fromOperation(String path,\n         op.path = encodePath(path);\n         return op;\n     }\n+\n+    @Override\n+    public CodegenType getTag() {\n+        return CodegenType.CLIENT;\n+    }\n+\n+    @Override\n+    public String escapeReservedWord(String name) {\n+        if (this.reservedWordsMappings().containsKey(name)) {\n+            return this.reservedWordsMappings().get(name);\n+        }\n+        return \"`\" + name + \"`\";\n+    }\n+\n+    @Override\n+    public Map<String, Object> postProcessOperationsWithModels(Map<String, Object> objs, List<Object> allModels) {\n+        if (registerNonStandardStatusCodes) {\n+            try {\n+                @SuppressWarnings(\"unchecked\")\n+                Map<String, ArrayList<CodegenOperation>> opsMap = (Map<String, ArrayList<CodegenOperation>>) objs.get(\"operations\");\n+                HashSet<Integer> unknownCodes = new HashSet<Integer>();\n+                for (CodegenOperation operation : opsMap.get(\"operation\")) {\n+                    for (CodegenResponse response : operation.responses) {\n+                        if (\"default\".equals(response.code)) {\n+                            continue;\n+                        }\n+                        try {\n+                            int code = Integer.parseInt(response.code);\n+                            if (code >= 600) {\n+                                unknownCodes.add(code);\n+                            }\n+                        } catch (NumberFormatException e) {\n+                            LOGGER.error(\"Status code is not an integer : response.code\", e);\n+                        }\n+                    }\n+                }\n+                if (!unknownCodes.isEmpty()) {\n+                    additionalProperties.put(\"unknownStatusCodes\", unknownCodes);\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(\"Unable to find operations List\", e);\n+            }\n+        }\n+        return super.postProcessOperationsWithModels(objs, allModels);\n+    }\n+\n+    @Override\n+    public List<CodegenSecurity> fromSecurity(Map<String, SecurityScheme> schemes) {\n+        final List<CodegenSecurity> codegenSecurities = super.fromSecurity(schemes);\n+        if (!removeOAuthSecurities) {\n+            return codegenSecurities;\n+        }\n+\n+        // Remove OAuth securities\n+        Iterator<CodegenSecurity> it = codegenSecurities.iterator();\n+        while (it.hasNext()) {\n+            final CodegenSecurity security = it.next();\n+            if (security.isOAuth) {\n+                it.remove();\n+            }\n+        }\n+        // Adapt 'hasMore'\n+        it = codegenSecurities.iterator();\n+        while (it.hasNext()) {\n+            final CodegenSecurity security = it.next();\n+            security.hasMore = it.hasNext();\n+        }\n+\n+        if (codegenSecurities.isEmpty()) {\n+            return null;\n+        }\n+        return codegenSecurities;\n+    }\n+\n+    @Override\n+    public String toParamName(String name) {\n+        return formatIdentifier(name, false);\n+    }\n+\n+    @Override\n+    public String toEnumName(CodegenProperty property) {\n+        return formatIdentifier(property.baseName, true);\n+    }\n+\n+    @Override\n+    public String toDefaultValue(Schema p) {\n+        if (p.getRequired() != null && p.getRequired().contains(p.getName())) {\n+            return \"None\";\n+        }\n+\n+        if (ModelUtils.isBooleanSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isDateSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isDateTimeSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isNumberSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isIntegerSchema(p)) {\n+            return null;\n+        } else if (ModelUtils.isMapSchema(p)) {\n+            String inner = getSchemaType(getAdditionalProperties(p));\n+            return \"Map[String, \" + inner + \"].empty \";\n+        } else if (ModelUtils.isArraySchema(p)) {\n+            ArraySchema ap = (ArraySchema) p;\n+            String inner = getSchemaType(ap.getItems());\n+            if (ModelUtils.isSet(ap)) {\n+                return \"Set[\" + inner + \"].empty \";\n+            }\n+            return \"Seq[\" + inner + \"].empty \";\n+        } else if (ModelUtils.isStringSchema(p)) {\n+            return null;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public static abstract class Property<T> {\n+        final String name;\n+        final String description;\n+        final T defaultValue;\n+\n+        public Property(String name, String description, T defaultValue) {\n+            this.name = name;\n+            this.description = description;\n+            this.defaultValue = defaultValue;\n+        }\n+\n+        public abstract List<CliOption> toCliOptions();\n+\n+        public abstract void updateAdditionalProperties(Map<String, Object> additionalProperties);\n+\n+        public abstract T getValue(Map<String, Object> additionalProperties);\n+\n+        public void setValue(Map<String, Object> additionalProperties, T value) {\n+            additionalProperties.put(name, value);\n+        }\n+    }\n+\n+    public static class StringProperty extends Property<String> {\n+        public StringProperty(String name, String description, String defaultValue) {\n+            super(name, description, defaultValue);\n+        }\n+\n+        @Override\n+        public List<CliOption> toCliOptions() {\n+            return Collections.singletonList(CliOption.newString(name, description).defaultValue(defaultValue));\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            if (!additionalProperties.containsKey(name)) {\n+                additionalProperties.put(name, defaultValue);\n+            }\n+        }\n+\n+        @Override\n+        public String getValue(Map<String, Object> additionalProperties) {\n+            return additionalProperties.getOrDefault(name, defaultValue).toString();\n+        }\n+    }\n+\n+    public static class BooleanProperty extends Property<Boolean> {\n+        public BooleanProperty(String name, String description, Boolean defaultValue) {\n+            super(name, description, defaultValue);\n+        }\n+\n+        @Override\n+        public List<CliOption> toCliOptions() {\n+            return Collections.singletonList(CliOption.newBoolean(name, description, defaultValue));\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            Boolean value = getValue(additionalProperties);\n+            additionalProperties.put(name, value);\n+        }\n+\n+        @Override\n+        public Boolean getValue(Map<String, Object> additionalProperties) {\n+            return Boolean.valueOf(additionalProperties.getOrDefault(name, defaultValue.toString()).toString());\n+        }\n+    }\n+\n+    public static class JsonLibraryProperty extends StringProperty {\n+        private static final String JSON4S = \"json4s\";\n+        private static final String CIRCE = \"circe\";\n+\n+        public JsonLibraryProperty() {\n+            super(\"jsonLibrary\", \"Json library to use. Possible values are: json4s and circe.\", JSON4S);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            String value = getValue(additionalProperties);\n+            if (value.equals(CIRCE) || value.equals(JSON4S)) {\n+                additionalProperties.put(CIRCE, value.equals(CIRCE));\n+                additionalProperties.put(JSON4S, value.equals(JSON4S));\n+            } else {\n+                IllegalArgumentException exception =\n+                        new IllegalArgumentException(\"Invalid json library: \" + value + \". Must be \" + CIRCE + \" \" +\n+                                \"or \" + JSON4S);\n+                throw exception;\n+            }\n+        }\n+    }\n+\n+    public static class PackageProperty extends StringProperty {\n+\n+        public PackageProperty() {\n+            super(\"mainPackage\", \"Top-level package name, which defines 'apiPackage', 'modelPackage', \" +\n+                    \"'invokerPackage'\", DEFAULT_PACKAGE_NAME);\n+        }\n+\n+        @Override\n+        public void updateAdditionalProperties(Map<String, Object> additionalProperties) {\n+            String mainPackage = getValue(additionalProperties);\n+            if (!additionalProperties.containsKey(CodegenConstants.API_PACKAGE)) {\n+                String apiPackage = mainPackage + \".api\";\n+                additionalProperties.put(CodegenConstants.API_PACKAGE, apiPackage);\n+            }\n+            if (!additionalProperties.containsKey(CodegenConstants.MODEL_PACKAGE)) {\n+                String modelPackage = mainPackage + \".model\";\n+                additionalProperties.put(CodegenConstants.MODEL_PACKAGE, modelPackage);\n+            }\n+            if (!additionalProperties.containsKey(CodegenConstants.INVOKER_PACKAGE)) {\n+                String invokerPackage = mainPackage + \".core\";\n+                additionalProperties.put(CodegenConstants.INVOKER_PACKAGE, invokerPackage);\n+            }\n+        }\n+\n+        public String getApiPackage(Map<String, Object> additionalProperties) {\n+            return additionalProperties.getOrDefault(CodegenConstants.API_PACKAGE, DEFAULT_PACKAGE_NAME + \".api\").toString();\n+        }\n+\n+        public String getModelPackage(Map<String, Object> additionalProperties) {\n+            return additionalProperties.getOrDefault(CodegenConstants.MODEL_PACKAGE, DEFAULT_PACKAGE_NAME + \".model\").toString();\n+        }\n+\n+        public String getInvokerPackage(Map<String, Object> additionalProperties) {\n+            return additionalProperties.getOrDefault(CodegenConstants.INVOKER_PACKAGE, DEFAULT_PACKAGE_NAME + \".core\").toString();\n+        }\n+    }\n+\n+    private static abstract class CustomLambda implements Mustache.Lambda {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f5a98f036a846ba113dba13e9b8cb839b9a6f81"}, "originalPosition": 424}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2MjAxOA==", "bodyText": "removal of these built-in templates is a breaking change, so this needs to get into 5.0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r448062018", "createdAt": "2020-07-01T01:11:22Z", "author": {"login": "jimschubert"}, "path": "modules/openapi-generator/src/main/resources/scala-sttp/requests.mustache", "diffHunk": "@@ -1,48 +0,0 @@\n-{{>licenseInfo}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f5a98f036a846ba113dba13e9b8cb839b9a6f81"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2MjQ0Ng==", "bodyText": "We should consider adding this back. Default behavior should be to avoid accidentally publishing content. Users can then configure publishing and ignore the build file, or enable published at invocation.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6684#discussion_r448062446", "createdAt": "2020-07-01T01:12:59Z", "author": {"login": "jimschubert"}, "path": "samples/client/petstore/scala-sttp/build.sbt", "diffHunk": "@@ -2,23 +2,17 @@ version := \"1.0.0\"\n name := \"scala-sttp-petstore\"\n organization := \"org.openapitools\"\n \n-scalaVersion := \"2.13.0\"\n-\n-crossScalaVersions := Seq(scalaVersion.value, \"2.12.10\",  \"2.11.12\")\n+scalaVersion := \"2.13.2\"\n+crossScalaVersions := Seq(scalaVersion.value, \"2.12.10\")\n \n libraryDependencies ++= Seq(\n-  \"com.softwaremill.sttp.client\" %% \"core\" % \"2.0.0\",\n-  \"com.softwaremill.sttp.client\" %% \"json4s\" % \"2.0.0\",\n-  \"org.json4s\" %% \"json4s-jackson\" % \"3.6.7\",\n-  // test dependencies\n-  \"org.scalatest\" %% \"scalatest\" % \"3.0.8\" % Test,\n-  \"junit\" % \"junit\" % \"4.13\" % \"test\"\n+  \"com.softwaremill.sttp.client\" %% \"core\" % \"2.2.0\",\n+  \"com.softwaremill.sttp.client\" %% \"json4s\" % \"2.2.0\",\n+  \"org.json4s\" %% \"json4s-jackson\" % \"3.6.8\"\n )\n \n scalacOptions := Seq(\n   \"-unchecked\",\n   \"-deprecation\",\n   \"-feature\"\n )\n-\n-publishArtifact in (Compile, packageDoc) := false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f5a98f036a846ba113dba13e9b8cb839b9a6f81"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2085, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}