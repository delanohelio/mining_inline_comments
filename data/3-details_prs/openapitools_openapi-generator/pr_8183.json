{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NzAwNDg1", "number": 8183, "title": "[Qt5] add parameterized server support", "bodyText": "PR checklist\n\n Read the contribution guidelines.\n Pull Request title clearly describes the work in the pull request and Pull Request description provides details about how to validate the work. Missing information here may result in delayed response from the community.\n If contributing template-only or documentation-only changes which will change sample output, build the project beforehand.\n Run the shell script ./bin/generate-samples.shto update all Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit as it would merge with master. These must match the expectations made by your contribution. You may regenerate an individual generator by passing the relevant config(s) as an argument to the script, for example ./bin/generate-samples.sh bin/configs/java*. For Windows users, please run the script in Git BASH.\n File the PR against the correct branch: master\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.\n\nThis PR will enable multi server and parameterized server support for Qt5 generator.\nIt uses similar classes like java does.\nThere are getter and setter functions to choose between the different servers and to change the server attributes that are provided in the server object.\nEvery endpoint can have its own server with arbitrary variables.\nIf no server is provided, the global server will be used.\nThere are two new classes: ServerConfiguration and ServerVariable.\nA ServerConfiguration stores an URL, a description and a map<QString, ServerVariable> that stores all variables and their names.\nThe SeverVariable represents one variable, that has a description, a default value and an enum where all possible values are stored.\nTo change the default variable, use this function in each API:\n    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);\n\nThe parameter serverIndex will choose a server from the server list for each endpoint. There is always at least one server with index 0. The parameter operation should be the desired endpoint operationID.\nVariable is the name of the variable you wish to change and the value is the new default Value.\nThe function will return -1 when the variable does not exists, -2 if value is not defined in the variable enum and -3 if the operation is not found.\nIf your endpoint has multiple server objects in the servers array, you can set the server that will be used with this function:\n    void setServerIndex(const QString &operation, int serverIndex);\n\nParameter operation should be your operationid. serverIndex is the index you want to set as your default server. The function will check if there is a server with your index.\nHere is an example of multiple servers in the servers array. The first server will have index 0 and the second will have index 1.\nservers:\n- url: http://{server}:8080/\n  description: Description of the Server\n  variables:\n    server:\n        enum:\n          - 'petstore'\n          - 'qa-petstore'\n          - 'dev-petstore'\n        default: 'petstore'\n- url: https://localhost:8080/v1\n\nI also updated the README. It contains a small \"guide\", similar to this message here.\nThis will also fix the issue #8164\nPING @wing328 @ravinikam (2017/07) @stkrwork (2017/07) @etherealjoy (2018/02) @MartinDelille (2018/03) @muttleyxd (2019/08)", "createdAt": "2020-12-14T18:00:53Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183", "merged": true, "mergeCommit": {"oid": "febd65d3b8a583befb3e951ca646d9d132437406"}, "closed": true, "closedAt": "2020-12-19T03:34:13Z", "author": {"login": "basyskom-dege"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdii90GgH2gAyNTM5NzAwNDg1OjEwZDVmNTZkNmI5M2NmYzg3NDJhYzFiZGM5NGFlZjkwN2I2YzY0Y2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnavQnAH2gAyNTM5NzAwNDg1OmZkMWUxNmM4NWFiYTVkYmRlMmIyNDM5YmJlYjdiMTlhNjY5NTIzMmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "10d5f56d6b93cfc8742ac1bdc94aef907b6c64cc", "author": {"user": {"login": "basyskom-dege", "name": null}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/10d5f56d6b93cfc8742ac1bdc94aef907b6c64cc", "committedDate": "2020-12-03T13:14:57Z", "message": "first Commit parameterzied Server support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09275333c04b1113908b8a65561b03dc5442843e", "author": {"user": {"login": "basyskom-dege", "name": null}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/09275333c04b1113908b8a65561b03dc5442843e", "committedDate": "2020-12-04T11:11:51Z", "message": "Merge remote-tracking branch 'origin/master' into Qt5ParameterizedServer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6360bf4750ab9cc15c44f0c26347cbf10ff88a82", "author": {"user": {"login": "basyskom-dege", "name": null}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/6360bf4750ab9cc15c44f0c26347cbf10ff88a82", "committedDate": "2020-12-04T13:14:43Z", "message": "fixed serverconfig classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44abfcfc7067f5584b0fa5acec1958f56ef4f921", "author": {"user": {"login": "basyskom-dege", "name": null}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/44abfcfc7067f5584b0fa5acec1958f56ef4f921", "committedDate": "2020-12-04T15:02:43Z", "message": "Defautl constructor f. Config, fixed regex replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cb5cb9e4c71f2a95c74abc74cc8247d5ec65e48", "author": {"user": {"login": "basyskom-dege", "name": null}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/8cb5cb9e4c71f2a95c74abc74cc8247d5ec65e48", "committedDate": "2020-12-07T16:30:34Z", "message": "Polosihed Templates, Added MultiServer support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c1b40af08dfa728c87d8a721003a645e5b7480f", "author": {"user": {"login": "basyskom-dege", "name": null}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/4c1b40af08dfa728c87d8a721003a645e5b7480f", "committedDate": "2020-12-10T13:09:10Z", "message": "Update Readme. Fixed MultiServer. Fixed def. Value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c865bdbbc7934834101016655f0bbdc86bfb3384", "author": {"user": {"login": "basyskom-dege", "name": null}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/c865bdbbc7934834101016655f0bbdc86bfb3384", "committedDate": "2020-12-14T11:09:00Z", "message": "Passing global Server to mustache. Small fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "author": {"user": {"login": "basyskom-dege", "name": null}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8", "committedDate": "2020-12-14T17:53:29Z", "message": "Updated  samples, fixed mustache for multi server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MDE2MTY1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#pullrequestreview-554016165", "createdAt": "2020-12-16T19:30:06Z", "commit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTozMDowNlrOIHVpPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTozMDowNlrOIHVpPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU2NTU2NQ==", "bodyText": "PREFIX is missing here", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544565565", "createdAt": "2020-12-16T19:30:06Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CppQt5ClientCodegen.java", "diffHunk": "@@ -80,6 +89,8 @@ public CppQt5ClientCodegen() {\n         supportingFiles.add(new SupportingFile(\"HttpFileElement.cpp.mustache\", sourceFolder, PREFIX + \"HttpFileElement.cpp\"));\n         supportingFiles.add(new SupportingFile(\"object.mustache\", sourceFolder, PREFIX + \"Object.h\"));\n         supportingFiles.add(new SupportingFile(\"enum.mustache\", sourceFolder, PREFIX + \"Enum.h\"));\n+        supportingFiles.add(new SupportingFile(\"ServerConfiguration.mustache\", sourceFolder,\"ServerConfiguration.h\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MDE2NDYx", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#pullrequestreview-554016461", "createdAt": "2020-12-16T19:30:28Z", "commit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTozMDoyOFrOIHVqTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTozMDoyOFrOIHVqTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU2NTgzNw==", "bodyText": "modelNamePrefix is missing here", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544565837", "createdAt": "2020-12-16T19:30:28Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/CppQt5ClientCodegen.java", "diffHunk": "@@ -109,6 +120,8 @@ public void processOpts() {\n             supportingFiles.add(new SupportingFile(\"HttpFileElement.cpp.mustache\", sourceFolder, modelNamePrefix + \"HttpFileElement.cpp\"));           \n             supportingFiles.add(new SupportingFile(\"object.mustache\", sourceFolder, modelNamePrefix + \"Object.h\"));\n             supportingFiles.add(new SupportingFile(\"enum.mustache\", sourceFolder, modelNamePrefix + \"Enum.h\"));\n+            supportingFiles.add(new SupportingFile(\"ServerConfiguration.mustache\", sourceFolder,\"ServerConfiguration.h\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MDE2Nzkx", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#pullrequestreview-554016791", "createdAt": "2020-12-16T19:30:55Z", "commit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTozMDo1NVrOIHVrWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTozMDo1NVrOIHVrWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU2NjEwNg==", "bodyText": "missing {{prefix}} here", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544566106", "createdAt": "2020-12-16T19:30:55Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/Project.mustache", "diffHunk": "@@ -20,8 +20,10 @@ HEADERS += \\\n     $${PWD}/{{prefix}}HttpRequest.h \\\n     $${PWD}/{{prefix}}Object.h \\\n     $${PWD}/{{prefix}}Enum.h \\\n-    $${PWD}/{{prefix}}HttpFileElement.h\n-\n+    $${PWD}/{{prefix}}HttpFileElement.h \\\n+    $${PWD}/ServerConfiguration.h \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MDIxNjE0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#pullrequestreview-554021614", "createdAt": "2020-12-16T19:37:29Z", "commit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTozNzoyOVrOIHV7zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTo1OTo0OFrOIHWyKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3MDMxNw==", "bodyText": "Please use vendor extensions instead. something like\nthis.vendorExtensions.put(\"x-codegen-globalServerList\", CodegenServerList);\n\nThis allows differentiating generic and codegen specific extension. Correspondingly the mustache files would need updating.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544570317", "createdAt": "2020-12-16T19:37:29Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractCppCodegen.java", "diffHunk": "@@ -341,6 +349,28 @@ public void preprocessOpenAPI(OpenAPI openAPI) {\n         if (!scheme.isEmpty()) {\n             this.additionalProperties.put(\"scheme\", scheme);\n         }\n+        if (!serverList.isEmpty()) {\n+            for (Server server : serverList) {\n+                CodegenServer s = new CodegenServer();\n+                s.description = server.getDescription();\n+                s.url = server.getUrl();\n+                s.variables = new ArrayList<CodegenServerVariable>();\n+                ServerVariables serverVars = server.getVariables();\n+                if(serverVars != null){\n+                serverVars.forEach((key,value) -> {\n+                    CodegenServerVariable codegenServerVar= new CodegenServerVariable();\n+                    ServerVariable ServerVar = value;\n+                    codegenServerVar.name = key;\n+                    codegenServerVar.description = ServerVar.getDescription();\n+                    codegenServerVar.defaultValue = ServerVar.getDefault();\n+                    codegenServerVar.enumValues = ServerVar.getEnum();\n+                    s.variables.add(codegenServerVar);\n+                    });\n+                }\n+                CodegenServerList.add(s);\n+            }\n+        this.additionalProperties.put(\"globalServerList\", CodegenServerList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3MTkxMw==", "bodyText": "Please add {{prefix}} here", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544571913", "createdAt": "2020-12-16T19:39:57Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/api-body.mustache", "diffHunk": "@@ -1,7 +1,7 @@\n {{>licenseInfo}}\n #include \"{{classname}}.h\"\n #include \"{{prefix}}Helpers.h\"\n-\n+#include \"ServerConfiguration.h\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3MjA3Nw==", "bodyText": "{{prefix}}", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544572077", "createdAt": "2020-12-16T19:40:13Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/api-header.mustache", "diffHunk": "@@ -3,13 +3,15 @@\n #define {{prefix}}_{{classname}}_H\n \n #include \"{{prefix}}HttpRequest.h\"\n+#include \"ServerConfiguration.h\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NTcyNw==", "bodyText": "prefix", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544575727", "createdAt": "2020-12-16T19:45:57Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerVariable.mustache", "diffHunk": "@@ -0,0 +1,43 @@\n+{{>licenseInfo}}\n+#ifndef SERVERVARIABLE_H", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NTg5MQ==", "bodyText": "This include unordered_set is not needed", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544575891", "createdAt": "2020-12-16T19:46:13Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerVariable.mustache", "diffHunk": "@@ -0,0 +1,43 @@\n+{{>licenseInfo}}\n+#ifndef SERVERVARIABLE_H\n+#define SERVERVARIABLE_H\n+#include <unordered_set>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NjY1Nw==", "bodyText": "This include stdexcept is not needed. Probably better to use the Qt one if you are using.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544576657", "createdAt": "2020-12-16T19:47:30Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerConfiguration.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+/**\n+ * Representing a Server configuration.\n+ */\n+#ifndef SERVERVCONFIGURATION_H\n+#define SERVERVCONFIGURATION_H\n+#include <QString>\n+#include <QMap>\n+#include <stdexcept>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3NzgzNQ==", "bodyText": "prefix", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544577835", "createdAt": "2020-12-16T19:49:30Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerConfiguration.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+/**\n+ * Representing a Server configuration.\n+ */\n+#ifndef SERVERVCONFIGURATION_H", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3OTAwMg==", "bodyText": "missing namespace", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544579002", "createdAt": "2020-12-16T19:51:19Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerVariable.mustache", "diffHunk": "@@ -0,0 +1,43 @@\n+{{>licenseInfo}}\n+#ifndef SERVERVARIABLE_H\n+#define SERVERVARIABLE_H\n+#include <unordered_set>\n+#include <QString>\n+#include <QSet>\n+/**\n+ * Representing a Server Variable for server URL template substitution.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3OTExMQ==", "bodyText": "missing namespace", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544579111", "createdAt": "2020-12-16T19:51:31Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerConfiguration.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+/**\n+ * Representing a Server configuration.\n+ */\n+#ifndef SERVERVCONFIGURATION_H\n+#define SERVERVCONFIGURATION_H\n+#include <QString>\n+#include <QMap>\n+#include <stdexcept>\n+#include <QRegularExpression>\n+#include \"ServerVariable.h\"\n+\n+class ServerConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3OTU2Mw==", "bodyText": "please append prefix to classname\nReason for this was some users were generating multiple clients and they put them in dedicated directories. They see warnings in compile.\nThey could have placed these common files in some place, but then it seems they use cmake to sort this out.\nSo we need the prefixes.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544579563", "createdAt": "2020-12-16T19:52:14Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerConfiguration.mustache", "diffHunk": "@@ -0,0 +1,65 @@\n+{{>licenseInfo}}\n+/**\n+ * Representing a Server configuration.\n+ */\n+#ifndef SERVERVCONFIGURATION_H\n+#define SERVERVCONFIGURATION_H\n+#include <QString>\n+#include <QMap>\n+#include <stdexcept>\n+#include <QRegularExpression>\n+#include \"ServerVariable.h\"\n+\n+class ServerConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4MDA5OQ==", "bodyText": "please append prefix to classname", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544580099", "createdAt": "2020-12-16T19:53:07Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/ServerVariable.mustache", "diffHunk": "@@ -0,0 +1,43 @@\n+{{>licenseInfo}}\n+#ifndef SERVERVARIABLE_H\n+#define SERVERVARIABLE_H\n+#include <unordered_set>\n+#include <QString>\n+#include <QSet>\n+/**\n+ * Representing a Server Variable for server URL template substitution.\n+ */\n+class ServerVariable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4Mzg2Ng==", "bodyText": "You can check indentation if you have time.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544583866", "createdAt": "2020-12-16T19:59:10Z", "author": {"login": "etherealjoy"}, "path": "modules/openapi-generator/src/main/resources/cpp-qt5-client/api-body.mustache", "diffHunk": "@@ -17,11 +17,64 @@ namespace {{this}} {\n       _timeOut(timeOut),\n       _manager(nullptr),\n       isResponseCompressionEnabled(false),\n-      isRequestCompressionEnabled(false) {}\n+      isRequestCompressionEnabled(false) {\n+      initializeServerConfigs();\n+      }\n \n {{classname}}::~{{classname}}() {\n }\n \n+void {{classname}}::initializeServerConfigs(){\n+\n+//Default server\n+QList<ServerConfiguration> defaultConf = QList<ServerConfiguration>();\n+//varying endpoint server \n+QList<ServerConfiguration> serverConf = QList<ServerConfiguration>();\n+{{#globalServerList}}\n+defaultConf.append(ServerConfiguration(\n+    \"{{{url}}}\",\n+    \"{{{description}}}{{^description}}No description provided{{/description}}\",\n+    {{#variables}}{{#-first}}QMap<QString, ServerVariable>{ {{/-first}}\n+    {\"{{{name}}}\", ServerVariable(\"{{{description}}}{{^description}}No description provided{{/description}}\",\"{{{defaultValue}}}\",\n+    QSet<QString>{ {{#enumValues}}{\"{{{.}}}\"}{{#-last}} })},{{/-last}}{{^-last}},{{/-last}}{{/enumValues}}{{^enumValues}}{\"{{defaultValue}}\"} })},{{/enumValues}}{{#-last}} }));{{/-last}}\n+    {{/variables}}{{^variables}}QMap<QString, ServerVariable>()));{{/variables}}\n+{{/globalServerList}}\n+{{#operations}}\n+  {{#operation}}\n+  {{^servers}}\n+_serverConfigs.insert(\"{{nickname}}\",defaultConf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4NDIzMw==", "bodyText": "This is a strange change. I dont think it is related.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r544584233", "createdAt": "2020-12-16T19:59:48Z", "author": {"login": "etherealjoy"}, "path": "samples/client/petstore/cpp-tizen/src/UserManager.h", "diffHunk": "@@ -28,80 +28,80 @@ class UserManager {\n /*! \\brief Create user. *Synchronous*\n  *\n  * This can only be done by the logged in user.\n- * \\param user Created user object *Required*\n+ * \\param body Created user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUserSync(char * accessToken,\n-\tUser user, \n+\tUser body, \n \t\n \tvoid(* handler)(Error, void* ) , void* userData);\n \n /*! \\brief Create user. *Asynchronous*\n  *\n  * This can only be done by the logged in user.\n- * \\param user Created user object *Required*\n+ * \\param body Created user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUserAsync(char * accessToken,\n-\tUser user, \n+\tUser body, \n \t\n \tvoid(* handler)(Error, void* ) , void* userData);\n \n \n /*! \\brief Creates list of users with given input array. *Synchronous*\n  *\n  * \n- * \\param user List of user object *Required*\n+ * \\param body List of user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUsersWithArrayInputSync(char * accessToken,\n-\tstd::list<std::list> user, \n+\tstd::list<User> body, \n \t\n \tvoid(* handler)(Error, void* ) , void* userData);\n \n /*! \\brief Creates list of users with given input array. *Asynchronous*\n  *\n  * \n- * \\param user List of user object *Required*\n+ * \\param body List of user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUsersWithArrayInputAsync(char * accessToken,\n-\tstd::list<std::list> user, \n+\tstd::list<User> body, \n \t\n \tvoid(* handler)(Error, void* ) , void* userData);\n \n \n /*! \\brief Creates list of users with given input array. *Synchronous*\n  *\n  * \n- * \\param user List of user object *Required*\n+ * \\param body List of user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUsersWithListInputSync(char * accessToken,\n-\tstd::list<std::list> user, \n+\tstd::list<User> body, \n \t\n \tvoid(* handler)(Error, void* ) , void* userData);\n \n /*! \\brief Creates list of users with given input array. *Asynchronous*\n  *\n  * \n- * \\param user List of user object *Required*\n+ * \\param body List of user object *Required*\n  * \\param handler The callback function to be invoked on completion. *Required*\n  * \\param accessToken The Authorization token. *Required*\n  * \\param userData The user data to be passed to the callback function.\n  */\n bool createUsersWithListInputAsync(char * accessToken,\n-\tstd::list<std::list> user, \n+\tstd::list<User> body, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09a3423f09ba55a9b2c4d1c2d9e0a73ad9a27c8"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b6c6cf77634ad7b624fd528d1c407eb271c5f1e", "author": {"user": {"login": "basyskom-dege", "name": null}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/3b6c6cf77634ad7b624fd528d1c407eb271c5f1e", "committedDate": "2020-12-17T10:57:40Z", "message": "added prefixes, removed unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50fea41fd6a2cb81b0dc9d1b951bbdd98484079c", "author": {"user": {"login": "basyskom-dege", "name": null}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/50fea41fd6a2cb81b0dc9d1b951bbdd98484079c", "committedDate": "2020-12-17T11:11:25Z", "message": "added newly generated samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a6a4859e3ba622c061dbc78151c3c75ae1b485f", "author": {"user": {"login": "basyskom-dege", "name": null}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/8a6a4859e3ba622c061dbc78151c3c75ae1b485f", "committedDate": "2020-12-17T11:30:59Z", "message": "missing vendorExtension in mustache. Update smaple"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NjIyNTE3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#pullrequestreview-555622517", "createdAt": "2020-12-18T16:12:51Z", "commit": {"oid": "8a6a4859e3ba622c061dbc78151c3c75ae1b485f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NjMyNjM4", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#pullrequestreview-555632638", "createdAt": "2020-12-18T16:25:54Z", "commit": {"oid": "8a6a4859e3ba622c061dbc78151c3c75ae1b485f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjoyNTo1NVrOIIpxbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjoyNTo1NVrOIIpxbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk0MzkxNg==", "bodyText": "Hope you don't mind. I'll rename x-codegen-globalServerList to x-cpp-global-server-list later with another PR.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/8183#discussion_r545943916", "createdAt": "2020-12-18T16:25:55Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractCppCodegen.java", "diffHunk": "@@ -341,6 +349,28 @@ public void preprocessOpenAPI(OpenAPI openAPI) {\n         if (!scheme.isEmpty()) {\n             this.additionalProperties.put(\"scheme\", scheme);\n         }\n+        if (!serverList.isEmpty()) {\n+            for (Server server : serverList) {\n+                CodegenServer s = new CodegenServer();\n+                s.description = server.getDescription();\n+                s.url = server.getUrl();\n+                s.variables = new ArrayList<CodegenServerVariable>();\n+                ServerVariables serverVars = server.getVariables();\n+                if(serverVars != null){\n+                serverVars.forEach((key,value) -> {\n+                    CodegenServerVariable codegenServerVar= new CodegenServerVariable();\n+                    ServerVariable ServerVar = value;\n+                    codegenServerVar.name = key;\n+                    codegenServerVar.description = ServerVar.getDescription();\n+                    codegenServerVar.defaultValue = ServerVar.getDefault();\n+                    codegenServerVar.enumValues = ServerVar.getEnum();\n+                    s.variables.add(codegenServerVar);\n+                    });\n+                }\n+                CodegenServerList.add(s);\n+            }\n+            this.vendorExtensions.put(\"x-codegen-globalServerList\", CodegenServerList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a6a4859e3ba622c061dbc78151c3c75ae1b485f"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd1e16c85aba5dbde2b2439bbeb7b19a6695232a", "author": {"user": {"login": "wing328", "name": "William Cheng"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/fd1e16c85aba5dbde2b2439bbeb7b19a6695232a", "committedDate": "2020-12-18T16:29:26Z", "message": "update doc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1813, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}