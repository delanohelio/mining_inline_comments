{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MjA0Nzgx", "number": 6493, "title": "[BUG][python] Support named arrays", "bodyText": "The model for named array is not generated.\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.\n\n@taxpon (2017/07) @frol (2017/07) @mbohlool (2017/07) @cbornet (2017/09) @kenjones-cisco (2017/11) @tomplus (2018/10) @Jyhess (2019/01) @arun-nalla (2019/11) @spacether (2019/11)", "createdAt": "2020-05-29T16:33:44Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493", "merged": true, "mergeCommit": {"oid": "e708cdc83eb22e6f2087eb9b85139ecba1917626"}, "closed": true, "closedAt": "2020-06-04T14:50:54Z", "author": {"login": "jirikuncar"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmFHY4AH2gAyNDI1MjA0NzgxOmM0M2MxNzA4ODkxYWEyZTQ2NzIxZGU2ZjMxYmMyMzBhNjcxNmMzYjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcn_OIbgFqTQyNDUyODc4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c43c1708891aa2e46721de6f31bc230a6716c3b6", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/c43c1708891aa2e46721de6f31bc230a6716c3b6", "committedDate": "2020-05-29T16:32:48Z", "message": "[python] Support named arrays"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTEwNjA3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-421110607", "createdAt": "2020-05-29T16:34:37Z", "commit": {"oid": "c43c1708891aa2e46721de6f31bc230a6716c3b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozNDozN1rOGcj9Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozNDozN1rOGcj9Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwMjQ3MA==", "bodyText": "\u2757", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r432602470", "createdAt": "2020-05-29T16:34:37Z", "author": {"login": "jirikuncar"}, "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/api/fake_api.py", "diffHunk": "@@ -600,6 +601,109 @@ def __fake_outer_string_serialize(\n             callable=__fake_outer_string_serialize\n         )\n \n+        def __get_array_of_enums(\n+            self,\n+            **kwargs\n+        ):\n+            \"\"\"Array of Enums  # noqa: E501\n+\n+            This method makes a synchronous HTTP request by default. To make an\n+            asynchronous HTTP request, please pass async_req=True\n+            >>> thread = api.get_array_of_enums(async_req=True)\n+            >>> result = thread.get()\n+\n+\n+            Keyword Args:\n+                _return_http_data_only (bool): response data without head status\n+                    code and headers. Default is True.\n+                _preload_content (bool): if False, the urllib3.HTTPResponse object\n+                    will be returned without reading/decoding response data.\n+                    Default is True.\n+                _request_timeout (float/tuple): timeout setting for this request. If one\n+                    number provided, it will be total request timeout. It can also\n+                    be a pair (tuple) of (connection, read) timeouts.\n+                    Default is None.\n+                _check_input_type (bool): specifies if type checking\n+                    should be done one the data sent to the server.\n+                    Default is True.\n+                _check_return_type (bool): specifies if type checking\n+                    should be done one the data received from the server.\n+                    Default is True.\n+                _host_index (int): specifies the index of the server\n+                    that we want to use.\n+                    Default is 0.\n+                async_req (bool): execute request asynchronously\n+\n+            Returns:\n+                array_of_enums.ArrayOfEnums\n+                    If the method is called asynchronously, returns the request\n+                    thread.\n+            \"\"\"\n+            kwargs['async_req'] = kwargs.get(\n+                'async_req', False\n+            )\n+            kwargs['_return_http_data_only'] = kwargs.get(\n+                '_return_http_data_only', True\n+            )\n+            kwargs['_preload_content'] = kwargs.get(\n+                '_preload_content', True\n+            )\n+            kwargs['_request_timeout'] = kwargs.get(\n+                '_request_timeout', None\n+            )\n+            kwargs['_check_input_type'] = kwargs.get(\n+                '_check_input_type', True\n+            )\n+            kwargs['_check_return_type'] = kwargs.get(\n+                '_check_return_type', True\n+            )\n+            kwargs['_host_index'] = kwargs.get('_host_index', 0)\n+            return self.call_with_http_info(**kwargs)\n+\n+        self.get_array_of_enums = Endpoint(\n+            settings={\n+                'response_type': (array_of_enums.ArrayOfEnums,),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43c1708891aa2e46721de6f31bc230a6716c3b6"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTEwNzI2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-421110726", "createdAt": "2020-05-29T16:34:46Z", "commit": {"oid": "c43c1708891aa2e46721de6f31bc230a6716c3b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozNDo0N1rOGcj9vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozNDo0N1rOGcj9vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwMjU1OA==", "bodyText": "\u2757", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r432602558", "createdAt": "2020-05-29T16:34:47Z", "author": {"login": "jirikuncar"}, "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/api/fake_api.py", "diffHunk": "@@ -36,6 +36,7 @@\n )\n from petstore_api.models import health_check_result\n from petstore_api.models import outer_composite\n+from petstore_api.models import array_of_enums", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43c1708891aa2e46721de6f31bc230a6716c3b6"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzU0ODYw", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-421354860", "createdAt": "2020-05-30T00:03:13Z", "commit": {"oid": "c43c1708891aa2e46721de6f31bc230a6716c3b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDowMzoxM1rOGcvQNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDowMzoxM1rOGcvQNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NzUxMQ==", "bodyText": "Does the model AnimalFarm already demonstrate your use case?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r432787511", "createdAt": "2020-05-30T00:03:13Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/resources/3_0/python-experimental/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml", "diffHunk": "@@ -1703,6 +1716,10 @@ components:\n         - placed\n         - approved\n         - delivered\n+    ArrayOfEnums:\n+      type: array\n+      items:\n+        $ref: '#/components/schemas/OuterEnum'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43c1708891aa2e46721de6f31bc230a6716c3b6"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b109dedf59d2fda93c11b760f76660099fc3314", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/7b109dedf59d2fda93c11b760f76660099fc3314", "committedDate": "2020-06-01T17:03:37Z", "message": "Merge remote-tracking branch 'upstream/master' into python-experimental/named-arrays"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8a1a37570afc48c1b172db77e3f1a7955c4fc8e", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b8a1a37570afc48c1b172db77e3f1a7955c4fc8e", "committedDate": "2020-06-01T18:04:18Z", "message": "Fix named array type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/31407d4d579e5a67a06f0991c07593ef42f82dd2", "committedDate": "2020-06-01T18:18:57Z", "message": "Use ModelSimple"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU0MDM4", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422354038", "createdAt": "2020-06-02T05:34:12Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTozNDoxM1rOGdiqcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTozNDoxM1rOGdiqcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyOTgxMQ==", "bodyText": "Can you fix the doc template so it lists the information for the AnimalFarm model here?\nName: N/A\nType: [animal.Animal]", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433629811", "createdAt": "2020-06-02T05:34:13Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/docs/AnimalFarm.md", "diffHunk": "@@ -0,0 +1,9 @@\n+# animal_farm.AnimalFarm\n+\n+## Properties\n+Name | Type | Description | Notes\n+------------ | ------------- | ------------- | -------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU0NTI4", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422354528", "createdAt": "2020-06-02T05:35:35Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTozNTozNlrOGdisHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTozNTozNlrOGdisHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMDIzOA==", "bodyText": "This tag has generated a new api which adds another file.\nCan you change it to one of the existing tags like fake?\nThat way a new python api file will not be generated", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433630238", "createdAt": "2020-06-02T05:35:36Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/resources/3_0/python-experimental/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml", "diffHunk": "@@ -1097,6 +1097,19 @@ paths:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/HealthCheckResult'\n+  /farm/animals:\n+    get:\n+      tags:\n+        - farm", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU1MTQ2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422355146", "createdAt": "2020-06-02T05:37:23Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTozNzoyM1rOGdit9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTozNzoyM1rOGdit9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMDcxMQ==", "bodyText": "Can you delete this file after you switch the api tag to put the farm endpoint into the fake api?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433630711", "createdAt": "2020-06-02T05:37:23Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/petstore_api/api/farm_api.py", "diffHunk": "@@ -0,0 +1,373 @@\n+# coding: utf-8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU3NjI4", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422357628", "createdAt": "2020-06-02T05:44:37Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0NDozN1rOGdi15g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0NDozN1rOGdi15g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMjc0Mg==", "bodyText": "How about adding a test here like\nanimal = [animal.Animal(blah)]\nmodel = AnimalFarm(animal)\nassert check_the_value_of the data stored in model here\n\n\n\nHow about adding a test in test/test_fake_api.py where we send an instance of AnimalFarm to the endpoint that accepts it?\n\n\nHow about adding a deserialization test like we have here to show that our code can receive back array models and deserialize them correctly?\n\n\nWe need to demonstrate that:\n\nclient side we can make instances of the model\nwe can send those instances to the server\nwe can receive them back from the server", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433632742", "createdAt": "2020-06-02T05:44:37Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_animal_farm.py", "diffHunk": "@@ -0,0 +1,43 @@\n+# coding: utf-8\n+\n+\"\"\"\n+    OpenAPI Petstore\n+\n+    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \\\" \\\\  # noqa: E501\n+\n+    The version of the OpenAPI document: 1.0.0\n+    Generated by: https://openapi-generator.tech\n+\"\"\"\n+\n+\n+from __future__ import absolute_import\n+import sys\n+import unittest\n+\n+import petstore_api\n+try:\n+    from petstore_api.model import animal\n+except ImportError:\n+    animal = sys.modules[\n+        'petstore_api.model.animal']\n+from petstore_api.model.animal_farm import AnimalFarm\n+\n+\n+class TestAnimalFarm(unittest.TestCase):\n+    \"\"\"AnimalFarm unit test stubs\"\"\"\n+\n+    def setUp(self):\n+        pass\n+\n+    def tearDown(self):\n+        pass\n+\n+    def testAnimalFarm(self):\n+        \"\"\"Test AnimalFarm\"\"\"\n+        # FIXME: construct object with mandatory attributes with example values\n+        # model = AnimalFarm()  # noqa: E501\n+        pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU4MTc1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422358175", "createdAt": "2020-06-02T05:46:17Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0NjoxN1rOGdi3sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0NjoxN1rOGdi3sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzIwMQ==", "bodyText": "Can you revert this file to the master branch version? We have tests in it that we need.\nThis same comment applies in the test files below where I added the same comment.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433633201", "createdAt": "2020-06-02T05:46:17Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_drawing.py", "diffHunk": "@@ -42,130 +47,12 @@ def setUp(self):\n     def tearDown(self):\n         pass\n \n-    def test_create_instances(self):\n-        \"\"\"\n-        Validate instance can be created using pythonic name or OAS names.\n-        \"\"\"\n-\n-        # Validate object can be created using pythonic names.\n-        inst = shape.Shape(\n-            shape_type=\"Triangle\",\n-            triangle_type=\"IsoscelesTriangle\"\n-        )\n-        from petstore_api.model.isosceles_triangle import IsoscelesTriangle\n-        assert isinstance(inst, IsoscelesTriangle)\n-\n-        # Validate object can be created using OAS names.\n-        # For example, this can be used to construct objects on the client\n-        # when the input data is available as JSON documents.\n-        data =  {\n-            'shapeType': \"Triangle\",\n-            'triangleType': \"IsoscelesTriangle\"\n-        }\n-        inst = shape.Shape(_spec_property_naming=True, **data)\n-        assert isinstance(inst, IsoscelesTriangle)\n-\n-    def test_deserialize_oneof_reference(self):\n-        \"\"\"\n-        Validate the scenario when the type of a OAS property is 'oneOf', and the 'oneOf'\n-        schema is specified as a reference ($ref), not an inline 'oneOf' schema.\n-        \"\"\"\n-        isosceles_triangle = shape.Shape(\n-            shape_type=\"Triangle\",\n-            triangle_type=\"IsoscelesTriangle\"\n-        )\n-        from petstore_api.model.isosceles_triangle import IsoscelesTriangle\n-        from petstore_api.model.triangle import Triangle\n-        from petstore_api.model.equilateral_triangle import EquilateralTriangle\n-\n-        assert isinstance(isosceles_triangle, IsoscelesTriangle)\n-        inst = Drawing(\n-            # 'main_shape' has type 'Shape', which is a oneOf [triangle, quadrilateral]\n-            # composed schema. So we should be able to assign a petstore_api.Triangle\n-            # to a 'main_shape'.\n-            main_shape=isosceles_triangle,\n-            shapes=[\n-                shape.Shape(\n-                    shape_type=\"Triangle\",\n-                    triangle_type=\"EquilateralTriangle\"\n-                ),\n-                Triangle(\n-                    shape_type=\"Triangle\",\n-                    triangle_type=\"IsoscelesTriangle\"\n-                ),\n-                EquilateralTriangle(\n-                    shape_type=\"Triangle\",\n-                    triangle_type=\"EquilateralTriangle\"\n-                ),\n-                shape.Shape(\n-                    shape_type=\"Quadrilateral\",\n-                    quadrilateral_type=\"ComplexQuadrilateral\"\n-                ),\n-            ],\n-        )\n-        from petstore_api.model.complex_quadrilateral import ComplexQuadrilateral\n-        assert isinstance(inst, Drawing)\n-        assert isinstance(inst.main_shape, IsoscelesTriangle)\n-        self.assertEqual(len(inst.shapes), 4)\n-        assert isinstance(inst.shapes[0], EquilateralTriangle)\n-        assert isinstance(inst.shapes[1], IsoscelesTriangle)\n-        assert isinstance(inst.shapes[2], EquilateralTriangle)\n-        assert isinstance(inst.shapes[3], ComplexQuadrilateral)\n-\n-        # Validate we cannot assign the None value to main_shape because the 'null' type\n-        # is not one of the allowed types in the 'Shape' schema.\n-        err_msg = (\"Invalid type for variable '{}'. \"\n-                   \"Required value type is {} and passed type was {} at {}\")\n-        with self.assertRaisesRegexp(\n-                petstore_api.ApiTypeError,\n-                err_msg.format(\"main_shape\", \"Shape\", \"NoneType\", \"\\['main_shape'\\]\")\n-        ):\n-            inst = Drawing(\n-                # 'main_shape' has type 'Shape', which is a oneOf [triangle, quadrilateral]\n-                # So the None value should not be allowed and an exception should be raised.\n-                main_shape=None,\n-            )\n-\n-\n-    def test_deserialize_oneof_reference_with_null_type(self):\n-        \"\"\"\n-        Validate the scenario when the type of a OAS property is 'oneOf', and the 'oneOf'\n-        schema is specified as a reference ($ref), not an inline 'oneOf' schema.\n-        Further, the 'oneOf' schema has a 'null' type child schema (as introduced in\n-        OpenAPI 3.1).\n-        \"\"\"\n-\n-        # Validate we can assign the None value to shape_or_null, because the 'null' type\n-        # is one of the allowed types in the 'ShapeOrNull' schema.\n-        inst = Drawing(\n-            # 'shape_or_null' has type 'ShapeOrNull', which is a oneOf [null, triangle, quadrilateral]\n-            shape_or_null=None,\n-        )\n-        assert isinstance(inst, Drawing)\n-        self.assertFalse(hasattr(inst, 'main_shape'))\n-        self.assertTrue(hasattr(inst, 'shape_or_null'))\n-        self.assertIsNone(inst.shape_or_null)\n-\n-\n-    def test_deserialize_oneof_reference_with_nullable_type(self):\n-        \"\"\"\n-        Validate the scenario when the type of a OAS property is 'oneOf', and the 'oneOf'\n-        schema is specified as a reference ($ref), not an inline 'oneOf' schema.\n-        Further, the 'oneOf' schema has the 'nullable' attribute (as introduced in\n-        OpenAPI 3.0 and deprecated in 3.1).\n-        \"\"\"\n+    def testDrawing(self):\n+        \"\"\"Test Drawing\"\"\"\n+        # FIXME: construct object with mandatory attributes with example values\n+        # model = Drawing()  # noqa: E501\n+        pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU4Mjk2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422358296", "createdAt": "2020-06-02T05:46:37Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0NjozN1rOGdi4CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0NjozN1rOGdi4CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzI4OQ==", "bodyText": "Can you revert this file to the master branch version?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433633289", "createdAt": "2020-06-02T05:46:37Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_fruit.py", "diffHunk": "@@ -39,184 +39,10 @@ def tearDown(self):\n \n     def testFruit(self):\n         \"\"\"Test Fruit\"\"\"\n+        # FIXME: construct object with mandatory attributes with example values\n+        # model = Fruit()  # noqa: E501\n+        pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU4MzU3", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422358357", "createdAt": "2020-06-02T05:46:48Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0Njo0OFrOGdi4OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0Njo0OFrOGdi4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzMzNg==", "bodyText": "Can you revert this file to the master branch version?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433633336", "createdAt": "2020-06-02T05:46:48Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_fruit_req.py", "diffHunk": "@@ -39,142 +39,10 @@ def tearDown(self):\n \n     def testFruitReq(self):\n         \"\"\"Test FruitReq\"\"\"\n+        # FIXME: construct object with mandatory attributes with example values\n+        # model = FruitReq()  # noqa: E501\n+        pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU4NDEz", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422358413", "createdAt": "2020-06-02T05:46:57Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0Njo1OFrOGdi4Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0Njo1OFrOGdi4Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzM3NQ==", "bodyText": "Can you revert this file to the master branch version?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433633375", "createdAt": "2020-06-02T05:46:58Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_gm_fruit.py", "diffHunk": "@@ -39,193 +39,10 @@ def tearDown(self):\n \n     def testGmFruit(self):\n         \"\"\"Test GmFruit\"\"\"\n+        # FIXME: construct object with mandatory attributes with example values\n+        # model = GmFruit()  # noqa: E501\n+        pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU4NjU1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422358655", "createdAt": "2020-06-02T05:47:45Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0Nzo0NVrOGdi5NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0Nzo0NVrOGdi5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzU4OA==", "bodyText": "Can you revert this file to the master branch version?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433633588", "createdAt": "2020-06-02T05:47:45Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_mammal.py", "diffHunk": "@@ -39,11 +44,9 @@ def tearDown(self):\n \n     def testMammal(self):\n         \"\"\"Test Mammal\"\"\"\n-\n-        # tests that we can make a BasquePig by traveling through descendant discriminator in Pig\n-        model = Mammal(class_name=\"BasquePig\")\n-        from petstore_api.model import basque_pig\n-        assert isinstance(model, basque_pig.BasquePig)\n+        # FIXME: construct object with mandatory attributes with example values\n+        # model = Mammal()  # noqa: E501\n+        pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU4NzA1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422358705", "createdAt": "2020-06-02T05:47:54Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0Nzo1NFrOGdi5YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0Nzo1NFrOGdi5YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzYzMg==", "bodyText": "Can you revert this file to the master branch version?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433633632", "createdAt": "2020-06-02T05:47:54Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_outer_enum.py", "diffHunk": "@@ -29,16 +29,9 @@ def tearDown(self):\n \n     def testOuterEnum(self):\n         \"\"\"Test OuterEnum\"\"\"\n-        # Since 'OuterEnum' is nullable, validate the null value can be assigned\n-        # to OuterEnum.\n-        inst = OuterEnum(None)\n-        self.assertIsNone(inst)\n-\n-        inst = OuterEnum('approved')\n-        assert isinstance(inst, OuterEnum)\n-\n-        with self.assertRaises(petstore_api.ApiValueError):\n-            OuterEnum('garbage')\n+        # FIXME: construct object with mandatory attributes with example values\n+        # model = OuterEnum()  # noqa: E501\n+        pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU4NzQ1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422358745", "createdAt": "2020-06-02T05:48:02Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0ODowMlrOGdi5fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0ODowMlrOGdi5fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzY2Mw==", "bodyText": "Can you revert this file to the master branch version?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433633663", "createdAt": "2020-06-02T05:48:02Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_parent_pet.py", "diffHunk": "@@ -39,12 +39,9 @@ def tearDown(self):\n \n     def testParentPet(self):\n         \"\"\"Test ParentPet\"\"\"\n-\n-        # test that we can make a ParentPet from a ParentPet\n-        # which requires that we travel back through ParentPet's allOf descendant\n-        # GrandparentAnimal, and we use the descendant's discriminator to make ParentPet\n-        model = ParentPet(pet_type=\"ParentPet\")\n-        assert isinstance(model, ParentPet)\n+        # FIXME: construct object with mandatory attributes with example values\n+        # model = ParentPet()  # noqa: E501\n+        pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU4Nzkx", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422358791", "createdAt": "2020-06-02T05:48:09Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0ODowOVrOGdi5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0ODowOVrOGdi5pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzcwMw==", "bodyText": "Can you revert this file to the master branch version?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433633703", "createdAt": "2020-06-02T05:48:09Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_quadrilateral.py", "diffHunk": "@@ -39,10 +39,9 @@ def tearDown(self):\n \n     def testQuadrilateral(self):\n         \"\"\"Test Quadrilateral\"\"\"\n-        instance = Quadrilateral(shape_type=\"Quadrilateral\", quadrilateral_type=\"ComplexQuadrilateral\")\n-        assert isinstance(instance, complex_quadrilateral.ComplexQuadrilateral)\n-        instance = Quadrilateral(shape_type=\"Quadrilateral\", quadrilateral_type=\"SimpleQuadrilateral\")\n-        assert isinstance(instance, simple_quadrilateral.SimpleQuadrilateral)\n+        # FIXME: construct object with mandatory attributes with example values\n+        # model = Quadrilateral()  # noqa: E501\n+        pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU4ODQz", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422358843", "createdAt": "2020-06-02T05:48:17Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0ODoxN1rOGdi50w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0ODoxN1rOGdi50w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzc0Nw==", "bodyText": "Can you revert this file to the master branch version?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433633747", "createdAt": "2020-06-02T05:48:17Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_shape.py", "diffHunk": "@@ -39,71 +39,10 @@ def tearDown(self):\n \n     def testShape(self):\n         \"\"\"Test Shape\"\"\"\n-        from petstore_api.model import complex_quadrilateral\n-        from petstore_api.model import simple_quadrilateral\n-        from petstore_api.model import equilateral_triangle\n-        from petstore_api.model import isosceles_triangle\n-        from petstore_api.model import scalene_triangle\n-        tri = triangle.Triangle(\n-            shape_type=\"Triangle\",\n-            triangle_type=\"EquilateralTriangle\"\n-        )\n-        assert isinstance(tri, equilateral_triangle.EquilateralTriangle)\n-\n-        tri = triangle.Triangle(\n-            shape_type=\"Triangle\",\n-            triangle_type=\"IsoscelesTriangle\"\n-        )\n-        assert isinstance(tri, isosceles_triangle.IsoscelesTriangle)\n-\n-        tri = triangle.Triangle(\n-            shape_type=\"Triangle\",\n-            triangle_type=\"ScaleneTriangle\"\n-        )\n-        assert isinstance(tri, scalene_triangle.ScaleneTriangle)\n-\n-        quad = Shape(\n-            shape_type=\"Quadrilateral\",\n-            quadrilateral_type=\"ComplexQuadrilateral\"\n-        )\n-        assert isinstance(quad, complex_quadrilateral.ComplexQuadrilateral)\n-\n-        quad = Shape(\n-            shape_type=\"Quadrilateral\",\n-            quadrilateral_type=\"SimpleQuadrilateral\"\n-        )\n-        assert isinstance(quad, simple_quadrilateral.SimpleQuadrilateral)\n-\n-        # No discriminator provided.\n-        err_msg = (\"Cannot deserialize input data due to missing discriminator. \"\n-                   \"The discriminator property '{}' is missing at path: ()\"\n-                   )\n-        with self.assertRaisesRegexp(\n-                petstore_api.ApiValueError,\n-                err_msg.format(\"shapeType\")\n-        ):\n-            Shape()\n-\n-        # invalid shape_type (first discriminator). 'Circle' does not exist in the model.\n-        err_msg = (\"Cannot deserialize input data due to invalid discriminator \"\n-                   \"value. The OpenAPI document has no mapping for discriminator \"\n-                   \"property '{}'='{}' at path: ()\"\n-                   )\n-        with self.assertRaisesRegexp(\n-                petstore_api.ApiValueError,\n-                err_msg.format(\"shapeType\", \"Circle\")\n-        ):\n-            Shape(shape_type=\"Circle\")\n+        # FIXME: construct object with mandatory attributes with example values\n+        # model = Shape()  # noqa: E501\n+        pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzU4OTU5", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422358959", "createdAt": "2020-06-02T05:48:36Z", "commit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0ODozNlrOGdi6Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTo0ODozNlrOGdi6Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYzMzgzMQ==", "bodyText": "Can you revert this file to the master branch version?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r433633831", "createdAt": "2020-06-02T05:48:36Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/test/test_triangle.py", "diffHunk": "@@ -44,12 +44,9 @@ def tearDown(self):\n \n     def testTriangle(self):\n         \"\"\"Test Triangle\"\"\"\n-        tri = Triangle(shape_type=\"Triangle\", triangle_type=\"EquilateralTriangle\")\n-        assert isinstance(tri, equilateral_triangle.EquilateralTriangle)\n-        tri = Triangle(shape_type=\"Triangle\", triangle_type=\"IsoscelesTriangle\")\n-        assert isinstance(tri, isosceles_triangle.IsoscelesTriangle)\n-        tri = Triangle(shape_type=\"Triangle\", triangle_type=\"ScaleneTriangle\")\n-        assert isinstance(tri, scalene_triangle.ScaleneTriangle)\n+        # FIXME: construct object with mandatory attributes with example values\n+        # model = Triangle()  # noqa: E501\n+        pass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31407d4d579e5a67a06f0991c07593ef42f82dd2"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45e8dd63dc30fa17342f1e6a4afa3a49792164a3", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/45e8dd63dc30fa17342f1e6a4afa3a49792164a3", "committedDate": "2020-06-02T14:04:39Z", "message": "Merge remote-tracking branch 'upstream/master' into python-experimental/named-arrays"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed9f53bd2a7a831c44b63d6dc2437b1d2ee9e389", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ed9f53bd2a7a831c44b63d6dc2437b1d2ee9e389", "committedDate": "2020-06-02T14:05:05Z", "message": "Reset samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b393c690b1295a380a9bf283e0407e0e61dbf50", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/9b393c690b1295a380a9bf283e0407e0e61dbf50", "committedDate": "2020-06-02T14:08:48Z", "message": "Regenerated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1ee2a5d9250f23df687126ca76be3877cb6ca44", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/c1ee2a5d9250f23df687126ca76be3877cb6ca44", "committedDate": "2020-06-02T14:20:04Z", "message": "Animal farm test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b00e42da28343979167040abac520a3e8663f9d", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/0b00e42da28343979167040abac520a3e8663f9d", "committedDate": "2020-06-02T14:56:46Z", "message": "Array of enums"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a8ad25fe6b6418f6093b5e9409f8af75597cc97", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/4a8ad25fe6b6418f6093b5e9409f8af75597cc97", "committedDate": "2020-06-02T15:12:58Z", "message": "Clean-up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a58959900538b103c426eb37dc1604bd9253d61e", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a58959900538b103c426eb37dc1604bd9253d61e", "committedDate": "2020-06-02T15:15:11Z", "message": "Clean-up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e29055e7ae872de75f0a313e2f8ba93ef8602fab", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e29055e7ae872de75f0a313e2f8ba93ef8602fab", "committedDate": "2020-06-02T15:21:11Z", "message": "Clean-up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49eb08f1f9370500c8e924f34de6400cd3ed1839", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/49eb08f1f9370500c8e924f34de6400cd3ed1839", "committedDate": "2020-06-02T16:55:09Z", "message": "Fix array type generation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyODc2MjQz", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-422876243", "createdAt": "2020-06-02T16:56:19Z", "commit": {"oid": "49eb08f1f9370500c8e924f34de6400cd3ed1839"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjo1NjoxOVrOGd7GLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjo1NjoxOVrOGd7GLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzMDEyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.warn(\"\\n\\n{}\\n\\n\", modelSchema);\n          \n          \n            \n                            LOGGER.warn(\"\\n\\n{}\\n\\n\", modelProperty);", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r434030127", "createdAt": "2020-06-02T16:56:19Z", "author": {"login": "jirikuncar"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -843,7 +841,20 @@ public CodegenModel fromModel(String name, Schema schema) {\n                         postProcessModelProperty(result, prop);\n                     }\n                 }\n+            } else if (result.isArrayModel) {\n+                LOGGER.warn(\"\\n\\n{}\\n\\n\", modelSchema);\n+                LOGGER.warn(\"\\n\\n{}\\n\\n\", modelProperty);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49eb08f1f9370500c8e924f34de6400cd3ed1839"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcbd31aa068b37e61509f8bd6cfc980b82806cb0", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/fcbd31aa068b37e61509f8bd6cfc980b82806cb0", "committedDate": "2020-06-03T11:10:14Z", "message": "simplify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebc799660d81e296518fd0d8a9747a3962d8d16a", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/ebc799660d81e296518fd0d8a9747a3962d8d16a", "committedDate": "2020-06-03T11:10:24Z", "message": "Merge remote-tracking branch 'upstream/master' into python-experimental/named-arrays"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f890db2af2da9ff2d3d40718ed0fa62ab66e431", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/1f890db2af2da9ff2d3d40718ed0fa62ab66e431", "committedDate": "2020-06-03T11:13:08Z", "message": "array model is not alias"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a2366a46879402088d35d14f963ea19abff64ac", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/7a2366a46879402088d35d14f963ea19abff64ac", "committedDate": "2020-06-03T11:25:27Z", "message": "Array model has one value field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5d37004d487bf68b58f0f2583bf67e1c4694fb0", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a5d37004d487bf68b58f0f2583bf67e1c4694fb0", "committedDate": "2020-06-03T13:39:11Z", "message": "ensure up-to-date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65a1c6db19a0435d67d977d7fea30141ff331b93", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/65a1c6db19a0435d67d977d7fea30141ff331b93", "committedDate": "2020-06-04T07:25:01Z", "message": "Merge branch 'master' into python-experimental/named-arrays"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjAyNzE1", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-424202715", "createdAt": "2020-06-04T08:11:25Z", "commit": {"oid": "65a1c6db19a0435d67d977d7fea30141ff331b93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODoxMToyNlrOGe6okg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODoxMToyNlrOGe6okg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3MTEyMg==", "bodyText": "Array models are making a model that aliases the array type, so I think that this should be true.\nLong term my goal is to have the ModelSimple classes inherrit from their base classes like str int etc.\nWhy do we need to set this to False for ArrayModels? Historically generateAliasAsModel applied only to Map and Array models in most generators. In python-experimental we apply it to those AND all primitives that they have validations and enums. Standard processing in the generators was to describe all these primitive models as their simple types like str, list. But if those models had validations and that data was lost in that process. So I added code to preserve that information and make object type models which preserve the validation information which would have been lost. That code hoists the model information into a required value variable.\nAfter I did that the CodegenModel class was updated to include validation information which previously had been missing. So in summary this code here is an older hack to preserve information. If we can use the existing ArrayModels as is that is preferable. It should define its datatype somewhere inside the CodegenModel and that should be used to set the ModelSimple data type in the python class for our made up value parameter.\nWe can do this by doing a check of the model type when we assign the openapi_types in ModelSimple.\nWe can check the data that is available by running the generator with a debugmodels flag.\nIn my comment here I explain how to do that.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r435071122", "createdAt": "2020-06-04T08:11:26Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -829,13 +827,13 @@ public CodegenModel fromModel(String name, Schema schema) {\n         result.unescapedDescription = simpleModelName(name);\n \n         // make non-object type models have one property so we can use it to store enums and validations\n-        if (result.isAlias || result.isEnum) {\n+        if (result.isAlias || result.isEnum || result.isArrayModel) {\n             Schema modelSchema = ModelUtils.getSchema(this.openAPI, result.name);\n             CodegenProperty modelProperty = fromProperty(\"value\", modelSchema);\n-            if (modelProperty.isEnum == true || modelProperty.hasValidation == true) {\n+            if (modelProperty.isEnum == true || modelProperty.hasValidation == true || result.isArrayModel) {\n                 // these models are non-object models with enums and/or validations\n                 // add a single property to the model so we can have a way to access validations\n-                result.isAlias = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65a1c6db19a0435d67d977d7fea30141ff331b93"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjE5ODI5", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-424219829", "createdAt": "2020-06-04T08:32:46Z", "commit": {"oid": "65a1c6db19a0435d67d977d7fea30141ff331b93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozMjo0NlrOGe7a9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODozMjo0NlrOGe7a9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NDAyMg==", "bodyText": "What is the dataType in this CodegenModel.dataType?\nThis model having vars of length 1 shows that my older hack is being used and that we have hoisted model information into a new value variable.\nHow about we keep the CodegenModel as-is (no hoisting) and use the information from one of these sources?\n\nCodegenModel.dataType\nCodegenModel.arrayModelType\nWe can see all of the properties that are available by looking at that class here\n\nWe can debug the CodegenModels and see the information in them by running the generate command with the -DdebugModels=true as shown here\nHow about in the classvars template here\nhttps://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/classvars.mustache#L115\nDoing a check to see if the model is an arrayModel\nand setting the datatype accordingly?\nIt would look like:\n{{#isArrayModel}}\n            'value': ({{{dataType}}},),  # noqa: E501\n{{/isArrayModel}}\n{{^isArrayModel}}\n{{#requiredVars}}\n            '{{name}}': ({{{dataType}}},),  # noqa: E501\n{{/requiredVars}}\n{{#optionalVars}}\n            '{{name}}': ({{{dataType}}},),  # noqa: E501\n{{/optionalVars}}\n{{/isArrayModel}}\n\nWe would also need to do a similar change in\nmethod_init_shared\nTo:\n\nnot loop over required an optional args if we have an array model, if we are that case, just set value as a required positional arg\nelse use our existing looping over variables\nin the docstring if we are an arraymodel set value as a required positional arg\n\nOur model doc mustache template would need a similar change to grab the data from dataType rather than vars.\n@jirikuncar\nWhat do you think about making these changes?\nIf you don't want to make them, we can keep using the existing code/(my older solution) where we shovel the model data into a value variable.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#discussion_r435084022", "createdAt": "2020-06-04T08:32:46Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/python/PythonClientExperimentalTest.java", "diffHunk": "@@ -270,7 +270,7 @@ public void arrayModelTest() {\n         Assert.assertEquals(cm.classname, \"sample.Sample\");\n         Assert.assertEquals(cm.classVarName, \"sample\");\n         Assert.assertEquals(cm.description, \"an array model\");\n-        Assert.assertEquals(cm.vars.size(), 0);\n+        Assert.assertEquals(cm.vars.size(), 1);  // there is one value for Childer definition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65a1c6db19a0435d67d977d7fea30141ff331b93"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7dbe80e26612007baf574f4ff888b6f1b27bb0a", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/a7dbe80e26612007baf574f4ff888b6f1b27bb0a", "committedDate": "2020-06-04T09:36:08Z", "message": "./bin/utils/ensure-up-to-date --batch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ca2f78e295ce1d94b42f6ebc55d9d5a64f1918", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/b2ca2f78e295ce1d94b42f6ebc55d9d5a64f1918", "committedDate": "2020-06-04T09:47:35Z", "message": "Solve issue with missing import for array model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3132aca2052d497ed9e1f3fbfeb90e46523c5562", "author": {"user": {"login": "jirikuncar", "name": "Jiri Kuncar"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/3132aca2052d497ed9e1f3fbfeb90e46523c5562", "committedDate": "2020-06-04T09:59:26Z", "message": "regenerate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTI4Nzg5", "url": "https://github.com/OpenAPITools/openapi-generator/pull/6493#pullrequestreview-424528789", "createdAt": "2020-06-04T14:48:35Z", "commit": {"oid": "3132aca2052d497ed9e1f3fbfeb90e46523c5562"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2178, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}