{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTY3MDg3", "number": 5738, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMjowOTozNlrODsacFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMjowOTozNlrODsacFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODk3MTA4OnYy", "diffSide": "LEFT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMjowOTozNlrOF9RKiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzozOTozM1rOF9qLbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4ODY4MQ==", "bodyText": "Doesn't the spec (at least 3.0.3 does as far as I can tell) require a discriminator?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5738#discussion_r399788681", "createdAt": "2020-03-29T12:09:36Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1255,18 +1254,18 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                         }\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n-                        refedWithoutDiscriminator.add(parentName);\n                     }\n                 } else {\n                     // not a ref, doing nothing\n                 }\n             }\n         }\n \n-        if (names.size() == 0 && refedWithoutDiscriminator.size() == 1) {\n-            LOGGER.warn(\"[deprecated] inheritance without use of 'discriminator.propertyName' is deprecated \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b47ef3cbf5512c481a2b053f5ee87e304df41f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyNTMzMA==", "bodyText": "It definitely does.\nI have no idea why this \"deprecated\" case is handled this way. What this PR does is making sure both parent and allParents consistently handle it the same way.\nWe might want to remove this deprecated logic in generator 5.0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5738#discussion_r399825330", "createdAt": "2020-03-29T17:06:45Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1255,18 +1254,18 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                         }\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n-                        refedWithoutDiscriminator.add(parentName);\n                     }\n                 } else {\n                     // not a ref, doing nothing\n                 }\n             }\n         }\n \n-        if (names.size() == 0 && refedWithoutDiscriminator.size() == 1) {\n-            LOGGER.warn(\"[deprecated] inheritance without use of 'discriminator.propertyName' is deprecated \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4ODY4MQ=="}, "originalCommit": {"oid": "d9b47ef3cbf5512c481a2b053f5ee87e304df41f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzkyNg==", "bodyText": "In that case, wouldn't it make sense to leave the warning in until the (language-agnostic part of the) generator just flat out rejects specs with missing discriminators?\nOr does it already do that?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5738#discussion_r399853926", "createdAt": "2020-03-29T21:06:37Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1255,18 +1254,18 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                         }\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n-                        refedWithoutDiscriminator.add(parentName);\n                     }\n                 } else {\n                     // not a ref, doing nothing\n                 }\n             }\n         }\n \n-        if (names.size() == 0 && refedWithoutDiscriminator.size() == 1) {\n-            LOGGER.warn(\"[deprecated] inheritance without use of 'discriminator.propertyName' is deprecated \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4ODY4MQ=="}, "originalCommit": {"oid": "d9b47ef3cbf5512c481a2b053f5ee87e304df41f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NTg2Mw==", "bodyText": "This warning still lives in getParentName(), where it was originally introduced.\nIn my earlier PR I duplicated the logic from getParentName() into this getAllParentsName() - together with the warning. Apparently it was not a robust approach, so i this PR I remove the duplicated logic, and just call getParentName from getAllParentsName.\nThis way getAllParentsName doesn't really care about any special handling in getParentName", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5738#discussion_r399855863", "createdAt": "2020-03-29T21:23:12Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1255,18 +1254,18 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                         }\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n-                        refedWithoutDiscriminator.add(parentName);\n                     }\n                 } else {\n                     // not a ref, doing nothing\n                 }\n             }\n         }\n \n-        if (names.size() == 0 && refedWithoutDiscriminator.size() == 1) {\n-            LOGGER.warn(\"[deprecated] inheritance without use of 'discriminator.propertyName' is deprecated \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4ODY4MQ=="}, "originalCommit": {"oid": "d9b47ef3cbf5512c481a2b053f5ee87e304df41f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3MzY1MA==", "bodyText": "the \"deprecated\" behavior is to support openapi 2.0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5738#discussion_r399973650", "createdAt": "2020-03-30T07:17:52Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1255,18 +1254,18 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                         }\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n-                        refedWithoutDiscriminator.add(parentName);\n                     }\n                 } else {\n                     // not a ref, doing nothing\n                 }\n             }\n         }\n \n-        if (names.size() == 0 && refedWithoutDiscriminator.size() == 1) {\n-            LOGGER.warn(\"[deprecated] inheritance without use of 'discriminator.propertyName' is deprecated \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4ODY4MQ=="}, "originalCommit": {"oid": "d9b47ef3cbf5512c481a2b053f5ee87e304df41f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE5ODUxMQ==", "bodyText": "Alright, if it's still handled in getParentName() that lgtm", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5738#discussion_r400198511", "createdAt": "2020-03-30T13:39:33Z", "author": {"login": "TiFu"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ModelUtils.java", "diffHunk": "@@ -1255,18 +1254,18 @@ public static String getParentName(ComposedSchema composedSchema, Map<String, Sc\n                         }\n                     } else {\n                         // not a parent since discriminator.propertyName is not set\n-                        refedWithoutDiscriminator.add(parentName);\n                     }\n                 } else {\n                     // not a ref, doing nothing\n                 }\n             }\n         }\n \n-        if (names.size() == 0 && refedWithoutDiscriminator.size() == 1) {\n-            LOGGER.warn(\"[deprecated] inheritance without use of 'discriminator.propertyName' is deprecated \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4ODY4MQ=="}, "originalCommit": {"oid": "d9b47ef3cbf5512c481a2b053f5ee87e304df41f"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3709, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}