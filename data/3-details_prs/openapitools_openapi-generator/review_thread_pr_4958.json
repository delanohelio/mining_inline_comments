{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMjkyOTM4", "number": 4958, "reviewThreads": {"totalCount": 90, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyMzoyN1rODX-jXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo1MjoxNFrODaQmPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY4NzAxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyMzoyN1rOFdksow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo1MDo0MVrOFdlYwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDI3NQ==", "bodyText": "Can you include the types of the list? Should it be list of str?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366554275", "createdAt": "2020-01-14T20:23:27Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTU3MA==", "bodyText": "Changing to:\nA list of strings. Each value is the name of a HTTP header that must be included in the HTTP signature calculation", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366565570", "createdAt": "2020-01-14T20:50:41Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDI3NQ=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY4OTQwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyNDoxOVrOFdkuKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo0MToyMVrOFdmsyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDY2Ng==", "bodyText": "Should this be type bytes or string? (In Python2.7 byes creates strings)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366554666", "createdAt": "2020-01-14T20:24:19Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NjIxNQ==", "bodyText": "Changing to:\nEach value is the name of a HTTP header that must be included in the HTTP signature calculation", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366566215", "createdAt": "2020-01-14T20:52:14Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDY2Ng=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4NzA4MQ==", "bodyText": "It is a base-64 encoded representation of the signature. I have updated code comments.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366587081", "createdAt": "2020-01-14T21:41:21Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDY2Ng=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY5MTMyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyNTowN1rOFdkvaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToyNzoxNVrOFdmUvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDk4Nw==", "bodyText": "What type is this? Int? Can you add the type here", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366554987", "createdAt": "2020-01-14T20:25:07Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MDkyNA==", "bodyText": "updated documentation", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366580924", "createdAt": "2020-01-14T21:27:15Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDk4Nw=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY5NDM2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyNjoyNFrOFdkxTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo1NTozM1rOFdlg3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NTQ3MQ==", "bodyText": "How about for i, k in enumerate(signed_headers):?\nThen you don't need to create i, and we never use _ (value so no need to include it in iteration)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366555471", "createdAt": "2020-01-14T20:26:24Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.\n         :return: instance of digest object \n         \"\"\"\n \n+        i = 0\n+        headers_value = \"\"\n+        is_created_set = False\n+        for key, _ in signed_headers.items():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NzY0NA==", "bodyText": "good suggestion.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366567644", "createdAt": "2020-01-14T20:55:33Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.\n         :return: instance of digest object \n         \"\"\"\n \n+        i = 0\n+        headers_value = \"\"\n+        is_created_set = False\n+        for key, _ in signed_headers.items():", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NTQ3MQ=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDcwMTMwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyOTowMVrOFdk1iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo1ODoyNVrOFdllbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NjU1Mg==", "bodyText": "Can you describe the return type?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366556552", "createdAt": "2020-01-14T20:29:01Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2ODgxMw==", "bodyText": "yes, doing", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366568813", "createdAt": "2020-01-14T20:58:25Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NjU1Mg=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDcxMjQ5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDozMzoyOVrOFdk8aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowMzo1MFrOFdluMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1ODMxMw==", "bodyText": "Why do we have 3 lines defining auth_str?\nWhy not just use this?\nauth_str = \"Signature keyId=\\\"{0}\\\",algorithm=\\\"{1}\\\"\".format(self.configuration.key_id, self.configuration.signing_scheme)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366558313", "createdAt": "2020-01-14T20:33:29Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.\n         :return: instance of digest object \n         \"\"\"\n \n+        i = 0\n+        headers_value = \"\"\n+        is_created_set = False\n+        for key, _ in signed_headers.items():\n+            key = key.lower()\n+            if i > 0:\n+                headers_value = headers_value + \" \"\n+            headers_value = headers_value + key\n+            if key == '(created)':\n+                is_created_set = True\n+            i += 1\n+\n         auth_str = \"\"\n         auth_str = auth_str + \"Signature\"\n \n         auth_str = auth_str + \" \" + \"keyId=\\\"\" + self.configuration.key_id + \"\\\",\" + \"algorithm=\\\"\" +\n-            self.configuration.signing_scheme + \"\\\",\" + \"headers=\\\"(request-target)\"\n+            self.configuration.signing_scheme + \"\\\",\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MTA1OA==", "bodyText": "simplifying, thanks.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366571058", "createdAt": "2020-01-14T21:03:50Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.\n         :return: instance of digest object \n         \"\"\"\n \n+        i = 0\n+        headers_value = \"\"\n+        is_created_set = False\n+        for key, _ in signed_headers.items():\n+            key = key.lower()\n+            if i > 0:\n+                headers_value = headers_value + \" \"\n+            headers_value = headers_value + key\n+            if key == '(created)':\n+                is_created_set = True\n+            i += 1\n+\n         auth_str = \"\"\n         auth_str = auth_str + \"Signature\"\n \n         auth_str = auth_str + \" \" + \"keyId=\\\"\" + self.configuration.key_id + \"\\\",\" + \"algorithm=\\\"\" +\n-            self.configuration.signing_scheme + \"\\\",\" + \"headers=\\\"(request-target)\"\n+            self.configuration.signing_scheme + \"\\\",\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1ODMxMw=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDcyMzI4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDozNzo0N1rOFdlDUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowNToyNFrOFdlwpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MDA4Mw==", "bodyText": "Can you move this line higher than the if i > 0?\nIt is confusing because this lower line is run in the i==0 use case.\nWhat about using this?\n            headers_value += key\n            if i > 0:\n                headers_value += \" \"", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366560083", "createdAt": "2020-01-14T20:37:47Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.\n         :return: instance of digest object \n         \"\"\"\n \n+        i = 0\n+        headers_value = \"\"\n+        is_created_set = False\n+        for key, _ in signed_headers.items():\n+            key = key.lower()\n+            if i > 0:\n+                headers_value = headers_value + \" \"\n+            headers_value = headers_value + key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MTY4NA==", "bodyText": "good suggestion", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366571684", "createdAt": "2020-01-14T21:05:24Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.\n         :return: instance of digest object \n         \"\"\"\n \n+        i = 0\n+        headers_value = \"\"\n+        is_created_set = False\n+        for key, _ in signed_headers.items():\n+            key = key.lower()\n+            if i > 0:\n+                headers_value = headers_value + \" \"\n+            headers_value = headers_value + key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MDA4Mw=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDcyNjg1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDozOTowNlrOFdlFeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowNTozMlrOFdlw4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MDYzMw==", "bodyText": "Why not combine the next 3 lines and use \"blah..\".format(args) ?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366560633", "createdAt": "2020-01-14T20:39:06Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.\n         :return: instance of digest object \n         \"\"\"\n \n+        i = 0\n+        headers_value = \"\"\n+        is_created_set = False\n+        for key, _ in signed_headers.items():\n+            key = key.lower()\n+            if i > 0:\n+                headers_value = headers_value + \" \"\n+            headers_value = headers_value + key\n+            if key == '(created)':\n+                is_created_set = True\n+            i += 1\n+\n         auth_str = \"\"\n         auth_str = auth_str + \"Signature\"\n \n         auth_str = auth_str + \" \" + \"keyId=\\\"\" + self.configuration.key_id + \"\\\",\" + \"algorithm=\\\"\" +\n-            self.configuration.signing_scheme + \"\\\",\" + \"headers=\\\"(request-target)\"\n+            self.configuration.signing_scheme + \"\\\",\"\n+        if is_created_set:\n+            auth_str = auth_str + \"created={0},\".format(created_ts)\n+        auth_str = auth_str + \"headers=\\\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MTc0NA==", "bodyText": "yes", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366571744", "createdAt": "2020-01-14T21:05:32Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -699,23 +699,38 @@ class ApiClient(object):\n \n         return ss\n \n-    def get_authorization_header(self, hdrs, signed_msg):\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n         \"\"\"\n         Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n         \n-        :param hdrs : The list of signed HTTP Headers\n-        :param signed_msg: Signed Digest\n+        :param signed_headers : The list of signed HTTP Headers.\n+        :param signed_msg: Signed Digest.\n+        :param created_ts: The time when the signature was created, as a UNIX timestamp.\n         :return: instance of digest object \n         \"\"\"\n \n+        i = 0\n+        headers_value = \"\"\n+        is_created_set = False\n+        for key, _ in signed_headers.items():\n+            key = key.lower()\n+            if i > 0:\n+                headers_value = headers_value + \" \"\n+            headers_value = headers_value + key\n+            if key == '(created)':\n+                is_created_set = True\n+            i += 1\n+\n         auth_str = \"\"\n         auth_str = auth_str + \"Signature\"\n \n         auth_str = auth_str + \" \" + \"keyId=\\\"\" + self.configuration.key_id + \"\\\",\" + \"algorithm=\\\"\" +\n-            self.configuration.signing_scheme + \"\\\",\" + \"headers=\\\"(request-target)\"\n+            self.configuration.signing_scheme + \"\\\",\"\n+        if is_created_set:\n+            auth_str = auth_str + \"created={0},\".format(created_ts)\n+        auth_str = auth_str + \"headers=\\\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MDYzMw=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDczNzc2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo0Mjo0OVrOFdlMDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowNjowOVrOFdlx4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MjMxNw==", "bodyText": "Can you move tis import to the top?\nPer pep8 imports should be at the top of the file https://www.python.org/dev/peps/pep-0008/#imports", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366562317", "createdAt": "2020-01-14T20:42:49Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MjAwMw==", "bodyText": "yes", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366572003", "createdAt": "2020-01-14T21:06:09Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MjMxNw=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc0MzA1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo0NDo0NVrOFdlPRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowNjozMlrOFdlydw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MzE0Mg==", "bodyText": "Can you add spaces around the equal sign on this line and the next line after the variable assignment?\ncdate = blah\ncreated = blah", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366563142", "createdAt": "2020-01-14T20:44:45Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MjE1MQ==", "bodyText": "yes", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366572151", "createdAt": "2020-01-14T21:06:32Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MzE0Mg=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc0NzM5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo0NjoyOVrOFdlSBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowODozN1rOFdl16A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2Mzg0NA==", "bodyText": "Can you add type descriptions to these params?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366563844", "createdAt": "2020-01-14T20:46:29Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MzAzMg==", "bodyText": "yes, doing.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366573032", "createdAt": "2020-01-14T21:08:37Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2Mzg0NA=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc1NDQ5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo0OToxNVrOFdlWmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1MToyMFrOFdm9cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTAxNg==", "bodyText": "Can you add type descriptions to these params?\nb64encode(signature) does not return type bytes in python2.7, it returns type string", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366565016", "createdAt": "2020-01-14T20:49:15Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created=now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = self.get_str_to_sign(signed_headers)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The message to be hashed with a cryptographic hash.\n+        :return: The message digest encoded as a byte string. \n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: digest of the HTTP message.\n+        :return: the HTTP message signature encoded as a byte string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3NDM0MQ==", "bodyText": "doing.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366574341", "createdAt": "2020-01-14T21:11:45Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created=now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = self.get_str_to_sign(signed_headers)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The message to be hashed with a cryptographic hash.\n+        :return: The message digest encoded as a byte string. \n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: digest of the HTTP message.\n+        :return: the HTTP message signature encoded as a byte string.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTAxNg=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MTM0Nw==", "bodyText": "updated description. It is actually a hashing object.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366591347", "createdAt": "2020-01-14T21:51:20Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created=now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = self.get_str_to_sign(signed_headers)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The message to be hashed with a cryptographic hash.\n+        :return: The message digest encoded as a byte string. \n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: digest of the HTTP message.\n+        :return: the HTTP message signature encoded as a byte string.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTAxNg=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc3NTc0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo1NzoyOVrOFdlj8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToxMzo0M1rOFdl98g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2ODQzNA==", "bodyText": "Can you turn these into a constant at the top of this module?\nSomething like:\nECDSA_KEY_SIGNING_ALGORITHMS =  {'fips-186-3', 'deterministic-rfc6979'}\nSet inclusion should be quicker than list inclusion and these values are unchanging across multiple function calls", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366568434", "createdAt": "2020-01-14T20:57:29Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created=now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = self.get_str_to_sign(signed_headers)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The message to be hashed with a cryptographic hash.\n+        :return: The message digest encoded as a byte string. \n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: digest of the HTTP message.\n+        :return: the HTTP message signature encoded as a byte string.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ['fips-186-3', 'deterministic-rfc6979']:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3NTA5MA==", "bodyText": "doing.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366575090", "createdAt": "2020-01-14T21:13:43Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created=now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = self.get_str_to_sign(signed_headers)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The message to be hashed with a cryptographic hash.\n+        :return: The message digest encoded as a byte string. \n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: digest of the HTTP message.\n+        :return: the HTTP message signature encoded as a byte string.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ['fips-186-3', 'deterministic-rfc6979']:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2ODQzNA=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc3NzkzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo1ODoyMlrOFdllTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToyMjowM1rOFdmLpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2ODc4Mg==", "bodyText": "Can you add types to these parameter descriptions?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366568782", "createdAt": "2020-01-14T20:58:22Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created=now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = self.get_str_to_sign(signed_headers)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The message to be hashed with a cryptographic hash.\n+        :return: The message digest encoded as a byte string. \n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: digest of the HTTP message.\n+        :return: the HTTP message signature encoded as a byte string.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ['fips-186-3', 'deterministic-rfc6979']:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_str_to_sign(self, signed_headers):\n+        \"\"\"\n+        Generate and return a string value representing the HTTP request to be signed.\n+\n+        :param signed_headers: The HTTP Headers to be signed.\n+        :return: instance of digest object ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODU5Nw==", "bodyText": "completely removed function. It can be simplified and inline.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366578597", "createdAt": "2020-01-14T21:22:03Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created=now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = self.get_str_to_sign(signed_headers)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The message to be hashed with a cryptographic hash.\n+        :return: The message digest encoded as a byte string. \n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: digest of the HTTP message.\n+        :return: the HTTP message signature encoded as a byte string.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ['fips-186-3', 'deterministic-rfc6979']:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_str_to_sign(self, signed_headers):\n+        \"\"\"\n+        Generate and return a string value representing the HTTP request to be signed.\n+\n+        :param signed_headers: The HTTP Headers to be signed.\n+        :return: instance of digest object ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2ODc4Mg=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc3OTYyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo1OTowNFrOFdlmYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToyMjo0MlrOFdmMqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2OTA1Ng==", "bodyText": "How about for i, (key, value) in enumerate(signed_headers.items()):?\nThen you don't need to create i and increment it", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366569056", "createdAt": "2020-01-14T20:59:04Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created=now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = self.get_str_to_sign(signed_headers)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The message to be hashed with a cryptographic hash.\n+        :return: The message digest encoded as a byte string. \n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: digest of the HTTP message.\n+        :return: the HTTP message signature encoded as a byte string.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ['fips-186-3', 'deterministic-rfc6979']:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_str_to_sign(self, signed_headers):\n+        \"\"\"\n+        Generate and return a string value representing the HTTP request to be signed.\n+\n+        :param signed_headers: The HTTP Headers to be signed.\n+        :return: instance of digest object \n+        \"\"\"\n+        ss = \"\"\n+        i = 0\n+        for key, value in signed_headers.items():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODg1OA==", "bodyText": "doing", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366578858", "createdAt": "2020-01-14T21:22:42Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created=now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = self.get_str_to_sign(signed_headers)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The message to be hashed with a cryptographic hash.\n+        :return: The message digest encoded as a byte string. \n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: digest of the HTTP message.\n+        :return: the HTTP message signature encoded as a byte string.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ['fips-186-3', 'deterministic-rfc6979']:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_str_to_sign(self, signed_headers):\n+        \"\"\"\n+        Generate and return a string value representing the HTTP request to be signed.\n+\n+        :param signed_headers: The HTTP Headers to be signed.\n+        :return: instance of digest object \n+        \"\"\"\n+        ss = \"\"\n+        i = 0\n+        for key, value in signed_headers.items():", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2OTA1Ng=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc4NTUxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowMDo1N1rOFdlp2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToyMjo1NVrOFdmM7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2OTk0Nw==", "bodyText": "Similar comment to what I say below:\nCan you move this line higher than the if i > 0?\nIt is confusing because this lower line is run in the i==0 use case.\nWhat about using this?\n            ss += \"{0}: {1}\".format(key.lower(), value)\n            if i > 0:\n                ss += \"\\n\"", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366569947", "createdAt": "2020-01-14T21:00:57Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created=now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = self.get_str_to_sign(signed_headers)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The message to be hashed with a cryptographic hash.\n+        :return: The message digest encoded as a byte string. \n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: digest of the HTTP message.\n+        :return: the HTTP message signature encoded as a byte string.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ['fips-186-3', 'deterministic-rfc6979']:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_str_to_sign(self, signed_headers):\n+        \"\"\"\n+        Generate and return a string value representing the HTTP request to be signed.\n+\n+        :param signed_headers: The HTTP Headers to be signed.\n+        :return: instance of digest object \n+        \"\"\"\n+        ss = \"\"\n+        i = 0\n+        for key, value in signed_headers.items():\n+            if i > 0:\n+                ss = ss + \"\\n\"\n+            ss = ss + key.lower() + \": \" + value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3ODkyNA==", "bodyText": "doing.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366578924", "createdAt": "2020-01-14T21:22:55Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +561,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : resource path which is the api being called upon.\n+        :param method: the HTTP request method.\n+        :param headers: the request headers.\n+        :param body: body passed in the http request.\n+        :param query_params: query parameters used by the API.\n+        :return: instance of digest object \n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        from email.utils import formatdate\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate=formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created=now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = self.get_str_to_sign(signed_headers)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The message to be hashed with a cryptographic hash.\n+        :return: The message digest encoded as a byte string. \n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: digest of the HTTP message.\n+        :return: the HTTP message signature encoded as a byte string.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ['fips-186-3', 'deterministic-rfc6979']:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_str_to_sign(self, signed_headers):\n+        \"\"\"\n+        Generate and return a string value representing the HTTP request to be signed.\n+\n+        :param signed_headers: The HTTP Headers to be signed.\n+        :return: instance of digest object \n+        \"\"\"\n+        ss = \"\"\n+        i = 0\n+        for key, value in signed_headers.items():\n+            if i > 0:\n+                ss = ss + \"\\n\"\n+            ss = ss + key.lower() + \": \" + value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2OTk0Nw=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc5MTMxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowMzoyNFrOFdltig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTo1NjowMlrOFdnFRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MDg5MA==", "bodyText": "Do these values already exist as constants in your imported crypto libraries?\nWhy not use those constants rather than strings?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366570890", "createdAt": "2020-01-14T21:03:24Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,11 +30,54 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3OTA3OQ==", "bodyText": "I am checking if they exist.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366579079", "createdAt": "2020-01-14T21:23:17Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,11 +30,54 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MDg5MA=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MzM1MQ==", "bodyText": "I searched in the source code, it appears these strings are hard-coded. There is no constant. Marking as resolved for now.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366593351", "createdAt": "2020-01-14T21:56:02Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,11 +30,54 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MDg5MA=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDc5Mjk3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowNDowN1rOFdluqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoxNzozOVrOFdnorQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MTE3Nw==", "bodyText": "Does this value already exist as a constant in your imported crypto libraries?\nWhy not use that constant rather than a string here?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366571177", "createdAt": "2020-01-14T21:04:07Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,11 +30,54 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MzU1NA==", "bodyText": "I searched in the source code, it appears these strings are hard-coded. There is no constant. Marking as resolved for now.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366593554", "createdAt": "2020-01-14T21:56:32Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,11 +30,54 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MTE3Nw=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMjQxMw==", "bodyText": "Good plan", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366602413", "createdAt": "2020-01-14T22:17:39Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,11 +30,54 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MTE3Nw=="}, "originalCommit": {"oid": "e4c0e1ae56d9a5d1fd6e9f55a467e5556b47f5fe"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAyMjExOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjozMTo0MlrOFdn9aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMjozNjo0MFrOFdr3dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNzcyMw==", "bodyText": "How about refactoring lines 586 to 631 into a function called get_signed_header_info?\nAll of that code is only focused on generating those two dictionaries\nLike so:\nsigned_headers, signed_headers_dict = get_signed_header_info(body, self.configuration, method)\nThat would shorten our get_http_signature_headers and help make it more understandable.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366607723", "createdAt": "2020-01-14T22:31:42Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +566,159 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac1af1347e914bd8ffe84317cdf177176142475"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3MTczNQ==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366671735", "createdAt": "2020-01-15T02:36:40Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +566,159 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNzcyMw=="}, "originalCommit": {"oid": "fac1af1347e914bd8ffe84317cdf177176142475"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTAyODgwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjozNDozMlrOFdoBgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMTo0Njo1OFrOFdrPlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwODc2OA==", "bodyText": "How about we change to this?\nsigned_header_dict['Authorization'] = self.get_authorization_header(\n   signed_headers, b64_signed_msg, created)\n\nThat was we can delete the line above this too\nIt looks like we don't need the string interpolation here because our assigned value is already a string.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366608768", "createdAt": "2020-01-14T22:34:32Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +566,159 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac1af1347e914bd8ffe84317cdf177176142475"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY2MTUyNw==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366661527", "createdAt": "2020-01-15T01:46:58Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +566,159 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwODc2OA=="}, "originalCommit": {"oid": "fac1af1347e914bd8ffe84317cdf177176142475"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTA0MDQ0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjozOToxNFrOFdoIaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzowMzowOVrOFdopUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMDUzNw==", "bodyText": "This returns a tuple of (digest, prefix) can you describe both returned params and types in this docstring?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366610537", "createdAt": "2020-01-14T22:39:14Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +566,159 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: The hashing object that contains the cryptographic digest of the HTTP request. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac1af1347e914bd8ffe84317cdf177176142475"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxODk2Mg==", "bodyText": "updated documentation.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366618962", "createdAt": "2020-01-14T23:03:09Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +566,159 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+\n+{{#hasHttpSignatureMethods}}\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers = {}\n+        signed_header_dict = {}\n+        for hdr_key in self.configuration.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                signed_header_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                signed_header_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                signed_header_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers[hdr_key] = value\n+\n+        if len(self.configuration.signed_headers) == 0:\n+            signed_headers['(created)'] = created\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        auth_header = self.get_authorization_header(signed_headers, b64_signed_msg, created)\n+        signed_header_dict['Authorization'] = '{0}'.format(auth_header)\n+\n+        return signed_header_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: The hashing object that contains the cryptographic digest of the HTTP request. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMDUzNw=="}, "originalCommit": {"oid": "fac1af1347e914bd8ffe84317cdf177176142475"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTA2OTUxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjo1MTo1NlrOFdoaSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMDoxNDo1N1rOFeKecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNTExMw==", "bodyText": "Just a general question, not necessary to do:\nWhat do you think about moving these constants and\n\nget_http_signature_headers\nget_message_digest\nsign_digest\nget_authorization_header\nload_private_key\n\ninto a package called signing.py?\nThat way our users could use something like:\nfrom petstore_api import signing\n\n# Configure API client with HTTP signature authentication:\nconf = petstore_api.Configuration(\n  key_id='my-key-id',\n  private_key_path='rsa.pem',\n  signing_scheme=signing.scheme_hs2019,\n  signing_algorithm=signing.algorithm_PSS,\n  signed_headers=['(request-target)', '(created)', 'host', 'date', 'Content-Type', 'Digest']\n)\n\nThese constants and functions seem much more related to signing than the api_client\nWhat do you think?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366615113", "createdAt": "2020-01-14T22:51:56Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -57,6 +64,10 @@ class ApiClient(object):\n     PRIMITIVE_TYPES = (\n         (float, bool, six.binary_type, six.text_type) + six.integer_types\n     )\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac1af1347e914bd8ffe84317cdf177176142475"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNzI4Mw==", "bodyText": "Sure, I can do that. Where would you commit the signing.py file in GIT? Do you mean to create a signing.mustache template that generates signing.py?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366617283", "createdAt": "2020-01-14T22:58:04Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -57,6 +64,10 @@ class ApiClient(object):\n     PRIMITIVE_TYPES = (\n         (float, bool, six.binary_type, six.text_type) + six.integer_types\n     )\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNTExMw=="}, "originalCommit": {"oid": "fac1af1347e914bd8ffe84317cdf177176142475"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxOTI0OQ==", "bodyText": "Yup it would be a signing.mustache file that we would add in the templates folder and the .java code generator", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366619249", "createdAt": "2020-01-14T23:03:57Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -57,6 +64,10 @@ class ApiClient(object):\n     PRIMITIVE_TYPES = (\n         (float, bool, six.binary_type, six.text_type) + six.integer_types\n     )\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNTExMw=="}, "originalCommit": {"oid": "fac1af1347e914bd8ffe84317cdf177176142475"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMDE4Mg==", "bodyText": "It may make sense to only conditionally use the template if we are using hasHttpSignatureMethods", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r366620182", "createdAt": "2020-01-14T23:06:56Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -57,6 +64,10 @@ class ApiClient(object):\n     PRIMITIVE_TYPES = (\n         (float, bool, six.binary_type, six.text_type) + six.integer_types\n     )\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNTExMw=="}, "originalCommit": {"oid": "fac1af1347e914bd8ffe84317cdf177176142475"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE3MzIzNA==", "bodyText": "Great job creating that module! Can you mark this as resolved?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367173234", "createdAt": "2020-01-16T00:14:57Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -57,6 +64,10 @@ class ApiClient(object):\n     PRIMITIVE_TYPES = (\n         (float, bool, six.binary_type, six.text_type) + six.integer_types\n     )\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNTExMw=="}, "originalCommit": {"oid": "fac1af1347e914bd8ffe84317cdf177176142475"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzYzNzEyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo0NTozNVrOFeA5Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo0OTo1NlrOFeBBpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxNjI2Ng==", "bodyText": "Could we move lines 647 to 650 (body value checking and assignment) into get_signed_header_info?\nbody is only used in that function so handling the values and mutating it is more associated with that code.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367016266", "createdAt": "2020-01-15T17:45:35Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c153085d122ab88923457911c8d9411573c317"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxODQwNg==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367018406", "createdAt": "2020-01-15T17:49:56Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxNjI2Ng=="}, "originalCommit": {"oid": "c4c153085d122ab88923457911c8d9411573c317"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzY0ODUwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo0OTowOFrOFeBANw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo1NjoyN1rOFeBN1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxODAzOQ==", "bodyText": "Can we remove the created input argument from get_authorization_headers?\nIt is already accessible with created = signed_headers_dict['(created)'] which we can use inside get_authorization_headers.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367018039", "createdAt": "2020-01-15T17:49:08Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg, created)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c153085d122ab88923457911c8d9411573c317"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMTUyNg==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367021526", "createdAt": "2020-01-15T17:56:27Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg, created)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxODAzOQ=="}, "originalCommit": {"oid": "c4c153085d122ab88923457911c8d9411573c317"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzY1NzcwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo1MjoyOFrOFeBGVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo1OTowM1rOFeBSlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxOTYwNg==", "bodyText": "how about rather than using a boolean here we just use a variable which stores the created_ts?\nWe don't need to pass in created_ts because it already exists in our signed_headers dict.\nHere, we could do:\ncreated_ts = signed_headers.get('(created)')", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367019606", "createdAt": "2020-01-15T17:52:28Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg, created)\n+\n+        return request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+          The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+          The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+          'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n+        \"\"\"\n+        Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+        \n+        :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+           must be included in the HTTP signature calculation.\n+        :param signed_msg: A base-64 encoded string representation of the signature.\n+        :param created_ts: The string representation of the time when the signature was created,\n+           as a UNIX timestamp value.\n+        :return: The string value of the 'Authorization' header, representing the signature\n+           of the HTTP request.\n+        \"\"\"\n+\n+        headers_value = \"\"\n+        is_created_set = False", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c153085d122ab88923457911c8d9411573c317"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMjc0Mw==", "bodyText": "done, thanks for the comments.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367022743", "createdAt": "2020-01-15T17:59:03Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg, created)\n+\n+        return request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+          The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+          The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+          'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n+        \"\"\"\n+        Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+        \n+        :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+           must be included in the HTTP signature calculation.\n+        :param signed_msg: A base-64 encoded string representation of the signature.\n+        :param created_ts: The string representation of the time when the signature was created,\n+           as a UNIX timestamp value.\n+        :return: The string value of the 'Authorization' header, representing the signature\n+           of the HTTP request.\n+        \"\"\"\n+\n+        headers_value = \"\"\n+        is_created_set = False", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxOTYwNg=="}, "originalCommit": {"oid": "c4c153085d122ab88923457911c8d9411573c317"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzY2MTM1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo1Mzo0MVrOFeBIpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODowMDozNFrOFeBVLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMDE5Ng==", "bodyText": "how about changing this to if created_ts is not None:?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367020196", "createdAt": "2020-01-15T17:53:41Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg, created)\n+\n+        return request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+          The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+          The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+          'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n+        \"\"\"\n+        Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+        \n+        :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+           must be included in the HTTP signature calculation.\n+        :param signed_msg: A base-64 encoded string representation of the signature.\n+        :param created_ts: The string representation of the time when the signature was created,\n+           as a UNIX timestamp value.\n+        :return: The string value of the 'Authorization' header, representing the signature\n+           of the HTTP request.\n+        \"\"\"\n+\n+        headers_value = \"\"\n+        is_created_set = False\n+        for i, key in enumerate(signed_headers)\n+            key = key.lower()\n+            headers_value += key\n+            if i > 0:\n+                headers_value += \" \"\n+            if key == '(created)':\n+                is_created_set = True\n+\n+        auth_str = \"Signature keyId=\\\"{0}\\\",algorithm=\\\"{1}\\\",\"\n+            .format(self.configuration.key_id, self.configuration.signing_scheme)\n+        if is_created_set:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c153085d122ab88923457911c8d9411573c317"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMzQwNw==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367023407", "createdAt": "2020-01-15T18:00:34Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg, created)\n+\n+        return request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+          The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+          The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+          'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n+        \"\"\"\n+        Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+        \n+        :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+           must be included in the HTTP signature calculation.\n+        :param signed_msg: A base-64 encoded string representation of the signature.\n+        :param created_ts: The string representation of the time when the signature was created,\n+           as a UNIX timestamp value.\n+        :return: The string value of the 'Authorization' header, representing the signature\n+           of the HTTP request.\n+        \"\"\"\n+\n+        headers_value = \"\"\n+        is_created_set = False\n+        for i, key in enumerate(signed_headers)\n+            key = key.lower()\n+            headers_value += key\n+            if i > 0:\n+                headers_value += \" \"\n+            if key == '(created)':\n+                is_created_set = True\n+\n+        auth_str = \"Signature keyId=\\\"{0}\\\",algorithm=\\\"{1}\\\",\"\n+            .format(self.configuration.key_id, self.configuration.signing_scheme)\n+        if is_created_set:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMDE5Ng=="}, "originalCommit": {"oid": "c4c153085d122ab88923457911c8d9411573c317"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzY3MDA3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo1NjozMFrOFeBN9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODowMToxNFrOFeBWfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMTU1OQ==", "bodyText": "How about we delete this if statement?\nIf we use the above  created_ts = signed_headers.get('(created)') then we don't need this if statement.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367021559", "createdAt": "2020-01-15T17:56:30Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg, created)\n+\n+        return request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+          The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+          The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+          'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n+        \"\"\"\n+        Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+        \n+        :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+           must be included in the HTTP signature calculation.\n+        :param signed_msg: A base-64 encoded string representation of the signature.\n+        :param created_ts: The string representation of the time when the signature was created,\n+           as a UNIX timestamp value.\n+        :return: The string value of the 'Authorization' header, representing the signature\n+           of the HTTP request.\n+        \"\"\"\n+\n+        headers_value = \"\"\n+        is_created_set = False\n+        for i, key in enumerate(signed_headers)\n+            key = key.lower()\n+            headers_value += key\n+            if i > 0:\n+                headers_value += \" \"\n+            if key == '(created)':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c153085d122ab88923457911c8d9411573c317"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMzc0Mg==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367023742", "createdAt": "2020-01-15T18:01:14Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,180 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg, created)\n+\n+        return request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+          The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+          The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+          'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg, created_ts):\n+        \"\"\"\n+        Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+        \n+        :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+           must be included in the HTTP signature calculation.\n+        :param signed_msg: A base-64 encoded string representation of the signature.\n+        :param created_ts: The string representation of the time when the signature was created,\n+           as a UNIX timestamp value.\n+        :return: The string value of the 'Authorization' header, representing the signature\n+           of the HTTP request.\n+        \"\"\"\n+\n+        headers_value = \"\"\n+        is_created_set = False\n+        for i, key in enumerate(signed_headers)\n+            key = key.lower()\n+            headers_value += key\n+            if i > 0:\n+                headers_value += \" \"\n+            if key == '(created)':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMTU1OQ=="}, "originalCommit": {"oid": "c4c153085d122ab88923457911c8d9411573c317"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzY4MzgwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODowMToyMlrOFeBWuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODoyNzo1N1rOFeCG3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMzgwMA==", "bodyText": "Optionally how about changing this for loop into:\nlower_keys = [k.lower() for k in signed_headers]\nheaders_value = \" \".join(lower_keys)\n\nThat will save us two lines", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367023800", "createdAt": "2020-01-15T18:01:22Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,179 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+          The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+          The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+          'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg):\n+        \"\"\"\n+        Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+        \n+        :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+           must be included in the HTTP signature calculation.\n+        :param signed_msg: A base-64 encoded string representation of the signature.\n+        :return: The string value of the 'Authorization' header, representing the signature\n+           of the HTTP request.\n+        \"\"\"\n+\n+        headers_value = \"\"\n+        is_created_set = False\n+        for i, key in enumerate(signed_headers)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b9d272ec7cff74b1fcb3c4d52e02a2e0d562cca"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzNjEyNA==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367036124", "createdAt": "2020-01-15T18:27:57Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,179 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+          The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+          The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+          'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg):\n+        \"\"\"\n+        Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+        \n+        :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+           must be included in the HTTP signature calculation.\n+        :param signed_msg: A base-64 encoded string representation of the signature.\n+        :return: The string value of the 'Authorization' header, representing the signature\n+           of the HTTP request.\n+        \"\"\"\n+\n+        headers_value = \"\"\n+        is_created_set = False\n+        for i, key in enumerate(signed_headers)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMzgwMA=="}, "originalCommit": {"oid": "9b9d272ec7cff74b1fcb3c4d52e02a2e0d562cca"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzY5MzMxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODowNDo1NVrOFeBc1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODoyNzo0MlrOFeCGbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyNTM2Nw==", "bodyText": "How about changing this to something like?\nheader_items = [\"{0}: {1}\".format(k.lower(), v) for k, v in signed_headers_dict.items()]\nstring_to_sign = \"\\n\".join(header_items)\n\nThat saves us 3 lines", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367025367", "createdAt": "2020-01-15T18:04:55Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,179 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b9d272ec7cff74b1fcb3c4d52e02a2e0d562cca"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzNjAxMw==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367036013", "createdAt": "2020-01-15T18:27:42Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -542,3 +569,179 @@ class ApiClient(object):\n                     raise ApiValueError(\n                         'Authentication token must be in `query` or `header`'\n                     )\n+{{#hasHttpSignatureMethods}}\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        string_to_sign = \"\"\n+        for i, (key, value) in enumerate(signed_headers_dict.items()):\n+            string_to_sign += \"{0}: {1}\".format(key.lower(), value)\n+            if i > 0:\n+                string_to_sign += \"\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyNTM2Nw=="}, "originalCommit": {"oid": "9b9d272ec7cff74b1fcb3c4d52e02a2e0d562cca"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzc2NTk4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODozMDowNFrOFeCKsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODo1MjozMVrOFeCyTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzNzEwNw==", "bodyText": "Can you also add the condition self.signature_max_validity is None into this if statement?\nThen you can delete the inner if statement and just raise the exception.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367037107", "createdAt": "2020-01-15T18:30:04Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -121,6 +126,17 @@ class Configuration(object):\n            For RSA keys, supported values are PKCS1v15, PSS.\n            For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n         \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        if signed_headers is not None and '(expires)' in signed_headers:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08557f48118f9972e4493dc73437cae66ac37dc8"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0NzI0NA==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367047244", "createdAt": "2020-01-15T18:52:31Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -121,6 +126,17 @@ class Configuration(object):\n            For RSA keys, supported values are PKCS1v15, PSS.\n            For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n         \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        if signed_headers is not None and '(expires)' in signed_headers:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzNzEwNw=="}, "originalCommit": {"oid": "08557f48118f9972e4493dc73437cae66ac37dc8"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzc3MTk0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODozMjoxM1rOFeCOoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToxOTo0OFrOFeDjaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzODExMw==", "bodyText": "Would it be simpler to require that a set is passed in for signed_headers?\nThen we can remove this if statement.\nDo the signed_headers need to be in a specific order?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367038113", "createdAt": "2020-01-15T18:32:13Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -121,6 +126,17 @@ class Configuration(object):\n            For RSA keys, supported values are PKCS1v15, PSS.\n            For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n         \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        if signed_headers is not None and '(expires)' in signed_headers:\n+            if self.signature_max_validity is None:\n+                raise Exception(\"Signature max validity must be set when '(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08557f48118f9972e4493dc73437cae66ac37dc8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0MjQ4Mw==", "bodyText": "Here is what the spec states:\nThe list order is important, and MUST be specified in the order\nthe HTTP header field-value pairs are concatenated together\nduring Signature String Construction (Section 2.3) used during\nsigning and verifying.\n\nIt is crucial to have an ordered list on the wire. This is required to properly generate the signature. That being said, in principle, the Python client could provide an unordered list (as well as any other programming language - I am also working on golang), as long as the implementation ensures the signature is properly generated. But I don't like this very much because on the wire, the list of signed headers will not be deterministic.\nNot having a deterministic list of signed headers can be frustrating when you are trying to troubleshoot the protocol.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367042483", "createdAt": "2020-01-15T18:41:48Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -121,6 +126,17 @@ class Configuration(object):\n            For RSA keys, supported values are PKCS1v15, PSS.\n            For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n         \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        if signed_headers is not None and '(expires)' in signed_headers:\n+            if self.signature_max_validity is None:\n+                raise Exception(\"Signature max validity must be set when '(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzODExMw=="}, "originalCommit": {"oid": "08557f48118f9972e4493dc73437cae66ac37dc8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0NTU1OQ==", "bodyText": "That's good to know. Thank you for including that spec information.\nCan you add code to enforce that with either of the below options?\n\nrequire that that a list with the correct order is passed in\npass in a set and select items in the correct order by iterating over an ordered list of keys when doing fancy signing things (this seems like an easier use case for our users)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367045559", "createdAt": "2020-01-15T18:48:46Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -121,6 +126,17 @@ class Configuration(object):\n            For RSA keys, supported values are PKCS1v15, PSS.\n            For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n         \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        if signed_headers is not None and '(expires)' in signed_headers:\n+            if self.signature_max_validity is None:\n+                raise Exception(\"Signature max validity must be set when '(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzODExMw=="}, "originalCommit": {"oid": "08557f48118f9972e4493dc73437cae66ac37dc8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0Nzk5Mg==", "bodyText": "Sorry, I'm not sure I understand what you are asking.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367047992", "createdAt": "2020-01-15T18:54:08Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -121,6 +126,17 @@ class Configuration(object):\n            For RSA keys, supported values are PKCS1v15, PSS.\n            For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n         \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        if signed_headers is not None and '(expires)' in signed_headers:\n+            if self.signature_max_validity is None:\n+                raise Exception(\"Signature max validity must be set when '(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzODExMw=="}, "originalCommit": {"oid": "08557f48118f9972e4493dc73437cae66ac37dc8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1MTM4MQ==", "bodyText": "Right now a user could pass in a signed_headers list with items in the wrong order and our code would generate our signed string in the wrong order.\nIs that true?\nIf so then I would like to add code which ensures that we generate the signed string using the correct order. We could do that with either of these two solutions:\n\nrequire that that the items in the input signed_headers list are in the correct order\nhave our users pass in a set of signed_headers and convert it into a list which is ordered correctly inside our function", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367051381", "createdAt": "2020-01-15T19:01:10Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -121,6 +126,17 @@ class Configuration(object):\n            For RSA keys, supported values are PKCS1v15, PSS.\n            For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n         \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        if signed_headers is not None and '(expires)' in signed_headers:\n+            if self.signature_max_validity is None:\n+                raise Exception(\"Signature max validity must be set when '(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzODExMw=="}, "originalCommit": {"oid": "08557f48118f9972e4493dc73437cae66ac37dc8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1NTAyNA==", "bodyText": "Right now a user could pass in a signed_headers list with items in the wrong order and our code would generate our signed string in the wrong order.\nIs that true?\n\nNo. The order is important because basically the algorithm works as follows (simplified):\n\nConcatenate headers: (H1 + H2 + ... + Hn)\nCalculate cryptographic digest of above string\nSign digest with private key.\n\nThe digest would be totally different if the order was different, and the client and server would not be able to agree on the signature validation.\nThe user may have a reason to put the list signed headers in a specific order. It's a weak argument, but certainly it helps when you are troubleshooting a problem between a client and a server. On the server side, you may not have control over the client implementation, but it helps to have easily reproducible conditions.\n\nIf so then I would like to add code which ensures that we generate the signed string using the correct order. We could do that with either of these two solutions:\n\nrequire that that the items in the input signed_headers list are in the correct order\nhave our users pass in a set of signed_headers and convert it into a list which is ordered correctly inside our function\n\n\nThere isn't a \"correct\" order of the headers. It's up to the client to decide what is the order of the headers, send the ordered list to the server, and also generate a signature based on that specific order. Everything needs to match.\nFor example, you can generate a valid signature with the following headers:\n[(created), Content-Type, Content-Length, Host, From]\nYou can reorder the list and still create a valid signature, e.g.:\n[Content-Type, Content-Length, (created), Host, From]\nBut from a troubleshooting perspective, it could be really annoying if the order of headers keep changing.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367055024", "createdAt": "2020-01-15T19:09:24Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -121,6 +126,17 @@ class Configuration(object):\n            For RSA keys, supported values are PKCS1v15, PSS.\n            For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n         \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        if signed_headers is not None and '(expires)' in signed_headers:\n+            if self.signature_max_validity is None:\n+                raise Exception(\"Signature max validity must be set when '(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzODExMw=="}, "originalCommit": {"oid": "08557f48118f9972e4493dc73437cae66ac37dc8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1OTgxOQ==", "bodyText": "Ah, I understand now. Thank you for explaining that. So the client needs to be able to set the order and there is no correct order to use. We are all set here then. Feel free to mark this conversation as resolved.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367059819", "createdAt": "2020-01-15T19:19:48Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -121,6 +126,17 @@ class Configuration(object):\n            For RSA keys, supported values are PKCS1v15, PSS.\n            For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n         \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        if signed_headers is not None and '(expires)' in signed_headers:\n+            if self.signature_max_validity is None:\n+                raise Exception(\"Signature max validity must be set when '(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzODExMw=="}, "originalCommit": {"oid": "08557f48118f9972e4493dc73437cae66ac37dc8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzkxOTcxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOToyNDo1NVrOFeDstQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTowMTozN1rOFeGTKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2MjE5Nw==", "bodyText": "If we create the signing.py module, it would also be helpful if we could move this function (load_private_key) into it\nThat way all of our signing code would be in one place\nAgain we would need to conditionally include the from petstore_api import signing import up top", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367062197", "createdAt": "2020-01-15T19:24:55Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -301,6 +400,29 @@ class Configuration(object):\n {{/isOAuth}}\n {{/authMethods}}\n         }\n+{{#hasHttpSignatureMethods}}\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+           The private key is used to sign HTTP requests as defined in\n+           https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, \"rb\") as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+{{/hasHttpSignatureMethods}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05e60696f69f17e354062d7d1ab6534ce076d357"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2ODQ5Mg==", "bodyText": "sure. I'm starting to move the code to a signing.mustache file.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367068492", "createdAt": "2020-01-15T19:38:10Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -301,6 +400,29 @@ class Configuration(object):\n {{/isOAuth}}\n {{/authMethods}}\n         }\n+{{#hasHttpSignatureMethods}}\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+           The private key is used to sign HTTP requests as defined in\n+           https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, \"rb\") as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+{{/hasHttpSignatureMethods}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2MjE5Nw=="}, "originalCommit": {"oid": "05e60696f69f17e354062d7d1ab6534ce076d357"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwMTE0Mg==", "bodyText": "What is the right way to determine if hasHttpSignatureMethods is set in the Java code?\n\nSee https://github.com/OpenAPITools/openapi-generator/pull/4958/files#diff-bd1652e990ffe227072a5c8908fd3054R854\nI'm not sure what's the right way to conditionally generate a template.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367101142", "createdAt": "2020-01-15T20:53:08Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -301,6 +400,29 @@ class Configuration(object):\n {{/isOAuth}}\n {{/authMethods}}\n         }\n+{{#hasHttpSignatureMethods}}\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+           The private key is used to sign HTTP requests as defined in\n+           https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, \"rb\") as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+{{/hasHttpSignatureMethods}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2MjE5Nw=="}, "originalCommit": {"oid": "05e60696f69f17e354062d7d1ab6534ce076d357"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNDgwOQ==", "bodyText": "I added a comment in PythonClientExperimental.java on how we can do this", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367104809", "createdAt": "2020-01-15T21:01:37Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -301,6 +400,29 @@ class Configuration(object):\n {{/isOAuth}}\n {{/authMethods}}\n         }\n+{{#hasHttpSignatureMethods}}\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+           The private key is used to sign HTTP requests as defined in\n+           https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, \"rb\") as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+{{/hasHttpSignatureMethods}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA2MjE5Nw=="}, "originalCommit": {"oid": "05e60696f69f17e354062d7d1ab6534ce076d357"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzk5MDk5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo0OTo1MlrOFeEZ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToxODo1MVrOFeGwTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3Mzc1Mw==", "bodyText": "Why not pass in configuration here?\nThen you can delete the parent class and make these all functions.\nThe other functions would also need to accept a configuration input argument", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367073753", "createdAt": "2020-01-15T19:49:52Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,204 @@\n+{{#hasHttpSignatureMethods}}\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+class HttpSignatureHandler(object):\n+    \"\"\"OpenAPI HTTP signature handler to generate and verify HTTP signatures.\n+\n+    NOTE: This class is auto generated by OpenAPI Generator.\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param configuration: .Configuration object for this client\n+    \"\"\"\n+\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+    def __init__(self, configuration=None):\n+        if configuration is None:\n+            raise Exception(\"Configuration must be specified\")\n+        self.configuration = configuration\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+        if self.configuration.signature_max_validity is not None:\n+            expires = (now + self.configuration.signature_max_validity).strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == '(expires)':\n+                value = expires\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExMjI2OA==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367112268", "createdAt": "2020-01-15T21:18:51Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,204 @@\n+{{#hasHttpSignatureMethods}}\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+class HttpSignatureHandler(object):\n+    \"\"\"OpenAPI HTTP signature handler to generate and verify HTTP signatures.\n+\n+    NOTE: This class is auto generated by OpenAPI Generator.\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param configuration: .Configuration object for this client\n+    \"\"\"\n+\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+    def __init__(self, configuration=None):\n+        if configuration is None:\n+            raise Exception(\"Configuration must be specified\")\n+        self.configuration = configuration\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+        if self.configuration.signature_max_validity is not None:\n+            expires = (now + self.configuration.signature_max_validity).strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == '(expires)':\n+                value = expires\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3Mzc1Mw=="}, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Nzk5Mzg0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo1MDo1MVrOFeEbpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToxODozOVrOFeGvuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NDIxMw==", "bodyText": "How about deleting this class?\nWe only use it to store the configuration object which could be passed in to get_http_signature_headers.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367074213", "createdAt": "2020-01-15T19:50:51Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,204 @@\n+{{#hasHttpSignatureMethods}}\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+class HttpSignatureHandler(object):\n+    \"\"\"OpenAPI HTTP signature handler to generate and verify HTTP signatures.\n+\n+    NOTE: This class is auto generated by OpenAPI Generator.\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param configuration: .Configuration object for this client\n+    \"\"\"\n+\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+    def __init__(self, configuration=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExMjEyMw==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367112123", "createdAt": "2020-01-15T21:18:39Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,204 @@\n+{{#hasHttpSignatureMethods}}\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+class HttpSignatureHandler(object):\n+    \"\"\"OpenAPI HTTP signature handler to generate and verify HTTP signatures.\n+\n+    NOTE: This class is auto generated by OpenAPI Generator.\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param configuration: .Configuration object for this client\n+    \"\"\"\n+\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+    def __init__(self, configuration=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NDIxMw=="}, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODAwMzUyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTo1NDowOVrOFeEhrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToxODoyNVrOFeGvOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NTc1Nw==", "bodyText": "How about setting these parameters as module constants?\nhow about naming them with prefixes like SCHEME_ and ALGORITHM_\nThat way our users could use magic string constants like so, and not have to worry about typing quotes:\nfrom petstore_api import signing\n\n# Configure API client with HTTP signature authentication:\nconf = petstore_api.Configuration(\n  key_id='my-key-id',\n  private_key_path='rsa.pem',\n  signing_scheme=signing.SCHEME_HS2019,\n  signing_algorithm=signing.ALGORITHM_PSS,\n  signed_headers=['(request-target)', '(created)', 'host', 'date', 'Content-Type', 'Digest']\n)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367075757", "createdAt": "2020-01-15T19:54:09Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,204 @@\n+{{#hasHttpSignatureMethods}}\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+class HttpSignatureHandler(object):\n+    \"\"\"OpenAPI HTTP signature handler to generate and verify HTTP signatures.\n+\n+    NOTE: This class is auto generated by OpenAPI Generator.\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param configuration: .Configuration object for this client\n+    \"\"\"\n+\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NzMwOQ==", "bodyText": "How do you feel about making constants for the headers too, like:\nHEADER_REQUEST_TARGET = '(request-target)'\nHEADER_CREATED = '(created)'\nHEADER_HOST = 'host'\nHEADER_DATE = 'date'\nHEADER_CONTENT_TYPE = 'Content-Type'\nHEADER_DIGEST = 'Digest'\n\nThat way we could use them in this module, and our users could use them when passing in signed headers with:\nsigned_headers = [\n  signing.HEADER_REQUEST_TARGET,\n  signing.HEADER_CREATED,\n  signing.HEADER_HOST,\n  signing.HEADER_DATE,\n  signing.HEADER_CONTENT_TYPE,\n  signing.HEADER_DIGEST]", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367077309", "createdAt": "2020-01-15T19:57:26Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,204 @@\n+{{#hasHttpSignatureMethods}}\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+class HttpSignatureHandler(object):\n+    \"\"\"OpenAPI HTTP signature handler to generate and verify HTTP signatures.\n+\n+    NOTE: This class is auto generated by OpenAPI Generator.\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param configuration: .Configuration object for this client\n+    \"\"\"\n+\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NTc1Nw=="}, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExMTk5NA==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367111994", "createdAt": "2020-01-15T21:18:25Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,204 @@\n+{{#hasHttpSignatureMethods}}\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+class HttpSignatureHandler(object):\n+    \"\"\"OpenAPI HTTP signature handler to generate and verify HTTP signatures.\n+\n+    NOTE: This class is auto generated by OpenAPI Generator.\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param configuration: .Configuration object for this client\n+    \"\"\"\n+\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA3NTc1Nw=="}, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODAzMDM5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDowMzo1MFrOFeEyyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToxNzo1M1rOFeGuQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MDEzNg==", "bodyText": "This module should only be included if this signature method is used.\nSo we can enable/disable the inclusion of this module in the Java code.\nBecause the Java will handle it, can you delete this hasHttpSignatureMethods mustache tag?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367080136", "createdAt": "2020-01-15T20:03:50Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,204 @@\n+{{#hasHttpSignatureMethods}}\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+class HttpSignatureHandler(object):\n+    \"\"\"OpenAPI HTTP signature handler to generate and verify HTTP signatures.\n+\n+    NOTE: This class is auto generated by OpenAPI Generator.\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param configuration: .Configuration object for this client\n+    \"\"\"\n+\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+    def __init__(self, configuration=None):\n+        if configuration is None:\n+            raise Exception(\"Configuration must be specified\")\n+        self.configuration = configuration\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+        if self.configuration.signature_max_validity is not None:\n+            expires = (now + self.configuration.signature_max_validity).strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == '(expires)':\n+                value = expires\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        header_items = [\"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+          The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+          The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+          'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg):\n+        \"\"\"\n+        Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+        \n+        :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+           must be included in the HTTP signature calculation.\n+        :param signed_msg: A base-64 encoded string representation of the signature.\n+        :return: The string value of the 'Authorization' header, representing the signature\n+           of the HTTP request.\n+        \"\"\"\n+\n+        headers_value = \"\"\n+        created_ts = signed_headers.get('(created)')\n+        expires_ts = signed_headers.get('(expires)')\n+        lower_keys = [k.lower() for k in signed_headers]\n+        headers_value = \" \".join(lower_keys)\n+\n+        auth_str = \"Signature keyId=\\\"{0}\\\",algorithm=\\\"{1}\\\",\"\n+            .format(self.configuration.key_id, self.configuration.signing_scheme)\n+        if created_ts is not None:\n+            auth_str = auth_str + \"created={0},\".format(created_ts)\n+        if expires_ts is not None:\n+            auth_str = auth_str + \"expires={0},\".format(expires_ts)\n+        auth_str = auth_str + \"headers=\\\"{0}\\\",signature=\\\"{1}\\\"\"\n+            .format(headers_value, signed_msg.decode('ascii'))\n+        return auth_str\n+{{/hasHttpSignatureMethods}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExMTc0NQ==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367111745", "createdAt": "2020-01-15T21:17:53Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,204 @@\n+{{#hasHttpSignatureMethods}}\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+class HttpSignatureHandler(object):\n+    \"\"\"OpenAPI HTTP signature handler to generate and verify HTTP signatures.\n+\n+    NOTE: This class is auto generated by OpenAPI Generator.\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param configuration: .Configuration object for this client\n+    \"\"\"\n+\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+    def __init__(self, configuration=None):\n+        if configuration is None:\n+            raise Exception(\"Configuration must be specified\")\n+        self.configuration = configuration\n+\n+    def get_signed_header_info(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(self.configuration.host).netloc\n+        target_path = urlparse(self.configuration.host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        created = now.strftime(\"%s\")\n+        if self.configuration.signature_max_validity is not None:\n+            expires = (now + self.configuration.signature_max_validity).strftime(\"%s\")\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.configuration.signed_headers_dict:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == '(request-target)':\n+                value = request_target\n+            elif hdr_key == '(created)':\n+                value = created\n+            elif hdr_key == '(expires)':\n+                value = expires\n+            elif hdr_key == 'date':\n+                value = cdate\n+                request_headers_dict['Date'] = '{0}'.format(cdate)\n+            elif hdr_key == 'digest':\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == 'host':\n+                value = target_host\n+                request_headers_dict['Host'] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if len(self.configuration.signed_headers_dict) == 0:\n+            signed_headers_dict['(created)'] = created\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_http_signature_headers(self, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(self,\n+            resource_path, method, headers, body, query_params)\n+\n+        header_items = [\"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict['Authorization'] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+          The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+          The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+          'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+            digest = SHA512.new()\n+            prefix = \"SHA-512=\"\n+        elif self.configuration.signing_scheme in [\"rsa-sha256\"]:\n+            digest = SHA256.new()\n+            prefix = \"SHA-256=\"\n+        else:\n+            raise Exception(\n+                \"Unsupported signing algorithm: {0}\".format(self.configuration.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the configuration.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.configuration.load_private_key()\n+        privkey = self.configuration.private_key\n+        if isinstance(privkey, RSA.RsaKey):\n+            if self.configuration.signing_algorithm == 'PSS':\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(privkey).sign(digest)\n+            elif self.configuration.signing_algorithm == 'PKCS1v15':\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(privkey).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        elif isinstance(privkey, ECC.EccKey):\n+            if self.configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(privkey, self.configuration.signing_algorithm).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(self.configuration.signing_algorithm))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg):\n+        \"\"\"\n+        Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+        \n+        :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+           must be included in the HTTP signature calculation.\n+        :param signed_msg: A base-64 encoded string representation of the signature.\n+        :return: The string value of the 'Authorization' header, representing the signature\n+           of the HTTP request.\n+        \"\"\"\n+\n+        headers_value = \"\"\n+        created_ts = signed_headers.get('(created)')\n+        expires_ts = signed_headers.get('(expires)')\n+        lower_keys = [k.lower() for k in signed_headers]\n+        headers_value = \" \".join(lower_keys)\n+\n+        auth_str = \"Signature keyId=\\\"{0}\\\",algorithm=\\\"{1}\\\",\"\n+            .format(self.configuration.key_id, self.configuration.signing_scheme)\n+        if created_ts is not None:\n+            auth_str = auth_str + \"created={0},\".format(created_ts)\n+        if expires_ts is not None:\n+            auth_str = auth_str + \"expires={0},\".format(expires_ts)\n+        auth_str = auth_str + \"headers=\\\"{0}\\\",signature=\\\"{1}\\\"\"\n+            .format(headers_value, signed_msg.decode('ascii'))\n+        return auth_str\n+{{/hasHttpSignatureMethods}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4MDEzNg=="}, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODEwNjg4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDozMjoxMFrOFeFiig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowMTo1MVrOFeOx-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5MjM2Mg==", "bodyText": "It may be time to separate these into separate dict inputs with None defaults.\nWe are up to 11 non-self arguments.\n@sebastien-rosset what do you think?\nHow about something like:\n__init__(self, host=\"{{{basePath}}}\", api_key_info=None, basic_auth_info=None, signing_info=None)\n\napi_key_info:\n\nkey\nprefix\n\n\nbasic_auth_info\n\nusername\npassword\n\n\nsigning_info\n\nkey_id\nprivate_key_path\nscheme\nalgorithm\nmax_validity\nheaders", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367092362", "createdAt": "2020-01-15T20:32:10Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,11 +30,59 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+\n+    :Example:\n+\n+    Configure API client with HTTP basic authentication:\n+      conf = {{{packageName}}}.Configuration(\n+          username='the-user',\n+          password='the-password',\n+      )\n+\n+    Configure API client with HTTP signature authentication. Use the 'hs2019' signature scheme,\n+    sign the HTTP requests with the RSA-SSA-PSS signature algorithm, and set the expiration time\n+    of the signature to 5 minutes after the signature has been created.\n+      conf = {{{packageName}}}.Configuration(\n+        key_id='my-key-id',\n+        private_key_path='rsa.pem',\n+        signing_scheme='hs2019',\n+        signing_algorithm='PSS',\n+        signed_headers=['(request-target)', '(created)', 'host', 'date', 'Content-Type', 'Digest']\n+        signature_max_validity=timedelta(minutes=5),\n+      )\n     \"\"\"\n \n     def __init__(self, host=\"{{{basePath}}}\",\n                  api_key=None, api_key_prefix=None,\n-                 username=\"\", password=\"\"):\n+                 username=\"\", password=\"\",\n+                 key_id=None, private_key_path=None, signing_scheme=None,\n+                 signing_algorithm=None, signature_max_validity=None, signed_headers=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIxODIyMg==", "bodyText": "I think I'll do that for signing info, but I'd rather keep the others as is, I'm concerned the breaking change will cause acceptance issues.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367218222", "createdAt": "2020-01-16T03:44:12Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,11 +30,59 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+\n+    :Example:\n+\n+    Configure API client with HTTP basic authentication:\n+      conf = {{{packageName}}}.Configuration(\n+          username='the-user',\n+          password='the-password',\n+      )\n+\n+    Configure API client with HTTP signature authentication. Use the 'hs2019' signature scheme,\n+    sign the HTTP requests with the RSA-SSA-PSS signature algorithm, and set the expiration time\n+    of the signature to 5 minutes after the signature has been created.\n+      conf = {{{packageName}}}.Configuration(\n+        key_id='my-key-id',\n+        private_key_path='rsa.pem',\n+        signing_scheme='hs2019',\n+        signing_algorithm='PSS',\n+        signed_headers=['(request-target)', '(created)', 'host', 'date', 'Content-Type', 'Digest']\n+        signature_max_validity=timedelta(minutes=5),\n+      )\n     \"\"\"\n \n     def __init__(self, host=\"{{{basePath}}}\",\n                  api_key=None, api_key_prefix=None,\n-                 username=\"\", password=\"\"):\n+                 username=\"\", password=\"\",\n+                 key_id=None, private_key_path=None, signing_scheme=None,\n+                 signing_algorithm=None, signature_max_validity=None, signed_headers=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5MjM2Mg=="}, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNDU1Mg==", "bodyText": "Good catch, thanks. I keep thinking that these changes are for python-experimental, but this one is for python + python-experimental. Splitting out signing_info will help us here.\nIf we want to be aggressive we could make a separate template for python-experimental and switch to using the above 3 dicts. But that's probably best kept as work for another day in a future PR. What do you think?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367224552", "createdAt": "2020-01-16T04:21:33Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,11 +30,59 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+\n+    :Example:\n+\n+    Configure API client with HTTP basic authentication:\n+      conf = {{{packageName}}}.Configuration(\n+          username='the-user',\n+          password='the-password',\n+      )\n+\n+    Configure API client with HTTP signature authentication. Use the 'hs2019' signature scheme,\n+    sign the HTTP requests with the RSA-SSA-PSS signature algorithm, and set the expiration time\n+    of the signature to 5 minutes after the signature has been created.\n+      conf = {{{packageName}}}.Configuration(\n+        key_id='my-key-id',\n+        private_key_path='rsa.pem',\n+        signing_scheme='hs2019',\n+        signing_algorithm='PSS',\n+        signed_headers=['(request-target)', '(created)', 'host', 'date', 'Content-Type', 'Digest']\n+        signature_max_validity=timedelta(minutes=5),\n+      )\n     \"\"\"\n \n     def __init__(self, host=\"{{{basePath}}}\",\n                  api_key=None, api_key_prefix=None,\n-                 username=\"\", password=\"\"):\n+                 username=\"\", password=\"\",\n+                 key_id=None, private_key_path=None, signing_scheme=None,\n+                 signing_algorithm=None, signature_max_validity=None, signed_headers=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5MjM2Mg=="}, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0Mzc3MA==", "bodyText": "Yes, I was thinking this could be done as a separate PR. It's already big enough, and I am worried it's going to stay in limbo state for a while.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367243770", "createdAt": "2020-01-16T06:01:51Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,11 +30,59 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+\n+    :Example:\n+\n+    Configure API client with HTTP basic authentication:\n+      conf = {{{packageName}}}.Configuration(\n+          username='the-user',\n+          password='the-password',\n+      )\n+\n+    Configure API client with HTTP signature authentication. Use the 'hs2019' signature scheme,\n+    sign the HTTP requests with the RSA-SSA-PSS signature algorithm, and set the expiration time\n+    of the signature to 5 minutes after the signature has been created.\n+      conf = {{{packageName}}}.Configuration(\n+        key_id='my-key-id',\n+        private_key_path='rsa.pem',\n+        signing_scheme='hs2019',\n+        signing_algorithm='PSS',\n+        signed_headers=['(request-target)', '(created)', 'host', 'date', 'Content-Type', 'Digest']\n+        signature_max_validity=timedelta(minutes=5),\n+      )\n     \"\"\"\n \n     def __init__(self, host=\"{{{basePath}}}\",\n                  api_key=None, api_key_prefix=None,\n-                 username=\"\", password=\"\"):\n+                 username=\"\", password=\"\",\n+                 key_id=None, private_key_path=None, signing_scheme=None,\n+                 signing_algorithm=None, signature_max_validity=None, signed_headers=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5MjM2Mg=="}, "originalCommit": {"oid": "959178a63fbe713196a6703e2774c6a8d5cfd2c4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODI2ODUyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTozMjozNVrOFeHHPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDoyMjoyNVrOFeNnaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExODE0MQ==", "bodyText": "Per my debugging in InteliJ fullAuthmethods doesn't exist yet.\nthis.OpenAPI (the spec does)\nHow about using this?\n        Map<String, SecurityScheme> securitySchemeMap = openAPI.getComponents() != null ? openAPI.getComponents().getSecuritySchemes() : null;\n        List<CodegenSecurity> authMethods = fromSecurity(securitySchemeMap);\n        if (hasHttpSignatureMethods(authMethods)) {\n            supportingFiles.add(new SupportingFile(\"python-experimental/signing.mustache\", packagePath(), \"signing.py\"));\n        }", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367118141", "createdAt": "2020-01-15T21:32:35Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +82,9 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        if (hasHttpSignatureMethods(this.fullAuthMethods)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "071316439675ee55efb3682ecd2e7d666a52cd94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMzU5MQ==", "bodyText": "For the record I don't know when we should use supportingFiles.add vs apiTemplateFiles.put\nIt looks like supportingFiles.add is used more for conditional file additions, so maybe we should\n\nuse supportingFiles.add(..\nmove the above if statement into which uses supportingFiles.add(.. into the processOpts method\nWhat do you think?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367123591", "createdAt": "2020-01-15T21:45:26Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +82,9 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        if (hasHttpSignatureMethods(this.fullAuthMethods)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExODE0MQ=="}, "originalCommit": {"oid": "071316439675ee55efb3682ecd2e7d666a52cd94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNTE2OA==", "bodyText": "yes, that's what I'm trying to do. For some reason the compiler cannot find the config symbol. I'll keep looking.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367125168", "createdAt": "2020-01-15T21:49:10Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +82,9 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        if (hasHttpSignatureMethods(this.fullAuthMethods)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExODE0MQ=="}, "originalCommit": {"oid": "071316439675ee55efb3682ecd2e7d666a52cd94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNTY1NA==", "bodyText": "Ah config is where you are. Just delete it. It should be fromSecurity(securitySchemeMap)\nI just updated my suggested code sample", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367125654", "createdAt": "2020-01-15T21:50:17Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +82,9 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        if (hasHttpSignatureMethods(this.fullAuthMethods)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExODE0MQ=="}, "originalCommit": {"oid": "071316439675ee55efb3682ecd2e7d666a52cd94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNzkxMQ==", "bodyText": "oh I just realized there are two distinct classes, DefaultGenerator and DefaultCodeGen...\nPythonClientExperimentalCodegen extends from DefaultCodeGen, not DefaultGenerator, and config is defined in DefaultGenerator.\nNow I can make it work, though hasHttpSignatureMethods() is not accessible from PythonClientExperimentalCodegen, but there is an easy workaround.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367127911", "createdAt": "2020-01-15T21:55:45Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +82,9 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        if (hasHttpSignatureMethods(this.fullAuthMethods)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExODE0MQ=="}, "originalCommit": {"oid": "071316439675ee55efb3682ecd2e7d666a52cd94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyOTk4Mg==", "bodyText": "Sounds good", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367129982", "createdAt": "2020-01-15T22:00:38Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +82,9 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        if (hasHttpSignatureMethods(this.fullAuthMethods)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExODE0MQ=="}, "originalCommit": {"oid": "071316439675ee55efb3682ecd2e7d666a52cd94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNzA4NQ==", "bodyText": "It looks like putting\nhasHttpSignatureMethods\nin modules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ProcessUtils.java\nwould work because both classes can use it.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367137085", "createdAt": "2020-01-15T22:18:18Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +82,9 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        if (hasHttpSignatureMethods(this.fullAuthMethods)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExODE0MQ=="}, "originalCommit": {"oid": "071316439675ee55efb3682ecd2e7d666a52cd94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MDU3OQ==", "bodyText": "I have a basic question. When the constructor is invoked, has the OAS spec been parsed? Isn't it done later? Because I'm seeing a NPE and wonder if this is because the OAS spec hasn't been parsed yet, hence codegen wouldn't know what the security schemes are in the constructor.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367140579", "createdAt": "2020-01-15T22:26:55Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +82,9 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        if (hasHttpSignatureMethods(this.fullAuthMethods)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExODE0MQ=="}, "originalCommit": {"oid": "071316439675ee55efb3682ecd2e7d666a52cd94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NDY1Mg==", "bodyText": "The spec is parsed, I am seeing the above code successfully generate authMethods:\nauthMethods = {ArrayList@2705}  size = 5\n 0 = {CodegenSecurity@2714} \"CodegenSecurity{name='api_key', type='apiKey', scheme='null', hasMore=true, isBasic=false, isOAuth=false, isApiKey=true, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='api_key', isKeyInQuery=false, isKeyInHeader=true, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\n 1 = {CodegenSecurity@2715} \"CodegenSecurity{name='api_key_query', type='apiKey', scheme='null', hasMore=true, isBasic=false, isOAuth=false, isApiKey=true, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='api_key_query', isKeyInQuery=true, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\n 2 = {CodegenSecurity@2716} \"CodegenSecurity{name='bearer_test', type='http', scheme='bearer', hasMore=true, isBasic=true, isOAuth=false, isApiKey=false, isBasicBasic=false, isBasicBearer=true, bearerFormat='JWT', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\n 3 = {CodegenSecurity@2717} \"CodegenSecurity{name='http_basic_test', type='http', scheme='basic', hasMore=true, isBasic=true, isOAuth=false, isApiKey=false, isBasicBasic=true, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\n 4 = {CodegenSecurity@2718} \"CodegenSecurity{name='petstore_auth', type='oauth2', scheme='null', hasMore=false, isBasic=false, isOAuth=true, isApiKey=false, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='implicit', authorizationUrl='http://petstore.swagger.io/api/oauth/dialog', tokenUrl='null', scopes=[{scope=write:pets, hasMore=true, description=modify pets in your account}, {scope=read:pets, hasMore=null, description=read your pets}], isCode=false, isPassword=false, isApplication=false, isImplicit=true}\"\n\nAre you invoking it inside processOpts?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367144652", "createdAt": "2020-01-15T22:37:55Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +82,9 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        if (hasHttpSignatureMethods(this.fullAuthMethods)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExODE0MQ=="}, "originalCommit": {"oid": "071316439675ee55efb3682ecd2e7d666a52cd94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1NjEzOQ==", "bodyText": "The spec is parsed, I am seeing the above code successfully generate authMethods:\nauthMethods = {ArrayList@2705}  size = 5\n 0 = {CodegenSecurity@2714} \"CodegenSecurity{name='api_key', type='apiKey', scheme='null', hasMore=true, isBasic=false, isOAuth=false, isApiKey=true, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='api_key', isKeyInQuery=false, isKeyInHeader=true, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\n 1 = {CodegenSecurity@2715} \"CodegenSecurity{name='api_key_query', type='apiKey', scheme='null', hasMore=true, isBasic=false, isOAuth=false, isApiKey=true, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='api_key_query', isKeyInQuery=true, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\n 2 = {CodegenSecurity@2716} \"CodegenSecurity{name='bearer_test', type='http', scheme='bearer', hasMore=true, isBasic=true, isOAuth=false, isApiKey=false, isBasicBasic=false, isBasicBearer=true, bearerFormat='JWT', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\n 3 = {CodegenSecurity@2717} \"CodegenSecurity{name='http_basic_test', type='http', scheme='basic', hasMore=true, isBasic=true, isOAuth=false, isApiKey=false, isBasicBasic=true, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='null', authorizationUrl='null', tokenUrl='null', scopes=null, isCode=false, isPassword=false, isApplication=false, isImplicit=false}\"\n 4 = {CodegenSecurity@2718} \"CodegenSecurity{name='petstore_auth', type='oauth2', scheme='null', hasMore=false, isBasic=false, isOAuth=true, isApiKey=false, isBasicBasic=false, isBasicBearer=false, bearerFormat='null', vendorExtensions={}, keyParamName='null', isKeyInQuery=false, isKeyInHeader=false, isKeyInCookie=false, flow='implicit', authorizationUrl='http://petstore.swagger.io/api/oauth/dialog', tokenUrl='null', scopes=[{scope=write:pets, hasMore=true, description=modify pets in your account}, {scope=read:pets, hasMore=null, description=read your pets}], isCode=false, isPassword=false, isApplication=false, isImplicit=true}\"\n\nAre you invoking it inside processOpts?\n\nno, from the constructor. There are a few test cases when the \"openAPI\" field is null, so I have to test for that too.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367156139", "createdAt": "2020-01-15T23:11:47Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +82,9 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        if (hasHttpSignatureMethods(this.fullAuthMethods)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExODE0MQ=="}, "originalCommit": {"oid": "071316439675ee55efb3682ecd2e7d666a52cd94"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNDY4MA==", "bodyText": "Can you mark this as resolved?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367224680", "createdAt": "2020-01-16T04:22:25Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +82,9 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        if (hasHttpSignatureMethods(this.fullAuthMethods)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExODE0MQ=="}, "originalCommit": {"oid": "071316439675ee55efb3682ecd2e7d666a52cd94"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODI4MDc0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTozNzoyM1rOFeHPAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTo1Mjo1MlrOFeHosg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDEyOQ==", "bodyText": "Can you change this to:\nfrom {{packageName}} import signing \nand move it down in between the rest and Configuration imports?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367120129", "createdAt": "2020-01-15T21:37:23Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -13,6 +13,9 @@ from six.moves.urllib.parse import quote\n {{#tornado}}\n import tornado.gen\n {{/tornado}}\n+{{#hasHttpSignatureMethods}}\n+import signing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "277e48978c58712538cec73939bae8efc9fca4f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNDcyNw==", "bodyText": "sure. With the {{#hasHttpSignatureMethods}}, right?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367124727", "createdAt": "2020-01-15T21:48:10Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -13,6 +13,9 @@ from six.moves.urllib.parse import quote\n {{#tornado}}\n import tornado.gen\n {{/tornado}}\n+{{#hasHttpSignatureMethods}}\n+import signing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDEyOQ=="}, "originalCommit": {"oid": "277e48978c58712538cec73939bae8efc9fca4f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyNjcwNg==", "bodyText": "Yup, we need to keep the tag with it", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367126706", "createdAt": "2020-01-15T21:52:52Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -13,6 +13,9 @@ from six.moves.urllib.parse import quote\n {{#tornado}}\n import tornado.gen\n {{/tornado}}\n+{{#hasHttpSignatureMethods}}\n+import signing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDEyOQ=="}, "originalCommit": {"oid": "277e48978c58712538cec73939bae8efc9fca4f1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODM1MzM3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjowNTo0NVrOFeH9ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzoxOToxMVrOFeJkLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzMjAwNA==", "bodyText": "How about making this public boolean and move this into DefaultCodegen?\nThen you can invoke it with config.hasHttpSignatureMethods(blah..)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367132004", "createdAt": "2020-01-15T22:05:45Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "diffHunk": "@@ -1332,6 +1335,19 @@ private boolean hasBearerMethods(List<CodegenSecurity> authMethods) {\n         return false;\n     }\n \n+    // hasHttpSignatureMethods returns true if the specified OAS model has\n+    // HTTP signature methods.\n+    // The HTTP signature scheme is defined in https://datatracker.ietf.org/doc/draft-cavage-http-signatures/\n+    private boolean hasHttpSignatureMethods(List<CodegenSecurity> authMethods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719146d165cb10b8ad9b32a82c34e929c41ed6d3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNjY2MQ==", "bodyText": "Or how about putting it here?\nmodules/openapi-generator/src/main/java/org/openapitools/codegen/utils/ProcessUtils.java\nThat way both classes can use it.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367136661", "createdAt": "2020-01-15T22:17:15Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "diffHunk": "@@ -1332,6 +1335,19 @@ private boolean hasBearerMethods(List<CodegenSecurity> authMethods) {\n         return false;\n     }\n \n+    // hasHttpSignatureMethods returns true if the specified OAS model has\n+    // HTTP signature methods.\n+    // The HTTP signature scheme is defined in https://datatracker.ietf.org/doc/draft-cavage-http-signatures/\n+    private boolean hasHttpSignatureMethods(List<CodegenSecurity> authMethods) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzMjAwNA=="}, "originalCommit": {"oid": "719146d165cb10b8ad9b32a82c34e929c41ed6d3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE1ODMxNg==", "bodyText": "I moved it to ProcessUtils.java", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367158316", "createdAt": "2020-01-15T23:19:11Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultGenerator.java", "diffHunk": "@@ -1332,6 +1335,19 @@ private boolean hasBearerMethods(List<CodegenSecurity> authMethods) {\n         return false;\n     }\n \n+    // hasHttpSignatureMethods returns true if the specified OAS model has\n+    // HTTP signature methods.\n+    // The HTTP signature scheme is defined in https://datatracker.ietf.org/doc/draft-cavage-http-signatures/\n+    private boolean hasHttpSignatureMethods(List<CodegenSecurity> authMethods) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzMjAwNA=="}, "originalCommit": {"oid": "719146d165cb10b8ad9b32a82c34e929c41ed6d3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODU3MDIzOnYy", "diffSide": "RIGHT", "path": "samples/client/petstore/python-experimental/petstore_api/api_client.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo0Nzo0N1rOFeKDVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo0Nzo0N1rOFeKDVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NjI5NA==", "bodyText": "Can you update the samples?\nThis is outdated", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367166294", "createdAt": "2020-01-15T23:47:47Z", "author": {"login": "spacether"}, "path": "samples/client/petstore/python-experimental/petstore_api/api_client.py", "diffHunk": "@@ -62,6 +62,10 @@ class ApiClient(object):\n     PRIMITIVE_TYPES = (\n         (float, bool, six.binary_type, six.text_type) + six.integer_types\n     )\n+    ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+    ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+    ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c478fe7e19b6641b964b615ffb32cad66441c1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODU3MjcwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMzo0OToxNlrOFeKEww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTo1NjoyNlrOFeOtgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NjY1OQ==", "bodyText": "Can you move this to processOpts? It looks like that is where we are conditionally adding supporting files.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367166659", "createdAt": "2020-01-15T23:49:16Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +84,12 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        Map<String, SecurityScheme> securitySchemeMap = openAPI != null ?\n+           (openAPI.getComponents() != null ? openAPI.getComponents().getSecuritySchemes() : null) : null;\n+        List<CodegenSecurity> authMethods = fromSecurity(securitySchemeMap);\n+        if (ProcessUtils.hasHttpSignatureMethods(authMethods)) {\n+            apiTemplateFiles.put(\"python-experimental/signing.mustache\", \".py\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c478fe7e19b6641b964b615ffb32cad66441c1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0MjYyNQ==", "bodyText": "Sure. I'm also changing to:\nsupportingFiles.add(new SupportingFile(\"python-experimental/signing.mustache\", packagePath(), \"signing.py\"));\n\nThough I don't understand the different between supportingFiles and apiTemplateFiles", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367242625", "createdAt": "2020-01-16T05:56:26Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -82,6 +84,12 @@ public PythonClientExperimentalCodegen() {\n \n         apiTemplateFiles.remove(\"api.mustache\");\n         apiTemplateFiles.put(\"python-experimental/api.mustache\", \".py\");\n+        Map<String, SecurityScheme> securitySchemeMap = openAPI != null ?\n+           (openAPI.getComponents() != null ? openAPI.getComponents().getSecuritySchemes() : null) : null;\n+        List<CodegenSecurity> authMethods = fromSecurity(securitySchemeMap);\n+        if (ProcessUtils.hasHttpSignatureMethods(authMethods)) {\n+            apiTemplateFiles.put(\"python-experimental/signing.mustache\", \".py\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NjY1OQ=="}, "originalCommit": {"oid": "21c478fe7e19b6641b964b615ffb32cad66441c1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODY1OTYxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMDo0Mjo0OVrOFeK6Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTo0NzoxNFrOFeOlnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4MDMwNw==", "bodyText": "Can we use our constants here?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367180307", "createdAt": "2020-01-16T00:42:49Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,221 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+\n+SCHEME_HS2019 = 'hs2019'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+def get_http_signature_headers(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Create a cryptographic message signature for the HTTP request and add the signed headers.\n+    \n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+    if method is None:\n+        raise Exception(\"HTTP method must be set\")\n+    if resource_path is None:\n+        raise Exception(\"Resource path must be set\")\n+\n+    signed_headers_dict, request_headers_dict = get_signed_header_info(configuration,\n+        resource_path, method, headers, body, query_params)\n+\n+    header_items = [\"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+    string_to_sign = \"\\n\".join(header_items)\n+\n+    digest, digest_prefix = get_message_digest(configuration, string_to_sign.encode())\n+    b64_signed_msg = sign_digest(configuration, digest)\n+\n+    request_headers_dict['Authorization'] = get_authorization_header(configuration,\n+        signed_headers_dict, b64_signed_msg)\n+\n+    return request_headers_dict\n+\n+def load_private_key(configuration):\n+    \"\"\"Load the private key used to sign HTTP requests.\n+        The private key is used to sign HTTP requests as defined in\n+        https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+    \"\"\"\n+    if configuration.private_key is not None:\n+        return\n+    with open(configuration.private_key_path, \"rb\") as f:\n+        # Decode PEM file and determine key type from PEM header.\n+        # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+        keys = pem.parse(f.read())\n+        if len(keys) != 1:\n+            raise Exception(\"File must contain exactly one private key\")\n+        key = keys[0].as_text()\n+        if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+            configuration.private_key = RSA.importKey(key)\n+        elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+            configuration.private_key = ECC.importKey(key)\n+        else:\n+            raise Exception(\"Unsupported key\")\n+\n+def get_signed_header_info(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A tuple containing two dict objects:\n+        The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+        The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+\n+    if body is None:\n+        body = ''\n+    else:\n+        body = json.dumps(body)\n+\n+    # Build the '(request-target)' HTTP signature parameter.\n+    target_host = urlparse(configuration.host).netloc\n+    target_path = urlparse(configuration.host).path\n+    request_target = method.lower() + \" \" + target_path + resource_path\n+    if query_params:\n+        raw_query = urlencode(query_params).replace('+', '%20')\n+        request_target += \"?\" + raw_query\n+\n+    # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+    now = datetime.datetime.now()\n+    stamp = mktime(now.timetuple())\n+    cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+    created = now.strftime(\"%s\")\n+    if configuration.signature_max_validity is not None:\n+        expires = (now + configuration.signature_max_validity).strftime(\"%s\")\n+\n+    signed_headers_dict = {}\n+    request_headers_dict = {}\n+    for hdr_key in configuration.signed_headers_dict:\n+        hdr_key = hdr_key.lower()\n+        if hdr_key == HEADER_REQUEST_TARGET:\n+            value = request_target\n+        elif hdr_key == HEADER_CREATED:\n+            value = created\n+        elif hdr_key == HEADER_EXPIRES:\n+            value = expires\n+        elif hdr_key == HEADER_DATE:\n+            value = cdate\n+            request_headers_dict['Date'] = '{0}'.format(cdate)\n+        elif hdr_key == HEADER_DIGEST:\n+            request_body = body.encode()\n+            body_digest, digest_prefix = get_message_digest(configuration, request_body)\n+            b64_body_digest = b64encode(body_digest.digest())\n+            value = digest_prefix + b64_body_digest.decode('ascii')\n+            request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+        elif hdr_key == HEADER_HOST:\n+            value = target_host\n+            request_headers_dict['Host'] = '{0}'.format(target_host)\n+        else:\n+            value = headers[hdr_key]\n+        signed_headers_dict[hdr_key] = value\n+\n+    # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+    if len(configuration.signed_headers_dict) == 0:\n+        signed_headers_dict[HEADER_CREATED] = created\n+\n+    return signed_header_dict, request_headers_dict\n+\n+def get_message_digest(configuration, data):\n+    \"\"\"\n+    Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+    :param data: The string representation of the date to be hashed with a cryptographic hash.\n+    :return: A tuple of (digest, prefix).\n+        The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+        The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+        'Digest' header as specified in RFC 3230.\n+    \"\"\"\n+    if configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c478fe7e19b6641b964b615ffb32cad66441c1"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0MDYwNw==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367240607", "createdAt": "2020-01-16T05:47:14Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,221 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+\n+SCHEME_HS2019 = 'hs2019'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+def get_http_signature_headers(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Create a cryptographic message signature for the HTTP request and add the signed headers.\n+    \n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+    if method is None:\n+        raise Exception(\"HTTP method must be set\")\n+    if resource_path is None:\n+        raise Exception(\"Resource path must be set\")\n+\n+    signed_headers_dict, request_headers_dict = get_signed_header_info(configuration,\n+        resource_path, method, headers, body, query_params)\n+\n+    header_items = [\"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+    string_to_sign = \"\\n\".join(header_items)\n+\n+    digest, digest_prefix = get_message_digest(configuration, string_to_sign.encode())\n+    b64_signed_msg = sign_digest(configuration, digest)\n+\n+    request_headers_dict['Authorization'] = get_authorization_header(configuration,\n+        signed_headers_dict, b64_signed_msg)\n+\n+    return request_headers_dict\n+\n+def load_private_key(configuration):\n+    \"\"\"Load the private key used to sign HTTP requests.\n+        The private key is used to sign HTTP requests as defined in\n+        https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+    \"\"\"\n+    if configuration.private_key is not None:\n+        return\n+    with open(configuration.private_key_path, \"rb\") as f:\n+        # Decode PEM file and determine key type from PEM header.\n+        # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+        keys = pem.parse(f.read())\n+        if len(keys) != 1:\n+            raise Exception(\"File must contain exactly one private key\")\n+        key = keys[0].as_text()\n+        if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+            configuration.private_key = RSA.importKey(key)\n+        elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+            configuration.private_key = ECC.importKey(key)\n+        else:\n+            raise Exception(\"Unsupported key\")\n+\n+def get_signed_header_info(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A tuple containing two dict objects:\n+        The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+        The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+\n+    if body is None:\n+        body = ''\n+    else:\n+        body = json.dumps(body)\n+\n+    # Build the '(request-target)' HTTP signature parameter.\n+    target_host = urlparse(configuration.host).netloc\n+    target_path = urlparse(configuration.host).path\n+    request_target = method.lower() + \" \" + target_path + resource_path\n+    if query_params:\n+        raw_query = urlencode(query_params).replace('+', '%20')\n+        request_target += \"?\" + raw_query\n+\n+    # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+    now = datetime.datetime.now()\n+    stamp = mktime(now.timetuple())\n+    cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+    created = now.strftime(\"%s\")\n+    if configuration.signature_max_validity is not None:\n+        expires = (now + configuration.signature_max_validity).strftime(\"%s\")\n+\n+    signed_headers_dict = {}\n+    request_headers_dict = {}\n+    for hdr_key in configuration.signed_headers_dict:\n+        hdr_key = hdr_key.lower()\n+        if hdr_key == HEADER_REQUEST_TARGET:\n+            value = request_target\n+        elif hdr_key == HEADER_CREATED:\n+            value = created\n+        elif hdr_key == HEADER_EXPIRES:\n+            value = expires\n+        elif hdr_key == HEADER_DATE:\n+            value = cdate\n+            request_headers_dict['Date'] = '{0}'.format(cdate)\n+        elif hdr_key == HEADER_DIGEST:\n+            request_body = body.encode()\n+            body_digest, digest_prefix = get_message_digest(configuration, request_body)\n+            b64_body_digest = b64encode(body_digest.digest())\n+            value = digest_prefix + b64_body_digest.decode('ascii')\n+            request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+        elif hdr_key == HEADER_HOST:\n+            value = target_host\n+            request_headers_dict['Host'] = '{0}'.format(target_host)\n+        else:\n+            value = headers[hdr_key]\n+        signed_headers_dict[hdr_key] = value\n+\n+    # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+    if len(configuration.signed_headers_dict) == 0:\n+        signed_headers_dict[HEADER_CREATED] = created\n+\n+    return signed_header_dict, request_headers_dict\n+\n+def get_message_digest(configuration, data):\n+    \"\"\"\n+    Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+    :param data: The string representation of the date to be hashed with a cryptographic hash.\n+    :return: A tuple of (digest, prefix).\n+        The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+        The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+        'Digest' header as specified in RFC 3230.\n+    \"\"\"\n+    if configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4MDMwNw=="}, "originalCommit": {"oid": "21c478fe7e19b6641b964b615ffb32cad66441c1"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODY2MDU3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMDo0MzoyN1rOFeK6uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTo0NDozNlrOFeOjVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4MDQ3Mw==", "bodyText": "Can we use our constants here?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367180473", "createdAt": "2020-01-16T00:43:27Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,221 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+\n+SCHEME_HS2019 = 'hs2019'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+def get_http_signature_headers(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Create a cryptographic message signature for the HTTP request and add the signed headers.\n+    \n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+    if method is None:\n+        raise Exception(\"HTTP method must be set\")\n+    if resource_path is None:\n+        raise Exception(\"Resource path must be set\")\n+\n+    signed_headers_dict, request_headers_dict = get_signed_header_info(configuration,\n+        resource_path, method, headers, body, query_params)\n+\n+    header_items = [\"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+    string_to_sign = \"\\n\".join(header_items)\n+\n+    digest, digest_prefix = get_message_digest(configuration, string_to_sign.encode())\n+    b64_signed_msg = sign_digest(configuration, digest)\n+\n+    request_headers_dict['Authorization'] = get_authorization_header(configuration,\n+        signed_headers_dict, b64_signed_msg)\n+\n+    return request_headers_dict\n+\n+def load_private_key(configuration):\n+    \"\"\"Load the private key used to sign HTTP requests.\n+        The private key is used to sign HTTP requests as defined in\n+        https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+    \"\"\"\n+    if configuration.private_key is not None:\n+        return\n+    with open(configuration.private_key_path, \"rb\") as f:\n+        # Decode PEM file and determine key type from PEM header.\n+        # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+        keys = pem.parse(f.read())\n+        if len(keys) != 1:\n+            raise Exception(\"File must contain exactly one private key\")\n+        key = keys[0].as_text()\n+        if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+            configuration.private_key = RSA.importKey(key)\n+        elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+            configuration.private_key = ECC.importKey(key)\n+        else:\n+            raise Exception(\"Unsupported key\")\n+\n+def get_signed_header_info(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A tuple containing two dict objects:\n+        The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+        The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+\n+    if body is None:\n+        body = ''\n+    else:\n+        body = json.dumps(body)\n+\n+    # Build the '(request-target)' HTTP signature parameter.\n+    target_host = urlparse(configuration.host).netloc\n+    target_path = urlparse(configuration.host).path\n+    request_target = method.lower() + \" \" + target_path + resource_path\n+    if query_params:\n+        raw_query = urlencode(query_params).replace('+', '%20')\n+        request_target += \"?\" + raw_query\n+\n+    # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+    now = datetime.datetime.now()\n+    stamp = mktime(now.timetuple())\n+    cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+    created = now.strftime(\"%s\")\n+    if configuration.signature_max_validity is not None:\n+        expires = (now + configuration.signature_max_validity).strftime(\"%s\")\n+\n+    signed_headers_dict = {}\n+    request_headers_dict = {}\n+    for hdr_key in configuration.signed_headers_dict:\n+        hdr_key = hdr_key.lower()\n+        if hdr_key == HEADER_REQUEST_TARGET:\n+            value = request_target\n+        elif hdr_key == HEADER_CREATED:\n+            value = created\n+        elif hdr_key == HEADER_EXPIRES:\n+            value = expires\n+        elif hdr_key == HEADER_DATE:\n+            value = cdate\n+            request_headers_dict['Date'] = '{0}'.format(cdate)\n+        elif hdr_key == HEADER_DIGEST:\n+            request_body = body.encode()\n+            body_digest, digest_prefix = get_message_digest(configuration, request_body)\n+            b64_body_digest = b64encode(body_digest.digest())\n+            value = digest_prefix + b64_body_digest.decode('ascii')\n+            request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+        elif hdr_key == HEADER_HOST:\n+            value = target_host\n+            request_headers_dict['Host'] = '{0}'.format(target_host)\n+        else:\n+            value = headers[hdr_key]\n+        signed_headers_dict[hdr_key] = value\n+\n+    # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+    if len(configuration.signed_headers_dict) == 0:\n+        signed_headers_dict[HEADER_CREATED] = created\n+\n+    return signed_header_dict, request_headers_dict\n+\n+def get_message_digest(configuration, data):\n+    \"\"\"\n+    Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+    :param data: The string representation of the date to be hashed with a cryptographic hash.\n+    :return: A tuple of (digest, prefix).\n+        The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+        The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+        'Digest' header as specified in RFC 3230.\n+    \"\"\"\n+    if configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+        digest = SHA512.new()\n+        prefix = \"SHA-512=\"\n+    elif configuration.signing_scheme in [\"rsa-sha256\"]:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c478fe7e19b6641b964b615ffb32cad66441c1"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0MDAyMg==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367240022", "createdAt": "2020-01-16T05:44:36Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,221 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+\n+SCHEME_HS2019 = 'hs2019'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+def get_http_signature_headers(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Create a cryptographic message signature for the HTTP request and add the signed headers.\n+    \n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+    if method is None:\n+        raise Exception(\"HTTP method must be set\")\n+    if resource_path is None:\n+        raise Exception(\"Resource path must be set\")\n+\n+    signed_headers_dict, request_headers_dict = get_signed_header_info(configuration,\n+        resource_path, method, headers, body, query_params)\n+\n+    header_items = [\"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+    string_to_sign = \"\\n\".join(header_items)\n+\n+    digest, digest_prefix = get_message_digest(configuration, string_to_sign.encode())\n+    b64_signed_msg = sign_digest(configuration, digest)\n+\n+    request_headers_dict['Authorization'] = get_authorization_header(configuration,\n+        signed_headers_dict, b64_signed_msg)\n+\n+    return request_headers_dict\n+\n+def load_private_key(configuration):\n+    \"\"\"Load the private key used to sign HTTP requests.\n+        The private key is used to sign HTTP requests as defined in\n+        https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+    \"\"\"\n+    if configuration.private_key is not None:\n+        return\n+    with open(configuration.private_key_path, \"rb\") as f:\n+        # Decode PEM file and determine key type from PEM header.\n+        # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+        keys = pem.parse(f.read())\n+        if len(keys) != 1:\n+            raise Exception(\"File must contain exactly one private key\")\n+        key = keys[0].as_text()\n+        if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+            configuration.private_key = RSA.importKey(key)\n+        elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+            configuration.private_key = ECC.importKey(key)\n+        else:\n+            raise Exception(\"Unsupported key\")\n+\n+def get_signed_header_info(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A tuple containing two dict objects:\n+        The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+        The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+\n+    if body is None:\n+        body = ''\n+    else:\n+        body = json.dumps(body)\n+\n+    # Build the '(request-target)' HTTP signature parameter.\n+    target_host = urlparse(configuration.host).netloc\n+    target_path = urlparse(configuration.host).path\n+    request_target = method.lower() + \" \" + target_path + resource_path\n+    if query_params:\n+        raw_query = urlencode(query_params).replace('+', '%20')\n+        request_target += \"?\" + raw_query\n+\n+    # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+    now = datetime.datetime.now()\n+    stamp = mktime(now.timetuple())\n+    cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+    created = now.strftime(\"%s\")\n+    if configuration.signature_max_validity is not None:\n+        expires = (now + configuration.signature_max_validity).strftime(\"%s\")\n+\n+    signed_headers_dict = {}\n+    request_headers_dict = {}\n+    for hdr_key in configuration.signed_headers_dict:\n+        hdr_key = hdr_key.lower()\n+        if hdr_key == HEADER_REQUEST_TARGET:\n+            value = request_target\n+        elif hdr_key == HEADER_CREATED:\n+            value = created\n+        elif hdr_key == HEADER_EXPIRES:\n+            value = expires\n+        elif hdr_key == HEADER_DATE:\n+            value = cdate\n+            request_headers_dict['Date'] = '{0}'.format(cdate)\n+        elif hdr_key == HEADER_DIGEST:\n+            request_body = body.encode()\n+            body_digest, digest_prefix = get_message_digest(configuration, request_body)\n+            b64_body_digest = b64encode(body_digest.digest())\n+            value = digest_prefix + b64_body_digest.decode('ascii')\n+            request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+        elif hdr_key == HEADER_HOST:\n+            value = target_host\n+            request_headers_dict['Host'] = '{0}'.format(target_host)\n+        else:\n+            value = headers[hdr_key]\n+        signed_headers_dict[hdr_key] = value\n+\n+    # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+    if len(configuration.signed_headers_dict) == 0:\n+        signed_headers_dict[HEADER_CREATED] = created\n+\n+    return signed_header_dict, request_headers_dict\n+\n+def get_message_digest(configuration, data):\n+    \"\"\"\n+    Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+    :param data: The string representation of the date to be hashed with a cryptographic hash.\n+    :return: A tuple of (digest, prefix).\n+        The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+        The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+        'Digest' header as specified in RFC 3230.\n+    \"\"\"\n+    if configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+        digest = SHA512.new()\n+        prefix = \"SHA-512=\"\n+    elif configuration.signing_scheme in [\"rsa-sha256\"]:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4MDQ3Mw=="}, "originalCommit": {"oid": "21c478fe7e19b6641b964b615ffb32cad66441c1"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODY4NDM5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMDo1ODo1MlrOFeLJYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTo0NDoxNlrOFeOjHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4NDIyNQ==", "bodyText": "Can we delete this line?\nLine 211 sets headers_value for us.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367184225", "createdAt": "2020-01-16T00:58:52Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,221 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+\n+SCHEME_HS2019 = 'hs2019'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+def get_http_signature_headers(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Create a cryptographic message signature for the HTTP request and add the signed headers.\n+    \n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+    if method is None:\n+        raise Exception(\"HTTP method must be set\")\n+    if resource_path is None:\n+        raise Exception(\"Resource path must be set\")\n+\n+    signed_headers_dict, request_headers_dict = get_signed_header_info(configuration,\n+        resource_path, method, headers, body, query_params)\n+\n+    header_items = [\"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+    string_to_sign = \"\\n\".join(header_items)\n+\n+    digest, digest_prefix = get_message_digest(configuration, string_to_sign.encode())\n+    b64_signed_msg = sign_digest(configuration, digest)\n+\n+    request_headers_dict['Authorization'] = get_authorization_header(configuration,\n+        signed_headers_dict, b64_signed_msg)\n+\n+    return request_headers_dict\n+\n+def load_private_key(configuration):\n+    \"\"\"Load the private key used to sign HTTP requests.\n+        The private key is used to sign HTTP requests as defined in\n+        https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+    \"\"\"\n+    if configuration.private_key is not None:\n+        return\n+    with open(configuration.private_key_path, \"rb\") as f:\n+        # Decode PEM file and determine key type from PEM header.\n+        # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+        keys = pem.parse(f.read())\n+        if len(keys) != 1:\n+            raise Exception(\"File must contain exactly one private key\")\n+        key = keys[0].as_text()\n+        if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+            configuration.private_key = RSA.importKey(key)\n+        elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+            configuration.private_key = ECC.importKey(key)\n+        else:\n+            raise Exception(\"Unsupported key\")\n+\n+def get_signed_header_info(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A tuple containing two dict objects:\n+        The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+        The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+\n+    if body is None:\n+        body = ''\n+    else:\n+        body = json.dumps(body)\n+\n+    # Build the '(request-target)' HTTP signature parameter.\n+    target_host = urlparse(configuration.host).netloc\n+    target_path = urlparse(configuration.host).path\n+    request_target = method.lower() + \" \" + target_path + resource_path\n+    if query_params:\n+        raw_query = urlencode(query_params).replace('+', '%20')\n+        request_target += \"?\" + raw_query\n+\n+    # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+    now = datetime.datetime.now()\n+    stamp = mktime(now.timetuple())\n+    cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+    created = now.strftime(\"%s\")\n+    if configuration.signature_max_validity is not None:\n+        expires = (now + configuration.signature_max_validity).strftime(\"%s\")\n+\n+    signed_headers_dict = {}\n+    request_headers_dict = {}\n+    for hdr_key in configuration.signed_headers_dict:\n+        hdr_key = hdr_key.lower()\n+        if hdr_key == HEADER_REQUEST_TARGET:\n+            value = request_target\n+        elif hdr_key == HEADER_CREATED:\n+            value = created\n+        elif hdr_key == HEADER_EXPIRES:\n+            value = expires\n+        elif hdr_key == HEADER_DATE:\n+            value = cdate\n+            request_headers_dict['Date'] = '{0}'.format(cdate)\n+        elif hdr_key == HEADER_DIGEST:\n+            request_body = body.encode()\n+            body_digest, digest_prefix = get_message_digest(configuration, request_body)\n+            b64_body_digest = b64encode(body_digest.digest())\n+            value = digest_prefix + b64_body_digest.decode('ascii')\n+            request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+        elif hdr_key == HEADER_HOST:\n+            value = target_host\n+            request_headers_dict['Host'] = '{0}'.format(target_host)\n+        else:\n+            value = headers[hdr_key]\n+        signed_headers_dict[hdr_key] = value\n+\n+    # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+    if len(configuration.signed_headers_dict) == 0:\n+        signed_headers_dict[HEADER_CREATED] = created\n+\n+    return signed_header_dict, request_headers_dict\n+\n+def get_message_digest(configuration, data):\n+    \"\"\"\n+    Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+    :param data: The string representation of the date to be hashed with a cryptographic hash.\n+    :return: A tuple of (digest, prefix).\n+        The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+        The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+        'Digest' header as specified in RFC 3230.\n+    \"\"\"\n+    if configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+        digest = SHA512.new()\n+        prefix = \"SHA-512=\"\n+    elif configuration.signing_scheme in [\"rsa-sha256\"]:\n+        digest = SHA256.new()\n+        prefix = \"SHA-256=\"\n+    else:\n+        raise Exception(\n+            \"Unsupported signing algorithm: {0}\".format(configuration.signing_scheme))\n+    digest.update(data)\n+    return digest, prefix\n+\n+def sign_digest(configuration, digest):\n+    \"\"\"\n+    Signs a message digest with a private key specified in the configuration.\n+\n+    :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+    :return: A base-64 string representing the cryptographic signature of the input digest.\n+    \"\"\"\n+    load_private_key(configuration)\n+    privkey = self.private_key\n+    if isinstance(privkey, RSA.RsaKey):\n+        if configuration.signing_algorithm == ALGORITHM_RSASSA_PSS:\n+            # RSASSA-PSS in Section 8.1 of RFC8017.\n+            signature = pss.new(privkey).sign(digest)\n+        elif configuration.signing_algorithm == ALGORITHM_RSASSA_PKCS1v15:\n+            # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+            signature = PKCS1_v1_5.new(privkey).sign(digest)\n+        else:\n+            raise Exception(\"Unsupported signature algorithm: {0}\".format(configuration.signing_algorithm))\n+    elif isinstance(privkey, ECC.EccKey):\n+        if configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+            signature = DSS.new(privkey, configuration.signing_algorithm).sign(digest)\n+        else:\n+            raise Exception(\"Unsupported signature algorithm: {0}\".format(configuration.signing_algorithm))\n+    else:\n+        raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+    return b64encode(signature)\n+\n+def get_authorization_header(configuration, signed_headers, signed_msg):\n+    \"\"\"\n+    Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+    \n+    :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+        must be included in the HTTP signature calculation.\n+    :param signed_msg: A base-64 encoded string representation of the signature.\n+    :return: The string value of the 'Authorization' header, representing the signature\n+        of the HTTP request.\n+    \"\"\"\n+\n+    headers_value = \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c478fe7e19b6641b964b615ffb32cad66441c1"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzOTk2NA==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367239964", "createdAt": "2020-01-16T05:44:16Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,221 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+\n+SCHEME_HS2019 = 'hs2019'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+def get_http_signature_headers(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Create a cryptographic message signature for the HTTP request and add the signed headers.\n+    \n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+    if method is None:\n+        raise Exception(\"HTTP method must be set\")\n+    if resource_path is None:\n+        raise Exception(\"Resource path must be set\")\n+\n+    signed_headers_dict, request_headers_dict = get_signed_header_info(configuration,\n+        resource_path, method, headers, body, query_params)\n+\n+    header_items = [\"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+    string_to_sign = \"\\n\".join(header_items)\n+\n+    digest, digest_prefix = get_message_digest(configuration, string_to_sign.encode())\n+    b64_signed_msg = sign_digest(configuration, digest)\n+\n+    request_headers_dict['Authorization'] = get_authorization_header(configuration,\n+        signed_headers_dict, b64_signed_msg)\n+\n+    return request_headers_dict\n+\n+def load_private_key(configuration):\n+    \"\"\"Load the private key used to sign HTTP requests.\n+        The private key is used to sign HTTP requests as defined in\n+        https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+    \"\"\"\n+    if configuration.private_key is not None:\n+        return\n+    with open(configuration.private_key_path, \"rb\") as f:\n+        # Decode PEM file and determine key type from PEM header.\n+        # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+        keys = pem.parse(f.read())\n+        if len(keys) != 1:\n+            raise Exception(\"File must contain exactly one private key\")\n+        key = keys[0].as_text()\n+        if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+            configuration.private_key = RSA.importKey(key)\n+        elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+            configuration.private_key = ECC.importKey(key)\n+        else:\n+            raise Exception(\"Unsupported key\")\n+\n+def get_signed_header_info(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A tuple containing two dict objects:\n+        The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+        The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+\n+    if body is None:\n+        body = ''\n+    else:\n+        body = json.dumps(body)\n+\n+    # Build the '(request-target)' HTTP signature parameter.\n+    target_host = urlparse(configuration.host).netloc\n+    target_path = urlparse(configuration.host).path\n+    request_target = method.lower() + \" \" + target_path + resource_path\n+    if query_params:\n+        raw_query = urlencode(query_params).replace('+', '%20')\n+        request_target += \"?\" + raw_query\n+\n+    # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+    now = datetime.datetime.now()\n+    stamp = mktime(now.timetuple())\n+    cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+    created = now.strftime(\"%s\")\n+    if configuration.signature_max_validity is not None:\n+        expires = (now + configuration.signature_max_validity).strftime(\"%s\")\n+\n+    signed_headers_dict = {}\n+    request_headers_dict = {}\n+    for hdr_key in configuration.signed_headers_dict:\n+        hdr_key = hdr_key.lower()\n+        if hdr_key == HEADER_REQUEST_TARGET:\n+            value = request_target\n+        elif hdr_key == HEADER_CREATED:\n+            value = created\n+        elif hdr_key == HEADER_EXPIRES:\n+            value = expires\n+        elif hdr_key == HEADER_DATE:\n+            value = cdate\n+            request_headers_dict['Date'] = '{0}'.format(cdate)\n+        elif hdr_key == HEADER_DIGEST:\n+            request_body = body.encode()\n+            body_digest, digest_prefix = get_message_digest(configuration, request_body)\n+            b64_body_digest = b64encode(body_digest.digest())\n+            value = digest_prefix + b64_body_digest.decode('ascii')\n+            request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+        elif hdr_key == HEADER_HOST:\n+            value = target_host\n+            request_headers_dict['Host'] = '{0}'.format(target_host)\n+        else:\n+            value = headers[hdr_key]\n+        signed_headers_dict[hdr_key] = value\n+\n+    # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+    if len(configuration.signed_headers_dict) == 0:\n+        signed_headers_dict[HEADER_CREATED] = created\n+\n+    return signed_header_dict, request_headers_dict\n+\n+def get_message_digest(configuration, data):\n+    \"\"\"\n+    Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+    :param data: The string representation of the date to be hashed with a cryptographic hash.\n+    :return: A tuple of (digest, prefix).\n+        The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+        The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+        'Digest' header as specified in RFC 3230.\n+    \"\"\"\n+    if configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+        digest = SHA512.new()\n+        prefix = \"SHA-512=\"\n+    elif configuration.signing_scheme in [\"rsa-sha256\"]:\n+        digest = SHA256.new()\n+        prefix = \"SHA-256=\"\n+    else:\n+        raise Exception(\n+            \"Unsupported signing algorithm: {0}\".format(configuration.signing_scheme))\n+    digest.update(data)\n+    return digest, prefix\n+\n+def sign_digest(configuration, digest):\n+    \"\"\"\n+    Signs a message digest with a private key specified in the configuration.\n+\n+    :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+    :return: A base-64 string representing the cryptographic signature of the input digest.\n+    \"\"\"\n+    load_private_key(configuration)\n+    privkey = self.private_key\n+    if isinstance(privkey, RSA.RsaKey):\n+        if configuration.signing_algorithm == ALGORITHM_RSASSA_PSS:\n+            # RSASSA-PSS in Section 8.1 of RFC8017.\n+            signature = pss.new(privkey).sign(digest)\n+        elif configuration.signing_algorithm == ALGORITHM_RSASSA_PKCS1v15:\n+            # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+            signature = PKCS1_v1_5.new(privkey).sign(digest)\n+        else:\n+            raise Exception(\"Unsupported signature algorithm: {0}\".format(configuration.signing_algorithm))\n+    elif isinstance(privkey, ECC.EccKey):\n+        if configuration.signing_algorithm in ECDSA_KEY_SIGNING_ALGORITHMS:\n+            signature = DSS.new(privkey, configuration.signing_algorithm).sign(digest)\n+        else:\n+            raise Exception(\"Unsupported signature algorithm: {0}\".format(configuration.signing_algorithm))\n+    else:\n+        raise Exception(\"Unsupported private key: {0}\".format(type(privkey)))\n+    return b64encode(signature)\n+\n+def get_authorization_header(configuration, signed_headers, signed_msg):\n+    \"\"\"\n+    Calculates and returns the value of the 'Authorization' header when signing HTTP requests.\n+    \n+    :param signed_headers : A list of strings. Each value is the name of a HTTP header that\n+        must be included in the HTTP signature calculation.\n+    :param signed_msg: A base-64 encoded string representation of the signature.\n+    :return: The string value of the 'Authorization' header, representing the signature\n+        of the HTTP request.\n+    \"\"\"\n+\n+    headers_value = \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4NDIyNQ=="}, "originalCommit": {"oid": "21c478fe7e19b6641b964b615ffb32cad66441c1"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODY4NzM5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMTowMTowMVrOFeLLPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTo0Mzo0NFrOFeOivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4NDcwMg==", "bodyText": "We have no self here. Should this be privkey = signing_info.private_key?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367184702", "createdAt": "2020-01-16T01:01:01Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,221 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+\n+SCHEME_HS2019 = 'hs2019'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+def get_http_signature_headers(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Create a cryptographic message signature for the HTTP request and add the signed headers.\n+    \n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+    if method is None:\n+        raise Exception(\"HTTP method must be set\")\n+    if resource_path is None:\n+        raise Exception(\"Resource path must be set\")\n+\n+    signed_headers_dict, request_headers_dict = get_signed_header_info(configuration,\n+        resource_path, method, headers, body, query_params)\n+\n+    header_items = [\"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+    string_to_sign = \"\\n\".join(header_items)\n+\n+    digest, digest_prefix = get_message_digest(configuration, string_to_sign.encode())\n+    b64_signed_msg = sign_digest(configuration, digest)\n+\n+    request_headers_dict['Authorization'] = get_authorization_header(configuration,\n+        signed_headers_dict, b64_signed_msg)\n+\n+    return request_headers_dict\n+\n+def load_private_key(configuration):\n+    \"\"\"Load the private key used to sign HTTP requests.\n+        The private key is used to sign HTTP requests as defined in\n+        https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+    \"\"\"\n+    if configuration.private_key is not None:\n+        return\n+    with open(configuration.private_key_path, \"rb\") as f:\n+        # Decode PEM file and determine key type from PEM header.\n+        # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+        keys = pem.parse(f.read())\n+        if len(keys) != 1:\n+            raise Exception(\"File must contain exactly one private key\")\n+        key = keys[0].as_text()\n+        if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+            configuration.private_key = RSA.importKey(key)\n+        elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+            configuration.private_key = ECC.importKey(key)\n+        else:\n+            raise Exception(\"Unsupported key\")\n+\n+def get_signed_header_info(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A tuple containing two dict objects:\n+        The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+        The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+\n+    if body is None:\n+        body = ''\n+    else:\n+        body = json.dumps(body)\n+\n+    # Build the '(request-target)' HTTP signature parameter.\n+    target_host = urlparse(configuration.host).netloc\n+    target_path = urlparse(configuration.host).path\n+    request_target = method.lower() + \" \" + target_path + resource_path\n+    if query_params:\n+        raw_query = urlencode(query_params).replace('+', '%20')\n+        request_target += \"?\" + raw_query\n+\n+    # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+    now = datetime.datetime.now()\n+    stamp = mktime(now.timetuple())\n+    cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+    created = now.strftime(\"%s\")\n+    if configuration.signature_max_validity is not None:\n+        expires = (now + configuration.signature_max_validity).strftime(\"%s\")\n+\n+    signed_headers_dict = {}\n+    request_headers_dict = {}\n+    for hdr_key in configuration.signed_headers_dict:\n+        hdr_key = hdr_key.lower()\n+        if hdr_key == HEADER_REQUEST_TARGET:\n+            value = request_target\n+        elif hdr_key == HEADER_CREATED:\n+            value = created\n+        elif hdr_key == HEADER_EXPIRES:\n+            value = expires\n+        elif hdr_key == HEADER_DATE:\n+            value = cdate\n+            request_headers_dict['Date'] = '{0}'.format(cdate)\n+        elif hdr_key == HEADER_DIGEST:\n+            request_body = body.encode()\n+            body_digest, digest_prefix = get_message_digest(configuration, request_body)\n+            b64_body_digest = b64encode(body_digest.digest())\n+            value = digest_prefix + b64_body_digest.decode('ascii')\n+            request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+        elif hdr_key == HEADER_HOST:\n+            value = target_host\n+            request_headers_dict['Host'] = '{0}'.format(target_host)\n+        else:\n+            value = headers[hdr_key]\n+        signed_headers_dict[hdr_key] = value\n+\n+    # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+    if len(configuration.signed_headers_dict) == 0:\n+        signed_headers_dict[HEADER_CREATED] = created\n+\n+    return signed_header_dict, request_headers_dict\n+\n+def get_message_digest(configuration, data):\n+    \"\"\"\n+    Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+    :param data: The string representation of the date to be hashed with a cryptographic hash.\n+    :return: A tuple of (digest, prefix).\n+        The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+        The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+        'Digest' header as specified in RFC 3230.\n+    \"\"\"\n+    if configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+        digest = SHA512.new()\n+        prefix = \"SHA-512=\"\n+    elif configuration.signing_scheme in [\"rsa-sha256\"]:\n+        digest = SHA256.new()\n+        prefix = \"SHA-256=\"\n+    else:\n+        raise Exception(\n+            \"Unsupported signing algorithm: {0}\".format(configuration.signing_scheme))\n+    digest.update(data)\n+    return digest, prefix\n+\n+def sign_digest(configuration, digest):\n+    \"\"\"\n+    Signs a message digest with a private key specified in the configuration.\n+\n+    :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+    :return: A base-64 string representing the cryptographic signature of the input digest.\n+    \"\"\"\n+    load_private_key(configuration)\n+    privkey = self.private_key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21c478fe7e19b6641b964b615ffb32cad66441c1"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzOTg3MQ==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367239871", "createdAt": "2020-01-16T05:43:44Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,221 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+\n+SCHEME_HS2019 = 'hs2019'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+\n+def get_http_signature_headers(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Create a cryptographic message signature for the HTTP request and add the signed headers.\n+    \n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+    if method is None:\n+        raise Exception(\"HTTP method must be set\")\n+    if resource_path is None:\n+        raise Exception(\"Resource path must be set\")\n+\n+    signed_headers_dict, request_headers_dict = get_signed_header_info(configuration,\n+        resource_path, method, headers, body, query_params)\n+\n+    header_items = [\"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+    string_to_sign = \"\\n\".join(header_items)\n+\n+    digest, digest_prefix = get_message_digest(configuration, string_to_sign.encode())\n+    b64_signed_msg = sign_digest(configuration, digest)\n+\n+    request_headers_dict['Authorization'] = get_authorization_header(configuration,\n+        signed_headers_dict, b64_signed_msg)\n+\n+    return request_headers_dict\n+\n+def load_private_key(configuration):\n+    \"\"\"Load the private key used to sign HTTP requests.\n+        The private key is used to sign HTTP requests as defined in\n+        https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+    \"\"\"\n+    if configuration.private_key is not None:\n+        return\n+    with open(configuration.private_key_path, \"rb\") as f:\n+        # Decode PEM file and determine key type from PEM header.\n+        # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+        keys = pem.parse(f.read())\n+        if len(keys) != 1:\n+            raise Exception(\"File must contain exactly one private key\")\n+        key = keys[0].as_text()\n+        if key.startswith(\"-----BEGIN RSA PRIVATE KEY-----\"):\n+            configuration.private_key = RSA.importKey(key)\n+        elif key.startswith(\"-----BEGIN EC PRIVATE KEY-----\"):\n+            configuration.private_key = ECC.importKey(key)\n+        else:\n+            raise Exception(\"Unsupported key\")\n+\n+def get_signed_header_info(configuration, resource_path, method, headers, body, query_params):\n+    \"\"\"\n+    Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+    :param resource_path : A string representation of the HTTP request resource path.\n+    :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+    :param headers: A dict containing the HTTP request headers.\n+    :param body: The string representation of the HTTP request body.\n+    :param query_params: A string representing the HTTP request query parameters.\n+    :return: A tuple containing two dict objects:\n+        The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+        The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+    \"\"\"\n+\n+    if body is None:\n+        body = ''\n+    else:\n+        body = json.dumps(body)\n+\n+    # Build the '(request-target)' HTTP signature parameter.\n+    target_host = urlparse(configuration.host).netloc\n+    target_path = urlparse(configuration.host).path\n+    request_target = method.lower() + \" \" + target_path + resource_path\n+    if query_params:\n+        raw_query = urlencode(query_params).replace('+', '%20')\n+        request_target += \"?\" + raw_query\n+\n+    # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+    now = datetime.datetime.now()\n+    stamp = mktime(now.timetuple())\n+    cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+    created = now.strftime(\"%s\")\n+    if configuration.signature_max_validity is not None:\n+        expires = (now + configuration.signature_max_validity).strftime(\"%s\")\n+\n+    signed_headers_dict = {}\n+    request_headers_dict = {}\n+    for hdr_key in configuration.signed_headers_dict:\n+        hdr_key = hdr_key.lower()\n+        if hdr_key == HEADER_REQUEST_TARGET:\n+            value = request_target\n+        elif hdr_key == HEADER_CREATED:\n+            value = created\n+        elif hdr_key == HEADER_EXPIRES:\n+            value = expires\n+        elif hdr_key == HEADER_DATE:\n+            value = cdate\n+            request_headers_dict['Date'] = '{0}'.format(cdate)\n+        elif hdr_key == HEADER_DIGEST:\n+            request_body = body.encode()\n+            body_digest, digest_prefix = get_message_digest(configuration, request_body)\n+            b64_body_digest = b64encode(body_digest.digest())\n+            value = digest_prefix + b64_body_digest.decode('ascii')\n+            request_headers_dict['Digest'] = '{0}{1}'.format(digest_prefix, b64_body_digest.decode('ascii'))\n+        elif hdr_key == HEADER_HOST:\n+            value = target_host\n+            request_headers_dict['Host'] = '{0}'.format(target_host)\n+        else:\n+            value = headers[hdr_key]\n+        signed_headers_dict[hdr_key] = value\n+\n+    # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+    if len(configuration.signed_headers_dict) == 0:\n+        signed_headers_dict[HEADER_CREATED] = created\n+\n+    return signed_header_dict, request_headers_dict\n+\n+def get_message_digest(configuration, data):\n+    \"\"\"\n+    Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+    :param data: The string representation of the date to be hashed with a cryptographic hash.\n+    :return: A tuple of (digest, prefix).\n+        The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+        The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+        'Digest' header as specified in RFC 3230.\n+    \"\"\"\n+    if configuration.signing_scheme in [\"rsa-sha512\", \"hs2019\"]:\n+        digest = SHA512.new()\n+        prefix = \"SHA-512=\"\n+    elif configuration.signing_scheme in [\"rsa-sha256\"]:\n+        digest = SHA256.new()\n+        prefix = \"SHA-256=\"\n+    else:\n+        raise Exception(\n+            \"Unsupported signing algorithm: {0}\".format(configuration.signing_scheme))\n+    digest.update(data)\n+    return digest, prefix\n+\n+def sign_digest(configuration, digest):\n+    \"\"\"\n+    Signs a message digest with a private key specified in the configuration.\n+\n+    :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+    :return: A base-64 string representing the cryptographic signature of the input digest.\n+    \"\"\"\n+    load_private_key(configuration)\n+    privkey = self.private_key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4NDcwMg=="}, "originalCommit": {"oid": "21c478fe7e19b6641b964b615ffb32cad66441c1"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODk2MDkxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDozMjo1NFrOFeNujA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTo0MjowM1rOFeOhgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNjUwOA==", "bodyText": "Can you move this class to signing.py?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367226508", "createdAt": "2020-01-16T04:32:54Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -478,3 +426,75 @@ class Configuration(object):\n             url = url.replace(\"{\" + variable_name + \"}\", used_value)\n \n         return url\n+\n+class HttpSigningConfiguration(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9124c071ad7793d5eaeacd1df7224b408e2762"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzOTU1NQ==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367239555", "createdAt": "2020-01-16T05:42:03Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -478,3 +426,75 @@ class Configuration(object):\n             url = url.replace(\"{\" + variable_name + \"}\", used_value)\n \n         return url\n+\n+class HttpSigningConfiguration(object):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNjUwOA=="}, "originalCommit": {"oid": "de9124c071ad7793d5eaeacd1df7224b408e2762"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODk2MjA1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDozMzozNlrOFeNvJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTo0MDozN1rOFeOgWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNjY2MA==", "bodyText": "Can you update this to {{{packageName}}}.signing.HttpSigningConfiguration?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367226660", "createdAt": "2020-01-16T04:33:36Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -65,22 +41,23 @@ class Configuration(object):\n     sign the HTTP requests with the RSA-SSA-PSS signature algorithm, and set the expiration time\n     of the signature to 5 minutes after the signature has been created.\n       conf = {{{packageName}}}.Configuration(\n-        key_id='my-key-id',\n-        private_key_path='rsa.pem',\n-        signing_scheme=signing.SCHEME_HS2019,\n-        signing_algorithm=signing.ALGORITHM_RSASSA_PSS,\n-        signed_headers=[signing.HEADER_REQUEST_TARGET, signing.HEADER_CREATED,\n-                        signing.HEADER_EXPIRES, signing.HEADER_HOST, signing.HEADER_DATE,\n-                        signing.HEADER_DIGEST, 'Content-Type']\n-        signature_max_validity=timedelta(minutes=5),\n+        signing_info = {{{packageName}}}.HttpSigningConfiguration(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9124c071ad7793d5eaeacd1df7224b408e2762"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzOTI1Nw==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367239257", "createdAt": "2020-01-16T05:40:37Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -65,22 +41,23 @@ class Configuration(object):\n     sign the HTTP requests with the RSA-SSA-PSS signature algorithm, and set the expiration time\n     of the signature to 5 minutes after the signature has been created.\n       conf = {{{packageName}}}.Configuration(\n-        key_id='my-key-id',\n-        private_key_path='rsa.pem',\n-        signing_scheme=signing.SCHEME_HS2019,\n-        signing_algorithm=signing.ALGORITHM_RSASSA_PSS,\n-        signed_headers=[signing.HEADER_REQUEST_TARGET, signing.HEADER_CREATED,\n-                        signing.HEADER_EXPIRES, signing.HEADER_HOST, signing.HEADER_DATE,\n-                        signing.HEADER_DIGEST, 'Content-Type']\n-        signature_max_validity=timedelta(minutes=5),\n+        signing_info = {{{packageName}}}.HttpSigningConfiguration(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNjY2MA=="}, "originalCommit": {"oid": "de9124c071ad7793d5eaeacd1df7224b408e2762"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODk2NTc0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDozNTo1OFrOFeNxIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTozOTo1NVrOFeOfsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNzE3MA==", "bodyText": "Can you change get_http_signature_headers so you pass in signing_info rather than configuration?\nThe functions only use signing_info, not any other of the configuration properties.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367227170", "createdAt": "2020-01-16T04:35:58Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -10,21 +10,29 @@ from Crypto.Hash import SHA256, SHA512\n from base64 import b64encode\n from email.utils import formatdate\n \n+from {{packageName}}.configuration import Configuration\n+\n HEADER_REQUEST_TARGET = '(request-target)'\n HEADER_CREATED = '(created)'\n HEADER_EXPIRES = '(expires)'\n HEADER_HOST = 'host'\n HEADER_DATE = 'date'\n HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n \n SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n \n ALGORITHM_RSASSA_PSS = 'PSS'\n ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n \n ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n-ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n \n def get_http_signature_headers(configuration, resource_path, method, headers, body, query_params):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9124c071ad7793d5eaeacd1df7224b408e2762"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzOTA4OA==", "bodyText": "done. It's also using 'host', but I've simplified a bit.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367239088", "createdAt": "2020-01-16T05:39:55Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -10,21 +10,29 @@ from Crypto.Hash import SHA256, SHA512\n from base64 import b64encode\n from email.utils import formatdate\n \n+from {{packageName}}.configuration import Configuration\n+\n HEADER_REQUEST_TARGET = '(request-target)'\n HEADER_CREATED = '(created)'\n HEADER_EXPIRES = '(expires)'\n HEADER_HOST = 'host'\n HEADER_DATE = 'date'\n HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n \n SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n \n ALGORITHM_RSASSA_PSS = 'PSS'\n ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n \n ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n-ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {ECDSA_MODE_FIPS_186_3, ECDSA_MODE_DETERMINISTIC_RFC6979}\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n \n def get_http_signature_headers(configuration, resource_path, method, headers, body, query_params):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNzE3MA=="}, "originalCommit": {"oid": "de9124c071ad7793d5eaeacd1df7224b408e2762"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODk2NzY3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDozNzozNFrOFeNyRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTozMTozMFrOFeOY0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNzQ2Mg==", "bodyText": "Can you update this to {{{packageName}}}.signing.HttpSigningConfiguration?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367227462", "createdAt": "2020-01-16T04:37:34Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,32 +26,8 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n-    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n-        An 'Authorization' header is calculated by creating a hash of select headers,\n-        and optionally the body of the HTTP request, then signing the hash value using\n-        a private key which is available to the client.\n-    :param private_key_path: The path of the file containing a private key,\n-        when signing HTTP requests.\n-    :param signing_scheme: The signature scheme, when signing HTTP requests.\n-        Supported value is hs2019.\n-    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n-        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n-    :param signature_max_validity: The signature max validity,\n-        expressed as a datetime.timedelta value.\n-    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n-        that must be included in the HTTP signature calculation.\n-        The two special signature headers '(request-target)' and '(created)' SHOULD be\n-        included in SignedHeaders.\n-        The '(created)' header expresses when the signature was created.\n-        The '(request-target)' header is a concatenation of the lowercased :method, an\n-        ASCII space, and the :path pseudo-headers.\n-        When signed_headers is not specified, the client defaults to a single value,\n-        '(created)', in the list of HTTP headers.\n-        When SignedHeaders contains the 'Digest' value, the client performs the\n-        following operations:\n-        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n-        2. Set the 'Digest' header in the request body.\n-        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_info: Configuration parameters for HTTP signature.\n+        Must be an instance of {{{packageName}}}.HttpSigningConfiguration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9124c071ad7793d5eaeacd1df7224b408e2762"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzNzMyOQ==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367237329", "createdAt": "2020-01-16T05:31:30Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -26,32 +26,8 @@ class Configuration(object):\n     :param api_key_prefix: Dict to store API prefix (e.g. Bearer)\n     :param username: Username for HTTP basic authentication\n     :param password: Password for HTTP basic authentication\n-    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n-        An 'Authorization' header is calculated by creating a hash of select headers,\n-        and optionally the body of the HTTP request, then signing the hash value using\n-        a private key which is available to the client.\n-    :param private_key_path: The path of the file containing a private key,\n-        when signing HTTP requests.\n-    :param signing_scheme: The signature scheme, when signing HTTP requests.\n-        Supported value is hs2019.\n-    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n-        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n-    :param signature_max_validity: The signature max validity,\n-        expressed as a datetime.timedelta value.\n-    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n-        that must be included in the HTTP signature calculation.\n-        The two special signature headers '(request-target)' and '(created)' SHOULD be\n-        included in SignedHeaders.\n-        The '(created)' header expresses when the signature was created.\n-        The '(request-target)' header is a concatenation of the lowercased :method, an\n-        ASCII space, and the :path pseudo-headers.\n-        When signed_headers is not specified, the client defaults to a single value,\n-        '(created)', in the list of HTTP headers.\n-        When SignedHeaders contains the 'Digest' value, the client performs the\n-        following operations:\n-        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n-        2. Set the 'Digest' header in the request body.\n-        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_info: Configuration parameters for HTTP signature.\n+        Must be an instance of {{{packageName}}}.HttpSigningConfiguration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNzQ2Mg=="}, "originalCommit": {"oid": "de9124c071ad7793d5eaeacd1df7224b408e2762"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTA4MDE3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowNDoyNlrOFeO0Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowNTo1N1rOFeO1QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NDI5MA==", "bodyText": "Which of these params are required?\nIf they are required please set them as positional arguments with no None default value", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367244290", "createdAt": "2020-01-16T06:04:26Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,307 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    \"\"\"\n+    def __init__(self, key_id=None, private_key_path=None, signing_scheme=None,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e4f43c64c5fd0e2ac0280dd2e200c999199ed28"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NDYwOQ==", "bodyText": "good point.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367244609", "createdAt": "2020-01-16T06:05:57Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,307 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    \"\"\"\n+    def __init__(self, key_id=None, private_key_path=None, signing_scheme=None,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NDI5MA=="}, "originalCommit": {"oid": "0e4f43c64c5fd0e2ac0280dd2e200c999199ed28"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTA4MjQwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowNjowMlrOFeO1SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjozMDoyOFrOFePMjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NDYxNw==", "bodyText": "If signed headers is optional/can be set to None then please move these checks behind the if statement:\nif signed_headers is not None:\nWe are getting a CI error from tying to run len(signed_headers) when signed_headers = None", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367244617", "createdAt": "2020-01-16T06:06:02Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,307 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    \"\"\"\n+    def __init__(self, key_id=None, private_key_path=None, signing_scheme=None,\n+                 signing_algorithm=None, signature_max_validity=None, signed_headers=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        if self.signature_max_validity is None and \\\n+                signed_headers is not None and '(expires)' in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e4f43c64c5fd0e2ac0280dd2e200c999199ed28"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1MDU3NQ==", "bodyText": "good point, in golang this is not needed and I keep thinking golang.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367250575", "createdAt": "2020-01-16T06:30:28Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,307 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    \"\"\"\n+    def __init__(self, key_id=None, private_key_path=None, signing_scheme=None,\n+                 signing_algorithm=None, signature_max_validity=None, signed_headers=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        if self.signature_max_validity is None and \\\n+                signed_headers is not None and '(expires)' in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NDYxNw=="}, "originalCommit": {"oid": "0e4f43c64c5fd0e2ac0280dd2e200c999199ed28"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTA5MDIxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowOTo0OVrOFeO5bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowOTo0OVrOFeO5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NTY3OA==", "bodyText": "Aren't resource_path and method required?\nIf so please make them positional arguments without setting them to None by default.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367245678", "createdAt": "2020-01-16T06:09:49Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -517,19 +522,34 @@ class ApiClient(object):\n         else:\n             return content_types[0]\n \n-    def update_params_for_auth(self, headers, querys, auth_settings):\n+    def update_params_for_auth(self, headers, querys, auth_settings,\n+                               resource_path=None, method=None, body=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e4f43c64c5fd0e2ac0280dd2e200c999199ed28"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDc3Mzc2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxMDoyMFrOFee8lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoyNDo1MFrOFejKHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwODYyOQ==", "bodyText": "This is not assigning a value.\nCan you change it to add the entry to the dict only if self.signing_info is not None?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367508629", "createdAt": "2020-01-16T16:10:20Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -318,6 +361,15 @@ class Configuration(object):\n                 'value': 'Bearer ' + self.access_token\n             }\n   {{/isBasicBearer}}\n+  {{#isHttpSignature}}\n+            '{{name}}':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3NzA4MQ==", "bodyText": "thanks. Side effect of sync from master.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367577081", "createdAt": "2020-01-16T18:23:28Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -318,6 +361,15 @@ class Configuration(object):\n                 'value': 'Bearer ' + self.access_token\n             }\n   {{/isBasicBearer}}\n+  {{#isHttpSignature}}\n+            '{{name}}':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwODYyOQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3NzYzMA==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367577630", "createdAt": "2020-01-16T18:24:50Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -318,6 +361,15 @@ class Configuration(object):\n                 'value': 'Bearer ' + self.access_token\n             }\n   {{/isBasicBearer}}\n+  {{#isHttpSignature}}\n+            '{{name}}':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwODYyOQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDc5ODAxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxNjo1NVrOFefLxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOTo0NDozMFrOFelZ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxMjUxNw==", "bodyText": "How about removing this for loop and changing it to\nheaders.update(auth_headerd)?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367512517", "createdAt": "2020-01-16T16:16:55Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -517,19 +521,37 @@ class ApiClient(object):\n         else:\n             return content_types[0]\n \n-    def update_params_for_auth(self, headers, querys, auth_settings):\n+    def update_params_for_auth(self, headers, querys, auth_settings,\n+                               resource_path, method, body):\n         \"\"\"Updates header and query params based on authentication setting.\n \n         :param headers: Header parameters dict to be updated.\n         :param querys: Query parameters tuple list to be updated.\n         :param auth_settings: Authentication setting identifiers list.\n+        :resource_path: A string representation of the HTTP request resource path.\n+        :method: A string representation of the HTTP request method.\n+        :body: A string representation of the body of the HTTP request.\n         \"\"\"\n         if not auth_settings:\n             return\n \n         for auth in auth_settings:\n             auth_setting = self.configuration.auth_settings().get(auth)\n             if auth_setting:\n+{{#hasHttpSignatureMethods}}\n+                if auth_setting['type'] == 'http-signature':\n+                    # The HTTP signature scheme requires multiple HTTP headers\n+                    # that are calculated dynamically.\n+                    signing_info = self.configuration.signing_info\n+                    if signing_info is None:\n+                        raise Exception(\"HTTP signature configuration is missing\")\n+                    auth_headers = signing_info.get_http_signature_headers(\n+                                        self.configuration.host, resource_path,\n+                                        method, headers, body, querys)\n+                    for key, value in auth_headers.items():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxNDQ0Mw==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367614443", "createdAt": "2020-01-16T19:44:30Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -517,19 +521,37 @@ class ApiClient(object):\n         else:\n             return content_types[0]\n \n-    def update_params_for_auth(self, headers, querys, auth_settings):\n+    def update_params_for_auth(self, headers, querys, auth_settings,\n+                               resource_path, method, body):\n         \"\"\"Updates header and query params based on authentication setting.\n \n         :param headers: Header parameters dict to be updated.\n         :param querys: Query parameters tuple list to be updated.\n         :param auth_settings: Authentication setting identifiers list.\n+        :resource_path: A string representation of the HTTP request resource path.\n+        :method: A string representation of the HTTP request method.\n+        :body: A string representation of the body of the HTTP request.\n         \"\"\"\n         if not auth_settings:\n             return\n \n         for auth in auth_settings:\n             auth_setting = self.configuration.auth_settings().get(auth)\n             if auth_setting:\n+{{#hasHttpSignatureMethods}}\n+                if auth_setting['type'] == 'http-signature':\n+                    # The HTTP signature scheme requires multiple HTTP headers\n+                    # that are calculated dynamically.\n+                    signing_info = self.configuration.signing_info\n+                    if signing_info is None:\n+                        raise Exception(\"HTTP signature configuration is missing\")\n+                    auth_headers = signing_info.get_http_signature_headers(\n+                                        self.configuration.host, resource_path,\n+                                        method, headers, body, querys)\n+                    for key, value in auth_headers.items():", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxMjUxNw=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDg0MTgzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoyODoyM1rOFefnFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTo1MzozNVrOFes3bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxOTUwOQ==", "bodyText": "If these are required, can you change them to positional arguments?\nCan we remove the signing_scheme default value? Why set it when three options are accepted for it? List default values are a dangerous practice in python because they are mutable so let's change signed_headers to be positional or use a tuple for its default value.\nWhich of these parameters are optional?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367519509", "createdAt": "2020-01-16T16:28:23Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2MjM4Mw==", "bodyText": "From your code below, it looks like we allow signing_algorithm==None so it is optional?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367562383", "createdAt": "2020-01-16T17:50:28Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxOTUwOQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMzc2Ng==", "bodyText": "No, I made signing_algorithm mandatory in my latest iteration.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367613766", "createdAt": "2020-01-16T19:43:04Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxOTUwOQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyODg4Ng==", "bodyText": "So any arguments that have =None set by default is conveying that those arguments are optional and that them having values of None is fine and something that our users will use.\nSo it looks like I can call it with:\nconf = HttpSigningConfiguration(\n  key_id='my-key-id',\n  private_key_path='rsa.pem',\n  signing_scheme=SCHEME_HS2019\n)\n\nIs that a valid invocation?\nIf not can we make the params have defaults which are valid or make them positional?\nCan you describe why you have None value defaults set for signed_headers, signing_algorithm, and signature_max_validity?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367728886", "createdAt": "2020-01-17T01:17:09Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxOTUwOQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMjM4NA==", "bodyText": "@sebastien-rosset when you have time can you answer the questions I asked in my last comment here? This is not resolved yet.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367732384", "createdAt": "2020-01-17T01:32:54Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxOTUwOQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNTA3MQ==", "bodyText": "So any arguments that have =None set by default is conveying that those arguments are optional and that them having values of None is fine and something that our users will use.\nSo it looks like I can call it with:\nconf = HttpSigningConfiguration(\n  key_id='my-key-id',\n  private_key_path='rsa.pem',\n  signing_scheme=SCHEME_HS2019\n)\n\nIs that a valid invocation?\n\nYes, this is valid. The default list of signed headers would be ['(created)'], as specified in the spec. The signing algorithm would be set to RSASSA_PSS because the specified key is an RSA key. And by default there would be no expiration for the signature (though in practice servers often have their own restrictions).\n\nIf not can we make the params have defaults which are valid or make them positional?\nCan you describe why you have None value defaults set for signed_headers, signing_algorithm, and signature_max_validity?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367735071", "createdAt": "2020-01-17T01:46:01Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxOTUwOQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNjY4Ng==", "bodyText": "Thank you for explaining that. I am fine with this __init__ signature now that I understand that the above use case is valid. Feel free to mark this as resolved.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367736686", "createdAt": "2020-01-17T01:53:35Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxOTUwOQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDg5MDE5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo0MToxMFrOFegFMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo0OTo0OFrOFegY1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNzIxOQ==", "bodyText": "Would the private key change between api calls?\nHow about moving this in to the __init__ method.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367527219", "createdAt": "2020-01-16T16:41:10Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+            The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+            The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+            'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.signing_scheme in [SCHEME_RSA_SHA512, SCHEME_HS2019]:\n+            digest = SHA512.new()\n+            prefix = 'SHA-512='\n+        elif self.signing_scheme in [SCHEME_RSA_SHA256]:\n+            digest = SHA256.new()\n+            prefix = 'SHA-256='\n+        else:\n+            raise Exception(\"Unsupported signing algorithm: {0}\".format(self.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the signing_info.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.load_private_key()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzMjI0Ng==", "bodyText": "Yes, I can do that.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367532246", "createdAt": "2020-01-16T16:49:48Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+            The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+            The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+            'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.signing_scheme in [SCHEME_RSA_SHA512, SCHEME_HS2019]:\n+            digest = SHA512.new()\n+            prefix = 'SHA-512='\n+        elif self.signing_scheme in [SCHEME_RSA_SHA256]:\n+            digest = SHA256.new()\n+            prefix = 'SHA-256='\n+        else:\n+            raise Exception(\"Unsupported signing algorithm: {0}\".format(self.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the signing_info.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.load_private_key()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNzIxOQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDk3Njg0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzowNTo1MlrOFeg7pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOTo0MTo1NlrOFelVQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0MTE1Nw==", "bodyText": "Now changes depending upon what time zone the machine is in running this code.\nCan you add a constant time_zone which defaults to UTC in this class's __init__ method?\nThat way our user can specify what timezone now is calculated in.\nCan you update now an unix time zero to use that self.time_zone timezone?\nSee an example of timezone usage here: https://medium.com/@chaoren/datetime-to-unix-time-epoch-in-python-2-3-ecba6493e8b", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367541157", "createdAt": "2020-01-16T17:05:52Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNTU1Nw==", "bodyText": "The link you provided uses strftime('%s'), but it's a bad idea to use that. See\nhttps://stackoverflow.com/questions/11743019/convert-python-datetime-to-epoch-with-strftime", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367605557", "createdAt": "2020-01-16T19:25:28Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0MTE1Nw=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNjI4OA==", "bodyText": "Good to know, thanks. Sorry for that.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367606288", "createdAt": "2020-01-16T19:27:04Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0MTE1Nw=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMDk4Nw==", "bodyText": "The code is essentially calculating the deltatime (now - 01/01/1970), where both now and 01/01/1970 are datetime objects are in the same timezone. It may be UTC, PST or any time zone, but both arguments are in the same timezone, so shouldn't the outcome be exactly the same regardless of the time zone?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367610987", "createdAt": "2020-01-16T19:37:13Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0MTE1Nw=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMzA0Nw==", "bodyText": "Good to know, thanks. Sorry for that.\n\nI know. It's everywhere, initially I also used strftime('%s'). There is a better option but unfortunately it only works for Python 3.3 and above.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367613047", "createdAt": "2020-01-16T19:41:32Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0MTE1Nw=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMzI0OQ==", "bodyText": "Marking resolved for now.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367613249", "createdAt": "2020-01-16T19:41:56Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0MTE1Nw=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDk5NDQ0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzoxMToxMVrOFehGtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoyMTo0N1rOFejFOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0Mzk4OA==", "bodyText": "Can change this method's name to add a a _ or __ prefix so we can tell that it is not our publicly used method?\nSee\n\nhttp://python.robasworld.com/private-member-name-mangling/\nhttps://softwareengineering.stackexchange.com/questions/229804/usage-of-while-declaring-any-variables-or-class-member-in-python", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367543988", "createdAt": "2020-01-16T17:11:11Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3NjM3Nw==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367576377", "createdAt": "2020-01-16T18:21:47Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0Mzk4OA=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDk5NDkwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzoxMToyMVrOFehG-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoyMTo0MFrOFejFAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NDA1OA==", "bodyText": "Can change this method's name to add a a _ or __ prefix so we can tell that it is not our publicly used method?\nSee\n\nhttp://python.robasworld.com/private-member-name-mangling/\nhttps://softwareengineering.stackexchange.com/questions/229804/usage-of-while-declaring-any-variables-or-class-member-in-python", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367544058", "createdAt": "2020-01-16T17:11:21Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1MjA5Ng==", "bodyText": "sure, I can do that for all other methods, then. There is really only one method which is used outside this module.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367552096", "createdAt": "2020-01-16T17:27:46Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NDA1OA=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2MTU4OA==", "bodyText": "Sounds good. That's what I want to highlight with our underscore usage in method names.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367561588", "createdAt": "2020-01-16T17:48:44Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NDA1OA=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3NjMyMA==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367576320", "createdAt": "2020-01-16T18:21:40Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NDA1OA=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDk5NjMzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzoxMTo0NVrOFehH2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoyMTozMVrOFejExg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NDI4MQ==", "bodyText": "Can change this method's name to add a a _ or __ prefix so we can tell that it is not our publicly used method?\nSee\n\nhttp://python.robasworld.com/private-member-name-mangling/\nhttps://softwareengineering.stackexchange.com/questions/229804/usage-of-while-declaring-any-variables-or-class-member-in-python", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367544281", "createdAt": "2020-01-16T17:11:45Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3NjI2Mg==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367576262", "createdAt": "2020-01-16T18:21:31Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NDI4MQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDk5NjgyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzoxMTo1NFrOFehIKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoyMDo1N1rOFejDxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NDM2MQ==", "bodyText": "Can change this method's name to add a a _ or __ prefix so we can tell that it is not our publicly used method?\nSee\n\nhttp://python.robasworld.com/private-member-name-mangling/\nhttps://softwareengineering.stackexchange.com/questions/229804/usage-of-while-declaring-any-variables-or-class-member-in-python", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367544361", "createdAt": "2020-01-16T17:11:54Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+            The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+            The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+            'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.signing_scheme in [SCHEME_RSA_SHA512, SCHEME_HS2019]:\n+            digest = SHA512.new()\n+            prefix = 'SHA-512='\n+        elif self.signing_scheme in [SCHEME_RSA_SHA256]:\n+            digest = SHA256.new()\n+            prefix = 'SHA-256='\n+        else:\n+            raise Exception(\"Unsupported signing algorithm: {0}\".format(self.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3NjAwNw==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367576007", "createdAt": "2020-01-16T18:20:57Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+            The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+            The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+            'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.signing_scheme in [SCHEME_RSA_SHA512, SCHEME_HS2019]:\n+            digest = SHA512.new()\n+            prefix = 'SHA-512='\n+        elif self.signing_scheme in [SCHEME_RSA_SHA256]:\n+            digest = SHA256.new()\n+            prefix = 'SHA-256='\n+        else:\n+            raise Exception(\"Unsupported signing algorithm: {0}\".format(self.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NDM2MQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDk5OTIyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzoxMjo0NlrOFehJyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoyMTowNlrOFejEAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NDc3OA==", "bodyText": "Can change this method's name to add a a _ or __ prefix so we can tell that it is not our publicly used method?\nSee\n\nhttp://python.robasworld.com/private-member-name-mangling/\nhttps://softwareengineering.stackexchange.com/questions/229804/usage-of-while-declaring-any-variables-or-class-member-in-python", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367544778", "createdAt": "2020-01-16T17:12:46Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+            The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+            The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+            'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.signing_scheme in [SCHEME_RSA_SHA512, SCHEME_HS2019]:\n+            digest = SHA512.new()\n+            prefix = 'SHA-512='\n+        elif self.signing_scheme in [SCHEME_RSA_SHA256]:\n+            digest = SHA256.new()\n+            prefix = 'SHA-256='\n+        else:\n+            raise Exception(\"Unsupported signing algorithm: {0}\".format(self.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the signing_info.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.load_private_key()\n+        sig_alg = self.signing_algorithm\n+        if isinstance(self.private_key, RSA.RsaKey):\n+            if sig_alg is None or sig_alg == ALGORITHM_RSASSA_PSS:\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(self.private_key).sign(digest)\n+            elif sig_alg == ALGORITHM_RSASSA_PKCS1v15:\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(self.private_key).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(sig_alg))\n+        elif isinstance(self.private_key, ECC.EccKey):\n+            if sig_alg is None:\n+                sig_alg = ALGORITHM_ECDSA_MODE_FIPS_186_3\n+            if sig_alg in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(self.private_key, sig_alg).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(sig_alg))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(self.private_key)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3NjA2Nw==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367576067", "createdAt": "2020-01-16T18:21:06Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+            The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+            The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+            'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.signing_scheme in [SCHEME_RSA_SHA512, SCHEME_HS2019]:\n+            digest = SHA512.new()\n+            prefix = 'SHA-512='\n+        elif self.signing_scheme in [SCHEME_RSA_SHA256]:\n+            digest = SHA256.new()\n+            prefix = 'SHA-256='\n+        else:\n+            raise Exception(\"Unsupported signing algorithm: {0}\".format(self.signing_scheme))\n+        digest.update(data)\n+        return digest, prefix\n+\n+    def sign_digest(self, digest):\n+        \"\"\"\n+        Signs a message digest with a private key specified in the signing_info.\n+\n+        :param digest: A hashing object that contains the cryptographic digest of the HTTP request.\n+        :return: A base-64 string representing the cryptographic signature of the input digest.\n+        \"\"\"\n+        self.load_private_key()\n+        sig_alg = self.signing_algorithm\n+        if isinstance(self.private_key, RSA.RsaKey):\n+            if sig_alg is None or sig_alg == ALGORITHM_RSASSA_PSS:\n+                # RSASSA-PSS in Section 8.1 of RFC8017.\n+                signature = pss.new(self.private_key).sign(digest)\n+            elif sig_alg == ALGORITHM_RSASSA_PKCS1v15:\n+                # RSASSA-PKCS1-v1_5 in Section 8.2 of RFC8017.\n+                signature = PKCS1_v1_5.new(self.private_key).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(sig_alg))\n+        elif isinstance(self.private_key, ECC.EccKey):\n+            if sig_alg is None:\n+                sig_alg = ALGORITHM_ECDSA_MODE_FIPS_186_3\n+            if sig_alg in ECDSA_KEY_SIGNING_ALGORITHMS:\n+                signature = DSS.new(self.private_key, sig_alg).sign(digest)\n+            else:\n+                raise Exception(\"Unsupported signature algorithm: {0}\".format(sig_alg))\n+        else:\n+            raise Exception(\"Unsupported private key: {0}\".format(type(self.private_key)))\n+        return b64encode(signature)\n+\n+    def get_authorization_header(self, signed_headers, signed_msg):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NDc3OA=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTAwNDIzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzoxNDoyMFrOFehM4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoyMToxN1rOFejEVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NTU2OQ==", "bodyText": "Can change this method's name to add a a _ or __ prefix so we can tell that it is not our publicly used method?\nSee\n\nhttp://python.robasworld.com/private-member-name-mangling/\nhttps://softwareengineering.stackexchange.com/questions/229804/usage-of-while-declaring-any-variables-or-class-member-in-python", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367545569", "createdAt": "2020-01-16T17:14:20Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3NjE1MA==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367576150", "createdAt": "2020-01-16T18:21:17Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NTU2OQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTAyMDUzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzoxOToyNFrOFehWtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOTowNjozMlrOFekVUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0ODA4Nw==", "bodyText": "Is host unchanging?\nIf so, why not pass it in or pass in our configuration instance to this class's __init__ method?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367548087", "createdAt": "2020-01-16T17:19:24Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU5Njg4Mg==", "bodyText": "I don't think SDK developers should have to set the host in the HttpSigningConfiguration constructor, because they already do it in the Configuration constructor. But the Configuration class can set the host. This is what I have done locally, you can review when I commit. I will mark resolved for now.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367596882", "createdAt": "2020-01-16T19:06:32Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0ODA4Nw=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTA1Njk1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzozMTo0MlrOFehtbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxNjo1N1rOFeknqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1MzkwMg==", "bodyText": "If we only add the signing_info instance to the auth_setting dict if self.signing_info is not None in configuration.py, then how about we delete this if statement and exception raising?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367553902", "createdAt": "2020-01-16T17:31:42Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -517,19 +521,37 @@ class ApiClient(object):\n         else:\n             return content_types[0]\n \n-    def update_params_for_auth(self, headers, querys, auth_settings):\n+    def update_params_for_auth(self, headers, querys, auth_settings,\n+                               resource_path, method, body):\n         \"\"\"Updates header and query params based on authentication setting.\n \n         :param headers: Header parameters dict to be updated.\n         :param querys: Query parameters tuple list to be updated.\n         :param auth_settings: Authentication setting identifiers list.\n+        :resource_path: A string representation of the HTTP request resource path.\n+        :method: A string representation of the HTTP request method.\n+        :body: A string representation of the body of the HTTP request.\n         \"\"\"\n         if not auth_settings:\n             return\n \n         for auth in auth_settings:\n             auth_setting = self.configuration.auth_settings().get(auth)\n             if auth_setting:\n+{{#hasHttpSignatureMethods}}\n+                if auth_setting['type'] == 'http-signature':\n+                    # The HTTP signature scheme requires multiple HTTP headers\n+                    # that are calculated dynamically.\n+                    signing_info = self.configuration.signing_info\n+                    if signing_info is None:\n+                        raise Exception(\"HTTP signature configuration is missing\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTU3Ng==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367601576", "createdAt": "2020-01-16T19:16:57Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -517,19 +521,37 @@ class ApiClient(object):\n         else:\n             return content_types[0]\n \n-    def update_params_for_auth(self, headers, querys, auth_settings):\n+    def update_params_for_auth(self, headers, querys, auth_settings,\n+                               resource_path, method, body):\n         \"\"\"Updates header and query params based on authentication setting.\n \n         :param headers: Header parameters dict to be updated.\n         :param querys: Query parameters tuple list to be updated.\n         :param auth_settings: Authentication setting identifiers list.\n+        :resource_path: A string representation of the HTTP request resource path.\n+        :method: A string representation of the HTTP request method.\n+        :body: A string representation of the body of the HTTP request.\n         \"\"\"\n         if not auth_settings:\n             return\n \n         for auth in auth_settings:\n             auth_setting = self.configuration.auth_settings().get(auth)\n             if auth_setting:\n+{{#hasHttpSignatureMethods}}\n+                if auth_setting['type'] == 'http-signature':\n+                    # The HTTP signature scheme requires multiple HTTP headers\n+                    # that are calculated dynamically.\n+                    signing_info = self.configuration.signing_info\n+                    if signing_info is None:\n+                        raise Exception(\"HTTP signature configuration is missing\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1MzkwMg=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTA2ODg1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzozNTo0OVrOFeh0ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOTo0MDoxNFrOFelSDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NTc3OQ==", "bodyText": "Is this a specific if statement that can be included in the below if/elif case handling?\nHow about\n\nchanging this if statement to if auth_setting['in'] == 'header' and auth_setting['type'] == 'http-signature':\ndeleting the continue line from the bottom of this if block\nchange if auth_setting['in'] == 'cookie': to elif auth_setting['in'] == 'cookie':", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367555779", "createdAt": "2020-01-16T17:35:49Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -517,19 +521,37 @@ class ApiClient(object):\n         else:\n             return content_types[0]\n \n-    def update_params_for_auth(self, headers, querys, auth_settings):\n+    def update_params_for_auth(self, headers, querys, auth_settings,\n+                               resource_path, method, body):\n         \"\"\"Updates header and query params based on authentication setting.\n \n         :param headers: Header parameters dict to be updated.\n         :param querys: Query parameters tuple list to be updated.\n         :param auth_settings: Authentication setting identifiers list.\n+        :resource_path: A string representation of the HTTP request resource path.\n+        :method: A string representation of the HTTP request method.\n+        :body: A string representation of the body of the HTTP request.\n         \"\"\"\n         if not auth_settings:\n             return\n \n         for auth in auth_settings:\n             auth_setting = self.configuration.auth_settings().get(auth)\n             if auth_setting:\n+{{#hasHttpSignatureMethods}}\n+                if auth_setting['type'] == 'http-signature':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU5ODA2MA==", "bodyText": "what you are proposing would not work exactly as is, because the block is generated conditionally, so you could end up with a statement starting with \"elif\". But I get the idea.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367598060", "createdAt": "2020-01-16T19:09:15Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -517,19 +521,37 @@ class ApiClient(object):\n         else:\n             return content_types[0]\n \n-    def update_params_for_auth(self, headers, querys, auth_settings):\n+    def update_params_for_auth(self, headers, querys, auth_settings,\n+                               resource_path, method, body):\n         \"\"\"Updates header and query params based on authentication setting.\n \n         :param headers: Header parameters dict to be updated.\n         :param querys: Query parameters tuple list to be updated.\n         :param auth_settings: Authentication setting identifiers list.\n+        :resource_path: A string representation of the HTTP request resource path.\n+        :method: A string representation of the HTTP request method.\n+        :body: A string representation of the body of the HTTP request.\n         \"\"\"\n         if not auth_settings:\n             return\n \n         for auth in auth_settings:\n             auth_setting = self.configuration.auth_settings().get(auth)\n             if auth_setting:\n+{{#hasHttpSignatureMethods}}\n+                if auth_setting['type'] == 'http-signature':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NTc3OQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMDU1NQ==", "bodyText": "Hmm, it's a bit tricky to make it clean because of the indentation requirements. For example, we could have something like below but I feel it makes the logic harder to understand.\n            if auth_setting:\n                if auth_setting['in'] == 'cookie':\n                    headers['Cookie'] = auth_setting['value']\n                elif auth_setting['in'] == 'header':\n{{#hasHttpSignatureMethods}}\n                    if auth_setting['type'] == 'http-signature':\n                        # The HTTP signature scheme requires multiple HTTP headers\n                        # that are calculated dynamically.\n                        signing_info = self.configuration.signing_info\n                        if signing_info is None:\n                            raise Exception(\"HTTP signature configuration is missing\")\n                        auth_headers = signing_info.get_http_signature_headers(\n                                            resource_path, method, headers, body, querys)\n                        for key, value in auth_headers.items():\n                            headers[key] = value\n                    else:\n                        headers[auth_setting['key']] = auth_setting['value']\n{{/hasHttpSignatureMethods}}\n{{^hasHttpSignatureMethods}}\n                    headers[auth_setting['key']] = auth_setting['value']\n{{/hasHttpSignatureMethods}}\n                elif auth_setting['in'] == 'query':\n                    querys.append((auth_setting['key'], auth_setting['value']))\n                else:\n                    raise ApiValueError(\n                        'Authentication token must be in `query` or `header`'\n                    )", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367600555", "createdAt": "2020-01-16T19:14:49Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -517,19 +521,37 @@ class ApiClient(object):\n         else:\n             return content_types[0]\n \n-    def update_params_for_auth(self, headers, querys, auth_settings):\n+    def update_params_for_auth(self, headers, querys, auth_settings,\n+                               resource_path, method, body):\n         \"\"\"Updates header and query params based on authentication setting.\n \n         :param headers: Header parameters dict to be updated.\n         :param querys: Query parameters tuple list to be updated.\n         :param auth_settings: Authentication setting identifiers list.\n+        :resource_path: A string representation of the HTTP request resource path.\n+        :method: A string representation of the HTTP request method.\n+        :body: A string representation of the body of the HTTP request.\n         \"\"\"\n         if not auth_settings:\n             return\n \n         for auth in auth_settings:\n             auth_setting = self.configuration.auth_settings().get(auth)\n             if auth_setting:\n+{{#hasHttpSignatureMethods}}\n+                if auth_setting['type'] == 'http-signature':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NTc3OQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMDg0OA==", "bodyText": "That's true. You could change this block to an elif then and move it to be conditionally included down below.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367600848", "createdAt": "2020-01-16T19:15:27Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -517,19 +521,37 @@ class ApiClient(object):\n         else:\n             return content_types[0]\n \n-    def update_params_for_auth(self, headers, querys, auth_settings):\n+    def update_params_for_auth(self, headers, querys, auth_settings,\n+                               resource_path, method, body):\n         \"\"\"Updates header and query params based on authentication setting.\n \n         :param headers: Header parameters dict to be updated.\n         :param querys: Query parameters tuple list to be updated.\n         :param auth_settings: Authentication setting identifiers list.\n+        :resource_path: A string representation of the HTTP request resource path.\n+        :method: A string representation of the HTTP request method.\n+        :body: A string representation of the body of the HTTP request.\n         \"\"\"\n         if not auth_settings:\n             return\n \n         for auth in auth_settings:\n             auth_setting = self.configuration.auth_settings().get(auth)\n             if auth_setting:\n+{{#hasHttpSignatureMethods}}\n+                if auth_setting['type'] == 'http-signature':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NTc3OQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMzkyNA==", "bodyText": "You don't need all that code, how about:\n            if auth_setting:\n                if auth_setting['in'] == 'cookie':\n                    headers['Cookie'] = auth_setting['value']\n                elif auth_setting['in'] == 'header':\n                    if auth_setting['type'] != 'http-signature':\n                        headers[auth_setting['key']] = auth_setting['value']\n{{#hasHttpSignatureMethods}}\n                    else:\n                        # The HTTP signature scheme requires multiple HTTP headers\n                        # that are calculated dynamically.\n                        signing_info = self.configuration.signing_info\n                        # NOTE: no need to raise an exception because this entry only exists if signng_info is not None\n                        auth_headers = signing_info.get_http_signature_headers(\n                                            resource_path, method, headers, body, querys)\n                        headers.update(auth_headers)\n{{/hasHttpSignatureMethods}}\n                elif auth_setting['in'] == 'query':\n                    querys.append((auth_setting['key'], auth_setting['value']))\n                else:\n                    raise ApiValueError(\n                        'Authentication token must be in `query`, `header`, or `cookie`'\n                    )", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367603924", "createdAt": "2020-01-16T19:21:50Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -517,19 +521,37 @@ class ApiClient(object):\n         else:\n             return content_types[0]\n \n-    def update_params_for_auth(self, headers, querys, auth_settings):\n+    def update_params_for_auth(self, headers, querys, auth_settings,\n+                               resource_path, method, body):\n         \"\"\"Updates header and query params based on authentication setting.\n \n         :param headers: Header parameters dict to be updated.\n         :param querys: Query parameters tuple list to be updated.\n         :param auth_settings: Authentication setting identifiers list.\n+        :resource_path: A string representation of the HTTP request resource path.\n+        :method: A string representation of the HTTP request method.\n+        :body: A string representation of the body of the HTTP request.\n         \"\"\"\n         if not auth_settings:\n             return\n \n         for auth in auth_settings:\n             auth_setting = self.configuration.auth_settings().get(auth)\n             if auth_setting:\n+{{#hasHttpSignatureMethods}}\n+                if auth_setting['type'] == 'http-signature':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NTc3OQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxMjQzMA==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367612430", "createdAt": "2020-01-16T19:40:14Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -517,19 +521,37 @@ class ApiClient(object):\n         else:\n             return content_types[0]\n \n-    def update_params_for_auth(self, headers, querys, auth_settings):\n+    def update_params_for_auth(self, headers, querys, auth_settings,\n+                               resource_path, method, body):\n         \"\"\"Updates header and query params based on authentication setting.\n \n         :param headers: Header parameters dict to be updated.\n         :param querys: Query parameters tuple list to be updated.\n         :param auth_settings: Authentication setting identifiers list.\n+        :resource_path: A string representation of the HTTP request resource path.\n+        :method: A string representation of the HTTP request method.\n+        :body: A string representation of the body of the HTTP request.\n         \"\"\"\n         if not auth_settings:\n             return\n \n         for auth in auth_settings:\n             auth_setting = self.configuration.auth_settings().get(auth)\n             if auth_setting:\n+{{#hasHttpSignatureMethods}}\n+                if auth_setting['type'] == 'http-signature':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NTc3OQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTA3MTQ0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzozNjo0OFrOFeh2ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoxNjozNlrOFei8XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NjE5Ng==", "bodyText": "Can you add type here? It is string, right?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367556196", "createdAt": "2020-01-16T17:36:48Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3NDEwOQ==", "bodyText": "added.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367574109", "createdAt": "2020-01-16T18:16:36Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NjE5Ng=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTA3MzM4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzozNzoyN1rOFeh3ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoxNjoyNFrOFei78g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NjUxNQ==", "bodyText": "Can you add type here? The string path", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367556515", "createdAt": "2020-01-16T17:37:27Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3NDAwMg==", "bodyText": "added.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367574002", "createdAt": "2020-01-16T18:16:24Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NjUxNQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTA3NzU4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzozODo1OFrOFeh6QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoxNjoxMVrOFei7iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NzE4NQ==", "bodyText": "Can you add type here?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367557185", "createdAt": "2020-01-16T17:38:58Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3Mzg5Ng==", "bodyText": "added", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367573896", "createdAt": "2020-01-16T18:16:11Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NzE4NQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTA3OTk4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzozOTo1N1rOFeh75Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoxMDoxN1rOFeixJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NzYwNQ==", "bodyText": "Can you update this to list the three accepted values here?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367557605", "createdAt": "2020-01-16T17:39:57Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3MTIzNw==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367571237", "createdAt": "2020-01-16T18:10:17Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NzYwNQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTA4MjQ1OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzo0MDo1MlrOFeh9hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODoxMDowOFrOFeiw4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1ODAyMw==", "bodyText": "Optionally remove this. Our context is python and we know that this is a constructor.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367558023", "createdAt": "2020-01-16T17:40:52Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3MTE3MQ==", "bodyText": "done", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367571171", "createdAt": "2020-01-16T18:10:08Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1ODAyMw=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTA4NDczOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzo0MTo0OFrOFeh_Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODowOTo1MVrOFeiwZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1ODQxNA==", "bodyText": "Can you include your clearer description here?\n           For RSA keys, supported values are PKCS1v15, PSS.\n           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367558414", "createdAt": "2020-01-16T17:41:48Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3MTA0Nw==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367571047", "createdAt": "2020-01-16T18:09:51Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1ODQxNA=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTA5NzExOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzo0NjowMVrOFeiGfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODowODozNlrOFeiuWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2MDMxNw==", "bodyText": "Can you have all the docstring info on these parameters in the top of the class or here in the __init__ dosctring but not both?\nPython std practice is to put it in one of those places but not both. So if you want to keep it in the class can you delete these comments describing these params?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367560317", "createdAt": "2020-01-16T17:46:01Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2OTA3OQ==", "bodyText": "doing. I was just copying whatever other people had done in this repo, but what you are saying makes sense.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367569079", "createdAt": "2020-01-16T18:05:13Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2MDMxNw=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU3MDUyMQ==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367570521", "createdAt": "2020-01-16T18:08:36Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2MDMxNw=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTExMzg5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzo1MTo0M1rOFeiQ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODowNDoyOVrOFeinlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2Mjk4MQ==", "bodyText": "Optionally change this to elif self.signing_scheme == SCHEME_RSA_SHA256:", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367562981", "createdAt": "2020-01-16T17:51:43Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+            The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+            The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+            'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.signing_scheme in [SCHEME_RSA_SHA512, SCHEME_HS2019]:\n+            digest = SHA512.new()\n+            prefix = 'SHA-512='\n+        elif self.signing_scheme in [SCHEME_RSA_SHA256]:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2ODc5MA==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367568790", "createdAt": "2020-01-16T18:04:29Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+            The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+            The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+            'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.signing_scheme in [SCHEME_RSA_SHA512, SCHEME_HS2019]:\n+            digest = SHA512.new()\n+            prefix = 'SHA-512='\n+        elif self.signing_scheme in [SCHEME_RSA_SHA256]:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2Mjk4MQ=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTExNjkzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzo1Mjo0M1rOFeiSwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODowNDoxMFrOFeinBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2MzQ1OA==", "bodyText": "Optionally change this to if self.signing_scheme in {SCHEME_RSA_SHA512, SCHEME_HS2019}:\nSet inclusion is quicker than list inclusion.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367563458", "createdAt": "2020-01-16T17:52:43Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+            The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+            The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+            'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.signing_scheme in [SCHEME_RSA_SHA512, SCHEME_HS2019]:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2ODY0NQ==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367568645", "createdAt": "2020-01-16T18:04:10Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,317 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration\n+\n+HEADER_REQUEST_TARGET = '(request-target)'\n+HEADER_CREATED = '(created)'\n+HEADER_EXPIRES = '(expires)'\n+HEADER_HOST = 'host'\n+HEADER_DATE = 'date'\n+HEADER_DIGEST = 'Digest'\n+HEADER_AUTHORIZATION = 'Authorization'\n+\n+SCHEME_HS2019 = 'hs2019'\n+SCHEME_RSA_SHA256 = 'rsa-sha256'\n+SCHEME_RSA_SHA512 = 'rsa-sha512'\n+\n+ALGORITHM_RSASSA_PSS = 'PSS'\n+ALGORITHM_RSASSA_PKCS1v15 = 'PKCS1v15'\n+\n+ALGORITHM_ECDSA_MODE_FIPS_186_3 = 'fips-186-3'\n+ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979 = 'deterministic-rfc6979'\n+ALGORITHM_ECDSA_KEY_SIGNING_ALGORITHMS = {\n+    ECDSA_MODE_FIPS_186_3,\n+    ECDSA_MODE_DETERMINISTIC_RFC6979\n+}\n+\n+class HttpSigningConfiguration(object):\n+    \"\"\"NOTE: This class is auto generated by OpenAPI Generator\n+\n+    Ref: https://openapi-generator.tech\n+    Do not edit the class manually.\n+\n+    :param key_id: The identifier of the cryptographic key, when signing HTTP requests.\n+        An 'Authorization' header is calculated by creating a hash of select headers,\n+        and optionally the body of the HTTP request, then signing the hash value using\n+        a private key which is available to the client.\n+    :param private_key_path: The path of the file containing a private key,\n+        when signing HTTP requests.\n+    :param signing_scheme: The signature scheme, when signing HTTP requests.\n+        Supported value is hs2019.\n+    :param signed_headers: A list of strings. Each value is the name of a HTTP header\n+        that must be included in the HTTP signature calculation.\n+        The two special signature headers '(request-target)' and '(created)' SHOULD be\n+        included in SignedHeaders.\n+        The '(created)' header expresses when the signature was created.\n+        The '(request-target)' header is a concatenation of the lowercased :method, an\n+        ASCII space, and the :path pseudo-headers.\n+        When signed_headers is not specified, the client defaults to a single value,\n+        '(created)', in the list of HTTP headers.\n+        When SignedHeaders contains the 'Digest' value, the client performs the\n+        following operations:\n+        1. Calculate a digest of request body, as specified in RFC3230, section 4.3.2.\n+        2. Set the 'Digest' header in the request body.\n+        3. Include the 'Digest' header and value in the HTTP signature.\n+    :param signing_algorithm: The signature algorithm, when signing HTTP requests.\n+        Supported values are PKCS1v15, PSS; fips-186-3, deterministic-rfc6979.\n+    :param signature_max_validity: The signature max validity,\n+        expressed as a datetime.timedelta value.\n+    \"\"\"\n+    def __init__(self, key_id, private_key_path,\n+                 signing_scheme=SCHEME_HS2019,\n+                 signed_headers=[HEADER_CREATED],\n+                 signing_algorithm=None,\n+                 signature_max_validity=None):\n+        \"\"\"Constructor\n+        \"\"\"\n+        self.key_id = key_id\n+        \"\"\"The identifier of the key used to sign HTTP requests.\n+        \"\"\"\n+        self.private_key_path = private_key_path\n+        \"\"\"The path of the file containing a private key, used to sign HTTP requests.\n+        \"\"\"\n+        self.signing_scheme = signing_scheme\n+        \"\"\"The signature scheme when signing HTTP requests.\n+           Supported values are hs2019, rsa-sha256, rsa-sha512.\n+        \"\"\"\n+        self.signing_algorithm = signing_algorithm\n+        \"\"\"The signature algorithm when signing HTTP requests.\n+           For RSA keys, supported values are PKCS1v15, PSS.\n+           For ECDSA keys, supported values are fips-186-3, deterministic-rfc6979.\n+        \"\"\"\n+        if signature_max_validity is not None and signature_max_validity.total_seconds() < 0:\n+            raise Exception(\"The signature max validity must be a positive value\")\n+        self.signature_max_validity = signature_max_validity\n+        \"\"\"The signature max validity, expressed as a datetime.timedelta value.\n+        It must be a positive value.\n+        \"\"\"\n+        # If the user has not provided any signed_headers, the default must be set to '(created)'.\n+        if signed_headers is None or len(signed_headers) == 0:\n+            signed_headers = [HEADER_CREATED]\n+        if self.signature_max_validity is None and HEADER_EXPIRES in signed_headers:\n+            raise Exception(\n+                \"Signature max validity must be set when \" \\\n+                \"'(expires)' signature parameter is specified\")\n+        if len(signed_headers) != len(set(signed_headers)):\n+            raise Exception(\"Cannot have duplicates in the signed_headers parameter\")\n+        if HEADER_AUTHORIZATION in signed_headers:\n+            raise Exception(\"'Authorization' header cannot be included in signed headers\")\n+        self.signed_headers = signed_headers\n+        \"\"\"A list of strings. Each value is the name of HTTP header that must be included\n+           in the HTTP signature calculation.\n+        \"\"\"\n+        self.private_key = None\n+        \"\"\"The private key used to sign HTTP requests.\n+            Initialized when the PEM-encoded private key is loaded from a file.\n+        \"\"\"\n+\n+    def get_http_signature_headers(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Create a cryptographic message signature for the HTTP request and add the signed headers.\n+        \n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A dict of HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+        if method is None:\n+            raise Exception(\"HTTP method must be set\")\n+        if resource_path is None:\n+            raise Exception(\"Resource path must be set\")\n+\n+        signed_headers_dict, request_headers_dict = self.get_signed_header_info(\n+            host, resource_path, method, headers, body, query_params)\n+\n+        header_items = [\n+            \"{0}: {1}\".format(key.lower(), value) for key, value in signed_headers_dict.items()]\n+        string_to_sign = \"\\n\".join(header_items)\n+\n+        digest, digest_prefix = self.get_message_digest(string_to_sign.encode())\n+        b64_signed_msg = self.sign_digest(digest)\n+\n+        request_headers_dict[HEADER_AUTHORIZATION] = self.get_authorization_header(\n+            signed_headers_dict, b64_signed_msg)\n+\n+        return request_headers_dict\n+\n+    def load_private_key(self):\n+        \"\"\"Load the private key used to sign HTTP requests.\n+            The private key is used to sign HTTP requests as defined in\n+            https://datatracker.ietf.org/doc/draft-cavage-http-signatures/.\n+        \"\"\"\n+        if self.private_key is not None:\n+            return\n+        with open(self.private_key_path, 'rb') as f:\n+            # Decode PEM file and determine key type from PEM header.\n+            # Supported values are \"RSA PRIVATE KEY\" and \"ECDSA PRIVATE KEY\".\n+            keys = pem.parse(f.read())\n+            if len(keys) != 1:\n+                raise Exception(\"File must contain exactly one private key\")\n+            key = keys[0].as_text()\n+            if key.startswith('-----BEGIN RSA PRIVATE KEY-----'):\n+                self.private_key = RSA.importKey(key)\n+            elif key.startswith('-----BEGIN EC PRIVATE KEY-----'):\n+                self.private_key = ECC.importKey(key)\n+            else:\n+                raise Exception(\"Unsupported key\")\n+\n+    def get_unix_time(self, ts):\n+        \"\"\"Converts and returns a datetime object to UNIX time, the number of seconds\n+           elapsed since January 1, 1970 UTC.\n+        \"\"\"\n+        return (ts - datetime.datetime(1970,1,1)).total_seconds())\n+\n+    def get_signed_header_info(self, host, resource_path, method, headers, body, query_params):\n+        \"\"\"\n+        Build the HTTP headers (name, value) that need to be included in the HTTP signature scheme.\n+\n+        :param resource_path : A string representation of the HTTP request resource path.\n+        :param method: A string representation of the HTTP request method, e.g. GET, POST.\n+        :param headers: A dict containing the HTTP request headers.\n+        :param body: The string representation of the HTTP request body.\n+        :param query_params: A string representing the HTTP request query parameters.\n+        :return: A tuple containing two dict objects:\n+            The first dict contains the HTTP headers that are used to calculate the HTTP signature.\n+            The second dict contains the HTTP headers that must be added to the outbound HTTP request.\n+        \"\"\"\n+\n+        if body is None:\n+            body = ''\n+        else:\n+            body = json.dumps(body)\n+\n+        # Build the '(request-target)' HTTP signature parameter.\n+        target_host = urlparse(host).netloc\n+        target_path = urlparse(host).path\n+        request_target = method.lower() + \" \" + target_path + resource_path\n+        if query_params:\n+            raw_query = urlencode(query_params).replace('+', '%20')\n+            request_target += \"?\" + raw_query\n+\n+        # Get current time and generate RFC 1123 (HTTP/1.1) date/time string.\n+        now = datetime.datetime.now()\n+        stamp = mktime(now.timetuple())\n+        cdate = formatdate(timeval=stamp, localtime=False, usegmt=True)\n+        # The '(created)' value MUST be a Unix timestamp integer value.\n+        # Subsecond precision is not supported.\n+        created = self.get_unix_time(int(now))\n+        if self.signature_max_validity is not None:\n+            expires = self.get_unix_time(now + self.signature_max_validity)\n+\n+        signed_headers_dict = {}\n+        request_headers_dict = {}\n+        for hdr_key in self.signed_headers:\n+            hdr_key = hdr_key.lower()\n+            if hdr_key == HEADER_REQUEST_TARGET:\n+                value = request_target\n+            elif hdr_key == HEADER_CREATED:\n+                value = '{0}'.format(created)\n+            elif hdr_key == HEADER_EXPIRES:\n+                value = '{0}'.format(expires)\n+            elif hdr_key == HEADER_DATE:\n+                value = cdate\n+                request_headers_dict[HEADER_DATE] = '{0}'.format(cdate)\n+            elif hdr_key == HEADER_DIGEST:\n+                request_body = body.encode()\n+                body_digest, digest_prefix = self.get_message_digest(request_body)\n+                b64_body_digest = b64encode(body_digest.digest())\n+                value = digest_prefix + b64_body_digest.decode('ascii')\n+                request_headers_dict[HEADER_DIGEST] = '{0}{1}'.format(\n+                    digest_prefix, b64_body_digest.decode('ascii'))\n+            elif hdr_key == HEADER_HOST:\n+                value = target_host\n+                request_headers_dict[HEADER_HOST] = '{0}'.format(target_host)\n+            else:\n+                value = headers[hdr_key]\n+            signed_headers_dict[hdr_key] = value\n+\n+        return signed_header_dict, request_headers_dict\n+\n+    def get_message_digest(self, data):\n+        \"\"\"\n+        Calculates and returns a cryptographic digest of a specified HTTP request.\n+\n+        :param data: The string representation of the date to be hashed with a cryptographic hash.\n+        :return: A tuple of (digest, prefix).\n+            The digest is a hashing object that contains the cryptographic digest of the HTTP request.\n+            The prefix is a string that identifies the cryptographc hash. It is used to generate the\n+            'Digest' header as specified in RFC 3230.\n+        \"\"\"\n+        if self.signing_scheme in [SCHEME_RSA_SHA512, SCHEME_HS2019]:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU2MzQ1OA=="}, "originalCommit": {"oid": "4148453c1a72f4ee6da15f00c7f934469a69f5a3"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjE0NjMxOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMToxMDo0NVrOFesTWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTozNjo1NlrOFesqIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNzQ1MA==", "bodyText": "Can you remove this import?\nHttpSigningConfiguration now exists inside this module", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367727450", "createdAt": "2020-01-17T01:10:45Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,315 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyODExMA==", "bodyText": "I just created an integration branch that takes 3 PRs together. I won't merge it, but at least it will allow me to build and run the unit tests. I will fix this issue and any other issue that comes up.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367728110", "createdAt": "2020-01-17T01:13:41Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,315 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNzQ1MA=="}, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMDM3MA==", "bodyText": "That sounds good. Do you know that you can test locally by:\n\nrunning the server with docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\nrun make test or make test-all in the python or python-experimental directories", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367730370", "createdAt": "2020-01-17T01:23:54Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,315 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNzQ1MA=="}, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzI4Mg==", "bodyText": "yes, thanks. That's what I do.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367733282", "createdAt": "2020-01-17T01:36:56Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/signing.mustache", "diffHunk": "@@ -0,0 +1,315 @@\n+# coding: utf-8\n+{{>partial_header}}\n+from __future__ import absolute_import\n+\n+from datetime import timedelta\n+from six.moves.urllib.parse import urlencode, urlparse\n+import pem\n+from Crypto.PublicKey import RSA, ECC\n+from Crypto.Signature import PKCS1_v1_5, pss, DSS\n+from Crypto.Hash import SHA256, SHA512\n+from base64 import b64encode\n+from email.utils import formatdate\n+\n+from {{packageName}}.configuration import HttpSigningConfiguration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNzQ1MA=="}, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjE1Nzk0OnYy", "diffSide": "RIGHT", "path": "samples/client/petstore/python-experimental/tests/test_pet_api.py", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMToxOTowMlrOFesalg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODowOToxNlrOFexZfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyOTMwMg==", "bodyText": "Should this class be changed from Configuration to HttpSigningConfiguration?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367729302", "createdAt": "2020-01-17T01:19:02Z", "author": {"login": "spacether"}, "path": "samples/client/petstore/python-experimental/tests/test_pet_api.py", "diffHunk": "@@ -175,6 +175,36 @@ def test_separate_default_config_instances(self):\n         pet_api2.api_client.configuration.host = 'someotherhost'\n         self.assertNotEqual(pet_api.api_client.configuration.host, pet_api2.api_client.configuration.host)\n \n+    def test_http_signature(self):\n+        config = Configuration(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzA1Ng==", "bodyText": "yes, though I need to do something because that class is generated conditionally.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367733056", "createdAt": "2020-01-17T01:35:56Z", "author": {"login": "sebastien-rosset"}, "path": "samples/client/petstore/python-experimental/tests/test_pet_api.py", "diffHunk": "@@ -175,6 +175,36 @@ def test_separate_default_config_instances(self):\n         pet_api2.api_client.configuration.host = 'someotherhost'\n         self.assertNotEqual(pet_api.api_client.configuration.host, pet_api2.api_client.configuration.host)\n \n+    def test_http_signature(self):\n+        config = Configuration(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyOTMwMg=="}, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzQ4OA==", "bodyText": "Our sample spec should trigger the generation of signing.py, so we should be okay using it.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367733488", "createdAt": "2020-01-17T01:37:59Z", "author": {"login": "spacether"}, "path": "samples/client/petstore/python-experimental/tests/test_pet_api.py", "diffHunk": "@@ -175,6 +175,36 @@ def test_separate_default_config_instances(self):\n         pet_api2.api_client.configuration.host = 'someotherhost'\n         self.assertNotEqual(pet_api.api_client.configuration.host, pet_api2.api_client.configuration.host)\n \n+    def test_http_signature(self):\n+        config = Configuration(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyOTMwMg=="}, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNjEwNg==", "bodyText": "Well except that I think this particular file is also used for the OpenAPI spec version 2, which is using a different YAML file without the security scheme. I am thinking about creating a specific file under samples/openapi3/client/petstore/python-experimental/tests", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367736106", "createdAt": "2020-01-17T01:50:49Z", "author": {"login": "sebastien-rosset"}, "path": "samples/client/petstore/python-experimental/tests/test_pet_api.py", "diffHunk": "@@ -175,6 +175,36 @@ def test_separate_default_config_instances(self):\n         pet_api2.api_client.configuration.host = 'someotherhost'\n         self.assertNotEqual(pet_api.api_client.configuration.host, pet_api2.api_client.configuration.host)\n \n+    def test_http_signature(self):\n+        config = Configuration(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyOTMwMg=="}, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNzI2Ng==", "bodyText": "Ah, this is a v2 test only.\nYes please fee free to add the test in either of the below folders\n\nsamples/openapi3/client/petstore/python-experimental/tests (manual tests I think)\nsamples/openapi3/client/petstore/python-experimental/test (autogen tests I think)\nEither location should be fine because those files are not overwritten once they exist", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367737266", "createdAt": "2020-01-17T01:56:46Z", "author": {"login": "spacether"}, "path": "samples/client/petstore/python-experimental/tests/test_pet_api.py", "diffHunk": "@@ -175,6 +175,36 @@ def test_separate_default_config_instances(self):\n         pet_api2.api_client.configuration.host = 'someotherhost'\n         self.assertNotEqual(pet_api.api_client.configuration.host, pet_api2.api_client.configuration.host)\n \n+    def test_http_signature(self):\n+        config = Configuration(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyOTMwMg=="}, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczNzg3Mg==", "bodyText": "One thing I just discovered is that the directories don't seem to be merged by default.\nI created a file samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py, and I thought by default it would be merged with the files under samples/client/petstore/python-experimental/tests.\nIt would be nice if the build could copy the files from samples/client/petstore/python-experimental/tests and add the files from samples/openapi3/client/petstore/python-experimental/tests/ in a single \"tests\" directory.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367737872", "createdAt": "2020-01-17T01:59:41Z", "author": {"login": "sebastien-rosset"}, "path": "samples/client/petstore/python-experimental/tests/test_pet_api.py", "diffHunk": "@@ -175,6 +175,36 @@ def test_separate_default_config_instances(self):\n         pet_api2.api_client.configuration.host = 'someotherhost'\n         self.assertNotEqual(pet_api.api_client.configuration.host, pet_api2.api_client.configuration.host)\n \n+    def test_http_signature(self):\n+        config = Configuration(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyOTMwMg=="}, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2Mzg2OA==", "bodyText": "So the specs could be different. Those directories are generated by separate bash files. For now I prefer to keep them separate. Also because one is for v2 spec testing and one is for v3 spec testing. So they have different features.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367763868", "createdAt": "2020-01-17T04:24:12Z", "author": {"login": "spacether"}, "path": "samples/client/petstore/python-experimental/tests/test_pet_api.py", "diffHunk": "@@ -175,6 +175,36 @@ def test_separate_default_config_instances(self):\n         pet_api2.api_client.configuration.host = 'someotherhost'\n         self.assertNotEqual(pet_api.api_client.configuration.host, pet_api2.api_client.configuration.host)\n \n+    def test_http_signature(self):\n+        config = Configuration(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyOTMwMg=="}, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxMDk0MA==", "bodyText": "ok, sure. I have created a separate unit test file. The code is now compiling and generating HTTP signatures. I was able to test because I combined this PR with the PR that contains the openapi3 samples (in my local workspace).\nThis cannot be tested directly until the \"openapi3 samples\" PR is merged.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367810940", "createdAt": "2020-01-17T08:09:16Z", "author": {"login": "sebastien-rosset"}, "path": "samples/client/petstore/python-experimental/tests/test_pet_api.py", "diffHunk": "@@ -175,6 +175,36 @@ def test_separate_default_config_instances(self):\n         pet_api2.api_client.configuration.host = 'someotherhost'\n         self.assertNotEqual(pet_api.api_client.configuration.host, pet_api2.api_client.configuration.host)\n \n+    def test_http_signature(self):\n+        config = Configuration(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyOTMwMg=="}, "originalCommit": {"oid": "06d25b932f678576baee23807e0d469541a706fa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjU0ODEyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjo0MTo0N1rOFewCkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjo0MTo0N1rOFewCkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc4ODY4OA==", "bodyText": "Can you delete this note line and the comment line below it?\nThey are not needed", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367788688", "createdAt": "2020-01-17T06:41:47Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/api_client.mustache", "diffHunk": "@@ -533,7 +541,19 @@ class ApiClient(object):\n                 if auth_setting['in'] == 'cookie':\n                     headers['Cookie'] = auth_setting['value']\n                 elif auth_setting['in'] == 'header':\n-                    headers[auth_setting['key']] = auth_setting['value']\n+                    if auth_setting['type'] != 'http-signature':\n+                        headers[auth_setting['key']] = auth_setting['value']\n+{{#hasHttpSignatureMethods}}\n+                    else:\n+                        # The HTTP signature scheme requires multiple HTTP headers\n+                        # that are calculated dynamically.\n+                        signing_info = self.configuration.signing_info\n+                        # NOTE: no need to raise an exception because this entry only exists", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707d40bfa7d6599b2a2f7a9abe38696e8182653a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjU2Njk4OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjo1Mzo0OFrOFewNTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxODo1MVrOFfGrcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MTQzNg==", "bodyText": "How does this check results from the mock _pool?\nCan we verify that the signed data is eqal to a specific value?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367791436", "createdAt": "2020-01-17T06:53:48Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,164 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+import json\n+import os\n+import unittest\n+import shutil\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        self._tc.assertEqual(r[0], args)\n+        self._tc.assertEqual(r[1], kwargs)\n+        return urllib3.HTTPResponse(status=200, body=b'test')\n+\n+\n+class PetApiTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.setUpModels()\n+        self.setUpFiles()\n+\n+    def tearDown(self):\n+        if os.path.exists(self.rsa_key_path):\n+            os.unlink(self.rsa_key_path)\n+\n+    def setUpModels(self):\n+        self.category = petstore_api.Category()\n+        self.category.id = id_gen()\n+        self.category.name = \"dog\"\n+        self.tag = petstore_api.Tag()\n+        self.tag.id = id_gen()\n+        self.tag.name = \"python-pet-tag\"\n+        self.pet = petstore_api.Pet(name=\"hello kity\", photo_urls=[\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"])\n+        self.pet.id = id_gen()\n+        self.pet.status = \"sold\"\n+        self.pet.category = self.category\n+        self.pet.tags = [self.tag]\n+\n+    def setUpFiles(self):\n+        self.test_file_dir = os.path.join(os.path.dirname(__file__), \"..\", \"testfiles\")\n+        self.test_file_dir = os.path.realpath(self.test_file_dir)\n+        if not os.path.exists(self.test_file_dir):\n+            os.mkdir(self.test_file_dir)\n+        self.rsa_key_path = os.path.join(self.test_file_dir, 'rsa.pem')\n+\n+    def test_http_signature(self):\n+        with open(self.rsa_key_path, 'w') as f:\n+          f.write(RSA_TEST_PRIVATE_KEY)\n+\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+                signing.HEADER_HOST,\n+                signing.HEADER_DATE,\n+                signing.HEADER_DIGEST,\n+                'Content-Type'\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://localhost/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Bearer ',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=TimeoutWithEqual(total=5))\n+        mock_pool.expect_request('POST', 'http://localhost/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Bearer ',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=TimeoutWithEqual(connect=1, read=2))\n+\n+        pet_api.add_pet(self.pet, _request_timeout=5)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707d40bfa7d6599b2a2f7a9abe38696e8182653a"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxMTkzOQ==", "bodyText": "This is outdated. I initially copy-pasted the code from another file, but I wasn't ready to actually test. See my other comment, now I have several working unit tests. I will probably add more tomorrow. I particular, I will add a unit test that validates that for a given deterministic signature algorithm (not RSASSA-PSS), Python and golang generate the same signature.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r367811939", "createdAt": "2020-01-17T08:12:28Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,164 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+import json\n+import os\n+import unittest\n+import shutil\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        self._tc.assertEqual(r[0], args)\n+        self._tc.assertEqual(r[1], kwargs)\n+        return urllib3.HTTPResponse(status=200, body=b'test')\n+\n+\n+class PetApiTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.setUpModels()\n+        self.setUpFiles()\n+\n+    def tearDown(self):\n+        if os.path.exists(self.rsa_key_path):\n+            os.unlink(self.rsa_key_path)\n+\n+    def setUpModels(self):\n+        self.category = petstore_api.Category()\n+        self.category.id = id_gen()\n+        self.category.name = \"dog\"\n+        self.tag = petstore_api.Tag()\n+        self.tag.id = id_gen()\n+        self.tag.name = \"python-pet-tag\"\n+        self.pet = petstore_api.Pet(name=\"hello kity\", photo_urls=[\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"])\n+        self.pet.id = id_gen()\n+        self.pet.status = \"sold\"\n+        self.pet.category = self.category\n+        self.pet.tags = [self.tag]\n+\n+    def setUpFiles(self):\n+        self.test_file_dir = os.path.join(os.path.dirname(__file__), \"..\", \"testfiles\")\n+        self.test_file_dir = os.path.realpath(self.test_file_dir)\n+        if not os.path.exists(self.test_file_dir):\n+            os.mkdir(self.test_file_dir)\n+        self.rsa_key_path = os.path.join(self.test_file_dir, 'rsa.pem')\n+\n+    def test_http_signature(self):\n+        with open(self.rsa_key_path, 'w') as f:\n+          f.write(RSA_TEST_PRIVATE_KEY)\n+\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+                signing.HEADER_HOST,\n+                signing.HEADER_DATE,\n+                signing.HEADER_DIGEST,\n+                'Content-Type'\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://localhost/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Bearer ',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=TimeoutWithEqual(total=5))\n+        mock_pool.expect_request('POST', 'http://localhost/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Bearer ',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=TimeoutWithEqual(connect=1, read=2))\n+\n+        pet_api.add_pet(self.pet, _request_timeout=5)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MTQzNg=="}, "originalCommit": {"oid": "707d40bfa7d6599b2a2f7a9abe38696e8182653a"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1OTYwMQ==", "bodyText": "I have added a bunch of unit tests.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368159601", "createdAt": "2020-01-17T22:18:51Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,164 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+import json\n+import os\n+import unittest\n+import shutil\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        self._tc.assertEqual(r[0], args)\n+        self._tc.assertEqual(r[1], kwargs)\n+        return urllib3.HTTPResponse(status=200, body=b'test')\n+\n+\n+class PetApiTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.setUpModels()\n+        self.setUpFiles()\n+\n+    def tearDown(self):\n+        if os.path.exists(self.rsa_key_path):\n+            os.unlink(self.rsa_key_path)\n+\n+    def setUpModels(self):\n+        self.category = petstore_api.Category()\n+        self.category.id = id_gen()\n+        self.category.name = \"dog\"\n+        self.tag = petstore_api.Tag()\n+        self.tag.id = id_gen()\n+        self.tag.name = \"python-pet-tag\"\n+        self.pet = petstore_api.Pet(name=\"hello kity\", photo_urls=[\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"])\n+        self.pet.id = id_gen()\n+        self.pet.status = \"sold\"\n+        self.pet.category = self.category\n+        self.pet.tags = [self.tag]\n+\n+    def setUpFiles(self):\n+        self.test_file_dir = os.path.join(os.path.dirname(__file__), \"..\", \"testfiles\")\n+        self.test_file_dir = os.path.realpath(self.test_file_dir)\n+        if not os.path.exists(self.test_file_dir):\n+            os.mkdir(self.test_file_dir)\n+        self.rsa_key_path = os.path.join(self.test_file_dir, 'rsa.pem')\n+\n+    def test_http_signature(self):\n+        with open(self.rsa_key_path, 'w') as f:\n+          f.write(RSA_TEST_PRIVATE_KEY)\n+\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+                signing.HEADER_HOST,\n+                signing.HEADER_DATE,\n+                signing.HEADER_DIGEST,\n+                'Content-Type'\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://localhost/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Bearer ',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=TimeoutWithEqual(total=5))\n+        mock_pool.expect_request('POST', 'http://localhost/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Bearer ',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=TimeoutWithEqual(connect=1, read=2))\n+\n+        pet_api.add_pet(self.pet, _request_timeout=5)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MTQzNg=="}, "originalCommit": {"oid": "707d40bfa7d6599b2a2f7a9abe38696e8182653a"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDA5MjQ5OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/go-experimental/go-petstore/api/openapi.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0MDoxNlrOFe-wdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMzoxNzo1N1rOFfRLmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyOTgxNA==", "bodyText": "Why is this file in this update?\nCan we switch go to use the new spec in the go-experimental PR?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368029814", "createdAt": "2020-01-17T16:40:16Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/go-experimental/go-petstore/api/openapi.yaml", "diffHunk": "@@ -54,7 +54,7 @@ paths:\n       requestBody:\n         $ref: '#/components/requestBodies/Pet'\n       responses:\n-        405:\n+        \"405\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1OTQ2Ng==", "bodyText": "I think this is because of some unrelated problem. I see other PRs opened recently have the same changes..", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368159466", "createdAt": "2020-01-17T22:18:24Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/go-experimental/go-petstore/api/openapi.yaml", "diffHunk": "@@ -54,7 +54,7 @@ paths:\n       requestBody:\n         $ref: '#/components/requestBodies/Pet'\n       responses:\n-        405:\n+        \"405\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyOTgxNA=="}, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMzMTY3Mw==", "bodyText": "I have opened a separate PR for this one: #5049. It looks like somebody forgot to execute a script under ./bin", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368331673", "createdAt": "2020-01-19T23:17:57Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/go-experimental/go-petstore/api/openapi.yaml", "diffHunk": "@@ -54,7 +54,7 @@ paths:\n       requestBody:\n         $ref: '#/components/requestBodies/Pet'\n       responses:\n-        405:\n+        \"405\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyOTgxNA=="}, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDExNzMyOnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0ODowOFrOFe-_uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxNzoxOFrOFfGplw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMzcyMw==", "bodyText": "Silly question but:\nCan you verify that this key is was generated only for this testing?\nOptionally, how about:\n\ngenerate the rsa key on the fly with:\n\nfrom os import chmod\nfrom Crypto.PublicKey import RSA\n\nkey = RSA.generate(2048)\nwith open(\"/tmp/private.key\", 'wb') as content_file:\n    chmod(\"/tmp/private.key\", 0600)\n    content_file.write(key.exportKey('PEM'))\npubkey = key.publickey()\nwith open(\"/tmp/public.key\", 'wb') as content_file:\n    content_file.write(pubkey.exportKey('OpenSSH'))\n\nper https://stackoverflow.com/questions/2466401/how-to-generate-ssh-key-pairs-with-python\n\ngenerating the rsa key on the fly by invoking ssh-keygen\nor moving this data to a file in a testfiles folder like we do for other file assets https://github.com/OpenAPITools/openapi-generator/tree/master/samples/client/petstore/python-experimental/testfiles", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368033723", "createdAt": "2020-01-17T16:48:08Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,370 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.PublicKey import RSA\n+from Crypto.PublicKey import ECC\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MDU1OQ==", "bodyText": "Silly question but:\nCan you verify that this key is was generated only for this testing?\n\nI have put a code comment that says it's the test key from the http signature specification. The spec has a section about \"test values\", with the input key and expected Authorization header. The idea was to make it possible to compare that the implementation matches exactly the spec. Though subsequently I realized it's currently not possible because there is a warning that the test values are going to be regenerated in the next draft, and the test values don't actually show the signature string.\n\nOptionally, how about:\n\ngenerate the rsa key on the fly with:\n\nfrom os import chmod\nfrom Crypto.PublicKey import RSA\n\nkey = RSA.generate(2048)\nwith open(\"/tmp/private.key\", 'wb') as content_file:\n    chmod(\"/tmp/private.key\", 0600)\n    content_file.write(key.exportKey('PEM'))\npubkey = key.publickey()\nwith open(\"/tmp/public.key\", 'wb') as content_file:\n    content_file.write(pubkey.exportKey('OpenSSH'))\n\n\nYes, I do something similar for the RSA 4096 key, not exactly as you mention, but similar.\n\nper https://stackoverflow.com/questions/2466401/how-to-generate-ssh-key-pairs-with-python\n\ngenerating the rsa key on the fly by invoking ssh-keygen\nor moving this data to a file in a testfiles folder like we do for other file assets https://github.com/OpenAPITools/openapi-generator/tree/master/samples/client/petstore/python-experimental/testfiles\n\n\nI thought about this, but I wondered if people would start complaining this might be a production key. At least in the source code you can put comments about the origin of the private key (in this case the private key is published on the internet).", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368040559", "createdAt": "2020-01-17T17:02:54Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,370 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.PublicKey import RSA\n+from Crypto.PublicKey import ECC\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMzcyMw=="}, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1OTEyNw==", "bodyText": "I think I can mark this as resolved. Feel free to reopen.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368159127", "createdAt": "2020-01-17T22:17:18Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,370 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.PublicKey import RSA\n+from Crypto.PublicKey import ECC\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMzcyMw=="}, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDEyNTE5OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1MDo0NVrOFe_EiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxNjo0MVrOFfGo4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNDk1Mw==", "bodyText": "Can you decode the request using the key to show that you get back the unencrypted data to verify that this is working?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368034953", "createdAt": "2020-01-17T16:50:45Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,370 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.PublicKey import RSA\n+from Crypto.PublicKey import ECC\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.\n+        self._tc.assertEqual(r[0], args)\n+        # r[1] is a dict that contains the expected body, headers\n+        # kwargs is a dict that contains the actual body, headers\n+        for k, expected in r[1].items():\n+            self._tc.assertIn(k, kwargs)\n+            actual = kwargs[k]\n+            if k == 'body':\n+                self._tc.assertEqual(expected, actual)\n+            elif k == 'headers':\n+                for expected_header_name, expected_header_value in expected.items():\n+                    self._tc.assertIn(expected_header_name, actual)\n+                    actual_header_value = actual[expected_header_name]\n+                    pattern = re.compile(expected_header_value)\n+                    m = pattern.match(actual_header_value)\n+                    self._tc.assertTrue(m, msg=\"Expected:\\n{0}\\nActual:\\n{1}\".format(\n+                                        expected_header_value,actual_header_value))\n+            elif k == 'timeout':\n+                self._tc.assertEqual(expected, actual)\n+        return urllib3.HTTPResponse(status=200, body=b'test')\n+\n+\n+class PetApiTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.setUpModels()\n+        self.setUpFiles()\n+\n+\n+    def setUpModels(self):\n+        self.category = petstore_api.Category()\n+        self.category.id = id_gen()\n+        self.category.name = \"dog\"\n+        self.tag = petstore_api.Tag()\n+        self.tag.id = id_gen()\n+        self.tag.name = \"python-pet-tag\"\n+        self.pet = petstore_api.Pet(name=\"hello kity\", photo_urls=[\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"])\n+        self.pet.id = id_gen()\n+        self.pet.status = \"sold\"\n+        self.pet.category = self.category\n+        self.pet.tags = [self.tag]\n+\n+    def setUpFiles(self):\n+        self.test_file_dir = os.path.join(os.path.dirname(__file__), \"..\", \"testfiles\")\n+        self.test_file_dir = os.path.realpath(self.test_file_dir)\n+        if not os.path.exists(self.test_file_dir):\n+            os.mkdir(self.test_file_dir)\n+\n+        self.rsa_key_path = os.path.join(self.test_file_dir, 'rsa.pem')\n+        self.rsa4096_key_path = os.path.join(self.test_file_dir, 'rsa4096.pem')\n+        self.ec_p521_key_path = os.path.join(self.test_file_dir, 'ecP521.pem')\n+\n+        if not os.path.exists(self.rsa_key_path):\n+            with open(self.rsa_key_path, 'w') as f:\n+                f.write(RSA_TEST_PRIVATE_KEY)\n+\n+        if not os.path.exists(self.rsa4096_key_path):\n+            key = RSA.generate(4096)\n+            private_key = key.export_key()\n+            with open(self.rsa4096_key_path, \"wb\") as f:\n+                f.write(private_key)\n+\n+        if not os.path.exists(self.ec_p521_key_path):\n+            key = ECC.generate(curve='P-521')\n+            private_key = key.export_key(format='PEM')\n+            with open(self.ec_p521_key_path, \"wt\") as f:\n+                f.write(private_key)\n+\n+    def test_valid_http_signature(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+                signing.HEADER_HOST,\n+                signing.HEADER_DATE,\n+                signing.HEADER_DIGEST,\n+                'Content-Type'\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\) host date digest content-type\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_with_defaults(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1ODk0Ng==", "bodyText": "I have added unit tests to verify the signature with the public key.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368158946", "createdAt": "2020-01-17T22:16:41Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,370 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.PublicKey import RSA\n+from Crypto.PublicKey import ECC\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.\n+        self._tc.assertEqual(r[0], args)\n+        # r[1] is a dict that contains the expected body, headers\n+        # kwargs is a dict that contains the actual body, headers\n+        for k, expected in r[1].items():\n+            self._tc.assertIn(k, kwargs)\n+            actual = kwargs[k]\n+            if k == 'body':\n+                self._tc.assertEqual(expected, actual)\n+            elif k == 'headers':\n+                for expected_header_name, expected_header_value in expected.items():\n+                    self._tc.assertIn(expected_header_name, actual)\n+                    actual_header_value = actual[expected_header_name]\n+                    pattern = re.compile(expected_header_value)\n+                    m = pattern.match(actual_header_value)\n+                    self._tc.assertTrue(m, msg=\"Expected:\\n{0}\\nActual:\\n{1}\".format(\n+                                        expected_header_value,actual_header_value))\n+            elif k == 'timeout':\n+                self._tc.assertEqual(expected, actual)\n+        return urllib3.HTTPResponse(status=200, body=b'test')\n+\n+\n+class PetApiTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.setUpModels()\n+        self.setUpFiles()\n+\n+\n+    def setUpModels(self):\n+        self.category = petstore_api.Category()\n+        self.category.id = id_gen()\n+        self.category.name = \"dog\"\n+        self.tag = petstore_api.Tag()\n+        self.tag.id = id_gen()\n+        self.tag.name = \"python-pet-tag\"\n+        self.pet = petstore_api.Pet(name=\"hello kity\", photo_urls=[\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"])\n+        self.pet.id = id_gen()\n+        self.pet.status = \"sold\"\n+        self.pet.category = self.category\n+        self.pet.tags = [self.tag]\n+\n+    def setUpFiles(self):\n+        self.test_file_dir = os.path.join(os.path.dirname(__file__), \"..\", \"testfiles\")\n+        self.test_file_dir = os.path.realpath(self.test_file_dir)\n+        if not os.path.exists(self.test_file_dir):\n+            os.mkdir(self.test_file_dir)\n+\n+        self.rsa_key_path = os.path.join(self.test_file_dir, 'rsa.pem')\n+        self.rsa4096_key_path = os.path.join(self.test_file_dir, 'rsa4096.pem')\n+        self.ec_p521_key_path = os.path.join(self.test_file_dir, 'ecP521.pem')\n+\n+        if not os.path.exists(self.rsa_key_path):\n+            with open(self.rsa_key_path, 'w') as f:\n+                f.write(RSA_TEST_PRIVATE_KEY)\n+\n+        if not os.path.exists(self.rsa4096_key_path):\n+            key = RSA.generate(4096)\n+            private_key = key.export_key()\n+            with open(self.rsa4096_key_path, \"wb\") as f:\n+                f.write(private_key)\n+\n+        if not os.path.exists(self.ec_p521_key_path):\n+            key = ECC.generate(curve='P-521')\n+            private_key = key.export_key(format='PEM')\n+            with open(self.ec_p521_key_path, \"wt\") as f:\n+                f.write(private_key)\n+\n+    def test_valid_http_signature(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+                signing.HEADER_HOST,\n+                signing.HEADER_DATE,\n+                signing.HEADER_DIGEST,\n+                'Content-Type'\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\) host date digest content-type\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_with_defaults(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNDk1Mw=="}, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDEyNjc1OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1MTowNVrOFe_FVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxNjozNVrOFfGoug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTE1Nw==", "bodyText": "Can you decode the request using the key to show that you get back the unencrypted data to verify that this is working?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368035157", "createdAt": "2020-01-17T16:51:05Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,370 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.PublicKey import RSA\n+from Crypto.PublicKey import ECC\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.\n+        self._tc.assertEqual(r[0], args)\n+        # r[1] is a dict that contains the expected body, headers\n+        # kwargs is a dict that contains the actual body, headers\n+        for k, expected in r[1].items():\n+            self._tc.assertIn(k, kwargs)\n+            actual = kwargs[k]\n+            if k == 'body':\n+                self._tc.assertEqual(expected, actual)\n+            elif k == 'headers':\n+                for expected_header_name, expected_header_value in expected.items():\n+                    self._tc.assertIn(expected_header_name, actual)\n+                    actual_header_value = actual[expected_header_name]\n+                    pattern = re.compile(expected_header_value)\n+                    m = pattern.match(actual_header_value)\n+                    self._tc.assertTrue(m, msg=\"Expected:\\n{0}\\nActual:\\n{1}\".format(\n+                                        expected_header_value,actual_header_value))\n+            elif k == 'timeout':\n+                self._tc.assertEqual(expected, actual)\n+        return urllib3.HTTPResponse(status=200, body=b'test')\n+\n+\n+class PetApiTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.setUpModels()\n+        self.setUpFiles()\n+\n+\n+    def setUpModels(self):\n+        self.category = petstore_api.Category()\n+        self.category.id = id_gen()\n+        self.category.name = \"dog\"\n+        self.tag = petstore_api.Tag()\n+        self.tag.id = id_gen()\n+        self.tag.name = \"python-pet-tag\"\n+        self.pet = petstore_api.Pet(name=\"hello kity\", photo_urls=[\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"])\n+        self.pet.id = id_gen()\n+        self.pet.status = \"sold\"\n+        self.pet.category = self.category\n+        self.pet.tags = [self.tag]\n+\n+    def setUpFiles(self):\n+        self.test_file_dir = os.path.join(os.path.dirname(__file__), \"..\", \"testfiles\")\n+        self.test_file_dir = os.path.realpath(self.test_file_dir)\n+        if not os.path.exists(self.test_file_dir):\n+            os.mkdir(self.test_file_dir)\n+\n+        self.rsa_key_path = os.path.join(self.test_file_dir, 'rsa.pem')\n+        self.rsa4096_key_path = os.path.join(self.test_file_dir, 'rsa4096.pem')\n+        self.ec_p521_key_path = os.path.join(self.test_file_dir, 'ecP521.pem')\n+\n+        if not os.path.exists(self.rsa_key_path):\n+            with open(self.rsa_key_path, 'w') as f:\n+                f.write(RSA_TEST_PRIVATE_KEY)\n+\n+        if not os.path.exists(self.rsa4096_key_path):\n+            key = RSA.generate(4096)\n+            private_key = key.export_key()\n+            with open(self.rsa4096_key_path, \"wb\") as f:\n+                f.write(private_key)\n+\n+        if not os.path.exists(self.ec_p521_key_path):\n+            key = ECC.generate(curve='P-521')\n+            private_key = key.export_key(format='PEM')\n+            with open(self.ec_p521_key_path, \"wt\") as f:\n+                f.write(private_key)\n+\n+    def test_valid_http_signature(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+                signing.HEADER_HOST,\n+                signing.HEADER_DATE,\n+                signing.HEADER_DIGEST,\n+                'Content-Type'\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\) host date digest content-type\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_with_defaults(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_rsassa_pkcs1v15(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1ODkwNg==", "bodyText": "I have added unit tests to verify the signature with the public key.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368158906", "createdAt": "2020-01-17T22:16:35Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,370 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.PublicKey import RSA\n+from Crypto.PublicKey import ECC\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.\n+        self._tc.assertEqual(r[0], args)\n+        # r[1] is a dict that contains the expected body, headers\n+        # kwargs is a dict that contains the actual body, headers\n+        for k, expected in r[1].items():\n+            self._tc.assertIn(k, kwargs)\n+            actual = kwargs[k]\n+            if k == 'body':\n+                self._tc.assertEqual(expected, actual)\n+            elif k == 'headers':\n+                for expected_header_name, expected_header_value in expected.items():\n+                    self._tc.assertIn(expected_header_name, actual)\n+                    actual_header_value = actual[expected_header_name]\n+                    pattern = re.compile(expected_header_value)\n+                    m = pattern.match(actual_header_value)\n+                    self._tc.assertTrue(m, msg=\"Expected:\\n{0}\\nActual:\\n{1}\".format(\n+                                        expected_header_value,actual_header_value))\n+            elif k == 'timeout':\n+                self._tc.assertEqual(expected, actual)\n+        return urllib3.HTTPResponse(status=200, body=b'test')\n+\n+\n+class PetApiTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.setUpModels()\n+        self.setUpFiles()\n+\n+\n+    def setUpModels(self):\n+        self.category = petstore_api.Category()\n+        self.category.id = id_gen()\n+        self.category.name = \"dog\"\n+        self.tag = petstore_api.Tag()\n+        self.tag.id = id_gen()\n+        self.tag.name = \"python-pet-tag\"\n+        self.pet = petstore_api.Pet(name=\"hello kity\", photo_urls=[\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"])\n+        self.pet.id = id_gen()\n+        self.pet.status = \"sold\"\n+        self.pet.category = self.category\n+        self.pet.tags = [self.tag]\n+\n+    def setUpFiles(self):\n+        self.test_file_dir = os.path.join(os.path.dirname(__file__), \"..\", \"testfiles\")\n+        self.test_file_dir = os.path.realpath(self.test_file_dir)\n+        if not os.path.exists(self.test_file_dir):\n+            os.mkdir(self.test_file_dir)\n+\n+        self.rsa_key_path = os.path.join(self.test_file_dir, 'rsa.pem')\n+        self.rsa4096_key_path = os.path.join(self.test_file_dir, 'rsa4096.pem')\n+        self.ec_p521_key_path = os.path.join(self.test_file_dir, 'ecP521.pem')\n+\n+        if not os.path.exists(self.rsa_key_path):\n+            with open(self.rsa_key_path, 'w') as f:\n+                f.write(RSA_TEST_PRIVATE_KEY)\n+\n+        if not os.path.exists(self.rsa4096_key_path):\n+            key = RSA.generate(4096)\n+            private_key = key.export_key()\n+            with open(self.rsa4096_key_path, \"wb\") as f:\n+                f.write(private_key)\n+\n+        if not os.path.exists(self.ec_p521_key_path):\n+            key = ECC.generate(curve='P-521')\n+            private_key = key.export_key(format='PEM')\n+            with open(self.ec_p521_key_path, \"wt\") as f:\n+                f.write(private_key)\n+\n+    def test_valid_http_signature(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+                signing.HEADER_HOST,\n+                signing.HEADER_DATE,\n+                signing.HEADER_DIGEST,\n+                'Content-Type'\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\) host date digest content-type\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_with_defaults(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_rsassa_pkcs1v15(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTE1Nw=="}, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDEyNzIxOnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1MToxMVrOFe_Fnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxNjoyNlrOFfGojg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTIzMQ==", "bodyText": "Can you decode the request using the key to show that you get back the unencrypted data to verify that this is working?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368035231", "createdAt": "2020-01-17T16:51:11Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,370 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.PublicKey import RSA\n+from Crypto.PublicKey import ECC\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.\n+        self._tc.assertEqual(r[0], args)\n+        # r[1] is a dict that contains the expected body, headers\n+        # kwargs is a dict that contains the actual body, headers\n+        for k, expected in r[1].items():\n+            self._tc.assertIn(k, kwargs)\n+            actual = kwargs[k]\n+            if k == 'body':\n+                self._tc.assertEqual(expected, actual)\n+            elif k == 'headers':\n+                for expected_header_name, expected_header_value in expected.items():\n+                    self._tc.assertIn(expected_header_name, actual)\n+                    actual_header_value = actual[expected_header_name]\n+                    pattern = re.compile(expected_header_value)\n+                    m = pattern.match(actual_header_value)\n+                    self._tc.assertTrue(m, msg=\"Expected:\\n{0}\\nActual:\\n{1}\".format(\n+                                        expected_header_value,actual_header_value))\n+            elif k == 'timeout':\n+                self._tc.assertEqual(expected, actual)\n+        return urllib3.HTTPResponse(status=200, body=b'test')\n+\n+\n+class PetApiTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.setUpModels()\n+        self.setUpFiles()\n+\n+\n+    def setUpModels(self):\n+        self.category = petstore_api.Category()\n+        self.category.id = id_gen()\n+        self.category.name = \"dog\"\n+        self.tag = petstore_api.Tag()\n+        self.tag.id = id_gen()\n+        self.tag.name = \"python-pet-tag\"\n+        self.pet = petstore_api.Pet(name=\"hello kity\", photo_urls=[\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"])\n+        self.pet.id = id_gen()\n+        self.pet.status = \"sold\"\n+        self.pet.category = self.category\n+        self.pet.tags = [self.tag]\n+\n+    def setUpFiles(self):\n+        self.test_file_dir = os.path.join(os.path.dirname(__file__), \"..\", \"testfiles\")\n+        self.test_file_dir = os.path.realpath(self.test_file_dir)\n+        if not os.path.exists(self.test_file_dir):\n+            os.mkdir(self.test_file_dir)\n+\n+        self.rsa_key_path = os.path.join(self.test_file_dir, 'rsa.pem')\n+        self.rsa4096_key_path = os.path.join(self.test_file_dir, 'rsa4096.pem')\n+        self.ec_p521_key_path = os.path.join(self.test_file_dir, 'ecP521.pem')\n+\n+        if not os.path.exists(self.rsa_key_path):\n+            with open(self.rsa_key_path, 'w') as f:\n+                f.write(RSA_TEST_PRIVATE_KEY)\n+\n+        if not os.path.exists(self.rsa4096_key_path):\n+            key = RSA.generate(4096)\n+            private_key = key.export_key()\n+            with open(self.rsa4096_key_path, \"wb\") as f:\n+                f.write(private_key)\n+\n+        if not os.path.exists(self.ec_p521_key_path):\n+            key = ECC.generate(curve='P-521')\n+            private_key = key.export_key(format='PEM')\n+            with open(self.ec_p521_key_path, \"wt\") as f:\n+                f.write(private_key)\n+\n+    def test_valid_http_signature(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+                signing.HEADER_HOST,\n+                signing.HEADER_DATE,\n+                signing.HEADER_DIGEST,\n+                'Content-Type'\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\) host date digest content-type\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_with_defaults(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_rsassa_pkcs1v15(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_rsassa_pss(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PSS,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1ODg2Mg==", "bodyText": "I have added unit tests to verify the signature with the public key.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368158862", "createdAt": "2020-01-17T22:16:26Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,370 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.PublicKey import RSA\n+from Crypto.PublicKey import ECC\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.\n+        self._tc.assertEqual(r[0], args)\n+        # r[1] is a dict that contains the expected body, headers\n+        # kwargs is a dict that contains the actual body, headers\n+        for k, expected in r[1].items():\n+            self._tc.assertIn(k, kwargs)\n+            actual = kwargs[k]\n+            if k == 'body':\n+                self._tc.assertEqual(expected, actual)\n+            elif k == 'headers':\n+                for expected_header_name, expected_header_value in expected.items():\n+                    self._tc.assertIn(expected_header_name, actual)\n+                    actual_header_value = actual[expected_header_name]\n+                    pattern = re.compile(expected_header_value)\n+                    m = pattern.match(actual_header_value)\n+                    self._tc.assertTrue(m, msg=\"Expected:\\n{0}\\nActual:\\n{1}\".format(\n+                                        expected_header_value,actual_header_value))\n+            elif k == 'timeout':\n+                self._tc.assertEqual(expected, actual)\n+        return urllib3.HTTPResponse(status=200, body=b'test')\n+\n+\n+class PetApiTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.setUpModels()\n+        self.setUpFiles()\n+\n+\n+    def setUpModels(self):\n+        self.category = petstore_api.Category()\n+        self.category.id = id_gen()\n+        self.category.name = \"dog\"\n+        self.tag = petstore_api.Tag()\n+        self.tag.id = id_gen()\n+        self.tag.name = \"python-pet-tag\"\n+        self.pet = petstore_api.Pet(name=\"hello kity\", photo_urls=[\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"])\n+        self.pet.id = id_gen()\n+        self.pet.status = \"sold\"\n+        self.pet.category = self.category\n+        self.pet.tags = [self.tag]\n+\n+    def setUpFiles(self):\n+        self.test_file_dir = os.path.join(os.path.dirname(__file__), \"..\", \"testfiles\")\n+        self.test_file_dir = os.path.realpath(self.test_file_dir)\n+        if not os.path.exists(self.test_file_dir):\n+            os.mkdir(self.test_file_dir)\n+\n+        self.rsa_key_path = os.path.join(self.test_file_dir, 'rsa.pem')\n+        self.rsa4096_key_path = os.path.join(self.test_file_dir, 'rsa4096.pem')\n+        self.ec_p521_key_path = os.path.join(self.test_file_dir, 'ecP521.pem')\n+\n+        if not os.path.exists(self.rsa_key_path):\n+            with open(self.rsa_key_path, 'w') as f:\n+                f.write(RSA_TEST_PRIVATE_KEY)\n+\n+        if not os.path.exists(self.rsa4096_key_path):\n+            key = RSA.generate(4096)\n+            private_key = key.export_key()\n+            with open(self.rsa4096_key_path, \"wb\") as f:\n+                f.write(private_key)\n+\n+        if not os.path.exists(self.ec_p521_key_path):\n+            key = ECC.generate(curve='P-521')\n+            private_key = key.export_key(format='PEM')\n+            with open(self.ec_p521_key_path, \"wt\") as f:\n+                f.write(private_key)\n+\n+    def test_valid_http_signature(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+                signing.HEADER_HOST,\n+                signing.HEADER_DATE,\n+                signing.HEADER_DIGEST,\n+                'Content-Type'\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\) host date digest content-type\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_with_defaults(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_rsassa_pkcs1v15(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_rsassa_pss(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PSS,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTIzMQ=="}, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDEyNzY1OnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1MToyMVrOFe_F5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoxNjoyMFrOFfGobQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTMwMw==", "bodyText": "Can you decode the request using the key to show that you get back the unencrypted data to verify that this is working?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368035303", "createdAt": "2020-01-17T16:51:21Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,370 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.PublicKey import RSA\n+from Crypto.PublicKey import ECC\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.\n+        self._tc.assertEqual(r[0], args)\n+        # r[1] is a dict that contains the expected body, headers\n+        # kwargs is a dict that contains the actual body, headers\n+        for k, expected in r[1].items():\n+            self._tc.assertIn(k, kwargs)\n+            actual = kwargs[k]\n+            if k == 'body':\n+                self._tc.assertEqual(expected, actual)\n+            elif k == 'headers':\n+                for expected_header_name, expected_header_value in expected.items():\n+                    self._tc.assertIn(expected_header_name, actual)\n+                    actual_header_value = actual[expected_header_name]\n+                    pattern = re.compile(expected_header_value)\n+                    m = pattern.match(actual_header_value)\n+                    self._tc.assertTrue(m, msg=\"Expected:\\n{0}\\nActual:\\n{1}\".format(\n+                                        expected_header_value,actual_header_value))\n+            elif k == 'timeout':\n+                self._tc.assertEqual(expected, actual)\n+        return urllib3.HTTPResponse(status=200, body=b'test')\n+\n+\n+class PetApiTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.setUpModels()\n+        self.setUpFiles()\n+\n+\n+    def setUpModels(self):\n+        self.category = petstore_api.Category()\n+        self.category.id = id_gen()\n+        self.category.name = \"dog\"\n+        self.tag = petstore_api.Tag()\n+        self.tag.id = id_gen()\n+        self.tag.name = \"python-pet-tag\"\n+        self.pet = petstore_api.Pet(name=\"hello kity\", photo_urls=[\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"])\n+        self.pet.id = id_gen()\n+        self.pet.status = \"sold\"\n+        self.pet.category = self.category\n+        self.pet.tags = [self.tag]\n+\n+    def setUpFiles(self):\n+        self.test_file_dir = os.path.join(os.path.dirname(__file__), \"..\", \"testfiles\")\n+        self.test_file_dir = os.path.realpath(self.test_file_dir)\n+        if not os.path.exists(self.test_file_dir):\n+            os.mkdir(self.test_file_dir)\n+\n+        self.rsa_key_path = os.path.join(self.test_file_dir, 'rsa.pem')\n+        self.rsa4096_key_path = os.path.join(self.test_file_dir, 'rsa4096.pem')\n+        self.ec_p521_key_path = os.path.join(self.test_file_dir, 'ecP521.pem')\n+\n+        if not os.path.exists(self.rsa_key_path):\n+            with open(self.rsa_key_path, 'w') as f:\n+                f.write(RSA_TEST_PRIVATE_KEY)\n+\n+        if not os.path.exists(self.rsa4096_key_path):\n+            key = RSA.generate(4096)\n+            private_key = key.export_key()\n+            with open(self.rsa4096_key_path, \"wb\") as f:\n+                f.write(private_key)\n+\n+        if not os.path.exists(self.ec_p521_key_path):\n+            key = ECC.generate(curve='P-521')\n+            private_key = key.export_key(format='PEM')\n+            with open(self.ec_p521_key_path, \"wt\") as f:\n+                f.write(private_key)\n+\n+    def test_valid_http_signature(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+                signing.HEADER_HOST,\n+                signing.HEADER_DATE,\n+                signing.HEADER_DIGEST,\n+                'Content-Type'\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\) host date digest content-type\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_with_defaults(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_rsassa_pkcs1v15(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_rsassa_pss(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PSS,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_ec_p521(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.ec_p521_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1ODgyOQ==", "bodyText": "There is no process to \"get back the unencrypted data\", it's a signature, but I think I know what you meant. I have added unit tests to verify the signature with the public key.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368158829", "createdAt": "2020-01-17T22:16:20Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,370 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.PublicKey import RSA\n+from Crypto.PublicKey import ECC\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# Test RSA private key as published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.\n+        self._tc.assertEqual(r[0], args)\n+        # r[1] is a dict that contains the expected body, headers\n+        # kwargs is a dict that contains the actual body, headers\n+        for k, expected in r[1].items():\n+            self._tc.assertIn(k, kwargs)\n+            actual = kwargs[k]\n+            if k == 'body':\n+                self._tc.assertEqual(expected, actual)\n+            elif k == 'headers':\n+                for expected_header_name, expected_header_value in expected.items():\n+                    self._tc.assertIn(expected_header_name, actual)\n+                    actual_header_value = actual[expected_header_name]\n+                    pattern = re.compile(expected_header_value)\n+                    m = pattern.match(actual_header_value)\n+                    self._tc.assertTrue(m, msg=\"Expected:\\n{0}\\nActual:\\n{1}\".format(\n+                                        expected_header_value,actual_header_value))\n+            elif k == 'timeout':\n+                self._tc.assertEqual(expected, actual)\n+        return urllib3.HTTPResponse(status=200, body=b'test')\n+\n+\n+class PetApiTests(unittest.TestCase):\n+\n+    def setUp(self):\n+        self.setUpModels()\n+        self.setUpFiles()\n+\n+\n+    def setUpModels(self):\n+        self.category = petstore_api.Category()\n+        self.category.id = id_gen()\n+        self.category.name = \"dog\"\n+        self.tag = petstore_api.Tag()\n+        self.tag.id = id_gen()\n+        self.tag.name = \"python-pet-tag\"\n+        self.pet = petstore_api.Pet(name=\"hello kity\", photo_urls=[\"http://foo.bar.com/1\", \"http://foo.bar.com/2\"])\n+        self.pet.id = id_gen()\n+        self.pet.status = \"sold\"\n+        self.pet.category = self.category\n+        self.pet.tags = [self.tag]\n+\n+    def setUpFiles(self):\n+        self.test_file_dir = os.path.join(os.path.dirname(__file__), \"..\", \"testfiles\")\n+        self.test_file_dir = os.path.realpath(self.test_file_dir)\n+        if not os.path.exists(self.test_file_dir):\n+            os.mkdir(self.test_file_dir)\n+\n+        self.rsa_key_path = os.path.join(self.test_file_dir, 'rsa.pem')\n+        self.rsa4096_key_path = os.path.join(self.test_file_dir, 'rsa4096.pem')\n+        self.ec_p521_key_path = os.path.join(self.test_file_dir, 'ecP521.pem')\n+\n+        if not os.path.exists(self.rsa_key_path):\n+            with open(self.rsa_key_path, 'w') as f:\n+                f.write(RSA_TEST_PRIVATE_KEY)\n+\n+        if not os.path.exists(self.rsa4096_key_path):\n+            key = RSA.generate(4096)\n+            private_key = key.export_key()\n+            with open(self.rsa4096_key_path, \"wb\") as f:\n+                f.write(private_key)\n+\n+        if not os.path.exists(self.ec_p521_key_path):\n+            key = ECC.generate(curve='P-521')\n+            private_key = key.export_key(format='PEM')\n+            with open(self.ec_p521_key_path, \"wt\") as f:\n+                f.write(private_key)\n+\n+    def test_valid_http_signature(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+                signing.HEADER_HOST,\n+                signing.HEADER_DATE,\n+                signing.HEADER_DIGEST,\n+                'Content-Type'\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\) host date digest content-type\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_with_defaults(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_rsassa_pkcs1v15(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PKCS1v15,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_rsassa_pss(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.rsa4096_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signing_algorithm=signing.ALGORITHM_RSASSA_PSS,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+=\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)\n+\n+    def test_valid_http_signature_ec_p521(self):\n+        signing_cfg = signing.HttpSigningConfiguration(\n+            key_id=\"my-key-id\",\n+            private_key_path=self.ec_p521_key_path,\n+            signing_scheme=signing.SCHEME_HS2019,\n+            signed_headers=[\n+                signing.HEADER_REQUEST_TARGET,\n+                signing.HEADER_CREATED,\n+            ]\n+        )\n+        config = Configuration(host=HOST, signing_info=signing_cfg)\n+        # Set the OAuth2 acces_token to None. Here we are interested in testing\n+        # the HTTP signature scheme.\n+        config.access_token = None\n+\n+        api_client = petstore_api.ApiClient(config)\n+        pet_api = petstore_api.PetApi(api_client)\n+\n+        mock_pool = MockPoolManager(self)\n+        api_client.rest_client.pool_manager = mock_pool\n+\n+        mock_pool.expect_request('POST', 'http://petstore.swagger.io/v2/pet',\n+                                 body=json.dumps(api_client.sanitize_for_serialization(self.pet)),\n+                                 headers={'Content-Type': 'application/json',\n+                                          'Authorization': 'Signature keyId=\"my-key-id\",algorithm=\"hs2019\",created=[0-9]+,'\n+                                                'headers=\"\\(request-target\\) \\(created\\)\",'\n+                                                'signature=\"[a-zA-Z0-9+/]+\"',\n+                                          'User-Agent': 'OpenAPI-Generator/1.0.0/python'},\n+                                 preload_content=True, timeout=None)\n+\n+        pet_api.add_pet(self.pet)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTMwMw=="}, "originalCommit": {"oid": "aafedc6cfde3ef998dc12ee5ff6055717aa1f4dd"}, "originalPosition": 318}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwNjQyOnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1MzowNVrOFfJYeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMzozMTo1NVrOFfRPaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzg5OA==", "bodyText": "How about using variable names that convey the info in your comments?\nhttp_method_url_expected = r[0]\nEtc", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368203898", "createdAt": "2020-01-18T03:53:05Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,486 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import base64\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.Hash import SHA256, SHA512\n+from Crypto.PublicKey import ECC, RSA\n+from Crypto.Signature import pkcs1_15, pss, DSS\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# This test RSA private key below is published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def set_signing_config(self, signing_cfg):\n+        self.signing_cfg = signing_cfg\n+        self._tc.assertIsNotNone(self.signing_cfg)\n+        self.pubkey = self.signing_cfg.get_public_key()\n+        self._tc.assertIsNotNone(self.pubkey)\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4651cf51247ae9e3ac163c49f6a15f6eb0d7de5"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMzMjY0OQ==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368332649", "createdAt": "2020-01-19T23:31:55Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,486 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import base64\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.Hash import SHA256, SHA512\n+from Crypto.PublicKey import ECC, RSA\n+from Crypto.Signature import pkcs1_15, pss, DSS\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# This test RSA private key below is published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def set_signing_config(self, signing_cfg):\n+        self.signing_cfg = signing_cfg\n+        self._tc.assertIsNotNone(self.signing_cfg)\n+        self.pubkey = self.signing_cfg.get_public_key()\n+        self._tc.assertIsNotNone(self.pubkey)\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzg5OA=="}, "originalCommit": {"oid": "c4651cf51247ae9e3ac163c49f6a15f6eb0d7de5"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwNjczOnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1Mzo1MFrOFfJYog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMzozMTo0NlrOFfRPYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzkzOA==", "bodyText": "How about using variable names that convey the info in your comments?\nkwargs could be named body_headers_actual", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368203938", "createdAt": "2020-01-18T03:53:50Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,486 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import base64\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.Hash import SHA256, SHA512\n+from Crypto.PublicKey import ECC, RSA\n+from Crypto.Signature import pkcs1_15, pss, DSS\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# This test RSA private key below is published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def set_signing_config(self, signing_cfg):\n+        self.signing_cfg = signing_cfg\n+        self._tc.assertIsNotNone(self.signing_cfg)\n+        self.pubkey = self.signing_cfg.get_public_key()\n+        self._tc.assertIsNotNone(self.pubkey)\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.\n+        self._tc.assertEqual(r[0], args)\n+        # r[1] is a dict that contains the expected body, headers\n+        # kwargs is a dict that contains the actual body, headers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4651cf51247ae9e3ac163c49f6a15f6eb0d7de5"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMzMjY0MA==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r368332640", "createdAt": "2020-01-19T23:31:46Z", "author": {"login": "sebastien-rosset"}, "path": "samples/openapi3/client/petstore/python-experimental/tests/test_http_signature.py", "diffHunk": "@@ -0,0 +1,486 @@\n+# coding: utf-8\n+\n+# flake8: noqa\n+\n+\"\"\"\n+Run the tests.\n+$ docker pull swaggerapi/petstore\n+$ docker run -d -e SWAGGER_HOST=http://petstore.swagger.io -e SWAGGER_BASE_PATH=/v2 -p 80:8080 swaggerapi/petstore\n+$ pip install nose (optional)\n+$ cd petstore_api-python\n+$ nosetests -v\n+\"\"\"\n+\n+from collections import namedtuple\n+from datetime import datetime, timedelta\n+import base64\n+import json\n+import os\n+import re\n+import shutil\n+import unittest\n+from Crypto.Hash import SHA256, SHA512\n+from Crypto.PublicKey import ECC, RSA\n+from Crypto.Signature import pkcs1_15, pss, DSS\n+from six.moves.urllib.parse import urlencode, urlparse\n+\n+import petstore_api\n+from petstore_api import Configuration, signing\n+from petstore_api.rest import (\n+    RESTClientObject,\n+    RESTResponse\n+)\n+\n+import six\n+\n+from petstore_api.exceptions import (\n+    ApiException,\n+    ApiValueError,\n+    ApiTypeError,\n+)\n+\n+from .util import id_gen\n+\n+import urllib3\n+\n+if six.PY3:\n+    from unittest.mock import patch\n+else:\n+    from mock import patch\n+\n+HOST = 'http://localhost/v2'\n+\n+# This test RSA private key below is published in Appendix C 'Test Values' of\n+# https://www.ietf.org/id/draft-cavage-http-signatures-12.txt\n+RSA_TEST_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+MIICXgIBAAKBgQDCFENGw33yGihy92pDjZQhl0C36rPJj+CvfSC8+q28hxA161QF\n+NUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6Z4UMR7EOcpfdUE9Hf3m/hs+F\n+UR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJwoYi+1hqp1fIekaxsyQIDAQAB\n+AoGBAJR8ZkCUvx5kzv+utdl7T5MnordT1TvoXXJGXK7ZZ+UuvMNUCdN2QPc4sBiA\n+QWvLw1cSKt5DsKZ8UETpYPy8pPYnnDEz2dDYiaew9+xEpubyeW2oH4Zx71wqBtOK\n+kqwrXa/pzdpiucRRjk6vE6YY7EBBs/g7uanVpGibOVAEsqH1AkEA7DkjVH28WDUg\n+f1nqvfn2Kj6CT7nIcE3jGJsZZ7zlZmBmHFDONMLUrXR/Zm3pR5m0tCmBqa5RK95u\n+412jt1dPIwJBANJT3v8pnkth48bQo/fKel6uEYyboRtA5/uHuHkZ6FQF7OUkGogc\n+mSJluOdc5t6hI1VsLn0QZEjQZMEOWr+wKSMCQQCC4kXJEsHAve77oP6HtG/IiEn7\n+kpyUXRNvFsDE0czpJJBvL/aRFUJxuRK91jhjC68sA7NsKMGg5OXb5I5Jj36xAkEA\n+gIT7aFOYBFwGgQAQkWNKLvySgKbAZRTeLBacpHMuQdl1DfdntvAyqpAZ0lY0RKmW\n+G6aFKaqQfOXKCyWoUiVknQJAXrlgySFci/2ueKlIE1QqIiLSZ8V8OlpFLRnb1pzI\n+7U1yQXnTAEFYM560yJlzUpOb1V4cScGd365tiSMvxLOvTA==\n+-----END RSA PRIVATE KEY-----\"\"\"\n+\n+\n+class TimeoutWithEqual(urllib3.Timeout):\n+    def __init__(self, *arg, **kwargs):\n+        super(TimeoutWithEqual, self).__init__(*arg, **kwargs)\n+\n+    def __eq__(self, other):\n+        return self._read == other._read and self._connect == other._connect and self.total == other.total\n+\n+class MockPoolManager(object):\n+    def __init__(self, tc):\n+        self._tc = tc\n+        self._reqs = []\n+\n+    def expect_request(self, *args, **kwargs):\n+        self._reqs.append((args, kwargs))\n+\n+    def set_signing_config(self, signing_cfg):\n+        self.signing_cfg = signing_cfg\n+        self._tc.assertIsNotNone(self.signing_cfg)\n+        self.pubkey = self.signing_cfg.get_public_key()\n+        self._tc.assertIsNotNone(self.pubkey)\n+\n+    def request(self, *args, **kwargs):\n+        self._tc.assertTrue(len(self._reqs) > 0)\n+        r = self._reqs.pop(0)\n+        self._tc.maxDiff = None\n+        # r[0] is the expected HTTP method, URL.\n+        # args is the actual HTTP method, URL.\n+        self._tc.assertEqual(r[0], args)\n+        # r[1] is a dict that contains the expected body, headers\n+        # kwargs is a dict that contains the actual body, headers", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzkzOA=="}, "originalCommit": {"oid": "c4651cf51247ae9e3ac163c49f6a15f6eb0d7de5"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODYwMDAxOnYy", "diffSide": "LEFT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo0NzoxMFrOFhHG8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMToyMzozMVrOFhNFRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2Mzc5Mw==", "bodyText": "Why should we remove this exception?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r370263793", "createdAt": "2020-01-23T17:47:10Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -3646,8 +3646,6 @@ public boolean isDataTypeFile(String dataType) {\n                     // As of January 2020, the \"signature\" scheme has not been registered with IANA yet.\n                     // This scheme may have to be changed when it is officially registered with IANA.\n                     cs.isHttpSignature = true;\n-                } else {\n-                    throw new RuntimeException(\"Unsupported security scheme: \" + securityScheme.getScheme());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb0df5601625da1bc2d2373fe42df7d11eb3e58"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2Njg0MA==", "bodyText": "This is to address  @jimschubert comments:\n\nThis would be a breaking change, as we failed silently for any unsupported schemes previously.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r370266840", "createdAt": "2020-01-23T17:53:40Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -3646,8 +3646,6 @@ public boolean isDataTypeFile(String dataType) {\n                     // As of January 2020, the \"signature\" scheme has not been registered with IANA yet.\n                     // This scheme may have to be changed when it is officially registered with IANA.\n                     cs.isHttpSignature = true;\n-                } else {\n-                    throw new RuntimeException(\"Unsupported security scheme: \" + securityScheme.getScheme());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2Mzc5Mw=="}, "originalCommit": {"oid": "1bb0df5601625da1bc2d2373fe42df7d11eb3e58"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2NzgwOQ==", "bodyText": "@jimschubert doesn't this clause mean that we failed loudly before, not silently?\nHow did we fail silently before?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r370267809", "createdAt": "2020-01-23T17:55:45Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -3646,8 +3646,6 @@ public boolean isDataTypeFile(String dataType) {\n                     // As of January 2020, the \"signature\" scheme has not been registered with IANA yet.\n                     // This scheme may have to be changed when it is officially registered with IANA.\n                     cs.isHttpSignature = true;\n-                } else {\n-                    throw new RuntimeException(\"Unsupported security scheme: \" + securityScheme.getScheme());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2Mzc5Mw=="}, "originalCommit": {"oid": "1bb0df5601625da1bc2d2373fe42df7d11eb3e58"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3MDA0Ng==", "bodyText": "I think @jimschubert  meant codegen ignores the scheme, rather that \"fail\".\nIdeally, developers would be able to add their own security scheme without having to fork OpenAPITools. There would be a way to register a new security scheme.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r370270046", "createdAt": "2020-01-23T18:00:30Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -3646,8 +3646,6 @@ public boolean isDataTypeFile(String dataType) {\n                     // As of January 2020, the \"signature\" scheme has not been registered with IANA yet.\n                     // This scheme may have to be changed when it is officially registered with IANA.\n                     cs.isHttpSignature = true;\n-                } else {\n-                    throw new RuntimeException(\"Unsupported security scheme: \" + securityScheme.getScheme());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2Mzc5Mw=="}, "originalCommit": {"oid": "1bb0df5601625da1bc2d2373fe42df7d11eb3e58"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM2MTY3MA==", "bodyText": "Ah, I see that from our master branch at https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java#L3641. I misunderstood and thought that master had throw new RuntimeException when it was that only the earlier commit in this branch had it.\nFeel free to mark this as resolved. Thank you for the explanation.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r370361670", "createdAt": "2020-01-23T21:23:31Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/DefaultCodegen.java", "diffHunk": "@@ -3646,8 +3646,6 @@ public boolean isDataTypeFile(String dataType) {\n                     // As of January 2020, the \"signature\" scheme has not been registered with IANA yet.\n                     // This scheme may have to be changed when it is officially registered with IANA.\n                     cs.isHttpSignature = true;\n-                } else {\n-                    throw new RuntimeException(\"Unsupported security scheme: \" + securityScheme.getScheme());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2Mzc5Mw=="}, "originalCommit": {"oid": "1bb0df5601625da1bc2d2373fe42df7d11eb3e58"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODYxNTAwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/setup.mustache", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo1MjoxNFrOFhHQNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo1ODowNFrOFhHa1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2NjE2NQ==", "bodyText": "Optionally, why not spreading out each requirement to a separate line?\nThen we don't need to use append statement.\nREQUIRES = [\n    \"urllib3 >= 1.15\",\n    ...\n{{#asyncio}}\n    \"aiohttp >= 3.0.0\"\n{{/asyncio}}\n]", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r370266165", "createdAt": "2020-01-23T17:52:14Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/setup.mustache", "diffHunk": "@@ -23,6 +23,10 @@ REQUIRES.append(\"aiohttp >= 3.0.0\")\n {{#tornado}}\n REQUIRES.append(\"tornado>=4.2,<5\")\n {{/tornado}}\n+{{#hasHttpSignatureMethods}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bb0df5601625da1bc2d2373fe42df7d11eb3e58"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2ODg4NQ==", "bodyText": "done.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/4958#discussion_r370268885", "createdAt": "2020-01-23T17:58:04Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/setup.mustache", "diffHunk": "@@ -23,6 +23,10 @@ REQUIRES.append(\"aiohttp >= 3.0.0\")\n {{#tornado}}\n REQUIRES.append(\"tornado>=4.2,<5\")\n {{/tornado}}\n+{{#hasHttpSignatureMethods}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2NjE2NQ=="}, "originalCommit": {"oid": "1bb0df5601625da1bc2d2373fe42df7d11eb3e58"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4007, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}