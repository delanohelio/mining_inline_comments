{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTUxODQ5", "number": 5315, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMTowOToxOFrODgDi8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzo0OToxNVrODiHNyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTM5MTIwOnYy", "diffSide": "RIGHT", "path": "samples/openapi3/client/petstore/python/petstore_api/configuration.py", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMTowOToxOFrOFqHXfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzoyNDozNVrOFtNX3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNTIxNQ==", "bodyText": "Why copy it vs just returning the instance?\nThe CI tests are failing when trying to deepcopy the logger.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r379705215", "createdAt": "2020-02-15T01:09:18Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python/petstore_api/configuration.py", "diffHunk": "@@ -169,6 +172,31 @@ def __init__(self, host=\"http://petstore.swagger.io:80/v2\",\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    @classmethod\n+    def set_default(cls, default):\n+        \"\"\"Set default instance of configuration.\n+\n+        It stores default configuration, which can be\n+        returned by get_instance method.\n+\n+        :param default: object of Configuration\n+        \"\"\"\n+        cls._default = copy.copy(default)\n+\n+    @classmethod\n+    def get_instance(cls):\n+        \"\"\"Return new instance of configuration.\n+\n+        This method returns newly created, based on default constructor,\n+        object of Configuration class or returns a copy of default\n+        configuration passed by the set_default method.\n+\n+        :return: The configuration object.\n+        \"\"\"\n+        if cls._default is not None:\n+            return copy.copy(cls._default)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c6e2ba90c9d367df8ff210613ccdadaeda9c73"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDQ4Nw==", "bodyText": "How about returning a new Configuration instance which uses the same instantiation inputs as the default instance?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r379850487", "createdAt": "2020-02-15T19:19:11Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python/petstore_api/configuration.py", "diffHunk": "@@ -169,6 +172,31 @@ def __init__(self, host=\"http://petstore.swagger.io:80/v2\",\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    @classmethod\n+    def set_default(cls, default):\n+        \"\"\"Set default instance of configuration.\n+\n+        It stores default configuration, which can be\n+        returned by get_instance method.\n+\n+        :param default: object of Configuration\n+        \"\"\"\n+        cls._default = copy.copy(default)\n+\n+    @classmethod\n+    def get_instance(cls):\n+        \"\"\"Return new instance of configuration.\n+\n+        This method returns newly created, based on default constructor,\n+        object of Configuration class or returns a copy of default\n+        configuration passed by the set_default method.\n+\n+        :return: The configuration object.\n+        \"\"\"\n+        if cls._default is not None:\n+            return copy.copy(cls._default)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNTIxNQ=="}, "originalCommit": {"oid": "e4c6e2ba90c9d367df8ff210613ccdadaeda9c73"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDgzNw==", "bodyText": "Yes, deepcopy doesn't work. Here as in the previous implementation a copy of default configuration is returned.\nThe CI tests failed because a remote endpoint returned 404 error on add_pet method. I don't know why, I'll try to run it again.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r379850837", "createdAt": "2020-02-15T19:25:24Z", "author": {"login": "tomplus"}, "path": "samples/openapi3/client/petstore/python/petstore_api/configuration.py", "diffHunk": "@@ -169,6 +172,31 @@ def __init__(self, host=\"http://petstore.swagger.io:80/v2\",\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    @classmethod\n+    def set_default(cls, default):\n+        \"\"\"Set default instance of configuration.\n+\n+        It stores default configuration, which can be\n+        returned by get_instance method.\n+\n+        :param default: object of Configuration\n+        \"\"\"\n+        cls._default = copy.copy(default)\n+\n+    @classmethod\n+    def get_instance(cls):\n+        \"\"\"Return new instance of configuration.\n+\n+        This method returns newly created, based on default constructor,\n+        object of Configuration class or returns a copy of default\n+        configuration passed by the set_default method.\n+\n+        :return: The configuration object.\n+        \"\"\"\n+        if cls._default is not None:\n+            return copy.copy(cls._default)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNTIxNQ=="}, "originalCommit": {"oid": "e4c6e2ba90c9d367df8ff210613ccdadaeda9c73"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTQxOQ==", "bodyText": "Tests passed. I guess the original intention was to return a copy which looks like a new object but with different default values. Maybe I should name the method new_instance instead of get_instance to make it more understandable... ?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r379865419", "createdAt": "2020-02-16T00:24:09Z", "author": {"login": "tomplus"}, "path": "samples/openapi3/client/petstore/python/petstore_api/configuration.py", "diffHunk": "@@ -169,6 +172,31 @@ def __init__(self, host=\"http://petstore.swagger.io:80/v2\",\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    @classmethod\n+    def set_default(cls, default):\n+        \"\"\"Set default instance of configuration.\n+\n+        It stores default configuration, which can be\n+        returned by get_instance method.\n+\n+        :param default: object of Configuration\n+        \"\"\"\n+        cls._default = copy.copy(default)\n+\n+    @classmethod\n+    def get_instance(cls):\n+        \"\"\"Return new instance of configuration.\n+\n+        This method returns newly created, based on default constructor,\n+        object of Configuration class or returns a copy of default\n+        configuration passed by the set_default method.\n+\n+        :return: The configuration object.\n+        \"\"\"\n+        if cls._default is not None:\n+            return copy.copy(cls._default)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNTIxNQ=="}, "originalCommit": {"oid": "e4c6e2ba90c9d367df8ff210613ccdadaeda9c73"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1OTg3Mw==", "bodyText": "I changed method name to new_instance().", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r382859873", "createdAt": "2020-02-22T00:02:07Z", "author": {"login": "tomplus"}, "path": "samples/openapi3/client/petstore/python/petstore_api/configuration.py", "diffHunk": "@@ -169,6 +172,31 @@ def __init__(self, host=\"http://petstore.swagger.io:80/v2\",\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    @classmethod\n+    def set_default(cls, default):\n+        \"\"\"Set default instance of configuration.\n+\n+        It stores default configuration, which can be\n+        returned by get_instance method.\n+\n+        :param default: object of Configuration\n+        \"\"\"\n+        cls._default = copy.copy(default)\n+\n+    @classmethod\n+    def get_instance(cls):\n+        \"\"\"Return new instance of configuration.\n+\n+        This method returns newly created, based on default constructor,\n+        object of Configuration class or returns a copy of default\n+        configuration passed by the set_default method.\n+\n+        :return: The configuration object.\n+        \"\"\"\n+        if cls._default is not None:\n+            return copy.copy(cls._default)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNTIxNQ=="}, "originalCommit": {"oid": "e4c6e2ba90c9d367df8ff210613ccdadaeda9c73"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2Mjc5OA==", "bodyText": "new_instance is good.\nHow do you feel about get_default_copy as a name?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r382862798", "createdAt": "2020-02-22T00:18:08Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python/petstore_api/configuration.py", "diffHunk": "@@ -169,6 +172,31 @@ def __init__(self, host=\"http://petstore.swagger.io:80/v2\",\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    @classmethod\n+    def set_default(cls, default):\n+        \"\"\"Set default instance of configuration.\n+\n+        It stores default configuration, which can be\n+        returned by get_instance method.\n+\n+        :param default: object of Configuration\n+        \"\"\"\n+        cls._default = copy.copy(default)\n+\n+    @classmethod\n+    def get_instance(cls):\n+        \"\"\"Return new instance of configuration.\n+\n+        This method returns newly created, based on default constructor,\n+        object of Configuration class or returns a copy of default\n+        configuration passed by the set_default method.\n+\n+        :return: The configuration object.\n+        \"\"\"\n+        if cls._default is not None:\n+            return copy.copy(cls._default)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNTIxNQ=="}, "originalCommit": {"oid": "e4c6e2ba90c9d367df8ff210613ccdadaeda9c73"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0OTM0MQ==", "bodyText": "Updated, both versions look good to me.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r382949341", "createdAt": "2020-02-22T23:24:35Z", "author": {"login": "tomplus"}, "path": "samples/openapi3/client/petstore/python/petstore_api/configuration.py", "diffHunk": "@@ -169,6 +172,31 @@ def __init__(self, host=\"http://petstore.swagger.io:80/v2\",\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    @classmethod\n+    def set_default(cls, default):\n+        \"\"\"Set default instance of configuration.\n+\n+        It stores default configuration, which can be\n+        returned by get_instance method.\n+\n+        :param default: object of Configuration\n+        \"\"\"\n+        cls._default = copy.copy(default)\n+\n+    @classmethod\n+    def get_instance(cls):\n+        \"\"\"Return new instance of configuration.\n+\n+        This method returns newly created, based on default constructor,\n+        object of Configuration class or returns a copy of default\n+        configuration passed by the set_default method.\n+\n+        :return: The configuration object.\n+        \"\"\"\n+        if cls._default is not None:\n+            return copy.copy(cls._default)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNTIxNQ=="}, "originalCommit": {"oid": "e4c6e2ba90c9d367df8ff210613ccdadaeda9c73"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDc0NzczOnYy", "diffSide": "RIGHT", "path": "samples/client/petstore/python/tests/test_configuration.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDoyNToyMVrOFqRJlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDowMDozOFrOFtH5Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTQ5Mw==", "bodyText": "Can you also add a test that verifies that the\ncontents of the api_key and api_key_prefix dicts are the same but that their ids are different?\nOr will they be the same because of the shallow copy?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r379865493", "createdAt": "2020-02-16T00:25:21Z", "author": {"login": "spacether"}, "path": "samples/client/petstore/python/tests/test_configuration.py", "diffHunk": "@@ -22,14 +22,25 @@ def setUp(self):\n         pass\n \n     def tearDown(self):\n-        pass\n+        # reset Configuration\n+        petstore_api.Configuration.set_default(None)\n \n     def testConfiguration(self):\n         # check that different instances use different dictionaries\n         c1 = petstore_api.Configuration()\n         c2 = petstore_api.Configuration()\n-        assert id(c1.api_key) != id(c2.api_key)\n-        assert id(c1.api_key_prefix) != id(c2.api_key_prefix)\n+        self.assertNotEqual(id(c1.api_key), id(c2.api_key))\n+        self.assertNotEqual(id(c1.api_key_prefix), id(c2.api_key_prefix))\n+\n+    def testDefaultConfiguration(self):\n+\n+        # prepare default configuration\n+        c1 = petstore_api.Configuration(host=\"example.com\")\n+        petstore_api.Configuration.set_default(c1)\n+\n+        # get default configuration\n+        c2 = petstore_api.Configuration.get_instance()\n+        self.assertEqual(c2.host, \"example.com\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70a585471e4d5f12233d68afc5b00b0be62376b9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1OTU4Mg==", "bodyText": "I wasn't aware that api_key are dict, thanks.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r382859582", "createdAt": "2020-02-22T00:00:38Z", "author": {"login": "tomplus"}, "path": "samples/client/petstore/python/tests/test_configuration.py", "diffHunk": "@@ -22,14 +22,25 @@ def setUp(self):\n         pass\n \n     def tearDown(self):\n-        pass\n+        # reset Configuration\n+        petstore_api.Configuration.set_default(None)\n \n     def testConfiguration(self):\n         # check that different instances use different dictionaries\n         c1 = petstore_api.Configuration()\n         c2 = petstore_api.Configuration()\n-        assert id(c1.api_key) != id(c2.api_key)\n-        assert id(c1.api_key_prefix) != id(c2.api_key_prefix)\n+        self.assertNotEqual(id(c1.api_key), id(c2.api_key))\n+        self.assertNotEqual(id(c1.api_key_prefix), id(c2.api_key_prefix))\n+\n+    def testDefaultConfiguration(self):\n+\n+        # prepare default configuration\n+        c1 = petstore_api.Configuration(host=\"example.com\")\n+        petstore_api.Configuration.set_default(c1)\n+\n+        # get default configuration\n+        c2 = petstore_api.Configuration.get_instance()\n+        self.assertEqual(c2.host, \"example.com\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTQ5Mw=="}, "originalCommit": {"oid": "70a585471e4d5f12233d68afc5b00b0be62376b9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDI5NDMzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDozMDowOVrOFtIN7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzoyNTo0NVrOFtNYCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDg3OA==", "bodyText": "How about changing this to:\n__deepcopy__(self, memodict={})\nThat way you control how everything can be copied. For the logger only you can then make a new logger with the same properties as the old one. All other properties can be deep copied. You can use dir(self) or self.__dict__ to iterate over all of self's properties.\nIf you do it this way, then in new_instance you can return copy.deepcopy(cls._default)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r382864878", "createdAt": "2020-02-22T00:30:09Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -241,6 +244,40 @@ class Configuration(object):\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    @classmethod\n+    def copy(cls, source):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a4c72628af6e3ebb9bcbb88d49e485fea0326dd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0OTM4NA==", "bodyText": "Yeah, I'd totally forgotten about this possibility. Thanks.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r382949384", "createdAt": "2020-02-22T23:25:45Z", "author": {"login": "tomplus"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -241,6 +244,40 @@ class Configuration(object):\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    @classmethod\n+    def copy(cls, source):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDg3OA=="}, "originalCommit": {"oid": "2a4c72628af6e3ebb9bcbb88d49e485fea0326dd"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk2MjkzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzo0NjoyOFrOFtNcEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxOToyMToxOFrOFtSWrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1MDQxOQ==", "bodyText": "How about returning None if the default copy is not present?\nThen we can do truthy/none checks with the result.\nThis lets our users see and handle the case when a default is unset.\nOr if we want to always return an instance how about naming it\ndefault_copy_or_new_instance?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r382950419", "createdAt": "2020-02-22T23:46:28Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -241,6 +244,45 @@ class Configuration(object):\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    def __deepcopy__(self, memo):\n+        cls = self.__class__\n+        result = cls.__new__(cls)\n+        memo[id(self)] = result\n+        for k, v in self.__dict__.items():\n+            if k not in ('logger', 'logger_file_handler'):\n+                setattr(result, k, copy.deepcopy(v, memo))\n+        # shallow copy of loggers\n+        result.logger = copy.copy(self.logger)\n+        # use setters to configure loggers\n+        result.logger_file = self.logger_file\n+        result.debug = self.debug\n+        return result\n+\n+    @classmethod\n+    def set_default(cls, default):\n+        \"\"\"Set default instance of configuration.\n+\n+        It stores default configuration, which can be\n+        returned by get_default_copy method.\n+\n+        :param default: object of Configuration\n+        \"\"\"\n+        cls._default = copy.deepcopy(default)\n+\n+    @classmethod\n+    def get_default_copy(cls):\n+        \"\"\"Return new instance of configuration.\n+\n+        This method returns newly created, based on default constructor,\n+        object of Configuration class or returns a copy of default\n+        configuration passed by the set_default method.\n+\n+        :return: The configuration object.\n+        \"\"\"\n+        if cls._default is not None:\n+            return copy.deepcopy(cls._default)\n+        return Configuration()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be04fb9a0fd1d1f5bb61ebf9272fb2cb6f0162e9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMDk1OQ==", "bodyText": "I think get_default_copy is good enough for this usage.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r383030959", "createdAt": "2020-02-23T19:21:18Z", "author": {"login": "tomplus"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -241,6 +244,45 @@ class Configuration(object):\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    def __deepcopy__(self, memo):\n+        cls = self.__class__\n+        result = cls.__new__(cls)\n+        memo[id(self)] = result\n+        for k, v in self.__dict__.items():\n+            if k not in ('logger', 'logger_file_handler'):\n+                setattr(result, k, copy.deepcopy(v, memo))\n+        # shallow copy of loggers\n+        result.logger = copy.copy(self.logger)\n+        # use setters to configure loggers\n+        result.logger_file = self.logger_file\n+        result.debug = self.debug\n+        return result\n+\n+    @classmethod\n+    def set_default(cls, default):\n+        \"\"\"Set default instance of configuration.\n+\n+        It stores default configuration, which can be\n+        returned by get_default_copy method.\n+\n+        :param default: object of Configuration\n+        \"\"\"\n+        cls._default = copy.deepcopy(default)\n+\n+    @classmethod\n+    def get_default_copy(cls):\n+        \"\"\"Return new instance of configuration.\n+\n+        This method returns newly created, based on default constructor,\n+        object of Configuration class or returns a copy of default\n+        configuration passed by the set_default method.\n+\n+        :return: The configuration object.\n+        \"\"\"\n+        if cls._default is not None:\n+            return copy.deepcopy(cls._default)\n+        return Configuration()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1MDQxOQ=="}, "originalCommit": {"oid": "be04fb9a0fd1d1f5bb61ebf9272fb2cb6f0162e9"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDk2MzkyOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/api_client.mustache", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzo0OToxNVrOFtNciw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzo0OToxNVrOFtNciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1MDUzOQ==", "bodyText": "How about?\ndefault_copy = Configuration.get_default_copy()\nconfiguration = Configuration() if default_copy is None else default_copy", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r382950539", "createdAt": "2020-02-22T23:49:15Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/api_client.mustache", "diffHunk": "@@ -63,7 +63,7 @@ class ApiClient(object):\n     def __init__(self, configuration=None, header_name=None, header_value=None,\n                  cookie=None, pool_threads=1):\n         if configuration is None:\n-            configuration = Configuration()\n+            configuration = Configuration.get_default_copy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be04fb9a0fd1d1f5bb61ebf9272fb2cb6f0162e9"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3806, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}