{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NTQ2MjUy", "number": 7784, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDo1MToxOFrOEw_rNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTowMzowNlrOEw_yWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODEwMzU4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_setattr_getattr_composed.mustache", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDo1MToxOFrOHm4uIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDo1MToxOFrOHm4uIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNzI1MA==", "bodyText": "How about updating the docstring here?\nwe use this to set values for instance.field_name = val and instance[\"field_name\"] = val", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7784#discussion_r510537250", "createdAt": "2020-10-23T00:51:18Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_setattr_getattr_composed.mustache", "diffHunk": "@@ -1,4 +1,4 @@\n-    def __setattr__(self, name, value):\n+    def __setitem__(self, name, value):\n         \"\"\"this allows us to set a value with instance.field_name = val\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b25c9eaa54d99cb192bbbc7df196e64308214b5"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODEyMDEwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_setattr_getattr_composed.mustache", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTowMTo0OFrOHm43dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTo1OToxNVrOHnUBHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzOTYzOA==", "bodyText": "How about just using name here? We know that name was not found.\n\nthis same comment applies on line 70 too", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7784#discussion_r510539638", "createdAt": "2020-10-23T01:01:48Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_setattr_getattr_composed.mustache", "diffHunk": "@@ -20,28 +20,22 @@\n                     )\n             return None\n \n-        path_to_item = []\n-        if self._path_to_item:\n-            path_to_item.extend(self._path_to_item)\n-        path_to_item.append(name)\n         raise ApiAttributeError(\n             \"{0} has no attribute '{1}'\".format(\n                 type(self).__name__, name),\n-            path_to_item\n+            [e for e in [self._path_to_item, name] if e]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b25c9eaa54d99cb192bbbc7df196e64308214b5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4NDQ3OA==", "bodyText": "i just compacted the previous functionality to find path_to_item, if you think just name is enough instead of the old path code, i'm fine with that", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7784#discussion_r510984478", "createdAt": "2020-10-23T15:59:15Z", "author": {"login": "keymone"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_setattr_getattr_composed.mustache", "diffHunk": "@@ -20,28 +20,22 @@\n                     )\n             return None\n \n-        path_to_item = []\n-        if self._path_to_item:\n-            path_to_item.extend(self._path_to_item)\n-        path_to_item.append(name)\n         raise ApiAttributeError(\n             \"{0} has no attribute '{1}'\".format(\n                 type(self).__name__, name),\n-            path_to_item\n+            [e for e in [self._path_to_item, name] if e]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzOTYzOA=="}, "originalCommit": {"oid": "1b25c9eaa54d99cb192bbbc7df196e64308214b5"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODEyMTg2OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_setattr_getattr_composed.mustache", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTowMzowNlrOHm44hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjowMTowNFrOHnUFnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzOTkxMQ==", "bodyText": "How about unset_attribute_value = object\nThen we always point to a singleton and don't need to instantiate additional empty objects", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7784#discussion_r510539911", "createdAt": "2020-10-23T01:03:06Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_setattr_getattr_composed.mustache", "diffHunk": "@@ -20,28 +20,22 @@\n                     )\n             return None\n \n-        path_to_item = []\n-        if self._path_to_item:\n-            path_to_item.extend(self._path_to_item)\n-        path_to_item.append(name)\n         raise ApiAttributeError(\n             \"{0} has no attribute '{1}'\".format(\n                 type(self).__name__, name),\n-            path_to_item\n+            [e for e in [self._path_to_item, name] if e]\n         )\n \n-    def __getattr__(self, name):\n+    __unset_attribute_value__ = object()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b25c9eaa54d99cb192bbbc7df196e64308214b5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4NTYyOA==", "bodyText": "well, somebody could concievably set an attribute to object value, __unset_attribute_value__ will generate unique object only once per class, so i'm not worried about performance here", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7784#discussion_r510985628", "createdAt": "2020-10-23T16:01:04Z", "author": {"login": "keymone"}, "path": "modules/openapi-generator/src/main/resources/python/python-experimental/model_templates/methods_setattr_getattr_composed.mustache", "diffHunk": "@@ -20,28 +20,22 @@\n                     )\n             return None\n \n-        path_to_item = []\n-        if self._path_to_item:\n-            path_to_item.extend(self._path_to_item)\n-        path_to_item.append(name)\n         raise ApiAttributeError(\n             \"{0} has no attribute '{1}'\".format(\n                 type(self).__name__, name),\n-            path_to_item\n+            [e for e in [self._path_to_item, name] if e]\n         )\n \n-    def __getattr__(self, name):\n+    __unset_attribute_value__ = object()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzOTkxMQ=="}, "originalCommit": {"oid": "1b25c9eaa54d99cb192bbbc7df196e64308214b5"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4123, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}