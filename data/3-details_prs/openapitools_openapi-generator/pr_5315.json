{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTUxODQ5", "number": 5315, "title": "[python] add method to set/get default configuration", "bodyText": "As a follow up the discussion #4485 (comment) I'd like to recovery an option to set default configuration. I prepared very simple solution which provides the same API as we had before.\nThanks for reviewing it.\n\nPR checklist\n\n Read the contribution guidelines.\n If contributing template-only or documentation-only changes which will change sample output, build the project before.\n Run the shell script(s) under ./bin/ (or Windows batch scripts under.\\bin\\windows) to update Petstore samples related to your fix. This is important, as CI jobs will verify all generator outputs of your HEAD commit, and these must match the expectations made by your contribution. You only need to run ./bin/{LANG}-petstore.sh, ./bin/openapi3/{LANG}-petstore.sh if updating the code or mustache templates for a language ({LANG}) (e.g. php, ruby, python, etc).\n File the PR against the correct branch: master, 4.3.x, 5.0.x. Default: master.\n Copy the technical committee to review the pull request if your PR is targeting a particular programming language.\n\n@taxpon (2017/07) @frol (2017/07) @mbohlool (2017/07) @cbornet (2017/09) @kenjones-cisco (2017/11) @tomplus (2018/10) @Jyhess (2019/01) @slash-arun (2019/11) @spacether (2019/11)", "createdAt": "2020-02-14T00:17:11Z", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315", "merged": true, "mergeCommit": {"oid": "3f0c163f0cdac2070b542b3e1239aea76a3cf49e"}, "closed": true, "closedAt": "2020-02-23T20:10:45Z", "author": {"login": "tomplus"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEYLF6gBqjMwNDA0MzE5NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHOr_EAFqTM2MzExODkzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eae7d7a7f5f13c98e62b63e8b2ef75d79946c3ae", "author": {"user": {"login": "tomplus", "name": "Tomasz Prus"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/eae7d7a7f5f13c98e62b63e8b2ef75d79946c3ae", "committedDate": "2020-02-14T22:25:37Z", "message": "[python] update samples"}, "afterCommit": {"oid": "e4c6e2ba90c9d367df8ff210613ccdadaeda9c73", "author": {"user": {"login": "tomplus", "name": "Tomasz Prus"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/e4c6e2ba90c9d367df8ff210613ccdadaeda9c73", "committedDate": "2020-02-14T23:31:28Z", "message": "[python] add method to set/get default configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjkxNDMw", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#pullrequestreview-359291430", "createdAt": "2020-02-15T01:08:34Z", "commit": {"oid": "eae7d7a7f5f13c98e62b63e8b2ef75d79946c3ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMTowOToxOFrOFqHXfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMTowOToxOFrOFqHXfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNTIxNQ==", "bodyText": "Why copy it vs just returning the instance?\nThe CI tests are failing when trying to deepcopy the logger.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r379705215", "createdAt": "2020-02-15T01:09:18Z", "author": {"login": "spacether"}, "path": "samples/openapi3/client/petstore/python/petstore_api/configuration.py", "diffHunk": "@@ -169,6 +172,31 @@ def __init__(self, host=\"http://petstore.swagger.io:80/v2\",\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    @classmethod\n+    def set_default(cls, default):\n+        \"\"\"Set default instance of configuration.\n+\n+        It stores default configuration, which can be\n+        returned by get_instance method.\n+\n+        :param default: object of Configuration\n+        \"\"\"\n+        cls._default = copy.copy(default)\n+\n+    @classmethod\n+    def get_instance(cls):\n+        \"\"\"Return new instance of configuration.\n+\n+        This method returns newly created, based on default constructor,\n+        object of Configuration class or returns a copy of default\n+        configuration passed by the set_default method.\n+\n+        :return: The configuration object.\n+        \"\"\"\n+        if cls._default is not None:\n+            return copy.copy(cls._default)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c6e2ba90c9d367df8ff210613ccdadaeda9c73"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70a585471e4d5f12233d68afc5b00b0be62376b9", "author": {"user": {"login": "tomplus", "name": "Tomasz Prus"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/70a585471e4d5f12233d68afc5b00b0be62376b9", "committedDate": "2020-02-16T00:00:12Z", "message": "[python] add method to set/get default configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "867e860adddc198195c5032082e6f79c7e82fd54", "author": {"user": {"login": "tomplus", "name": "Tomasz Prus"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/867e860adddc198195c5032082e6f79c7e82fd54", "committedDate": "2020-02-15T22:32:36Z", "message": "Regenerate python-experimental."}, "afterCommit": {"oid": "70a585471e4d5f12233d68afc5b00b0be62376b9", "author": {"user": {"login": "tomplus", "name": "Tomasz Prus"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/70a585471e4d5f12233d68afc5b00b0be62376b9", "committedDate": "2020-02-16T00:00:12Z", "message": "[python] add method to set/get default configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzczMjEz", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#pullrequestreview-359373213", "createdAt": "2020-02-16T00:25:21Z", "commit": {"oid": "70a585471e4d5f12233d68afc5b00b0be62376b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDoyNToyMVrOFqRJlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQwMDoyNToyMVrOFqRJlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTQ5Mw==", "bodyText": "Can you also add a test that verifies that the\ncontents of the api_key and api_key_prefix dicts are the same but that their ids are different?\nOr will they be the same because of the shallow copy?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r379865493", "createdAt": "2020-02-16T00:25:21Z", "author": {"login": "spacether"}, "path": "samples/client/petstore/python/tests/test_configuration.py", "diffHunk": "@@ -22,14 +22,25 @@ def setUp(self):\n         pass\n \n     def tearDown(self):\n-        pass\n+        # reset Configuration\n+        petstore_api.Configuration.set_default(None)\n \n     def testConfiguration(self):\n         # check that different instances use different dictionaries\n         c1 = petstore_api.Configuration()\n         c2 = petstore_api.Configuration()\n-        assert id(c1.api_key) != id(c2.api_key)\n-        assert id(c1.api_key_prefix) != id(c2.api_key_prefix)\n+        self.assertNotEqual(id(c1.api_key), id(c2.api_key))\n+        self.assertNotEqual(id(c1.api_key_prefix), id(c2.api_key_prefix))\n+\n+    def testDefaultConfiguration(self):\n+\n+        # prepare default configuration\n+        c1 = petstore_api.Configuration(host=\"example.com\")\n+        petstore_api.Configuration.set_default(c1)\n+\n+        # get default configuration\n+        c2 = petstore_api.Configuration.get_instance()\n+        self.assertEqual(c2.host, \"example.com\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70a585471e4d5f12233d68afc5b00b0be62376b9"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a4c72628af6e3ebb9bcbb88d49e485fea0326dd", "author": {"user": {"login": "tomplus", "name": "Tomasz Prus"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/2a4c72628af6e3ebb9bcbb88d49e485fea0326dd", "committedDate": "2020-02-21T23:59:26Z", "message": "[python] change method name and fix handling api_key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTg5Mzk2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#pullrequestreview-362989396", "createdAt": "2020-02-22T00:30:09Z", "commit": {"oid": "2a4c72628af6e3ebb9bcbb88d49e485fea0326dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDozMDowOVrOFtIN7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDozMDowOVrOFtIN7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2NDg3OA==", "bodyText": "How about changing this to:\n__deepcopy__(self, memodict={})\nThat way you control how everything can be copied. For the logger only you can then make a new logger with the same properties as the old one. All other properties can be deep copied. You can use dir(self) or self.__dict__ to iterate over all of self's properties.\nIf you do it this way, then in new_instance you can return copy.deepcopy(cls._default)", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r382864878", "createdAt": "2020-02-22T00:30:09Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -241,6 +244,40 @@ class Configuration(object):\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    @classmethod\n+    def copy(cls, source):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a4c72628af6e3ebb9bcbb88d49e485fea0326dd"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be04fb9a0fd1d1f5bb61ebf9272fb2cb6f0162e9", "author": {"user": {"login": "tomplus", "name": "Tomasz Prus"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/be04fb9a0fd1d1f5bb61ebf9272fb2cb6f0162e9", "committedDate": "2020-02-22T23:20:42Z", "message": "python: using modified deepcopy to set/get default configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f99b59a16d90004e13315a9429aae8964a0d8d6b", "author": {"user": {"login": "tomplus", "name": "Tomasz Prus"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/f99b59a16d90004e13315a9429aae8964a0d8d6b", "committedDate": "2020-02-23T09:29:38Z", "message": "python: update samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6bd708964bb243e3e9a9df87f70be96ebd75a34", "author": {"user": {"login": "tomplus", "name": "Tomasz Prus"}}, "url": "https://github.com/OpenAPITools/openapi-generator/commit/f6bd708964bb243e3e9a9df87f70be96ebd75a34", "committedDate": "2020-02-23T18:40:52Z", "message": "python: update samples"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDU3MDA0", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#pullrequestreview-363057004", "createdAt": "2020-02-22T23:46:28Z", "commit": {"oid": "be04fb9a0fd1d1f5bb61ebf9272fb2cb6f0162e9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzo0NjoyOFrOFtNcEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQyMzo0OToxNVrOFtNciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1MDQxOQ==", "bodyText": "How about returning None if the default copy is not present?\nThen we can do truthy/none checks with the result.\nThis lets our users see and handle the case when a default is unset.\nOr if we want to always return an instance how about naming it\ndefault_copy_or_new_instance?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r382950419", "createdAt": "2020-02-22T23:46:28Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/configuration.mustache", "diffHunk": "@@ -241,6 +244,45 @@ class Configuration(object):\n         # Disable client side validation\n         self.client_side_validation = True\n \n+    def __deepcopy__(self, memo):\n+        cls = self.__class__\n+        result = cls.__new__(cls)\n+        memo[id(self)] = result\n+        for k, v in self.__dict__.items():\n+            if k not in ('logger', 'logger_file_handler'):\n+                setattr(result, k, copy.deepcopy(v, memo))\n+        # shallow copy of loggers\n+        result.logger = copy.copy(self.logger)\n+        # use setters to configure loggers\n+        result.logger_file = self.logger_file\n+        result.debug = self.debug\n+        return result\n+\n+    @classmethod\n+    def set_default(cls, default):\n+        \"\"\"Set default instance of configuration.\n+\n+        It stores default configuration, which can be\n+        returned by get_default_copy method.\n+\n+        :param default: object of Configuration\n+        \"\"\"\n+        cls._default = copy.deepcopy(default)\n+\n+    @classmethod\n+    def get_default_copy(cls):\n+        \"\"\"Return new instance of configuration.\n+\n+        This method returns newly created, based on default constructor,\n+        object of Configuration class or returns a copy of default\n+        configuration passed by the set_default method.\n+\n+        :return: The configuration object.\n+        \"\"\"\n+        if cls._default is not None:\n+            return copy.deepcopy(cls._default)\n+        return Configuration()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be04fb9a0fd1d1f5bb61ebf9272fb2cb6f0162e9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1MDUzOQ==", "bodyText": "How about?\ndefault_copy = Configuration.get_default_copy()\nconfiguration = Configuration() if default_copy is None else default_copy", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#discussion_r382950539", "createdAt": "2020-02-22T23:49:15Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/resources/python/api_client.mustache", "diffHunk": "@@ -63,7 +63,7 @@ class ApiClient(object):\n     def __init__(self, configuration=None, header_name=None, header_value=None,\n                  cookie=None, pool_threads=1):\n         if configuration is None:\n-            configuration = Configuration()\n+            configuration = Configuration.get_default_copy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be04fb9a0fd1d1f5bb61ebf9272fb2cb6f0162e9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTE4OTM2", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5315#pullrequestreview-363118936", "createdAt": "2020-02-23T20:10:16Z", "commit": {"oid": "f6bd708964bb243e3e9a9df87f70be96ebd75a34"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2792, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}