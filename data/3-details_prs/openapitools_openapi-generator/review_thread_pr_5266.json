{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjkzMDQ2", "number": 5266, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTowMzo1MFrODemuyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoxNTo1OFrODezFIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDE4NDQzOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptFetchClientCodegen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTowMzo1MFrOFn1ezg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTowMzo1MFrOFn1ezg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNTAyMg==", "bodyText": "is this variable used?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5266#discussion_r377315022", "createdAt": "2020-02-10T21:03:50Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptFetchClientCodegen.java", "diffHunk": "@@ -134,14 +134,15 @@ public void processOpts() {\n \n     @Override\n     public String getTypeDeclaration(Schema p) {\n+        String oasType = getSchemaType(p);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8e05db2dcc1458eaf7814641166e7190b78fa2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIwNjU5OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptFetchClientCodegen.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxMToyMVrOFn1skA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoxMTozNlrOFoAAGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxODU0NA==", "bodyText": "I don't think there is a need to have custom type mapping for datetime here at all - because AbstractTsClient already includes it into its typeMappings map. That's why it's not a problem for the TsAngularClient, which doesn't define any specific mapping for DateTime at all, and it still works.\nSo we could just remove it from the child TS generators and rely on the abstract one\nAny thoughts?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5266#discussion_r377318544", "createdAt": "2020-02-10T21:11:21Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptFetchClientCodegen.java", "diffHunk": "@@ -134,14 +134,15 @@ public void processOpts() {\n \n     @Override\n     public String getTypeDeclaration(Schema p) {\n+        String oasType = getSchemaType(p);\n         if (ModelUtils.isFileSchema(p)) {\n             return \"Blob\";\n         } else if (ModelUtils.isBinarySchema(p)) {\n             return \"Blob\";\n         } else if (ModelUtils.isDateSchema(p)) {\n-            return \"Date\";\n+            return typeMapping.containsKey(\"Date\") ? typeMapping.get(\"Date\") : \"Date\";\n         } else if (ModelUtils.isDateTimeSchema(p)) {\n-            return \"Date\";\n+            return typeMapping.containsKey(\"Date\") ? typeMapping.get(\"Date\") : \"Date\";\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8e05db2dcc1458eaf7814641166e7190b78fa2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzODgyNg==", "bodyText": "The custom mapping was apparently introduced in 1e023f3 to fix a bug where someone expected the default type for date to be Date.\nI agree that it seems a bit weird and that changing the defaults is exactly what type-mappings is for. Is it reasonable to change the (now) default behavior for date back to string?", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5266#discussion_r377338826", "createdAt": "2020-02-10T21:53:24Z", "author": {"login": "asmundg"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptFetchClientCodegen.java", "diffHunk": "@@ -134,14 +134,15 @@ public void processOpts() {\n \n     @Override\n     public String getTypeDeclaration(Schema p) {\n+        String oasType = getSchemaType(p);\n         if (ModelUtils.isFileSchema(p)) {\n             return \"Blob\";\n         } else if (ModelUtils.isBinarySchema(p)) {\n             return \"Blob\";\n         } else if (ModelUtils.isDateSchema(p)) {\n-            return \"Date\";\n+            return typeMapping.containsKey(\"Date\") ? typeMapping.get(\"Date\") : \"Date\";\n         } else if (ModelUtils.isDateTimeSchema(p)) {\n-            return \"Date\";\n+            return typeMapping.containsKey(\"Date\") ? typeMapping.get(\"Date\") : \"Date\";\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxODU0NA=="}, "originalCommit": {"oid": "be8e05db2dcc1458eaf7814641166e7190b78fa2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NzI3Ng==", "bodyText": "There are a few things going on here:\n\nAbstract TS client has default mapping for date and DateTime (latter maps to typescript Date object - by mistake)\nTsFetch client doesn't define its own mappings, but redefines getTypeDeclaration in a way that it's always Date.\nTsFetch client also defines some runtime logic in the generated TS code to actually instantiate Date objects from the strings. So does TsReduxQuery.\nTsRxjs client doesn't generate any mapping code, so Date type in the interfaces is simply incorrect there again.\n\nBased on the above, TsFetch's usage of Date object is legit - because the generated code indeed converts raw http data to and from Date. (the same also true for TsReduxQuery).\nThe only reason for a user to change this default behavior is if they have custom templates (proivided via --template-dir), which do not do any Date serialization, in contrast to built-in templates.\nI can imagine the following solution:\n\nAll child TS clients rely on AbstractTs's protected typeMappings. Furthermore, we want to make sure it maps DateTime to string, as it already does for date.\nSome child TS clients (fetch, redux-query) should override those typeMappings - not via custom Java code, but via the same protected typeMappings.\nIf a user has special needs (because they use custom mustache templates), they provide custom mappings typeMappings via --type-mappings option, which takes precedence over values populated in the codegen constructor.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5266#discussion_r377357276", "createdAt": "2020-02-10T22:33:03Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptFetchClientCodegen.java", "diffHunk": "@@ -134,14 +134,15 @@ public void processOpts() {\n \n     @Override\n     public String getTypeDeclaration(Schema p) {\n+        String oasType = getSchemaType(p);\n         if (ModelUtils.isFileSchema(p)) {\n             return \"Blob\";\n         } else if (ModelUtils.isBinarySchema(p)) {\n             return \"Blob\";\n         } else if (ModelUtils.isDateSchema(p)) {\n-            return \"Date\";\n+            return typeMapping.containsKey(\"Date\") ? typeMapping.get(\"Date\") : \"Date\";\n         } else if (ModelUtils.isDateTimeSchema(p)) {\n-            return \"Date\";\n+            return typeMapping.containsKey(\"Date\") ? typeMapping.get(\"Date\") : \"Date\";\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxODU0NA=="}, "originalCommit": {"oid": "be8e05db2dcc1458eaf7814641166e7190b78fa2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NzM4NA==", "bodyText": "Right, that sounds sensible.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5266#discussion_r377487384", "createdAt": "2020-02-11T08:11:36Z", "author": {"login": "asmundg"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptFetchClientCodegen.java", "diffHunk": "@@ -134,14 +134,15 @@ public void processOpts() {\n \n     @Override\n     public String getTypeDeclaration(Schema p) {\n+        String oasType = getSchemaType(p);\n         if (ModelUtils.isFileSchema(p)) {\n             return \"Blob\";\n         } else if (ModelUtils.isBinarySchema(p)) {\n             return \"Blob\";\n         } else if (ModelUtils.isDateSchema(p)) {\n-            return \"Date\";\n+            return typeMapping.containsKey(\"Date\") ? typeMapping.get(\"Date\") : \"Date\";\n         } else if (ModelUtils.isDateTimeSchema(p)) {\n-            return \"Date\";\n+            return typeMapping.containsKey(\"Date\") ? typeMapping.get(\"Date\") : \"Date\";\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxODU0NA=="}, "originalCommit": {"oid": "be8e05db2dcc1458eaf7814641166e7190b78fa2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIxNTM4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptFetchClientCodegen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNDoxMlrOFn1x0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNDoxMlrOFn1x0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxOTg4OQ==", "bodyText": "not sure this is correct.\nAccording to DefaultCodegen#getPrimitiveType() implementation, \"Date\" is not a valid primitive type. Instead, \"date\" is (more precisely, SchemaTypeUtil.DATE_FORMAT).\nAgain, the AbstractTsClient already includes a reasonable mapping for it (maps to \"string\": typeMapping.put(\"date\", \"string\");). So having it in the child TS codegens seems redundant", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5266#discussion_r377319889", "createdAt": "2020-02-10T21:14:12Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptFetchClientCodegen.java", "diffHunk": "@@ -134,14 +134,15 @@ public void processOpts() {\n \n     @Override\n     public String getTypeDeclaration(Schema p) {\n+        String oasType = getSchemaType(p);\n         if (ModelUtils.isFileSchema(p)) {\n             return \"Blob\";\n         } else if (ModelUtils.isBinarySchema(p)) {\n             return \"Blob\";\n         } else if (ModelUtils.isDateSchema(p)) {\n-            return \"Date\";\n+            return typeMapping.containsKey(\"Date\") ? typeMapping.get(\"Date\") : \"Date\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8e05db2dcc1458eaf7814641166e7190b78fa2"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTM5MDY0OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/fetch/TypeScriptFetchModelTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODo0MzozNFrOFoAurg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODo0MzozNFrOFoAurg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5OTMxMA==", "bodyText": "this should be Date, since typescript-fetch implements date deserialization:\nhttps://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/typescript-fetch/modelGeneric.mustache#L66", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5266#discussion_r377499310", "createdAt": "2020-02-11T08:43:34Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/typescript/fetch/TypeScriptFetchModelTest.java", "diffHunk": "@@ -95,7 +95,7 @@ public void simpleModelTest() {\n         final CodegenProperty property4 = cm.vars.get(3);\n         Assert.assertEquals(property4.baseName, \"birthDate\");\n         Assert.assertEquals(property4.complexType, null);\n-        Assert.assertEquals(property4.dataType, \"Date\");\n+        Assert.assertEquals(property4.dataType, \"string\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f446eec0ab2b75a12eae1f77aa0c956f20404ad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjIwNzcwOnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptAngularClientCodegen.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoxNTo1OFrOFoIeHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTowNTozNlrOFome5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyNjE0MQ==", "bodyText": "I think it would be good to remove this, i.e. to change the mapping from Date to string for format: date-time, since the typescript-angular generator does not support serialization for the models.\nNote: this would pose a problem, since serialization for query params is implemented, see e.g. #5225", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5266#discussion_r377626141", "createdAt": "2020-02-11T13:15:58Z", "author": {"login": "macjohnny"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptAngularClientCodegen.java", "diffHunk": "@@ -86,6 +86,8 @@ public TypeScriptAngularClientCodegen() {\n         apiPackage = \"api\";\n         modelPackage = \"model\";\n \n+        typeMapping.put(\"DateTime\", \"Date\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317a3a49492215053212cc643b2b8db2cafb9364"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2OTIxMg==", "bodyText": "Right, it was unclear to me whether de-serialization was supported for angular. And it would require changing the unit tests.\nI'm tempted to just keep the current behavior and punt on \"fixing\" it for angular.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5266#discussion_r377669212", "createdAt": "2020-02-11T14:31:13Z", "author": {"login": "asmundg"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptAngularClientCodegen.java", "diffHunk": "@@ -86,6 +86,8 @@ public TypeScriptAngularClientCodegen() {\n         apiPackage = \"api\";\n         modelPackage = \"model\";\n \n+        typeMapping.put(\"DateTime\", \"Date\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyNjE0MQ=="}, "originalCommit": {"oid": "317a3a49492215053212cc643b2b8db2cafb9364"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc1OTYyMQ==", "bodyText": "@macjohnny we can remove it separately (for angular and other generators except fetch/reduxquery), since it might break existing behavior for current users", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5266#discussion_r377759621", "createdAt": "2020-02-11T16:46:12Z", "author": {"login": "amakhrov"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptAngularClientCodegen.java", "diffHunk": "@@ -86,6 +86,8 @@ public TypeScriptAngularClientCodegen() {\n         apiPackage = \"api\";\n         modelPackage = \"model\";\n \n+        typeMapping.put(\"DateTime\", \"Date\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyNjE0MQ=="}, "originalCommit": {"oid": "317a3a49492215053212cc643b2b8db2cafb9364"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNzg2Mw==", "bodyText": "Ok, I updated the rest of the generators to keep the output consistent.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/5266#discussion_r378117863", "createdAt": "2020-02-12T09:05:36Z", "author": {"login": "asmundg"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/TypeScriptAngularClientCodegen.java", "diffHunk": "@@ -86,6 +86,8 @@ public TypeScriptAngularClientCodegen() {\n         apiPackage = \"api\";\n         modelPackage = \"model\";\n \n+        typeMapping.put(\"DateTime\", \"Date\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyNjE0MQ=="}, "originalCommit": {"oid": "317a3a49492215053212cc643b2b8db2cafb9364"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3791, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}