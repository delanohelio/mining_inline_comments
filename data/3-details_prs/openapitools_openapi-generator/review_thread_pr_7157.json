{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0Mzc4NjA3", "number": 7157, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjozNDoyMlrOEWGJFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToxMTo0NFrOEZFmfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjA0NzU3OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjozNDoyM1rOG9OKhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjozNDoyM1rOG9OKhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0ODM4OA==", "bodyText": "That's a special case we added a while ago for type:string, format:number to map the type into BigDecimal in Java as format: double or format:float of type:number have been mapped accordingly. PM me if you need more info.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7157#discussion_r466848388", "createdAt": "2020-08-07T06:34:23Z", "author": {"login": "wing328"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -1106,71 +1119,432 @@ protected void addAdditionPropertiesToCodeGenModel(CodegenModel codegenModel, Sc\n         // to false, i.e. no additional properties are allowed.\n     }\n \n+    protected String toExampleValueBase(Schema schema) {\n+        if (schema.getExample() != null) {\n+            return schema.getExample().toString();\n+        }\n+\n+        return toDefaultValue(schema);\n+    }\n+\n     @Override\n-    public void setParameterExampleValue(CodegenParameter p) {\n-        // we have a custom version of this function so we can set the file\n-        // type example value\n-        String example;\n+    public String toExampleValue(Schema schema) {\n+        return toExampleValueRecursive(schema, new ArrayList<String>(), 1, \"\", 0);\n+    }\n \n-        if (p.defaultValue == null) {\n-            example = p.example;\n+    private String toExampleValueRecursive(Schema schema, List<String> included_schemas, int indentationLevel, String prefix, Integer exampleLine) {\n+        final String indentionConst = \"    \";\n+        String currentIndentation = \"\";\n+        String closingIndentation = \"\";\n+        for (int i=0 ; i < indentationLevel ; i++) currentIndentation += indentionConst;\n+        String example = toExampleValueBase(schema);\n+        if (exampleLine.equals(0)) {\n+            closingIndentation = currentIndentation;\n+            currentIndentation = \"\";\n         } else {\n-            p.example = p.defaultValue;\n-            return;\n+            closingIndentation = currentIndentation;\n+        }\n+        String fullPrefix = currentIndentation + prefix;\n+\n+        if (ModelUtils.isNullType(schema) && null != example) {\n+            // The 'null' type is allowed in OAS 3.1 and above. It is not supported by OAS 3.0.x,\n+            // though this tooling supports it.\n+            return fullPrefix + \"None\";\n+        }\n+        // correct \"true\"s into \"True\"s, since super.toExampleValue uses \"toString()\" on Java booleans\n+        if (ModelUtils.isBooleanSchema(schema) && null!=example) {\n+            if (\"false\".equalsIgnoreCase(example)) {\n+                example = \"False\";\n+            } else {\n+                example = \"True\";\n+            }\n         }\n \n-        String type = p.baseType;\n-        if (type == null) {\n-            type = p.dataType;\n+        // correct \"&#39;\"s into \"'\"s after toString()\n+        if (ModelUtils.isStringSchema(schema) && schema.getDefault() != null && !ModelUtils.isDateSchema(schema) && !ModelUtils.isDateTimeSchema(schema)) {\n+            example = (String) schema.getDefault();\n         }\n \n-        if (\"String\".equalsIgnoreCase(type) || \"str\".equalsIgnoreCase(type)) {\n-            if (example == null) {\n-                example = p.paramName + \"_example\";\n+        if (StringUtils.isNotBlank(example) && !\"null\".equals(example)) {\n+            if (ModelUtils.isStringSchema(schema)) {\n+                example = \"'\" + example + \"'\";\n+            }\n+            return fullPrefix + example;\n+        }\n+\n+        if (schema.getEnum() != null && !schema.getEnum().isEmpty()) {\n+            // Enum case:\n+            example = schema.getEnum().get(0).toString();\n+            if (ModelUtils.isStringSchema(schema)) {\n+                example = \"'\" + escapeText(example) + \"'\";\n+            }\n+            if (null == example)\n+                LOGGER.warn(\"Empty enum. Cannot built an example!\");\n+\n+            return fullPrefix + example;\n+        } else if (null != schema.get$ref()) {\n+            // $ref case:\n+            Map<String, Schema> allDefinitions = ModelUtils.getSchemas(this.openAPI);\n+            String ref = ModelUtils.getSimpleRef(schema.get$ref());\n+            if (allDefinitions != null) {\n+                Schema refSchema = allDefinitions.get(ref);\n+                if (null == refSchema) {\n+                    return fullPrefix + \"None\";\n+                } else {\n+                    String refTitle = refSchema.getTitle();\n+                    if (StringUtils.isBlank(refTitle) || \"null\".equals(refTitle)) {\n+                        refSchema.setTitle(ref);\n+                    }\n+                    if (StringUtils.isNotBlank(schema.getTitle()) && !\"null\".equals(schema.getTitle())) {\n+                        included_schemas.add(schema.getTitle());\n+                    }\n+                    return toExampleValueRecursive(refSchema, included_schemas, indentationLevel, prefix, exampleLine);\n+                }\n+            } else {\n+                LOGGER.warn(\"allDefinitions not defined in toExampleValue!\\n\");\n+            }\n+        }\n+        if (ModelUtils.isDateSchema(schema)) {\n+            example = \"datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()\";\n+            return fullPrefix + example;\n+        } else if (ModelUtils.isDateTimeSchema(schema)) {\n+            example = \"datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')\";\n+            return fullPrefix + example;\n+        } else if (ModelUtils.isBinarySchema(schema)) {\n+            example = \"open('/path/to/file', 'rb')\";\n+            return fullPrefix + example;\n+        } else if (ModelUtils.isByteArraySchema(schema)) {\n+            example = \"'YQ=='\";\n+            return fullPrefix + example;\n+        } else if (ModelUtils.isStringSchema(schema)) {\n+            // a BigDecimal:\n+            if (\"Number\".equalsIgnoreCase(schema.getFormat())) {return fullPrefix + \"1\";}\n+            // TODO why is Number handled here?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e548541d35b96b5ca1f64cb80cfa003f969850b0"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzQxNjI4OnYy", "diffSide": "RIGHT", "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToxMTo0NFrOHBs7dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjozNzo0MVrOHBwRog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0Njc0MQ==", "bodyText": "This seems to be the same code as my PR #7220. I've noticed other code generators have similar issues, that's why I put the map in DefaultCodeGenerator.  It would be good if we can either get my PR in then that can be reused for your PR, or even remove this part of the enhancement and when my PR is in, the performance optimization will be applied.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7157#discussion_r471546741", "createdAt": "2020-08-17T15:11:44Z", "author": {"login": "sebastien-rosset"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -37,19 +40,23 @@\n import org.openapitools.codegen.meta.Stability;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import com.github.curiousoddman.rgxgen.RgxGen;\n \n import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import java.time.format.DateTimeFormatter;\n import java.io.File;\n import java.util.*;\n import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n \n+import static org.openapitools.codegen.utils.OnceLogger.once;\n import static org.openapitools.codegen.utils.StringUtils.camelize;\n import static org.openapitools.codegen.utils.StringUtils.underscore;\n \n public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n     private static final Logger LOGGER = LoggerFactory.getLogger(PythonClientExperimentalCodegen.class);\n+    private Map<String, Schema> modelNameToSchema = new HashMap<String, Schema>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79268a3a1140b772232fe891f703eb6bcadc1b2c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMTU3MA==", "bodyText": "Than you for letting me know about your PR\nI will wait for your PR to be landed, and then I will use your code in this one.", "url": "https://github.com/OpenAPITools/openapi-generator/pull/7157#discussion_r471601570", "createdAt": "2020-08-17T16:37:41Z", "author": {"login": "spacether"}, "path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/PythonClientExperimentalCodegen.java", "diffHunk": "@@ -37,19 +40,23 @@\n import org.openapitools.codegen.meta.Stability;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import com.github.curiousoddman.rgxgen.RgxGen;\n \n import java.time.OffsetDateTime;\n import java.time.ZoneOffset;\n import java.time.format.DateTimeFormatter;\n import java.io.File;\n import java.util.*;\n import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n \n+import static org.openapitools.codegen.utils.OnceLogger.once;\n import static org.openapitools.codegen.utils.StringUtils.camelize;\n import static org.openapitools.codegen.utils.StringUtils.underscore;\n \n public class PythonClientExperimentalCodegen extends PythonClientCodegen {\n     private static final Logger LOGGER = LoggerFactory.getLogger(PythonClientExperimentalCodegen.class);\n+    private Map<String, Schema> modelNameToSchema = new HashMap<String, Schema>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU0Njc0MQ=="}, "originalCommit": {"oid": "79268a3a1140b772232fe891f703eb6bcadc1b2c"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4277, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}