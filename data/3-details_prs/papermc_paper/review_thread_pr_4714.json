{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTY1MDE1", "number": 4714, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDo0ODo1NVrOE0IglA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxOTowNzo0MFrOE0LHpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTAwODIwOnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0288-Implement-furnace-cook-speed-multiplier-API.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDo0ODo1NVrOHruFrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDo0ODo1NVrOHruFrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwNTkzNA==", "bodyText": "unnecessary new line", "url": "https://github.com/PaperMC/Paper/pull/4714#discussion_r515605934", "createdAt": "2020-11-01T10:48:55Z", "author": {"login": "MiniDigger"}, "path": "Spigot-Server-Patches/0288-Implement-furnace-cook-speed-multiplier-API.patch", "diffHunk": "@@ -5,27 +5,51 @@ Subject: [PATCH] Implement furnace cook speed multiplier API\n \n Signed-off-by: Tassu <git@tassu.me>\n \n+Fixed an issue where a furnace's cook-speed multiplier rounds down\n+to the nearest Integer when updating its current cook time.\n+\n+Instead of incrementing the cookTime counter by the current cookSpeedMultiplier (which is causing \n+the loss in precision issue due to double -> integer casting), I have instead modified an internal function,\n+getRecipeCookingTime(), to scale the total cooking time of the current item to the current cookSpeedMultiplier.\n+\n+This is done through dividing the total cook time of the item by the set multiplier, and taking the ceiling\n+of the final output (ceiling is used here to replicate the behavior of this previous patch, otherwise items smelted\n+in furnaces with odd multipliers will finish cooking at least 1 tick earlier).\n+\n+I also changed the access modifier for the getRecipeCookingTime() function to public, as it allows\n+the setCookSpeedMultiplier API call to immediately adjust the current cooking time to the newly set multiplier.\n+Please let me know if this is a safe change or not.\n+\n+This patch is tested by a small test plugin that I wrote yesterday. I can confirm that it works for\n+all blast furnaces, smokers, and normal furnaces!\n+\n+This plugin can be found at:\n+https://github.com/ericsu14/furnacetest\n+\n+Modified by: Eric Su <ericsu@alumni.usc.edu>\n+\n diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java\n-index 99b20fa5feff0f766124d4ec9474852e33e329f2..1d3c2dd93657fb5dc71ee6b444c585b54619d1e8 100644\n+index 99b20fa5feff0f766124d4ec9474852e33e329f2..ac098e9005bf491b40d988512b19da2c1a8cfb1a 100644\n --- a/src/main/java/net/minecraft/server/TileEntityFurnace.java\n +++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java\n-@@ -10,6 +10,7 @@ import java.util.List;\n+@@ -10,6 +10,8 @@ import java.util.List;\n  import java.util.Map;\n  import javax.annotation.Nullable;\n  // CraftBukkit start\n +import java.util.List;\n++", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33766c4524285ddf9b80045abf78ce0fabcd2368"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTAxMDQ0OnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0288-Implement-furnace-cook-speed-multiplier-API.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDo1MToxM1rOHruGwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMDo1MToxM1rOHruGwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYwNjIxMA==", "bodyText": "I would probably cut down this patch a bit, the test plugin isn't necessary to be mentioned here", "url": "https://github.com/PaperMC/Paper/pull/4714#discussion_r515606210", "createdAt": "2020-11-01T10:51:13Z", "author": {"login": "MiniDigger"}, "path": "Spigot-Server-Patches/0288-Implement-furnace-cook-speed-multiplier-API.patch", "diffHunk": "@@ -5,27 +5,51 @@ Subject: [PATCH] Implement furnace cook speed multiplier API\n \n Signed-off-by: Tassu <git@tassu.me>\n \n+Fixed an issue where a furnace's cook-speed multiplier rounds down\n+to the nearest Integer when updating its current cook time.\n+\n+Instead of incrementing the cookTime counter by the current cookSpeedMultiplier (which is causing \n+the loss in precision issue due to double -> integer casting), I have instead modified an internal function,\n+getRecipeCookingTime(), to scale the total cooking time of the current item to the current cookSpeedMultiplier.\n+\n+This is done through dividing the total cook time of the item by the set multiplier, and taking the ceiling\n+of the final output (ceiling is used here to replicate the behavior of this previous patch, otherwise items smelted\n+in furnaces with odd multipliers will finish cooking at least 1 tick earlier).\n+\n+I also changed the access modifier for the getRecipeCookingTime() function to public, as it allows\n+the setCookSpeedMultiplier API call to immediately adjust the current cooking time to the newly set multiplier.\n+Please let me know if this is a safe change or not.\n+\n+This patch is tested by a small test plugin that I wrote yesterday. I can confirm that it works for\n+all blast furnaces, smokers, and normal furnaces!\n+\n+This plugin can be found at:\n+https://github.com/ericsu14/furnacetest\n+\n+Modified by: Eric Su <ericsu@alumni.usc.edu>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33766c4524285ddf9b80045abf78ce0fabcd2368"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTQzNTg5OnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0288-Implement-furnace-cook-speed-multiplier-API.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxOTowNzo0MFrOHrxWCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMzo0NzowMVrOHrzNBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1OTI3NQ==", "bodyText": "Prefer int here; there is no need in using a boxed value here.", "url": "https://github.com/PaperMC/Paper/pull/4714#discussion_r515659275", "createdAt": "2020-11-01T19:07:40Z", "author": {"login": "Proximyst"}, "path": "Spigot-Server-Patches/0288-Implement-furnace-cook-speed-multiplier-API.patch", "diffHunk": "@@ -45,25 +50,39 @@ index 99b20fa5feff0f766124d4ec9474852e33e329f2..1d3c2dd93657fb5dc71ee6b444c585b5\n          ContainerUtil.a(nbttagcompound, this.items);\n          NBTTagCompound nbttagcompound1 = new NBTTagCompound();\n  \n-@@ -295,8 +303,8 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I\n-                 }\n+@@ -296,7 +304,7 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I\n  \n                  if (this.isBurning() && this.canBurn(irecipe)) {\n--                    ++this.cookTime;\n+                     ++this.cookTime;\n -                    if (this.cookTime == this.cookTimeTotal) {\n-+                    this.cookTime += cookSpeedMultiplier; // Paper - cook speed multiplier API\n +                    if (this.cookTime >= this.cookTimeTotal) { // Paper - cook speed multiplier API\n                          this.cookTime = 0;\n                          this.cookTimeTotal = this.getRecipeCookingTime();\n                          this.burn(irecipe);\n+@@ -396,9 +404,13 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I\n+         }\n+     }\n+ \n+-    protected int getRecipeCookingTime() {\n+-        return (this.hasWorld()) ? (Integer) this.world.getCraftingManager().craft((Recipes<RecipeCooking>) this.c, this, this.world).map(RecipeCooking::getCookingTime).orElse(200) : 200; // CraftBukkit - SPIGOT-4302 // Eclipse fail\n++    // Paper begin - Expose this function so CraftFurnace can correctly scale the total cooking time to a new multiplier\n++    public int getRecipeCookingTime() {\n++        /* Scale the recipe's cooking time to the current cookSpeedMultiplier */\n++        Integer cookTime = (this.hasWorld()) ? (Integer) this.world.getCraftingManager().craft((Recipes<RecipeCooking>) this.c, this, this.world).map(RecipeCooking::getCookingTime).orElse(200) : 200; // CraftBukkit - SPIGOT-4302 // Eclipse fail", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d8ed96fa831cf4853bab0bc2ebd3b5098c4022"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTczNQ==", "bodyText": "Just changed it to an int in my end! I initially used an Integer wrapper because the original code already casted the current recipe's cook time into an Integer in the first place.", "url": "https://github.com/PaperMC/Paper/pull/4714#discussion_r515689735", "createdAt": "2020-11-01T23:47:01Z", "author": {"login": "ericsu14"}, "path": "Spigot-Server-Patches/0288-Implement-furnace-cook-speed-multiplier-API.patch", "diffHunk": "@@ -45,25 +50,39 @@ index 99b20fa5feff0f766124d4ec9474852e33e329f2..1d3c2dd93657fb5dc71ee6b444c585b5\n          ContainerUtil.a(nbttagcompound, this.items);\n          NBTTagCompound nbttagcompound1 = new NBTTagCompound();\n  \n-@@ -295,8 +303,8 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I\n-                 }\n+@@ -296,7 +304,7 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I\n  \n                  if (this.isBurning() && this.canBurn(irecipe)) {\n--                    ++this.cookTime;\n+                     ++this.cookTime;\n -                    if (this.cookTime == this.cookTimeTotal) {\n-+                    this.cookTime += cookSpeedMultiplier; // Paper - cook speed multiplier API\n +                    if (this.cookTime >= this.cookTimeTotal) { // Paper - cook speed multiplier API\n                          this.cookTime = 0;\n                          this.cookTimeTotal = this.getRecipeCookingTime();\n                          this.burn(irecipe);\n+@@ -396,9 +404,13 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I\n+         }\n+     }\n+ \n+-    protected int getRecipeCookingTime() {\n+-        return (this.hasWorld()) ? (Integer) this.world.getCraftingManager().craft((Recipes<RecipeCooking>) this.c, this, this.world).map(RecipeCooking::getCookingTime).orElse(200) : 200; // CraftBukkit - SPIGOT-4302 // Eclipse fail\n++    // Paper begin - Expose this function so CraftFurnace can correctly scale the total cooking time to a new multiplier\n++    public int getRecipeCookingTime() {\n++        /* Scale the recipe's cooking time to the current cookSpeedMultiplier */\n++        Integer cookTime = (this.hasWorld()) ? (Integer) this.world.getCraftingManager().craft((Recipes<RecipeCooking>) this.c, this, this.world).map(RecipeCooking::getCookingTime).orElse(200) : 200; // CraftBukkit - SPIGOT-4302 // Eclipse fail", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1OTI3NQ=="}, "originalCommit": {"oid": "27d8ed96fa831cf4853bab0bc2ebd3b5098c4022"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1717, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}