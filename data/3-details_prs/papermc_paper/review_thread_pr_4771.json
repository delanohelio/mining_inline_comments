{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxMDc1NzA4", "number": 4771, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMjo0Nzo0OFrOE5ANoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMjo1MDo0MlrOE5AOdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjA3Nzc2OnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0600-Seed-based-feature-search.patch", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMjo0Nzo0OFrOHzOOxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMjo0Nzo0OFrOHzOOxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ3MjU4Mg==", "bodyText": "Shoulda been done sooner", "url": "https://github.com/PaperMC/Paper/pull/4771#discussion_r523472582", "createdAt": "2020-11-14T22:47:48Z", "author": {"login": "electronicboy"}, "path": "Spigot-Server-Patches/0600-Seed-based-feature-search.patch", "diffHunk": "@@ -0,0 +1,97 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Phoenix616 <mail@moep.tv>\n+Date: Mon, 13 Jan 2020 15:40:32 +0100", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f119d596f1e1e0c19c25da6547e8c9a65b0de381"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjA3OTU2OnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0600-Seed-based-feature-search.patch", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMjo1MDowN1rOHzOPlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMjo1MDowN1rOHzOPlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ3Mjc5MQ==", "bodyText": "obfhelpers", "url": "https://github.com/PaperMC/Paper/pull/4771#discussion_r523472791", "createdAt": "2020-11-14T22:50:07Z", "author": {"login": "Proximyst"}, "path": "Spigot-Server-Patches/0600-Seed-based-feature-search.patch", "diffHunk": "@@ -0,0 +1,97 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Phoenix616 <mail@moep.tv>\n+Date: Mon, 13 Jan 2020 15:40:32 +0100\n+Subject: [PATCH] Seed based feature search\n+\n+This tries to work around the issue where the server will load\n+surrounding chunks up to a radius of 100 chunks in order to search for\n+features e.g. when running the /locate command or for treasure maps\n+(issue #2312).\n+This is done by backporting Mojang's change in 1.17 which makes it so\n+that the biome (generated by the seed) is checked first if the feature\n+can be generated before actually to load the chunk.\n+\n+The only downside of this is that it breaks once the seed or generator\n+changes but this should usually not happen. A config option to disable\n+this improvement is added though in case that should ever be necessary.\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n+index 9a0ade5875c34487a65f82f9380f9d25b4432586..ff0e4447b6574e91bf8815de4e04ce881ed7026d 100644\n+--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n++++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n+@@ -331,6 +331,12 @@ public class PaperWorldConfig {\n+         }\n+     }\n+ \n++    public boolean seedBasedFeatureSearch = true;\n++    private void seedBasedFeatureSearch() {\n++        seedBasedFeatureSearch = getBoolean(\"seed-based-feature-search\", seedBasedFeatureSearch);\n++        log(\"Feature search is based on seed: \" + seedBasedFeatureSearch);\n++    }\n++\n+     public int maxCollisionsPerEntity;\n+     private void maxEntityCollision() {\n+         maxCollisionsPerEntity = getInt( \"max-entity-collisions\", this.spigotConfig.getInt(\"max-entity-collisions\", 8) );\n+diff --git a/src/main/java/net/minecraft/server/BiomeManager.java b/src/main/java/net/minecraft/server/BiomeManager.java\n+index 5c992812e0c066109763a30c9399e5b71a335398..fddcd205ee4d841546463913f56f998059cba248 100644\n+--- a/src/main/java/net/minecraft/server/BiomeManager.java\n++++ b/src/main/java/net/minecraft/server/BiomeManager.java\n+@@ -22,6 +22,7 @@ public class BiomeManager {\n+         return new BiomeManager(worldchunkmanager, this.b, this.c);\n+     }\n+ \n++    public BiomeBase getBiome(BlockPosition blockposition) { return a(blockposition); } // Paper - OBFHELPER\n+     public BiomeBase a(BlockPosition blockposition) {\n+         return this.c.a(this.b, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.a);\n+     }\n+diff --git a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n+index dcaf9f8574a9c913b64ba3a1d8b02220db720225..271fddbbf73ca5c0e4e2722d7246c14b778d6072 100644\n+--- a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n++++ b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n+@@ -67,10 +67,12 @@ public class ChunkCoordIntPair {\n+         }\n+     }\n+ \n++    public int getBlockX() { return d(); } // Paper - OBFHELPER\n+     public int d() {\n+         return this.x << 4;\n+     }\n+ \n++    public int getBlockZ() { return e(); } // Paper - OBFHELPER\n+     public int e() {\n+         return this.z << 4;\n+     }\n+diff --git a/src/main/java/net/minecraft/server/StructureGenerator.java b/src/main/java/net/minecraft/server/StructureGenerator.java\n+index c3bd58069d8dbdf36f70f1dafd7c24000f31708b..a62c87bceab2c9700a7b3925f208b0ffa2b9b393 100644\n+--- a/src/main/java/net/minecraft/server/StructureGenerator.java\n++++ b/src/main/java/net/minecraft/server/StructureGenerator.java\n+@@ -143,6 +143,14 @@ public abstract class StructureGenerator<C extends WorldGenFeatureConfiguration>\n+                             int j2 = i1 + k * l1;\n+                             ChunkCoordIntPair chunkcoordintpair = this.a(structuresettingsfeature, j, seededrandom, i2, j2);\n+                             if (!iworldreader.getWorldBorder().isChunkInBounds(chunkcoordintpair.x, chunkcoordintpair.z)) { continue; } // Paper\n++                            // Paper start - seed based feature search\n++                            if (structuremanager.getWorld().paperConfig.seedBasedFeatureSearch) {\n++                                BiomeBase biomeBase = structuremanager.getWorld().getBiomeManager().getBiome(new BlockPosition(chunkcoordintpair.getBlockX() + 9, 0, chunkcoordintpair.getBlockZ() + 9));\n++                                if (!biomeBase.e().a(this)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f119d596f1e1e0c19c25da6547e8c9a65b0de381"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MjA3OTkxOnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0600-Seed-based-feature-search.patch", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMjo1MDo0MlrOHzOPwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQyMjo1MDo0MlrOHzOPwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ3MjgzMg==", "bodyText": "Split this back up into two lines", "url": "https://github.com/PaperMC/Paper/pull/4771#discussion_r523472832", "createdAt": "2020-11-14T22:50:42Z", "author": {"login": "Proximyst"}, "path": "Spigot-Server-Patches/0600-Seed-based-feature-search.patch", "diffHunk": "@@ -0,0 +1,97 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Phoenix616 <mail@moep.tv>\n+Date: Mon, 13 Jan 2020 15:40:32 +0100\n+Subject: [PATCH] Seed based feature search\n+\n+This tries to work around the issue where the server will load\n+surrounding chunks up to a radius of 100 chunks in order to search for\n+features e.g. when running the /locate command or for treasure maps\n+(issue #2312).\n+This is done by backporting Mojang's change in 1.17 which makes it so\n+that the biome (generated by the seed) is checked first if the feature\n+can be generated before actually to load the chunk.\n+\n+The only downside of this is that it breaks once the seed or generator\n+changes but this should usually not happen. A config option to disable\n+this improvement is added though in case that should ever be necessary.\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n+index 9a0ade5875c34487a65f82f9380f9d25b4432586..ff0e4447b6574e91bf8815de4e04ce881ed7026d 100644\n+--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n++++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n+@@ -331,6 +331,12 @@ public class PaperWorldConfig {\n+         }\n+     }\n+ \n++    public boolean seedBasedFeatureSearch = true;\n++    private void seedBasedFeatureSearch() {\n++        seedBasedFeatureSearch = getBoolean(\"seed-based-feature-search\", seedBasedFeatureSearch);\n++        log(\"Feature search is based on seed: \" + seedBasedFeatureSearch);\n++    }\n++\n+     public int maxCollisionsPerEntity;\n+     private void maxEntityCollision() {\n+         maxCollisionsPerEntity = getInt( \"max-entity-collisions\", this.spigotConfig.getInt(\"max-entity-collisions\", 8) );\n+diff --git a/src/main/java/net/minecraft/server/BiomeManager.java b/src/main/java/net/minecraft/server/BiomeManager.java\n+index 5c992812e0c066109763a30c9399e5b71a335398..fddcd205ee4d841546463913f56f998059cba248 100644\n+--- a/src/main/java/net/minecraft/server/BiomeManager.java\n++++ b/src/main/java/net/minecraft/server/BiomeManager.java\n+@@ -22,6 +22,7 @@ public class BiomeManager {\n+         return new BiomeManager(worldchunkmanager, this.b, this.c);\n+     }\n+ \n++    public BiomeBase getBiome(BlockPosition blockposition) { return a(blockposition); } // Paper - OBFHELPER\n+     public BiomeBase a(BlockPosition blockposition) {\n+         return this.c.a(this.b, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.a);\n+     }\n+diff --git a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n+index dcaf9f8574a9c913b64ba3a1d8b02220db720225..271fddbbf73ca5c0e4e2722d7246c14b778d6072 100644\n+--- a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n++++ b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n+@@ -67,10 +67,12 @@ public class ChunkCoordIntPair {\n+         }\n+     }\n+ \n++    public int getBlockX() { return d(); } // Paper - OBFHELPER\n+     public int d() {\n+         return this.x << 4;\n+     }\n+ \n++    public int getBlockZ() { return e(); } // Paper - OBFHELPER\n+     public int e() {\n+         return this.z << 4;\n+     }\n+diff --git a/src/main/java/net/minecraft/server/StructureGenerator.java b/src/main/java/net/minecraft/server/StructureGenerator.java\n+index c3bd58069d8dbdf36f70f1dafd7c24000f31708b..a62c87bceab2c9700a7b3925f208b0ffa2b9b393 100644\n+--- a/src/main/java/net/minecraft/server/StructureGenerator.java\n++++ b/src/main/java/net/minecraft/server/StructureGenerator.java\n+@@ -143,6 +143,14 @@ public abstract class StructureGenerator<C extends WorldGenFeatureConfiguration>\n+                             int j2 = i1 + k * l1;\n+                             ChunkCoordIntPair chunkcoordintpair = this.a(structuresettingsfeature, j, seededrandom, i2, j2);\n+                             if (!iworldreader.getWorldBorder().isChunkInBounds(chunkcoordintpair.x, chunkcoordintpair.z)) { continue; } // Paper\n++                            // Paper start - seed based feature search\n++                            if (structuremanager.getWorld().paperConfig.seedBasedFeatureSearch) {\n++                                BiomeBase biomeBase = structuremanager.getWorld().getBiomeManager().getBiome(new BlockPosition(chunkcoordintpair.getBlockX() + 9, 0, chunkcoordintpair.getBlockZ() + 9));\n++                                if (!biomeBase.e().a(this)) {\n++                                    continue;\n++                                }\n++                            }\n++                            // Paper end\n+                             IChunkAccess ichunkaccess = iworldreader.getChunkAt(chunkcoordintpair.x, chunkcoordintpair.z, ChunkStatus.STRUCTURE_STARTS);\n+                             StructureStart<?> structurestart = structuremanager.a(SectionPosition.a(ichunkaccess.getPos(), 0), this, ichunkaccess);\n+ \n+diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java\n+index d64d94b8c329ddce27151afc012ecfe26b5ee707..f260da1fd253ebd233d741809acf8a020779744b 100644\n+--- a/src/main/java/net/minecraft/server/World.java\n++++ b/src/main/java/net/minecraft/server/World.java\n+@@ -1451,8 +1451,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable {\n+         return this.methodProfiler;\n+     }\n+ \n+-    @Override\n+-    public BiomeManager d() {\n++    public BiomeManager getBiomeManager() { return d(); } // Paper - OBFHELPER\n++    @Override public BiomeManager d() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f119d596f1e1e0c19c25da6547e8c9a65b0de381"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1747, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}