{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwOTUyMzk2", "number": 4637, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDo0MTowOFrOEsRaog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDo0MTowOFrOEsRaog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODU4MTQ2OnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0584-Fixed-TileEntityBell-memory-leak.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDo0MTowOFrOHffB4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMDo0Mjo1M1rOHffCmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3NjI4OQ==", "bodyText": "Why? I assume this is a decompile fix? If so,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            +                    entityliving.getBehaviorController().setMemory(MemoryModuleType.HEARD_BELL_TIME, this.world.getTime()); // Paper\n          \n          \n            \n            +                    entityliving.getBehaviorController().setMemory(MemoryModuleType.HEARD_BELL_TIME, this.world.getTime()); // Paper - decompile fix", "url": "https://github.com/PaperMC/Paper/pull/4637#discussion_r502776289", "createdAt": "2020-10-10T10:41:08Z", "author": {"login": "Proximyst"}, "path": "Spigot-Server-Patches/0584-Fixed-TileEntityBell-memory-leak.patch", "diffHunk": "@@ -0,0 +1,56 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: giacomo <32515303+giacomozama@users.noreply.github.com>\n+Date: Sat, 10 Oct 2020 12:15:33 +0200\n+Subject: [PATCH] Fixed TileEntityBell memory leak\n+\n+TileEntityBell has a list of entities (entitiesAtRing) that was not being cleared at the right time, causing leaks whenever a bell would be rung near a crowd of entities.\n+\n+diff --git a/src/main/java/net/minecraft/server/TileEntityBell.java b/src/main/java/net/minecraft/server/TileEntityBell.java\n+index 4c5aa99e092a9476e837a3e68d4cbab4b89c0259..3771f1f5735489d29471c731fbb1279f5e4c5e80 100644\n+--- a/src/main/java/net/minecraft/server/TileEntityBell.java\n++++ b/src/main/java/net/minecraft/server/TileEntityBell.java\n+@@ -10,8 +10,8 @@ public class TileEntityBell extends TileEntity implements ITickable {\n+     public int a;\n+     public boolean b;\n+     public EnumDirection c;\n+-    private List<EntityLiving> h;\n+-    private boolean i;\n++    private List<EntityLiving> h; private List<EntityLiving> getEntitiesAtRing() { return this.h; } // Paper - OBFHELPER\n++    private boolean i; private boolean getShouldReveal() { return this.i; } // Paper - OBFHELPER\n+     private int j;\n+ \n+     public TileEntityBell() {\n+@@ -40,6 +40,11 @@ public class TileEntityBell extends TileEntity implements ITickable {\n+ \n+         if (this.a >= 50) {\n+             this.b = false;\n++            // Paper start\n++            if (!this.getShouldReveal()) {\n++                this.getEntitiesAtRing().clear();\n++            }\n++            // Paper end\n+             this.a = 0;\n+         }\n+ \n+@@ -54,6 +59,7 @@ public class TileEntityBell extends TileEntity implements ITickable {\n+             } else {\n+                 this.a(this.world);\n+                 this.b(this.world);\n++                this.getEntitiesAtRing().clear(); // Paper\n+                 this.i = false;\n+             }\n+         }\n+@@ -94,11 +100,12 @@ public class TileEntityBell extends TileEntity implements ITickable {\n+                 EntityLiving entityliving = (EntityLiving) iterator.next();\n+ \n+                 if (entityliving.isAlive() && !entityliving.dead && blockposition.a((IPosition) entityliving.getPositionVector(), 32.0D)) {\n+-                    entityliving.getBehaviorController().setMemory(MemoryModuleType.HEARD_BELL_TIME, (Object) this.world.getTime());\n++                    entityliving.getBehaviorController().setMemory(MemoryModuleType.HEARD_BELL_TIME, this.world.getTime()); // Paper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9363ba53c53f7f92497ceaa8982361653262abc"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3NjQ3Mw==", "bodyText": "Yes, it's a decompiler fix, sorry for not mentioning", "url": "https://github.com/PaperMC/Paper/pull/4637#discussion_r502776473", "createdAt": "2020-10-10T10:42:53Z", "author": {"login": "giacomozama"}, "path": "Spigot-Server-Patches/0584-Fixed-TileEntityBell-memory-leak.patch", "diffHunk": "@@ -0,0 +1,56 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: giacomo <32515303+giacomozama@users.noreply.github.com>\n+Date: Sat, 10 Oct 2020 12:15:33 +0200\n+Subject: [PATCH] Fixed TileEntityBell memory leak\n+\n+TileEntityBell has a list of entities (entitiesAtRing) that was not being cleared at the right time, causing leaks whenever a bell would be rung near a crowd of entities.\n+\n+diff --git a/src/main/java/net/minecraft/server/TileEntityBell.java b/src/main/java/net/minecraft/server/TileEntityBell.java\n+index 4c5aa99e092a9476e837a3e68d4cbab4b89c0259..3771f1f5735489d29471c731fbb1279f5e4c5e80 100644\n+--- a/src/main/java/net/minecraft/server/TileEntityBell.java\n++++ b/src/main/java/net/minecraft/server/TileEntityBell.java\n+@@ -10,8 +10,8 @@ public class TileEntityBell extends TileEntity implements ITickable {\n+     public int a;\n+     public boolean b;\n+     public EnumDirection c;\n+-    private List<EntityLiving> h;\n+-    private boolean i;\n++    private List<EntityLiving> h; private List<EntityLiving> getEntitiesAtRing() { return this.h; } // Paper - OBFHELPER\n++    private boolean i; private boolean getShouldReveal() { return this.i; } // Paper - OBFHELPER\n+     private int j;\n+ \n+     public TileEntityBell() {\n+@@ -40,6 +40,11 @@ public class TileEntityBell extends TileEntity implements ITickable {\n+ \n+         if (this.a >= 50) {\n+             this.b = false;\n++            // Paper start\n++            if (!this.getShouldReveal()) {\n++                this.getEntitiesAtRing().clear();\n++            }\n++            // Paper end\n+             this.a = 0;\n+         }\n+ \n+@@ -54,6 +59,7 @@ public class TileEntityBell extends TileEntity implements ITickable {\n+             } else {\n+                 this.a(this.world);\n+                 this.b(this.world);\n++                this.getEntitiesAtRing().clear(); // Paper\n+                 this.i = false;\n+             }\n+         }\n+@@ -94,11 +100,12 @@ public class TileEntityBell extends TileEntity implements ITickable {\n+                 EntityLiving entityliving = (EntityLiving) iterator.next();\n+ \n+                 if (entityliving.isAlive() && !entityliving.dead && blockposition.a((IPosition) entityliving.getPositionVector(), 32.0D)) {\n+-                    entityliving.getBehaviorController().setMemory(MemoryModuleType.HEARD_BELL_TIME, (Object) this.world.getTime());\n++                    entityliving.getBehaviorController().setMemory(MemoryModuleType.HEARD_BELL_TIME, this.world.getTime()); // Paper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc3NjI4OQ=="}, "originalCommit": {"oid": "d9363ba53c53f7f92497ceaa8982361653262abc"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1846, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}