{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyOTk5NTA1", "number": 4916, "title": "Do not create unnecessary copies of the passenger list", "bodyText": "The getPassengers() method of the Entity classes creates a copy of the passenger list on every call. In many cases, the elements of the returned list are not modified or just the length of the elements is checked. As this involves unnecessary overhead and pressure on the garbage collector, I've replace the calls to this method with direct accesses to the \"passengers\" field wherever it is safe that it is processed synchronously and the list is not changed.", "createdAt": "2020-12-20T00:55:37Z", "url": "https://github.com/PaperMC/Paper/pull/4916", "merged": true, "mergeCommit": {"oid": "c7e42faa3601c0abc878d7031d4f8414047165f2"}, "closed": true, "closedAt": "2021-03-03T19:55:13Z", "author": {"login": "lukalt"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdn8xKWgFqTU1NTk5NDIzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd_mlTUABqjQ0MDQwMDU2Mzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTk0MjM2", "url": "https://github.com/PaperMC/Paper/pull/4916#pullrequestreview-555994236", "createdAt": "2020-12-20T08:07:35Z", "commit": {"oid": "768b05a20fe655e38dcf2183212d0d69a91b2360"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwODowNzozNVrOIJB4Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwODowNzozNVrOIJB4Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMzODg3OA==", "bodyText": "ImmutableList", "url": "https://github.com/PaperMC/Paper/pull/4916#discussion_r546338878", "createdAt": "2020-12-20T08:07:35Z", "author": {"login": "Proximyst"}, "path": "0618-do-not-create-unnecessary-copies-of-passenger-list.patch", "diffHunk": "@@ -0,0 +1,239 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: lukas81298 <lukas81298@gmail.com>\n+Date: Sun, 13 Dec 2020 13:42:55 +0100\n+Subject: [PATCH] do not create unnecessary copies of passenger list\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java\n+index e44e5652c12fbee51acedc1f911181b8443fae93..02df0925f8c22917f71e75b14a117f267bf96f6c 100644\n+--- a/src/main/java/net/minecraft/server/Entity.java\n++++ b/src/main/java/net/minecraft/server/Entity.java\n+@@ -2137,7 +2137,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke\n+     }\n+ \n+     protected boolean q(Entity entity) {\n+-        return this.getPassengers().size() < 1;\n++        return this.passengers.size() < 1; // Paper - do not copy list\n+     }\n+ \n+     public final float getCollisionBorderSize() { return bg(); } // Paper - OBFHELPER\n+@@ -2233,7 +2233,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke\n+     }\n+ \n+     public boolean isVehicle() {\n+-        return !this.getPassengers().isEmpty();\n++        return !this.passengers.isEmpty(); // Paper - do not copy list\n+     }\n+ \n+     public boolean bt() {\n+@@ -3038,7 +3038,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke\n+     }\n+ \n+     public boolean w(Entity entity) {\n+-        Iterator iterator = this.getPassengers().iterator();\n++        Iterator iterator = this.passengers.iterator(); // Paper - do not copy list\n+ \n+         Entity entity1;\n+ \n+@@ -3054,7 +3054,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke\n+     }\n+ \n+     public boolean a(Class<? extends Entity> oclass) {\n+-        Iterator iterator = this.getPassengers().iterator();\n++        Iterator iterator = this.passengers.iterator(); // Paper - do not copy list\n+ \n+         Entity entity;\n+ \n+@@ -3071,7 +3071,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke\n+ \n+     public Collection<Entity> getAllPassengers() {\n+         Set<Entity> set = Sets.newHashSet();\n+-        Iterator iterator = this.getPassengers().iterator();\n++        Iterator iterator = this.passengers.iterator(); // Paper - do not copy list\n+ \n+         while (iterator.hasNext()) {\n+             Entity entity = (Entity) iterator.next();\n+@@ -3097,7 +3097,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke\n+     private void a(boolean flag, Set<Entity> set) {\n+         Entity entity;\n+ \n+-        for (Iterator iterator = this.getPassengers().iterator(); iterator.hasNext(); entity.a(flag, set)) {\n++        for (Iterator iterator = this.passengers.iterator(); iterator.hasNext(); entity.a(flag, set)) { // Paper - do not copy list\n+             entity = (Entity) iterator.next();\n+             if (!flag || EntityPlayer.class.isAssignableFrom(entity.getClass())) {\n+                 set.add(entity);\n+diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java\n+index fdfdf83c28c3065fa89fba9e44b3da99f9791e0e..d9a72371be06a4992f64fe0d1071f49839e97de4 100644\n+--- a/src/main/java/net/minecraft/server/EntityBoat.java\n++++ b/src/main/java/net/minecraft/server/EntityBoat.java\n+@@ -270,7 +270,7 @@ public class EntityBoat extends Entity {\n+         super.tick();\n+         this.r();\n+         if (this.cs()) {\n+-            if (this.getPassengers().isEmpty() || !(this.getPassengers().get(0) instanceof EntityHuman)) {\n++            if (this.passengers.isEmpty() || !(this.passengers.get(0) instanceof EntityHuman)) { // Paper - do not copy list\n+                 this.a(false, false);\n+             }\n+ \n+@@ -333,7 +333,7 @@ public class EntityBoat extends Entity {\n+                 Entity entity = (Entity) list.get(j);\n+ \n+                 if (!entity.w(this)) {\n+-                    if (flag && this.getPassengers().size() < 2 && !entity.isPassenger() && entity.getWidth() < this.getWidth() && entity instanceof EntityLiving && !(entity instanceof EntityWaterAnimal) && !(entity instanceof EntityHuman)) {\n++                    if (flag && this.passengers.size() < 2 && !entity.isPassenger() && entity.getWidth() < this.getWidth() && entity instanceof EntityLiving && !(entity instanceof EntityWaterAnimal) && !(entity instanceof EntityHuman)) { // Paper - do not copy passenger list\n+                         entity.startRiding(this);\n+                     } else {\n+                         this.collide(entity);\n+@@ -680,8 +680,8 @@ public class EntityBoat extends Entity {\n+             float f = 0.0F;\n+             float f1 = (float) ((this.dead ? 0.009999999776482582D : this.bc()) + entity.bb());\n+ \n+-            if (this.getPassengers().size() > 1) {\n+-                int i = this.getPassengers().indexOf(entity);\n++            if (this.passengers.size() > 1) { // Paper - do not copy list\n++                int i = this.passengers.indexOf(entity); // Paper - do not copy list\n+ \n+                 if (i == 0) {\n+                     f = 0.2F;\n+@@ -700,7 +700,7 @@ public class EntityBoat extends Entity {\n+             entity.yaw += this.ak;\n+             entity.setHeadRotation(entity.getHeadRotation() + this.ak);\n+             this.a(entity);\n+-            if (entity instanceof EntityAnimal && this.getPassengers().size() > 1) {\n++            if (entity instanceof EntityAnimal && this.passengers.size() > 1) { // Paper - do not copy list\n+                 int j = entity.getId() % 2 == 0 ? 90 : 270;\n+ \n+                 entity.n(((EntityAnimal) entity).aA + (float) j);\n+@@ -860,13 +860,13 @@ public class EntityBoat extends Entity {\n+ \n+     @Override\n+     protected boolean q(Entity entity) {\n+-        return this.getPassengers().size() < 2 && !this.a((Tag) TagsFluid.WATER);\n++        return this.passengers.size() < 2 && !this.a((Tag) TagsFluid.WATER); // Paper - do not copy list\n+     }\n+ \n+     @Nullable\n+     @Override\n+     public Entity getRidingPassenger() {\n+-        List<Entity> list = this.getPassengers();\n++        List<Entity> list = this.passengers; // Paper - do not copy list\n+ \n+         return list.isEmpty() ? null : (Entity) list.get(0);\n+     }\n+diff --git a/src/main/java/net/minecraft/server/EntityHorseAbstract.java b/src/main/java/net/minecraft/server/EntityHorseAbstract.java\n+index fcb31147622b4b81934be05ffc8de5e821ce69b7..d7c81ec6a5adf00d86fb71a759107b252172d73a 100644\n+--- a/src/main/java/net/minecraft/server/EntityHorseAbstract.java\n++++ b/src/main/java/net/minecraft/server/EntityHorseAbstract.java\n+@@ -910,7 +910,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven\n+     @Nullable\n+     @Override\n+     public Entity getRidingPassenger() {\n+-        return this.getPassengers().isEmpty() ? null : (Entity) this.getPassengers().get(0);\n++        return this.passengers.isEmpty() ? null : (Entity) this.passengers.get(0); // Paper - do not copy list\n+     }\n+ \n+     @Nullable\n+diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java\n+index efe5c0cecaf12ef921f6d32ff6670eff051bf323..68722b7a156f2c0834c835ec59fb019174742ead 100644\n+--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java\n++++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java\n+@@ -522,7 +522,7 @@ public abstract class EntityMinecartAbstract extends Entity {\n+ \n+         vec3d1 = new Vec3D(d8 * d4 / d6, vec3d1.y, d8 * d5 / d6);\n+         this.setMot(vec3d1);\n+-        Entity entity = this.getPassengers().isEmpty() ? null : (Entity) this.getPassengers().get(0);\n++        Entity entity = this.passengers.isEmpty() ? null : (Entity) this.passengers.get(0); // Paper - do not copy list\n+ \n+         if (entity instanceof EntityHuman) {\n+             Vec3D vec3d2 = entity.getMot();\n+diff --git a/src/main/java/net/minecraft/server/EntityPig.java b/src/main/java/net/minecraft/server/EntityPig.java\n+index ee94c2827cfc53f7a37e61d8c1c0c30a52374cf8..01ca5983cade997b1f0d27fdf495c74c6daa0922 100644\n+--- a/src/main/java/net/minecraft/server/EntityPig.java\n++++ b/src/main/java/net/minecraft/server/EntityPig.java\n+@@ -39,7 +39,7 @@ public class EntityPig extends EntityAnimal implements ISteerable, ISaddleable {\n+     @Nullable\n+     @Override\n+     public Entity getRidingPassenger() {\n+-        return this.getPassengers().isEmpty() ? null : (Entity) this.getPassengers().get(0);\n++        return this.passengers.isEmpty() ? null : (Entity) this.passengers.get(0); // Paper - do not copy list\n+     }\n+ \n+     @Override\n+diff --git a/src/main/java/net/minecraft/server/EntityRavager.java b/src/main/java/net/minecraft/server/EntityRavager.java\n+index fd1ac7df68a0caebe35290cdf7a9c37519342b61..e78f158d9c682c60d42c17e0f171d492552e4079 100644\n+--- a/src/main/java/net/minecraft/server/EntityRavager.java\n++++ b/src/main/java/net/minecraft/server/EntityRavager.java\n+@@ -93,7 +93,7 @@ public class EntityRavager extends EntityRaider {\n+     @Nullable\n+     @Override\n+     public Entity getRidingPassenger() {\n+-        return this.getPassengers().isEmpty() ? null : (Entity) this.getPassengers().get(0);\n++        return this.passengers.isEmpty() ? null : (Entity) this.passengers.get(0); // Paper - do not copy list\n+     }\n+ \n+     @Override\n+diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java\n+index f8095407383e6fc8d7d66b9b8b67515dc593c4ba..2f2af54a0d9bb2fd868c74973c126c8a451530d2 100644\n+--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java\n++++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java\n+@@ -74,10 +74,10 @@ public class EntityTrackerEntry {\n+ \n+     public final void tick() { this.a(); } // Paper - OBFHELPER\n+     public void a() {\n+-        List<Entity> list = this.tracker.getPassengers();\n++        List<Entity> list = this.tracker.passengers; // Paper - do not copy listt\n+ \n+         if (!list.equals(this.p)) {\n+-            this.p = list;\n++            this.p = new java.util.ArrayList<>(list);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "768b05a20fe655e38dcf2183212d0d69a91b2360"}, "originalPosition": 188}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODA5MDIw", "url": "https://github.com/PaperMC/Paper/pull/4916#pullrequestreview-558809020", "createdAt": "2020-12-25T11:48:54Z", "commit": {"oid": "36228aef04a6a6ce21b5080f9b1de951b4bdb262"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODkzMTkx", "url": "https://github.com/PaperMC/Paper/pull/4916#pullrequestreview-558893191", "createdAt": "2020-12-26T21:56:41Z", "commit": {"oid": "36228aef04a6a6ce21b5080f9b1de951b4bdb262"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36228aef04a6a6ce21b5080f9b1de951b4bdb262", "author": {"user": {"login": "lukalt", "name": "Lukas Alt"}}, "url": "https://github.com/PaperMC/Paper/commit/36228aef04a6a6ce21b5080f9b1de951b4bdb262", "committedDate": "2020-12-20T14:02:42Z", "message": "create an immutable list instead of a mutable arraylist"}, "afterCommit": {"oid": "9cfc22f76f0542b079536a415a9b617d664d8274", "author": {"user": {"login": "lukalt", "name": "Lukas Alt"}}, "url": "https://github.com/PaperMC/Paper/commit/9cfc22f76f0542b079536a415a9b617d664d8274", "committedDate": "2021-03-03T19:44:30Z", "message": "create an immutable list instead of a mutable arraylist"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "440221b32692762a05dd39d0035e82d3aaf098f9", "author": {"user": {"login": "lukalt", "name": "Lukas Alt"}}, "url": "https://github.com/PaperMC/Paper/commit/440221b32692762a05dd39d0035e82d3aaf098f9", "committedDate": "2021-03-03T19:51:17Z", "message": "Do not create unnecessary copies of the passenger list"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cfc22f76f0542b079536a415a9b617d664d8274", "author": {"user": {"login": "lukalt", "name": "Lukas Alt"}}, "url": "https://github.com/PaperMC/Paper/commit/9cfc22f76f0542b079536a415a9b617d664d8274", "committedDate": "2021-03-03T19:44:30Z", "message": "create an immutable list instead of a mutable arraylist"}, "afterCommit": {"oid": "440221b32692762a05dd39d0035e82d3aaf098f9", "author": {"user": {"login": "lukalt", "name": "Lukas Alt"}}, "url": "https://github.com/PaperMC/Paper/commit/440221b32692762a05dd39d0035e82d3aaf098f9", "committedDate": "2021-03-03T19:51:17Z", "message": "Do not create unnecessary copies of the passenger list"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1374, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}