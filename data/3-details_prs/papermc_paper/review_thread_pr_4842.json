{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMDM0MTY5", "number": 4842, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1NDo0MlrOFKJlOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjo0NjoxMlrOFKfPpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg3MDY0OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0005-Adventure.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1NDo0MlrOIMzSDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOToyNzo0MFrOIMz00g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NDAyOQ==", "bodyText": "I was under the impression we'd include MiniMessage?", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550294029", "createdAt": "2020-12-30T18:54:42Z", "author": {"login": "Proximyst"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ba791c59c739c918aadb274911e2578fd64fcf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwMjkzMA==", "bodyText": "We will be, just not in this initial PR. MM is coming after this is merged.", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550302930", "createdAt": "2020-12-30T19:27:40Z", "author": {"login": "kashike"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NDAyOQ=="}, "originalCommit": {"oid": "c2ba791c59c739c918aadb274911e2578fd64fcf"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg3NTEzOnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0005-Adventure.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1Njo0NFrOIMzUeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1Njo0NFrOIMzUeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NDY0OQ==", "bodyText": "Perhaps we should consider having fluent-style as part of the new PR guidelines? :p", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550294649", "createdAt": "2020-12-30T18:56:44Z", "author": {"login": "Proximyst"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->\n+         <dependency>\n+             <groupId>it.unimi.dsi</groupId>\n+             <artifactId>fastutil</artifactId>\n+diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+index ef58a6c00f444bd498a2d8fc4e457236f393954f..ecd149157d4fb80444f34bf5633d74bcdb63dec5 100644\n+--- a/src/main/java/co/aikar/timings/TimingsReportListener.java\n++++ b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+ @SuppressWarnings(\"WeakerAccess\")\n+-public class TimingsReportListener implements MessageCommandSender {\n++public class TimingsReportListener implements net.kyori.adventure.audience.ForwardingAudience, MessageCommandSender { // Paper\n+     private final List<CommandSender> senders;\n+     private final Runnable onDone;\n+     private String timingsURL;\n+@@ -74,4 +74,17 @@ public class TimingsReportListener implements MessageCommandSender {\n+             this.senders.add(Bukkit.getConsoleSender());\n+         }\n+     }\n++\n++    // Paper start\n++    @Override\n++    public void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.senders;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java\n+index 7c715fdc11ab7837552b1fe3ffd08b31cec0a63b..426b1e83226e674ee4bf3ec05ddcd3ac4376b06d 100644\n+--- a/src/main/java/org/bukkit/Bukkit.java\n++++ b/src/main/java/org/bukkit/Bukkit.java\n+@@ -278,7 +278,9 @@ public final class Bukkit {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated in favour of {@link Server#sendMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public static int broadcastMessage(@NotNull String message) {\n+         return server.broadcastMessage(message);\n+     }\n+@@ -836,6 +838,7 @@ public final class Bukkit {\n+         server.shutdown();\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Broadcasts the specified message to every user with the given\n+      * permission name.\n+@@ -845,6 +848,21 @@ public final class Bukkit {\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n+      */\n++    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {\n++        return server.broadcast(message, permission);\n++    }\n++    // Paper end\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n++     */\n++    @Deprecated // Paper\n+     public static int broadcast(@NotNull String message, @NotNull String permission) {\n+         return server.broadcast(message, permission);\n+     }\n+@@ -1044,6 +1062,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, type);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -1069,6 +1088,38 @@ public final class Bukkit {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {\n++        return server.createInventory(owner, type, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {\n+         return server.createInventory(owner, type, title);\n+     }\n+@@ -1087,6 +1138,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, size);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -1099,10 +1151,30 @@ public final class Bukkit {\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {\n++        return server.createInventory(owner, size, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {\n+         return server.createInventory(owner, size, title);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+@@ -1110,7 +1182,20 @@ public final class Bukkit {\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n+      */\n++    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {\n++        return server.createMerchant(title);\n++    }\n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static Merchant createMerchant(@Nullable String title) {\n+         return server.createMerchant(title);\n+     }\n+@@ -1181,22 +1266,47 @@ public final class Bukkit {\n+         return server.isPrimaryThread();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull public static net.kyori.adventure.text.Component motd() {\n++        return server.motd();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static String getMotd() {\n+         return server.getMotd();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    public static @Nullable net.kyori.adventure.text.Component shutdownMessage() {\n++        return server.shutdownMessage();\n++    }\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public static String getShutdownMessage() {\n+         return server.getShutdownMessage();\n+     }\n+diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java\n+index fee814e01a653d2b53c56e8b566383ca44aa5346..2acdf2a6d3955923c721222b9da784f3278f6418 100644\n+--- a/src/main/java/org/bukkit/Nameable.java\n++++ b/src/main/java/org/bukkit/Nameable.java\n+@@ -4,6 +4,30 @@ import org.jetbrains.annotations.Nullable;\n+ \n+ public interface Nameable {\n+ \n++    // Paper start\n++    /**\n++     * Gets the custom name.\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @return the custom name\n++     */\n++    @Nullable net.kyori.adventure.text.Component customName();\n++\n++    /**\n++     * Sets the custom name.\n++     *\n++     * <p>This name will be used in death messages and can be sent to the client as a nameplate over the mob.</p>\n++     *\n++     * <p>Setting the name to {@code null} will clear it.</p>\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @param customName the custom name to set\n++     */\n++    void customName(final @Nullable net.kyori.adventure.text.Component customName);\n++    // Paper end\n++\n+     /**\n+      * Gets the custom name on a mob or block. If there is no name this method\n+      * will return null.\n+diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java\n+index 22eca2a180618ed43a4ef103bebd134897d6c71a..abb7448ee8fe1152623794d3b806eef9a9e17abc 100644\n+--- a/src/main/java/org/bukkit/NamespacedKey.java\n++++ b/src/main/java/org/bukkit/NamespacedKey.java\n+@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n+  * underscores, hyphens, and forward slashes.\n+  *\n+  */\n+-public final class NamespacedKey {\n++public final class NamespacedKey implements net.kyori.adventure.key.Key { // Paper - implement Key\n+ \n+     /**\n+      * The namespace representing all inbuilt keys.\n+@@ -139,4 +139,24 @@ public final class NamespacedKey {\n+     public static NamespacedKey minecraft(@NotNull String key) {\n+         return new NamespacedKey(MINECRAFT, key);\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public String namespace() {\n++        return this.getNamespace();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String value() {\n++        return this.getKey();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String asString() {\n++        return this.namespace + ':' + this.key;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java\n+index a6b9e4f158583e5932bf8ca210d531857e9f5360..d9515a79dc7ed60c66960cd6c6bb4c108f206f3c 100644\n+--- a/src/main/java/org/bukkit/Server.java\n++++ b/src/main/java/org/bukkit/Server.java\n+@@ -55,7 +55,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a server implementation.\n+  */\n+-public interface Server extends PluginMessageRecipient {\n++public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Used for all administrative messages, such as an operator using a\n+@@ -229,7 +229,9 @@ public interface Server extends PluginMessageRecipient {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+      */\n++    @Deprecated // Paper\n+     public int broadcastMessage(@NotNull String message);\n+ \n+     /**\n+@@ -703,8 +705,22 @@ public interface Server extends PluginMessageRecipient {\n+      * @param permission the required permission {@link Permissible\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n+      */\n++    @Deprecated // Paper\n+     public int broadcast(@NotNull String message, @NotNull String permission);\n++    // Paper start\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     */\n++    int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);\n++    // Paper end\n+ \n+     /**\n+      * Gets the player by the given name, regardless if they are offline or\n+@@ -869,6 +885,7 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -894,6 +911,36 @@ public interface Server extends PluginMessageRecipient {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);\n+ \n+     /**\n+@@ -908,6 +955,22 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     */\n++    @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;\n++    // Paper end\n++\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -918,18 +981,32 @@ public interface Server extends PluginMessageRecipient {\n+      *     viewed\n+      * @return a new inventory\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     */\n++    @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);\n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+      * @param title the title of the corresponding merchant inventory, displayed\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Merchant createMerchant(@Nullable String title);\n+ \n+     /**\n+@@ -986,20 +1063,41 @@ public interface Server extends PluginMessageRecipient {\n+      */\n+     boolean isPrimaryThread();\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull net.kyori.adventure.text.Component motd();\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getMotd();\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    @Nullable net.kyori.adventure.text.Component shutdownMessage();\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     String getShutdownMessage();\n+ \n+     /**\n+@@ -1368,7 +1466,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends the component to the player\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1477,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends an array of components as a single message to the player\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java\n+index cdcbc8b05afc412017ac0e4ed0adf227d1342336..6b5dbe4ea711807a1944cfe2aae2ce415d4f2638 100644\n+--- a/src/main/java/org/bukkit/World.java\n++++ b/src/main/java/org/bukkit/World.java\n+@@ -38,7 +38,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a world, which may contain entities, chunks and blocks\n+  */\n+-public interface World extends PluginMessageRecipient, Metadatable {\n++public interface World extends PluginMessageRecipient, Metadatable, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Gets the {@link Block} at the given coordinates\n+@@ -616,6 +616,14 @@ public interface World extends PluginMessageRecipient, Metadatable {\n+     @NotNull\n+     public List<Player> getPlayers();\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.getPlayers();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Returns a list of entities within a bounding box centered around a\n+      * Location.\n+diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java\n+index 7e3cf00e49c66023bf46c298ef46c00e8c3c2caf..6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41 100644\n+--- a/src/main/java/org/bukkit/block/Sign.java\n++++ b/src/main/java/org/bukkit/block/Sign.java\n+@@ -7,13 +7,48 @@ import org.jetbrains.annotations.NotNull;\n+  * Represents a captured state of either a SignPost or a WallSign.\n+  */\n+ public interface Sign extends TileState, Colorable {\n++    // Paper start\n++    /**\n++     * Gets all the lines of text currently on this sign.\n++     *\n++     * @return Array of Strings containing each line of text\n++     */\n++    @NotNull\n++    public java.util.List<net.kyori.adventure.text.Component> lines();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ba791c59c739c918aadb274911e2578fd64fcf"}, "originalPosition": 595}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg3Nzk2OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0005-Adventure.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1Nzo0M1rOIMzV9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1Nzo0M1rOIMzV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NTAzMA==", "bodyText": "I don't see the op being used here?", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550295030", "createdAt": "2020-12-30T18:57:43Z", "author": {"login": "Proximyst"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->\n+         <dependency>\n+             <groupId>it.unimi.dsi</groupId>\n+             <artifactId>fastutil</artifactId>\n+diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+index ef58a6c00f444bd498a2d8fc4e457236f393954f..ecd149157d4fb80444f34bf5633d74bcdb63dec5 100644\n+--- a/src/main/java/co/aikar/timings/TimingsReportListener.java\n++++ b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+ @SuppressWarnings(\"WeakerAccess\")\n+-public class TimingsReportListener implements MessageCommandSender {\n++public class TimingsReportListener implements net.kyori.adventure.audience.ForwardingAudience, MessageCommandSender { // Paper\n+     private final List<CommandSender> senders;\n+     private final Runnable onDone;\n+     private String timingsURL;\n+@@ -74,4 +74,17 @@ public class TimingsReportListener implements MessageCommandSender {\n+             this.senders.add(Bukkit.getConsoleSender());\n+         }\n+     }\n++\n++    // Paper start\n++    @Override\n++    public void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.senders;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java\n+index 7c715fdc11ab7837552b1fe3ffd08b31cec0a63b..426b1e83226e674ee4bf3ec05ddcd3ac4376b06d 100644\n+--- a/src/main/java/org/bukkit/Bukkit.java\n++++ b/src/main/java/org/bukkit/Bukkit.java\n+@@ -278,7 +278,9 @@ public final class Bukkit {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated in favour of {@link Server#sendMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public static int broadcastMessage(@NotNull String message) {\n+         return server.broadcastMessage(message);\n+     }\n+@@ -836,6 +838,7 @@ public final class Bukkit {\n+         server.shutdown();\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Broadcasts the specified message to every user with the given\n+      * permission name.\n+@@ -845,6 +848,21 @@ public final class Bukkit {\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n+      */\n++    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {\n++        return server.broadcast(message, permission);\n++    }\n++    // Paper end\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n++     */\n++    @Deprecated // Paper\n+     public static int broadcast(@NotNull String message, @NotNull String permission) {\n+         return server.broadcast(message, permission);\n+     }\n+@@ -1044,6 +1062,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, type);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -1069,6 +1088,38 @@ public final class Bukkit {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {\n++        return server.createInventory(owner, type, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {\n+         return server.createInventory(owner, type, title);\n+     }\n+@@ -1087,6 +1138,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, size);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -1099,10 +1151,30 @@ public final class Bukkit {\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {\n++        return server.createInventory(owner, size, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {\n+         return server.createInventory(owner, size, title);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+@@ -1110,7 +1182,20 @@ public final class Bukkit {\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n+      */\n++    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {\n++        return server.createMerchant(title);\n++    }\n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static Merchant createMerchant(@Nullable String title) {\n+         return server.createMerchant(title);\n+     }\n+@@ -1181,22 +1266,47 @@ public final class Bukkit {\n+         return server.isPrimaryThread();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull public static net.kyori.adventure.text.Component motd() {\n++        return server.motd();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static String getMotd() {\n+         return server.getMotd();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    public static @Nullable net.kyori.adventure.text.Component shutdownMessage() {\n++        return server.shutdownMessage();\n++    }\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public static String getShutdownMessage() {\n+         return server.getShutdownMessage();\n+     }\n+diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java\n+index fee814e01a653d2b53c56e8b566383ca44aa5346..2acdf2a6d3955923c721222b9da784f3278f6418 100644\n+--- a/src/main/java/org/bukkit/Nameable.java\n++++ b/src/main/java/org/bukkit/Nameable.java\n+@@ -4,6 +4,30 @@ import org.jetbrains.annotations.Nullable;\n+ \n+ public interface Nameable {\n+ \n++    // Paper start\n++    /**\n++     * Gets the custom name.\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @return the custom name\n++     */\n++    @Nullable net.kyori.adventure.text.Component customName();\n++\n++    /**\n++     * Sets the custom name.\n++     *\n++     * <p>This name will be used in death messages and can be sent to the client as a nameplate over the mob.</p>\n++     *\n++     * <p>Setting the name to {@code null} will clear it.</p>\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @param customName the custom name to set\n++     */\n++    void customName(final @Nullable net.kyori.adventure.text.Component customName);\n++    // Paper end\n++\n+     /**\n+      * Gets the custom name on a mob or block. If there is no name this method\n+      * will return null.\n+diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java\n+index 22eca2a180618ed43a4ef103bebd134897d6c71a..abb7448ee8fe1152623794d3b806eef9a9e17abc 100644\n+--- a/src/main/java/org/bukkit/NamespacedKey.java\n++++ b/src/main/java/org/bukkit/NamespacedKey.java\n+@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n+  * underscores, hyphens, and forward slashes.\n+  *\n+  */\n+-public final class NamespacedKey {\n++public final class NamespacedKey implements net.kyori.adventure.key.Key { // Paper - implement Key\n+ \n+     /**\n+      * The namespace representing all inbuilt keys.\n+@@ -139,4 +139,24 @@ public final class NamespacedKey {\n+     public static NamespacedKey minecraft(@NotNull String key) {\n+         return new NamespacedKey(MINECRAFT, key);\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public String namespace() {\n++        return this.getNamespace();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String value() {\n++        return this.getKey();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String asString() {\n++        return this.namespace + ':' + this.key;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java\n+index a6b9e4f158583e5932bf8ca210d531857e9f5360..d9515a79dc7ed60c66960cd6c6bb4c108f206f3c 100644\n+--- a/src/main/java/org/bukkit/Server.java\n++++ b/src/main/java/org/bukkit/Server.java\n+@@ -55,7 +55,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a server implementation.\n+  */\n+-public interface Server extends PluginMessageRecipient {\n++public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Used for all administrative messages, such as an operator using a\n+@@ -229,7 +229,9 @@ public interface Server extends PluginMessageRecipient {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+      */\n++    @Deprecated // Paper\n+     public int broadcastMessage(@NotNull String message);\n+ \n+     /**\n+@@ -703,8 +705,22 @@ public interface Server extends PluginMessageRecipient {\n+      * @param permission the required permission {@link Permissible\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n+      */\n++    @Deprecated // Paper\n+     public int broadcast(@NotNull String message, @NotNull String permission);\n++    // Paper start\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     */\n++    int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);\n++    // Paper end\n+ \n+     /**\n+      * Gets the player by the given name, regardless if they are offline or\n+@@ -869,6 +885,7 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -894,6 +911,36 @@ public interface Server extends PluginMessageRecipient {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);\n+ \n+     /**\n+@@ -908,6 +955,22 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     */\n++    @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;\n++    // Paper end\n++\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -918,18 +981,32 @@ public interface Server extends PluginMessageRecipient {\n+      *     viewed\n+      * @return a new inventory\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     */\n++    @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);\n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+      * @param title the title of the corresponding merchant inventory, displayed\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Merchant createMerchant(@Nullable String title);\n+ \n+     /**\n+@@ -986,20 +1063,41 @@ public interface Server extends PluginMessageRecipient {\n+      */\n+     boolean isPrimaryThread();\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull net.kyori.adventure.text.Component motd();\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getMotd();\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    @Nullable net.kyori.adventure.text.Component shutdownMessage();\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     String getShutdownMessage();\n+ \n+     /**\n+@@ -1368,7 +1466,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends the component to the player\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1477,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends an array of components as a single message to the player\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java\n+index cdcbc8b05afc412017ac0e4ed0adf227d1342336..6b5dbe4ea711807a1944cfe2aae2ce415d4f2638 100644\n+--- a/src/main/java/org/bukkit/World.java\n++++ b/src/main/java/org/bukkit/World.java\n+@@ -38,7 +38,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a world, which may contain entities, chunks and blocks\n+  */\n+-public interface World extends PluginMessageRecipient, Metadatable {\n++public interface World extends PluginMessageRecipient, Metadatable, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Gets the {@link Block} at the given coordinates\n+@@ -616,6 +616,14 @@ public interface World extends PluginMessageRecipient, Metadatable {\n+     @NotNull\n+     public List<Player> getPlayers();\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.getPlayers();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Returns a list of entities within a bounding box centered around a\n+      * Location.\n+diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java\n+index 7e3cf00e49c66023bf46c298ef46c00e8c3c2caf..6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41 100644\n+--- a/src/main/java/org/bukkit/block/Sign.java\n++++ b/src/main/java/org/bukkit/block/Sign.java\n+@@ -7,13 +7,48 @@ import org.jetbrains.annotations.NotNull;\n+  * Represents a captured state of either a SignPost or a WallSign.\n+  */\n+ public interface Sign extends TileState, Colorable {\n++    // Paper start\n++    /**\n++     * Gets all the lines of text currently on this sign.\n++     *\n++     * @return Array of Strings containing each line of text\n++     */\n++    @NotNull\n++    public java.util.List<net.kyori.adventure.text.Component> lines();\n++\n++    /**\n++     * Gets the line of text at the specified index.\n++     * <p>\n++     * For example, getLine(0) will return the first line of text.\n++     *\n++     * @param index Line number to get the text from, starting at 0\n++     * @throws IndexOutOfBoundsException Thrown when the line does not exist\n++     * @return Text on the given line\n++     */\n++    @NotNull\n++    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;\n++\n++    /**\n++     * Sets the line of text at the specified index.\n++     * <p>\n++     * For example, setLine(0, \"Line One\") will set the first line of text to\n++     * \"Line One\".\n++     *\n++     * @param index Line number to set the text at, starting from 0\n++     * @param line New text to set at the specified index\n++     * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     */\n++    public void line(int index, @NotNull net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;\n++    // Paper end\n+ \n+     /**\n+      * Gets all the lines of text currently on this sign.\n+      *\n+      * @return Array of Strings containing each line of text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines();\n+ \n+     /**\n+@@ -24,8 +59,10 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to get the text from, starting at 0\n+      * @throws IndexOutOfBoundsException Thrown when the line does not exist\n+      * @return Text on the given line\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException;\n+ \n+     /**\n+@@ -37,7 +74,9 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to set the text at, starting from 0\n+      * @param line New text to set at the specified index\n+      * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java\n+index ac772bf349e0ffe9cab1df165d9460b387f2fe69..2588edf75483855e0c843834f39ca371770730b9 100644\n+--- a/src/main/java/org/bukkit/command/CommandSender.java\n++++ b/src/main/java/org/bukkit/command/CommandSender.java\n+@@ -6,12 +6,13 @@ import org.bukkit.permissions.Permissible;\n+ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+-public interface CommandSender extends Permissible {\n++public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper\n+ \n+     /**\n+      * Sends this sender a message\n+      *\n+      * @param message Message to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String message);\n+ \n+@@ -19,6 +20,7 @@ public interface CommandSender extends Permissible {\n+      * Sends this sender multiple messages\n+      *\n+      * @param messages An array of messages to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String[] messages);\n+ \n+@@ -27,6 +29,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param message Message to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String message);\n+ \n+@@ -35,6 +38,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param messages An array of messages to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String[] messages);\n+ \n+@@ -61,7 +65,9 @@ public interface CommandSender extends Permissible {\n+          * Sends this sender a chat component.\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -70,7 +76,9 @@ public interface CommandSender extends Permissible {\n+          * Sends an array of components as a single message to the sender.\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -80,7 +88,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param component the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -90,7 +100,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param components the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -99,4 +111,11 @@ public interface CommandSender extends Permissible {\n+     @NotNull\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity identity, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/command/ProxiedCommandSender.java b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+index fcc34b640265f4dccb46b9f09466ab8e1d96043e..74599b4ee0518481c0e3a5f6ab2f5302837f1ae3 100644\n+--- a/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n++++ b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+@@ -3,7 +3,7 @@ package org.bukkit.command;\n+ \n+ import org.jetbrains.annotations.NotNull;\n+ \n+-public interface ProxiedCommandSender extends CommandSender {\n++public interface ProxiedCommandSender extends CommandSender, net.kyori.adventure.audience.ForwardingAudience.Single { // Paper\n+ \n+     /**\n+      * Returns the CommandSender which triggered this proxied command\n+@@ -21,4 +21,16 @@ public interface ProxiedCommandSender extends CommandSender {\n+     @NotNull\n+     CommandSender getCallee();\n+ \n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.Single.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.audience.Audience audience() {\n++        return this.getCaller();\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+index b833ef63fbe01271ceb2bd83a9eb4a84c9912761..1a093a30adf18572693032b78f3d2683e87d2e21 100644\n+--- a/src/main/java/org/bukkit/enchantments/Enchantment.java\n++++ b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+@@ -294,6 +294,9 @@ public abstract class Enchantment implements Keyed {\n+      * @return True if the enchantment may be applied, otherwise False\n+      */\n+     public abstract boolean canEnchantItem(@NotNull ItemStack item);\n++    // Paper start\n++    public abstract @NotNull net.kyori.adventure.text.Component displayName(int level);\n++    // Paper end\n+ \n+     @Override\n+     public boolean equals(Object obj) {\n+diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+index 9566e4306ada5e82dede0f002aa06da12c44996b..4d5f0837bd0e02a30c943d8969fb6b13452322e0 100644\n+--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n++++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+@@ -63,4 +63,11 @@ public class EnchantmentWrapper extends Enchantment {\n+     public boolean conflictsWith(@NotNull Enchantment other) {\n+         return getEnchantment().conflictsWith(other);\n+     }\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.Component displayName(int level) {\n++        return getEnchantment().displayName(level);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java\n+index 344c14a5ed86e9ebe401bfb5ba3aedc0c0ed0b04..cfae8ac8ddfcea44aca17ca96385017ba75c7e04 100644\n+--- a/src/main/java/org/bukkit/entity/Entity.java\n++++ b/src/main/java/org/bukkit/entity/Entity.java\n+@@ -25,7 +25,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a base entity in the world\n+  */\n+-public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder {\n++public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowEntity> { // Paper\n+ \n+     /**\n+      * Gets the entity's current position\n+@@ -602,4 +602,12 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent\n+     @Override\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ba791c59c739c918aadb274911e2578fd64fcf"}, "originalPosition": 830}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg3ODk5OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0005-Adventure.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1ODoxN1rOIMzWmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxODo1ODoxN1rOIMzWmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NTE5NQ==", "bodyText": "Unused op?", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550295195", "createdAt": "2020-12-30T18:58:17Z", "author": {"login": "Proximyst"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->\n+         <dependency>\n+             <groupId>it.unimi.dsi</groupId>\n+             <artifactId>fastutil</artifactId>\n+diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+index ef58a6c00f444bd498a2d8fc4e457236f393954f..ecd149157d4fb80444f34bf5633d74bcdb63dec5 100644\n+--- a/src/main/java/co/aikar/timings/TimingsReportListener.java\n++++ b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+ @SuppressWarnings(\"WeakerAccess\")\n+-public class TimingsReportListener implements MessageCommandSender {\n++public class TimingsReportListener implements net.kyori.adventure.audience.ForwardingAudience, MessageCommandSender { // Paper\n+     private final List<CommandSender> senders;\n+     private final Runnable onDone;\n+     private String timingsURL;\n+@@ -74,4 +74,17 @@ public class TimingsReportListener implements MessageCommandSender {\n+             this.senders.add(Bukkit.getConsoleSender());\n+         }\n+     }\n++\n++    // Paper start\n++    @Override\n++    public void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.senders;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java\n+index 7c715fdc11ab7837552b1fe3ffd08b31cec0a63b..426b1e83226e674ee4bf3ec05ddcd3ac4376b06d 100644\n+--- a/src/main/java/org/bukkit/Bukkit.java\n++++ b/src/main/java/org/bukkit/Bukkit.java\n+@@ -278,7 +278,9 @@ public final class Bukkit {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated in favour of {@link Server#sendMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public static int broadcastMessage(@NotNull String message) {\n+         return server.broadcastMessage(message);\n+     }\n+@@ -836,6 +838,7 @@ public final class Bukkit {\n+         server.shutdown();\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Broadcasts the specified message to every user with the given\n+      * permission name.\n+@@ -845,6 +848,21 @@ public final class Bukkit {\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n+      */\n++    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {\n++        return server.broadcast(message, permission);\n++    }\n++    // Paper end\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n++     */\n++    @Deprecated // Paper\n+     public static int broadcast(@NotNull String message, @NotNull String permission) {\n+         return server.broadcast(message, permission);\n+     }\n+@@ -1044,6 +1062,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, type);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -1069,6 +1088,38 @@ public final class Bukkit {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {\n++        return server.createInventory(owner, type, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {\n+         return server.createInventory(owner, type, title);\n+     }\n+@@ -1087,6 +1138,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, size);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -1099,10 +1151,30 @@ public final class Bukkit {\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {\n++        return server.createInventory(owner, size, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {\n+         return server.createInventory(owner, size, title);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+@@ -1110,7 +1182,20 @@ public final class Bukkit {\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n+      */\n++    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {\n++        return server.createMerchant(title);\n++    }\n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static Merchant createMerchant(@Nullable String title) {\n+         return server.createMerchant(title);\n+     }\n+@@ -1181,22 +1266,47 @@ public final class Bukkit {\n+         return server.isPrimaryThread();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull public static net.kyori.adventure.text.Component motd() {\n++        return server.motd();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static String getMotd() {\n+         return server.getMotd();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    public static @Nullable net.kyori.adventure.text.Component shutdownMessage() {\n++        return server.shutdownMessage();\n++    }\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public static String getShutdownMessage() {\n+         return server.getShutdownMessage();\n+     }\n+diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java\n+index fee814e01a653d2b53c56e8b566383ca44aa5346..2acdf2a6d3955923c721222b9da784f3278f6418 100644\n+--- a/src/main/java/org/bukkit/Nameable.java\n++++ b/src/main/java/org/bukkit/Nameable.java\n+@@ -4,6 +4,30 @@ import org.jetbrains.annotations.Nullable;\n+ \n+ public interface Nameable {\n+ \n++    // Paper start\n++    /**\n++     * Gets the custom name.\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @return the custom name\n++     */\n++    @Nullable net.kyori.adventure.text.Component customName();\n++\n++    /**\n++     * Sets the custom name.\n++     *\n++     * <p>This name will be used in death messages and can be sent to the client as a nameplate over the mob.</p>\n++     *\n++     * <p>Setting the name to {@code null} will clear it.</p>\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @param customName the custom name to set\n++     */\n++    void customName(final @Nullable net.kyori.adventure.text.Component customName);\n++    // Paper end\n++\n+     /**\n+      * Gets the custom name on a mob or block. If there is no name this method\n+      * will return null.\n+diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java\n+index 22eca2a180618ed43a4ef103bebd134897d6c71a..abb7448ee8fe1152623794d3b806eef9a9e17abc 100644\n+--- a/src/main/java/org/bukkit/NamespacedKey.java\n++++ b/src/main/java/org/bukkit/NamespacedKey.java\n+@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n+  * underscores, hyphens, and forward slashes.\n+  *\n+  */\n+-public final class NamespacedKey {\n++public final class NamespacedKey implements net.kyori.adventure.key.Key { // Paper - implement Key\n+ \n+     /**\n+      * The namespace representing all inbuilt keys.\n+@@ -139,4 +139,24 @@ public final class NamespacedKey {\n+     public static NamespacedKey minecraft(@NotNull String key) {\n+         return new NamespacedKey(MINECRAFT, key);\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public String namespace() {\n++        return this.getNamespace();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String value() {\n++        return this.getKey();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String asString() {\n++        return this.namespace + ':' + this.key;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java\n+index a6b9e4f158583e5932bf8ca210d531857e9f5360..d9515a79dc7ed60c66960cd6c6bb4c108f206f3c 100644\n+--- a/src/main/java/org/bukkit/Server.java\n++++ b/src/main/java/org/bukkit/Server.java\n+@@ -55,7 +55,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a server implementation.\n+  */\n+-public interface Server extends PluginMessageRecipient {\n++public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Used for all administrative messages, such as an operator using a\n+@@ -229,7 +229,9 @@ public interface Server extends PluginMessageRecipient {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+      */\n++    @Deprecated // Paper\n+     public int broadcastMessage(@NotNull String message);\n+ \n+     /**\n+@@ -703,8 +705,22 @@ public interface Server extends PluginMessageRecipient {\n+      * @param permission the required permission {@link Permissible\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n+      */\n++    @Deprecated // Paper\n+     public int broadcast(@NotNull String message, @NotNull String permission);\n++    // Paper start\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     */\n++    int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);\n++    // Paper end\n+ \n+     /**\n+      * Gets the player by the given name, regardless if they are offline or\n+@@ -869,6 +885,7 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -894,6 +911,36 @@ public interface Server extends PluginMessageRecipient {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);\n+ \n+     /**\n+@@ -908,6 +955,22 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     */\n++    @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;\n++    // Paper end\n++\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -918,18 +981,32 @@ public interface Server extends PluginMessageRecipient {\n+      *     viewed\n+      * @return a new inventory\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     */\n++    @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);\n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+      * @param title the title of the corresponding merchant inventory, displayed\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Merchant createMerchant(@Nullable String title);\n+ \n+     /**\n+@@ -986,20 +1063,41 @@ public interface Server extends PluginMessageRecipient {\n+      */\n+     boolean isPrimaryThread();\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull net.kyori.adventure.text.Component motd();\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getMotd();\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    @Nullable net.kyori.adventure.text.Component shutdownMessage();\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     String getShutdownMessage();\n+ \n+     /**\n+@@ -1368,7 +1466,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends the component to the player\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1477,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends an array of components as a single message to the player\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java\n+index cdcbc8b05afc412017ac0e4ed0adf227d1342336..6b5dbe4ea711807a1944cfe2aae2ce415d4f2638 100644\n+--- a/src/main/java/org/bukkit/World.java\n++++ b/src/main/java/org/bukkit/World.java\n+@@ -38,7 +38,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a world, which may contain entities, chunks and blocks\n+  */\n+-public interface World extends PluginMessageRecipient, Metadatable {\n++public interface World extends PluginMessageRecipient, Metadatable, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Gets the {@link Block} at the given coordinates\n+@@ -616,6 +616,14 @@ public interface World extends PluginMessageRecipient, Metadatable {\n+     @NotNull\n+     public List<Player> getPlayers();\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.getPlayers();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Returns a list of entities within a bounding box centered around a\n+      * Location.\n+diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java\n+index 7e3cf00e49c66023bf46c298ef46c00e8c3c2caf..6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41 100644\n+--- a/src/main/java/org/bukkit/block/Sign.java\n++++ b/src/main/java/org/bukkit/block/Sign.java\n+@@ -7,13 +7,48 @@ import org.jetbrains.annotations.NotNull;\n+  * Represents a captured state of either a SignPost or a WallSign.\n+  */\n+ public interface Sign extends TileState, Colorable {\n++    // Paper start\n++    /**\n++     * Gets all the lines of text currently on this sign.\n++     *\n++     * @return Array of Strings containing each line of text\n++     */\n++    @NotNull\n++    public java.util.List<net.kyori.adventure.text.Component> lines();\n++\n++    /**\n++     * Gets the line of text at the specified index.\n++     * <p>\n++     * For example, getLine(0) will return the first line of text.\n++     *\n++     * @param index Line number to get the text from, starting at 0\n++     * @throws IndexOutOfBoundsException Thrown when the line does not exist\n++     * @return Text on the given line\n++     */\n++    @NotNull\n++    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;\n++\n++    /**\n++     * Sets the line of text at the specified index.\n++     * <p>\n++     * For example, setLine(0, \"Line One\") will set the first line of text to\n++     * \"Line One\".\n++     *\n++     * @param index Line number to set the text at, starting from 0\n++     * @param line New text to set at the specified index\n++     * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     */\n++    public void line(int index, @NotNull net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;\n++    // Paper end\n+ \n+     /**\n+      * Gets all the lines of text currently on this sign.\n+      *\n+      * @return Array of Strings containing each line of text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines();\n+ \n+     /**\n+@@ -24,8 +59,10 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to get the text from, starting at 0\n+      * @throws IndexOutOfBoundsException Thrown when the line does not exist\n+      * @return Text on the given line\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException;\n+ \n+     /**\n+@@ -37,7 +74,9 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to set the text at, starting from 0\n+      * @param line New text to set at the specified index\n+      * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java\n+index ac772bf349e0ffe9cab1df165d9460b387f2fe69..2588edf75483855e0c843834f39ca371770730b9 100644\n+--- a/src/main/java/org/bukkit/command/CommandSender.java\n++++ b/src/main/java/org/bukkit/command/CommandSender.java\n+@@ -6,12 +6,13 @@ import org.bukkit.permissions.Permissible;\n+ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+-public interface CommandSender extends Permissible {\n++public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper\n+ \n+     /**\n+      * Sends this sender a message\n+      *\n+      * @param message Message to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String message);\n+ \n+@@ -19,6 +20,7 @@ public interface CommandSender extends Permissible {\n+      * Sends this sender multiple messages\n+      *\n+      * @param messages An array of messages to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String[] messages);\n+ \n+@@ -27,6 +29,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param message Message to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String message);\n+ \n+@@ -35,6 +38,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param messages An array of messages to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String[] messages);\n+ \n+@@ -61,7 +65,9 @@ public interface CommandSender extends Permissible {\n+          * Sends this sender a chat component.\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -70,7 +76,9 @@ public interface CommandSender extends Permissible {\n+          * Sends an array of components as a single message to the sender.\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -80,7 +88,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param component the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -90,7 +100,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param components the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -99,4 +111,11 @@ public interface CommandSender extends Permissible {\n+     @NotNull\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity identity, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/command/ProxiedCommandSender.java b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+index fcc34b640265f4dccb46b9f09466ab8e1d96043e..74599b4ee0518481c0e3a5f6ab2f5302837f1ae3 100644\n+--- a/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n++++ b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+@@ -3,7 +3,7 @@ package org.bukkit.command;\n+ \n+ import org.jetbrains.annotations.NotNull;\n+ \n+-public interface ProxiedCommandSender extends CommandSender {\n++public interface ProxiedCommandSender extends CommandSender, net.kyori.adventure.audience.ForwardingAudience.Single { // Paper\n+ \n+     /**\n+      * Returns the CommandSender which triggered this proxied command\n+@@ -21,4 +21,16 @@ public interface ProxiedCommandSender extends CommandSender {\n+     @NotNull\n+     CommandSender getCallee();\n+ \n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.Single.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.audience.Audience audience() {\n++        return this.getCaller();\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+index b833ef63fbe01271ceb2bd83a9eb4a84c9912761..1a093a30adf18572693032b78f3d2683e87d2e21 100644\n+--- a/src/main/java/org/bukkit/enchantments/Enchantment.java\n++++ b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+@@ -294,6 +294,9 @@ public abstract class Enchantment implements Keyed {\n+      * @return True if the enchantment may be applied, otherwise False\n+      */\n+     public abstract boolean canEnchantItem(@NotNull ItemStack item);\n++    // Paper start\n++    public abstract @NotNull net.kyori.adventure.text.Component displayName(int level);\n++    // Paper end\n+ \n+     @Override\n+     public boolean equals(Object obj) {\n+diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+index 9566e4306ada5e82dede0f002aa06da12c44996b..4d5f0837bd0e02a30c943d8969fb6b13452322e0 100644\n+--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n++++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+@@ -63,4 +63,11 @@ public class EnchantmentWrapper extends Enchantment {\n+     public boolean conflictsWith(@NotNull Enchantment other) {\n+         return getEnchantment().conflictsWith(other);\n+     }\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.Component displayName(int level) {\n++        return getEnchantment().displayName(level);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java\n+index 344c14a5ed86e9ebe401bfb5ba3aedc0c0ed0b04..cfae8ac8ddfcea44aca17ca96385017ba75c7e04 100644\n+--- a/src/main/java/org/bukkit/entity/Entity.java\n++++ b/src/main/java/org/bukkit/entity/Entity.java\n+@@ -25,7 +25,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a base entity in the world\n+  */\n+-public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder {\n++public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowEntity> { // Paper\n+ \n+     /**\n+      * Gets the entity's current position\n+@@ -602,4 +602,12 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent\n+     @Override\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(this.getType().getKey(), this.getUniqueId(), null);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java\n+index f22b21ee12496452f7b2125c131f56ecc74d439a..447de8f7c1d871ef5fb1a06bace451e1de06d972 100644\n+--- a/src/main/java/org/bukkit/entity/Player.java\n++++ b/src/main/java/org/bukkit/entity/Player.java\n+@@ -30,7 +30,28 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a player, connected or not\n+  */\n+-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient {\n++public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified { // Paper\n++\n++    // Paper start\n++    @Override\n++    default @NotNull net.kyori.adventure.identity.Identity identity() {\n++        return net.kyori.adventure.identity.Identity.identity(this.getUniqueId());\n++    }\n++\n++    /**\n++     * Gets the \"friendly\" name to display of this player.\n++     *\n++     * @return the display name\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the \"friendly\" name to display of this player.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n+ \n+     /**\n+      * Gets the \"friendly\" name to display of this player. This may include\n+@@ -40,7 +61,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @return the friendly name\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     public String getDisplayName();\n+ \n+@@ -52,15 +75,51 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @param name The new display name.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setDisplayName(@Nullable String name);\n+ \n++    // Paper start\n++    /**\n++     * Sets the name that is shown on the in-game player list.\n++     * <p>\n++     * If the value is null, the name will be identical to {@link #getName()}.\n++     *\n++     * @param name new player list name\n++     */\n++    void playerListName(@Nullable net.kyori.adventure.text.Component name);\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListName();\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     * @deprecated in favour of {@link #playerListName()}\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListHeader();\n++\n++    /**\n++     * Gets the currently displayed player list footer for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListFooter();\n++    // Paper end\n+     /**\n+      * Gets the name that is shown on the player list.\n+      *\n+      * @return the player list name\n++     * @deprecated in favour of {@link #playerListName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getPlayerListName();\n+ \n+     /**\n+@@ -69,14 +128,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * If the value is null, the name will be identical to {@link #getName()}.\n+      *\n+      * @param name new player list name\n++     * @deprecated in favour of {@link #playerListName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListName(@Nullable String name);\n+ \n+     /**\n+      * Gets the currently displayed player list header for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListHeader()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListHeader();\n+ \n+@@ -84,7 +147,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Gets the currently displayed player list footer for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListFooter()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListFooter();\n+ \n+@@ -92,14 +157,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Sets the currently displayed player list header for this player.\n+      *\n+      * @param header player list header, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeader(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeader(@Nullable String header);\n+ \n+     /**\n+      * Sets the currently displayed player list footer for this player.\n+      *\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListFooter(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListFooter(@Nullable String footer);\n+ \n+     /**\n+@@ -108,7 +177,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      *\n+      * @param header player list header, null for empty\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeaderFooter(@Nullable String header, @Nullable String footer);\n+ \n+     /**\n+@@ -146,9 +217,20 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Kicks player with custom kick message.\n+      *\n+      * @param message kick message\n++     * @deprecated in favour of {@link #kick(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void kickPlayer(@Nullable String message);\n+ \n++    // Paper start\n++    /**\n++     * Kicks player with custom kick message.\n++     *\n++     * @param message kick message\n++     */\n++    void kick(final @Nullable net.kyori.adventure.text.Component message);\n++    // Paper end\n++\n+     /**\n+      * Says a message (or runs a command).\n+      *\n+@@ -437,6 +519,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+     @Deprecated\n+     public boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, @NotNull byte[] data);\n+ \n++    // Paper start\n+     /**\n+      * Send a sign change. This fakes a sign change packet for a user at\n+      * a certain location. This will not actually change the world in any way.\n+@@ -452,6 +535,43 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n+      */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines) throws IllegalArgumentException;\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @param  dyeColor the color of the sign\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if dyeColor is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n++    // Paper end\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List)}\n++     */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines) throws IllegalArgumentException;\n+ \n+ \n+@@ -471,7 +591,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if dyeColor is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List, org.bukkit.DyeColor)}\n+      */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -1258,6 +1380,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public int getClientViewDistance();\n+ \n++    // Paper start\n++    /**\n++     * Gets the player's current locale.\n++     *\n++     * @return the player's locale\n++     */\n++    @NotNull java.util.Locale locale();\n++    // Paper end\n+     /**\n+      * Gets the player's current locale.\n+      *\n+@@ -1268,8 +1398,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * they wish.\n+      *\n+      * @return the player's locale\n++     * @deprecated in favour of {@link #locale()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLocale();\n+ \n+     /**\n+@@ -1287,6 +1419,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public void openBook(@NotNull ItemStack book);\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ba791c59c739c918aadb274911e2578fd64fcf"}, "originalPosition": 1105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg4MzQ2OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTowMTowNlrOIMzZMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTowMTowNlrOIMzZMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NTg1OQ==", "bodyText": "https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.8\n\nThe dollar sign should be used only in mechanically generated source code or, rarely, to access pre-existing names on legacy systems.", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550295859", "createdAt": "2020-12-30T19:01:06Z", "author": {"login": "Proximyst"}, "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "diffHunk": "@@ -0,0 +1,1062 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Jake Potrebic <jake.m.potrebic@gmail.com>\n+Date: Sat, 5 Dec 2020 11:21:57 -0800\n+Subject: [PATCH] Adventure Events\n+\n+\n+diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+index 7190db11eff7d48df8a99f405a9dbaefdfa76e3d..1268066e30ddb0cd3792ea4b3de894eb04196669 100644\n+--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n++++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+@@ -16,12 +16,25 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+     private boolean cancel = false;\n+     private final Player player;\n+-    private final String[] lines;\n++    // Paper start\n++    private final java.util.List<net.kyori.adventure.text.Component> adventure$lines;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ba791c59c739c918aadb274911e2578fd64fcf"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg4NjUzOnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTowMzowNlrOIMzbEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjo0MToxM1rOINROAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NjMzNg==", "bodyText": "AFAIK Kyori stuff doesn't like nulls. Does this return null upon null input?", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550296336", "createdAt": "2020-12-30T19:03:06Z", "author": {"login": "Proximyst"}, "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "diffHunk": "@@ -0,0 +1,1062 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Jake Potrebic <jake.m.potrebic@gmail.com>\n+Date: Sat, 5 Dec 2020 11:21:57 -0800\n+Subject: [PATCH] Adventure Events\n+\n+\n+diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+index 7190db11eff7d48df8a99f405a9dbaefdfa76e3d..1268066e30ddb0cd3792ea4b3de894eb04196669 100644\n+--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n++++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+@@ -16,12 +16,25 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+     private boolean cancel = false;\n+     private final Player player;\n+-    private final String[] lines;\n++    // Paper start\n++    private final java.util.List<net.kyori.adventure.text.Component> adventure$lines;\n+ \n++    public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player player, @NotNull final java.util.List<net.kyori.adventure.text.Component> adventure$lines) {\n++        super(theBlock);\n++        this.player = player;\n++        this.adventure$lines = adventure$lines;\n++    }\n++\n++    @Deprecated // Paper end\n+     public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player thePlayer, @NotNull final String[] theLines) {\n+         super(theBlock);\n+         this.player = thePlayer;\n+-        this.lines = theLines;\n++        // Paper start\n++        this.adventure$lines = new java.util.ArrayList<>();\n++        for (String theLine : theLines) {\n++            this.adventure$lines.add(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(theLine));\n++        }\n++        // Paper end\n+     }\n+ \n+     /**\n+@@ -34,14 +47,52 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+         return player;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets all of the lines of text from the sign involved in this event.\n++     *\n++     * @return the String array for the sign's lines new text\n++     */\n++    public @NotNull java.util.List<net.kyori.adventure.text.Component> lines() {\n++        return this.adventure$lines;\n++    }\n++\n++    /**\n++     * Gets a single line of text from the sign involved in this event.\n++     *\n++     * @param index index of the line to get\n++     * @return the String containing the line of text associated with the\n++     *     provided index\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public @Nullable net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException {\n++        return this.adventure$lines.get(index);\n++    }\n++\n++    /**\n++     * Sets a single line for the sign involved in this event\n++     *\n++     * @param index index of the line to set\n++     * @param line text to set\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public void line(int index, @Nullable net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {\n++        this.adventure$lines.set(index, line);\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets all of the lines of text from the sign involved in this event.\n+      *\n+      * @return the String array for the sign's lines new text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines() {\n+-        return lines;\n++        return adventure$lines.stream().map(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()::serialize).toArray(String[]::new); // Paper\n+     }\n+ \n+     /**\n+@@ -52,10 +103,12 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      *     provided index\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException {\n+-        return lines[index];\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.adventure$lines.get(index)); // Paper\n+     }\n+ \n+     /**\n+@@ -65,9 +118,11 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      * @param line text to set\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @Nullable String line) throws IndexOutOfBoundsException {\n+-        lines[index] = line;\n++        adventure$lines.set(index, line != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line) : null); // Paper\n+     }\n+ \n+     @Override\n+diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+index 07a52441a5cdd7e428a14b286d7cb5210e3efa97..46fcabf9e48907462f785a2e7ccd9fda8ece8206 100644\n+--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n++++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+@@ -11,26 +11,46 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerDeathEvent extends EntityDeathEvent {\n+     private int newExp = 0;\n+-    private String deathMessage = \"\";\n++    private net.kyori.adventure.text.Component deathMessage; // Paper\n+     private int newLevel = 0;\n+     private int newTotalExp = 0;\n+     private boolean keepLevel = false;\n+     private boolean keepInventory = false;\n++    // Paper start\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, 0, deathMessage);\n++    }\n++\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n++    }\n+ \n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        super(player, drops, droppedExp);\n++        this.newExp = newExp;\n++        this.newTotalExp = newTotalExp;\n++        this.newLevel = newLevel;\n++        this.deathMessage = deathMessage;\n++    }\n++    // Paper end\n++\n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final String deathMessage) {\n+         super(player, drops, droppedExp);\n+         this.newExp = newExp;\n+         this.newTotalExp = newTotalExp;\n+         this.newLevel = newLevel;\n+-        this.deathMessage = deathMessage;\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+@@ -39,12 +59,13 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+         return (Player) entity;\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Set the death message that will appear to everyone on the server.\n+      *\n+      * @param deathMessage Message to appear to other players on the server.\n+      */\n+-    public void setDeathMessage(@Nullable String deathMessage) {\n++    public void deathMessage(@Nullable net.kyori.adventure.text.Component deathMessage) {\n+         this.deathMessage = deathMessage;\n+     }\n+ \n+@@ -53,9 +74,32 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+      *\n+      * @return Message to appear to other players on the server.\n+      */\n++    public @Nullable net.kyori.adventure.text.Component deathMessage() {\n++        return this.deathMessage;\n++    }\n++    // Paper end\n++\n++    /**\n++     * Set the death message that will appear to everyone on the server.\n++     *\n++     * @param deathMessage Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setDeathMessage(@Nullable String deathMessage) {\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n++    }\n++\n++    /**\n++     * Get the death message that will appear to everyone on the server.\n++     *\n++     * @return Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage()}\n++     */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getDeathMessage() {\n+-        return deathMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.deathMessage); // Paper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ba791c59c739c918aadb274911e2578fd64fcf"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4NDUxMg==", "bodyText": "This will broken, will throw if deathMessage is null", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550784512", "createdAt": "2021-01-01T16:41:13Z", "author": {"login": "Electroid"}, "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "diffHunk": "@@ -0,0 +1,1062 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Jake Potrebic <jake.m.potrebic@gmail.com>\n+Date: Sat, 5 Dec 2020 11:21:57 -0800\n+Subject: [PATCH] Adventure Events\n+\n+\n+diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+index 7190db11eff7d48df8a99f405a9dbaefdfa76e3d..1268066e30ddb0cd3792ea4b3de894eb04196669 100644\n+--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n++++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+@@ -16,12 +16,25 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+     private boolean cancel = false;\n+     private final Player player;\n+-    private final String[] lines;\n++    // Paper start\n++    private final java.util.List<net.kyori.adventure.text.Component> adventure$lines;\n+ \n++    public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player player, @NotNull final java.util.List<net.kyori.adventure.text.Component> adventure$lines) {\n++        super(theBlock);\n++        this.player = player;\n++        this.adventure$lines = adventure$lines;\n++    }\n++\n++    @Deprecated // Paper end\n+     public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player thePlayer, @NotNull final String[] theLines) {\n+         super(theBlock);\n+         this.player = thePlayer;\n+-        this.lines = theLines;\n++        // Paper start\n++        this.adventure$lines = new java.util.ArrayList<>();\n++        for (String theLine : theLines) {\n++            this.adventure$lines.add(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(theLine));\n++        }\n++        // Paper end\n+     }\n+ \n+     /**\n+@@ -34,14 +47,52 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+         return player;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets all of the lines of text from the sign involved in this event.\n++     *\n++     * @return the String array for the sign's lines new text\n++     */\n++    public @NotNull java.util.List<net.kyori.adventure.text.Component> lines() {\n++        return this.adventure$lines;\n++    }\n++\n++    /**\n++     * Gets a single line of text from the sign involved in this event.\n++     *\n++     * @param index index of the line to get\n++     * @return the String containing the line of text associated with the\n++     *     provided index\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public @Nullable net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException {\n++        return this.adventure$lines.get(index);\n++    }\n++\n++    /**\n++     * Sets a single line for the sign involved in this event\n++     *\n++     * @param index index of the line to set\n++     * @param line text to set\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public void line(int index, @Nullable net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {\n++        this.adventure$lines.set(index, line);\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets all of the lines of text from the sign involved in this event.\n+      *\n+      * @return the String array for the sign's lines new text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines() {\n+-        return lines;\n++        return adventure$lines.stream().map(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()::serialize).toArray(String[]::new); // Paper\n+     }\n+ \n+     /**\n+@@ -52,10 +103,12 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      *     provided index\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException {\n+-        return lines[index];\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.adventure$lines.get(index)); // Paper\n+     }\n+ \n+     /**\n+@@ -65,9 +118,11 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      * @param line text to set\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @Nullable String line) throws IndexOutOfBoundsException {\n+-        lines[index] = line;\n++        adventure$lines.set(index, line != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line) : null); // Paper\n+     }\n+ \n+     @Override\n+diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+index 07a52441a5cdd7e428a14b286d7cb5210e3efa97..46fcabf9e48907462f785a2e7ccd9fda8ece8206 100644\n+--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n++++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+@@ -11,26 +11,46 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerDeathEvent extends EntityDeathEvent {\n+     private int newExp = 0;\n+-    private String deathMessage = \"\";\n++    private net.kyori.adventure.text.Component deathMessage; // Paper\n+     private int newLevel = 0;\n+     private int newTotalExp = 0;\n+     private boolean keepLevel = false;\n+     private boolean keepInventory = false;\n++    // Paper start\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, 0, deathMessage);\n++    }\n++\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n++    }\n+ \n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        super(player, drops, droppedExp);\n++        this.newExp = newExp;\n++        this.newTotalExp = newTotalExp;\n++        this.newLevel = newLevel;\n++        this.deathMessage = deathMessage;\n++    }\n++    // Paper end\n++\n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final String deathMessage) {\n+         super(player, drops, droppedExp);\n+         this.newExp = newExp;\n+         this.newTotalExp = newTotalExp;\n+         this.newLevel = newLevel;\n+-        this.deathMessage = deathMessage;\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+@@ -39,12 +59,13 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+         return (Player) entity;\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Set the death message that will appear to everyone on the server.\n+      *\n+      * @param deathMessage Message to appear to other players on the server.\n+      */\n+-    public void setDeathMessage(@Nullable String deathMessage) {\n++    public void deathMessage(@Nullable net.kyori.adventure.text.Component deathMessage) {\n+         this.deathMessage = deathMessage;\n+     }\n+ \n+@@ -53,9 +74,32 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+      *\n+      * @return Message to appear to other players on the server.\n+      */\n++    public @Nullable net.kyori.adventure.text.Component deathMessage() {\n++        return this.deathMessage;\n++    }\n++    // Paper end\n++\n++    /**\n++     * Set the death message that will appear to everyone on the server.\n++     *\n++     * @param deathMessage Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setDeathMessage(@Nullable String deathMessage) {\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n++    }\n++\n++    /**\n++     * Get the death message that will appear to everyone on the server.\n++     *\n++     * @return Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage()}\n++     */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getDeathMessage() {\n+-        return deathMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.deathMessage); // Paper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NjMzNg=="}, "originalCommit": {"oid": "c2ba791c59c739c918aadb274911e2578fd64fcf"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg4ODY2OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTowNDowNlrOIMzcKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTowNDowNlrOIMzcKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NjYxOA==", "bodyText": "Why is this nullable if the previous code was notnull?", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550296618", "createdAt": "2020-12-30T19:04:06Z", "author": {"login": "Proximyst"}, "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "diffHunk": "@@ -0,0 +1,1062 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Jake Potrebic <jake.m.potrebic@gmail.com>\n+Date: Sat, 5 Dec 2020 11:21:57 -0800\n+Subject: [PATCH] Adventure Events\n+\n+\n+diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+index 7190db11eff7d48df8a99f405a9dbaefdfa76e3d..1268066e30ddb0cd3792ea4b3de894eb04196669 100644\n+--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n++++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+@@ -16,12 +16,25 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+     private boolean cancel = false;\n+     private final Player player;\n+-    private final String[] lines;\n++    // Paper start\n++    private final java.util.List<net.kyori.adventure.text.Component> adventure$lines;\n+ \n++    public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player player, @NotNull final java.util.List<net.kyori.adventure.text.Component> adventure$lines) {\n++        super(theBlock);\n++        this.player = player;\n++        this.adventure$lines = adventure$lines;\n++    }\n++\n++    @Deprecated // Paper end\n+     public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player thePlayer, @NotNull final String[] theLines) {\n+         super(theBlock);\n+         this.player = thePlayer;\n+-        this.lines = theLines;\n++        // Paper start\n++        this.adventure$lines = new java.util.ArrayList<>();\n++        for (String theLine : theLines) {\n++            this.adventure$lines.add(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(theLine));\n++        }\n++        // Paper end\n+     }\n+ \n+     /**\n+@@ -34,14 +47,52 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+         return player;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets all of the lines of text from the sign involved in this event.\n++     *\n++     * @return the String array for the sign's lines new text\n++     */\n++    public @NotNull java.util.List<net.kyori.adventure.text.Component> lines() {\n++        return this.adventure$lines;\n++    }\n++\n++    /**\n++     * Gets a single line of text from the sign involved in this event.\n++     *\n++     * @param index index of the line to get\n++     * @return the String containing the line of text associated with the\n++     *     provided index\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public @Nullable net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException {\n++        return this.adventure$lines.get(index);\n++    }\n++\n++    /**\n++     * Sets a single line for the sign involved in this event\n++     *\n++     * @param index index of the line to set\n++     * @param line text to set\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public void line(int index, @Nullable net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {\n++        this.adventure$lines.set(index, line);\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets all of the lines of text from the sign involved in this event.\n+      *\n+      * @return the String array for the sign's lines new text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines() {\n+-        return lines;\n++        return adventure$lines.stream().map(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()::serialize).toArray(String[]::new); // Paper\n+     }\n+ \n+     /**\n+@@ -52,10 +103,12 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      *     provided index\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException {\n+-        return lines[index];\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.adventure$lines.get(index)); // Paper\n+     }\n+ \n+     /**\n+@@ -65,9 +118,11 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      * @param line text to set\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @Nullable String line) throws IndexOutOfBoundsException {\n+-        lines[index] = line;\n++        adventure$lines.set(index, line != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line) : null); // Paper\n+     }\n+ \n+     @Override\n+diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+index 07a52441a5cdd7e428a14b286d7cb5210e3efa97..46fcabf9e48907462f785a2e7ccd9fda8ece8206 100644\n+--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n++++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+@@ -11,26 +11,46 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerDeathEvent extends EntityDeathEvent {\n+     private int newExp = 0;\n+-    private String deathMessage = \"\";\n++    private net.kyori.adventure.text.Component deathMessage; // Paper\n+     private int newLevel = 0;\n+     private int newTotalExp = 0;\n+     private boolean keepLevel = false;\n+     private boolean keepInventory = false;\n++    // Paper start\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, 0, deathMessage);\n++    }\n++\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n++    }\n+ \n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        super(player, drops, droppedExp);\n++        this.newExp = newExp;\n++        this.newTotalExp = newTotalExp;\n++        this.newLevel = newLevel;\n++        this.deathMessage = deathMessage;\n++    }\n++    // Paper end\n++\n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final String deathMessage) {\n+         super(player, drops, droppedExp);\n+         this.newExp = newExp;\n+         this.newTotalExp = newTotalExp;\n+         this.newLevel = newLevel;\n+-        this.deathMessage = deathMessage;\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+@@ -39,12 +59,13 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+         return (Player) entity;\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Set the death message that will appear to everyone on the server.\n+      *\n+      * @param deathMessage Message to appear to other players on the server.\n+      */\n+-    public void setDeathMessage(@Nullable String deathMessage) {\n++    public void deathMessage(@Nullable net.kyori.adventure.text.Component deathMessage) {\n+         this.deathMessage = deathMessage;\n+     }\n+ \n+@@ -53,9 +74,32 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+      *\n+      * @return Message to appear to other players on the server.\n+      */\n++    public @Nullable net.kyori.adventure.text.Component deathMessage() {\n++        return this.deathMessage;\n++    }\n++    // Paper end\n++\n++    /**\n++     * Set the death message that will appear to everyone on the server.\n++     *\n++     * @param deathMessage Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setDeathMessage(@Nullable String deathMessage) {\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n++    }\n++\n++    /**\n++     * Get the death message that will appear to everyone on the server.\n++     *\n++     * @return Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage()}\n++     */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getDeathMessage() {\n+-        return deathMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.deathMessage); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n+index c8384da69af61e1970f254a3a9c206ee81d7a989..992d1025ca02020e87a9ab5db83d249427f41d69 100644\n+--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n++++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n+@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;\n+ public class AsyncPlayerPreLoginEvent extends Event {\n+     private static final HandlerList handlers = new HandlerList();\n+     private Result result;\n+-    private String message;\n++    private net.kyori.adventure.text.Component message; // Paper\n+     private final String name;\n+     private final InetAddress ipAddress;\n+     private final UUID uniqueId;\n+@@ -27,7 +27,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+     public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final UUID uniqueId) {\n+         super(true);\n+         this.result = Result.ALLOWED;\n+-        this.message = \"\";\n++        this.message = net.kyori.adventure.text.Component.empty(); // Paper\n+         this.name = name;\n+         this.ipAddress = ipAddress;\n+         this.uniqueId = uniqueId;\n+@@ -79,6 +79,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+         this.result = result == null ? null : Result.valueOf(result.name());\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Gets the current kick message that will be used if getResult() !=\n+      * Result.ALLOWED\n+@@ -86,7 +87,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      * @return Current kick message\n+      */\n+     @NotNull\n+-    public String getKickMessage() {\n++    public net.kyori.adventure.text.Component kickMessage() {\n+         return message;\n+     }\n+ \n+@@ -95,16 +96,66 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      *\n+      * @param message New kick message\n+      */\n+-    public void setKickMessage(@NotNull final String message) {\n++    public void kickMessage(@NotNull final net.kyori.adventure.text.Component message) {\n++        this.message = message;\n++    }\n++\n++    /**\n++     * Disallows the player from logging in, with the given reason\n++     *\n++     * @param result New result for disallowing the player\n++     * @param message Kick message to display to the user\n++     */\n++    public void disallow(@NotNull final Result result, @NotNull final net.kyori.adventure.text.Component message) {\n++        this.result = result;\n+         this.message = message;\n+     }\n+ \n++    /**\n++     * Disallows the player from logging in, with the given reason\n++     *\n++     * @param result New result for disallowing the player\n++     * @param message Kick message to display to the user\n++     * @deprecated This method uses a deprecated enum from {@link\n++     *     PlayerPreLoginEvent}\n++     * @see #disallow(Result, String)\n++     */\n++    @Deprecated\n++    public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final net.kyori.adventure.text.Component message) {\n++        this.result = result == null ? null : Result.valueOf(result.name());\n++        this.message = message;\n++    }\n++    // Paper end\n++    /**\n++     * Gets the current kick message that will be used if getResult() !=\n++     * Result.ALLOWED\n++     *\n++     * @return Current kick message\n++     * @deprecated in favour of {@link #kickMessage()}\n++     */\n++    @NotNull\n++    @Deprecated // Paper\n++    public String getKickMessage() {\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.message); // Paper\n++    }\n++\n++    /**\n++     * Sets the kick message to display if getResult() != Result.ALLOWED\n++     *\n++     * @param message New kick message\n++     * @deprecated in favour of {@link #kickMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setKickMessage(@NotNull final String message) {\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n++    }\n++\n+     /**\n+      * Allows the player to log in\n+      */\n+     public void allow() {\n+         result = Result.ALLOWED;\n+-        message = \"\";\n++        message = net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     /**\n+@@ -112,10 +163,12 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      *\n+      * @param result New result for disallowing the player\n+      * @param message Kick message to display to the user\n++     * @deprecated in favour of {@link #disallow(org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void disallow(@NotNull final Result result, @NotNull final String message) {\n+         this.result = result;\n+-        this.message = message;\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n+     }\n+ \n+     /**\n+@@ -130,7 +183,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+     @Deprecated\n+     public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final String message) {\n+         this.result = result == null ? null : Result.valueOf(result.name());\n+-        this.message = message;\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n+index d06684aba7688ce06777dbd837a46856a9d7767f..b69b7509599a0d9a260d30585605c914b8e0d67c 100644\n+--- a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n++++ b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n+@@ -10,30 +10,60 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerJoinEvent extends PlayerEvent {\n+     private static final HandlerList handlers = new HandlerList();\n+-    private String joinMessage;\n++    // Paper start\n++    private net.kyori.adventure.text.Component joinMessage;\n++    public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final net.kyori.adventure.text.Component joinMessage) {\n++        super(playerJoined);\n++        this.joinMessage = joinMessage;\n++    }\n+ \n++    @Deprecated // Paper end\n+     public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final String joinMessage) {\n+         super(playerJoined);\n++        this.joinMessage = joinMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage) : net.kyori.adventure.text.Component.empty(); // Paper end\n++    }\n++\n++    // Paper start\n++    /**\n++     * Gets the join message to send to all online players\n++     *\n++     * @return string join message. Can be null\n++     */\n++    public @Nullable net.kyori.adventure.text.Component joinMessage() {\n++        return this.joinMessage;\n++    }\n++\n++    /**\n++     * Sets the join message to send to all online players\n++     *\n++     * @param joinMessage join message. If null, no message will be sent\n++     */\n++    public void joinMessage(@Nullable net.kyori.adventure.text.Component joinMessage) {\n+         this.joinMessage = joinMessage;\n+     }\n++    // Paper end\n+ \n+     /**\n+      * Gets the join message to send to all online players\n+      *\n+      * @return string join message. Can be null\n++     * @deprecated in favour of {@link #joinMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getJoinMessage() {\n+-        return joinMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.joinMessage); // Paper\n+     }\n+ \n+     /**\n+      * Sets the join message to send to all online players\n+      *\n+      * @param joinMessage join message. If null, no message will be sent\n++     * @deprecated in favour of {@link #joinMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setJoinMessage(@Nullable String joinMessage) {\n+-        this.joinMessage = joinMessage;\n++        this.joinMessage = joinMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n+index 14c337f15fc804f52e52cb0a185aad38d89303a8..f50d7182f3b2729ff20dd1903e7b3483b9a5fa9e 100644\n+--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n++++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n+@@ -10,35 +10,84 @@ import org.jetbrains.annotations.NotNull;\n+  */\n+ public class PlayerKickEvent extends PlayerEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+-    private String leaveMessage;\n+-    private String kickReason;\n++    private net.kyori.adventure.text.Component leaveMessage; // Paper\n++    private net.kyori.adventure.text.Component kickReason; // Paper\n+     private Boolean cancel;\n+ \n++    @Deprecated // Paper\n+     public PlayerKickEvent(@NotNull final Player playerKicked, @NotNull final String kickReason, @NotNull final String leaveMessage) {\n++        super(playerKicked);\n++        this.kickReason = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(kickReason); // Paper\n++        this.leaveMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(leaveMessage); // Paper\n++        this.cancel = false;\n++    }\n++    // Paper start\n++    public PlayerKickEvent(@NotNull final Player playerKicked, @NotNull final net.kyori.adventure.text.Component kickReason, @NotNull final net.kyori.adventure.text.Component leaveMessage) {\n+         super(playerKicked);\n+         this.kickReason = kickReason;\n+         this.leaveMessage = leaveMessage;\n+         this.cancel = false;\n+     }\n+ \n++    /**\n++     * Gets the leave message send to all online players\n++     *\n++     * @return string kick reason\n++     */\n++    public @org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component leaveMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ba791c59c739c918aadb274911e2578fd64fcf"}, "originalPosition": 455}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTg4OTc4OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTowNDoyNFrOIMzcsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTowNDoyNFrOIMzcsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5Njc1Mw==", "bodyText": "The dollar sign should be used only in mechanically generated source code or, rarely, to access pre-existing names on legacy systems.", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550296753", "createdAt": "2020-12-30T19:04:24Z", "author": {"login": "Proximyst"}, "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "diffHunk": "@@ -0,0 +1,1062 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Jake Potrebic <jake.m.potrebic@gmail.com>\n+Date: Sat, 5 Dec 2020 11:21:57 -0800\n+Subject: [PATCH] Adventure Events\n+\n+\n+diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+index 7190db11eff7d48df8a99f405a9dbaefdfa76e3d..1268066e30ddb0cd3792ea4b3de894eb04196669 100644\n+--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n++++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+@@ -16,12 +16,25 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+     private boolean cancel = false;\n+     private final Player player;\n+-    private final String[] lines;\n++    // Paper start\n++    private final java.util.List<net.kyori.adventure.text.Component> adventure$lines;\n+ \n++    public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player player, @NotNull final java.util.List<net.kyori.adventure.text.Component> adventure$lines) {\n++        super(theBlock);\n++        this.player = player;\n++        this.adventure$lines = adventure$lines;\n++    }\n++\n++    @Deprecated // Paper end\n+     public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player thePlayer, @NotNull final String[] theLines) {\n+         super(theBlock);\n+         this.player = thePlayer;\n+-        this.lines = theLines;\n++        // Paper start\n++        this.adventure$lines = new java.util.ArrayList<>();\n++        for (String theLine : theLines) {\n++            this.adventure$lines.add(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(theLine));\n++        }\n++        // Paper end\n+     }\n+ \n+     /**\n+@@ -34,14 +47,52 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+         return player;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets all of the lines of text from the sign involved in this event.\n++     *\n++     * @return the String array for the sign's lines new text\n++     */\n++    public @NotNull java.util.List<net.kyori.adventure.text.Component> lines() {\n++        return this.adventure$lines;\n++    }\n++\n++    /**\n++     * Gets a single line of text from the sign involved in this event.\n++     *\n++     * @param index index of the line to get\n++     * @return the String containing the line of text associated with the\n++     *     provided index\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public @Nullable net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException {\n++        return this.adventure$lines.get(index);\n++    }\n++\n++    /**\n++     * Sets a single line for the sign involved in this event\n++     *\n++     * @param index index of the line to set\n++     * @param line text to set\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public void line(int index, @Nullable net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {\n++        this.adventure$lines.set(index, line);\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets all of the lines of text from the sign involved in this event.\n+      *\n+      * @return the String array for the sign's lines new text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines() {\n+-        return lines;\n++        return adventure$lines.stream().map(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()::serialize).toArray(String[]::new); // Paper\n+     }\n+ \n+     /**\n+@@ -52,10 +103,12 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      *     provided index\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException {\n+-        return lines[index];\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.adventure$lines.get(index)); // Paper\n+     }\n+ \n+     /**\n+@@ -65,9 +118,11 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      * @param line text to set\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @Nullable String line) throws IndexOutOfBoundsException {\n+-        lines[index] = line;\n++        adventure$lines.set(index, line != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line) : null); // Paper\n+     }\n+ \n+     @Override\n+diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+index 07a52441a5cdd7e428a14b286d7cb5210e3efa97..46fcabf9e48907462f785a2e7ccd9fda8ece8206 100644\n+--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n++++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+@@ -11,26 +11,46 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerDeathEvent extends EntityDeathEvent {\n+     private int newExp = 0;\n+-    private String deathMessage = \"\";\n++    private net.kyori.adventure.text.Component deathMessage; // Paper\n+     private int newLevel = 0;\n+     private int newTotalExp = 0;\n+     private boolean keepLevel = false;\n+     private boolean keepInventory = false;\n++    // Paper start\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, 0, deathMessage);\n++    }\n++\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n++    }\n+ \n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        super(player, drops, droppedExp);\n++        this.newExp = newExp;\n++        this.newTotalExp = newTotalExp;\n++        this.newLevel = newLevel;\n++        this.deathMessage = deathMessage;\n++    }\n++    // Paper end\n++\n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final String deathMessage) {\n+         super(player, drops, droppedExp);\n+         this.newExp = newExp;\n+         this.newTotalExp = newTotalExp;\n+         this.newLevel = newLevel;\n+-        this.deathMessage = deathMessage;\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+@@ -39,12 +59,13 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+         return (Player) entity;\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Set the death message that will appear to everyone on the server.\n+      *\n+      * @param deathMessage Message to appear to other players on the server.\n+      */\n+-    public void setDeathMessage(@Nullable String deathMessage) {\n++    public void deathMessage(@Nullable net.kyori.adventure.text.Component deathMessage) {\n+         this.deathMessage = deathMessage;\n+     }\n+ \n+@@ -53,9 +74,32 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+      *\n+      * @return Message to appear to other players on the server.\n+      */\n++    public @Nullable net.kyori.adventure.text.Component deathMessage() {\n++        return this.deathMessage;\n++    }\n++    // Paper end\n++\n++    /**\n++     * Set the death message that will appear to everyone on the server.\n++     *\n++     * @param deathMessage Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setDeathMessage(@Nullable String deathMessage) {\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n++    }\n++\n++    /**\n++     * Get the death message that will appear to everyone on the server.\n++     *\n++     * @return Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage()}\n++     */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getDeathMessage() {\n+-        return deathMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.deathMessage); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n+index c8384da69af61e1970f254a3a9c206ee81d7a989..992d1025ca02020e87a9ab5db83d249427f41d69 100644\n+--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n++++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n+@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;\n+ public class AsyncPlayerPreLoginEvent extends Event {\n+     private static final HandlerList handlers = new HandlerList();\n+     private Result result;\n+-    private String message;\n++    private net.kyori.adventure.text.Component message; // Paper\n+     private final String name;\n+     private final InetAddress ipAddress;\n+     private final UUID uniqueId;\n+@@ -27,7 +27,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+     public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final UUID uniqueId) {\n+         super(true);\n+         this.result = Result.ALLOWED;\n+-        this.message = \"\";\n++        this.message = net.kyori.adventure.text.Component.empty(); // Paper\n+         this.name = name;\n+         this.ipAddress = ipAddress;\n+         this.uniqueId = uniqueId;\n+@@ -79,6 +79,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+         this.result = result == null ? null : Result.valueOf(result.name());\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Gets the current kick message that will be used if getResult() !=\n+      * Result.ALLOWED\n+@@ -86,7 +87,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      * @return Current kick message\n+      */\n+     @NotNull\n+-    public String getKickMessage() {\n++    public net.kyori.adventure.text.Component kickMessage() {\n+         return message;\n+     }\n+ \n+@@ -95,16 +96,66 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      *\n+      * @param message New kick message\n+      */\n+-    public void setKickMessage(@NotNull final String message) {\n++    public void kickMessage(@NotNull final net.kyori.adventure.text.Component message) {\n++        this.message = message;\n++    }\n++\n++    /**\n++     * Disallows the player from logging in, with the given reason\n++     *\n++     * @param result New result for disallowing the player\n++     * @param message Kick message to display to the user\n++     */\n++    public void disallow(@NotNull final Result result, @NotNull final net.kyori.adventure.text.Component message) {\n++        this.result = result;\n+         this.message = message;\n+     }\n+ \n++    /**\n++     * Disallows the player from logging in, with the given reason\n++     *\n++     * @param result New result for disallowing the player\n++     * @param message Kick message to display to the user\n++     * @deprecated This method uses a deprecated enum from {@link\n++     *     PlayerPreLoginEvent}\n++     * @see #disallow(Result, String)\n++     */\n++    @Deprecated\n++    public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final net.kyori.adventure.text.Component message) {\n++        this.result = result == null ? null : Result.valueOf(result.name());\n++        this.message = message;\n++    }\n++    // Paper end\n++    /**\n++     * Gets the current kick message that will be used if getResult() !=\n++     * Result.ALLOWED\n++     *\n++     * @return Current kick message\n++     * @deprecated in favour of {@link #kickMessage()}\n++     */\n++    @NotNull\n++    @Deprecated // Paper\n++    public String getKickMessage() {\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.message); // Paper\n++    }\n++\n++    /**\n++     * Sets the kick message to display if getResult() != Result.ALLOWED\n++     *\n++     * @param message New kick message\n++     * @deprecated in favour of {@link #kickMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setKickMessage(@NotNull final String message) {\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n++    }\n++\n+     /**\n+      * Allows the player to log in\n+      */\n+     public void allow() {\n+         result = Result.ALLOWED;\n+-        message = \"\";\n++        message = net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     /**\n+@@ -112,10 +163,12 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      *\n+      * @param result New result for disallowing the player\n+      * @param message Kick message to display to the user\n++     * @deprecated in favour of {@link #disallow(org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void disallow(@NotNull final Result result, @NotNull final String message) {\n+         this.result = result;\n+-        this.message = message;\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n+     }\n+ \n+     /**\n+@@ -130,7 +183,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+     @Deprecated\n+     public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final String message) {\n+         this.result = result == null ? null : Result.valueOf(result.name());\n+-        this.message = message;\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n+index d06684aba7688ce06777dbd837a46856a9d7767f..b69b7509599a0d9a260d30585605c914b8e0d67c 100644\n+--- a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n++++ b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n+@@ -10,30 +10,60 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerJoinEvent extends PlayerEvent {\n+     private static final HandlerList handlers = new HandlerList();\n+-    private String joinMessage;\n++    // Paper start\n++    private net.kyori.adventure.text.Component joinMessage;\n++    public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final net.kyori.adventure.text.Component joinMessage) {\n++        super(playerJoined);\n++        this.joinMessage = joinMessage;\n++    }\n+ \n++    @Deprecated // Paper end\n+     public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final String joinMessage) {\n+         super(playerJoined);\n++        this.joinMessage = joinMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage) : net.kyori.adventure.text.Component.empty(); // Paper end\n++    }\n++\n++    // Paper start\n++    /**\n++     * Gets the join message to send to all online players\n++     *\n++     * @return string join message. Can be null\n++     */\n++    public @Nullable net.kyori.adventure.text.Component joinMessage() {\n++        return this.joinMessage;\n++    }\n++\n++    /**\n++     * Sets the join message to send to all online players\n++     *\n++     * @param joinMessage join message. If null, no message will be sent\n++     */\n++    public void joinMessage(@Nullable net.kyori.adventure.text.Component joinMessage) {\n+         this.joinMessage = joinMessage;\n+     }\n++    // Paper end\n+ \n+     /**\n+      * Gets the join message to send to all online players\n+      *\n+      * @return string join message. Can be null\n++     * @deprecated in favour of {@link #joinMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getJoinMessage() {\n+-        return joinMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.joinMessage); // Paper\n+     }\n+ \n+     /**\n+      * Sets the join message to send to all online players\n+      *\n+      * @param joinMessage join message. If null, no message will be sent\n++     * @deprecated in favour of {@link #joinMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setJoinMessage(@Nullable String joinMessage) {\n+-        this.joinMessage = joinMessage;\n++        this.joinMessage = joinMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n+index 14c337f15fc804f52e52cb0a185aad38d89303a8..f50d7182f3b2729ff20dd1903e7b3483b9a5fa9e 100644\n+--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n++++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n+@@ -10,35 +10,84 @@ import org.jetbrains.annotations.NotNull;\n+  */\n+ public class PlayerKickEvent extends PlayerEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+-    private String leaveMessage;\n+-    private String kickReason;\n++    private net.kyori.adventure.text.Component leaveMessage; // Paper\n++    private net.kyori.adventure.text.Component kickReason; // Paper\n+     private Boolean cancel;\n+ \n++    @Deprecated // Paper\n+     public PlayerKickEvent(@NotNull final Player playerKicked, @NotNull final String kickReason, @NotNull final String leaveMessage) {\n++        super(playerKicked);\n++        this.kickReason = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(kickReason); // Paper\n++        this.leaveMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(leaveMessage); // Paper\n++        this.cancel = false;\n++    }\n++    // Paper start\n++    public PlayerKickEvent(@NotNull final Player playerKicked, @NotNull final net.kyori.adventure.text.Component kickReason, @NotNull final net.kyori.adventure.text.Component leaveMessage) {\n+         super(playerKicked);\n+         this.kickReason = kickReason;\n+         this.leaveMessage = leaveMessage;\n+         this.cancel = false;\n+     }\n+ \n++    /**\n++     * Gets the leave message send to all online players\n++     *\n++     * @return string kick reason\n++     */\n++    public @org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component leaveMessage() {\n++        return this.leaveMessage;\n++    }\n++\n++    /**\n++     * Sets the leave message send to all online players\n++     *\n++     * @param leaveMessage leave message\n++     */\n++    public void leaveMessage(@org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component leaveMessage) {\n++        this.leaveMessage = leaveMessage;\n++    }\n++\n+     /**\n+      * Gets the reason why the player is getting kicked\n+      *\n+      * @return string kick reason\n+      */\n++    public @org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component reason() {\n++        return this.kickReason;\n++    }\n++\n++    /**\n++     * Sets the reason why the player is getting kicked\n++     *\n++     * @param kickReason kick reason\n++     */\n++    public void reason(@org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component kickReason) {\n++        this.kickReason = kickReason;\n++    }\n++    // Paper end\n++\n++    /**\n++     * Gets the reason why the player is getting kicked\n++     *\n++     * @return string kick reason\n++     * @deprecated in favour of {@link #reason()}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getReason() {\n+-        return kickReason;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.kickReason); // Paper\n+     }\n+ \n+     /**\n+      * Gets the leave message send to all online players\n+      *\n+      * @return string kick reason\n++     * @deprecated in favour of {@link #leaveMessage()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLeaveMessage() {\n+-        return leaveMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.leaveMessage); // Paper\n+     }\n+ \n+     @Override\n+@@ -55,18 +104,22 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {\n+      * Sets the reason why the player is getting kicked\n+      *\n+      * @param kickReason kick reason\n++     * @deprecated in favour of {@link #reason(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setReason(@NotNull String kickReason) {\n+-        this.kickReason = kickReason;\n++        this.kickReason = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(kickReason); // Paper\n+     }\n+ \n+     /**\n+      * Sets the leave message send to all online players\n+      *\n+      * @param leaveMessage leave message\n++     * @deprecated in favour of {@link #leaveMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLeaveMessage(@NotNull String leaveMessage) {\n+-        this.leaveMessage = leaveMessage;\n++        this.leaveMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(leaveMessage); // Paper\n+     }\n+ \n+     @NotNull\n+diff --git a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java\n+index 1db386bb701cb6974daedc6bb5b93a3afbc42100..84521186404b8e43c81a2f9513dce2be40d27840 100644\n+--- a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java\n++++ b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java\n+@@ -12,18 +12,32 @@ public class PlayerLocaleChangeEvent extends PlayerEvent {\n+     private static final HandlerList handlers = new HandlerList();\n+     //\n+     private final String locale;\n++    // Paper start\n++    private final java.util.Locale adventure$locale;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ba791c59c739c918aadb274911e2578fd64fcf"}, "originalPosition": 548}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQwNzg4OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0005-Adventure.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjoyOTozNVrOINRKVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjoyOTozNVrOINRKVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4MzU3NA==", "bodyText": "Should BookMeta implement Adventure's Book, so it can be used with openBook?", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550783574", "createdAt": "2021-01-01T16:29:35Z", "author": {"login": "Electroid"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->\n+         <dependency>\n+             <groupId>it.unimi.dsi</groupId>\n+             <artifactId>fastutil</artifactId>\n+diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+index ef58a6c00f444bd498a2d8fc4e457236f393954f..ecd149157d4fb80444f34bf5633d74bcdb63dec5 100644\n+--- a/src/main/java/co/aikar/timings/TimingsReportListener.java\n++++ b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+ @SuppressWarnings(\"WeakerAccess\")\n+-public class TimingsReportListener implements MessageCommandSender {\n++public class TimingsReportListener implements net.kyori.adventure.audience.ForwardingAudience, MessageCommandSender { // Paper\n+     private final List<CommandSender> senders;\n+     private final Runnable onDone;\n+     private String timingsURL;\n+@@ -74,4 +74,17 @@ public class TimingsReportListener implements MessageCommandSender {\n+             this.senders.add(Bukkit.getConsoleSender());\n+         }\n+     }\n++\n++    // Paper start\n++    @Override\n++    public void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.senders;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java\n+index 7c715fdc11ab7837552b1fe3ffd08b31cec0a63b..426b1e83226e674ee4bf3ec05ddcd3ac4376b06d 100644\n+--- a/src/main/java/org/bukkit/Bukkit.java\n++++ b/src/main/java/org/bukkit/Bukkit.java\n+@@ -278,7 +278,9 @@ public final class Bukkit {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated in favour of {@link Server#sendMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public static int broadcastMessage(@NotNull String message) {\n+         return server.broadcastMessage(message);\n+     }\n+@@ -836,6 +838,7 @@ public final class Bukkit {\n+         server.shutdown();\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Broadcasts the specified message to every user with the given\n+      * permission name.\n+@@ -845,6 +848,21 @@ public final class Bukkit {\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n+      */\n++    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {\n++        return server.broadcast(message, permission);\n++    }\n++    // Paper end\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n++     */\n++    @Deprecated // Paper\n+     public static int broadcast(@NotNull String message, @NotNull String permission) {\n+         return server.broadcast(message, permission);\n+     }\n+@@ -1044,6 +1062,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, type);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -1069,6 +1088,38 @@ public final class Bukkit {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {\n++        return server.createInventory(owner, type, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {\n+         return server.createInventory(owner, type, title);\n+     }\n+@@ -1087,6 +1138,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, size);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -1099,10 +1151,30 @@ public final class Bukkit {\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {\n++        return server.createInventory(owner, size, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {\n+         return server.createInventory(owner, size, title);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+@@ -1110,7 +1182,20 @@ public final class Bukkit {\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n+      */\n++    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {\n++        return server.createMerchant(title);\n++    }\n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static Merchant createMerchant(@Nullable String title) {\n+         return server.createMerchant(title);\n+     }\n+@@ -1181,22 +1266,47 @@ public final class Bukkit {\n+         return server.isPrimaryThread();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull public static net.kyori.adventure.text.Component motd() {\n++        return server.motd();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static String getMotd() {\n+         return server.getMotd();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    public static @Nullable net.kyori.adventure.text.Component shutdownMessage() {\n++        return server.shutdownMessage();\n++    }\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public static String getShutdownMessage() {\n+         return server.getShutdownMessage();\n+     }\n+diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java\n+index fee814e01a653d2b53c56e8b566383ca44aa5346..2acdf2a6d3955923c721222b9da784f3278f6418 100644\n+--- a/src/main/java/org/bukkit/Nameable.java\n++++ b/src/main/java/org/bukkit/Nameable.java\n+@@ -4,6 +4,30 @@ import org.jetbrains.annotations.Nullable;\n+ \n+ public interface Nameable {\n+ \n++    // Paper start\n++    /**\n++     * Gets the custom name.\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @return the custom name\n++     */\n++    @Nullable net.kyori.adventure.text.Component customName();\n++\n++    /**\n++     * Sets the custom name.\n++     *\n++     * <p>This name will be used in death messages and can be sent to the client as a nameplate over the mob.</p>\n++     *\n++     * <p>Setting the name to {@code null} will clear it.</p>\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @param customName the custom name to set\n++     */\n++    void customName(final @Nullable net.kyori.adventure.text.Component customName);\n++    // Paper end\n++\n+     /**\n+      * Gets the custom name on a mob or block. If there is no name this method\n+      * will return null.\n+diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java\n+index 22eca2a180618ed43a4ef103bebd134897d6c71a..abb7448ee8fe1152623794d3b806eef9a9e17abc 100644\n+--- a/src/main/java/org/bukkit/NamespacedKey.java\n++++ b/src/main/java/org/bukkit/NamespacedKey.java\n+@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n+  * underscores, hyphens, and forward slashes.\n+  *\n+  */\n+-public final class NamespacedKey {\n++public final class NamespacedKey implements net.kyori.adventure.key.Key { // Paper - implement Key\n+ \n+     /**\n+      * The namespace representing all inbuilt keys.\n+@@ -139,4 +139,24 @@ public final class NamespacedKey {\n+     public static NamespacedKey minecraft(@NotNull String key) {\n+         return new NamespacedKey(MINECRAFT, key);\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public String namespace() {\n++        return this.getNamespace();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String value() {\n++        return this.getKey();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String asString() {\n++        return this.namespace + ':' + this.key;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java\n+index a6b9e4f158583e5932bf8ca210d531857e9f5360..d9515a79dc7ed60c66960cd6c6bb4c108f206f3c 100644\n+--- a/src/main/java/org/bukkit/Server.java\n++++ b/src/main/java/org/bukkit/Server.java\n+@@ -55,7 +55,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a server implementation.\n+  */\n+-public interface Server extends PluginMessageRecipient {\n++public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Used for all administrative messages, such as an operator using a\n+@@ -229,7 +229,9 @@ public interface Server extends PluginMessageRecipient {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+      */\n++    @Deprecated // Paper\n+     public int broadcastMessage(@NotNull String message);\n+ \n+     /**\n+@@ -703,8 +705,22 @@ public interface Server extends PluginMessageRecipient {\n+      * @param permission the required permission {@link Permissible\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n+      */\n++    @Deprecated // Paper\n+     public int broadcast(@NotNull String message, @NotNull String permission);\n++    // Paper start\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     */\n++    int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);\n++    // Paper end\n+ \n+     /**\n+      * Gets the player by the given name, regardless if they are offline or\n+@@ -869,6 +885,7 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -894,6 +911,36 @@ public interface Server extends PluginMessageRecipient {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);\n+ \n+     /**\n+@@ -908,6 +955,22 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     */\n++    @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;\n++    // Paper end\n++\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -918,18 +981,32 @@ public interface Server extends PluginMessageRecipient {\n+      *     viewed\n+      * @return a new inventory\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     */\n++    @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);\n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+      * @param title the title of the corresponding merchant inventory, displayed\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Merchant createMerchant(@Nullable String title);\n+ \n+     /**\n+@@ -986,20 +1063,41 @@ public interface Server extends PluginMessageRecipient {\n+      */\n+     boolean isPrimaryThread();\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull net.kyori.adventure.text.Component motd();\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getMotd();\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    @Nullable net.kyori.adventure.text.Component shutdownMessage();\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     String getShutdownMessage();\n+ \n+     /**\n+@@ -1368,7 +1466,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends the component to the player\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1477,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends an array of components as a single message to the player\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java\n+index cdcbc8b05afc412017ac0e4ed0adf227d1342336..6b5dbe4ea711807a1944cfe2aae2ce415d4f2638 100644\n+--- a/src/main/java/org/bukkit/World.java\n++++ b/src/main/java/org/bukkit/World.java\n+@@ -38,7 +38,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a world, which may contain entities, chunks and blocks\n+  */\n+-public interface World extends PluginMessageRecipient, Metadatable {\n++public interface World extends PluginMessageRecipient, Metadatable, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Gets the {@link Block} at the given coordinates\n+@@ -616,6 +616,14 @@ public interface World extends PluginMessageRecipient, Metadatable {\n+     @NotNull\n+     public List<Player> getPlayers();\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.getPlayers();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Returns a list of entities within a bounding box centered around a\n+      * Location.\n+diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java\n+index 7e3cf00e49c66023bf46c298ef46c00e8c3c2caf..6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41 100644\n+--- a/src/main/java/org/bukkit/block/Sign.java\n++++ b/src/main/java/org/bukkit/block/Sign.java\n+@@ -7,13 +7,48 @@ import org.jetbrains.annotations.NotNull;\n+  * Represents a captured state of either a SignPost or a WallSign.\n+  */\n+ public interface Sign extends TileState, Colorable {\n++    // Paper start\n++    /**\n++     * Gets all the lines of text currently on this sign.\n++     *\n++     * @return Array of Strings containing each line of text\n++     */\n++    @NotNull\n++    public java.util.List<net.kyori.adventure.text.Component> lines();\n++\n++    /**\n++     * Gets the line of text at the specified index.\n++     * <p>\n++     * For example, getLine(0) will return the first line of text.\n++     *\n++     * @param index Line number to get the text from, starting at 0\n++     * @throws IndexOutOfBoundsException Thrown when the line does not exist\n++     * @return Text on the given line\n++     */\n++    @NotNull\n++    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;\n++\n++    /**\n++     * Sets the line of text at the specified index.\n++     * <p>\n++     * For example, setLine(0, \"Line One\") will set the first line of text to\n++     * \"Line One\".\n++     *\n++     * @param index Line number to set the text at, starting from 0\n++     * @param line New text to set at the specified index\n++     * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     */\n++    public void line(int index, @NotNull net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;\n++    // Paper end\n+ \n+     /**\n+      * Gets all the lines of text currently on this sign.\n+      *\n+      * @return Array of Strings containing each line of text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines();\n+ \n+     /**\n+@@ -24,8 +59,10 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to get the text from, starting at 0\n+      * @throws IndexOutOfBoundsException Thrown when the line does not exist\n+      * @return Text on the given line\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException;\n+ \n+     /**\n+@@ -37,7 +74,9 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to set the text at, starting from 0\n+      * @param line New text to set at the specified index\n+      * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java\n+index ac772bf349e0ffe9cab1df165d9460b387f2fe69..2588edf75483855e0c843834f39ca371770730b9 100644\n+--- a/src/main/java/org/bukkit/command/CommandSender.java\n++++ b/src/main/java/org/bukkit/command/CommandSender.java\n+@@ -6,12 +6,13 @@ import org.bukkit.permissions.Permissible;\n+ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+-public interface CommandSender extends Permissible {\n++public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper\n+ \n+     /**\n+      * Sends this sender a message\n+      *\n+      * @param message Message to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String message);\n+ \n+@@ -19,6 +20,7 @@ public interface CommandSender extends Permissible {\n+      * Sends this sender multiple messages\n+      *\n+      * @param messages An array of messages to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String[] messages);\n+ \n+@@ -27,6 +29,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param message Message to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String message);\n+ \n+@@ -35,6 +38,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param messages An array of messages to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String[] messages);\n+ \n+@@ -61,7 +65,9 @@ public interface CommandSender extends Permissible {\n+          * Sends this sender a chat component.\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -70,7 +76,9 @@ public interface CommandSender extends Permissible {\n+          * Sends an array of components as a single message to the sender.\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -80,7 +88,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param component the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -90,7 +100,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param components the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -99,4 +111,11 @@ public interface CommandSender extends Permissible {\n+     @NotNull\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity identity, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/command/ProxiedCommandSender.java b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+index fcc34b640265f4dccb46b9f09466ab8e1d96043e..74599b4ee0518481c0e3a5f6ab2f5302837f1ae3 100644\n+--- a/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n++++ b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+@@ -3,7 +3,7 @@ package org.bukkit.command;\n+ \n+ import org.jetbrains.annotations.NotNull;\n+ \n+-public interface ProxiedCommandSender extends CommandSender {\n++public interface ProxiedCommandSender extends CommandSender, net.kyori.adventure.audience.ForwardingAudience.Single { // Paper\n+ \n+     /**\n+      * Returns the CommandSender which triggered this proxied command\n+@@ -21,4 +21,16 @@ public interface ProxiedCommandSender extends CommandSender {\n+     @NotNull\n+     CommandSender getCallee();\n+ \n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.Single.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.audience.Audience audience() {\n++        return this.getCaller();\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+index b833ef63fbe01271ceb2bd83a9eb4a84c9912761..1a093a30adf18572693032b78f3d2683e87d2e21 100644\n+--- a/src/main/java/org/bukkit/enchantments/Enchantment.java\n++++ b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+@@ -294,6 +294,9 @@ public abstract class Enchantment implements Keyed {\n+      * @return True if the enchantment may be applied, otherwise False\n+      */\n+     public abstract boolean canEnchantItem(@NotNull ItemStack item);\n++    // Paper start\n++    public abstract @NotNull net.kyori.adventure.text.Component displayName(int level);\n++    // Paper end\n+ \n+     @Override\n+     public boolean equals(Object obj) {\n+diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+index 9566e4306ada5e82dede0f002aa06da12c44996b..4d5f0837bd0e02a30c943d8969fb6b13452322e0 100644\n+--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n++++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+@@ -63,4 +63,11 @@ public class EnchantmentWrapper extends Enchantment {\n+     public boolean conflictsWith(@NotNull Enchantment other) {\n+         return getEnchantment().conflictsWith(other);\n+     }\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.Component displayName(int level) {\n++        return getEnchantment().displayName(level);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java\n+index 344c14a5ed86e9ebe401bfb5ba3aedc0c0ed0b04..54597268cfbe03c5e521476d3d26e612457cf381 100644\n+--- a/src/main/java/org/bukkit/entity/Entity.java\n++++ b/src/main/java/org/bukkit/entity/Entity.java\n+@@ -25,7 +25,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a base entity in the world\n+  */\n+-public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder {\n++public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowEntity> { // Paper\n+ \n+     /**\n+      * Gets the entity's current position\n+@@ -602,4 +602,12 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent\n+     @Override\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(op.apply(net.kyori.adventure.text.event.HoverEvent.ShowEntity.of(this.getType().getKey(), this.getUniqueId(), null)));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java\n+index f22b21ee12496452f7b2125c131f56ecc74d439a..447de8f7c1d871ef5fb1a06bace451e1de06d972 100644\n+--- a/src/main/java/org/bukkit/entity/Player.java\n++++ b/src/main/java/org/bukkit/entity/Player.java\n+@@ -30,7 +30,28 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a player, connected or not\n+  */\n+-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient {\n++public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified { // Paper\n++\n++    // Paper start\n++    @Override\n++    default @NotNull net.kyori.adventure.identity.Identity identity() {\n++        return net.kyori.adventure.identity.Identity.identity(this.getUniqueId());\n++    }\n++\n++    /**\n++     * Gets the \"friendly\" name to display of this player.\n++     *\n++     * @return the display name\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the \"friendly\" name to display of this player.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n+ \n+     /**\n+      * Gets the \"friendly\" name to display of this player. This may include\n+@@ -40,7 +61,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @return the friendly name\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     public String getDisplayName();\n+ \n+@@ -52,15 +75,51 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @param name The new display name.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setDisplayName(@Nullable String name);\n+ \n++    // Paper start\n++    /**\n++     * Sets the name that is shown on the in-game player list.\n++     * <p>\n++     * If the value is null, the name will be identical to {@link #getName()}.\n++     *\n++     * @param name new player list name\n++     */\n++    void playerListName(@Nullable net.kyori.adventure.text.Component name);\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListName();\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     * @deprecated in favour of {@link #playerListName()}\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListHeader();\n++\n++    /**\n++     * Gets the currently displayed player list footer for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListFooter();\n++    // Paper end\n+     /**\n+      * Gets the name that is shown on the player list.\n+      *\n+      * @return the player list name\n++     * @deprecated in favour of {@link #playerListName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getPlayerListName();\n+ \n+     /**\n+@@ -69,14 +128,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * If the value is null, the name will be identical to {@link #getName()}.\n+      *\n+      * @param name new player list name\n++     * @deprecated in favour of {@link #playerListName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListName(@Nullable String name);\n+ \n+     /**\n+      * Gets the currently displayed player list header for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListHeader()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListHeader();\n+ \n+@@ -84,7 +147,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Gets the currently displayed player list footer for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListFooter()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListFooter();\n+ \n+@@ -92,14 +157,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Sets the currently displayed player list header for this player.\n+      *\n+      * @param header player list header, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeader(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeader(@Nullable String header);\n+ \n+     /**\n+      * Sets the currently displayed player list footer for this player.\n+      *\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListFooter(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListFooter(@Nullable String footer);\n+ \n+     /**\n+@@ -108,7 +177,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      *\n+      * @param header player list header, null for empty\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeaderFooter(@Nullable String header, @Nullable String footer);\n+ \n+     /**\n+@@ -146,9 +217,20 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Kicks player with custom kick message.\n+      *\n+      * @param message kick message\n++     * @deprecated in favour of {@link #kick(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void kickPlayer(@Nullable String message);\n+ \n++    // Paper start\n++    /**\n++     * Kicks player with custom kick message.\n++     *\n++     * @param message kick message\n++     */\n++    void kick(final @Nullable net.kyori.adventure.text.Component message);\n++    // Paper end\n++\n+     /**\n+      * Says a message (or runs a command).\n+      *\n+@@ -437,6 +519,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+     @Deprecated\n+     public boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, @NotNull byte[] data);\n+ \n++    // Paper start\n+     /**\n+      * Send a sign change. This fakes a sign change packet for a user at\n+      * a certain location. This will not actually change the world in any way.\n+@@ -452,6 +535,43 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n+      */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines) throws IllegalArgumentException;\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @param  dyeColor the color of the sign\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if dyeColor is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n++    // Paper end\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List)}\n++     */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines) throws IllegalArgumentException;\n+ \n+ \n+@@ -471,7 +591,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if dyeColor is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List, org.bukkit.DyeColor)}\n+      */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -1258,6 +1380,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public int getClientViewDistance();\n+ \n++    // Paper start\n++    /**\n++     * Gets the player's current locale.\n++     *\n++     * @return the player's locale\n++     */\n++    @NotNull java.util.Locale locale();\n++    // Paper end\n+     /**\n+      * Gets the player's current locale.\n+      *\n+@@ -1268,8 +1398,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * they wish.\n+      *\n+      * @return the player's locale\n++     * @deprecated in favour of {@link #locale()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLocale();\n+ \n+     /**\n+@@ -1287,6 +1419,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public void openBook(@NotNull ItemStack book);\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(this.getType().getKey(), this.getUniqueId(), this.displayName());\n++    }\n++    // Paper end\n++\n+     // Spigot start\n+     public class Spigot extends Entity.Spigot {\n+ \n+@@ -1341,11 +1481,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+@@ -1356,7 +1498,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1366,7 +1510,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1523,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1388,7 +1536,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+ \n+diff --git a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+index 63c80b4ee1f7adc8a9efc3b607993104b1991f90..7adbc6f87771c21d374e610fcb21a2442f2d8031 100644\n+--- a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n++++ b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+@@ -25,6 +25,16 @@ public interface CommandMinecart extends Minecart {\n+      *     activated.\n+      */\n+     public void setCommand(@Nullable String command);\n++    // Paper start\n++    /**\n++     * Sets the name of this CommandMinecart.  The name is used with commands\n++     * that this CommandMinecart executes.  Setting the name to null is the\n++     * same as setting it to \"@\".\n++     *\n++     * @param name New name for this CommandMinecart.\n++     */\n++    void name(@Nullable net.kyori.adventure.text.Component name);\n++    // Paper end\n+ \n+     /**\n+      * Sets the name of this CommandMinecart.  The name is used with commands\n+@@ -32,7 +42,9 @@ public interface CommandMinecart extends Minecart {\n+      * same as setting it to \"@\".\n+      *\n+      * @param name New name for this CommandMinecart.\n++     * @deprecated in favour of {@link #name(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setName(@Nullable String name);\n+ \n+ }\n+diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+index f1e9bc9bc797b7216336d3470e3c696a06f2b21a..090d22bd30f7947103771aaaf09a2398970ac337 100644\n+--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java\n++++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+@@ -136,6 +136,18 @@ public enum InventoryType {\n+     private final String title;\n+     private final boolean isCreatable;\n+ \n++    // Paper start\n++    private final net.kyori.adventure.text.Component defaultTitleComponent;\n++\n++    /**\n++     * Gets the inventory's default title.\n++     *\n++     * @return the inventory's default title\n++     */\n++    public @NotNull net.kyori.adventure.text.Component defaultTitle() {\n++        return defaultTitleComponent;\n++    }\n++    // Paper end\n+     private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {\n+         this(defaultSize, defaultTitle, true);\n+     }\n+@@ -144,6 +156,7 @@ public enum InventoryType {\n+         size = defaultSize;\n+         title = defaultTitle;\n+         this.isCreatable = isCreatable;\n++        this.defaultTitleComponent = net.kyori.adventure.text.Component.text(defaultTitle); // Paper - Adventure\n+     }\n+ \n+     public int getDefaultSize() {\n+@@ -151,6 +164,7 @@ public enum InventoryType {\n+     }\n+ \n+     @NotNull\n++    @Deprecated // Paper\n+     public String getDefaultTitle() {\n+         return title;\n+     }\n+diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java\n+index 14346d83bc99581b18e53d19af03708c0bf22cf7..b6cbf23dd40fb1cb1fec3c7d6918438ebf5bcc2e 100644\n+--- a/src/main/java/org/bukkit/inventory/InventoryView.java\n++++ b/src/main/java/org/bukkit/inventory/InventoryView.java\n+@@ -446,11 +446,23 @@ public abstract class InventoryView {\n+         return getPlayer().setWindowProperty(prop, value);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Get the title of this inventory window.\n+      *\n+      * @return The title.\n+      */\n+     @NotNull\n++    public abstract net.kyori.adventure.text.Component title();\n++    // Paper end\n++\n++    /**\n++     * Get the title of this inventory window.\n++     *\n++     * @return The title.\n++     * @deprecated in favour of {@link #title()}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public abstract String getTitle();\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+index 4ff149fd98895dd8ba45939a37c223b1f8d7281f..3dba4c361993e143e511b4f108ac0b444a84d964 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemFactory.java\n++++ b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+@@ -141,4 +141,15 @@ public interface ItemFactory {\n+     @Deprecated\n+     @NotNull\n+     Material updateMaterial(@NotNull final ItemMeta meta, @NotNull final Material material) throws IllegalArgumentException;\n++\n++    // Paper start\n++    /**\n++     * Creates a hover event for the given item.\n++     *\n++     * @param item The item\n++     * @return A hover event\n++     */\n++    @NotNull\n++    net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull ItemStack item, final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op);\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java\n+index f70a6a22b85ff0da76e67e9b223ad4e0b020b5c4..4b20b557eaa958cf1ad1baf8d6cc17f38b180ff1 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemStack.java\n++++ b/src/main/java/org/bukkit/inventory/ItemStack.java\n+@@ -22,7 +22,7 @@ import org.jetbrains.annotations.Nullable;\n+  * use this class to encapsulate Materials for which {@link Material#isItem()}\n+  * returns false.</b>\n+  */\n+-public class ItemStack implements Cloneable, ConfigurationSerializable {\n++public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem> { // Paper\n+     private Material type = Material.AIR;\n+     private int amount = 0;\n+     private MaterialData data = null;\n+@@ -595,4 +595,12 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {\n+ \n+         return true;\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {\n++        return org.bukkit.Bukkit.getServer().getItemFactory().asHoverEvent(this, op);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+index 94852d50e88d0594b84b581cd627174043629995..e143081922c2027e8ca1db6f1e7eb5b4d786ab41 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a00ec991bb23a4847156894674e0af22f86fca"}, "originalPosition": 1314}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQwOTY1OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0005-Adventure.patch", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjozMjo1MlrOINRLJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjozMjo1MlrOINRLJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4Mzc4Mw==", "bodyText": "This applies for several places in this patch: why isn't there a universal name interface being used here? The true of power Adventure can only be yielded if basic identity methods like displayName or customName are abstracted.", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550783783", "createdAt": "2021-01-01T16:32:52Z", "author": {"login": "Electroid"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->\n+         <dependency>\n+             <groupId>it.unimi.dsi</groupId>\n+             <artifactId>fastutil</artifactId>\n+diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+index ef58a6c00f444bd498a2d8fc4e457236f393954f..ecd149157d4fb80444f34bf5633d74bcdb63dec5 100644\n+--- a/src/main/java/co/aikar/timings/TimingsReportListener.java\n++++ b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+ @SuppressWarnings(\"WeakerAccess\")\n+-public class TimingsReportListener implements MessageCommandSender {\n++public class TimingsReportListener implements net.kyori.adventure.audience.ForwardingAudience, MessageCommandSender { // Paper\n+     private final List<CommandSender> senders;\n+     private final Runnable onDone;\n+     private String timingsURL;\n+@@ -74,4 +74,17 @@ public class TimingsReportListener implements MessageCommandSender {\n+             this.senders.add(Bukkit.getConsoleSender());\n+         }\n+     }\n++\n++    // Paper start\n++    @Override\n++    public void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.senders;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java\n+index 7c715fdc11ab7837552b1fe3ffd08b31cec0a63b..426b1e83226e674ee4bf3ec05ddcd3ac4376b06d 100644\n+--- a/src/main/java/org/bukkit/Bukkit.java\n++++ b/src/main/java/org/bukkit/Bukkit.java\n+@@ -278,7 +278,9 @@ public final class Bukkit {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated in favour of {@link Server#sendMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public static int broadcastMessage(@NotNull String message) {\n+         return server.broadcastMessage(message);\n+     }\n+@@ -836,6 +838,7 @@ public final class Bukkit {\n+         server.shutdown();\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Broadcasts the specified message to every user with the given\n+      * permission name.\n+@@ -845,6 +848,21 @@ public final class Bukkit {\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n+      */\n++    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {\n++        return server.broadcast(message, permission);\n++    }\n++    // Paper end\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n++     */\n++    @Deprecated // Paper\n+     public static int broadcast(@NotNull String message, @NotNull String permission) {\n+         return server.broadcast(message, permission);\n+     }\n+@@ -1044,6 +1062,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, type);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -1069,6 +1088,38 @@ public final class Bukkit {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {\n++        return server.createInventory(owner, type, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {\n+         return server.createInventory(owner, type, title);\n+     }\n+@@ -1087,6 +1138,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, size);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -1099,10 +1151,30 @@ public final class Bukkit {\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {\n++        return server.createInventory(owner, size, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {\n+         return server.createInventory(owner, size, title);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+@@ -1110,7 +1182,20 @@ public final class Bukkit {\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n+      */\n++    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {\n++        return server.createMerchant(title);\n++    }\n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static Merchant createMerchant(@Nullable String title) {\n+         return server.createMerchant(title);\n+     }\n+@@ -1181,22 +1266,47 @@ public final class Bukkit {\n+         return server.isPrimaryThread();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull public static net.kyori.adventure.text.Component motd() {\n++        return server.motd();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static String getMotd() {\n+         return server.getMotd();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    public static @Nullable net.kyori.adventure.text.Component shutdownMessage() {\n++        return server.shutdownMessage();\n++    }\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public static String getShutdownMessage() {\n+         return server.getShutdownMessage();\n+     }\n+diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java\n+index fee814e01a653d2b53c56e8b566383ca44aa5346..2acdf2a6d3955923c721222b9da784f3278f6418 100644\n+--- a/src/main/java/org/bukkit/Nameable.java\n++++ b/src/main/java/org/bukkit/Nameable.java\n+@@ -4,6 +4,30 @@ import org.jetbrains.annotations.Nullable;\n+ \n+ public interface Nameable {\n+ \n++    // Paper start\n++    /**\n++     * Gets the custom name.\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @return the custom name\n++     */\n++    @Nullable net.kyori.adventure.text.Component customName();\n++\n++    /**\n++     * Sets the custom name.\n++     *\n++     * <p>This name will be used in death messages and can be sent to the client as a nameplate over the mob.</p>\n++     *\n++     * <p>Setting the name to {@code null} will clear it.</p>\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @param customName the custom name to set\n++     */\n++    void customName(final @Nullable net.kyori.adventure.text.Component customName);\n++    // Paper end\n++\n+     /**\n+      * Gets the custom name on a mob or block. If there is no name this method\n+      * will return null.\n+diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java\n+index 22eca2a180618ed43a4ef103bebd134897d6c71a..abb7448ee8fe1152623794d3b806eef9a9e17abc 100644\n+--- a/src/main/java/org/bukkit/NamespacedKey.java\n++++ b/src/main/java/org/bukkit/NamespacedKey.java\n+@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n+  * underscores, hyphens, and forward slashes.\n+  *\n+  */\n+-public final class NamespacedKey {\n++public final class NamespacedKey implements net.kyori.adventure.key.Key { // Paper - implement Key\n+ \n+     /**\n+      * The namespace representing all inbuilt keys.\n+@@ -139,4 +139,24 @@ public final class NamespacedKey {\n+     public static NamespacedKey minecraft(@NotNull String key) {\n+         return new NamespacedKey(MINECRAFT, key);\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public String namespace() {\n++        return this.getNamespace();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String value() {\n++        return this.getKey();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String asString() {\n++        return this.namespace + ':' + this.key;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java\n+index a6b9e4f158583e5932bf8ca210d531857e9f5360..d9515a79dc7ed60c66960cd6c6bb4c108f206f3c 100644\n+--- a/src/main/java/org/bukkit/Server.java\n++++ b/src/main/java/org/bukkit/Server.java\n+@@ -55,7 +55,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a server implementation.\n+  */\n+-public interface Server extends PluginMessageRecipient {\n++public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Used for all administrative messages, such as an operator using a\n+@@ -229,7 +229,9 @@ public interface Server extends PluginMessageRecipient {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+      */\n++    @Deprecated // Paper\n+     public int broadcastMessage(@NotNull String message);\n+ \n+     /**\n+@@ -703,8 +705,22 @@ public interface Server extends PluginMessageRecipient {\n+      * @param permission the required permission {@link Permissible\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n+      */\n++    @Deprecated // Paper\n+     public int broadcast(@NotNull String message, @NotNull String permission);\n++    // Paper start\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     */\n++    int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);\n++    // Paper end\n+ \n+     /**\n+      * Gets the player by the given name, regardless if they are offline or\n+@@ -869,6 +885,7 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -894,6 +911,36 @@ public interface Server extends PluginMessageRecipient {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);\n+ \n+     /**\n+@@ -908,6 +955,22 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     */\n++    @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;\n++    // Paper end\n++\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -918,18 +981,32 @@ public interface Server extends PluginMessageRecipient {\n+      *     viewed\n+      * @return a new inventory\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     */\n++    @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);\n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+      * @param title the title of the corresponding merchant inventory, displayed\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Merchant createMerchant(@Nullable String title);\n+ \n+     /**\n+@@ -986,20 +1063,41 @@ public interface Server extends PluginMessageRecipient {\n+      */\n+     boolean isPrimaryThread();\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull net.kyori.adventure.text.Component motd();\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getMotd();\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    @Nullable net.kyori.adventure.text.Component shutdownMessage();\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     String getShutdownMessage();\n+ \n+     /**\n+@@ -1368,7 +1466,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends the component to the player\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1477,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends an array of components as a single message to the player\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java\n+index cdcbc8b05afc412017ac0e4ed0adf227d1342336..6b5dbe4ea711807a1944cfe2aae2ce415d4f2638 100644\n+--- a/src/main/java/org/bukkit/World.java\n++++ b/src/main/java/org/bukkit/World.java\n+@@ -38,7 +38,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a world, which may contain entities, chunks and blocks\n+  */\n+-public interface World extends PluginMessageRecipient, Metadatable {\n++public interface World extends PluginMessageRecipient, Metadatable, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Gets the {@link Block} at the given coordinates\n+@@ -616,6 +616,14 @@ public interface World extends PluginMessageRecipient, Metadatable {\n+     @NotNull\n+     public List<Player> getPlayers();\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.getPlayers();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Returns a list of entities within a bounding box centered around a\n+      * Location.\n+diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java\n+index 7e3cf00e49c66023bf46c298ef46c00e8c3c2caf..6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41 100644\n+--- a/src/main/java/org/bukkit/block/Sign.java\n++++ b/src/main/java/org/bukkit/block/Sign.java\n+@@ -7,13 +7,48 @@ import org.jetbrains.annotations.NotNull;\n+  * Represents a captured state of either a SignPost or a WallSign.\n+  */\n+ public interface Sign extends TileState, Colorable {\n++    // Paper start\n++    /**\n++     * Gets all the lines of text currently on this sign.\n++     *\n++     * @return Array of Strings containing each line of text\n++     */\n++    @NotNull\n++    public java.util.List<net.kyori.adventure.text.Component> lines();\n++\n++    /**\n++     * Gets the line of text at the specified index.\n++     * <p>\n++     * For example, getLine(0) will return the first line of text.\n++     *\n++     * @param index Line number to get the text from, starting at 0\n++     * @throws IndexOutOfBoundsException Thrown when the line does not exist\n++     * @return Text on the given line\n++     */\n++    @NotNull\n++    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;\n++\n++    /**\n++     * Sets the line of text at the specified index.\n++     * <p>\n++     * For example, setLine(0, \"Line One\") will set the first line of text to\n++     * \"Line One\".\n++     *\n++     * @param index Line number to set the text at, starting from 0\n++     * @param line New text to set at the specified index\n++     * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     */\n++    public void line(int index, @NotNull net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;\n++    // Paper end\n+ \n+     /**\n+      * Gets all the lines of text currently on this sign.\n+      *\n+      * @return Array of Strings containing each line of text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines();\n+ \n+     /**\n+@@ -24,8 +59,10 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to get the text from, starting at 0\n+      * @throws IndexOutOfBoundsException Thrown when the line does not exist\n+      * @return Text on the given line\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException;\n+ \n+     /**\n+@@ -37,7 +74,9 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to set the text at, starting from 0\n+      * @param line New text to set at the specified index\n+      * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java\n+index ac772bf349e0ffe9cab1df165d9460b387f2fe69..2588edf75483855e0c843834f39ca371770730b9 100644\n+--- a/src/main/java/org/bukkit/command/CommandSender.java\n++++ b/src/main/java/org/bukkit/command/CommandSender.java\n+@@ -6,12 +6,13 @@ import org.bukkit.permissions.Permissible;\n+ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+-public interface CommandSender extends Permissible {\n++public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper\n+ \n+     /**\n+      * Sends this sender a message\n+      *\n+      * @param message Message to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String message);\n+ \n+@@ -19,6 +20,7 @@ public interface CommandSender extends Permissible {\n+      * Sends this sender multiple messages\n+      *\n+      * @param messages An array of messages to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String[] messages);\n+ \n+@@ -27,6 +29,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param message Message to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String message);\n+ \n+@@ -35,6 +38,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param messages An array of messages to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String[] messages);\n+ \n+@@ -61,7 +65,9 @@ public interface CommandSender extends Permissible {\n+          * Sends this sender a chat component.\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -70,7 +76,9 @@ public interface CommandSender extends Permissible {\n+          * Sends an array of components as a single message to the sender.\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -80,7 +88,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param component the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -90,7 +100,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param components the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -99,4 +111,11 @@ public interface CommandSender extends Permissible {\n+     @NotNull\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity identity, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/command/ProxiedCommandSender.java b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+index fcc34b640265f4dccb46b9f09466ab8e1d96043e..74599b4ee0518481c0e3a5f6ab2f5302837f1ae3 100644\n+--- a/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n++++ b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+@@ -3,7 +3,7 @@ package org.bukkit.command;\n+ \n+ import org.jetbrains.annotations.NotNull;\n+ \n+-public interface ProxiedCommandSender extends CommandSender {\n++public interface ProxiedCommandSender extends CommandSender, net.kyori.adventure.audience.ForwardingAudience.Single { // Paper\n+ \n+     /**\n+      * Returns the CommandSender which triggered this proxied command\n+@@ -21,4 +21,16 @@ public interface ProxiedCommandSender extends CommandSender {\n+     @NotNull\n+     CommandSender getCallee();\n+ \n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.Single.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.audience.Audience audience() {\n++        return this.getCaller();\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+index b833ef63fbe01271ceb2bd83a9eb4a84c9912761..1a093a30adf18572693032b78f3d2683e87d2e21 100644\n+--- a/src/main/java/org/bukkit/enchantments/Enchantment.java\n++++ b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+@@ -294,6 +294,9 @@ public abstract class Enchantment implements Keyed {\n+      * @return True if the enchantment may be applied, otherwise False\n+      */\n+     public abstract boolean canEnchantItem(@NotNull ItemStack item);\n++    // Paper start\n++    public abstract @NotNull net.kyori.adventure.text.Component displayName(int level);\n++    // Paper end\n+ \n+     @Override\n+     public boolean equals(Object obj) {\n+diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+index 9566e4306ada5e82dede0f002aa06da12c44996b..4d5f0837bd0e02a30c943d8969fb6b13452322e0 100644\n+--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n++++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+@@ -63,4 +63,11 @@ public class EnchantmentWrapper extends Enchantment {\n+     public boolean conflictsWith(@NotNull Enchantment other) {\n+         return getEnchantment().conflictsWith(other);\n+     }\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.Component displayName(int level) {\n++        return getEnchantment().displayName(level);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java\n+index 344c14a5ed86e9ebe401bfb5ba3aedc0c0ed0b04..54597268cfbe03c5e521476d3d26e612457cf381 100644\n+--- a/src/main/java/org/bukkit/entity/Entity.java\n++++ b/src/main/java/org/bukkit/entity/Entity.java\n+@@ -25,7 +25,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a base entity in the world\n+  */\n+-public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder {\n++public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowEntity> { // Paper\n+ \n+     /**\n+      * Gets the entity's current position\n+@@ -602,4 +602,12 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent\n+     @Override\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(op.apply(net.kyori.adventure.text.event.HoverEvent.ShowEntity.of(this.getType().getKey(), this.getUniqueId(), null)));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java\n+index f22b21ee12496452f7b2125c131f56ecc74d439a..447de8f7c1d871ef5fb1a06bace451e1de06d972 100644\n+--- a/src/main/java/org/bukkit/entity/Player.java\n++++ b/src/main/java/org/bukkit/entity/Player.java\n+@@ -30,7 +30,28 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a player, connected or not\n+  */\n+-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient {\n++public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified { // Paper\n++\n++    // Paper start\n++    @Override\n++    default @NotNull net.kyori.adventure.identity.Identity identity() {\n++        return net.kyori.adventure.identity.Identity.identity(this.getUniqueId());\n++    }\n++\n++    /**\n++     * Gets the \"friendly\" name to display of this player.\n++     *\n++     * @return the display name\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the \"friendly\" name to display of this player.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n+ \n+     /**\n+      * Gets the \"friendly\" name to display of this player. This may include\n+@@ -40,7 +61,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @return the friendly name\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     public String getDisplayName();\n+ \n+@@ -52,15 +75,51 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @param name The new display name.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setDisplayName(@Nullable String name);\n+ \n++    // Paper start\n++    /**\n++     * Sets the name that is shown on the in-game player list.\n++     * <p>\n++     * If the value is null, the name will be identical to {@link #getName()}.\n++     *\n++     * @param name new player list name\n++     */\n++    void playerListName(@Nullable net.kyori.adventure.text.Component name);\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListName();\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     * @deprecated in favour of {@link #playerListName()}\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListHeader();\n++\n++    /**\n++     * Gets the currently displayed player list footer for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListFooter();\n++    // Paper end\n+     /**\n+      * Gets the name that is shown on the player list.\n+      *\n+      * @return the player list name\n++     * @deprecated in favour of {@link #playerListName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getPlayerListName();\n+ \n+     /**\n+@@ -69,14 +128,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * If the value is null, the name will be identical to {@link #getName()}.\n+      *\n+      * @param name new player list name\n++     * @deprecated in favour of {@link #playerListName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListName(@Nullable String name);\n+ \n+     /**\n+      * Gets the currently displayed player list header for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListHeader()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListHeader();\n+ \n+@@ -84,7 +147,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Gets the currently displayed player list footer for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListFooter()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListFooter();\n+ \n+@@ -92,14 +157,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Sets the currently displayed player list header for this player.\n+      *\n+      * @param header player list header, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeader(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeader(@Nullable String header);\n+ \n+     /**\n+      * Sets the currently displayed player list footer for this player.\n+      *\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListFooter(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListFooter(@Nullable String footer);\n+ \n+     /**\n+@@ -108,7 +177,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      *\n+      * @param header player list header, null for empty\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeaderFooter(@Nullable String header, @Nullable String footer);\n+ \n+     /**\n+@@ -146,9 +217,20 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Kicks player with custom kick message.\n+      *\n+      * @param message kick message\n++     * @deprecated in favour of {@link #kick(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void kickPlayer(@Nullable String message);\n+ \n++    // Paper start\n++    /**\n++     * Kicks player with custom kick message.\n++     *\n++     * @param message kick message\n++     */\n++    void kick(final @Nullable net.kyori.adventure.text.Component message);\n++    // Paper end\n++\n+     /**\n+      * Says a message (or runs a command).\n+      *\n+@@ -437,6 +519,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+     @Deprecated\n+     public boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, @NotNull byte[] data);\n+ \n++    // Paper start\n+     /**\n+      * Send a sign change. This fakes a sign change packet for a user at\n+      * a certain location. This will not actually change the world in any way.\n+@@ -452,6 +535,43 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n+      */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines) throws IllegalArgumentException;\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @param  dyeColor the color of the sign\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if dyeColor is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n++    // Paper end\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List)}\n++     */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines) throws IllegalArgumentException;\n+ \n+ \n+@@ -471,7 +591,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if dyeColor is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List, org.bukkit.DyeColor)}\n+      */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -1258,6 +1380,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public int getClientViewDistance();\n+ \n++    // Paper start\n++    /**\n++     * Gets the player's current locale.\n++     *\n++     * @return the player's locale\n++     */\n++    @NotNull java.util.Locale locale();\n++    // Paper end\n+     /**\n+      * Gets the player's current locale.\n+      *\n+@@ -1268,8 +1398,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * they wish.\n+      *\n+      * @return the player's locale\n++     * @deprecated in favour of {@link #locale()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLocale();\n+ \n+     /**\n+@@ -1287,6 +1419,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public void openBook(@NotNull ItemStack book);\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(this.getType().getKey(), this.getUniqueId(), this.displayName());\n++    }\n++    // Paper end\n++\n+     // Spigot start\n+     public class Spigot extends Entity.Spigot {\n+ \n+@@ -1341,11 +1481,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+@@ -1356,7 +1498,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1366,7 +1510,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1523,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1388,7 +1536,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+ \n+diff --git a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+index 63c80b4ee1f7adc8a9efc3b607993104b1991f90..7adbc6f87771c21d374e610fcb21a2442f2d8031 100644\n+--- a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n++++ b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+@@ -25,6 +25,16 @@ public interface CommandMinecart extends Minecart {\n+      *     activated.\n+      */\n+     public void setCommand(@Nullable String command);\n++    // Paper start\n++    /**\n++     * Sets the name of this CommandMinecart.  The name is used with commands\n++     * that this CommandMinecart executes.  Setting the name to null is the\n++     * same as setting it to \"@\".\n++     *\n++     * @param name New name for this CommandMinecart.\n++     */\n++    void name(@Nullable net.kyori.adventure.text.Component name);\n++    // Paper end\n+ \n+     /**\n+      * Sets the name of this CommandMinecart.  The name is used with commands\n+@@ -32,7 +42,9 @@ public interface CommandMinecart extends Minecart {\n+      * same as setting it to \"@\".\n+      *\n+      * @param name New name for this CommandMinecart.\n++     * @deprecated in favour of {@link #name(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setName(@Nullable String name);\n+ \n+ }\n+diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+index f1e9bc9bc797b7216336d3470e3c696a06f2b21a..090d22bd30f7947103771aaaf09a2398970ac337 100644\n+--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java\n++++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+@@ -136,6 +136,18 @@ public enum InventoryType {\n+     private final String title;\n+     private final boolean isCreatable;\n+ \n++    // Paper start\n++    private final net.kyori.adventure.text.Component defaultTitleComponent;\n++\n++    /**\n++     * Gets the inventory's default title.\n++     *\n++     * @return the inventory's default title\n++     */\n++    public @NotNull net.kyori.adventure.text.Component defaultTitle() {\n++        return defaultTitleComponent;\n++    }\n++    // Paper end\n+     private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {\n+         this(defaultSize, defaultTitle, true);\n+     }\n+@@ -144,6 +156,7 @@ public enum InventoryType {\n+         size = defaultSize;\n+         title = defaultTitle;\n+         this.isCreatable = isCreatable;\n++        this.defaultTitleComponent = net.kyori.adventure.text.Component.text(defaultTitle); // Paper - Adventure\n+     }\n+ \n+     public int getDefaultSize() {\n+@@ -151,6 +164,7 @@ public enum InventoryType {\n+     }\n+ \n+     @NotNull\n++    @Deprecated // Paper\n+     public String getDefaultTitle() {\n+         return title;\n+     }\n+diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java\n+index 14346d83bc99581b18e53d19af03708c0bf22cf7..b6cbf23dd40fb1cb1fec3c7d6918438ebf5bcc2e 100644\n+--- a/src/main/java/org/bukkit/inventory/InventoryView.java\n++++ b/src/main/java/org/bukkit/inventory/InventoryView.java\n+@@ -446,11 +446,23 @@ public abstract class InventoryView {\n+         return getPlayer().setWindowProperty(prop, value);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Get the title of this inventory window.\n+      *\n+      * @return The title.\n+      */\n+     @NotNull\n++    public abstract net.kyori.adventure.text.Component title();\n++    // Paper end\n++\n++    /**\n++     * Get the title of this inventory window.\n++     *\n++     * @return The title.\n++     * @deprecated in favour of {@link #title()}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public abstract String getTitle();\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+index 4ff149fd98895dd8ba45939a37c223b1f8d7281f..3dba4c361993e143e511b4f108ac0b444a84d964 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemFactory.java\n++++ b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+@@ -141,4 +141,15 @@ public interface ItemFactory {\n+     @Deprecated\n+     @NotNull\n+     Material updateMaterial(@NotNull final ItemMeta meta, @NotNull final Material material) throws IllegalArgumentException;\n++\n++    // Paper start\n++    /**\n++     * Creates a hover event for the given item.\n++     *\n++     * @param item The item\n++     * @return A hover event\n++     */\n++    @NotNull\n++    net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull ItemStack item, final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op);\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java\n+index f70a6a22b85ff0da76e67e9b223ad4e0b020b5c4..4b20b557eaa958cf1ad1baf8d6cc17f38b180ff1 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemStack.java\n++++ b/src/main/java/org/bukkit/inventory/ItemStack.java\n+@@ -22,7 +22,7 @@ import org.jetbrains.annotations.Nullable;\n+  * use this class to encapsulate Materials for which {@link Material#isItem()}\n+  * returns false.</b>\n+  */\n+-public class ItemStack implements Cloneable, ConfigurationSerializable {\n++public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem> { // Paper\n+     private Material type = Material.AIR;\n+     private int amount = 0;\n+     private MaterialData data = null;\n+@@ -595,4 +595,12 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {\n+ \n+         return true;\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {\n++        return org.bukkit.Bukkit.getServer().getItemFactory().asHoverEvent(this, op);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+index 94852d50e88d0594b84b581cd627174043629995..e143081922c2027e8ca1db6f1e7eb5b4d786ab41 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+@@ -119,6 +119,63 @@ public interface BookMeta extends ItemMeta {\n+      */\n+     boolean hasPages();\n+ \n++    // Paper start\n++    /**\n++     * Gets the specified page in the book. The page must exist.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to get, in range [1, getPageCount()]\n++     * @return the page from the book\n++     */\n++    @NotNull net.kyori.adventure.text.Component page(int page);\n++\n++    /**\n++     * Sets the specified page in the book. Pages of the book must be\n++     * contiguous.\n++     * <p>\n++     * The data can be up to 256 characters in length, additional characters\n++     * are truncated.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to set, in range [1, getPageCount()]\n++     * @param data the data to set for that page\n++     */\n++    void page(int page, @NotNull net.kyori.adventure.text.Component data);\n++\n++    /**\n++     * Gets all the pages in the book.\n++     *\n++     * @return list of all the pages in the book\n++     */\n++    @NotNull List<net.kyori.adventure.text.Component> pages();\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 100 pages with 256 characters per page.\n++     *\n++     * @param pages A list of pages to set the book to use\n++     */\n++    void pages(@NotNull List<net.kyori.adventure.text.Component> pages);\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 50 pages with 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void pages(@NotNull net.kyori.adventure.text.Component... pages);\n++\n++    /**\n++     * Adds new pages to the end of the book. Up to a maximum of 50 pages with\n++     * 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void addPages(@NotNull net.kyori.adventure.text.Component... pages);\n++    // Paper end\n++\n+     /**\n+      * Gets the specified page in the book. The given page must exist.\n+      * <p>\n+@@ -126,8 +183,10 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to get, in range [1, getPageCount()]\n+      * @return the page from the book\n++     * @deprecated in favour of {@link #page(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getPage(int page);\n+ \n+     /**\n+@@ -141,15 +200,19 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to set, in range [1, getPageCount()]\n+      * @param data the data to set for that page\n++     * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setPage(int page, @NotNull String data);\n+ \n+     /**\n+      * Gets all the pages in the book.\n+      *\n+      * @return list of all the pages in the book\n++     * @deprecated in favour of {@link #pages()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     List<String> getPages();\n+ \n+     /**\n+@@ -157,7 +220,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 100 pages with 256 characters per page.\n+      *\n+      * @param pages A list of pages to set the book to use\n++     * @deprecated in favour of {@link #pages(List)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull List<String> pages);\n+ \n+     /**\n+@@ -165,7 +230,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 50 pages with 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull String... pages);\n+ \n+     /**\n+@@ -173,7 +240,9 @@ public interface BookMeta extends ItemMeta {\n+      * 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void addPage(@NotNull String... pages);\n+ \n+     /**\n+@@ -195,8 +264,10 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to get\n+          * @return the page from the book\n++         * @deprecated in favour of {@link #page(int)}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public BaseComponent[] getPage(int page) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -210,7 +281,9 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to set\n+          * @param data the data to set for that page\n++         * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+          */\n++        @Deprecated // Paper\n+         public void setPage(int page, @Nullable BaseComponent... data) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -219,8 +292,10 @@ public interface BookMeta extends ItemMeta {\n+          * Gets all the pages in the book.\n+          *\n+          * @return list of all the pages in the book\n++         * @deprecated in favour of {@link #pages()}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public List<BaseComponent[]> getPages() {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -230,7 +305,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of pages to set the book to use\n++         * @deprecated in favour of {@link #pages(java.util.List)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull List<BaseComponent[]> pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -240,7 +317,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -250,7 +329,9 @@ public interface BookMeta extends ItemMeta {\n+          * with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void addPage(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+index f2e9f2753ec92aa4a3e3f06ca6053bd70b9091d7..1c362636c56db0e6c118171ba367c43c4f7cff33 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+@@ -31,6 +31,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasDisplayName();\n+ \n++    // Paper start\n++    /**\n++     * Gets the display name.\n++     *\n++     * <p>Plugins should check that {@link #hasDisplayName()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the display name.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n++\n+     /**\n+      * Gets the display name that is set.\n+      * <p>\n+@@ -38,7 +56,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * before calling this method.\n+      *\n+      * @return the display name that is set\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     String getDisplayName();\n+ \n+@@ -46,7 +66,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Sets the display name.\n+      *\n+      * @param name the name to set\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setDisplayName(@Nullable String name);\n+ \n+     /**\n+@@ -81,6 +103,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasLore();\n+ \n++    // Paper start\n++    /**\n++     * Gets the lore.\n++     *\n++     * <p>Plugins should check that {@link #hasLore()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable List<net.kyori.adventure.text.Component> lore();\n++\n++    /**\n++     * Sets the lore.\n++     *\n++     * @param lore the lore to set\n++     */\n++    void lore(final @Nullable List<net.kyori.adventure.text.Component> lore);\n++    // Paper end\n++\n+     /**\n+      * Gets the lore that is set.\n+      * <p>\n+@@ -88,7 +128,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * calling this method.\n+      *\n+      * @return a list of lore that is set\n++     * @deprecated in favour of {@link #lore()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     List<String> getLore();\n+ \n+@@ -97,7 +139,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Removes lore when given null.\n+      *\n+      * @param lore the lore that will be set\n++     * @deprecated in favour of {@link #lore(List)}\n+      */\n++    @Deprecated // Paper\n+     void setLore(@Nullable List<String> lore);\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java\n+index 83354b2a38b6261b172b91c1008dcf3313cc4a8f..1052d5f0de6b1dbd261cd05bb6dd0714119ff539 100644\n+--- a/src/main/java/org/bukkit/map/MapCursor.java\n++++ b/src/main/java/org/bukkit/map/MapCursor.java\n+@@ -10,7 +10,7 @@ public final class MapCursor {\n+     private byte x, y;\n+     private byte direction, type;\n+     private boolean visible;\n+-    private String caption;\n++    private net.kyori.adventure.text.Component caption; // Paper\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -24,7 +24,7 @@ public final class MapCursor {\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -37,7 +37,7 @@ public final class MapCursor {\n+      * @param visible Whether the cursor is visible by default.\n+      */\n+     public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -49,7 +49,7 @@ public final class MapCursor {\n+      * @param type The type (color/style) of the map cursor.\n+      * @param visible Whether the cursor is visible by default.\n+      * @param caption cursor caption\n+-     * @deprecated Magic value\n++     * @deprecated Magic value. Use {@link #MapCursor(byte, byte, byte, byte, boolean, net.kyori.adventure.text.Component)}\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+@@ -58,8 +58,40 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setRawType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n++    }\n++    // Paper start\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        this.x = x; this.y = y; this.visible = visible; this.caption = caption;\n++        setDirection(direction);\n++        setRawType(type);\n++    }\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     */\n++    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++\n+     }\n++    // Paper end\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -77,7 +109,7 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+@@ -200,23 +232,45 @@ public final class MapCursor {\n+         this.visible = visible;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the caption on this cursor.\n++     *\n++     * @return caption\n++     */\n++    public @Nullable net.kyori.adventure.text.Component caption() {\n++        return this.caption;\n++    }\n++    /**\n++     * Sets the caption on this cursor.\n++     *\n++     * @param caption new caption\n++     */\n++    public void caption(@Nullable net.kyori.adventure.text.Component caption) {\n++        this.caption = caption;\n++    }\n++    // Paper end\n+     /**\n+      * Gets the caption on this cursor.\n+      *\n+      * @return caption\n++     * @deprecated in favour of {@link #caption()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getCaption() {\n+-        return caption;\n++        return this.caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.caption); // Paper\n+     }\n+ \n+     /**\n+      * Sets the caption on this cursor.\n+      *\n+      * @param caption new caption\n++     * @deprecated in favour of {@link #caption(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setCaption(@Nullable String caption) {\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+index 4dba721aefe4fc6699b3b4bfa7ecb0b19c2a2a1a..01dec2c877df58c9dc22445e8b1f9ce2e53066da 100644\n+--- a/src/main/java/org/bukkit/map/MapCursorCollection.java\n++++ b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+@@ -117,4 +117,22 @@ public final class MapCursorCollection {\n+     public MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n+     }\n++    // Paper start\n++    /**\n++     * Add a cursor to the collection.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible.\n++     * @param caption banner caption\n++     * @return The newly added MapCursor.\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public @NotNull MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java\n+index f5cbf6df32ef169cf0f2266f7c6e9c4f771ccb7d..58bddb11fd534e7c33a4ffd7b72b055ba92c767a 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Objective.java\n++++ b/src/main/java/org/bukkit/scoreboard/Objective.java\n+@@ -19,14 +19,35 @@ public interface Objective {\n+      */\n+     @NotNull\n+     String getName() throws IllegalStateException;\n++    // Paper start\n++    /**\n++     * Gets the name displayed to players for this objective\n++     *\n++     * @return this objective's display name\n++     * @throws IllegalStateException if this objective has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName() throws IllegalStateException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a00ec991bb23a4847156894674e0af22f86fca"}, "originalPosition": 1777}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQxMDEwOnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0005-Adventure.patch", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjozMzoyNVrOINRLWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjozMzoyNVrOINRLWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4MzgzMw==", "bodyText": "Same name interface here.", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550783833", "createdAt": "2021-01-01T16:33:25Z", "author": {"login": "Electroid"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->\n+         <dependency>\n+             <groupId>it.unimi.dsi</groupId>\n+             <artifactId>fastutil</artifactId>\n+diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+index ef58a6c00f444bd498a2d8fc4e457236f393954f..ecd149157d4fb80444f34bf5633d74bcdb63dec5 100644\n+--- a/src/main/java/co/aikar/timings/TimingsReportListener.java\n++++ b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+ @SuppressWarnings(\"WeakerAccess\")\n+-public class TimingsReportListener implements MessageCommandSender {\n++public class TimingsReportListener implements net.kyori.adventure.audience.ForwardingAudience, MessageCommandSender { // Paper\n+     private final List<CommandSender> senders;\n+     private final Runnable onDone;\n+     private String timingsURL;\n+@@ -74,4 +74,17 @@ public class TimingsReportListener implements MessageCommandSender {\n+             this.senders.add(Bukkit.getConsoleSender());\n+         }\n+     }\n++\n++    // Paper start\n++    @Override\n++    public void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.senders;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java\n+index 7c715fdc11ab7837552b1fe3ffd08b31cec0a63b..426b1e83226e674ee4bf3ec05ddcd3ac4376b06d 100644\n+--- a/src/main/java/org/bukkit/Bukkit.java\n++++ b/src/main/java/org/bukkit/Bukkit.java\n+@@ -278,7 +278,9 @@ public final class Bukkit {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated in favour of {@link Server#sendMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public static int broadcastMessage(@NotNull String message) {\n+         return server.broadcastMessage(message);\n+     }\n+@@ -836,6 +838,7 @@ public final class Bukkit {\n+         server.shutdown();\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Broadcasts the specified message to every user with the given\n+      * permission name.\n+@@ -845,6 +848,21 @@ public final class Bukkit {\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n+      */\n++    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {\n++        return server.broadcast(message, permission);\n++    }\n++    // Paper end\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n++     */\n++    @Deprecated // Paper\n+     public static int broadcast(@NotNull String message, @NotNull String permission) {\n+         return server.broadcast(message, permission);\n+     }\n+@@ -1044,6 +1062,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, type);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -1069,6 +1088,38 @@ public final class Bukkit {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {\n++        return server.createInventory(owner, type, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {\n+         return server.createInventory(owner, type, title);\n+     }\n+@@ -1087,6 +1138,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, size);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -1099,10 +1151,30 @@ public final class Bukkit {\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {\n++        return server.createInventory(owner, size, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {\n+         return server.createInventory(owner, size, title);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+@@ -1110,7 +1182,20 @@ public final class Bukkit {\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n+      */\n++    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {\n++        return server.createMerchant(title);\n++    }\n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static Merchant createMerchant(@Nullable String title) {\n+         return server.createMerchant(title);\n+     }\n+@@ -1181,22 +1266,47 @@ public final class Bukkit {\n+         return server.isPrimaryThread();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull public static net.kyori.adventure.text.Component motd() {\n++        return server.motd();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static String getMotd() {\n+         return server.getMotd();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    public static @Nullable net.kyori.adventure.text.Component shutdownMessage() {\n++        return server.shutdownMessage();\n++    }\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public static String getShutdownMessage() {\n+         return server.getShutdownMessage();\n+     }\n+diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java\n+index fee814e01a653d2b53c56e8b566383ca44aa5346..2acdf2a6d3955923c721222b9da784f3278f6418 100644\n+--- a/src/main/java/org/bukkit/Nameable.java\n++++ b/src/main/java/org/bukkit/Nameable.java\n+@@ -4,6 +4,30 @@ import org.jetbrains.annotations.Nullable;\n+ \n+ public interface Nameable {\n+ \n++    // Paper start\n++    /**\n++     * Gets the custom name.\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @return the custom name\n++     */\n++    @Nullable net.kyori.adventure.text.Component customName();\n++\n++    /**\n++     * Sets the custom name.\n++     *\n++     * <p>This name will be used in death messages and can be sent to the client as a nameplate over the mob.</p>\n++     *\n++     * <p>Setting the name to {@code null} will clear it.</p>\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @param customName the custom name to set\n++     */\n++    void customName(final @Nullable net.kyori.adventure.text.Component customName);\n++    // Paper end\n++\n+     /**\n+      * Gets the custom name on a mob or block. If there is no name this method\n+      * will return null.\n+diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java\n+index 22eca2a180618ed43a4ef103bebd134897d6c71a..abb7448ee8fe1152623794d3b806eef9a9e17abc 100644\n+--- a/src/main/java/org/bukkit/NamespacedKey.java\n++++ b/src/main/java/org/bukkit/NamespacedKey.java\n+@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n+  * underscores, hyphens, and forward slashes.\n+  *\n+  */\n+-public final class NamespacedKey {\n++public final class NamespacedKey implements net.kyori.adventure.key.Key { // Paper - implement Key\n+ \n+     /**\n+      * The namespace representing all inbuilt keys.\n+@@ -139,4 +139,24 @@ public final class NamespacedKey {\n+     public static NamespacedKey minecraft(@NotNull String key) {\n+         return new NamespacedKey(MINECRAFT, key);\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public String namespace() {\n++        return this.getNamespace();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String value() {\n++        return this.getKey();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String asString() {\n++        return this.namespace + ':' + this.key;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java\n+index a6b9e4f158583e5932bf8ca210d531857e9f5360..d9515a79dc7ed60c66960cd6c6bb4c108f206f3c 100644\n+--- a/src/main/java/org/bukkit/Server.java\n++++ b/src/main/java/org/bukkit/Server.java\n+@@ -55,7 +55,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a server implementation.\n+  */\n+-public interface Server extends PluginMessageRecipient {\n++public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Used for all administrative messages, such as an operator using a\n+@@ -229,7 +229,9 @@ public interface Server extends PluginMessageRecipient {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+      */\n++    @Deprecated // Paper\n+     public int broadcastMessage(@NotNull String message);\n+ \n+     /**\n+@@ -703,8 +705,22 @@ public interface Server extends PluginMessageRecipient {\n+      * @param permission the required permission {@link Permissible\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n+      */\n++    @Deprecated // Paper\n+     public int broadcast(@NotNull String message, @NotNull String permission);\n++    // Paper start\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     */\n++    int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);\n++    // Paper end\n+ \n+     /**\n+      * Gets the player by the given name, regardless if they are offline or\n+@@ -869,6 +885,7 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -894,6 +911,36 @@ public interface Server extends PluginMessageRecipient {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);\n+ \n+     /**\n+@@ -908,6 +955,22 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     */\n++    @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;\n++    // Paper end\n++\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -918,18 +981,32 @@ public interface Server extends PluginMessageRecipient {\n+      *     viewed\n+      * @return a new inventory\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     */\n++    @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);\n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+      * @param title the title of the corresponding merchant inventory, displayed\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Merchant createMerchant(@Nullable String title);\n+ \n+     /**\n+@@ -986,20 +1063,41 @@ public interface Server extends PluginMessageRecipient {\n+      */\n+     boolean isPrimaryThread();\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull net.kyori.adventure.text.Component motd();\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getMotd();\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    @Nullable net.kyori.adventure.text.Component shutdownMessage();\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     String getShutdownMessage();\n+ \n+     /**\n+@@ -1368,7 +1466,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends the component to the player\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1477,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends an array of components as a single message to the player\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java\n+index cdcbc8b05afc412017ac0e4ed0adf227d1342336..6b5dbe4ea711807a1944cfe2aae2ce415d4f2638 100644\n+--- a/src/main/java/org/bukkit/World.java\n++++ b/src/main/java/org/bukkit/World.java\n+@@ -38,7 +38,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a world, which may contain entities, chunks and blocks\n+  */\n+-public interface World extends PluginMessageRecipient, Metadatable {\n++public interface World extends PluginMessageRecipient, Metadatable, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Gets the {@link Block} at the given coordinates\n+@@ -616,6 +616,14 @@ public interface World extends PluginMessageRecipient, Metadatable {\n+     @NotNull\n+     public List<Player> getPlayers();\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.getPlayers();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Returns a list of entities within a bounding box centered around a\n+      * Location.\n+diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java\n+index 7e3cf00e49c66023bf46c298ef46c00e8c3c2caf..6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41 100644\n+--- a/src/main/java/org/bukkit/block/Sign.java\n++++ b/src/main/java/org/bukkit/block/Sign.java\n+@@ -7,13 +7,48 @@ import org.jetbrains.annotations.NotNull;\n+  * Represents a captured state of either a SignPost or a WallSign.\n+  */\n+ public interface Sign extends TileState, Colorable {\n++    // Paper start\n++    /**\n++     * Gets all the lines of text currently on this sign.\n++     *\n++     * @return Array of Strings containing each line of text\n++     */\n++    @NotNull\n++    public java.util.List<net.kyori.adventure.text.Component> lines();\n++\n++    /**\n++     * Gets the line of text at the specified index.\n++     * <p>\n++     * For example, getLine(0) will return the first line of text.\n++     *\n++     * @param index Line number to get the text from, starting at 0\n++     * @throws IndexOutOfBoundsException Thrown when the line does not exist\n++     * @return Text on the given line\n++     */\n++    @NotNull\n++    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;\n++\n++    /**\n++     * Sets the line of text at the specified index.\n++     * <p>\n++     * For example, setLine(0, \"Line One\") will set the first line of text to\n++     * \"Line One\".\n++     *\n++     * @param index Line number to set the text at, starting from 0\n++     * @param line New text to set at the specified index\n++     * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     */\n++    public void line(int index, @NotNull net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;\n++    // Paper end\n+ \n+     /**\n+      * Gets all the lines of text currently on this sign.\n+      *\n+      * @return Array of Strings containing each line of text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines();\n+ \n+     /**\n+@@ -24,8 +59,10 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to get the text from, starting at 0\n+      * @throws IndexOutOfBoundsException Thrown when the line does not exist\n+      * @return Text on the given line\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException;\n+ \n+     /**\n+@@ -37,7 +74,9 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to set the text at, starting from 0\n+      * @param line New text to set at the specified index\n+      * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java\n+index ac772bf349e0ffe9cab1df165d9460b387f2fe69..2588edf75483855e0c843834f39ca371770730b9 100644\n+--- a/src/main/java/org/bukkit/command/CommandSender.java\n++++ b/src/main/java/org/bukkit/command/CommandSender.java\n+@@ -6,12 +6,13 @@ import org.bukkit.permissions.Permissible;\n+ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+-public interface CommandSender extends Permissible {\n++public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper\n+ \n+     /**\n+      * Sends this sender a message\n+      *\n+      * @param message Message to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String message);\n+ \n+@@ -19,6 +20,7 @@ public interface CommandSender extends Permissible {\n+      * Sends this sender multiple messages\n+      *\n+      * @param messages An array of messages to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String[] messages);\n+ \n+@@ -27,6 +29,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param message Message to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String message);\n+ \n+@@ -35,6 +38,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param messages An array of messages to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String[] messages);\n+ \n+@@ -61,7 +65,9 @@ public interface CommandSender extends Permissible {\n+          * Sends this sender a chat component.\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -70,7 +76,9 @@ public interface CommandSender extends Permissible {\n+          * Sends an array of components as a single message to the sender.\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -80,7 +88,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param component the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -90,7 +100,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param components the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -99,4 +111,11 @@ public interface CommandSender extends Permissible {\n+     @NotNull\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity identity, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/command/ProxiedCommandSender.java b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+index fcc34b640265f4dccb46b9f09466ab8e1d96043e..74599b4ee0518481c0e3a5f6ab2f5302837f1ae3 100644\n+--- a/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n++++ b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+@@ -3,7 +3,7 @@ package org.bukkit.command;\n+ \n+ import org.jetbrains.annotations.NotNull;\n+ \n+-public interface ProxiedCommandSender extends CommandSender {\n++public interface ProxiedCommandSender extends CommandSender, net.kyori.adventure.audience.ForwardingAudience.Single { // Paper\n+ \n+     /**\n+      * Returns the CommandSender which triggered this proxied command\n+@@ -21,4 +21,16 @@ public interface ProxiedCommandSender extends CommandSender {\n+     @NotNull\n+     CommandSender getCallee();\n+ \n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.Single.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.audience.Audience audience() {\n++        return this.getCaller();\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+index b833ef63fbe01271ceb2bd83a9eb4a84c9912761..1a093a30adf18572693032b78f3d2683e87d2e21 100644\n+--- a/src/main/java/org/bukkit/enchantments/Enchantment.java\n++++ b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+@@ -294,6 +294,9 @@ public abstract class Enchantment implements Keyed {\n+      * @return True if the enchantment may be applied, otherwise False\n+      */\n+     public abstract boolean canEnchantItem(@NotNull ItemStack item);\n++    // Paper start\n++    public abstract @NotNull net.kyori.adventure.text.Component displayName(int level);\n++    // Paper end\n+ \n+     @Override\n+     public boolean equals(Object obj) {\n+diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+index 9566e4306ada5e82dede0f002aa06da12c44996b..4d5f0837bd0e02a30c943d8969fb6b13452322e0 100644\n+--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n++++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+@@ -63,4 +63,11 @@ public class EnchantmentWrapper extends Enchantment {\n+     public boolean conflictsWith(@NotNull Enchantment other) {\n+         return getEnchantment().conflictsWith(other);\n+     }\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.Component displayName(int level) {\n++        return getEnchantment().displayName(level);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java\n+index 344c14a5ed86e9ebe401bfb5ba3aedc0c0ed0b04..54597268cfbe03c5e521476d3d26e612457cf381 100644\n+--- a/src/main/java/org/bukkit/entity/Entity.java\n++++ b/src/main/java/org/bukkit/entity/Entity.java\n+@@ -25,7 +25,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a base entity in the world\n+  */\n+-public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder {\n++public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowEntity> { // Paper\n+ \n+     /**\n+      * Gets the entity's current position\n+@@ -602,4 +602,12 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent\n+     @Override\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(op.apply(net.kyori.adventure.text.event.HoverEvent.ShowEntity.of(this.getType().getKey(), this.getUniqueId(), null)));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java\n+index f22b21ee12496452f7b2125c131f56ecc74d439a..447de8f7c1d871ef5fb1a06bace451e1de06d972 100644\n+--- a/src/main/java/org/bukkit/entity/Player.java\n++++ b/src/main/java/org/bukkit/entity/Player.java\n+@@ -30,7 +30,28 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a player, connected or not\n+  */\n+-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient {\n++public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified { // Paper\n++\n++    // Paper start\n++    @Override\n++    default @NotNull net.kyori.adventure.identity.Identity identity() {\n++        return net.kyori.adventure.identity.Identity.identity(this.getUniqueId());\n++    }\n++\n++    /**\n++     * Gets the \"friendly\" name to display of this player.\n++     *\n++     * @return the display name\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the \"friendly\" name to display of this player.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n+ \n+     /**\n+      * Gets the \"friendly\" name to display of this player. This may include\n+@@ -40,7 +61,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @return the friendly name\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     public String getDisplayName();\n+ \n+@@ -52,15 +75,51 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @param name The new display name.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setDisplayName(@Nullable String name);\n+ \n++    // Paper start\n++    /**\n++     * Sets the name that is shown on the in-game player list.\n++     * <p>\n++     * If the value is null, the name will be identical to {@link #getName()}.\n++     *\n++     * @param name new player list name\n++     */\n++    void playerListName(@Nullable net.kyori.adventure.text.Component name);\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListName();\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     * @deprecated in favour of {@link #playerListName()}\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListHeader();\n++\n++    /**\n++     * Gets the currently displayed player list footer for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListFooter();\n++    // Paper end\n+     /**\n+      * Gets the name that is shown on the player list.\n+      *\n+      * @return the player list name\n++     * @deprecated in favour of {@link #playerListName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getPlayerListName();\n+ \n+     /**\n+@@ -69,14 +128,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * If the value is null, the name will be identical to {@link #getName()}.\n+      *\n+      * @param name new player list name\n++     * @deprecated in favour of {@link #playerListName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListName(@Nullable String name);\n+ \n+     /**\n+      * Gets the currently displayed player list header for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListHeader()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListHeader();\n+ \n+@@ -84,7 +147,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Gets the currently displayed player list footer for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListFooter()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListFooter();\n+ \n+@@ -92,14 +157,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Sets the currently displayed player list header for this player.\n+      *\n+      * @param header player list header, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeader(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeader(@Nullable String header);\n+ \n+     /**\n+      * Sets the currently displayed player list footer for this player.\n+      *\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListFooter(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListFooter(@Nullable String footer);\n+ \n+     /**\n+@@ -108,7 +177,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      *\n+      * @param header player list header, null for empty\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeaderFooter(@Nullable String header, @Nullable String footer);\n+ \n+     /**\n+@@ -146,9 +217,20 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Kicks player with custom kick message.\n+      *\n+      * @param message kick message\n++     * @deprecated in favour of {@link #kick(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void kickPlayer(@Nullable String message);\n+ \n++    // Paper start\n++    /**\n++     * Kicks player with custom kick message.\n++     *\n++     * @param message kick message\n++     */\n++    void kick(final @Nullable net.kyori.adventure.text.Component message);\n++    // Paper end\n++\n+     /**\n+      * Says a message (or runs a command).\n+      *\n+@@ -437,6 +519,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+     @Deprecated\n+     public boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, @NotNull byte[] data);\n+ \n++    // Paper start\n+     /**\n+      * Send a sign change. This fakes a sign change packet for a user at\n+      * a certain location. This will not actually change the world in any way.\n+@@ -452,6 +535,43 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n+      */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines) throws IllegalArgumentException;\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @param  dyeColor the color of the sign\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if dyeColor is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n++    // Paper end\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List)}\n++     */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines) throws IllegalArgumentException;\n+ \n+ \n+@@ -471,7 +591,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if dyeColor is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List, org.bukkit.DyeColor)}\n+      */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -1258,6 +1380,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public int getClientViewDistance();\n+ \n++    // Paper start\n++    /**\n++     * Gets the player's current locale.\n++     *\n++     * @return the player's locale\n++     */\n++    @NotNull java.util.Locale locale();\n++    // Paper end\n+     /**\n+      * Gets the player's current locale.\n+      *\n+@@ -1268,8 +1398,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * they wish.\n+      *\n+      * @return the player's locale\n++     * @deprecated in favour of {@link #locale()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLocale();\n+ \n+     /**\n+@@ -1287,6 +1419,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public void openBook(@NotNull ItemStack book);\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(this.getType().getKey(), this.getUniqueId(), this.displayName());\n++    }\n++    // Paper end\n++\n+     // Spigot start\n+     public class Spigot extends Entity.Spigot {\n+ \n+@@ -1341,11 +1481,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+@@ -1356,7 +1498,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1366,7 +1510,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1523,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1388,7 +1536,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+ \n+diff --git a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+index 63c80b4ee1f7adc8a9efc3b607993104b1991f90..7adbc6f87771c21d374e610fcb21a2442f2d8031 100644\n+--- a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n++++ b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+@@ -25,6 +25,16 @@ public interface CommandMinecart extends Minecart {\n+      *     activated.\n+      */\n+     public void setCommand(@Nullable String command);\n++    // Paper start\n++    /**\n++     * Sets the name of this CommandMinecart.  The name is used with commands\n++     * that this CommandMinecart executes.  Setting the name to null is the\n++     * same as setting it to \"@\".\n++     *\n++     * @param name New name for this CommandMinecart.\n++     */\n++    void name(@Nullable net.kyori.adventure.text.Component name);\n++    // Paper end\n+ \n+     /**\n+      * Sets the name of this CommandMinecart.  The name is used with commands\n+@@ -32,7 +42,9 @@ public interface CommandMinecart extends Minecart {\n+      * same as setting it to \"@\".\n+      *\n+      * @param name New name for this CommandMinecart.\n++     * @deprecated in favour of {@link #name(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setName(@Nullable String name);\n+ \n+ }\n+diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+index f1e9bc9bc797b7216336d3470e3c696a06f2b21a..090d22bd30f7947103771aaaf09a2398970ac337 100644\n+--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java\n++++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+@@ -136,6 +136,18 @@ public enum InventoryType {\n+     private final String title;\n+     private final boolean isCreatable;\n+ \n++    // Paper start\n++    private final net.kyori.adventure.text.Component defaultTitleComponent;\n++\n++    /**\n++     * Gets the inventory's default title.\n++     *\n++     * @return the inventory's default title\n++     */\n++    public @NotNull net.kyori.adventure.text.Component defaultTitle() {\n++        return defaultTitleComponent;\n++    }\n++    // Paper end\n+     private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {\n+         this(defaultSize, defaultTitle, true);\n+     }\n+@@ -144,6 +156,7 @@ public enum InventoryType {\n+         size = defaultSize;\n+         title = defaultTitle;\n+         this.isCreatable = isCreatable;\n++        this.defaultTitleComponent = net.kyori.adventure.text.Component.text(defaultTitle); // Paper - Adventure\n+     }\n+ \n+     public int getDefaultSize() {\n+@@ -151,6 +164,7 @@ public enum InventoryType {\n+     }\n+ \n+     @NotNull\n++    @Deprecated // Paper\n+     public String getDefaultTitle() {\n+         return title;\n+     }\n+diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java\n+index 14346d83bc99581b18e53d19af03708c0bf22cf7..b6cbf23dd40fb1cb1fec3c7d6918438ebf5bcc2e 100644\n+--- a/src/main/java/org/bukkit/inventory/InventoryView.java\n++++ b/src/main/java/org/bukkit/inventory/InventoryView.java\n+@@ -446,11 +446,23 @@ public abstract class InventoryView {\n+         return getPlayer().setWindowProperty(prop, value);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Get the title of this inventory window.\n+      *\n+      * @return The title.\n+      */\n+     @NotNull\n++    public abstract net.kyori.adventure.text.Component title();\n++    // Paper end\n++\n++    /**\n++     * Get the title of this inventory window.\n++     *\n++     * @return The title.\n++     * @deprecated in favour of {@link #title()}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public abstract String getTitle();\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+index 4ff149fd98895dd8ba45939a37c223b1f8d7281f..3dba4c361993e143e511b4f108ac0b444a84d964 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemFactory.java\n++++ b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+@@ -141,4 +141,15 @@ public interface ItemFactory {\n+     @Deprecated\n+     @NotNull\n+     Material updateMaterial(@NotNull final ItemMeta meta, @NotNull final Material material) throws IllegalArgumentException;\n++\n++    // Paper start\n++    /**\n++     * Creates a hover event for the given item.\n++     *\n++     * @param item The item\n++     * @return A hover event\n++     */\n++    @NotNull\n++    net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull ItemStack item, final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op);\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java\n+index f70a6a22b85ff0da76e67e9b223ad4e0b020b5c4..4b20b557eaa958cf1ad1baf8d6cc17f38b180ff1 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemStack.java\n++++ b/src/main/java/org/bukkit/inventory/ItemStack.java\n+@@ -22,7 +22,7 @@ import org.jetbrains.annotations.Nullable;\n+  * use this class to encapsulate Materials for which {@link Material#isItem()}\n+  * returns false.</b>\n+  */\n+-public class ItemStack implements Cloneable, ConfigurationSerializable {\n++public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem> { // Paper\n+     private Material type = Material.AIR;\n+     private int amount = 0;\n+     private MaterialData data = null;\n+@@ -595,4 +595,12 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {\n+ \n+         return true;\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {\n++        return org.bukkit.Bukkit.getServer().getItemFactory().asHoverEvent(this, op);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+index 94852d50e88d0594b84b581cd627174043629995..e143081922c2027e8ca1db6f1e7eb5b4d786ab41 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+@@ -119,6 +119,63 @@ public interface BookMeta extends ItemMeta {\n+      */\n+     boolean hasPages();\n+ \n++    // Paper start\n++    /**\n++     * Gets the specified page in the book. The page must exist.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to get, in range [1, getPageCount()]\n++     * @return the page from the book\n++     */\n++    @NotNull net.kyori.adventure.text.Component page(int page);\n++\n++    /**\n++     * Sets the specified page in the book. Pages of the book must be\n++     * contiguous.\n++     * <p>\n++     * The data can be up to 256 characters in length, additional characters\n++     * are truncated.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to set, in range [1, getPageCount()]\n++     * @param data the data to set for that page\n++     */\n++    void page(int page, @NotNull net.kyori.adventure.text.Component data);\n++\n++    /**\n++     * Gets all the pages in the book.\n++     *\n++     * @return list of all the pages in the book\n++     */\n++    @NotNull List<net.kyori.adventure.text.Component> pages();\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 100 pages with 256 characters per page.\n++     *\n++     * @param pages A list of pages to set the book to use\n++     */\n++    void pages(@NotNull List<net.kyori.adventure.text.Component> pages);\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 50 pages with 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void pages(@NotNull net.kyori.adventure.text.Component... pages);\n++\n++    /**\n++     * Adds new pages to the end of the book. Up to a maximum of 50 pages with\n++     * 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void addPages(@NotNull net.kyori.adventure.text.Component... pages);\n++    // Paper end\n++\n+     /**\n+      * Gets the specified page in the book. The given page must exist.\n+      * <p>\n+@@ -126,8 +183,10 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to get, in range [1, getPageCount()]\n+      * @return the page from the book\n++     * @deprecated in favour of {@link #page(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getPage(int page);\n+ \n+     /**\n+@@ -141,15 +200,19 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to set, in range [1, getPageCount()]\n+      * @param data the data to set for that page\n++     * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setPage(int page, @NotNull String data);\n+ \n+     /**\n+      * Gets all the pages in the book.\n+      *\n+      * @return list of all the pages in the book\n++     * @deprecated in favour of {@link #pages()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     List<String> getPages();\n+ \n+     /**\n+@@ -157,7 +220,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 100 pages with 256 characters per page.\n+      *\n+      * @param pages A list of pages to set the book to use\n++     * @deprecated in favour of {@link #pages(List)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull List<String> pages);\n+ \n+     /**\n+@@ -165,7 +230,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 50 pages with 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull String... pages);\n+ \n+     /**\n+@@ -173,7 +240,9 @@ public interface BookMeta extends ItemMeta {\n+      * 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void addPage(@NotNull String... pages);\n+ \n+     /**\n+@@ -195,8 +264,10 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to get\n+          * @return the page from the book\n++         * @deprecated in favour of {@link #page(int)}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public BaseComponent[] getPage(int page) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -210,7 +281,9 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to set\n+          * @param data the data to set for that page\n++         * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+          */\n++        @Deprecated // Paper\n+         public void setPage(int page, @Nullable BaseComponent... data) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -219,8 +292,10 @@ public interface BookMeta extends ItemMeta {\n+          * Gets all the pages in the book.\n+          *\n+          * @return list of all the pages in the book\n++         * @deprecated in favour of {@link #pages()}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public List<BaseComponent[]> getPages() {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -230,7 +305,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of pages to set the book to use\n++         * @deprecated in favour of {@link #pages(java.util.List)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull List<BaseComponent[]> pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -240,7 +317,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -250,7 +329,9 @@ public interface BookMeta extends ItemMeta {\n+          * with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void addPage(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+index f2e9f2753ec92aa4a3e3f06ca6053bd70b9091d7..1c362636c56db0e6c118171ba367c43c4f7cff33 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+@@ -31,6 +31,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasDisplayName();\n+ \n++    // Paper start\n++    /**\n++     * Gets the display name.\n++     *\n++     * <p>Plugins should check that {@link #hasDisplayName()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the display name.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n++\n+     /**\n+      * Gets the display name that is set.\n+      * <p>\n+@@ -38,7 +56,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * before calling this method.\n+      *\n+      * @return the display name that is set\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     String getDisplayName();\n+ \n+@@ -46,7 +66,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Sets the display name.\n+      *\n+      * @param name the name to set\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setDisplayName(@Nullable String name);\n+ \n+     /**\n+@@ -81,6 +103,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasLore();\n+ \n++    // Paper start\n++    /**\n++     * Gets the lore.\n++     *\n++     * <p>Plugins should check that {@link #hasLore()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable List<net.kyori.adventure.text.Component> lore();\n++\n++    /**\n++     * Sets the lore.\n++     *\n++     * @param lore the lore to set\n++     */\n++    void lore(final @Nullable List<net.kyori.adventure.text.Component> lore);\n++    // Paper end\n++\n+     /**\n+      * Gets the lore that is set.\n+      * <p>\n+@@ -88,7 +128,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * calling this method.\n+      *\n+      * @return a list of lore that is set\n++     * @deprecated in favour of {@link #lore()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     List<String> getLore();\n+ \n+@@ -97,7 +139,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Removes lore when given null.\n+      *\n+      * @param lore the lore that will be set\n++     * @deprecated in favour of {@link #lore(List)}\n+      */\n++    @Deprecated // Paper\n+     void setLore(@Nullable List<String> lore);\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java\n+index 83354b2a38b6261b172b91c1008dcf3313cc4a8f..1052d5f0de6b1dbd261cd05bb6dd0714119ff539 100644\n+--- a/src/main/java/org/bukkit/map/MapCursor.java\n++++ b/src/main/java/org/bukkit/map/MapCursor.java\n+@@ -10,7 +10,7 @@ public final class MapCursor {\n+     private byte x, y;\n+     private byte direction, type;\n+     private boolean visible;\n+-    private String caption;\n++    private net.kyori.adventure.text.Component caption; // Paper\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -24,7 +24,7 @@ public final class MapCursor {\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -37,7 +37,7 @@ public final class MapCursor {\n+      * @param visible Whether the cursor is visible by default.\n+      */\n+     public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -49,7 +49,7 @@ public final class MapCursor {\n+      * @param type The type (color/style) of the map cursor.\n+      * @param visible Whether the cursor is visible by default.\n+      * @param caption cursor caption\n+-     * @deprecated Magic value\n++     * @deprecated Magic value. Use {@link #MapCursor(byte, byte, byte, byte, boolean, net.kyori.adventure.text.Component)}\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+@@ -58,8 +58,40 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setRawType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n++    }\n++    // Paper start\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        this.x = x; this.y = y; this.visible = visible; this.caption = caption;\n++        setDirection(direction);\n++        setRawType(type);\n++    }\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     */\n++    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++\n+     }\n++    // Paper end\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -77,7 +109,7 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+@@ -200,23 +232,45 @@ public final class MapCursor {\n+         this.visible = visible;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the caption on this cursor.\n++     *\n++     * @return caption\n++     */\n++    public @Nullable net.kyori.adventure.text.Component caption() {\n++        return this.caption;\n++    }\n++    /**\n++     * Sets the caption on this cursor.\n++     *\n++     * @param caption new caption\n++     */\n++    public void caption(@Nullable net.kyori.adventure.text.Component caption) {\n++        this.caption = caption;\n++    }\n++    // Paper end\n+     /**\n+      * Gets the caption on this cursor.\n+      *\n+      * @return caption\n++     * @deprecated in favour of {@link #caption()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getCaption() {\n+-        return caption;\n++        return this.caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.caption); // Paper\n+     }\n+ \n+     /**\n+      * Sets the caption on this cursor.\n+      *\n+      * @param caption new caption\n++     * @deprecated in favour of {@link #caption(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setCaption(@Nullable String caption) {\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+index 4dba721aefe4fc6699b3b4bfa7ecb0b19c2a2a1a..01dec2c877df58c9dc22445e8b1f9ce2e53066da 100644\n+--- a/src/main/java/org/bukkit/map/MapCursorCollection.java\n++++ b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+@@ -117,4 +117,22 @@ public final class MapCursorCollection {\n+     public MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n+     }\n++    // Paper start\n++    /**\n++     * Add a cursor to the collection.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible.\n++     * @param caption banner caption\n++     * @return The newly added MapCursor.\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public @NotNull MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java\n+index f5cbf6df32ef169cf0f2266f7c6e9c4f771ccb7d..58bddb11fd534e7c33a4ffd7b72b055ba92c767a 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Objective.java\n++++ b/src/main/java/org/bukkit/scoreboard/Objective.java\n+@@ -19,14 +19,35 @@ public interface Objective {\n+      */\n+     @NotNull\n+     String getName() throws IllegalStateException;\n++    // Paper start\n++    /**\n++     * Gets the name displayed to players for this objective\n++     *\n++     * @return this objective's display name\n++     * @throws IllegalStateException if this objective has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName() throws IllegalStateException;\n++    /**\n++     * Sets the name displayed to players for this objective.\n++     *\n++     * @param displayName Display name to set\n++     * @throws IllegalStateException if this objective has been unregistered\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     */\n++    void displayName(@Nullable net.kyori.adventure.text.Component displayName) throws IllegalStateException, IllegalArgumentException;\n++    // Paper end\n+ \n+     /**\n+      * Gets the name displayed to players for this objective\n+      *\n+      * @return this objective's display name\n+      * @throws IllegalStateException if this objective has been unregistered\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getDisplayName() throws IllegalStateException;\n+ \n+     /**\n+@@ -37,7 +58,9 @@ public interface Objective {\n+      * @throws IllegalArgumentException if displayName is null\n+      * @throws IllegalArgumentException if displayName is longer than 128\n+      *     characters.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setDisplayName(@NotNull String displayName) throws IllegalStateException, IllegalArgumentException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/scoreboard/Scoreboard.java b/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n+index 4bfaaea78c9b6aa5d392629aa943d26dbe6a7d4a..f09ff32cc3ffc16af379a378b1948991435393e8 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n++++ b/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n+@@ -27,6 +27,48 @@ public interface Scoreboard {\n+     @Deprecated\n+     @NotNull\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria) throws IllegalArgumentException;\n++    // Paper start\n++    /**\n++     * Registers an Objective on this Scoreboard\n++     *\n++     * @param name Name of the Objective\n++     * @param criteria Criteria for the Objective\n++     * @param displayName Name displayed to players for the Objective.\n++     * @return The registered Objective\n++     * @throws IllegalArgumentException if name is null\n++     * @throws IllegalArgumentException if name is longer than 16\n++     *     characters.\n++     * @throws IllegalArgumentException if criteria is null\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalArgumentException if an objective by that name already\n++     *     exists\n++     */\n++    @NotNull\n++    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @Nullable net.kyori.adventure.text.Component displayName) throws IllegalArgumentException;\n++    /**\n++     * Registers an Objective on this Scoreboard\n++     *\n++     * @param name Name of the Objective\n++     * @param criteria Criteria for the Objective\n++     * @param displayName Name displayed to players for the Objective.\n++     * @param renderType Manner of rendering the Objective\n++     * @return The registered Objective\n++     * @throws IllegalArgumentException if name is null\n++     * @throws IllegalArgumentException if name is longer than 16\n++     *     characters.\n++     * @throws IllegalArgumentException if criteria is null\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalArgumentException if renderType is null\n++     * @throws IllegalArgumentException if an objective by that name already\n++     *     exists\n++     */\n++    @NotNull\n++    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @Nullable net.kyori.adventure.text.Component displayName, @NotNull RenderType renderType) throws IllegalArgumentException;\n++    // Paper end\n+ \n+     /**\n+      * Registers an Objective on this Scoreboard\n+@@ -44,8 +86,10 @@ public interface Scoreboard {\n+      *     characters.\n+      * @throws IllegalArgumentException if an objective by that name already\n+      *     exists\n++     * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -66,8 +110,10 @@ public interface Scoreboard {\n+      * @throws IllegalArgumentException if renderType is null\n+      * @throws IllegalArgumentException if an objective by that name already\n+      *     exists\n++     * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component, RenderType)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName, @NotNull RenderType renderType) throws IllegalArgumentException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java\n+index da01d2926cc8a2485a3349ac1ebb32cad20e287c..812b7bfb686437c97884bfdff1be25657e654daf 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Team.java\n++++ b/src/main/java/org/bukkit/scoreboard/Team.java\n+@@ -22,14 +22,95 @@ public interface Team {\n+      */\n+     @NotNull\n+     String getName() throws IllegalStateException;\n++    // Paper start\n++    /**\n++     * Gets the name displayed to entries for this team\n++     *\n++     * @return Team display name\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName() throws IllegalStateException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a00ec991bb23a4847156894674e0af22f86fca"}, "originalPosition": 1902}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQxMTgyOnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0005-Adventure.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjozNTo0MVrOINRMDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjozNTo0MVrOINRMDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4NDAxNA==", "bodyText": "Please make this TextColor, there's no reason to keep it narrow to named.", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550784014", "createdAt": "2021-01-01T16:35:41Z", "author": {"login": "Electroid"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->\n+         <dependency>\n+             <groupId>it.unimi.dsi</groupId>\n+             <artifactId>fastutil</artifactId>\n+diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+index ef58a6c00f444bd498a2d8fc4e457236f393954f..ecd149157d4fb80444f34bf5633d74bcdb63dec5 100644\n+--- a/src/main/java/co/aikar/timings/TimingsReportListener.java\n++++ b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+ @SuppressWarnings(\"WeakerAccess\")\n+-public class TimingsReportListener implements MessageCommandSender {\n++public class TimingsReportListener implements net.kyori.adventure.audience.ForwardingAudience, MessageCommandSender { // Paper\n+     private final List<CommandSender> senders;\n+     private final Runnable onDone;\n+     private String timingsURL;\n+@@ -74,4 +74,17 @@ public class TimingsReportListener implements MessageCommandSender {\n+             this.senders.add(Bukkit.getConsoleSender());\n+         }\n+     }\n++\n++    // Paper start\n++    @Override\n++    public void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.senders;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java\n+index 7c715fdc11ab7837552b1fe3ffd08b31cec0a63b..426b1e83226e674ee4bf3ec05ddcd3ac4376b06d 100644\n+--- a/src/main/java/org/bukkit/Bukkit.java\n++++ b/src/main/java/org/bukkit/Bukkit.java\n+@@ -278,7 +278,9 @@ public final class Bukkit {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated in favour of {@link Server#sendMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public static int broadcastMessage(@NotNull String message) {\n+         return server.broadcastMessage(message);\n+     }\n+@@ -836,6 +838,7 @@ public final class Bukkit {\n+         server.shutdown();\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Broadcasts the specified message to every user with the given\n+      * permission name.\n+@@ -845,6 +848,21 @@ public final class Bukkit {\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n+      */\n++    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {\n++        return server.broadcast(message, permission);\n++    }\n++    // Paper end\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n++     */\n++    @Deprecated // Paper\n+     public static int broadcast(@NotNull String message, @NotNull String permission) {\n+         return server.broadcast(message, permission);\n+     }\n+@@ -1044,6 +1062,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, type);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -1069,6 +1088,38 @@ public final class Bukkit {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {\n++        return server.createInventory(owner, type, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {\n+         return server.createInventory(owner, type, title);\n+     }\n+@@ -1087,6 +1138,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, size);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -1099,10 +1151,30 @@ public final class Bukkit {\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {\n++        return server.createInventory(owner, size, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {\n+         return server.createInventory(owner, size, title);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+@@ -1110,7 +1182,20 @@ public final class Bukkit {\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n+      */\n++    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {\n++        return server.createMerchant(title);\n++    }\n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static Merchant createMerchant(@Nullable String title) {\n+         return server.createMerchant(title);\n+     }\n+@@ -1181,22 +1266,47 @@ public final class Bukkit {\n+         return server.isPrimaryThread();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull public static net.kyori.adventure.text.Component motd() {\n++        return server.motd();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static String getMotd() {\n+         return server.getMotd();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    public static @Nullable net.kyori.adventure.text.Component shutdownMessage() {\n++        return server.shutdownMessage();\n++    }\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public static String getShutdownMessage() {\n+         return server.getShutdownMessage();\n+     }\n+diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java\n+index fee814e01a653d2b53c56e8b566383ca44aa5346..2acdf2a6d3955923c721222b9da784f3278f6418 100644\n+--- a/src/main/java/org/bukkit/Nameable.java\n++++ b/src/main/java/org/bukkit/Nameable.java\n+@@ -4,6 +4,30 @@ import org.jetbrains.annotations.Nullable;\n+ \n+ public interface Nameable {\n+ \n++    // Paper start\n++    /**\n++     * Gets the custom name.\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @return the custom name\n++     */\n++    @Nullable net.kyori.adventure.text.Component customName();\n++\n++    /**\n++     * Sets the custom name.\n++     *\n++     * <p>This name will be used in death messages and can be sent to the client as a nameplate over the mob.</p>\n++     *\n++     * <p>Setting the name to {@code null} will clear it.</p>\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @param customName the custom name to set\n++     */\n++    void customName(final @Nullable net.kyori.adventure.text.Component customName);\n++    // Paper end\n++\n+     /**\n+      * Gets the custom name on a mob or block. If there is no name this method\n+      * will return null.\n+diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java\n+index 22eca2a180618ed43a4ef103bebd134897d6c71a..abb7448ee8fe1152623794d3b806eef9a9e17abc 100644\n+--- a/src/main/java/org/bukkit/NamespacedKey.java\n++++ b/src/main/java/org/bukkit/NamespacedKey.java\n+@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n+  * underscores, hyphens, and forward slashes.\n+  *\n+  */\n+-public final class NamespacedKey {\n++public final class NamespacedKey implements net.kyori.adventure.key.Key { // Paper - implement Key\n+ \n+     /**\n+      * The namespace representing all inbuilt keys.\n+@@ -139,4 +139,24 @@ public final class NamespacedKey {\n+     public static NamespacedKey minecraft(@NotNull String key) {\n+         return new NamespacedKey(MINECRAFT, key);\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public String namespace() {\n++        return this.getNamespace();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String value() {\n++        return this.getKey();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String asString() {\n++        return this.namespace + ':' + this.key;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java\n+index a6b9e4f158583e5932bf8ca210d531857e9f5360..d9515a79dc7ed60c66960cd6c6bb4c108f206f3c 100644\n+--- a/src/main/java/org/bukkit/Server.java\n++++ b/src/main/java/org/bukkit/Server.java\n+@@ -55,7 +55,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a server implementation.\n+  */\n+-public interface Server extends PluginMessageRecipient {\n++public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Used for all administrative messages, such as an operator using a\n+@@ -229,7 +229,9 @@ public interface Server extends PluginMessageRecipient {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+      */\n++    @Deprecated // Paper\n+     public int broadcastMessage(@NotNull String message);\n+ \n+     /**\n+@@ -703,8 +705,22 @@ public interface Server extends PluginMessageRecipient {\n+      * @param permission the required permission {@link Permissible\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n+      */\n++    @Deprecated // Paper\n+     public int broadcast(@NotNull String message, @NotNull String permission);\n++    // Paper start\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     */\n++    int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);\n++    // Paper end\n+ \n+     /**\n+      * Gets the player by the given name, regardless if they are offline or\n+@@ -869,6 +885,7 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -894,6 +911,36 @@ public interface Server extends PluginMessageRecipient {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);\n+ \n+     /**\n+@@ -908,6 +955,22 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     */\n++    @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;\n++    // Paper end\n++\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -918,18 +981,32 @@ public interface Server extends PluginMessageRecipient {\n+      *     viewed\n+      * @return a new inventory\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     */\n++    @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);\n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+      * @param title the title of the corresponding merchant inventory, displayed\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Merchant createMerchant(@Nullable String title);\n+ \n+     /**\n+@@ -986,20 +1063,41 @@ public interface Server extends PluginMessageRecipient {\n+      */\n+     boolean isPrimaryThread();\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull net.kyori.adventure.text.Component motd();\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getMotd();\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    @Nullable net.kyori.adventure.text.Component shutdownMessage();\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     String getShutdownMessage();\n+ \n+     /**\n+@@ -1368,7 +1466,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends the component to the player\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1477,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends an array of components as a single message to the player\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java\n+index cdcbc8b05afc412017ac0e4ed0adf227d1342336..6b5dbe4ea711807a1944cfe2aae2ce415d4f2638 100644\n+--- a/src/main/java/org/bukkit/World.java\n++++ b/src/main/java/org/bukkit/World.java\n+@@ -38,7 +38,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a world, which may contain entities, chunks and blocks\n+  */\n+-public interface World extends PluginMessageRecipient, Metadatable {\n++public interface World extends PluginMessageRecipient, Metadatable, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Gets the {@link Block} at the given coordinates\n+@@ -616,6 +616,14 @@ public interface World extends PluginMessageRecipient, Metadatable {\n+     @NotNull\n+     public List<Player> getPlayers();\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.getPlayers();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Returns a list of entities within a bounding box centered around a\n+      * Location.\n+diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java\n+index 7e3cf00e49c66023bf46c298ef46c00e8c3c2caf..6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41 100644\n+--- a/src/main/java/org/bukkit/block/Sign.java\n++++ b/src/main/java/org/bukkit/block/Sign.java\n+@@ -7,13 +7,48 @@ import org.jetbrains.annotations.NotNull;\n+  * Represents a captured state of either a SignPost or a WallSign.\n+  */\n+ public interface Sign extends TileState, Colorable {\n++    // Paper start\n++    /**\n++     * Gets all the lines of text currently on this sign.\n++     *\n++     * @return Array of Strings containing each line of text\n++     */\n++    @NotNull\n++    public java.util.List<net.kyori.adventure.text.Component> lines();\n++\n++    /**\n++     * Gets the line of text at the specified index.\n++     * <p>\n++     * For example, getLine(0) will return the first line of text.\n++     *\n++     * @param index Line number to get the text from, starting at 0\n++     * @throws IndexOutOfBoundsException Thrown when the line does not exist\n++     * @return Text on the given line\n++     */\n++    @NotNull\n++    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;\n++\n++    /**\n++     * Sets the line of text at the specified index.\n++     * <p>\n++     * For example, setLine(0, \"Line One\") will set the first line of text to\n++     * \"Line One\".\n++     *\n++     * @param index Line number to set the text at, starting from 0\n++     * @param line New text to set at the specified index\n++     * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     */\n++    public void line(int index, @NotNull net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;\n++    // Paper end\n+ \n+     /**\n+      * Gets all the lines of text currently on this sign.\n+      *\n+      * @return Array of Strings containing each line of text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines();\n+ \n+     /**\n+@@ -24,8 +59,10 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to get the text from, starting at 0\n+      * @throws IndexOutOfBoundsException Thrown when the line does not exist\n+      * @return Text on the given line\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException;\n+ \n+     /**\n+@@ -37,7 +74,9 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to set the text at, starting from 0\n+      * @param line New text to set at the specified index\n+      * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java\n+index ac772bf349e0ffe9cab1df165d9460b387f2fe69..2588edf75483855e0c843834f39ca371770730b9 100644\n+--- a/src/main/java/org/bukkit/command/CommandSender.java\n++++ b/src/main/java/org/bukkit/command/CommandSender.java\n+@@ -6,12 +6,13 @@ import org.bukkit.permissions.Permissible;\n+ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+-public interface CommandSender extends Permissible {\n++public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper\n+ \n+     /**\n+      * Sends this sender a message\n+      *\n+      * @param message Message to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String message);\n+ \n+@@ -19,6 +20,7 @@ public interface CommandSender extends Permissible {\n+      * Sends this sender multiple messages\n+      *\n+      * @param messages An array of messages to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String[] messages);\n+ \n+@@ -27,6 +29,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param message Message to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String message);\n+ \n+@@ -35,6 +38,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param messages An array of messages to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String[] messages);\n+ \n+@@ -61,7 +65,9 @@ public interface CommandSender extends Permissible {\n+          * Sends this sender a chat component.\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -70,7 +76,9 @@ public interface CommandSender extends Permissible {\n+          * Sends an array of components as a single message to the sender.\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -80,7 +88,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param component the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -90,7 +100,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param components the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -99,4 +111,11 @@ public interface CommandSender extends Permissible {\n+     @NotNull\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity identity, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/command/ProxiedCommandSender.java b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+index fcc34b640265f4dccb46b9f09466ab8e1d96043e..74599b4ee0518481c0e3a5f6ab2f5302837f1ae3 100644\n+--- a/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n++++ b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+@@ -3,7 +3,7 @@ package org.bukkit.command;\n+ \n+ import org.jetbrains.annotations.NotNull;\n+ \n+-public interface ProxiedCommandSender extends CommandSender {\n++public interface ProxiedCommandSender extends CommandSender, net.kyori.adventure.audience.ForwardingAudience.Single { // Paper\n+ \n+     /**\n+      * Returns the CommandSender which triggered this proxied command\n+@@ -21,4 +21,16 @@ public interface ProxiedCommandSender extends CommandSender {\n+     @NotNull\n+     CommandSender getCallee();\n+ \n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.Single.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.audience.Audience audience() {\n++        return this.getCaller();\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+index b833ef63fbe01271ceb2bd83a9eb4a84c9912761..1a093a30adf18572693032b78f3d2683e87d2e21 100644\n+--- a/src/main/java/org/bukkit/enchantments/Enchantment.java\n++++ b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+@@ -294,6 +294,9 @@ public abstract class Enchantment implements Keyed {\n+      * @return True if the enchantment may be applied, otherwise False\n+      */\n+     public abstract boolean canEnchantItem(@NotNull ItemStack item);\n++    // Paper start\n++    public abstract @NotNull net.kyori.adventure.text.Component displayName(int level);\n++    // Paper end\n+ \n+     @Override\n+     public boolean equals(Object obj) {\n+diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+index 9566e4306ada5e82dede0f002aa06da12c44996b..4d5f0837bd0e02a30c943d8969fb6b13452322e0 100644\n+--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n++++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+@@ -63,4 +63,11 @@ public class EnchantmentWrapper extends Enchantment {\n+     public boolean conflictsWith(@NotNull Enchantment other) {\n+         return getEnchantment().conflictsWith(other);\n+     }\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.Component displayName(int level) {\n++        return getEnchantment().displayName(level);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java\n+index 344c14a5ed86e9ebe401bfb5ba3aedc0c0ed0b04..54597268cfbe03c5e521476d3d26e612457cf381 100644\n+--- a/src/main/java/org/bukkit/entity/Entity.java\n++++ b/src/main/java/org/bukkit/entity/Entity.java\n+@@ -25,7 +25,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a base entity in the world\n+  */\n+-public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder {\n++public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowEntity> { // Paper\n+ \n+     /**\n+      * Gets the entity's current position\n+@@ -602,4 +602,12 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent\n+     @Override\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(op.apply(net.kyori.adventure.text.event.HoverEvent.ShowEntity.of(this.getType().getKey(), this.getUniqueId(), null)));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java\n+index f22b21ee12496452f7b2125c131f56ecc74d439a..447de8f7c1d871ef5fb1a06bace451e1de06d972 100644\n+--- a/src/main/java/org/bukkit/entity/Player.java\n++++ b/src/main/java/org/bukkit/entity/Player.java\n+@@ -30,7 +30,28 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a player, connected or not\n+  */\n+-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient {\n++public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified { // Paper\n++\n++    // Paper start\n++    @Override\n++    default @NotNull net.kyori.adventure.identity.Identity identity() {\n++        return net.kyori.adventure.identity.Identity.identity(this.getUniqueId());\n++    }\n++\n++    /**\n++     * Gets the \"friendly\" name to display of this player.\n++     *\n++     * @return the display name\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the \"friendly\" name to display of this player.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n+ \n+     /**\n+      * Gets the \"friendly\" name to display of this player. This may include\n+@@ -40,7 +61,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @return the friendly name\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     public String getDisplayName();\n+ \n+@@ -52,15 +75,51 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @param name The new display name.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setDisplayName(@Nullable String name);\n+ \n++    // Paper start\n++    /**\n++     * Sets the name that is shown on the in-game player list.\n++     * <p>\n++     * If the value is null, the name will be identical to {@link #getName()}.\n++     *\n++     * @param name new player list name\n++     */\n++    void playerListName(@Nullable net.kyori.adventure.text.Component name);\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListName();\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     * @deprecated in favour of {@link #playerListName()}\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListHeader();\n++\n++    /**\n++     * Gets the currently displayed player list footer for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListFooter();\n++    // Paper end\n+     /**\n+      * Gets the name that is shown on the player list.\n+      *\n+      * @return the player list name\n++     * @deprecated in favour of {@link #playerListName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getPlayerListName();\n+ \n+     /**\n+@@ -69,14 +128,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * If the value is null, the name will be identical to {@link #getName()}.\n+      *\n+      * @param name new player list name\n++     * @deprecated in favour of {@link #playerListName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListName(@Nullable String name);\n+ \n+     /**\n+      * Gets the currently displayed player list header for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListHeader()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListHeader();\n+ \n+@@ -84,7 +147,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Gets the currently displayed player list footer for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListFooter()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListFooter();\n+ \n+@@ -92,14 +157,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Sets the currently displayed player list header for this player.\n+      *\n+      * @param header player list header, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeader(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeader(@Nullable String header);\n+ \n+     /**\n+      * Sets the currently displayed player list footer for this player.\n+      *\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListFooter(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListFooter(@Nullable String footer);\n+ \n+     /**\n+@@ -108,7 +177,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      *\n+      * @param header player list header, null for empty\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeaderFooter(@Nullable String header, @Nullable String footer);\n+ \n+     /**\n+@@ -146,9 +217,20 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Kicks player with custom kick message.\n+      *\n+      * @param message kick message\n++     * @deprecated in favour of {@link #kick(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void kickPlayer(@Nullable String message);\n+ \n++    // Paper start\n++    /**\n++     * Kicks player with custom kick message.\n++     *\n++     * @param message kick message\n++     */\n++    void kick(final @Nullable net.kyori.adventure.text.Component message);\n++    // Paper end\n++\n+     /**\n+      * Says a message (or runs a command).\n+      *\n+@@ -437,6 +519,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+     @Deprecated\n+     public boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, @NotNull byte[] data);\n+ \n++    // Paper start\n+     /**\n+      * Send a sign change. This fakes a sign change packet for a user at\n+      * a certain location. This will not actually change the world in any way.\n+@@ -452,6 +535,43 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n+      */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines) throws IllegalArgumentException;\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @param  dyeColor the color of the sign\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if dyeColor is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n++    // Paper end\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List)}\n++     */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines) throws IllegalArgumentException;\n+ \n+ \n+@@ -471,7 +591,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if dyeColor is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List, org.bukkit.DyeColor)}\n+      */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -1258,6 +1380,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public int getClientViewDistance();\n+ \n++    // Paper start\n++    /**\n++     * Gets the player's current locale.\n++     *\n++     * @return the player's locale\n++     */\n++    @NotNull java.util.Locale locale();\n++    // Paper end\n+     /**\n+      * Gets the player's current locale.\n+      *\n+@@ -1268,8 +1398,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * they wish.\n+      *\n+      * @return the player's locale\n++     * @deprecated in favour of {@link #locale()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLocale();\n+ \n+     /**\n+@@ -1287,6 +1419,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public void openBook(@NotNull ItemStack book);\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(this.getType().getKey(), this.getUniqueId(), this.displayName());\n++    }\n++    // Paper end\n++\n+     // Spigot start\n+     public class Spigot extends Entity.Spigot {\n+ \n+@@ -1341,11 +1481,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+@@ -1356,7 +1498,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1366,7 +1510,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1523,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1388,7 +1536,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+ \n+diff --git a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+index 63c80b4ee1f7adc8a9efc3b607993104b1991f90..7adbc6f87771c21d374e610fcb21a2442f2d8031 100644\n+--- a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n++++ b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+@@ -25,6 +25,16 @@ public interface CommandMinecart extends Minecart {\n+      *     activated.\n+      */\n+     public void setCommand(@Nullable String command);\n++    // Paper start\n++    /**\n++     * Sets the name of this CommandMinecart.  The name is used with commands\n++     * that this CommandMinecart executes.  Setting the name to null is the\n++     * same as setting it to \"@\".\n++     *\n++     * @param name New name for this CommandMinecart.\n++     */\n++    void name(@Nullable net.kyori.adventure.text.Component name);\n++    // Paper end\n+ \n+     /**\n+      * Sets the name of this CommandMinecart.  The name is used with commands\n+@@ -32,7 +42,9 @@ public interface CommandMinecart extends Minecart {\n+      * same as setting it to \"@\".\n+      *\n+      * @param name New name for this CommandMinecart.\n++     * @deprecated in favour of {@link #name(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setName(@Nullable String name);\n+ \n+ }\n+diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+index f1e9bc9bc797b7216336d3470e3c696a06f2b21a..090d22bd30f7947103771aaaf09a2398970ac337 100644\n+--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java\n++++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+@@ -136,6 +136,18 @@ public enum InventoryType {\n+     private final String title;\n+     private final boolean isCreatable;\n+ \n++    // Paper start\n++    private final net.kyori.adventure.text.Component defaultTitleComponent;\n++\n++    /**\n++     * Gets the inventory's default title.\n++     *\n++     * @return the inventory's default title\n++     */\n++    public @NotNull net.kyori.adventure.text.Component defaultTitle() {\n++        return defaultTitleComponent;\n++    }\n++    // Paper end\n+     private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {\n+         this(defaultSize, defaultTitle, true);\n+     }\n+@@ -144,6 +156,7 @@ public enum InventoryType {\n+         size = defaultSize;\n+         title = defaultTitle;\n+         this.isCreatable = isCreatable;\n++        this.defaultTitleComponent = net.kyori.adventure.text.Component.text(defaultTitle); // Paper - Adventure\n+     }\n+ \n+     public int getDefaultSize() {\n+@@ -151,6 +164,7 @@ public enum InventoryType {\n+     }\n+ \n+     @NotNull\n++    @Deprecated // Paper\n+     public String getDefaultTitle() {\n+         return title;\n+     }\n+diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java\n+index 14346d83bc99581b18e53d19af03708c0bf22cf7..b6cbf23dd40fb1cb1fec3c7d6918438ebf5bcc2e 100644\n+--- a/src/main/java/org/bukkit/inventory/InventoryView.java\n++++ b/src/main/java/org/bukkit/inventory/InventoryView.java\n+@@ -446,11 +446,23 @@ public abstract class InventoryView {\n+         return getPlayer().setWindowProperty(prop, value);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Get the title of this inventory window.\n+      *\n+      * @return The title.\n+      */\n+     @NotNull\n++    public abstract net.kyori.adventure.text.Component title();\n++    // Paper end\n++\n++    /**\n++     * Get the title of this inventory window.\n++     *\n++     * @return The title.\n++     * @deprecated in favour of {@link #title()}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public abstract String getTitle();\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+index 4ff149fd98895dd8ba45939a37c223b1f8d7281f..3dba4c361993e143e511b4f108ac0b444a84d964 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemFactory.java\n++++ b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+@@ -141,4 +141,15 @@ public interface ItemFactory {\n+     @Deprecated\n+     @NotNull\n+     Material updateMaterial(@NotNull final ItemMeta meta, @NotNull final Material material) throws IllegalArgumentException;\n++\n++    // Paper start\n++    /**\n++     * Creates a hover event for the given item.\n++     *\n++     * @param item The item\n++     * @return A hover event\n++     */\n++    @NotNull\n++    net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull ItemStack item, final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op);\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java\n+index f70a6a22b85ff0da76e67e9b223ad4e0b020b5c4..4b20b557eaa958cf1ad1baf8d6cc17f38b180ff1 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemStack.java\n++++ b/src/main/java/org/bukkit/inventory/ItemStack.java\n+@@ -22,7 +22,7 @@ import org.jetbrains.annotations.Nullable;\n+  * use this class to encapsulate Materials for which {@link Material#isItem()}\n+  * returns false.</b>\n+  */\n+-public class ItemStack implements Cloneable, ConfigurationSerializable {\n++public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem> { // Paper\n+     private Material type = Material.AIR;\n+     private int amount = 0;\n+     private MaterialData data = null;\n+@@ -595,4 +595,12 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {\n+ \n+         return true;\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {\n++        return org.bukkit.Bukkit.getServer().getItemFactory().asHoverEvent(this, op);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+index 94852d50e88d0594b84b581cd627174043629995..e143081922c2027e8ca1db6f1e7eb5b4d786ab41 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+@@ -119,6 +119,63 @@ public interface BookMeta extends ItemMeta {\n+      */\n+     boolean hasPages();\n+ \n++    // Paper start\n++    /**\n++     * Gets the specified page in the book. The page must exist.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to get, in range [1, getPageCount()]\n++     * @return the page from the book\n++     */\n++    @NotNull net.kyori.adventure.text.Component page(int page);\n++\n++    /**\n++     * Sets the specified page in the book. Pages of the book must be\n++     * contiguous.\n++     * <p>\n++     * The data can be up to 256 characters in length, additional characters\n++     * are truncated.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to set, in range [1, getPageCount()]\n++     * @param data the data to set for that page\n++     */\n++    void page(int page, @NotNull net.kyori.adventure.text.Component data);\n++\n++    /**\n++     * Gets all the pages in the book.\n++     *\n++     * @return list of all the pages in the book\n++     */\n++    @NotNull List<net.kyori.adventure.text.Component> pages();\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 100 pages with 256 characters per page.\n++     *\n++     * @param pages A list of pages to set the book to use\n++     */\n++    void pages(@NotNull List<net.kyori.adventure.text.Component> pages);\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 50 pages with 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void pages(@NotNull net.kyori.adventure.text.Component... pages);\n++\n++    /**\n++     * Adds new pages to the end of the book. Up to a maximum of 50 pages with\n++     * 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void addPages(@NotNull net.kyori.adventure.text.Component... pages);\n++    // Paper end\n++\n+     /**\n+      * Gets the specified page in the book. The given page must exist.\n+      * <p>\n+@@ -126,8 +183,10 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to get, in range [1, getPageCount()]\n+      * @return the page from the book\n++     * @deprecated in favour of {@link #page(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getPage(int page);\n+ \n+     /**\n+@@ -141,15 +200,19 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to set, in range [1, getPageCount()]\n+      * @param data the data to set for that page\n++     * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setPage(int page, @NotNull String data);\n+ \n+     /**\n+      * Gets all the pages in the book.\n+      *\n+      * @return list of all the pages in the book\n++     * @deprecated in favour of {@link #pages()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     List<String> getPages();\n+ \n+     /**\n+@@ -157,7 +220,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 100 pages with 256 characters per page.\n+      *\n+      * @param pages A list of pages to set the book to use\n++     * @deprecated in favour of {@link #pages(List)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull List<String> pages);\n+ \n+     /**\n+@@ -165,7 +230,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 50 pages with 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull String... pages);\n+ \n+     /**\n+@@ -173,7 +240,9 @@ public interface BookMeta extends ItemMeta {\n+      * 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void addPage(@NotNull String... pages);\n+ \n+     /**\n+@@ -195,8 +264,10 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to get\n+          * @return the page from the book\n++         * @deprecated in favour of {@link #page(int)}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public BaseComponent[] getPage(int page) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -210,7 +281,9 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to set\n+          * @param data the data to set for that page\n++         * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+          */\n++        @Deprecated // Paper\n+         public void setPage(int page, @Nullable BaseComponent... data) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -219,8 +292,10 @@ public interface BookMeta extends ItemMeta {\n+          * Gets all the pages in the book.\n+          *\n+          * @return list of all the pages in the book\n++         * @deprecated in favour of {@link #pages()}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public List<BaseComponent[]> getPages() {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -230,7 +305,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of pages to set the book to use\n++         * @deprecated in favour of {@link #pages(java.util.List)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull List<BaseComponent[]> pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -240,7 +317,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -250,7 +329,9 @@ public interface BookMeta extends ItemMeta {\n+          * with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void addPage(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+index f2e9f2753ec92aa4a3e3f06ca6053bd70b9091d7..1c362636c56db0e6c118171ba367c43c4f7cff33 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+@@ -31,6 +31,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasDisplayName();\n+ \n++    // Paper start\n++    /**\n++     * Gets the display name.\n++     *\n++     * <p>Plugins should check that {@link #hasDisplayName()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the display name.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n++\n+     /**\n+      * Gets the display name that is set.\n+      * <p>\n+@@ -38,7 +56,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * before calling this method.\n+      *\n+      * @return the display name that is set\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     String getDisplayName();\n+ \n+@@ -46,7 +66,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Sets the display name.\n+      *\n+      * @param name the name to set\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setDisplayName(@Nullable String name);\n+ \n+     /**\n+@@ -81,6 +103,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasLore();\n+ \n++    // Paper start\n++    /**\n++     * Gets the lore.\n++     *\n++     * <p>Plugins should check that {@link #hasLore()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable List<net.kyori.adventure.text.Component> lore();\n++\n++    /**\n++     * Sets the lore.\n++     *\n++     * @param lore the lore to set\n++     */\n++    void lore(final @Nullable List<net.kyori.adventure.text.Component> lore);\n++    // Paper end\n++\n+     /**\n+      * Gets the lore that is set.\n+      * <p>\n+@@ -88,7 +128,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * calling this method.\n+      *\n+      * @return a list of lore that is set\n++     * @deprecated in favour of {@link #lore()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     List<String> getLore();\n+ \n+@@ -97,7 +139,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Removes lore when given null.\n+      *\n+      * @param lore the lore that will be set\n++     * @deprecated in favour of {@link #lore(List)}\n+      */\n++    @Deprecated // Paper\n+     void setLore(@Nullable List<String> lore);\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java\n+index 83354b2a38b6261b172b91c1008dcf3313cc4a8f..1052d5f0de6b1dbd261cd05bb6dd0714119ff539 100644\n+--- a/src/main/java/org/bukkit/map/MapCursor.java\n++++ b/src/main/java/org/bukkit/map/MapCursor.java\n+@@ -10,7 +10,7 @@ public final class MapCursor {\n+     private byte x, y;\n+     private byte direction, type;\n+     private boolean visible;\n+-    private String caption;\n++    private net.kyori.adventure.text.Component caption; // Paper\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -24,7 +24,7 @@ public final class MapCursor {\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -37,7 +37,7 @@ public final class MapCursor {\n+      * @param visible Whether the cursor is visible by default.\n+      */\n+     public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -49,7 +49,7 @@ public final class MapCursor {\n+      * @param type The type (color/style) of the map cursor.\n+      * @param visible Whether the cursor is visible by default.\n+      * @param caption cursor caption\n+-     * @deprecated Magic value\n++     * @deprecated Magic value. Use {@link #MapCursor(byte, byte, byte, byte, boolean, net.kyori.adventure.text.Component)}\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+@@ -58,8 +58,40 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setRawType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n++    }\n++    // Paper start\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        this.x = x; this.y = y; this.visible = visible; this.caption = caption;\n++        setDirection(direction);\n++        setRawType(type);\n++    }\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     */\n++    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++\n+     }\n++    // Paper end\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -77,7 +109,7 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+@@ -200,23 +232,45 @@ public final class MapCursor {\n+         this.visible = visible;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the caption on this cursor.\n++     *\n++     * @return caption\n++     */\n++    public @Nullable net.kyori.adventure.text.Component caption() {\n++        return this.caption;\n++    }\n++    /**\n++     * Sets the caption on this cursor.\n++     *\n++     * @param caption new caption\n++     */\n++    public void caption(@Nullable net.kyori.adventure.text.Component caption) {\n++        this.caption = caption;\n++    }\n++    // Paper end\n+     /**\n+      * Gets the caption on this cursor.\n+      *\n+      * @return caption\n++     * @deprecated in favour of {@link #caption()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getCaption() {\n+-        return caption;\n++        return this.caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.caption); // Paper\n+     }\n+ \n+     /**\n+      * Sets the caption on this cursor.\n+      *\n+      * @param caption new caption\n++     * @deprecated in favour of {@link #caption(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setCaption(@Nullable String caption) {\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+index 4dba721aefe4fc6699b3b4bfa7ecb0b19c2a2a1a..01dec2c877df58c9dc22445e8b1f9ce2e53066da 100644\n+--- a/src/main/java/org/bukkit/map/MapCursorCollection.java\n++++ b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+@@ -117,4 +117,22 @@ public final class MapCursorCollection {\n+     public MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n+     }\n++    // Paper start\n++    /**\n++     * Add a cursor to the collection.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible.\n++     * @param caption banner caption\n++     * @return The newly added MapCursor.\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public @NotNull MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java\n+index f5cbf6df32ef169cf0f2266f7c6e9c4f771ccb7d..58bddb11fd534e7c33a4ffd7b72b055ba92c767a 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Objective.java\n++++ b/src/main/java/org/bukkit/scoreboard/Objective.java\n+@@ -19,14 +19,35 @@ public interface Objective {\n+      */\n+     @NotNull\n+     String getName() throws IllegalStateException;\n++    // Paper start\n++    /**\n++     * Gets the name displayed to players for this objective\n++     *\n++     * @return this objective's display name\n++     * @throws IllegalStateException if this objective has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName() throws IllegalStateException;\n++    /**\n++     * Sets the name displayed to players for this objective.\n++     *\n++     * @param displayName Display name to set\n++     * @throws IllegalStateException if this objective has been unregistered\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     */\n++    void displayName(@Nullable net.kyori.adventure.text.Component displayName) throws IllegalStateException, IllegalArgumentException;\n++    // Paper end\n+ \n+     /**\n+      * Gets the name displayed to players for this objective\n+      *\n+      * @return this objective's display name\n+      * @throws IllegalStateException if this objective has been unregistered\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getDisplayName() throws IllegalStateException;\n+ \n+     /**\n+@@ -37,7 +58,9 @@ public interface Objective {\n+      * @throws IllegalArgumentException if displayName is null\n+      * @throws IllegalArgumentException if displayName is longer than 128\n+      *     characters.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setDisplayName(@NotNull String displayName) throws IllegalStateException, IllegalArgumentException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/scoreboard/Scoreboard.java b/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n+index 4bfaaea78c9b6aa5d392629aa943d26dbe6a7d4a..f09ff32cc3ffc16af379a378b1948991435393e8 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n++++ b/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n+@@ -27,6 +27,48 @@ public interface Scoreboard {\n+     @Deprecated\n+     @NotNull\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria) throws IllegalArgumentException;\n++    // Paper start\n++    /**\n++     * Registers an Objective on this Scoreboard\n++     *\n++     * @param name Name of the Objective\n++     * @param criteria Criteria for the Objective\n++     * @param displayName Name displayed to players for the Objective.\n++     * @return The registered Objective\n++     * @throws IllegalArgumentException if name is null\n++     * @throws IllegalArgumentException if name is longer than 16\n++     *     characters.\n++     * @throws IllegalArgumentException if criteria is null\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalArgumentException if an objective by that name already\n++     *     exists\n++     */\n++    @NotNull\n++    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @Nullable net.kyori.adventure.text.Component displayName) throws IllegalArgumentException;\n++    /**\n++     * Registers an Objective on this Scoreboard\n++     *\n++     * @param name Name of the Objective\n++     * @param criteria Criteria for the Objective\n++     * @param displayName Name displayed to players for the Objective.\n++     * @param renderType Manner of rendering the Objective\n++     * @return The registered Objective\n++     * @throws IllegalArgumentException if name is null\n++     * @throws IllegalArgumentException if name is longer than 16\n++     *     characters.\n++     * @throws IllegalArgumentException if criteria is null\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalArgumentException if renderType is null\n++     * @throws IllegalArgumentException if an objective by that name already\n++     *     exists\n++     */\n++    @NotNull\n++    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @Nullable net.kyori.adventure.text.Component displayName, @NotNull RenderType renderType) throws IllegalArgumentException;\n++    // Paper end\n+ \n+     /**\n+      * Registers an Objective on this Scoreboard\n+@@ -44,8 +86,10 @@ public interface Scoreboard {\n+      *     characters.\n+      * @throws IllegalArgumentException if an objective by that name already\n+      *     exists\n++     * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -66,8 +110,10 @@ public interface Scoreboard {\n+      * @throws IllegalArgumentException if renderType is null\n+      * @throws IllegalArgumentException if an objective by that name already\n+      *     exists\n++     * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component, RenderType)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName, @NotNull RenderType renderType) throws IllegalArgumentException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java\n+index da01d2926cc8a2485a3349ac1ebb32cad20e287c..812b7bfb686437c97884bfdff1be25657e654daf 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Team.java\n++++ b/src/main/java/org/bukkit/scoreboard/Team.java\n+@@ -22,14 +22,95 @@ public interface Team {\n+      */\n+     @NotNull\n+     String getName() throws IllegalStateException;\n++    // Paper start\n++    /**\n++     * Gets the name displayed to entries for this team\n++     *\n++     * @return Team display name\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName() throws IllegalStateException;\n++\n++    /**\n++     * Sets the name displayed to entries for this team\n++     *\n++     * @param displayName New display name\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void displayName(@Nullable net.kyori.adventure.text.Component displayName) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the prefix prepended to the display of entries on this team.\n++     *\n++     * @return Team prefix\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component prefix() throws IllegalStateException;\n++\n++    /**\n++     * Sets the prefix prepended to the display of entries on this team.\n++     *\n++     * @param prefix New prefix\n++     * @throws IllegalArgumentException if prefix is null\n++     * @throws IllegalArgumentException if prefix is longer than 64\n++     *     characters\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void prefix(@Nullable net.kyori.adventure.text.Component prefix) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the suffix appended to the display of entries on this team.\n++     *\n++     * @return the team's current suffix\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component suffix() throws IllegalStateException;\n++\n++    /**\n++     * Sets the suffix appended to the display of entries on this team.\n++     *\n++     * @param suffix the new suffix for this team.\n++     * @throws IllegalArgumentException if suffix is null\n++     * @throws IllegalArgumentException if suffix is longer than 64\n++     *     characters\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void suffix(@Nullable net.kyori.adventure.text.Component suffix) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the color of the team.\n++     * <br>\n++     * This only sets the team outline, other occurrences of colors such as in\n++     * names are handled by prefixes / suffixes.\n++     *\n++     * @return team color, defaults to {@link ChatColor#RESET}\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.format.NamedTextColor color() throws IllegalStateException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a00ec991bb23a4847156894674e0af22f86fca"}, "originalPosition": 1961}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQxMzA1OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0005-Adventure.patch", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjozNjo0MlrOINRMkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQxOToxNzowM1rOIo_WjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4NDE0Ng==", "bodyText": "I'd also make this TextColor, if it's not named either find nearest named or throw error.", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550784146", "createdAt": "2021-01-01T16:36:42Z", "author": {"login": "Electroid"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->\n+         <dependency>\n+             <groupId>it.unimi.dsi</groupId>\n+             <artifactId>fastutil</artifactId>\n+diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+index ef58a6c00f444bd498a2d8fc4e457236f393954f..ecd149157d4fb80444f34bf5633d74bcdb63dec5 100644\n+--- a/src/main/java/co/aikar/timings/TimingsReportListener.java\n++++ b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+ @SuppressWarnings(\"WeakerAccess\")\n+-public class TimingsReportListener implements MessageCommandSender {\n++public class TimingsReportListener implements net.kyori.adventure.audience.ForwardingAudience, MessageCommandSender { // Paper\n+     private final List<CommandSender> senders;\n+     private final Runnable onDone;\n+     private String timingsURL;\n+@@ -74,4 +74,17 @@ public class TimingsReportListener implements MessageCommandSender {\n+             this.senders.add(Bukkit.getConsoleSender());\n+         }\n+     }\n++\n++    // Paper start\n++    @Override\n++    public void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.senders;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java\n+index 7c715fdc11ab7837552b1fe3ffd08b31cec0a63b..426b1e83226e674ee4bf3ec05ddcd3ac4376b06d 100644\n+--- a/src/main/java/org/bukkit/Bukkit.java\n++++ b/src/main/java/org/bukkit/Bukkit.java\n+@@ -278,7 +278,9 @@ public final class Bukkit {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated in favour of {@link Server#sendMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public static int broadcastMessage(@NotNull String message) {\n+         return server.broadcastMessage(message);\n+     }\n+@@ -836,6 +838,7 @@ public final class Bukkit {\n+         server.shutdown();\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Broadcasts the specified message to every user with the given\n+      * permission name.\n+@@ -845,6 +848,21 @@ public final class Bukkit {\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n+      */\n++    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {\n++        return server.broadcast(message, permission);\n++    }\n++    // Paper end\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n++     */\n++    @Deprecated // Paper\n+     public static int broadcast(@NotNull String message, @NotNull String permission) {\n+         return server.broadcast(message, permission);\n+     }\n+@@ -1044,6 +1062,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, type);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -1069,6 +1088,38 @@ public final class Bukkit {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {\n++        return server.createInventory(owner, type, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {\n+         return server.createInventory(owner, type, title);\n+     }\n+@@ -1087,6 +1138,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, size);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -1099,10 +1151,30 @@ public final class Bukkit {\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {\n++        return server.createInventory(owner, size, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {\n+         return server.createInventory(owner, size, title);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+@@ -1110,7 +1182,20 @@ public final class Bukkit {\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n+      */\n++    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {\n++        return server.createMerchant(title);\n++    }\n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static Merchant createMerchant(@Nullable String title) {\n+         return server.createMerchant(title);\n+     }\n+@@ -1181,22 +1266,47 @@ public final class Bukkit {\n+         return server.isPrimaryThread();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull public static net.kyori.adventure.text.Component motd() {\n++        return server.motd();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static String getMotd() {\n+         return server.getMotd();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    public static @Nullable net.kyori.adventure.text.Component shutdownMessage() {\n++        return server.shutdownMessage();\n++    }\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public static String getShutdownMessage() {\n+         return server.getShutdownMessage();\n+     }\n+diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java\n+index fee814e01a653d2b53c56e8b566383ca44aa5346..2acdf2a6d3955923c721222b9da784f3278f6418 100644\n+--- a/src/main/java/org/bukkit/Nameable.java\n++++ b/src/main/java/org/bukkit/Nameable.java\n+@@ -4,6 +4,30 @@ import org.jetbrains.annotations.Nullable;\n+ \n+ public interface Nameable {\n+ \n++    // Paper start\n++    /**\n++     * Gets the custom name.\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @return the custom name\n++     */\n++    @Nullable net.kyori.adventure.text.Component customName();\n++\n++    /**\n++     * Sets the custom name.\n++     *\n++     * <p>This name will be used in death messages and can be sent to the client as a nameplate over the mob.</p>\n++     *\n++     * <p>Setting the name to {@code null} will clear it.</p>\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @param customName the custom name to set\n++     */\n++    void customName(final @Nullable net.kyori.adventure.text.Component customName);\n++    // Paper end\n++\n+     /**\n+      * Gets the custom name on a mob or block. If there is no name this method\n+      * will return null.\n+diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java\n+index 22eca2a180618ed43a4ef103bebd134897d6c71a..abb7448ee8fe1152623794d3b806eef9a9e17abc 100644\n+--- a/src/main/java/org/bukkit/NamespacedKey.java\n++++ b/src/main/java/org/bukkit/NamespacedKey.java\n+@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n+  * underscores, hyphens, and forward slashes.\n+  *\n+  */\n+-public final class NamespacedKey {\n++public final class NamespacedKey implements net.kyori.adventure.key.Key { // Paper - implement Key\n+ \n+     /**\n+      * The namespace representing all inbuilt keys.\n+@@ -139,4 +139,24 @@ public final class NamespacedKey {\n+     public static NamespacedKey minecraft(@NotNull String key) {\n+         return new NamespacedKey(MINECRAFT, key);\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public String namespace() {\n++        return this.getNamespace();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String value() {\n++        return this.getKey();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String asString() {\n++        return this.namespace + ':' + this.key;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java\n+index a6b9e4f158583e5932bf8ca210d531857e9f5360..d9515a79dc7ed60c66960cd6c6bb4c108f206f3c 100644\n+--- a/src/main/java/org/bukkit/Server.java\n++++ b/src/main/java/org/bukkit/Server.java\n+@@ -55,7 +55,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a server implementation.\n+  */\n+-public interface Server extends PluginMessageRecipient {\n++public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Used for all administrative messages, such as an operator using a\n+@@ -229,7 +229,9 @@ public interface Server extends PluginMessageRecipient {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+      */\n++    @Deprecated // Paper\n+     public int broadcastMessage(@NotNull String message);\n+ \n+     /**\n+@@ -703,8 +705,22 @@ public interface Server extends PluginMessageRecipient {\n+      * @param permission the required permission {@link Permissible\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n+      */\n++    @Deprecated // Paper\n+     public int broadcast(@NotNull String message, @NotNull String permission);\n++    // Paper start\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     */\n++    int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);\n++    // Paper end\n+ \n+     /**\n+      * Gets the player by the given name, regardless if they are offline or\n+@@ -869,6 +885,7 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -894,6 +911,36 @@ public interface Server extends PluginMessageRecipient {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);\n+ \n+     /**\n+@@ -908,6 +955,22 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     */\n++    @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;\n++    // Paper end\n++\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -918,18 +981,32 @@ public interface Server extends PluginMessageRecipient {\n+      *     viewed\n+      * @return a new inventory\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     */\n++    @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);\n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+      * @param title the title of the corresponding merchant inventory, displayed\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Merchant createMerchant(@Nullable String title);\n+ \n+     /**\n+@@ -986,20 +1063,41 @@ public interface Server extends PluginMessageRecipient {\n+      */\n+     boolean isPrimaryThread();\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull net.kyori.adventure.text.Component motd();\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getMotd();\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    @Nullable net.kyori.adventure.text.Component shutdownMessage();\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     String getShutdownMessage();\n+ \n+     /**\n+@@ -1368,7 +1466,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends the component to the player\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1477,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends an array of components as a single message to the player\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java\n+index cdcbc8b05afc412017ac0e4ed0adf227d1342336..6b5dbe4ea711807a1944cfe2aae2ce415d4f2638 100644\n+--- a/src/main/java/org/bukkit/World.java\n++++ b/src/main/java/org/bukkit/World.java\n+@@ -38,7 +38,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a world, which may contain entities, chunks and blocks\n+  */\n+-public interface World extends PluginMessageRecipient, Metadatable {\n++public interface World extends PluginMessageRecipient, Metadatable, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Gets the {@link Block} at the given coordinates\n+@@ -616,6 +616,14 @@ public interface World extends PluginMessageRecipient, Metadatable {\n+     @NotNull\n+     public List<Player> getPlayers();\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.getPlayers();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Returns a list of entities within a bounding box centered around a\n+      * Location.\n+diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java\n+index 7e3cf00e49c66023bf46c298ef46c00e8c3c2caf..6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41 100644\n+--- a/src/main/java/org/bukkit/block/Sign.java\n++++ b/src/main/java/org/bukkit/block/Sign.java\n+@@ -7,13 +7,48 @@ import org.jetbrains.annotations.NotNull;\n+  * Represents a captured state of either a SignPost or a WallSign.\n+  */\n+ public interface Sign extends TileState, Colorable {\n++    // Paper start\n++    /**\n++     * Gets all the lines of text currently on this sign.\n++     *\n++     * @return Array of Strings containing each line of text\n++     */\n++    @NotNull\n++    public java.util.List<net.kyori.adventure.text.Component> lines();\n++\n++    /**\n++     * Gets the line of text at the specified index.\n++     * <p>\n++     * For example, getLine(0) will return the first line of text.\n++     *\n++     * @param index Line number to get the text from, starting at 0\n++     * @throws IndexOutOfBoundsException Thrown when the line does not exist\n++     * @return Text on the given line\n++     */\n++    @NotNull\n++    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;\n++\n++    /**\n++     * Sets the line of text at the specified index.\n++     * <p>\n++     * For example, setLine(0, \"Line One\") will set the first line of text to\n++     * \"Line One\".\n++     *\n++     * @param index Line number to set the text at, starting from 0\n++     * @param line New text to set at the specified index\n++     * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     */\n++    public void line(int index, @NotNull net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;\n++    // Paper end\n+ \n+     /**\n+      * Gets all the lines of text currently on this sign.\n+      *\n+      * @return Array of Strings containing each line of text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines();\n+ \n+     /**\n+@@ -24,8 +59,10 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to get the text from, starting at 0\n+      * @throws IndexOutOfBoundsException Thrown when the line does not exist\n+      * @return Text on the given line\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException;\n+ \n+     /**\n+@@ -37,7 +74,9 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to set the text at, starting from 0\n+      * @param line New text to set at the specified index\n+      * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java\n+index ac772bf349e0ffe9cab1df165d9460b387f2fe69..2588edf75483855e0c843834f39ca371770730b9 100644\n+--- a/src/main/java/org/bukkit/command/CommandSender.java\n++++ b/src/main/java/org/bukkit/command/CommandSender.java\n+@@ -6,12 +6,13 @@ import org.bukkit.permissions.Permissible;\n+ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+-public interface CommandSender extends Permissible {\n++public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper\n+ \n+     /**\n+      * Sends this sender a message\n+      *\n+      * @param message Message to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String message);\n+ \n+@@ -19,6 +20,7 @@ public interface CommandSender extends Permissible {\n+      * Sends this sender multiple messages\n+      *\n+      * @param messages An array of messages to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String[] messages);\n+ \n+@@ -27,6 +29,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param message Message to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String message);\n+ \n+@@ -35,6 +38,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param messages An array of messages to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String[] messages);\n+ \n+@@ -61,7 +65,9 @@ public interface CommandSender extends Permissible {\n+          * Sends this sender a chat component.\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -70,7 +76,9 @@ public interface CommandSender extends Permissible {\n+          * Sends an array of components as a single message to the sender.\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -80,7 +88,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param component the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -90,7 +100,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param components the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -99,4 +111,11 @@ public interface CommandSender extends Permissible {\n+     @NotNull\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity identity, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/command/ProxiedCommandSender.java b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+index fcc34b640265f4dccb46b9f09466ab8e1d96043e..74599b4ee0518481c0e3a5f6ab2f5302837f1ae3 100644\n+--- a/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n++++ b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+@@ -3,7 +3,7 @@ package org.bukkit.command;\n+ \n+ import org.jetbrains.annotations.NotNull;\n+ \n+-public interface ProxiedCommandSender extends CommandSender {\n++public interface ProxiedCommandSender extends CommandSender, net.kyori.adventure.audience.ForwardingAudience.Single { // Paper\n+ \n+     /**\n+      * Returns the CommandSender which triggered this proxied command\n+@@ -21,4 +21,16 @@ public interface ProxiedCommandSender extends CommandSender {\n+     @NotNull\n+     CommandSender getCallee();\n+ \n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.Single.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.audience.Audience audience() {\n++        return this.getCaller();\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+index b833ef63fbe01271ceb2bd83a9eb4a84c9912761..1a093a30adf18572693032b78f3d2683e87d2e21 100644\n+--- a/src/main/java/org/bukkit/enchantments/Enchantment.java\n++++ b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+@@ -294,6 +294,9 @@ public abstract class Enchantment implements Keyed {\n+      * @return True if the enchantment may be applied, otherwise False\n+      */\n+     public abstract boolean canEnchantItem(@NotNull ItemStack item);\n++    // Paper start\n++    public abstract @NotNull net.kyori.adventure.text.Component displayName(int level);\n++    // Paper end\n+ \n+     @Override\n+     public boolean equals(Object obj) {\n+diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+index 9566e4306ada5e82dede0f002aa06da12c44996b..4d5f0837bd0e02a30c943d8969fb6b13452322e0 100644\n+--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n++++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+@@ -63,4 +63,11 @@ public class EnchantmentWrapper extends Enchantment {\n+     public boolean conflictsWith(@NotNull Enchantment other) {\n+         return getEnchantment().conflictsWith(other);\n+     }\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.Component displayName(int level) {\n++        return getEnchantment().displayName(level);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java\n+index 344c14a5ed86e9ebe401bfb5ba3aedc0c0ed0b04..54597268cfbe03c5e521476d3d26e612457cf381 100644\n+--- a/src/main/java/org/bukkit/entity/Entity.java\n++++ b/src/main/java/org/bukkit/entity/Entity.java\n+@@ -25,7 +25,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a base entity in the world\n+  */\n+-public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder {\n++public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowEntity> { // Paper\n+ \n+     /**\n+      * Gets the entity's current position\n+@@ -602,4 +602,12 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent\n+     @Override\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(op.apply(net.kyori.adventure.text.event.HoverEvent.ShowEntity.of(this.getType().getKey(), this.getUniqueId(), null)));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java\n+index f22b21ee12496452f7b2125c131f56ecc74d439a..447de8f7c1d871ef5fb1a06bace451e1de06d972 100644\n+--- a/src/main/java/org/bukkit/entity/Player.java\n++++ b/src/main/java/org/bukkit/entity/Player.java\n+@@ -30,7 +30,28 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a player, connected or not\n+  */\n+-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient {\n++public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified { // Paper\n++\n++    // Paper start\n++    @Override\n++    default @NotNull net.kyori.adventure.identity.Identity identity() {\n++        return net.kyori.adventure.identity.Identity.identity(this.getUniqueId());\n++    }\n++\n++    /**\n++     * Gets the \"friendly\" name to display of this player.\n++     *\n++     * @return the display name\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the \"friendly\" name to display of this player.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n+ \n+     /**\n+      * Gets the \"friendly\" name to display of this player. This may include\n+@@ -40,7 +61,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @return the friendly name\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     public String getDisplayName();\n+ \n+@@ -52,15 +75,51 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @param name The new display name.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setDisplayName(@Nullable String name);\n+ \n++    // Paper start\n++    /**\n++     * Sets the name that is shown on the in-game player list.\n++     * <p>\n++     * If the value is null, the name will be identical to {@link #getName()}.\n++     *\n++     * @param name new player list name\n++     */\n++    void playerListName(@Nullable net.kyori.adventure.text.Component name);\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListName();\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     * @deprecated in favour of {@link #playerListName()}\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListHeader();\n++\n++    /**\n++     * Gets the currently displayed player list footer for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListFooter();\n++    // Paper end\n+     /**\n+      * Gets the name that is shown on the player list.\n+      *\n+      * @return the player list name\n++     * @deprecated in favour of {@link #playerListName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getPlayerListName();\n+ \n+     /**\n+@@ -69,14 +128,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * If the value is null, the name will be identical to {@link #getName()}.\n+      *\n+      * @param name new player list name\n++     * @deprecated in favour of {@link #playerListName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListName(@Nullable String name);\n+ \n+     /**\n+      * Gets the currently displayed player list header for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListHeader()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListHeader();\n+ \n+@@ -84,7 +147,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Gets the currently displayed player list footer for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListFooter()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListFooter();\n+ \n+@@ -92,14 +157,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Sets the currently displayed player list header for this player.\n+      *\n+      * @param header player list header, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeader(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeader(@Nullable String header);\n+ \n+     /**\n+      * Sets the currently displayed player list footer for this player.\n+      *\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListFooter(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListFooter(@Nullable String footer);\n+ \n+     /**\n+@@ -108,7 +177,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      *\n+      * @param header player list header, null for empty\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeaderFooter(@Nullable String header, @Nullable String footer);\n+ \n+     /**\n+@@ -146,9 +217,20 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Kicks player with custom kick message.\n+      *\n+      * @param message kick message\n++     * @deprecated in favour of {@link #kick(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void kickPlayer(@Nullable String message);\n+ \n++    // Paper start\n++    /**\n++     * Kicks player with custom kick message.\n++     *\n++     * @param message kick message\n++     */\n++    void kick(final @Nullable net.kyori.adventure.text.Component message);\n++    // Paper end\n++\n+     /**\n+      * Says a message (or runs a command).\n+      *\n+@@ -437,6 +519,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+     @Deprecated\n+     public boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, @NotNull byte[] data);\n+ \n++    // Paper start\n+     /**\n+      * Send a sign change. This fakes a sign change packet for a user at\n+      * a certain location. This will not actually change the world in any way.\n+@@ -452,6 +535,43 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n+      */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines) throws IllegalArgumentException;\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @param  dyeColor the color of the sign\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if dyeColor is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n++    // Paper end\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List)}\n++     */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines) throws IllegalArgumentException;\n+ \n+ \n+@@ -471,7 +591,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if dyeColor is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List, org.bukkit.DyeColor)}\n+      */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -1258,6 +1380,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public int getClientViewDistance();\n+ \n++    // Paper start\n++    /**\n++     * Gets the player's current locale.\n++     *\n++     * @return the player's locale\n++     */\n++    @NotNull java.util.Locale locale();\n++    // Paper end\n+     /**\n+      * Gets the player's current locale.\n+      *\n+@@ -1268,8 +1398,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * they wish.\n+      *\n+      * @return the player's locale\n++     * @deprecated in favour of {@link #locale()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLocale();\n+ \n+     /**\n+@@ -1287,6 +1419,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public void openBook(@NotNull ItemStack book);\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(this.getType().getKey(), this.getUniqueId(), this.displayName());\n++    }\n++    // Paper end\n++\n+     // Spigot start\n+     public class Spigot extends Entity.Spigot {\n+ \n+@@ -1341,11 +1481,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+@@ -1356,7 +1498,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1366,7 +1510,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1523,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1388,7 +1536,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+ \n+diff --git a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+index 63c80b4ee1f7adc8a9efc3b607993104b1991f90..7adbc6f87771c21d374e610fcb21a2442f2d8031 100644\n+--- a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n++++ b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+@@ -25,6 +25,16 @@ public interface CommandMinecart extends Minecart {\n+      *     activated.\n+      */\n+     public void setCommand(@Nullable String command);\n++    // Paper start\n++    /**\n++     * Sets the name of this CommandMinecart.  The name is used with commands\n++     * that this CommandMinecart executes.  Setting the name to null is the\n++     * same as setting it to \"@\".\n++     *\n++     * @param name New name for this CommandMinecart.\n++     */\n++    void name(@Nullable net.kyori.adventure.text.Component name);\n++    // Paper end\n+ \n+     /**\n+      * Sets the name of this CommandMinecart.  The name is used with commands\n+@@ -32,7 +42,9 @@ public interface CommandMinecart extends Minecart {\n+      * same as setting it to \"@\".\n+      *\n+      * @param name New name for this CommandMinecart.\n++     * @deprecated in favour of {@link #name(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setName(@Nullable String name);\n+ \n+ }\n+diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+index f1e9bc9bc797b7216336d3470e3c696a06f2b21a..090d22bd30f7947103771aaaf09a2398970ac337 100644\n+--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java\n++++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+@@ -136,6 +136,18 @@ public enum InventoryType {\n+     private final String title;\n+     private final boolean isCreatable;\n+ \n++    // Paper start\n++    private final net.kyori.adventure.text.Component defaultTitleComponent;\n++\n++    /**\n++     * Gets the inventory's default title.\n++     *\n++     * @return the inventory's default title\n++     */\n++    public @NotNull net.kyori.adventure.text.Component defaultTitle() {\n++        return defaultTitleComponent;\n++    }\n++    // Paper end\n+     private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {\n+         this(defaultSize, defaultTitle, true);\n+     }\n+@@ -144,6 +156,7 @@ public enum InventoryType {\n+         size = defaultSize;\n+         title = defaultTitle;\n+         this.isCreatable = isCreatable;\n++        this.defaultTitleComponent = net.kyori.adventure.text.Component.text(defaultTitle); // Paper - Adventure\n+     }\n+ \n+     public int getDefaultSize() {\n+@@ -151,6 +164,7 @@ public enum InventoryType {\n+     }\n+ \n+     @NotNull\n++    @Deprecated // Paper\n+     public String getDefaultTitle() {\n+         return title;\n+     }\n+diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java\n+index 14346d83bc99581b18e53d19af03708c0bf22cf7..b6cbf23dd40fb1cb1fec3c7d6918438ebf5bcc2e 100644\n+--- a/src/main/java/org/bukkit/inventory/InventoryView.java\n++++ b/src/main/java/org/bukkit/inventory/InventoryView.java\n+@@ -446,11 +446,23 @@ public abstract class InventoryView {\n+         return getPlayer().setWindowProperty(prop, value);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Get the title of this inventory window.\n+      *\n+      * @return The title.\n+      */\n+     @NotNull\n++    public abstract net.kyori.adventure.text.Component title();\n++    // Paper end\n++\n++    /**\n++     * Get the title of this inventory window.\n++     *\n++     * @return The title.\n++     * @deprecated in favour of {@link #title()}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public abstract String getTitle();\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+index 4ff149fd98895dd8ba45939a37c223b1f8d7281f..3dba4c361993e143e511b4f108ac0b444a84d964 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemFactory.java\n++++ b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+@@ -141,4 +141,15 @@ public interface ItemFactory {\n+     @Deprecated\n+     @NotNull\n+     Material updateMaterial(@NotNull final ItemMeta meta, @NotNull final Material material) throws IllegalArgumentException;\n++\n++    // Paper start\n++    /**\n++     * Creates a hover event for the given item.\n++     *\n++     * @param item The item\n++     * @return A hover event\n++     */\n++    @NotNull\n++    net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull ItemStack item, final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op);\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java\n+index f70a6a22b85ff0da76e67e9b223ad4e0b020b5c4..4b20b557eaa958cf1ad1baf8d6cc17f38b180ff1 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemStack.java\n++++ b/src/main/java/org/bukkit/inventory/ItemStack.java\n+@@ -22,7 +22,7 @@ import org.jetbrains.annotations.Nullable;\n+  * use this class to encapsulate Materials for which {@link Material#isItem()}\n+  * returns false.</b>\n+  */\n+-public class ItemStack implements Cloneable, ConfigurationSerializable {\n++public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem> { // Paper\n+     private Material type = Material.AIR;\n+     private int amount = 0;\n+     private MaterialData data = null;\n+@@ -595,4 +595,12 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {\n+ \n+         return true;\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {\n++        return org.bukkit.Bukkit.getServer().getItemFactory().asHoverEvent(this, op);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+index 94852d50e88d0594b84b581cd627174043629995..e143081922c2027e8ca1db6f1e7eb5b4d786ab41 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+@@ -119,6 +119,63 @@ public interface BookMeta extends ItemMeta {\n+      */\n+     boolean hasPages();\n+ \n++    // Paper start\n++    /**\n++     * Gets the specified page in the book. The page must exist.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to get, in range [1, getPageCount()]\n++     * @return the page from the book\n++     */\n++    @NotNull net.kyori.adventure.text.Component page(int page);\n++\n++    /**\n++     * Sets the specified page in the book. Pages of the book must be\n++     * contiguous.\n++     * <p>\n++     * The data can be up to 256 characters in length, additional characters\n++     * are truncated.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to set, in range [1, getPageCount()]\n++     * @param data the data to set for that page\n++     */\n++    void page(int page, @NotNull net.kyori.adventure.text.Component data);\n++\n++    /**\n++     * Gets all the pages in the book.\n++     *\n++     * @return list of all the pages in the book\n++     */\n++    @NotNull List<net.kyori.adventure.text.Component> pages();\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 100 pages with 256 characters per page.\n++     *\n++     * @param pages A list of pages to set the book to use\n++     */\n++    void pages(@NotNull List<net.kyori.adventure.text.Component> pages);\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 50 pages with 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void pages(@NotNull net.kyori.adventure.text.Component... pages);\n++\n++    /**\n++     * Adds new pages to the end of the book. Up to a maximum of 50 pages with\n++     * 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void addPages(@NotNull net.kyori.adventure.text.Component... pages);\n++    // Paper end\n++\n+     /**\n+      * Gets the specified page in the book. The given page must exist.\n+      * <p>\n+@@ -126,8 +183,10 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to get, in range [1, getPageCount()]\n+      * @return the page from the book\n++     * @deprecated in favour of {@link #page(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getPage(int page);\n+ \n+     /**\n+@@ -141,15 +200,19 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to set, in range [1, getPageCount()]\n+      * @param data the data to set for that page\n++     * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setPage(int page, @NotNull String data);\n+ \n+     /**\n+      * Gets all the pages in the book.\n+      *\n+      * @return list of all the pages in the book\n++     * @deprecated in favour of {@link #pages()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     List<String> getPages();\n+ \n+     /**\n+@@ -157,7 +220,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 100 pages with 256 characters per page.\n+      *\n+      * @param pages A list of pages to set the book to use\n++     * @deprecated in favour of {@link #pages(List)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull List<String> pages);\n+ \n+     /**\n+@@ -165,7 +230,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 50 pages with 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull String... pages);\n+ \n+     /**\n+@@ -173,7 +240,9 @@ public interface BookMeta extends ItemMeta {\n+      * 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void addPage(@NotNull String... pages);\n+ \n+     /**\n+@@ -195,8 +264,10 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to get\n+          * @return the page from the book\n++         * @deprecated in favour of {@link #page(int)}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public BaseComponent[] getPage(int page) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -210,7 +281,9 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to set\n+          * @param data the data to set for that page\n++         * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+          */\n++        @Deprecated // Paper\n+         public void setPage(int page, @Nullable BaseComponent... data) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -219,8 +292,10 @@ public interface BookMeta extends ItemMeta {\n+          * Gets all the pages in the book.\n+          *\n+          * @return list of all the pages in the book\n++         * @deprecated in favour of {@link #pages()}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public List<BaseComponent[]> getPages() {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -230,7 +305,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of pages to set the book to use\n++         * @deprecated in favour of {@link #pages(java.util.List)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull List<BaseComponent[]> pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -240,7 +317,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -250,7 +329,9 @@ public interface BookMeta extends ItemMeta {\n+          * with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void addPage(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+index f2e9f2753ec92aa4a3e3f06ca6053bd70b9091d7..1c362636c56db0e6c118171ba367c43c4f7cff33 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+@@ -31,6 +31,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasDisplayName();\n+ \n++    // Paper start\n++    /**\n++     * Gets the display name.\n++     *\n++     * <p>Plugins should check that {@link #hasDisplayName()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the display name.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n++\n+     /**\n+      * Gets the display name that is set.\n+      * <p>\n+@@ -38,7 +56,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * before calling this method.\n+      *\n+      * @return the display name that is set\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     String getDisplayName();\n+ \n+@@ -46,7 +66,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Sets the display name.\n+      *\n+      * @param name the name to set\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setDisplayName(@Nullable String name);\n+ \n+     /**\n+@@ -81,6 +103,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasLore();\n+ \n++    // Paper start\n++    /**\n++     * Gets the lore.\n++     *\n++     * <p>Plugins should check that {@link #hasLore()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable List<net.kyori.adventure.text.Component> lore();\n++\n++    /**\n++     * Sets the lore.\n++     *\n++     * @param lore the lore to set\n++     */\n++    void lore(final @Nullable List<net.kyori.adventure.text.Component> lore);\n++    // Paper end\n++\n+     /**\n+      * Gets the lore that is set.\n+      * <p>\n+@@ -88,7 +128,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * calling this method.\n+      *\n+      * @return a list of lore that is set\n++     * @deprecated in favour of {@link #lore()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     List<String> getLore();\n+ \n+@@ -97,7 +139,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Removes lore when given null.\n+      *\n+      * @param lore the lore that will be set\n++     * @deprecated in favour of {@link #lore(List)}\n+      */\n++    @Deprecated // Paper\n+     void setLore(@Nullable List<String> lore);\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java\n+index 83354b2a38b6261b172b91c1008dcf3313cc4a8f..1052d5f0de6b1dbd261cd05bb6dd0714119ff539 100644\n+--- a/src/main/java/org/bukkit/map/MapCursor.java\n++++ b/src/main/java/org/bukkit/map/MapCursor.java\n+@@ -10,7 +10,7 @@ public final class MapCursor {\n+     private byte x, y;\n+     private byte direction, type;\n+     private boolean visible;\n+-    private String caption;\n++    private net.kyori.adventure.text.Component caption; // Paper\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -24,7 +24,7 @@ public final class MapCursor {\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -37,7 +37,7 @@ public final class MapCursor {\n+      * @param visible Whether the cursor is visible by default.\n+      */\n+     public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -49,7 +49,7 @@ public final class MapCursor {\n+      * @param type The type (color/style) of the map cursor.\n+      * @param visible Whether the cursor is visible by default.\n+      * @param caption cursor caption\n+-     * @deprecated Magic value\n++     * @deprecated Magic value. Use {@link #MapCursor(byte, byte, byte, byte, boolean, net.kyori.adventure.text.Component)}\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+@@ -58,8 +58,40 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setRawType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n++    }\n++    // Paper start\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        this.x = x; this.y = y; this.visible = visible; this.caption = caption;\n++        setDirection(direction);\n++        setRawType(type);\n++    }\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     */\n++    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++\n+     }\n++    // Paper end\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -77,7 +109,7 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+@@ -200,23 +232,45 @@ public final class MapCursor {\n+         this.visible = visible;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the caption on this cursor.\n++     *\n++     * @return caption\n++     */\n++    public @Nullable net.kyori.adventure.text.Component caption() {\n++        return this.caption;\n++    }\n++    /**\n++     * Sets the caption on this cursor.\n++     *\n++     * @param caption new caption\n++     */\n++    public void caption(@Nullable net.kyori.adventure.text.Component caption) {\n++        this.caption = caption;\n++    }\n++    // Paper end\n+     /**\n+      * Gets the caption on this cursor.\n+      *\n+      * @return caption\n++     * @deprecated in favour of {@link #caption()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getCaption() {\n+-        return caption;\n++        return this.caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.caption); // Paper\n+     }\n+ \n+     /**\n+      * Sets the caption on this cursor.\n+      *\n+      * @param caption new caption\n++     * @deprecated in favour of {@link #caption(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setCaption(@Nullable String caption) {\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+index 4dba721aefe4fc6699b3b4bfa7ecb0b19c2a2a1a..01dec2c877df58c9dc22445e8b1f9ce2e53066da 100644\n+--- a/src/main/java/org/bukkit/map/MapCursorCollection.java\n++++ b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+@@ -117,4 +117,22 @@ public final class MapCursorCollection {\n+     public MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n+     }\n++    // Paper start\n++    /**\n++     * Add a cursor to the collection.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible.\n++     * @param caption banner caption\n++     * @return The newly added MapCursor.\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public @NotNull MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java\n+index f5cbf6df32ef169cf0f2266f7c6e9c4f771ccb7d..58bddb11fd534e7c33a4ffd7b72b055ba92c767a 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Objective.java\n++++ b/src/main/java/org/bukkit/scoreboard/Objective.java\n+@@ -19,14 +19,35 @@ public interface Objective {\n+      */\n+     @NotNull\n+     String getName() throws IllegalStateException;\n++    // Paper start\n++    /**\n++     * Gets the name displayed to players for this objective\n++     *\n++     * @return this objective's display name\n++     * @throws IllegalStateException if this objective has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName() throws IllegalStateException;\n++    /**\n++     * Sets the name displayed to players for this objective.\n++     *\n++     * @param displayName Display name to set\n++     * @throws IllegalStateException if this objective has been unregistered\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     */\n++    void displayName(@Nullable net.kyori.adventure.text.Component displayName) throws IllegalStateException, IllegalArgumentException;\n++    // Paper end\n+ \n+     /**\n+      * Gets the name displayed to players for this objective\n+      *\n+      * @return this objective's display name\n+      * @throws IllegalStateException if this objective has been unregistered\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getDisplayName() throws IllegalStateException;\n+ \n+     /**\n+@@ -37,7 +58,9 @@ public interface Objective {\n+      * @throws IllegalArgumentException if displayName is null\n+      * @throws IllegalArgumentException if displayName is longer than 128\n+      *     characters.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setDisplayName(@NotNull String displayName) throws IllegalStateException, IllegalArgumentException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/scoreboard/Scoreboard.java b/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n+index 4bfaaea78c9b6aa5d392629aa943d26dbe6a7d4a..f09ff32cc3ffc16af379a378b1948991435393e8 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n++++ b/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n+@@ -27,6 +27,48 @@ public interface Scoreboard {\n+     @Deprecated\n+     @NotNull\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria) throws IllegalArgumentException;\n++    // Paper start\n++    /**\n++     * Registers an Objective on this Scoreboard\n++     *\n++     * @param name Name of the Objective\n++     * @param criteria Criteria for the Objective\n++     * @param displayName Name displayed to players for the Objective.\n++     * @return The registered Objective\n++     * @throws IllegalArgumentException if name is null\n++     * @throws IllegalArgumentException if name is longer than 16\n++     *     characters.\n++     * @throws IllegalArgumentException if criteria is null\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalArgumentException if an objective by that name already\n++     *     exists\n++     */\n++    @NotNull\n++    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @Nullable net.kyori.adventure.text.Component displayName) throws IllegalArgumentException;\n++    /**\n++     * Registers an Objective on this Scoreboard\n++     *\n++     * @param name Name of the Objective\n++     * @param criteria Criteria for the Objective\n++     * @param displayName Name displayed to players for the Objective.\n++     * @param renderType Manner of rendering the Objective\n++     * @return The registered Objective\n++     * @throws IllegalArgumentException if name is null\n++     * @throws IllegalArgumentException if name is longer than 16\n++     *     characters.\n++     * @throws IllegalArgumentException if criteria is null\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalArgumentException if renderType is null\n++     * @throws IllegalArgumentException if an objective by that name already\n++     *     exists\n++     */\n++    @NotNull\n++    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @Nullable net.kyori.adventure.text.Component displayName, @NotNull RenderType renderType) throws IllegalArgumentException;\n++    // Paper end\n+ \n+     /**\n+      * Registers an Objective on this Scoreboard\n+@@ -44,8 +86,10 @@ public interface Scoreboard {\n+      *     characters.\n+      * @throws IllegalArgumentException if an objective by that name already\n+      *     exists\n++     * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -66,8 +110,10 @@ public interface Scoreboard {\n+      * @throws IllegalArgumentException if renderType is null\n+      * @throws IllegalArgumentException if an objective by that name already\n+      *     exists\n++     * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component, RenderType)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName, @NotNull RenderType renderType) throws IllegalArgumentException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java\n+index da01d2926cc8a2485a3349ac1ebb32cad20e287c..812b7bfb686437c97884bfdff1be25657e654daf 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Team.java\n++++ b/src/main/java/org/bukkit/scoreboard/Team.java\n+@@ -22,14 +22,95 @@ public interface Team {\n+      */\n+     @NotNull\n+     String getName() throws IllegalStateException;\n++    // Paper start\n++    /**\n++     * Gets the name displayed to entries for this team\n++     *\n++     * @return Team display name\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName() throws IllegalStateException;\n++\n++    /**\n++     * Sets the name displayed to entries for this team\n++     *\n++     * @param displayName New display name\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void displayName(@Nullable net.kyori.adventure.text.Component displayName) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the prefix prepended to the display of entries on this team.\n++     *\n++     * @return Team prefix\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component prefix() throws IllegalStateException;\n++\n++    /**\n++     * Sets the prefix prepended to the display of entries on this team.\n++     *\n++     * @param prefix New prefix\n++     * @throws IllegalArgumentException if prefix is null\n++     * @throws IllegalArgumentException if prefix is longer than 64\n++     *     characters\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void prefix(@Nullable net.kyori.adventure.text.Component prefix) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the suffix appended to the display of entries on this team.\n++     *\n++     * @return the team's current suffix\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component suffix() throws IllegalStateException;\n++\n++    /**\n++     * Sets the suffix appended to the display of entries on this team.\n++     *\n++     * @param suffix the new suffix for this team.\n++     * @throws IllegalArgumentException if suffix is null\n++     * @throws IllegalArgumentException if suffix is longer than 64\n++     *     characters\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void suffix(@Nullable net.kyori.adventure.text.Component suffix) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the color of the team.\n++     * <br>\n++     * This only sets the team outline, other occurrences of colors such as in\n++     * names are handled by prefixes / suffixes.\n++     *\n++     * @return team color, defaults to {@link ChatColor#RESET}\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.format.NamedTextColor color() throws IllegalStateException;\n++\n++    /**\n++     * Sets the color of the team.\n++     * <br>\n++     * This only sets the team outline, other occurrences of colors such as in\n++     * names are handled by prefixes / suffixes.\n++     *\n++     * @param color new color, must be non-null. Use {@link ChatColor#RESET} for\n++     * no color\n++     */\n++    void color(@Nullable net.kyori.adventure.text.format.NamedTextColor color);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a00ec991bb23a4847156894674e0af22f86fca"}, "originalPosition": 1972}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4NDIyMA==", "bodyText": "These abstractions need to last the test of time, it's not unreasonable to think teams may support hex colors in the future.", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550784220", "createdAt": "2021-01-01T16:37:47Z", "author": {"login": "Electroid"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->\n+         <dependency>\n+             <groupId>it.unimi.dsi</groupId>\n+             <artifactId>fastutil</artifactId>\n+diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+index ef58a6c00f444bd498a2d8fc4e457236f393954f..ecd149157d4fb80444f34bf5633d74bcdb63dec5 100644\n+--- a/src/main/java/co/aikar/timings/TimingsReportListener.java\n++++ b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+ @SuppressWarnings(\"WeakerAccess\")\n+-public class TimingsReportListener implements MessageCommandSender {\n++public class TimingsReportListener implements net.kyori.adventure.audience.ForwardingAudience, MessageCommandSender { // Paper\n+     private final List<CommandSender> senders;\n+     private final Runnable onDone;\n+     private String timingsURL;\n+@@ -74,4 +74,17 @@ public class TimingsReportListener implements MessageCommandSender {\n+             this.senders.add(Bukkit.getConsoleSender());\n+         }\n+     }\n++\n++    // Paper start\n++    @Override\n++    public void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.senders;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java\n+index 7c715fdc11ab7837552b1fe3ffd08b31cec0a63b..426b1e83226e674ee4bf3ec05ddcd3ac4376b06d 100644\n+--- a/src/main/java/org/bukkit/Bukkit.java\n++++ b/src/main/java/org/bukkit/Bukkit.java\n+@@ -278,7 +278,9 @@ public final class Bukkit {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated in favour of {@link Server#sendMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public static int broadcastMessage(@NotNull String message) {\n+         return server.broadcastMessage(message);\n+     }\n+@@ -836,6 +838,7 @@ public final class Bukkit {\n+         server.shutdown();\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Broadcasts the specified message to every user with the given\n+      * permission name.\n+@@ -845,6 +848,21 @@ public final class Bukkit {\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n+      */\n++    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {\n++        return server.broadcast(message, permission);\n++    }\n++    // Paper end\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n++     */\n++    @Deprecated // Paper\n+     public static int broadcast(@NotNull String message, @NotNull String permission) {\n+         return server.broadcast(message, permission);\n+     }\n+@@ -1044,6 +1062,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, type);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -1069,6 +1088,38 @@ public final class Bukkit {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {\n++        return server.createInventory(owner, type, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {\n+         return server.createInventory(owner, type, title);\n+     }\n+@@ -1087,6 +1138,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, size);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -1099,10 +1151,30 @@ public final class Bukkit {\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {\n++        return server.createInventory(owner, size, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {\n+         return server.createInventory(owner, size, title);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+@@ -1110,7 +1182,20 @@ public final class Bukkit {\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n+      */\n++    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {\n++        return server.createMerchant(title);\n++    }\n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static Merchant createMerchant(@Nullable String title) {\n+         return server.createMerchant(title);\n+     }\n+@@ -1181,22 +1266,47 @@ public final class Bukkit {\n+         return server.isPrimaryThread();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull public static net.kyori.adventure.text.Component motd() {\n++        return server.motd();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static String getMotd() {\n+         return server.getMotd();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    public static @Nullable net.kyori.adventure.text.Component shutdownMessage() {\n++        return server.shutdownMessage();\n++    }\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public static String getShutdownMessage() {\n+         return server.getShutdownMessage();\n+     }\n+diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java\n+index fee814e01a653d2b53c56e8b566383ca44aa5346..2acdf2a6d3955923c721222b9da784f3278f6418 100644\n+--- a/src/main/java/org/bukkit/Nameable.java\n++++ b/src/main/java/org/bukkit/Nameable.java\n+@@ -4,6 +4,30 @@ import org.jetbrains.annotations.Nullable;\n+ \n+ public interface Nameable {\n+ \n++    // Paper start\n++    /**\n++     * Gets the custom name.\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @return the custom name\n++     */\n++    @Nullable net.kyori.adventure.text.Component customName();\n++\n++    /**\n++     * Sets the custom name.\n++     *\n++     * <p>This name will be used in death messages and can be sent to the client as a nameplate over the mob.</p>\n++     *\n++     * <p>Setting the name to {@code null} will clear it.</p>\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @param customName the custom name to set\n++     */\n++    void customName(final @Nullable net.kyori.adventure.text.Component customName);\n++    // Paper end\n++\n+     /**\n+      * Gets the custom name on a mob or block. If there is no name this method\n+      * will return null.\n+diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java\n+index 22eca2a180618ed43a4ef103bebd134897d6c71a..abb7448ee8fe1152623794d3b806eef9a9e17abc 100644\n+--- a/src/main/java/org/bukkit/NamespacedKey.java\n++++ b/src/main/java/org/bukkit/NamespacedKey.java\n+@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n+  * underscores, hyphens, and forward slashes.\n+  *\n+  */\n+-public final class NamespacedKey {\n++public final class NamespacedKey implements net.kyori.adventure.key.Key { // Paper - implement Key\n+ \n+     /**\n+      * The namespace representing all inbuilt keys.\n+@@ -139,4 +139,24 @@ public final class NamespacedKey {\n+     public static NamespacedKey minecraft(@NotNull String key) {\n+         return new NamespacedKey(MINECRAFT, key);\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public String namespace() {\n++        return this.getNamespace();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String value() {\n++        return this.getKey();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String asString() {\n++        return this.namespace + ':' + this.key;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java\n+index a6b9e4f158583e5932bf8ca210d531857e9f5360..d9515a79dc7ed60c66960cd6c6bb4c108f206f3c 100644\n+--- a/src/main/java/org/bukkit/Server.java\n++++ b/src/main/java/org/bukkit/Server.java\n+@@ -55,7 +55,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a server implementation.\n+  */\n+-public interface Server extends PluginMessageRecipient {\n++public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Used for all administrative messages, such as an operator using a\n+@@ -229,7 +229,9 @@ public interface Server extends PluginMessageRecipient {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+      */\n++    @Deprecated // Paper\n+     public int broadcastMessage(@NotNull String message);\n+ \n+     /**\n+@@ -703,8 +705,22 @@ public interface Server extends PluginMessageRecipient {\n+      * @param permission the required permission {@link Permissible\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n+      */\n++    @Deprecated // Paper\n+     public int broadcast(@NotNull String message, @NotNull String permission);\n++    // Paper start\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     */\n++    int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);\n++    // Paper end\n+ \n+     /**\n+      * Gets the player by the given name, regardless if they are offline or\n+@@ -869,6 +885,7 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -894,6 +911,36 @@ public interface Server extends PluginMessageRecipient {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);\n+ \n+     /**\n+@@ -908,6 +955,22 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     */\n++    @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;\n++    // Paper end\n++\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -918,18 +981,32 @@ public interface Server extends PluginMessageRecipient {\n+      *     viewed\n+      * @return a new inventory\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     */\n++    @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);\n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+      * @param title the title of the corresponding merchant inventory, displayed\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Merchant createMerchant(@Nullable String title);\n+ \n+     /**\n+@@ -986,20 +1063,41 @@ public interface Server extends PluginMessageRecipient {\n+      */\n+     boolean isPrimaryThread();\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull net.kyori.adventure.text.Component motd();\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getMotd();\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    @Nullable net.kyori.adventure.text.Component shutdownMessage();\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     String getShutdownMessage();\n+ \n+     /**\n+@@ -1368,7 +1466,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends the component to the player\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1477,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends an array of components as a single message to the player\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java\n+index cdcbc8b05afc412017ac0e4ed0adf227d1342336..6b5dbe4ea711807a1944cfe2aae2ce415d4f2638 100644\n+--- a/src/main/java/org/bukkit/World.java\n++++ b/src/main/java/org/bukkit/World.java\n+@@ -38,7 +38,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a world, which may contain entities, chunks and blocks\n+  */\n+-public interface World extends PluginMessageRecipient, Metadatable {\n++public interface World extends PluginMessageRecipient, Metadatable, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Gets the {@link Block} at the given coordinates\n+@@ -616,6 +616,14 @@ public interface World extends PluginMessageRecipient, Metadatable {\n+     @NotNull\n+     public List<Player> getPlayers();\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.getPlayers();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Returns a list of entities within a bounding box centered around a\n+      * Location.\n+diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java\n+index 7e3cf00e49c66023bf46c298ef46c00e8c3c2caf..6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41 100644\n+--- a/src/main/java/org/bukkit/block/Sign.java\n++++ b/src/main/java/org/bukkit/block/Sign.java\n+@@ -7,13 +7,48 @@ import org.jetbrains.annotations.NotNull;\n+  * Represents a captured state of either a SignPost or a WallSign.\n+  */\n+ public interface Sign extends TileState, Colorable {\n++    // Paper start\n++    /**\n++     * Gets all the lines of text currently on this sign.\n++     *\n++     * @return Array of Strings containing each line of text\n++     */\n++    @NotNull\n++    public java.util.List<net.kyori.adventure.text.Component> lines();\n++\n++    /**\n++     * Gets the line of text at the specified index.\n++     * <p>\n++     * For example, getLine(0) will return the first line of text.\n++     *\n++     * @param index Line number to get the text from, starting at 0\n++     * @throws IndexOutOfBoundsException Thrown when the line does not exist\n++     * @return Text on the given line\n++     */\n++    @NotNull\n++    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;\n++\n++    /**\n++     * Sets the line of text at the specified index.\n++     * <p>\n++     * For example, setLine(0, \"Line One\") will set the first line of text to\n++     * \"Line One\".\n++     *\n++     * @param index Line number to set the text at, starting from 0\n++     * @param line New text to set at the specified index\n++     * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     */\n++    public void line(int index, @NotNull net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;\n++    // Paper end\n+ \n+     /**\n+      * Gets all the lines of text currently on this sign.\n+      *\n+      * @return Array of Strings containing each line of text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines();\n+ \n+     /**\n+@@ -24,8 +59,10 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to get the text from, starting at 0\n+      * @throws IndexOutOfBoundsException Thrown when the line does not exist\n+      * @return Text on the given line\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException;\n+ \n+     /**\n+@@ -37,7 +74,9 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to set the text at, starting from 0\n+      * @param line New text to set at the specified index\n+      * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java\n+index ac772bf349e0ffe9cab1df165d9460b387f2fe69..2588edf75483855e0c843834f39ca371770730b9 100644\n+--- a/src/main/java/org/bukkit/command/CommandSender.java\n++++ b/src/main/java/org/bukkit/command/CommandSender.java\n+@@ -6,12 +6,13 @@ import org.bukkit.permissions.Permissible;\n+ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+-public interface CommandSender extends Permissible {\n++public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper\n+ \n+     /**\n+      * Sends this sender a message\n+      *\n+      * @param message Message to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String message);\n+ \n+@@ -19,6 +20,7 @@ public interface CommandSender extends Permissible {\n+      * Sends this sender multiple messages\n+      *\n+      * @param messages An array of messages to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String[] messages);\n+ \n+@@ -27,6 +29,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param message Message to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String message);\n+ \n+@@ -35,6 +38,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param messages An array of messages to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String[] messages);\n+ \n+@@ -61,7 +65,9 @@ public interface CommandSender extends Permissible {\n+          * Sends this sender a chat component.\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -70,7 +76,9 @@ public interface CommandSender extends Permissible {\n+          * Sends an array of components as a single message to the sender.\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -80,7 +88,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param component the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -90,7 +100,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param components the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -99,4 +111,11 @@ public interface CommandSender extends Permissible {\n+     @NotNull\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity identity, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/command/ProxiedCommandSender.java b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+index fcc34b640265f4dccb46b9f09466ab8e1d96043e..74599b4ee0518481c0e3a5f6ab2f5302837f1ae3 100644\n+--- a/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n++++ b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+@@ -3,7 +3,7 @@ package org.bukkit.command;\n+ \n+ import org.jetbrains.annotations.NotNull;\n+ \n+-public interface ProxiedCommandSender extends CommandSender {\n++public interface ProxiedCommandSender extends CommandSender, net.kyori.adventure.audience.ForwardingAudience.Single { // Paper\n+ \n+     /**\n+      * Returns the CommandSender which triggered this proxied command\n+@@ -21,4 +21,16 @@ public interface ProxiedCommandSender extends CommandSender {\n+     @NotNull\n+     CommandSender getCallee();\n+ \n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.Single.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.audience.Audience audience() {\n++        return this.getCaller();\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+index b833ef63fbe01271ceb2bd83a9eb4a84c9912761..1a093a30adf18572693032b78f3d2683e87d2e21 100644\n+--- a/src/main/java/org/bukkit/enchantments/Enchantment.java\n++++ b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+@@ -294,6 +294,9 @@ public abstract class Enchantment implements Keyed {\n+      * @return True if the enchantment may be applied, otherwise False\n+      */\n+     public abstract boolean canEnchantItem(@NotNull ItemStack item);\n++    // Paper start\n++    public abstract @NotNull net.kyori.adventure.text.Component displayName(int level);\n++    // Paper end\n+ \n+     @Override\n+     public boolean equals(Object obj) {\n+diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+index 9566e4306ada5e82dede0f002aa06da12c44996b..4d5f0837bd0e02a30c943d8969fb6b13452322e0 100644\n+--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n++++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+@@ -63,4 +63,11 @@ public class EnchantmentWrapper extends Enchantment {\n+     public boolean conflictsWith(@NotNull Enchantment other) {\n+         return getEnchantment().conflictsWith(other);\n+     }\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.Component displayName(int level) {\n++        return getEnchantment().displayName(level);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java\n+index 344c14a5ed86e9ebe401bfb5ba3aedc0c0ed0b04..54597268cfbe03c5e521476d3d26e612457cf381 100644\n+--- a/src/main/java/org/bukkit/entity/Entity.java\n++++ b/src/main/java/org/bukkit/entity/Entity.java\n+@@ -25,7 +25,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a base entity in the world\n+  */\n+-public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder {\n++public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowEntity> { // Paper\n+ \n+     /**\n+      * Gets the entity's current position\n+@@ -602,4 +602,12 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent\n+     @Override\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(op.apply(net.kyori.adventure.text.event.HoverEvent.ShowEntity.of(this.getType().getKey(), this.getUniqueId(), null)));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java\n+index f22b21ee12496452f7b2125c131f56ecc74d439a..447de8f7c1d871ef5fb1a06bace451e1de06d972 100644\n+--- a/src/main/java/org/bukkit/entity/Player.java\n++++ b/src/main/java/org/bukkit/entity/Player.java\n+@@ -30,7 +30,28 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a player, connected or not\n+  */\n+-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient {\n++public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified { // Paper\n++\n++    // Paper start\n++    @Override\n++    default @NotNull net.kyori.adventure.identity.Identity identity() {\n++        return net.kyori.adventure.identity.Identity.identity(this.getUniqueId());\n++    }\n++\n++    /**\n++     * Gets the \"friendly\" name to display of this player.\n++     *\n++     * @return the display name\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the \"friendly\" name to display of this player.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n+ \n+     /**\n+      * Gets the \"friendly\" name to display of this player. This may include\n+@@ -40,7 +61,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @return the friendly name\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     public String getDisplayName();\n+ \n+@@ -52,15 +75,51 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @param name The new display name.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setDisplayName(@Nullable String name);\n+ \n++    // Paper start\n++    /**\n++     * Sets the name that is shown on the in-game player list.\n++     * <p>\n++     * If the value is null, the name will be identical to {@link #getName()}.\n++     *\n++     * @param name new player list name\n++     */\n++    void playerListName(@Nullable net.kyori.adventure.text.Component name);\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListName();\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     * @deprecated in favour of {@link #playerListName()}\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListHeader();\n++\n++    /**\n++     * Gets the currently displayed player list footer for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListFooter();\n++    // Paper end\n+     /**\n+      * Gets the name that is shown on the player list.\n+      *\n+      * @return the player list name\n++     * @deprecated in favour of {@link #playerListName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getPlayerListName();\n+ \n+     /**\n+@@ -69,14 +128,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * If the value is null, the name will be identical to {@link #getName()}.\n+      *\n+      * @param name new player list name\n++     * @deprecated in favour of {@link #playerListName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListName(@Nullable String name);\n+ \n+     /**\n+      * Gets the currently displayed player list header for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListHeader()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListHeader();\n+ \n+@@ -84,7 +147,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Gets the currently displayed player list footer for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListFooter()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListFooter();\n+ \n+@@ -92,14 +157,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Sets the currently displayed player list header for this player.\n+      *\n+      * @param header player list header, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeader(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeader(@Nullable String header);\n+ \n+     /**\n+      * Sets the currently displayed player list footer for this player.\n+      *\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListFooter(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListFooter(@Nullable String footer);\n+ \n+     /**\n+@@ -108,7 +177,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      *\n+      * @param header player list header, null for empty\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeaderFooter(@Nullable String header, @Nullable String footer);\n+ \n+     /**\n+@@ -146,9 +217,20 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Kicks player with custom kick message.\n+      *\n+      * @param message kick message\n++     * @deprecated in favour of {@link #kick(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void kickPlayer(@Nullable String message);\n+ \n++    // Paper start\n++    /**\n++     * Kicks player with custom kick message.\n++     *\n++     * @param message kick message\n++     */\n++    void kick(final @Nullable net.kyori.adventure.text.Component message);\n++    // Paper end\n++\n+     /**\n+      * Says a message (or runs a command).\n+      *\n+@@ -437,6 +519,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+     @Deprecated\n+     public boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, @NotNull byte[] data);\n+ \n++    // Paper start\n+     /**\n+      * Send a sign change. This fakes a sign change packet for a user at\n+      * a certain location. This will not actually change the world in any way.\n+@@ -452,6 +535,43 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n+      */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines) throws IllegalArgumentException;\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @param  dyeColor the color of the sign\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if dyeColor is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n++    // Paper end\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List)}\n++     */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines) throws IllegalArgumentException;\n+ \n+ \n+@@ -471,7 +591,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if dyeColor is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List, org.bukkit.DyeColor)}\n+      */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -1258,6 +1380,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public int getClientViewDistance();\n+ \n++    // Paper start\n++    /**\n++     * Gets the player's current locale.\n++     *\n++     * @return the player's locale\n++     */\n++    @NotNull java.util.Locale locale();\n++    // Paper end\n+     /**\n+      * Gets the player's current locale.\n+      *\n+@@ -1268,8 +1398,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * they wish.\n+      *\n+      * @return the player's locale\n++     * @deprecated in favour of {@link #locale()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLocale();\n+ \n+     /**\n+@@ -1287,6 +1419,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public void openBook(@NotNull ItemStack book);\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(this.getType().getKey(), this.getUniqueId(), this.displayName());\n++    }\n++    // Paper end\n++\n+     // Spigot start\n+     public class Spigot extends Entity.Spigot {\n+ \n+@@ -1341,11 +1481,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+@@ -1356,7 +1498,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1366,7 +1510,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1523,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1388,7 +1536,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+ \n+diff --git a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+index 63c80b4ee1f7adc8a9efc3b607993104b1991f90..7adbc6f87771c21d374e610fcb21a2442f2d8031 100644\n+--- a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n++++ b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+@@ -25,6 +25,16 @@ public interface CommandMinecart extends Minecart {\n+      *     activated.\n+      */\n+     public void setCommand(@Nullable String command);\n++    // Paper start\n++    /**\n++     * Sets the name of this CommandMinecart.  The name is used with commands\n++     * that this CommandMinecart executes.  Setting the name to null is the\n++     * same as setting it to \"@\".\n++     *\n++     * @param name New name for this CommandMinecart.\n++     */\n++    void name(@Nullable net.kyori.adventure.text.Component name);\n++    // Paper end\n+ \n+     /**\n+      * Sets the name of this CommandMinecart.  The name is used with commands\n+@@ -32,7 +42,9 @@ public interface CommandMinecart extends Minecart {\n+      * same as setting it to \"@\".\n+      *\n+      * @param name New name for this CommandMinecart.\n++     * @deprecated in favour of {@link #name(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setName(@Nullable String name);\n+ \n+ }\n+diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+index f1e9bc9bc797b7216336d3470e3c696a06f2b21a..090d22bd30f7947103771aaaf09a2398970ac337 100644\n+--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java\n++++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+@@ -136,6 +136,18 @@ public enum InventoryType {\n+     private final String title;\n+     private final boolean isCreatable;\n+ \n++    // Paper start\n++    private final net.kyori.adventure.text.Component defaultTitleComponent;\n++\n++    /**\n++     * Gets the inventory's default title.\n++     *\n++     * @return the inventory's default title\n++     */\n++    public @NotNull net.kyori.adventure.text.Component defaultTitle() {\n++        return defaultTitleComponent;\n++    }\n++    // Paper end\n+     private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {\n+         this(defaultSize, defaultTitle, true);\n+     }\n+@@ -144,6 +156,7 @@ public enum InventoryType {\n+         size = defaultSize;\n+         title = defaultTitle;\n+         this.isCreatable = isCreatable;\n++        this.defaultTitleComponent = net.kyori.adventure.text.Component.text(defaultTitle); // Paper - Adventure\n+     }\n+ \n+     public int getDefaultSize() {\n+@@ -151,6 +164,7 @@ public enum InventoryType {\n+     }\n+ \n+     @NotNull\n++    @Deprecated // Paper\n+     public String getDefaultTitle() {\n+         return title;\n+     }\n+diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java\n+index 14346d83bc99581b18e53d19af03708c0bf22cf7..b6cbf23dd40fb1cb1fec3c7d6918438ebf5bcc2e 100644\n+--- a/src/main/java/org/bukkit/inventory/InventoryView.java\n++++ b/src/main/java/org/bukkit/inventory/InventoryView.java\n+@@ -446,11 +446,23 @@ public abstract class InventoryView {\n+         return getPlayer().setWindowProperty(prop, value);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Get the title of this inventory window.\n+      *\n+      * @return The title.\n+      */\n+     @NotNull\n++    public abstract net.kyori.adventure.text.Component title();\n++    // Paper end\n++\n++    /**\n++     * Get the title of this inventory window.\n++     *\n++     * @return The title.\n++     * @deprecated in favour of {@link #title()}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public abstract String getTitle();\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+index 4ff149fd98895dd8ba45939a37c223b1f8d7281f..3dba4c361993e143e511b4f108ac0b444a84d964 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemFactory.java\n++++ b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+@@ -141,4 +141,15 @@ public interface ItemFactory {\n+     @Deprecated\n+     @NotNull\n+     Material updateMaterial(@NotNull final ItemMeta meta, @NotNull final Material material) throws IllegalArgumentException;\n++\n++    // Paper start\n++    /**\n++     * Creates a hover event for the given item.\n++     *\n++     * @param item The item\n++     * @return A hover event\n++     */\n++    @NotNull\n++    net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull ItemStack item, final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op);\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java\n+index f70a6a22b85ff0da76e67e9b223ad4e0b020b5c4..4b20b557eaa958cf1ad1baf8d6cc17f38b180ff1 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemStack.java\n++++ b/src/main/java/org/bukkit/inventory/ItemStack.java\n+@@ -22,7 +22,7 @@ import org.jetbrains.annotations.Nullable;\n+  * use this class to encapsulate Materials for which {@link Material#isItem()}\n+  * returns false.</b>\n+  */\n+-public class ItemStack implements Cloneable, ConfigurationSerializable {\n++public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem> { // Paper\n+     private Material type = Material.AIR;\n+     private int amount = 0;\n+     private MaterialData data = null;\n+@@ -595,4 +595,12 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {\n+ \n+         return true;\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {\n++        return org.bukkit.Bukkit.getServer().getItemFactory().asHoverEvent(this, op);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+index 94852d50e88d0594b84b581cd627174043629995..e143081922c2027e8ca1db6f1e7eb5b4d786ab41 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+@@ -119,6 +119,63 @@ public interface BookMeta extends ItemMeta {\n+      */\n+     boolean hasPages();\n+ \n++    // Paper start\n++    /**\n++     * Gets the specified page in the book. The page must exist.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to get, in range [1, getPageCount()]\n++     * @return the page from the book\n++     */\n++    @NotNull net.kyori.adventure.text.Component page(int page);\n++\n++    /**\n++     * Sets the specified page in the book. Pages of the book must be\n++     * contiguous.\n++     * <p>\n++     * The data can be up to 256 characters in length, additional characters\n++     * are truncated.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to set, in range [1, getPageCount()]\n++     * @param data the data to set for that page\n++     */\n++    void page(int page, @NotNull net.kyori.adventure.text.Component data);\n++\n++    /**\n++     * Gets all the pages in the book.\n++     *\n++     * @return list of all the pages in the book\n++     */\n++    @NotNull List<net.kyori.adventure.text.Component> pages();\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 100 pages with 256 characters per page.\n++     *\n++     * @param pages A list of pages to set the book to use\n++     */\n++    void pages(@NotNull List<net.kyori.adventure.text.Component> pages);\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 50 pages with 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void pages(@NotNull net.kyori.adventure.text.Component... pages);\n++\n++    /**\n++     * Adds new pages to the end of the book. Up to a maximum of 50 pages with\n++     * 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void addPages(@NotNull net.kyori.adventure.text.Component... pages);\n++    // Paper end\n++\n+     /**\n+      * Gets the specified page in the book. The given page must exist.\n+      * <p>\n+@@ -126,8 +183,10 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to get, in range [1, getPageCount()]\n+      * @return the page from the book\n++     * @deprecated in favour of {@link #page(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getPage(int page);\n+ \n+     /**\n+@@ -141,15 +200,19 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to set, in range [1, getPageCount()]\n+      * @param data the data to set for that page\n++     * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setPage(int page, @NotNull String data);\n+ \n+     /**\n+      * Gets all the pages in the book.\n+      *\n+      * @return list of all the pages in the book\n++     * @deprecated in favour of {@link #pages()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     List<String> getPages();\n+ \n+     /**\n+@@ -157,7 +220,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 100 pages with 256 characters per page.\n+      *\n+      * @param pages A list of pages to set the book to use\n++     * @deprecated in favour of {@link #pages(List)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull List<String> pages);\n+ \n+     /**\n+@@ -165,7 +230,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 50 pages with 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull String... pages);\n+ \n+     /**\n+@@ -173,7 +240,9 @@ public interface BookMeta extends ItemMeta {\n+      * 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void addPage(@NotNull String... pages);\n+ \n+     /**\n+@@ -195,8 +264,10 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to get\n+          * @return the page from the book\n++         * @deprecated in favour of {@link #page(int)}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public BaseComponent[] getPage(int page) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -210,7 +281,9 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to set\n+          * @param data the data to set for that page\n++         * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+          */\n++        @Deprecated // Paper\n+         public void setPage(int page, @Nullable BaseComponent... data) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -219,8 +292,10 @@ public interface BookMeta extends ItemMeta {\n+          * Gets all the pages in the book.\n+          *\n+          * @return list of all the pages in the book\n++         * @deprecated in favour of {@link #pages()}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public List<BaseComponent[]> getPages() {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -230,7 +305,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of pages to set the book to use\n++         * @deprecated in favour of {@link #pages(java.util.List)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull List<BaseComponent[]> pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -240,7 +317,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -250,7 +329,9 @@ public interface BookMeta extends ItemMeta {\n+          * with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void addPage(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+index f2e9f2753ec92aa4a3e3f06ca6053bd70b9091d7..1c362636c56db0e6c118171ba367c43c4f7cff33 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+@@ -31,6 +31,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasDisplayName();\n+ \n++    // Paper start\n++    /**\n++     * Gets the display name.\n++     *\n++     * <p>Plugins should check that {@link #hasDisplayName()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the display name.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n++\n+     /**\n+      * Gets the display name that is set.\n+      * <p>\n+@@ -38,7 +56,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * before calling this method.\n+      *\n+      * @return the display name that is set\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     String getDisplayName();\n+ \n+@@ -46,7 +66,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Sets the display name.\n+      *\n+      * @param name the name to set\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setDisplayName(@Nullable String name);\n+ \n+     /**\n+@@ -81,6 +103,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasLore();\n+ \n++    // Paper start\n++    /**\n++     * Gets the lore.\n++     *\n++     * <p>Plugins should check that {@link #hasLore()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable List<net.kyori.adventure.text.Component> lore();\n++\n++    /**\n++     * Sets the lore.\n++     *\n++     * @param lore the lore to set\n++     */\n++    void lore(final @Nullable List<net.kyori.adventure.text.Component> lore);\n++    // Paper end\n++\n+     /**\n+      * Gets the lore that is set.\n+      * <p>\n+@@ -88,7 +128,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * calling this method.\n+      *\n+      * @return a list of lore that is set\n++     * @deprecated in favour of {@link #lore()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     List<String> getLore();\n+ \n+@@ -97,7 +139,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Removes lore when given null.\n+      *\n+      * @param lore the lore that will be set\n++     * @deprecated in favour of {@link #lore(List)}\n+      */\n++    @Deprecated // Paper\n+     void setLore(@Nullable List<String> lore);\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java\n+index 83354b2a38b6261b172b91c1008dcf3313cc4a8f..1052d5f0de6b1dbd261cd05bb6dd0714119ff539 100644\n+--- a/src/main/java/org/bukkit/map/MapCursor.java\n++++ b/src/main/java/org/bukkit/map/MapCursor.java\n+@@ -10,7 +10,7 @@ public final class MapCursor {\n+     private byte x, y;\n+     private byte direction, type;\n+     private boolean visible;\n+-    private String caption;\n++    private net.kyori.adventure.text.Component caption; // Paper\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -24,7 +24,7 @@ public final class MapCursor {\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -37,7 +37,7 @@ public final class MapCursor {\n+      * @param visible Whether the cursor is visible by default.\n+      */\n+     public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -49,7 +49,7 @@ public final class MapCursor {\n+      * @param type The type (color/style) of the map cursor.\n+      * @param visible Whether the cursor is visible by default.\n+      * @param caption cursor caption\n+-     * @deprecated Magic value\n++     * @deprecated Magic value. Use {@link #MapCursor(byte, byte, byte, byte, boolean, net.kyori.adventure.text.Component)}\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+@@ -58,8 +58,40 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setRawType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n++    }\n++    // Paper start\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        this.x = x; this.y = y; this.visible = visible; this.caption = caption;\n++        setDirection(direction);\n++        setRawType(type);\n++    }\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     */\n++    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++\n+     }\n++    // Paper end\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -77,7 +109,7 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+@@ -200,23 +232,45 @@ public final class MapCursor {\n+         this.visible = visible;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the caption on this cursor.\n++     *\n++     * @return caption\n++     */\n++    public @Nullable net.kyori.adventure.text.Component caption() {\n++        return this.caption;\n++    }\n++    /**\n++     * Sets the caption on this cursor.\n++     *\n++     * @param caption new caption\n++     */\n++    public void caption(@Nullable net.kyori.adventure.text.Component caption) {\n++        this.caption = caption;\n++    }\n++    // Paper end\n+     /**\n+      * Gets the caption on this cursor.\n+      *\n+      * @return caption\n++     * @deprecated in favour of {@link #caption()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getCaption() {\n+-        return caption;\n++        return this.caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.caption); // Paper\n+     }\n+ \n+     /**\n+      * Sets the caption on this cursor.\n+      *\n+      * @param caption new caption\n++     * @deprecated in favour of {@link #caption(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setCaption(@Nullable String caption) {\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+index 4dba721aefe4fc6699b3b4bfa7ecb0b19c2a2a1a..01dec2c877df58c9dc22445e8b1f9ce2e53066da 100644\n+--- a/src/main/java/org/bukkit/map/MapCursorCollection.java\n++++ b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+@@ -117,4 +117,22 @@ public final class MapCursorCollection {\n+     public MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n+     }\n++    // Paper start\n++    /**\n++     * Add a cursor to the collection.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible.\n++     * @param caption banner caption\n++     * @return The newly added MapCursor.\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public @NotNull MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java\n+index f5cbf6df32ef169cf0f2266f7c6e9c4f771ccb7d..58bddb11fd534e7c33a4ffd7b72b055ba92c767a 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Objective.java\n++++ b/src/main/java/org/bukkit/scoreboard/Objective.java\n+@@ -19,14 +19,35 @@ public interface Objective {\n+      */\n+     @NotNull\n+     String getName() throws IllegalStateException;\n++    // Paper start\n++    /**\n++     * Gets the name displayed to players for this objective\n++     *\n++     * @return this objective's display name\n++     * @throws IllegalStateException if this objective has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName() throws IllegalStateException;\n++    /**\n++     * Sets the name displayed to players for this objective.\n++     *\n++     * @param displayName Display name to set\n++     * @throws IllegalStateException if this objective has been unregistered\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     */\n++    void displayName(@Nullable net.kyori.adventure.text.Component displayName) throws IllegalStateException, IllegalArgumentException;\n++    // Paper end\n+ \n+     /**\n+      * Gets the name displayed to players for this objective\n+      *\n+      * @return this objective's display name\n+      * @throws IllegalStateException if this objective has been unregistered\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getDisplayName() throws IllegalStateException;\n+ \n+     /**\n+@@ -37,7 +58,9 @@ public interface Objective {\n+      * @throws IllegalArgumentException if displayName is null\n+      * @throws IllegalArgumentException if displayName is longer than 128\n+      *     characters.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setDisplayName(@NotNull String displayName) throws IllegalStateException, IllegalArgumentException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/scoreboard/Scoreboard.java b/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n+index 4bfaaea78c9b6aa5d392629aa943d26dbe6a7d4a..f09ff32cc3ffc16af379a378b1948991435393e8 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n++++ b/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n+@@ -27,6 +27,48 @@ public interface Scoreboard {\n+     @Deprecated\n+     @NotNull\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria) throws IllegalArgumentException;\n++    // Paper start\n++    /**\n++     * Registers an Objective on this Scoreboard\n++     *\n++     * @param name Name of the Objective\n++     * @param criteria Criteria for the Objective\n++     * @param displayName Name displayed to players for the Objective.\n++     * @return The registered Objective\n++     * @throws IllegalArgumentException if name is null\n++     * @throws IllegalArgumentException if name is longer than 16\n++     *     characters.\n++     * @throws IllegalArgumentException if criteria is null\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalArgumentException if an objective by that name already\n++     *     exists\n++     */\n++    @NotNull\n++    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @Nullable net.kyori.adventure.text.Component displayName) throws IllegalArgumentException;\n++    /**\n++     * Registers an Objective on this Scoreboard\n++     *\n++     * @param name Name of the Objective\n++     * @param criteria Criteria for the Objective\n++     * @param displayName Name displayed to players for the Objective.\n++     * @param renderType Manner of rendering the Objective\n++     * @return The registered Objective\n++     * @throws IllegalArgumentException if name is null\n++     * @throws IllegalArgumentException if name is longer than 16\n++     *     characters.\n++     * @throws IllegalArgumentException if criteria is null\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalArgumentException if renderType is null\n++     * @throws IllegalArgumentException if an objective by that name already\n++     *     exists\n++     */\n++    @NotNull\n++    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @Nullable net.kyori.adventure.text.Component displayName, @NotNull RenderType renderType) throws IllegalArgumentException;\n++    // Paper end\n+ \n+     /**\n+      * Registers an Objective on this Scoreboard\n+@@ -44,8 +86,10 @@ public interface Scoreboard {\n+      *     characters.\n+      * @throws IllegalArgumentException if an objective by that name already\n+      *     exists\n++     * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -66,8 +110,10 @@ public interface Scoreboard {\n+      * @throws IllegalArgumentException if renderType is null\n+      * @throws IllegalArgumentException if an objective by that name already\n+      *     exists\n++     * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component, RenderType)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName, @NotNull RenderType renderType) throws IllegalArgumentException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java\n+index da01d2926cc8a2485a3349ac1ebb32cad20e287c..812b7bfb686437c97884bfdff1be25657e654daf 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Team.java\n++++ b/src/main/java/org/bukkit/scoreboard/Team.java\n+@@ -22,14 +22,95 @@ public interface Team {\n+      */\n+     @NotNull\n+     String getName() throws IllegalStateException;\n++    // Paper start\n++    /**\n++     * Gets the name displayed to entries for this team\n++     *\n++     * @return Team display name\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName() throws IllegalStateException;\n++\n++    /**\n++     * Sets the name displayed to entries for this team\n++     *\n++     * @param displayName New display name\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void displayName(@Nullable net.kyori.adventure.text.Component displayName) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the prefix prepended to the display of entries on this team.\n++     *\n++     * @return Team prefix\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component prefix() throws IllegalStateException;\n++\n++    /**\n++     * Sets the prefix prepended to the display of entries on this team.\n++     *\n++     * @param prefix New prefix\n++     * @throws IllegalArgumentException if prefix is null\n++     * @throws IllegalArgumentException if prefix is longer than 64\n++     *     characters\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void prefix(@Nullable net.kyori.adventure.text.Component prefix) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the suffix appended to the display of entries on this team.\n++     *\n++     * @return the team's current suffix\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component suffix() throws IllegalStateException;\n++\n++    /**\n++     * Sets the suffix appended to the display of entries on this team.\n++     *\n++     * @param suffix the new suffix for this team.\n++     * @throws IllegalArgumentException if suffix is null\n++     * @throws IllegalArgumentException if suffix is longer than 64\n++     *     characters\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void suffix(@Nullable net.kyori.adventure.text.Component suffix) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the color of the team.\n++     * <br>\n++     * This only sets the team outline, other occurrences of colors such as in\n++     * names are handled by prefixes / suffixes.\n++     *\n++     * @return team color, defaults to {@link ChatColor#RESET}\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.format.NamedTextColor color() throws IllegalStateException;\n++\n++    /**\n++     * Sets the color of the team.\n++     * <br>\n++     * This only sets the team outline, other occurrences of colors such as in\n++     * names are handled by prefixes / suffixes.\n++     *\n++     * @param color new color, must be non-null. Use {@link ChatColor#RESET} for\n++     * no color\n++     */\n++    void color(@Nullable net.kyori.adventure.text.format.NamedTextColor color);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4NDE0Ng=="}, "originalCommit": {"oid": "c8a00ec991bb23a4847156894674e0af22f86fca"}, "originalPosition": 1972}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg1MTkxNg==", "bodyText": "This should not be TextColor; if they support hex in the future, a new overload can be added. This is an ABI-safe change in that case (assuming we keep the existing one); the other method however can return TextColor just fine as it is from the internal represented colour, and it must (as you note) pass the test of time.", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r579851916", "createdAt": "2021-02-21T19:17:03Z", "author": {"login": "Proximyst"}, "path": "Spigot-API-Patches/0005-Adventure.patch", "diffHunk": "@@ -0,0 +1,2059 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Riley Park <riley.park@meino.net>\n+Date: Tue, 1 Dec 2020 18:37:09 -0800\n+Subject: [PATCH] Adventure\n+\n+\n+diff --git a/pom.xml b/pom.xml\n+index 30253c7c0da5c5940fab16df0f118e1b167712e8..1a201db4a668f221270e2854a2cf95631f540fb6 100644\n+--- a/pom.xml\n++++ b/pom.xml\n+@@ -49,6 +49,28 @@\n+     </pluginRepositories>\n+ \n+     <dependencies>\n++        <!-- Paper start -->\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-api</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-gson</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-legacy</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <dependency>\n++            <groupId>net.kyori</groupId>\n++            <artifactId>adventure-text-serializer-plain</artifactId>\n++            <version>4.3.0</version>\n++        </dependency>\n++        <!-- Paper end -->\n+         <dependency>\n+             <groupId>it.unimi.dsi</groupId>\n+             <artifactId>fastutil</artifactId>\n+diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+index ef58a6c00f444bd498a2d8fc4e457236f393954f..ecd149157d4fb80444f34bf5633d74bcdb63dec5 100644\n+--- a/src/main/java/co/aikar/timings/TimingsReportListener.java\n++++ b/src/main/java/co/aikar/timings/TimingsReportListener.java\n+@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+ @SuppressWarnings(\"WeakerAccess\")\n+-public class TimingsReportListener implements MessageCommandSender {\n++public class TimingsReportListener implements net.kyori.adventure.audience.ForwardingAudience, MessageCommandSender { // Paper\n+     private final List<CommandSender> senders;\n+     private final Runnable onDone;\n+     private String timingsURL;\n+@@ -74,4 +74,17 @@ public class TimingsReportListener implements MessageCommandSender {\n+             this.senders.add(Bukkit.getConsoleSender());\n+         }\n+     }\n++\n++    // Paper start\n++    @Override\n++    public void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.senders;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java\n+index 7c715fdc11ab7837552b1fe3ffd08b31cec0a63b..426b1e83226e674ee4bf3ec05ddcd3ac4376b06d 100644\n+--- a/src/main/java/org/bukkit/Bukkit.java\n++++ b/src/main/java/org/bukkit/Bukkit.java\n+@@ -278,7 +278,9 @@ public final class Bukkit {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated in favour of {@link Server#sendMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public static int broadcastMessage(@NotNull String message) {\n+         return server.broadcastMessage(message);\n+     }\n+@@ -836,6 +838,7 @@ public final class Bukkit {\n+         server.shutdown();\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Broadcasts the specified message to every user with the given\n+      * permission name.\n+@@ -845,6 +848,21 @@ public final class Bukkit {\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n+      */\n++    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {\n++        return server.broadcast(message, permission);\n++    }\n++    // Paper end\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n++     */\n++    @Deprecated // Paper\n+     public static int broadcast(@NotNull String message, @NotNull String permission) {\n+         return server.broadcast(message, permission);\n+     }\n+@@ -1044,6 +1062,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, type);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -1069,6 +1088,38 @@ public final class Bukkit {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {\n++        return server.createInventory(owner, type, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {\n+         return server.createInventory(owner, type, title);\n+     }\n+@@ -1087,6 +1138,7 @@ public final class Bukkit {\n+         return server.createInventory(owner, size);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -1099,10 +1151,30 @@ public final class Bukkit {\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n+      */\n+     @NotNull\n++    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {\n++        return server.createInventory(owner, size, title);\n++    }\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {\n+         return server.createInventory(owner, size, title);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+@@ -1110,7 +1182,20 @@ public final class Bukkit {\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n+      */\n++    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {\n++        return server.createMerchant(title);\n++    }\n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static Merchant createMerchant(@Nullable String title) {\n+         return server.createMerchant(title);\n+     }\n+@@ -1181,22 +1266,47 @@ public final class Bukkit {\n+         return server.isPrimaryThread();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull public static net.kyori.adventure.text.Component motd() {\n++        return server.motd();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public static String getMotd() {\n+         return server.getMotd();\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    public static @Nullable net.kyori.adventure.text.Component shutdownMessage() {\n++        return server.shutdownMessage();\n++    }\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public static String getShutdownMessage() {\n+         return server.getShutdownMessage();\n+     }\n+diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java\n+index fee814e01a653d2b53c56e8b566383ca44aa5346..2acdf2a6d3955923c721222b9da784f3278f6418 100644\n+--- a/src/main/java/org/bukkit/Nameable.java\n++++ b/src/main/java/org/bukkit/Nameable.java\n+@@ -4,6 +4,30 @@ import org.jetbrains.annotations.Nullable;\n+ \n+ public interface Nameable {\n+ \n++    // Paper start\n++    /**\n++     * Gets the custom name.\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @return the custom name\n++     */\n++    @Nullable net.kyori.adventure.text.Component customName();\n++\n++    /**\n++     * Sets the custom name.\n++     *\n++     * <p>This name will be used in death messages and can be sent to the client as a nameplate over the mob.</p>\n++     *\n++     * <p>Setting the name to {@code null} will clear it.</p>\n++     *\n++     * <p>This value has no effect on players, they will always use their real name.</p>\n++     *\n++     * @param customName the custom name to set\n++     */\n++    void customName(final @Nullable net.kyori.adventure.text.Component customName);\n++    // Paper end\n++\n+     /**\n+      * Gets the custom name on a mob or block. If there is no name this method\n+      * will return null.\n+diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java\n+index 22eca2a180618ed43a4ef103bebd134897d6c71a..abb7448ee8fe1152623794d3b806eef9a9e17abc 100644\n+--- a/src/main/java/org/bukkit/NamespacedKey.java\n++++ b/src/main/java/org/bukkit/NamespacedKey.java\n+@@ -18,7 +18,7 @@ import org.jetbrains.annotations.NotNull;\n+  * underscores, hyphens, and forward slashes.\n+  *\n+  */\n+-public final class NamespacedKey {\n++public final class NamespacedKey implements net.kyori.adventure.key.Key { // Paper - implement Key\n+ \n+     /**\n+      * The namespace representing all inbuilt keys.\n+@@ -139,4 +139,24 @@ public final class NamespacedKey {\n+     public static NamespacedKey minecraft(@NotNull String key) {\n+         return new NamespacedKey(MINECRAFT, key);\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public String namespace() {\n++        return this.getNamespace();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String value() {\n++        return this.getKey();\n++    }\n++\n++    @NotNull\n++    @Override\n++    public String asString() {\n++        return this.namespace + ':' + this.key;\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java\n+index a6b9e4f158583e5932bf8ca210d531857e9f5360..d9515a79dc7ed60c66960cd6c6bb4c108f206f3c 100644\n+--- a/src/main/java/org/bukkit/Server.java\n++++ b/src/main/java/org/bukkit/Server.java\n+@@ -55,7 +55,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a server implementation.\n+  */\n+-public interface Server extends PluginMessageRecipient {\n++public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Used for all administrative messages, such as an operator using a\n+@@ -229,7 +229,9 @@ public interface Server extends PluginMessageRecipient {\n+      *\n+      * @param message the message\n+      * @return the number of players\n++     * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+      */\n++    @Deprecated // Paper\n+     public int broadcastMessage(@NotNull String message);\n+ \n+     /**\n+@@ -703,8 +705,22 @@ public interface Server extends PluginMessageRecipient {\n+      * @param permission the required permission {@link Permissible\n+      *     permissibles} must have to receive the broadcast\n+      * @return number of message recipients\n++     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}\n+      */\n++    @Deprecated // Paper\n+     public int broadcast(@NotNull String message, @NotNull String permission);\n++    // Paper start\n++    /**\n++     * Broadcasts the specified message to every user with the given\n++     * permission name.\n++     *\n++     * @param message message to broadcast\n++     * @param permission the required permission {@link Permissible\n++     *     permissibles} must have to receive the broadcast\n++     * @return number of message recipients\n++     */\n++    int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);\n++    // Paper end\n+ \n+     /**\n+      * Gets the player by the given name, regardless if they are offline or\n+@@ -869,6 +885,7 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);\n+ \n++    // Paper start\n+     /**\n+      * Creates an empty inventory with the specified type and title. If the type\n+      * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n+@@ -894,6 +911,36 @@ public interface Server extends PluginMessageRecipient {\n+      * @see InventoryType#isCreatable()\n+      */\n+     @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);\n++    // Paper end\n++\n++    /**\n++     * Creates an empty inventory with the specified type and title. If the type\n++     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;\n++     * otherwise the new inventory has the normal size for its type.<br>\n++     * It should be noted that some inventory types do not support titles and\n++     * may not render with said titles on the Minecraft client.\n++     * <br>\n++     * {@link InventoryType#WORKBENCH} will not process crafting recipes if\n++     * created with this method. Use\n++     * {@link Player#openWorkbench(Location, boolean)} instead.\n++     * <br>\n++     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s\n++     * for possible enchanting results. Use\n++     * {@link Player#openEnchanting(Location, boolean)} instead.\n++     *\n++     * @param owner The holder of the inventory; can be null if there's no holder.\n++     * @param type The type of inventory to create.\n++     * @param title The title of the inventory, to be displayed when it is viewed.\n++     * @return The new inventory.\n++     * @throws IllegalArgumentException if the {@link InventoryType} cannot be\n++     * viewed.\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}\n++     *\n++     * @see InventoryType#isCreatable()\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);\n+ \n+     /**\n+@@ -908,6 +955,22 @@ public interface Server extends PluginMessageRecipient {\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n++     * specified size and title.\n++     *\n++     * @param owner the holder of the inventory, or null to indicate no holder\n++     * @param size a multiple of 9 as the size of inventory to create\n++     * @param title the title of the inventory, displayed when inventory is\n++     *     viewed\n++     * @return a new inventory\n++     * @throws IllegalArgumentException if the size is not a multiple of 9\n++     */\n++    @NotNull\n++    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;\n++    // Paper end\n++\n+     /**\n+      * Creates an empty inventory of type {@link InventoryType#CHEST} with the\n+      * specified size and title.\n+@@ -918,18 +981,32 @@ public interface Server extends PluginMessageRecipient {\n+      *     viewed\n+      * @return a new inventory\n+      * @throws IllegalArgumentException if the size is not a multiple of 9\n++     * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;\n+ \n++    // Paper start\n++    /**\n++     * Creates an empty merchant.\n++     *\n++     * @param title the title of the corresponding merchant inventory, displayed\n++     * when the merchant inventory is viewed\n++     * @return a new merchant\n++     */\n++    @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);\n++    // Paper start\n+     /**\n+      * Creates an empty merchant.\n+      *\n+      * @param title the title of the corresponding merchant inventory, displayed\n+      * when the merchant inventory is viewed\n+      * @return a new merchant\n++     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Merchant createMerchant(@Nullable String title);\n+ \n+     /**\n+@@ -986,20 +1063,41 @@ public interface Server extends PluginMessageRecipient {\n+      */\n+     boolean isPrimaryThread();\n+ \n++    // Paper start\n++    /**\n++     * Gets the message that is displayed on the server list.\n++     *\n++     * @return the server's MOTD\n++     */\n++    @NotNull net.kyori.adventure.text.Component motd();\n++    // Paper end\n++\n+     /**\n+      * Gets the message that is displayed on the server list.\n+      *\n+      * @return the servers MOTD\n++     * @deprecated in favour of {@link #motd()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getMotd();\n+ \n++    // Paper start\n++    /**\n++     * Gets the default message that is displayed when the server is stopped.\n++     *\n++     * @return the shutdown message\n++     */\n++    @Nullable net.kyori.adventure.text.Component shutdownMessage();\n++    // Paper end\n+     /**\n+      * Gets the default message that is displayed when the server is stopped.\n+      *\n+      * @return the shutdown message\n++     * @deprecated in favour of {@link #shutdownMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     String getShutdownMessage();\n+ \n+     /**\n+@@ -1368,7 +1466,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends the component to the player\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1477,9 @@ public interface Server extends PluginMessageRecipient {\n+          * Sends an array of components as a single message to the player\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java\n+index cdcbc8b05afc412017ac0e4ed0adf227d1342336..6b5dbe4ea711807a1944cfe2aae2ce415d4f2638 100644\n+--- a/src/main/java/org/bukkit/World.java\n++++ b/src/main/java/org/bukkit/World.java\n+@@ -38,7 +38,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a world, which may contain entities, chunks and blocks\n+  */\n+-public interface World extends PluginMessageRecipient, Metadatable {\n++public interface World extends PluginMessageRecipient, Metadatable, net.kyori.adventure.audience.ForwardingAudience { // Paper\n+ \n+     /**\n+      * Gets the {@link Block} at the given coordinates\n+@@ -616,6 +616,14 @@ public interface World extends PluginMessageRecipient, Metadatable {\n+     @NotNull\n+     public List<Player> getPlayers();\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {\n++        return this.getPlayers();\n++    }\n++    // Paper end\n++\n+     /**\n+      * Returns a list of entities within a bounding box centered around a\n+      * Location.\n+diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java\n+index 7e3cf00e49c66023bf46c298ef46c00e8c3c2caf..6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41 100644\n+--- a/src/main/java/org/bukkit/block/Sign.java\n++++ b/src/main/java/org/bukkit/block/Sign.java\n+@@ -7,13 +7,48 @@ import org.jetbrains.annotations.NotNull;\n+  * Represents a captured state of either a SignPost or a WallSign.\n+  */\n+ public interface Sign extends TileState, Colorable {\n++    // Paper start\n++    /**\n++     * Gets all the lines of text currently on this sign.\n++     *\n++     * @return Array of Strings containing each line of text\n++     */\n++    @NotNull\n++    public java.util.List<net.kyori.adventure.text.Component> lines();\n++\n++    /**\n++     * Gets the line of text at the specified index.\n++     * <p>\n++     * For example, getLine(0) will return the first line of text.\n++     *\n++     * @param index Line number to get the text from, starting at 0\n++     * @throws IndexOutOfBoundsException Thrown when the line does not exist\n++     * @return Text on the given line\n++     */\n++    @NotNull\n++    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;\n++\n++    /**\n++     * Sets the line of text at the specified index.\n++     * <p>\n++     * For example, setLine(0, \"Line One\") will set the first line of text to\n++     * \"Line One\".\n++     *\n++     * @param index Line number to set the text at, starting from 0\n++     * @param line New text to set at the specified index\n++     * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     */\n++    public void line(int index, @NotNull net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;\n++    // Paper end\n+ \n+     /**\n+      * Gets all the lines of text currently on this sign.\n+      *\n+      * @return Array of Strings containing each line of text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines();\n+ \n+     /**\n+@@ -24,8 +59,10 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to get the text from, starting at 0\n+      * @throws IndexOutOfBoundsException Thrown when the line does not exist\n+      * @return Text on the given line\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException;\n+ \n+     /**\n+@@ -37,7 +74,9 @@ public interface Sign extends TileState, Colorable {\n+      * @param index Line number to set the text at, starting from 0\n+      * @param line New text to set at the specified index\n+      * @throws IndexOutOfBoundsException If the index is out of the range 0..3\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java\n+index ac772bf349e0ffe9cab1df165d9460b387f2fe69..2588edf75483855e0c843834f39ca371770730b9 100644\n+--- a/src/main/java/org/bukkit/command/CommandSender.java\n++++ b/src/main/java/org/bukkit/command/CommandSender.java\n+@@ -6,12 +6,13 @@ import org.bukkit.permissions.Permissible;\n+ import org.jetbrains.annotations.NotNull;\n+ import org.jetbrains.annotations.Nullable;\n+ \n+-public interface CommandSender extends Permissible {\n++public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper\n+ \n+     /**\n+      * Sends this sender a message\n+      *\n+      * @param message Message to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String message);\n+ \n+@@ -19,6 +20,7 @@ public interface CommandSender extends Permissible {\n+      * Sends this sender multiple messages\n+      *\n+      * @param messages An array of messages to be displayed\n++     * @see #sendMessage(net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@NotNull String[] messages);\n+ \n+@@ -27,6 +29,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param message Message to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String message);\n+ \n+@@ -35,6 +38,7 @@ public interface CommandSender extends Permissible {\n+      *\n+      * @param messages An array of messages to be displayed\n+      * @param sender The sender of this message\n++     * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)\n+      */\n+     public void sendMessage(@Nullable UUID sender, @NotNull String[] messages);\n+ \n+@@ -61,7 +65,9 @@ public interface CommandSender extends Permissible {\n+          * Sends this sender a chat component.\n+          *\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -70,7 +76,9 @@ public interface CommandSender extends Permissible {\n+          * Sends an array of components as a single message to the sender.\n+          *\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -80,7 +88,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param component the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -90,7 +100,9 @@ public interface CommandSender extends Permissible {\n+          *\n+          * @param components the components to send\n+          * @param sender the sender of the message\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -99,4 +111,11 @@ public interface CommandSender extends Permissible {\n+     @NotNull\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity identity, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        this.sendMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/command/ProxiedCommandSender.java b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+index fcc34b640265f4dccb46b9f09466ab8e1d96043e..74599b4ee0518481c0e3a5f6ab2f5302837f1ae3 100644\n+--- a/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n++++ b/src/main/java/org/bukkit/command/ProxiedCommandSender.java\n+@@ -3,7 +3,7 @@ package org.bukkit.command;\n+ \n+ import org.jetbrains.annotations.NotNull;\n+ \n+-public interface ProxiedCommandSender extends CommandSender {\n++public interface ProxiedCommandSender extends CommandSender, net.kyori.adventure.audience.ForwardingAudience.Single { // Paper\n+ \n+     /**\n+      * Returns the CommandSender which triggered this proxied command\n+@@ -21,4 +21,16 @@ public interface ProxiedCommandSender extends CommandSender {\n+     @NotNull\n+     CommandSender getCallee();\n+ \n++    // Paper start\n++    @Override\n++    default void sendMessage(final @NotNull net.kyori.adventure.identity.Identity source, final @NotNull net.kyori.adventure.text.Component message, final @NotNull net.kyori.adventure.audience.MessageType type) {\n++        net.kyori.adventure.audience.ForwardingAudience.Single.super.sendMessage(source, message, type);\n++    }\n++\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.audience.Audience audience() {\n++        return this.getCaller();\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+index b833ef63fbe01271ceb2bd83a9eb4a84c9912761..1a093a30adf18572693032b78f3d2683e87d2e21 100644\n+--- a/src/main/java/org/bukkit/enchantments/Enchantment.java\n++++ b/src/main/java/org/bukkit/enchantments/Enchantment.java\n+@@ -294,6 +294,9 @@ public abstract class Enchantment implements Keyed {\n+      * @return True if the enchantment may be applied, otherwise False\n+      */\n+     public abstract boolean canEnchantItem(@NotNull ItemStack item);\n++    // Paper start\n++    public abstract @NotNull net.kyori.adventure.text.Component displayName(int level);\n++    // Paper end\n+ \n+     @Override\n+     public boolean equals(Object obj) {\n+diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+index 9566e4306ada5e82dede0f002aa06da12c44996b..4d5f0837bd0e02a30c943d8969fb6b13452322e0 100644\n+--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n++++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java\n+@@ -63,4 +63,11 @@ public class EnchantmentWrapper extends Enchantment {\n+     public boolean conflictsWith(@NotNull Enchantment other) {\n+         return getEnchantment().conflictsWith(other);\n+     }\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.Component displayName(int level) {\n++        return getEnchantment().displayName(level);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java\n+index 344c14a5ed86e9ebe401bfb5ba3aedc0c0ed0b04..54597268cfbe03c5e521476d3d26e612457cf381 100644\n+--- a/src/main/java/org/bukkit/entity/Entity.java\n++++ b/src/main/java/org/bukkit/entity/Entity.java\n+@@ -25,7 +25,7 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a base entity in the world\n+  */\n+-public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder {\n++public interface Entity extends Metadatable, CommandSender, Nameable, PersistentDataHolder, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowEntity> { // Paper\n+ \n+     /**\n+      * Gets the entity's current position\n+@@ -602,4 +602,12 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent\n+     @Override\n+     Spigot spigot();\n+     // Spigot end\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(op.apply(net.kyori.adventure.text.event.HoverEvent.ShowEntity.of(this.getType().getKey(), this.getUniqueId(), null)));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java\n+index f22b21ee12496452f7b2125c131f56ecc74d439a..447de8f7c1d871ef5fb1a06bace451e1de06d972 100644\n+--- a/src/main/java/org/bukkit/entity/Player.java\n++++ b/src/main/java/org/bukkit/entity/Player.java\n+@@ -30,7 +30,28 @@ import org.jetbrains.annotations.Nullable;\n+ /**\n+  * Represents a player, connected or not\n+  */\n+-public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient {\n++public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, net.kyori.adventure.identity.Identified { // Paper\n++\n++    // Paper start\n++    @Override\n++    default @NotNull net.kyori.adventure.identity.Identity identity() {\n++        return net.kyori.adventure.identity.Identity.identity(this.getUniqueId());\n++    }\n++\n++    /**\n++     * Gets the \"friendly\" name to display of this player.\n++     *\n++     * @return the display name\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the \"friendly\" name to display of this player.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n+ \n+     /**\n+      * Gets the \"friendly\" name to display of this player. This may include\n+@@ -40,7 +61,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @return the friendly name\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     public String getDisplayName();\n+ \n+@@ -52,15 +75,51 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * places defined by plugins.\n+      *\n+      * @param name The new display name.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setDisplayName(@Nullable String name);\n+ \n++    // Paper start\n++    /**\n++     * Sets the name that is shown on the in-game player list.\n++     * <p>\n++     * If the value is null, the name will be identical to {@link #getName()}.\n++     *\n++     * @param name new player list name\n++     */\n++    void playerListName(@Nullable net.kyori.adventure.text.Component name);\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListName();\n++\n++    /**\n++     * Gets the currently displayed player list header for this player.\n++     *\n++     * @return player list header or null\n++     * @deprecated in favour of {@link #playerListName()}\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListHeader();\n++\n++    /**\n++     * Gets the currently displayed player list footer for this player.\n++     *\n++     * @return player list header or null\n++     */\n++    @Nullable net.kyori.adventure.text.Component playerListFooter();\n++    // Paper end\n+     /**\n+      * Gets the name that is shown on the player list.\n+      *\n+      * @return the player list name\n++     * @deprecated in favour of {@link #playerListName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getPlayerListName();\n+ \n+     /**\n+@@ -69,14 +128,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * If the value is null, the name will be identical to {@link #getName()}.\n+      *\n+      * @param name new player list name\n++     * @deprecated in favour of {@link #playerListName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListName(@Nullable String name);\n+ \n+     /**\n+      * Gets the currently displayed player list header for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListHeader()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListHeader();\n+ \n+@@ -84,7 +147,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Gets the currently displayed player list footer for this player.\n+      *\n+      * @return player list header or null\n++     * @deprecated in favour of {@link #playerListFooter()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     public String getPlayerListFooter();\n+ \n+@@ -92,14 +157,18 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Sets the currently displayed player list header for this player.\n+      *\n+      * @param header player list header, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeader(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeader(@Nullable String header);\n+ \n+     /**\n+      * Sets the currently displayed player list footer for this player.\n+      *\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListFooter(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListFooter(@Nullable String footer);\n+ \n+     /**\n+@@ -108,7 +177,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      *\n+      * @param header player list header, null for empty\n+      * @param footer player list footer, null for empty\n++     * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setPlayerListHeaderFooter(@Nullable String header, @Nullable String footer);\n+ \n+     /**\n+@@ -146,9 +217,20 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * Kicks player with custom kick message.\n+      *\n+      * @param message kick message\n++     * @deprecated in favour of {@link #kick(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void kickPlayer(@Nullable String message);\n+ \n++    // Paper start\n++    /**\n++     * Kicks player with custom kick message.\n++     *\n++     * @param message kick message\n++     */\n++    void kick(final @Nullable net.kyori.adventure.text.Component message);\n++    // Paper end\n++\n+     /**\n+      * Says a message (or runs a command).\n+      *\n+@@ -437,6 +519,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+     @Deprecated\n+     public boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, @NotNull byte[] data);\n+ \n++    // Paper start\n+     /**\n+      * Send a sign change. This fakes a sign change packet for a user at\n+      * a certain location. This will not actually change the world in any way.\n+@@ -452,6 +535,43 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n+      */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines) throws IllegalArgumentException;\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @param  dyeColor the color of the sign\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if dyeColor is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     */\n++    void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n++    // Paper end\n++    /**\n++     * Send a sign change. This fakes a sign change packet for a user at\n++     * a certain location. This will not actually change the world in any way.\n++     * This method will use a sign at the location's block or a faked sign\n++     * sent via\n++     * {@link #sendBlockChange(org.bukkit.Location, org.bukkit.Material, byte)}.\n++     * <p>\n++     * If the client does not have a sign at the given location it will\n++     * display an error message to the user.\n++     *\n++     * @param loc the location of the sign\n++     * @param lines the new text on the sign or null to clear it\n++     * @throws IllegalArgumentException if location is null\n++     * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List)}\n++     */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines) throws IllegalArgumentException;\n+ \n+ \n+@@ -471,7 +591,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * @throws IllegalArgumentException if location is null\n+      * @throws IllegalArgumentException if dyeColor is null\n+      * @throws IllegalArgumentException if lines is non-null and has a length less than 4\n++     * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List, org.bukkit.DyeColor)}\n+      */\n++    @Deprecated // Paper\n+     public void sendSignChange(@NotNull Location loc, @Nullable String[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -1258,6 +1380,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public int getClientViewDistance();\n+ \n++    // Paper start\n++    /**\n++     * Gets the player's current locale.\n++     *\n++     * @return the player's locale\n++     */\n++    @NotNull java.util.Locale locale();\n++    // Paper end\n+     /**\n+      * Gets the player's current locale.\n+      *\n+@@ -1268,8 +1398,10 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      * they wish.\n+      *\n+      * @return the player's locale\n++     * @deprecated in favour of {@link #locale()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLocale();\n+ \n+     /**\n+@@ -1287,6 +1419,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+      */\n+     public void openBook(@NotNull ItemStack book);\n+ \n++    // Paper start\n++    @NotNull\n++    @Override\n++    default net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowEntity> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowEntity> op) {\n++        return net.kyori.adventure.text.event.HoverEvent.showEntity(this.getType().getKey(), this.getUniqueId(), this.displayName());\n++    }\n++    // Paper end\n++\n+     // Spigot start\n+     public class Spigot extends Entity.Spigot {\n+ \n+@@ -1341,11 +1481,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+ \n++        @Deprecated // Paper\n+         @Override\n+         public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+@@ -1356,7 +1498,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1366,7 +1510,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          *\n+          * @param position the screen position\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1377,7 +1523,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param component the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -1388,7 +1536,9 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM\n+          * @param position the screen position\n+          * @param sender the sender of the message\n+          * @param components the components to send\n++         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}\n+          */\n++        @Deprecated // Paper\n+         public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+ \n+diff --git a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+index 63c80b4ee1f7adc8a9efc3b607993104b1991f90..7adbc6f87771c21d374e610fcb21a2442f2d8031 100644\n+--- a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n++++ b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java\n+@@ -25,6 +25,16 @@ public interface CommandMinecart extends Minecart {\n+      *     activated.\n+      */\n+     public void setCommand(@Nullable String command);\n++    // Paper start\n++    /**\n++     * Sets the name of this CommandMinecart.  The name is used with commands\n++     * that this CommandMinecart executes.  Setting the name to null is the\n++     * same as setting it to \"@\".\n++     *\n++     * @param name New name for this CommandMinecart.\n++     */\n++    void name(@Nullable net.kyori.adventure.text.Component name);\n++    // Paper end\n+ \n+     /**\n+      * Sets the name of this CommandMinecart.  The name is used with commands\n+@@ -32,7 +42,9 @@ public interface CommandMinecart extends Minecart {\n+      * same as setting it to \"@\".\n+      *\n+      * @param name New name for this CommandMinecart.\n++     * @deprecated in favour of {@link #name(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setName(@Nullable String name);\n+ \n+ }\n+diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+index f1e9bc9bc797b7216336d3470e3c696a06f2b21a..090d22bd30f7947103771aaaf09a2398970ac337 100644\n+--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java\n++++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java\n+@@ -136,6 +136,18 @@ public enum InventoryType {\n+     private final String title;\n+     private final boolean isCreatable;\n+ \n++    // Paper start\n++    private final net.kyori.adventure.text.Component defaultTitleComponent;\n++\n++    /**\n++     * Gets the inventory's default title.\n++     *\n++     * @return the inventory's default title\n++     */\n++    public @NotNull net.kyori.adventure.text.Component defaultTitle() {\n++        return defaultTitleComponent;\n++    }\n++    // Paper end\n+     private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {\n+         this(defaultSize, defaultTitle, true);\n+     }\n+@@ -144,6 +156,7 @@ public enum InventoryType {\n+         size = defaultSize;\n+         title = defaultTitle;\n+         this.isCreatable = isCreatable;\n++        this.defaultTitleComponent = net.kyori.adventure.text.Component.text(defaultTitle); // Paper - Adventure\n+     }\n+ \n+     public int getDefaultSize() {\n+@@ -151,6 +164,7 @@ public enum InventoryType {\n+     }\n+ \n+     @NotNull\n++    @Deprecated // Paper\n+     public String getDefaultTitle() {\n+         return title;\n+     }\n+diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java\n+index 14346d83bc99581b18e53d19af03708c0bf22cf7..b6cbf23dd40fb1cb1fec3c7d6918438ebf5bcc2e 100644\n+--- a/src/main/java/org/bukkit/inventory/InventoryView.java\n++++ b/src/main/java/org/bukkit/inventory/InventoryView.java\n+@@ -446,11 +446,23 @@ public abstract class InventoryView {\n+         return getPlayer().setWindowProperty(prop, value);\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Get the title of this inventory window.\n+      *\n+      * @return The title.\n+      */\n+     @NotNull\n++    public abstract net.kyori.adventure.text.Component title();\n++    // Paper end\n++\n++    /**\n++     * Get the title of this inventory window.\n++     *\n++     * @return The title.\n++     * @deprecated in favour of {@link #title()}\n++     */\n++    @Deprecated // Paper\n++    @NotNull\n+     public abstract String getTitle();\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+index 4ff149fd98895dd8ba45939a37c223b1f8d7281f..3dba4c361993e143e511b4f108ac0b444a84d964 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemFactory.java\n++++ b/src/main/java/org/bukkit/inventory/ItemFactory.java\n+@@ -141,4 +141,15 @@ public interface ItemFactory {\n+     @Deprecated\n+     @NotNull\n+     Material updateMaterial(@NotNull final ItemMeta meta, @NotNull final Material material) throws IllegalArgumentException;\n++\n++    // Paper start\n++    /**\n++     * Creates a hover event for the given item.\n++     *\n++     * @param item The item\n++     * @return A hover event\n++     */\n++    @NotNull\n++    net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull ItemStack item, final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op);\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java\n+index f70a6a22b85ff0da76e67e9b223ad4e0b020b5c4..4b20b557eaa958cf1ad1baf8d6cc17f38b180ff1 100644\n+--- a/src/main/java/org/bukkit/inventory/ItemStack.java\n++++ b/src/main/java/org/bukkit/inventory/ItemStack.java\n+@@ -22,7 +22,7 @@ import org.jetbrains.annotations.Nullable;\n+  * use this class to encapsulate Materials for which {@link Material#isItem()}\n+  * returns false.</b>\n+  */\n+-public class ItemStack implements Cloneable, ConfigurationSerializable {\n++public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem> { // Paper\n+     private Material type = Material.AIR;\n+     private int amount = 0;\n+     private MaterialData data = null;\n+@@ -595,4 +595,12 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {\n+ \n+         return true;\n+     }\n++\n++    // Paper start\n++    @NotNull\n++    @Override\n++    public net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {\n++        return org.bukkit.Bukkit.getServer().getItemFactory().asHoverEvent(this, op);\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+index 94852d50e88d0594b84b581cd627174043629995..e143081922c2027e8ca1db6f1e7eb5b4d786ab41 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java\n+@@ -119,6 +119,63 @@ public interface BookMeta extends ItemMeta {\n+      */\n+     boolean hasPages();\n+ \n++    // Paper start\n++    /**\n++     * Gets the specified page in the book. The page must exist.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to get, in range [1, getPageCount()]\n++     * @return the page from the book\n++     */\n++    @NotNull net.kyori.adventure.text.Component page(int page);\n++\n++    /**\n++     * Sets the specified page in the book. Pages of the book must be\n++     * contiguous.\n++     * <p>\n++     * The data can be up to 256 characters in length, additional characters\n++     * are truncated.\n++     * <p>\n++     * Pages are 1-indexed.\n++     *\n++     * @param page the page number to set, in range [1, getPageCount()]\n++     * @param data the data to set for that page\n++     */\n++    void page(int page, @NotNull net.kyori.adventure.text.Component data);\n++\n++    /**\n++     * Gets all the pages in the book.\n++     *\n++     * @return list of all the pages in the book\n++     */\n++    @NotNull List<net.kyori.adventure.text.Component> pages();\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 100 pages with 256 characters per page.\n++     *\n++     * @param pages A list of pages to set the book to use\n++     */\n++    void pages(@NotNull List<net.kyori.adventure.text.Component> pages);\n++\n++    /**\n++     * Clears the existing book pages, and sets the book to use the provided\n++     * pages. Maximum 50 pages with 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void pages(@NotNull net.kyori.adventure.text.Component... pages);\n++\n++    /**\n++     * Adds new pages to the end of the book. Up to a maximum of 50 pages with\n++     * 256 characters per page.\n++     *\n++     * @param pages A list of strings, each being a page\n++     */\n++    void addPages(@NotNull net.kyori.adventure.text.Component... pages);\n++    // Paper end\n++\n+     /**\n+      * Gets the specified page in the book. The given page must exist.\n+      * <p>\n+@@ -126,8 +183,10 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to get, in range [1, getPageCount()]\n+      * @return the page from the book\n++     * @deprecated in favour of {@link #page(int)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getPage(int page);\n+ \n+     /**\n+@@ -141,15 +200,19 @@ public interface BookMeta extends ItemMeta {\n+      *\n+      * @param page the page number to set, in range [1, getPageCount()]\n+      * @param data the data to set for that page\n++     * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setPage(int page, @NotNull String data);\n+ \n+     /**\n+      * Gets all the pages in the book.\n+      *\n+      * @return list of all the pages in the book\n++     * @deprecated in favour of {@link #pages()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     List<String> getPages();\n+ \n+     /**\n+@@ -157,7 +220,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 100 pages with 256 characters per page.\n+      *\n+      * @param pages A list of pages to set the book to use\n++     * @deprecated in favour of {@link #pages(List)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull List<String> pages);\n+ \n+     /**\n+@@ -165,7 +230,9 @@ public interface BookMeta extends ItemMeta {\n+      * pages. Maximum 50 pages with 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void setPages(@NotNull String... pages);\n+ \n+     /**\n+@@ -173,7 +240,9 @@ public interface BookMeta extends ItemMeta {\n+      * 256 characters per page.\n+      *\n+      * @param pages A list of strings, each being a page\n++     * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+      */\n++    @Deprecated // Paper\n+     void addPage(@NotNull String... pages);\n+ \n+     /**\n+@@ -195,8 +264,10 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to get\n+          * @return the page from the book\n++         * @deprecated in favour of {@link #page(int)}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public BaseComponent[] getPage(int page) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -210,7 +281,9 @@ public interface BookMeta extends ItemMeta {\n+          *\n+          * @param page the page number to set\n+          * @param data the data to set for that page\n++         * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}\n+          */\n++        @Deprecated // Paper\n+         public void setPage(int page, @Nullable BaseComponent... data) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -219,8 +292,10 @@ public interface BookMeta extends ItemMeta {\n+          * Gets all the pages in the book.\n+          *\n+          * @return list of all the pages in the book\n++         * @deprecated in favour of {@link #pages()}\n+          */\n+         @NotNull\n++        @Deprecated // Paper\n+         public List<BaseComponent[]> getPages() {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -230,7 +305,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of pages to set the book to use\n++         * @deprecated in favour of {@link #pages(java.util.List)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull List<BaseComponent[]> pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -240,7 +317,9 @@ public interface BookMeta extends ItemMeta {\n+          * pages. Maximum 50 pages with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void setPages(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+@@ -250,7 +329,9 @@ public interface BookMeta extends ItemMeta {\n+          * with 256 characters per page.\n+          *\n+          * @param pages A list of component arrays, each being a page\n++         * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}\n+          */\n++        @Deprecated // Paper\n+         public void addPage(@NotNull BaseComponent[]... pages) {\n+             throw new UnsupportedOperationException(\"Not supported yet.\");\n+         }\n+diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+index f2e9f2753ec92aa4a3e3f06ca6053bd70b9091d7..1c362636c56db0e6c118171ba367c43c4f7cff33 100644\n+--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n++++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java\n+@@ -31,6 +31,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasDisplayName();\n+ \n++    // Paper start\n++    /**\n++     * Gets the display name.\n++     *\n++     * <p>Plugins should check that {@link #hasDisplayName()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable net.kyori.adventure.text.Component displayName();\n++\n++    /**\n++     * Sets the display name.\n++     *\n++     * @param displayName the display name to set\n++     */\n++    void displayName(final @Nullable net.kyori.adventure.text.Component displayName);\n++    // Paper end\n++\n+     /**\n+      * Gets the display name that is set.\n+      * <p>\n+@@ -38,7 +56,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * before calling this method.\n+      *\n+      * @return the display name that is set\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n++    @Deprecated // Paper\n+     @NotNull\n+     String getDisplayName();\n+ \n+@@ -46,7 +66,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Sets the display name.\n+      *\n+      * @param name the name to set\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setDisplayName(@Nullable String name);\n+ \n+     /**\n+@@ -81,6 +103,24 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      */\n+     boolean hasLore();\n+ \n++    // Paper start\n++    /**\n++     * Gets the lore.\n++     *\n++     * <p>Plugins should check that {@link #hasLore()} returns <code>true</code> before calling this method.</p>\n++     *\n++     * @return the display name\n++     */\n++    @Nullable List<net.kyori.adventure.text.Component> lore();\n++\n++    /**\n++     * Sets the lore.\n++     *\n++     * @param lore the lore to set\n++     */\n++    void lore(final @Nullable List<net.kyori.adventure.text.Component> lore);\n++    // Paper end\n++\n+     /**\n+      * Gets the lore that is set.\n+      * <p>\n+@@ -88,7 +128,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * calling this method.\n+      *\n+      * @return a list of lore that is set\n++     * @deprecated in favour of {@link #lore()}\n+      */\n++    @Deprecated // Paper\n+     @Nullable\n+     List<String> getLore();\n+ \n+@@ -97,7 +139,9 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste\n+      * Removes lore when given null.\n+      *\n+      * @param lore the lore that will be set\n++     * @deprecated in favour of {@link #lore(List)}\n+      */\n++    @Deprecated // Paper\n+     void setLore(@Nullable List<String> lore);\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java\n+index 83354b2a38b6261b172b91c1008dcf3313cc4a8f..1052d5f0de6b1dbd261cd05bb6dd0714119ff539 100644\n+--- a/src/main/java/org/bukkit/map/MapCursor.java\n++++ b/src/main/java/org/bukkit/map/MapCursor.java\n+@@ -10,7 +10,7 @@ public final class MapCursor {\n+     private byte x, y;\n+     private byte direction, type;\n+     private boolean visible;\n+-    private String caption;\n++    private net.kyori.adventure.text.Component caption; // Paper\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -24,7 +24,7 @@ public final class MapCursor {\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -37,7 +37,7 @@ public final class MapCursor {\n+      * @param visible Whether the cursor is visible by default.\n+      */\n+     public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible) {\n+-        this(x, y, direction, type, visible, null);\n++        this(x, y, direction, type, visible, (String) null); // Paper\n+     }\n+ \n+     /**\n+@@ -49,7 +49,7 @@ public final class MapCursor {\n+      * @param type The type (color/style) of the map cursor.\n+      * @param visible Whether the cursor is visible by default.\n+      * @param caption cursor caption\n+-     * @deprecated Magic value\n++     * @deprecated Magic value. Use {@link #MapCursor(byte, byte, byte, byte, boolean, net.kyori.adventure.text.Component)}\n+      */\n+     @Deprecated\n+     public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+@@ -58,8 +58,40 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setRawType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n++    }\n++    // Paper start\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        this.x = x; this.y = y; this.visible = visible; this.caption = caption;\n++        setDirection(direction);\n++        setRawType(type);\n++    }\n++    /**\n++     * Initialize the map cursor.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible by default.\n++     * @param caption cursor caption\n++     */\n++    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++\n+     }\n++    // Paper end\n+ \n+     /**\n+      * Initialize the map cursor.\n+@@ -77,7 +109,7 @@ public final class MapCursor {\n+         setDirection(direction);\n+         setType(type);\n+         this.visible = visible;\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+@@ -200,23 +232,45 @@ public final class MapCursor {\n+         this.visible = visible;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets the caption on this cursor.\n++     *\n++     * @return caption\n++     */\n++    public @Nullable net.kyori.adventure.text.Component caption() {\n++        return this.caption;\n++    }\n++    /**\n++     * Sets the caption on this cursor.\n++     *\n++     * @param caption new caption\n++     */\n++    public void caption(@Nullable net.kyori.adventure.text.Component caption) {\n++        this.caption = caption;\n++    }\n++    // Paper end\n+     /**\n+      * Gets the caption on this cursor.\n+      *\n+      * @return caption\n++     * @deprecated in favour of {@link #caption()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getCaption() {\n+-        return caption;\n++        return this.caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.caption); // Paper\n+     }\n+ \n+     /**\n+      * Sets the caption on this cursor.\n+      *\n+      * @param caption new caption\n++     * @deprecated in favour of {@link #caption(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setCaption(@Nullable String caption) {\n+-        this.caption = caption;\n++        this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+index 4dba721aefe4fc6699b3b4bfa7ecb0b19c2a2a1a..01dec2c877df58c9dc22445e8b1f9ce2e53066da 100644\n+--- a/src/main/java/org/bukkit/map/MapCursorCollection.java\n++++ b/src/main/java/org/bukkit/map/MapCursorCollection.java\n+@@ -117,4 +117,22 @@ public final class MapCursorCollection {\n+     public MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable String caption) {\n+         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n+     }\n++    // Paper start\n++    /**\n++     * Add a cursor to the collection.\n++     *\n++     * @param x The x coordinate, from -128 to 127.\n++     * @param y The y coordinate, from -128 to 127.\n++     * @param direction The facing of the cursor, from 0 to 15.\n++     * @param type The type (color/style) of the map cursor.\n++     * @param visible Whether the cursor is visible.\n++     * @param caption banner caption\n++     * @return The newly added MapCursor.\n++     * @deprecated Magic value\n++     */\n++    @Deprecated\n++    public @NotNull MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {\n++        return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));\n++    }\n++    // Paper end\n+ }\n+diff --git a/src/main/java/org/bukkit/scoreboard/Objective.java b/src/main/java/org/bukkit/scoreboard/Objective.java\n+index f5cbf6df32ef169cf0f2266f7c6e9c4f771ccb7d..58bddb11fd534e7c33a4ffd7b72b055ba92c767a 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Objective.java\n++++ b/src/main/java/org/bukkit/scoreboard/Objective.java\n+@@ -19,14 +19,35 @@ public interface Objective {\n+      */\n+     @NotNull\n+     String getName() throws IllegalStateException;\n++    // Paper start\n++    /**\n++     * Gets the name displayed to players for this objective\n++     *\n++     * @return this objective's display name\n++     * @throws IllegalStateException if this objective has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName() throws IllegalStateException;\n++    /**\n++     * Sets the name displayed to players for this objective.\n++     *\n++     * @param displayName Display name to set\n++     * @throws IllegalStateException if this objective has been unregistered\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     */\n++    void displayName(@Nullable net.kyori.adventure.text.Component displayName) throws IllegalStateException, IllegalArgumentException;\n++    // Paper end\n+ \n+     /**\n+      * Gets the name displayed to players for this objective\n+      *\n+      * @return this objective's display name\n+      * @throws IllegalStateException if this objective has been unregistered\n++     * @deprecated in favour of {@link #displayName()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     String getDisplayName() throws IllegalStateException;\n+ \n+     /**\n+@@ -37,7 +58,9 @@ public interface Objective {\n+      * @throws IllegalArgumentException if displayName is null\n+      * @throws IllegalArgumentException if displayName is longer than 128\n+      *     characters.\n++     * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     void setDisplayName(@NotNull String displayName) throws IllegalStateException, IllegalArgumentException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/scoreboard/Scoreboard.java b/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n+index 4bfaaea78c9b6aa5d392629aa943d26dbe6a7d4a..f09ff32cc3ffc16af379a378b1948991435393e8 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n++++ b/src/main/java/org/bukkit/scoreboard/Scoreboard.java\n+@@ -27,6 +27,48 @@ public interface Scoreboard {\n+     @Deprecated\n+     @NotNull\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria) throws IllegalArgumentException;\n++    // Paper start\n++    /**\n++     * Registers an Objective on this Scoreboard\n++     *\n++     * @param name Name of the Objective\n++     * @param criteria Criteria for the Objective\n++     * @param displayName Name displayed to players for the Objective.\n++     * @return The registered Objective\n++     * @throws IllegalArgumentException if name is null\n++     * @throws IllegalArgumentException if name is longer than 16\n++     *     characters.\n++     * @throws IllegalArgumentException if criteria is null\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalArgumentException if an objective by that name already\n++     *     exists\n++     */\n++    @NotNull\n++    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @Nullable net.kyori.adventure.text.Component displayName) throws IllegalArgumentException;\n++    /**\n++     * Registers an Objective on this Scoreboard\n++     *\n++     * @param name Name of the Objective\n++     * @param criteria Criteria for the Objective\n++     * @param displayName Name displayed to players for the Objective.\n++     * @param renderType Manner of rendering the Objective\n++     * @return The registered Objective\n++     * @throws IllegalArgumentException if name is null\n++     * @throws IllegalArgumentException if name is longer than 16\n++     *     characters.\n++     * @throws IllegalArgumentException if criteria is null\n++     * @throws IllegalArgumentException if displayName is null\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalArgumentException if renderType is null\n++     * @throws IllegalArgumentException if an objective by that name already\n++     *     exists\n++     */\n++    @NotNull\n++    Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @Nullable net.kyori.adventure.text.Component displayName, @NotNull RenderType renderType) throws IllegalArgumentException;\n++    // Paper end\n+ \n+     /**\n+      * Registers an Objective on this Scoreboard\n+@@ -44,8 +86,10 @@ public interface Scoreboard {\n+      *     characters.\n+      * @throws IllegalArgumentException if an objective by that name already\n+      *     exists\n++     * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName) throws IllegalArgumentException;\n+ \n+     /**\n+@@ -66,8 +110,10 @@ public interface Scoreboard {\n+      * @throws IllegalArgumentException if renderType is null\n+      * @throws IllegalArgumentException if an objective by that name already\n+      *     exists\n++     * @deprecated in favour of {@link #registerNewObjective(String, String, net.kyori.adventure.text.Component, RenderType)}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     Objective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName, @NotNull RenderType renderType) throws IllegalArgumentException;\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java\n+index da01d2926cc8a2485a3349ac1ebb32cad20e287c..812b7bfb686437c97884bfdff1be25657e654daf 100644\n+--- a/src/main/java/org/bukkit/scoreboard/Team.java\n++++ b/src/main/java/org/bukkit/scoreboard/Team.java\n+@@ -22,14 +22,95 @@ public interface Team {\n+      */\n+     @NotNull\n+     String getName() throws IllegalStateException;\n++    // Paper start\n++    /**\n++     * Gets the name displayed to entries for this team\n++     *\n++     * @return Team display name\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component displayName() throws IllegalStateException;\n++\n++    /**\n++     * Sets the name displayed to entries for this team\n++     *\n++     * @param displayName New display name\n++     * @throws IllegalArgumentException if displayName is longer than 128\n++     *     characters.\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void displayName(@Nullable net.kyori.adventure.text.Component displayName) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the prefix prepended to the display of entries on this team.\n++     *\n++     * @return Team prefix\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component prefix() throws IllegalStateException;\n++\n++    /**\n++     * Sets the prefix prepended to the display of entries on this team.\n++     *\n++     * @param prefix New prefix\n++     * @throws IllegalArgumentException if prefix is null\n++     * @throws IllegalArgumentException if prefix is longer than 64\n++     *     characters\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void prefix(@Nullable net.kyori.adventure.text.Component prefix) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the suffix appended to the display of entries on this team.\n++     *\n++     * @return the team's current suffix\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.Component suffix() throws IllegalStateException;\n++\n++    /**\n++     * Sets the suffix appended to the display of entries on this team.\n++     *\n++     * @param suffix the new suffix for this team.\n++     * @throws IllegalArgumentException if suffix is null\n++     * @throws IllegalArgumentException if suffix is longer than 64\n++     *     characters\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    void suffix(@Nullable net.kyori.adventure.text.Component suffix) throws IllegalStateException, IllegalArgumentException;\n++\n++    /**\n++     * Gets the color of the team.\n++     * <br>\n++     * This only sets the team outline, other occurrences of colors such as in\n++     * names are handled by prefixes / suffixes.\n++     *\n++     * @return team color, defaults to {@link ChatColor#RESET}\n++     * @throws IllegalStateException if this team has been unregistered\n++     */\n++    @NotNull net.kyori.adventure.text.format.NamedTextColor color() throws IllegalStateException;\n++\n++    /**\n++     * Sets the color of the team.\n++     * <br>\n++     * This only sets the team outline, other occurrences of colors such as in\n++     * names are handled by prefixes / suffixes.\n++     *\n++     * @param color new color, must be non-null. Use {@link ChatColor#RESET} for\n++     * no color\n++     */\n++    void color(@Nullable net.kyori.adventure.text.format.NamedTextColor color);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4NDE0Ng=="}, "originalCommit": {"oid": "c8a00ec991bb23a4847156894674e0af22f86fca"}, "originalPosition": 1972}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NTQxOTg4OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQxNjo0NjoxM1rOINRPhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxOTo1NToyN1rOINZMkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4NDkwMw==", "bodyText": "All of these on the spot conversions are fine for an MVP, but from my experience running PGM with very hot rendering code this will affect server performance by a lot.\nI suspect either Paper or Adventure will need to have a custom TextComponent that stores the legacy formatting in a field so de/serialization is O(1).", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550784903", "createdAt": "2021-01-01T16:46:13Z", "author": {"login": "Electroid"}, "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "diffHunk": "@@ -0,0 +1,1062 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Jake Potrebic <jake.m.potrebic@gmail.com>\n+Date: Sat, 5 Dec 2020 11:21:57 -0800\n+Subject: [PATCH] Adventure Events\n+\n+\n+diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+index 7190db11eff7d48df8a99f405a9dbaefdfa76e3d..1268066e30ddb0cd3792ea4b3de894eb04196669 100644\n+--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n++++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+@@ -16,12 +16,25 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+     private boolean cancel = false;\n+     private final Player player;\n+-    private final String[] lines;\n++    // Paper start\n++    private final java.util.List<net.kyori.adventure.text.Component> adventure$lines;\n+ \n++    public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player player, @NotNull final java.util.List<net.kyori.adventure.text.Component> adventure$lines) {\n++        super(theBlock);\n++        this.player = player;\n++        this.adventure$lines = adventure$lines;\n++    }\n++\n++    @Deprecated // Paper end\n+     public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player thePlayer, @NotNull final String[] theLines) {\n+         super(theBlock);\n+         this.player = thePlayer;\n+-        this.lines = theLines;\n++        // Paper start\n++        this.adventure$lines = new java.util.ArrayList<>();\n++        for (String theLine : theLines) {\n++            this.adventure$lines.add(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(theLine));\n++        }\n++        // Paper end\n+     }\n+ \n+     /**\n+@@ -34,14 +47,52 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+         return player;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets all of the lines of text from the sign involved in this event.\n++     *\n++     * @return the String array for the sign's lines new text\n++     */\n++    public @NotNull java.util.List<net.kyori.adventure.text.Component> lines() {\n++        return this.adventure$lines;\n++    }\n++\n++    /**\n++     * Gets a single line of text from the sign involved in this event.\n++     *\n++     * @param index index of the line to get\n++     * @return the String containing the line of text associated with the\n++     *     provided index\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public @Nullable net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException {\n++        return this.adventure$lines.get(index);\n++    }\n++\n++    /**\n++     * Sets a single line for the sign involved in this event\n++     *\n++     * @param index index of the line to set\n++     * @param line text to set\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public void line(int index, @Nullable net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {\n++        this.adventure$lines.set(index, line);\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets all of the lines of text from the sign involved in this event.\n+      *\n+      * @return the String array for the sign's lines new text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines() {\n+-        return lines;\n++        return adventure$lines.stream().map(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()::serialize).toArray(String[]::new); // Paper\n+     }\n+ \n+     /**\n+@@ -52,10 +103,12 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      *     provided index\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException {\n+-        return lines[index];\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.adventure$lines.get(index)); // Paper\n+     }\n+ \n+     /**\n+@@ -65,9 +118,11 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      * @param line text to set\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @Nullable String line) throws IndexOutOfBoundsException {\n+-        lines[index] = line;\n++        adventure$lines.set(index, line != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line) : null); // Paper\n+     }\n+ \n+     @Override\n+diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+index 07a52441a5cdd7e428a14b286d7cb5210e3efa97..46fcabf9e48907462f785a2e7ccd9fda8ece8206 100644\n+--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n++++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+@@ -11,26 +11,46 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerDeathEvent extends EntityDeathEvent {\n+     private int newExp = 0;\n+-    private String deathMessage = \"\";\n++    private net.kyori.adventure.text.Component deathMessage; // Paper\n+     private int newLevel = 0;\n+     private int newTotalExp = 0;\n+     private boolean keepLevel = false;\n+     private boolean keepInventory = false;\n++    // Paper start\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, 0, deathMessage);\n++    }\n++\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n++    }\n+ \n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        super(player, drops, droppedExp);\n++        this.newExp = newExp;\n++        this.newTotalExp = newTotalExp;\n++        this.newLevel = newLevel;\n++        this.deathMessage = deathMessage;\n++    }\n++    // Paper end\n++\n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final String deathMessage) {\n+         super(player, drops, droppedExp);\n+         this.newExp = newExp;\n+         this.newTotalExp = newTotalExp;\n+         this.newLevel = newLevel;\n+-        this.deathMessage = deathMessage;\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+@@ -39,12 +59,13 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+         return (Player) entity;\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Set the death message that will appear to everyone on the server.\n+      *\n+      * @param deathMessage Message to appear to other players on the server.\n+      */\n+-    public void setDeathMessage(@Nullable String deathMessage) {\n++    public void deathMessage(@Nullable net.kyori.adventure.text.Component deathMessage) {\n+         this.deathMessage = deathMessage;\n+     }\n+ \n+@@ -53,9 +74,32 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+      *\n+      * @return Message to appear to other players on the server.\n+      */\n++    public @Nullable net.kyori.adventure.text.Component deathMessage() {\n++        return this.deathMessage;\n++    }\n++    // Paper end\n++\n++    /**\n++     * Set the death message that will appear to everyone on the server.\n++     *\n++     * @param deathMessage Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setDeathMessage(@Nullable String deathMessage) {\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n++    }\n++\n++    /**\n++     * Get the death message that will appear to everyone on the server.\n++     *\n++     * @return Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage()}\n++     */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getDeathMessage() {\n+-        return deathMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.deathMessage); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n+index c8384da69af61e1970f254a3a9c206ee81d7a989..992d1025ca02020e87a9ab5db83d249427f41d69 100644\n+--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n++++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n+@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;\n+ public class AsyncPlayerPreLoginEvent extends Event {\n+     private static final HandlerList handlers = new HandlerList();\n+     private Result result;\n+-    private String message;\n++    private net.kyori.adventure.text.Component message; // Paper\n+     private final String name;\n+     private final InetAddress ipAddress;\n+     private final UUID uniqueId;\n+@@ -27,7 +27,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+     public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final UUID uniqueId) {\n+         super(true);\n+         this.result = Result.ALLOWED;\n+-        this.message = \"\";\n++        this.message = net.kyori.adventure.text.Component.empty(); // Paper\n+         this.name = name;\n+         this.ipAddress = ipAddress;\n+         this.uniqueId = uniqueId;\n+@@ -79,6 +79,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+         this.result = result == null ? null : Result.valueOf(result.name());\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Gets the current kick message that will be used if getResult() !=\n+      * Result.ALLOWED\n+@@ -86,7 +87,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      * @return Current kick message\n+      */\n+     @NotNull\n+-    public String getKickMessage() {\n++    public net.kyori.adventure.text.Component kickMessage() {\n+         return message;\n+     }\n+ \n+@@ -95,16 +96,66 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      *\n+      * @param message New kick message\n+      */\n+-    public void setKickMessage(@NotNull final String message) {\n++    public void kickMessage(@NotNull final net.kyori.adventure.text.Component message) {\n++        this.message = message;\n++    }\n++\n++    /**\n++     * Disallows the player from logging in, with the given reason\n++     *\n++     * @param result New result for disallowing the player\n++     * @param message Kick message to display to the user\n++     */\n++    public void disallow(@NotNull final Result result, @NotNull final net.kyori.adventure.text.Component message) {\n++        this.result = result;\n+         this.message = message;\n+     }\n+ \n++    /**\n++     * Disallows the player from logging in, with the given reason\n++     *\n++     * @param result New result for disallowing the player\n++     * @param message Kick message to display to the user\n++     * @deprecated This method uses a deprecated enum from {@link\n++     *     PlayerPreLoginEvent}\n++     * @see #disallow(Result, String)\n++     */\n++    @Deprecated\n++    public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final net.kyori.adventure.text.Component message) {\n++        this.result = result == null ? null : Result.valueOf(result.name());\n++        this.message = message;\n++    }\n++    // Paper end\n++    /**\n++     * Gets the current kick message that will be used if getResult() !=\n++     * Result.ALLOWED\n++     *\n++     * @return Current kick message\n++     * @deprecated in favour of {@link #kickMessage()}\n++     */\n++    @NotNull\n++    @Deprecated // Paper\n++    public String getKickMessage() {\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.message); // Paper\n++    }\n++\n++    /**\n++     * Sets the kick message to display if getResult() != Result.ALLOWED\n++     *\n++     * @param message New kick message\n++     * @deprecated in favour of {@link #kickMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setKickMessage(@NotNull final String message) {\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n++    }\n++\n+     /**\n+      * Allows the player to log in\n+      */\n+     public void allow() {\n+         result = Result.ALLOWED;\n+-        message = \"\";\n++        message = net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     /**\n+@@ -112,10 +163,12 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      *\n+      * @param result New result for disallowing the player\n+      * @param message Kick message to display to the user\n++     * @deprecated in favour of {@link #disallow(org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void disallow(@NotNull final Result result, @NotNull final String message) {\n+         this.result = result;\n+-        this.message = message;\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n+     }\n+ \n+     /**\n+@@ -130,7 +183,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+     @Deprecated\n+     public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final String message) {\n+         this.result = result == null ? null : Result.valueOf(result.name());\n+-        this.message = message;\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n+index d06684aba7688ce06777dbd837a46856a9d7767f..b69b7509599a0d9a260d30585605c914b8e0d67c 100644\n+--- a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n++++ b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n+@@ -10,30 +10,60 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerJoinEvent extends PlayerEvent {\n+     private static final HandlerList handlers = new HandlerList();\n+-    private String joinMessage;\n++    // Paper start\n++    private net.kyori.adventure.text.Component joinMessage;\n++    public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final net.kyori.adventure.text.Component joinMessage) {\n++        super(playerJoined);\n++        this.joinMessage = joinMessage;\n++    }\n+ \n++    @Deprecated // Paper end\n+     public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final String joinMessage) {\n+         super(playerJoined);\n++        this.joinMessage = joinMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage) : net.kyori.adventure.text.Component.empty(); // Paper end\n++    }\n++\n++    // Paper start\n++    /**\n++     * Gets the join message to send to all online players\n++     *\n++     * @return string join message. Can be null\n++     */\n++    public @Nullable net.kyori.adventure.text.Component joinMessage() {\n++        return this.joinMessage;\n++    }\n++\n++    /**\n++     * Sets the join message to send to all online players\n++     *\n++     * @param joinMessage join message. If null, no message will be sent\n++     */\n++    public void joinMessage(@Nullable net.kyori.adventure.text.Component joinMessage) {\n+         this.joinMessage = joinMessage;\n+     }\n++    // Paper end\n+ \n+     /**\n+      * Gets the join message to send to all online players\n+      *\n+      * @return string join message. Can be null\n++     * @deprecated in favour of {@link #joinMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getJoinMessage() {\n+-        return joinMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.joinMessage); // Paper\n+     }\n+ \n+     /**\n+      * Sets the join message to send to all online players\n+      *\n+      * @param joinMessage join message. If null, no message will be sent\n++     * @deprecated in favour of {@link #joinMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setJoinMessage(@Nullable String joinMessage) {\n+-        this.joinMessage = joinMessage;\n++        this.joinMessage = joinMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n+index 14c337f15fc804f52e52cb0a185aad38d89303a8..f50d7182f3b2729ff20dd1903e7b3483b9a5fa9e 100644\n+--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n++++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n+@@ -10,35 +10,84 @@ import org.jetbrains.annotations.NotNull;\n+  */\n+ public class PlayerKickEvent extends PlayerEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+-    private String leaveMessage;\n+-    private String kickReason;\n++    private net.kyori.adventure.text.Component leaveMessage; // Paper\n++    private net.kyori.adventure.text.Component kickReason; // Paper\n+     private Boolean cancel;\n+ \n++    @Deprecated // Paper\n+     public PlayerKickEvent(@NotNull final Player playerKicked, @NotNull final String kickReason, @NotNull final String leaveMessage) {\n++        super(playerKicked);\n++        this.kickReason = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(kickReason); // Paper\n++        this.leaveMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(leaveMessage); // Paper\n++        this.cancel = false;\n++    }\n++    // Paper start\n++    public PlayerKickEvent(@NotNull final Player playerKicked, @NotNull final net.kyori.adventure.text.Component kickReason, @NotNull final net.kyori.adventure.text.Component leaveMessage) {\n+         super(playerKicked);\n+         this.kickReason = kickReason;\n+         this.leaveMessage = leaveMessage;\n+         this.cancel = false;\n+     }\n+ \n++    /**\n++     * Gets the leave message send to all online players\n++     *\n++     * @return string kick reason\n++     */\n++    public @org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component leaveMessage() {\n++        return this.leaveMessage;\n++    }\n++\n++    /**\n++     * Sets the leave message send to all online players\n++     *\n++     * @param leaveMessage leave message\n++     */\n++    public void leaveMessage(@org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component leaveMessage) {\n++        this.leaveMessage = leaveMessage;\n++    }\n++\n+     /**\n+      * Gets the reason why the player is getting kicked\n+      *\n+      * @return string kick reason\n+      */\n++    public @org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component reason() {\n++        return this.kickReason;\n++    }\n++\n++    /**\n++     * Sets the reason why the player is getting kicked\n++     *\n++     * @param kickReason kick reason\n++     */\n++    public void reason(@org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component kickReason) {\n++        this.kickReason = kickReason;\n++    }\n++    // Paper end\n++\n++    /**\n++     * Gets the reason why the player is getting kicked\n++     *\n++     * @return string kick reason\n++     * @deprecated in favour of {@link #reason()}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getReason() {\n+-        return kickReason;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.kickReason); // Paper\n+     }\n+ \n+     /**\n+      * Gets the leave message send to all online players\n+      *\n+      * @return string kick reason\n++     * @deprecated in favour of {@link #leaveMessage()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLeaveMessage() {\n+-        return leaveMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.leaveMessage); // Paper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a00ec991bb23a4847156894674e0af22f86fca"}, "originalPosition": 510}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4OTczNA==", "bodyText": "meh, most of the cases where stuff is converted, its not really hot code. as in, they are not called every tick. and ontop of that, these methods are deprecated anyways, if these turn out to be a performance bottleneck, we can just yell at ppl to update to the new methods \ud83e\udd37", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550889734", "createdAt": "2021-01-02T15:02:31Z", "author": {"login": "MiniDigger"}, "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "diffHunk": "@@ -0,0 +1,1062 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Jake Potrebic <jake.m.potrebic@gmail.com>\n+Date: Sat, 5 Dec 2020 11:21:57 -0800\n+Subject: [PATCH] Adventure Events\n+\n+\n+diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+index 7190db11eff7d48df8a99f405a9dbaefdfa76e3d..1268066e30ddb0cd3792ea4b3de894eb04196669 100644\n+--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n++++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+@@ -16,12 +16,25 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+     private boolean cancel = false;\n+     private final Player player;\n+-    private final String[] lines;\n++    // Paper start\n++    private final java.util.List<net.kyori.adventure.text.Component> adventure$lines;\n+ \n++    public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player player, @NotNull final java.util.List<net.kyori.adventure.text.Component> adventure$lines) {\n++        super(theBlock);\n++        this.player = player;\n++        this.adventure$lines = adventure$lines;\n++    }\n++\n++    @Deprecated // Paper end\n+     public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player thePlayer, @NotNull final String[] theLines) {\n+         super(theBlock);\n+         this.player = thePlayer;\n+-        this.lines = theLines;\n++        // Paper start\n++        this.adventure$lines = new java.util.ArrayList<>();\n++        for (String theLine : theLines) {\n++            this.adventure$lines.add(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(theLine));\n++        }\n++        // Paper end\n+     }\n+ \n+     /**\n+@@ -34,14 +47,52 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+         return player;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets all of the lines of text from the sign involved in this event.\n++     *\n++     * @return the String array for the sign's lines new text\n++     */\n++    public @NotNull java.util.List<net.kyori.adventure.text.Component> lines() {\n++        return this.adventure$lines;\n++    }\n++\n++    /**\n++     * Gets a single line of text from the sign involved in this event.\n++     *\n++     * @param index index of the line to get\n++     * @return the String containing the line of text associated with the\n++     *     provided index\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public @Nullable net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException {\n++        return this.adventure$lines.get(index);\n++    }\n++\n++    /**\n++     * Sets a single line for the sign involved in this event\n++     *\n++     * @param index index of the line to set\n++     * @param line text to set\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public void line(int index, @Nullable net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {\n++        this.adventure$lines.set(index, line);\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets all of the lines of text from the sign involved in this event.\n+      *\n+      * @return the String array for the sign's lines new text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines() {\n+-        return lines;\n++        return adventure$lines.stream().map(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()::serialize).toArray(String[]::new); // Paper\n+     }\n+ \n+     /**\n+@@ -52,10 +103,12 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      *     provided index\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException {\n+-        return lines[index];\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.adventure$lines.get(index)); // Paper\n+     }\n+ \n+     /**\n+@@ -65,9 +118,11 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      * @param line text to set\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @Nullable String line) throws IndexOutOfBoundsException {\n+-        lines[index] = line;\n++        adventure$lines.set(index, line != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line) : null); // Paper\n+     }\n+ \n+     @Override\n+diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+index 07a52441a5cdd7e428a14b286d7cb5210e3efa97..46fcabf9e48907462f785a2e7ccd9fda8ece8206 100644\n+--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n++++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+@@ -11,26 +11,46 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerDeathEvent extends EntityDeathEvent {\n+     private int newExp = 0;\n+-    private String deathMessage = \"\";\n++    private net.kyori.adventure.text.Component deathMessage; // Paper\n+     private int newLevel = 0;\n+     private int newTotalExp = 0;\n+     private boolean keepLevel = false;\n+     private boolean keepInventory = false;\n++    // Paper start\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, 0, deathMessage);\n++    }\n++\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n++    }\n+ \n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        super(player, drops, droppedExp);\n++        this.newExp = newExp;\n++        this.newTotalExp = newTotalExp;\n++        this.newLevel = newLevel;\n++        this.deathMessage = deathMessage;\n++    }\n++    // Paper end\n++\n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final String deathMessage) {\n+         super(player, drops, droppedExp);\n+         this.newExp = newExp;\n+         this.newTotalExp = newTotalExp;\n+         this.newLevel = newLevel;\n+-        this.deathMessage = deathMessage;\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+@@ -39,12 +59,13 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+         return (Player) entity;\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Set the death message that will appear to everyone on the server.\n+      *\n+      * @param deathMessage Message to appear to other players on the server.\n+      */\n+-    public void setDeathMessage(@Nullable String deathMessage) {\n++    public void deathMessage(@Nullable net.kyori.adventure.text.Component deathMessage) {\n+         this.deathMessage = deathMessage;\n+     }\n+ \n+@@ -53,9 +74,32 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+      *\n+      * @return Message to appear to other players on the server.\n+      */\n++    public @Nullable net.kyori.adventure.text.Component deathMessage() {\n++        return this.deathMessage;\n++    }\n++    // Paper end\n++\n++    /**\n++     * Set the death message that will appear to everyone on the server.\n++     *\n++     * @param deathMessage Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setDeathMessage(@Nullable String deathMessage) {\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n++    }\n++\n++    /**\n++     * Get the death message that will appear to everyone on the server.\n++     *\n++     * @return Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage()}\n++     */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getDeathMessage() {\n+-        return deathMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.deathMessage); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n+index c8384da69af61e1970f254a3a9c206ee81d7a989..992d1025ca02020e87a9ab5db83d249427f41d69 100644\n+--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n++++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n+@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;\n+ public class AsyncPlayerPreLoginEvent extends Event {\n+     private static final HandlerList handlers = new HandlerList();\n+     private Result result;\n+-    private String message;\n++    private net.kyori.adventure.text.Component message; // Paper\n+     private final String name;\n+     private final InetAddress ipAddress;\n+     private final UUID uniqueId;\n+@@ -27,7 +27,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+     public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final UUID uniqueId) {\n+         super(true);\n+         this.result = Result.ALLOWED;\n+-        this.message = \"\";\n++        this.message = net.kyori.adventure.text.Component.empty(); // Paper\n+         this.name = name;\n+         this.ipAddress = ipAddress;\n+         this.uniqueId = uniqueId;\n+@@ -79,6 +79,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+         this.result = result == null ? null : Result.valueOf(result.name());\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Gets the current kick message that will be used if getResult() !=\n+      * Result.ALLOWED\n+@@ -86,7 +87,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      * @return Current kick message\n+      */\n+     @NotNull\n+-    public String getKickMessage() {\n++    public net.kyori.adventure.text.Component kickMessage() {\n+         return message;\n+     }\n+ \n+@@ -95,16 +96,66 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      *\n+      * @param message New kick message\n+      */\n+-    public void setKickMessage(@NotNull final String message) {\n++    public void kickMessage(@NotNull final net.kyori.adventure.text.Component message) {\n++        this.message = message;\n++    }\n++\n++    /**\n++     * Disallows the player from logging in, with the given reason\n++     *\n++     * @param result New result for disallowing the player\n++     * @param message Kick message to display to the user\n++     */\n++    public void disallow(@NotNull final Result result, @NotNull final net.kyori.adventure.text.Component message) {\n++        this.result = result;\n+         this.message = message;\n+     }\n+ \n++    /**\n++     * Disallows the player from logging in, with the given reason\n++     *\n++     * @param result New result for disallowing the player\n++     * @param message Kick message to display to the user\n++     * @deprecated This method uses a deprecated enum from {@link\n++     *     PlayerPreLoginEvent}\n++     * @see #disallow(Result, String)\n++     */\n++    @Deprecated\n++    public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final net.kyori.adventure.text.Component message) {\n++        this.result = result == null ? null : Result.valueOf(result.name());\n++        this.message = message;\n++    }\n++    // Paper end\n++    /**\n++     * Gets the current kick message that will be used if getResult() !=\n++     * Result.ALLOWED\n++     *\n++     * @return Current kick message\n++     * @deprecated in favour of {@link #kickMessage()}\n++     */\n++    @NotNull\n++    @Deprecated // Paper\n++    public String getKickMessage() {\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.message); // Paper\n++    }\n++\n++    /**\n++     * Sets the kick message to display if getResult() != Result.ALLOWED\n++     *\n++     * @param message New kick message\n++     * @deprecated in favour of {@link #kickMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setKickMessage(@NotNull final String message) {\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n++    }\n++\n+     /**\n+      * Allows the player to log in\n+      */\n+     public void allow() {\n+         result = Result.ALLOWED;\n+-        message = \"\";\n++        message = net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     /**\n+@@ -112,10 +163,12 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      *\n+      * @param result New result for disallowing the player\n+      * @param message Kick message to display to the user\n++     * @deprecated in favour of {@link #disallow(org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void disallow(@NotNull final Result result, @NotNull final String message) {\n+         this.result = result;\n+-        this.message = message;\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n+     }\n+ \n+     /**\n+@@ -130,7 +183,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+     @Deprecated\n+     public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final String message) {\n+         this.result = result == null ? null : Result.valueOf(result.name());\n+-        this.message = message;\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n+index d06684aba7688ce06777dbd837a46856a9d7767f..b69b7509599a0d9a260d30585605c914b8e0d67c 100644\n+--- a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n++++ b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n+@@ -10,30 +10,60 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerJoinEvent extends PlayerEvent {\n+     private static final HandlerList handlers = new HandlerList();\n+-    private String joinMessage;\n++    // Paper start\n++    private net.kyori.adventure.text.Component joinMessage;\n++    public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final net.kyori.adventure.text.Component joinMessage) {\n++        super(playerJoined);\n++        this.joinMessage = joinMessage;\n++    }\n+ \n++    @Deprecated // Paper end\n+     public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final String joinMessage) {\n+         super(playerJoined);\n++        this.joinMessage = joinMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage) : net.kyori.adventure.text.Component.empty(); // Paper end\n++    }\n++\n++    // Paper start\n++    /**\n++     * Gets the join message to send to all online players\n++     *\n++     * @return string join message. Can be null\n++     */\n++    public @Nullable net.kyori.adventure.text.Component joinMessage() {\n++        return this.joinMessage;\n++    }\n++\n++    /**\n++     * Sets the join message to send to all online players\n++     *\n++     * @param joinMessage join message. If null, no message will be sent\n++     */\n++    public void joinMessage(@Nullable net.kyori.adventure.text.Component joinMessage) {\n+         this.joinMessage = joinMessage;\n+     }\n++    // Paper end\n+ \n+     /**\n+      * Gets the join message to send to all online players\n+      *\n+      * @return string join message. Can be null\n++     * @deprecated in favour of {@link #joinMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getJoinMessage() {\n+-        return joinMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.joinMessage); // Paper\n+     }\n+ \n+     /**\n+      * Sets the join message to send to all online players\n+      *\n+      * @param joinMessage join message. If null, no message will be sent\n++     * @deprecated in favour of {@link #joinMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setJoinMessage(@Nullable String joinMessage) {\n+-        this.joinMessage = joinMessage;\n++        this.joinMessage = joinMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n+index 14c337f15fc804f52e52cb0a185aad38d89303a8..f50d7182f3b2729ff20dd1903e7b3483b9a5fa9e 100644\n+--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n++++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n+@@ -10,35 +10,84 @@ import org.jetbrains.annotations.NotNull;\n+  */\n+ public class PlayerKickEvent extends PlayerEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+-    private String leaveMessage;\n+-    private String kickReason;\n++    private net.kyori.adventure.text.Component leaveMessage; // Paper\n++    private net.kyori.adventure.text.Component kickReason; // Paper\n+     private Boolean cancel;\n+ \n++    @Deprecated // Paper\n+     public PlayerKickEvent(@NotNull final Player playerKicked, @NotNull final String kickReason, @NotNull final String leaveMessage) {\n++        super(playerKicked);\n++        this.kickReason = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(kickReason); // Paper\n++        this.leaveMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(leaveMessage); // Paper\n++        this.cancel = false;\n++    }\n++    // Paper start\n++    public PlayerKickEvent(@NotNull final Player playerKicked, @NotNull final net.kyori.adventure.text.Component kickReason, @NotNull final net.kyori.adventure.text.Component leaveMessage) {\n+         super(playerKicked);\n+         this.kickReason = kickReason;\n+         this.leaveMessage = leaveMessage;\n+         this.cancel = false;\n+     }\n+ \n++    /**\n++     * Gets the leave message send to all online players\n++     *\n++     * @return string kick reason\n++     */\n++    public @org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component leaveMessage() {\n++        return this.leaveMessage;\n++    }\n++\n++    /**\n++     * Sets the leave message send to all online players\n++     *\n++     * @param leaveMessage leave message\n++     */\n++    public void leaveMessage(@org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component leaveMessage) {\n++        this.leaveMessage = leaveMessage;\n++    }\n++\n+     /**\n+      * Gets the reason why the player is getting kicked\n+      *\n+      * @return string kick reason\n+      */\n++    public @org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component reason() {\n++        return this.kickReason;\n++    }\n++\n++    /**\n++     * Sets the reason why the player is getting kicked\n++     *\n++     * @param kickReason kick reason\n++     */\n++    public void reason(@org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component kickReason) {\n++        this.kickReason = kickReason;\n++    }\n++    // Paper end\n++\n++    /**\n++     * Gets the reason why the player is getting kicked\n++     *\n++     * @return string kick reason\n++     * @deprecated in favour of {@link #reason()}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getReason() {\n+-        return kickReason;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.kickReason); // Paper\n+     }\n+ \n+     /**\n+      * Gets the leave message send to all online players\n+      *\n+      * @return string kick reason\n++     * @deprecated in favour of {@link #leaveMessage()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLeaveMessage() {\n+-        return leaveMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.leaveMessage); // Paper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4NDkwMw=="}, "originalCommit": {"oid": "c8a00ec991bb23a4847156894674e0af22f86fca"}, "originalPosition": 510}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxNTIxOA==", "bodyText": "so de/serialization is O(1).\n\nNitpicking, but amortizedO(1).", "url": "https://github.com/PaperMC/Paper/pull/4842#discussion_r550915218", "createdAt": "2021-01-02T19:55:27Z", "author": {"login": "astei"}, "path": "Spigot-API-Patches/0006-Adventure-Events.patch", "diffHunk": "@@ -0,0 +1,1062 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: Jake Potrebic <jake.m.potrebic@gmail.com>\n+Date: Sat, 5 Dec 2020 11:21:57 -0800\n+Subject: [PATCH] Adventure Events\n+\n+\n+diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+index 7190db11eff7d48df8a99f405a9dbaefdfa76e3d..1268066e30ddb0cd3792ea4b3de894eb04196669 100644\n+--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n++++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java\n+@@ -16,12 +16,25 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+     private boolean cancel = false;\n+     private final Player player;\n+-    private final String[] lines;\n++    // Paper start\n++    private final java.util.List<net.kyori.adventure.text.Component> adventure$lines;\n+ \n++    public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player player, @NotNull final java.util.List<net.kyori.adventure.text.Component> adventure$lines) {\n++        super(theBlock);\n++        this.player = player;\n++        this.adventure$lines = adventure$lines;\n++    }\n++\n++    @Deprecated // Paper end\n+     public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player thePlayer, @NotNull final String[] theLines) {\n+         super(theBlock);\n+         this.player = thePlayer;\n+-        this.lines = theLines;\n++        // Paper start\n++        this.adventure$lines = new java.util.ArrayList<>();\n++        for (String theLine : theLines) {\n++            this.adventure$lines.add(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(theLine));\n++        }\n++        // Paper end\n+     }\n+ \n+     /**\n+@@ -34,14 +47,52 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+         return player;\n+     }\n+ \n++    // Paper start\n++    /**\n++     * Gets all of the lines of text from the sign involved in this event.\n++     *\n++     * @return the String array for the sign's lines new text\n++     */\n++    public @NotNull java.util.List<net.kyori.adventure.text.Component> lines() {\n++        return this.adventure$lines;\n++    }\n++\n++    /**\n++     * Gets a single line of text from the sign involved in this event.\n++     *\n++     * @param index index of the line to get\n++     * @return the String containing the line of text associated with the\n++     *     provided index\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public @Nullable net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException {\n++        return this.adventure$lines.get(index);\n++    }\n++\n++    /**\n++     * Sets a single line for the sign involved in this event\n++     *\n++     * @param index index of the line to set\n++     * @param line text to set\n++     * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n++     *     or < 0}\n++     */\n++    public void line(int index, @Nullable net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {\n++        this.adventure$lines.set(index, line);\n++    }\n++    // Paper end\n++\n+     /**\n+      * Gets all of the lines of text from the sign involved in this event.\n+      *\n+      * @return the String array for the sign's lines new text\n++     * @deprecated in favour of {@link #lines()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String[] getLines() {\n+-        return lines;\n++        return adventure$lines.stream().map(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()::serialize).toArray(String[]::new); // Paper\n+     }\n+ \n+     /**\n+@@ -52,10 +103,12 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      *     provided index\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int)}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getLine(int index) throws IndexOutOfBoundsException {\n+-        return lines[index];\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.adventure$lines.get(index)); // Paper\n+     }\n+ \n+     /**\n+@@ -65,9 +118,11 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {\n+      * @param line text to set\n+      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3\n+      *     or < 0}\n++     * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setLine(int index, @Nullable String line) throws IndexOutOfBoundsException {\n+-        lines[index] = line;\n++        adventure$lines.set(index, line != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line) : null); // Paper\n+     }\n+ \n+     @Override\n+diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+index 07a52441a5cdd7e428a14b286d7cb5210e3efa97..46fcabf9e48907462f785a2e7ccd9fda8ece8206 100644\n+--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n++++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java\n+@@ -11,26 +11,46 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerDeathEvent extends EntityDeathEvent {\n+     private int newExp = 0;\n+-    private String deathMessage = \"\";\n++    private net.kyori.adventure.text.Component deathMessage; // Paper\n+     private int newLevel = 0;\n+     private int newTotalExp = 0;\n+     private boolean keepLevel = false;\n+     private boolean keepInventory = false;\n++    // Paper start\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, 0, deathMessage);\n++    }\n++\n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n++    }\n+ \n++    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component deathMessage) {\n++        super(player, drops, droppedExp);\n++        this.newExp = newExp;\n++        this.newTotalExp = newTotalExp;\n++        this.newLevel = newLevel;\n++        this.deathMessage = deathMessage;\n++    }\n++    // Paper end\n++\n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final String deathMessage) {\n+         this(player, drops, droppedExp, newExp, 0, 0, deathMessage);\n+     }\n+ \n++    @Deprecated // Paper\n+     public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final String deathMessage) {\n+         super(player, drops, droppedExp);\n+         this.newExp = newExp;\n+         this.newTotalExp = newTotalExp;\n+         this.newLevel = newLevel;\n+-        this.deathMessage = deathMessage;\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+@@ -39,12 +59,13 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+         return (Player) entity;\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Set the death message that will appear to everyone on the server.\n+      *\n+      * @param deathMessage Message to appear to other players on the server.\n+      */\n+-    public void setDeathMessage(@Nullable String deathMessage) {\n++    public void deathMessage(@Nullable net.kyori.adventure.text.Component deathMessage) {\n+         this.deathMessage = deathMessage;\n+     }\n+ \n+@@ -53,9 +74,32 @@ public class PlayerDeathEvent extends EntityDeathEvent {\n+      *\n+      * @return Message to appear to other players on the server.\n+      */\n++    public @Nullable net.kyori.adventure.text.Component deathMessage() {\n++        return this.deathMessage;\n++    }\n++    // Paper end\n++\n++    /**\n++     * Set the death message that will appear to everyone on the server.\n++     *\n++     * @param deathMessage Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setDeathMessage(@Nullable String deathMessage) {\n++        this.deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n++    }\n++\n++    /**\n++     * Get the death message that will appear to everyone on the server.\n++     *\n++     * @return Message to appear to other players on the server.\n++     * @deprecated in favour of {@link #deathMessage()}\n++     */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getDeathMessage() {\n+-        return deathMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.deathMessage); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n+index c8384da69af61e1970f254a3a9c206ee81d7a989..992d1025ca02020e87a9ab5db83d249427f41d69 100644\n+--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n++++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java\n+@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;\n+ public class AsyncPlayerPreLoginEvent extends Event {\n+     private static final HandlerList handlers = new HandlerList();\n+     private Result result;\n+-    private String message;\n++    private net.kyori.adventure.text.Component message; // Paper\n+     private final String name;\n+     private final InetAddress ipAddress;\n+     private final UUID uniqueId;\n+@@ -27,7 +27,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+     public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final UUID uniqueId) {\n+         super(true);\n+         this.result = Result.ALLOWED;\n+-        this.message = \"\";\n++        this.message = net.kyori.adventure.text.Component.empty(); // Paper\n+         this.name = name;\n+         this.ipAddress = ipAddress;\n+         this.uniqueId = uniqueId;\n+@@ -79,6 +79,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+         this.result = result == null ? null : Result.valueOf(result.name());\n+     }\n+ \n++    // Paper start\n+     /**\n+      * Gets the current kick message that will be used if getResult() !=\n+      * Result.ALLOWED\n+@@ -86,7 +87,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      * @return Current kick message\n+      */\n+     @NotNull\n+-    public String getKickMessage() {\n++    public net.kyori.adventure.text.Component kickMessage() {\n+         return message;\n+     }\n+ \n+@@ -95,16 +96,66 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      *\n+      * @param message New kick message\n+      */\n+-    public void setKickMessage(@NotNull final String message) {\n++    public void kickMessage(@NotNull final net.kyori.adventure.text.Component message) {\n++        this.message = message;\n++    }\n++\n++    /**\n++     * Disallows the player from logging in, with the given reason\n++     *\n++     * @param result New result for disallowing the player\n++     * @param message Kick message to display to the user\n++     */\n++    public void disallow(@NotNull final Result result, @NotNull final net.kyori.adventure.text.Component message) {\n++        this.result = result;\n+         this.message = message;\n+     }\n+ \n++    /**\n++     * Disallows the player from logging in, with the given reason\n++     *\n++     * @param result New result for disallowing the player\n++     * @param message Kick message to display to the user\n++     * @deprecated This method uses a deprecated enum from {@link\n++     *     PlayerPreLoginEvent}\n++     * @see #disallow(Result, String)\n++     */\n++    @Deprecated\n++    public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final net.kyori.adventure.text.Component message) {\n++        this.result = result == null ? null : Result.valueOf(result.name());\n++        this.message = message;\n++    }\n++    // Paper end\n++    /**\n++     * Gets the current kick message that will be used if getResult() !=\n++     * Result.ALLOWED\n++     *\n++     * @return Current kick message\n++     * @deprecated in favour of {@link #kickMessage()}\n++     */\n++    @NotNull\n++    @Deprecated // Paper\n++    public String getKickMessage() {\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.message); // Paper\n++    }\n++\n++    /**\n++     * Sets the kick message to display if getResult() != Result.ALLOWED\n++     *\n++     * @param message New kick message\n++     * @deprecated in favour of {@link #kickMessage(net.kyori.adventure.text.Component)}\n++     */\n++    @Deprecated // Paper\n++    public void setKickMessage(@NotNull final String message) {\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n++    }\n++\n+     /**\n+      * Allows the player to log in\n+      */\n+     public void allow() {\n+         result = Result.ALLOWED;\n+-        message = \"\";\n++        message = net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     /**\n+@@ -112,10 +163,12 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+      *\n+      * @param result New result for disallowing the player\n+      * @param message Kick message to display to the user\n++     * @deprecated in favour of {@link #disallow(org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result, net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void disallow(@NotNull final Result result, @NotNull final String message) {\n+         this.result = result;\n+-        this.message = message;\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n+     }\n+ \n+     /**\n+@@ -130,7 +183,7 @@ public class AsyncPlayerPreLoginEvent extends Event {\n+     @Deprecated\n+     public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final String message) {\n+         this.result = result == null ? null : Result.valueOf(result.name());\n+-        this.message = message;\n++        this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper\n+     }\n+ \n+     /**\n+diff --git a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n+index d06684aba7688ce06777dbd837a46856a9d7767f..b69b7509599a0d9a260d30585605c914b8e0d67c 100644\n+--- a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n++++ b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java\n+@@ -10,30 +10,60 @@ import org.jetbrains.annotations.Nullable;\n+  */\n+ public class PlayerJoinEvent extends PlayerEvent {\n+     private static final HandlerList handlers = new HandlerList();\n+-    private String joinMessage;\n++    // Paper start\n++    private net.kyori.adventure.text.Component joinMessage;\n++    public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final net.kyori.adventure.text.Component joinMessage) {\n++        super(playerJoined);\n++        this.joinMessage = joinMessage;\n++    }\n+ \n++    @Deprecated // Paper end\n+     public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final String joinMessage) {\n+         super(playerJoined);\n++        this.joinMessage = joinMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage) : net.kyori.adventure.text.Component.empty(); // Paper end\n++    }\n++\n++    // Paper start\n++    /**\n++     * Gets the join message to send to all online players\n++     *\n++     * @return string join message. Can be null\n++     */\n++    public @Nullable net.kyori.adventure.text.Component joinMessage() {\n++        return this.joinMessage;\n++    }\n++\n++    /**\n++     * Sets the join message to send to all online players\n++     *\n++     * @param joinMessage join message. If null, no message will be sent\n++     */\n++    public void joinMessage(@Nullable net.kyori.adventure.text.Component joinMessage) {\n+         this.joinMessage = joinMessage;\n+     }\n++    // Paper end\n+ \n+     /**\n+      * Gets the join message to send to all online players\n+      *\n+      * @return string join message. Can be null\n++     * @deprecated in favour of {@link #joinMessage()}\n+      */\n+     @Nullable\n++    @Deprecated // Paper\n+     public String getJoinMessage() {\n+-        return joinMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.joinMessage); // Paper\n+     }\n+ \n+     /**\n+      * Sets the join message to send to all online players\n+      *\n+      * @param joinMessage join message. If null, no message will be sent\n++     * @deprecated in favour of {@link #joinMessage(net.kyori.adventure.text.Component)}\n+      */\n++    @Deprecated // Paper\n+     public void setJoinMessage(@Nullable String joinMessage) {\n+-        this.joinMessage = joinMessage;\n++        this.joinMessage = joinMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage) : net.kyori.adventure.text.Component.empty(); // Paper\n+     }\n+ \n+     @NotNull\n+diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n+index 14c337f15fc804f52e52cb0a185aad38d89303a8..f50d7182f3b2729ff20dd1903e7b3483b9a5fa9e 100644\n+--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n++++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java\n+@@ -10,35 +10,84 @@ import org.jetbrains.annotations.NotNull;\n+  */\n+ public class PlayerKickEvent extends PlayerEvent implements Cancellable {\n+     private static final HandlerList handlers = new HandlerList();\n+-    private String leaveMessage;\n+-    private String kickReason;\n++    private net.kyori.adventure.text.Component leaveMessage; // Paper\n++    private net.kyori.adventure.text.Component kickReason; // Paper\n+     private Boolean cancel;\n+ \n++    @Deprecated // Paper\n+     public PlayerKickEvent(@NotNull final Player playerKicked, @NotNull final String kickReason, @NotNull final String leaveMessage) {\n++        super(playerKicked);\n++        this.kickReason = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(kickReason); // Paper\n++        this.leaveMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(leaveMessage); // Paper\n++        this.cancel = false;\n++    }\n++    // Paper start\n++    public PlayerKickEvent(@NotNull final Player playerKicked, @NotNull final net.kyori.adventure.text.Component kickReason, @NotNull final net.kyori.adventure.text.Component leaveMessage) {\n+         super(playerKicked);\n+         this.kickReason = kickReason;\n+         this.leaveMessage = leaveMessage;\n+         this.cancel = false;\n+     }\n+ \n++    /**\n++     * Gets the leave message send to all online players\n++     *\n++     * @return string kick reason\n++     */\n++    public @org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component leaveMessage() {\n++        return this.leaveMessage;\n++    }\n++\n++    /**\n++     * Sets the leave message send to all online players\n++     *\n++     * @param leaveMessage leave message\n++     */\n++    public void leaveMessage(@org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component leaveMessage) {\n++        this.leaveMessage = leaveMessage;\n++    }\n++\n+     /**\n+      * Gets the reason why the player is getting kicked\n+      *\n+      * @return string kick reason\n+      */\n++    public @org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component reason() {\n++        return this.kickReason;\n++    }\n++\n++    /**\n++     * Sets the reason why the player is getting kicked\n++     *\n++     * @param kickReason kick reason\n++     */\n++    public void reason(@org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component kickReason) {\n++        this.kickReason = kickReason;\n++    }\n++    // Paper end\n++\n++    /**\n++     * Gets the reason why the player is getting kicked\n++     *\n++     * @return string kick reason\n++     * @deprecated in favour of {@link #reason()}\n++     */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getReason() {\n+-        return kickReason;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.kickReason); // Paper\n+     }\n+ \n+     /**\n+      * Gets the leave message send to all online players\n+      *\n+      * @return string kick reason\n++     * @deprecated in favour of {@link #leaveMessage()}\n+      */\n+     @NotNull\n++    @Deprecated // Paper\n+     public String getLeaveMessage() {\n+-        return leaveMessage;\n++        return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.leaveMessage); // Paper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4NDkwMw=="}, "originalCommit": {"oid": "c8a00ec991bb23a4847156894674e0af22f86fca"}, "originalPosition": 510}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1769, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}