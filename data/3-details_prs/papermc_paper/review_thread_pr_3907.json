{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MDIwODM4", "number": 3907, "reviewThreads": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowMDowOVrOEOeV7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjoxMzoxOVrOEP3jmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjEyNjU1OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowMDowOVrOGxpbxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowMDowOVrOGxpbxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxMjI2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To do the other part, PRing changes, you require the following software, which\n          \n          \n            \n            To get started with PRing changes, you require the following software, which\n          \n      \n    \n    \n  \n\nWhat other part?", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r454712262", "createdAt": "2020-07-15T00:00:09Z", "author": {"login": "granny"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjEzNTA5OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowNDozNVrOGxpgkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0MTo0MlrOGx-rjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxMzQ4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u2757 Please note that if you have some specific implementation detail you'd like\n          \n          \n            \n            to document, you should do so in the patch message *or* in comments.\n          \n          \n            \n            > \u2757 Please note that if you have some specific implementation detail you'd like\n          \n          \n            \n            to document, you should do so in the patch message *or* in comments.\n          \n      \n    \n    \n  \n\nPlacing noteworthy messages in blockquotes will make them more noticeable than just an emoji at the start of the sentence", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r454713489", "createdAt": "2020-07-15T00:04:35Z", "author": {"login": "granny"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which\n+are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n+`homebrew` (macOS / Linux), and more:\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is made to be built on top of patches applied on top of Spigot in what are\n+essentially submodules within the repository. These are centered around:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` (the `Spigot-API`/`Bukkit` for Paper);\n+- `Paper-MojangAPI` (API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier));\n+- `Paper-Server` (the `Spigot`/`CraftBukkit` for Paper).\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+\u2757 Please note that if you have some specific implementation detail you'd like\n+to document, you should do so in the patch message *or* in comments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MDM2NA==", "bodyText": "The block quotes are (sadly) not rendered in GitHub, but I've changed to use them for anyone viewing the document in something like IntelliJ's markdown previewer.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455060364", "createdAt": "2020-07-15T13:41:42Z", "author": {"login": "Proximyst"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which\n+are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n+`homebrew` (macOS / Linux), and more:\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is made to be built on top of patches applied on top of Spigot in what are\n+essentially submodules within the repository. These are centered around:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` (the `Spigot-API`/`Bukkit` for Paper);\n+- `Paper-MojangAPI` (API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier));\n+- `Paper-Server` (the `Spigot`/`CraftBukkit` for Paper).\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+\u2757 Please note that if you have some specific implementation detail you'd like\n+to document, you should do so in the patch message *or* in comments.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxMzQ4OQ=="}, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjEzNTc2OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowNDo1NVrOGxpg9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowNDo1NVrOGxpg9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxMzU5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u2757 While in the middle of an edit, you will not be able to compile unless you\n          \n          \n            \n            *also* reset the opposing module(s) to a related commit. In the API's case, you\n          \n          \n            \n            must reset the Server, and reset the API if you're editing the Server.\n          \n          \n            \n            > \u2757 While in the middle of an edit, you will not be able to compile unless you\n          \n          \n            \n            *also* reset the opposing module(s) to a related commit. In the API's case, you\n          \n          \n            \n            must reset the Server, and reset the API if you're editing the Server.\n          \n      \n    \n    \n  \n\nPlacing noteworthy messages in blockquotes will make them more noticeable than just an emoji at the start of the sentence", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r454713591", "createdAt": "2020-07-15T00:04:55Z", "author": {"login": "granny"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which\n+are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n+`homebrew` (macOS / Linux), and more:\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is made to be built on top of patches applied on top of Spigot in what are\n+essentially submodules within the repository. These are centered around:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` (the `Spigot-API`/`Bukkit` for Paper);\n+- `Paper-MojangAPI` (API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier));\n+- `Paper-Server` (the `Spigot`/`CraftBukkit` for Paper).\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+\u2757 Please note that if you have some specific implementation detail you'd like\n+to document, you should do so in the patch message *or* in comments.\n \n ## Modifying Patches\n+\n Modifying previous patches is a bit more complex:\n \n ### Method 1\n-This method works by temporarily resetting HEAD to the desired commit to edit using rebase.\n \n-However, while in the middle of an edit, unless you also reset your API to a related commit, you will not be able to compile.\n+This method works by temporarily resetting your `HEAD` to the desired commit to\n+edit it using `git rebase`.\n+\n+\u2757 While in the middle of an edit, you will not be able to compile unless you\n+*also* reset the opposing module(s) to a related commit. In the API's case, you\n+must reset the Server, and reset the API if you're editing the Server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjEzODkxOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowNjoyMFrOGxpitQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowNjoyMFrOGxpitQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxNDAzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u2757 This change is temporary! **DO NOT COMMIT CHANGES TO THIS FILE!**  \n          \n          \n            \n            > \u2757 This change is temporary! **DO NOT COMMIT CHANGES TO THIS FILE!**  \n          \n      \n    \n    \n  \n\nPlacing noteworthy messages in blockquotes will make them more noticeable than just an emoji at the start of the sentence", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r454714037", "createdAt": "2020-07-15T00:06:20Z", "author": {"login": "granny"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -210,32 +355,134 @@ public boolean pushedByWater() {\n     return true;\n }\n ```\n-While they may not always be done in exactly the same way each time, the general goal is always to improve readability and maintainability, so use your best judgement.\n+\n+While they may not always be done in exactly the same way each time, the general\n+goal is always to improve readability and maintainability, so use your best\n+judgement and do what fits best in your situation.\n \n ## Configuration files\n-To use a configurable value in your patch, add a new entry in either ```PaperConfig``` or ```PaperWorldConfig```. Use the former if a value must remain the same throughout all worlds, or the latter if it can change between worlds. The latter is preferred whenever possible.\n \n-### PaperConfig example:\n+To use a configurable value in your patch, add a new entry in either the\n+`PaperConfig` or `PaperWorldConfig` classes. Use the former (`PaperConfig`) if\n+a value must remain the same throughout all worlds, or the latter if it can\n+change between worlds. The latter is preferred whenever possible.\n+\n+### PaperConfig example\n+\n ```java\n public static boolean saveEmptyScoreboardTeams = false;\n private static void saveEmptyScoreboardTeams() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     saveEmptyScoreboardTeams = getBoolean(\"settings.save-empty-scoreboard-teams\", false);\n }\n ```\n-Notice that the field is always public, but the setter is always private. This is important to the way the configuration generation system works. To access this value, reference it as you would any other static value:\n+\n+Notice that the field is always public, but the setter is always private. This\n+is important to the way the configuration generation system works. To access\n+this value, reference it as you would any other static value:\n+\n ```java\n if (!PaperConfig.saveEmptyScoreboardTeams) {\n ```\n \n-### PaperWorldConfig example:\n+It is often preferred that you use the fully qualified name for the\n+configuration class when accessing it, like so:\n+`com.destroystokyo.paper.PaperConfig.valueHere`.  \n+If this is preferred, a developer for Paper might just fix that before merging,\n+but it's always nice if you make it a habit where you only need 1-2 lines\n+changed.\n+\n+### PaperWorldConfig example\n+\n ```java\n public boolean useInhabitedTime = true;\n private void useInhabitedTime() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     useInhabitedTime = getBoolean(\"use-chunk-inhabited-timer\", true);\n }\n ```\n-Again, notice that the field is always public, but the setter is always private. To access this value, you'll need an instance of the ```net.minecraft.World``` object:\n+\n+Again, notice that the field is always public, but the setter is always private.\n+To access this value, you'll need an instance of the `net.minecraft.World`\n+object:\n \n ```java\n return this.world.paperConfig.useInhabitedTime ? this.w : 0;\n ```\n+\n+## Frequently Asked Questions\n+\n+### I can't find the NMS file I need!\n+\n+By default, Paper (and upstream) only import files we make changes to. If you\n+would like to make changes to a file that isn't present in `Paper-Server`'s\n+source directory, you just need to add it to our import script ran during the\n+patching process.\n+\n+1. Save (rebuild) any patches you are in the middle of working on! Their\n+progress will be lost if you do not;\n+1. Identify the name(s) of the file(s) you want to import.\n+   - A complete list of all possible file names can be found at\n+   `./work/Minecraft/$MCVER/spigot/net/minecraft/server`. You might find\n+   [MiniMappingViewer] very useful to find the file you need.\n+1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to\n+the script. Skip to the 2nd last header and follow the instructions there;\n+1. Re-patch the server `./paper patch`;\n+1. Edit away!\n+\n+\u2757 This change is temporary! **DO NOT COMMIT CHANGES TO THIS FILE!**  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 526}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjEzOTMwOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowNjozNFrOGxpi9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowNjozNFrOGxpi9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxNDEwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u2757 Do not use the `/mnt/` directory in WSL! Instead, mount the WSL directories\n          \n          \n            \n            in Windows like described here:\n          \n          \n            \n            <https://www.howtogeek.com/426749/how-to-access-your-linux-wsl-files-in-windows-10/>\n          \n          \n            \n            > \u2757 Do not use the `/mnt/` directory in WSL! Instead, mount the WSL directories\n          \n          \n            \n            in Windows like described here:\n          \n          \n            \n            <https://www.howtogeek.com/426749/how-to-access-your-linux-wsl-files-in-windows-10/>\n          \n      \n    \n    \n  \n\nPlacing noteworthy messages in blockquotes will make them more noticeable than just an emoji at the start of the sentence", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r454714101", "createdAt": "2020-07-15T00:06:34Z", "author": {"login": "granny"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -210,32 +355,134 @@ public boolean pushedByWater() {\n     return true;\n }\n ```\n-While they may not always be done in exactly the same way each time, the general goal is always to improve readability and maintainability, so use your best judgement.\n+\n+While they may not always be done in exactly the same way each time, the general\n+goal is always to improve readability and maintainability, so use your best\n+judgement and do what fits best in your situation.\n \n ## Configuration files\n-To use a configurable value in your patch, add a new entry in either ```PaperConfig``` or ```PaperWorldConfig```. Use the former if a value must remain the same throughout all worlds, or the latter if it can change between worlds. The latter is preferred whenever possible.\n \n-### PaperConfig example:\n+To use a configurable value in your patch, add a new entry in either the\n+`PaperConfig` or `PaperWorldConfig` classes. Use the former (`PaperConfig`) if\n+a value must remain the same throughout all worlds, or the latter if it can\n+change between worlds. The latter is preferred whenever possible.\n+\n+### PaperConfig example\n+\n ```java\n public static boolean saveEmptyScoreboardTeams = false;\n private static void saveEmptyScoreboardTeams() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     saveEmptyScoreboardTeams = getBoolean(\"settings.save-empty-scoreboard-teams\", false);\n }\n ```\n-Notice that the field is always public, but the setter is always private. This is important to the way the configuration generation system works. To access this value, reference it as you would any other static value:\n+\n+Notice that the field is always public, but the setter is always private. This\n+is important to the way the configuration generation system works. To access\n+this value, reference it as you would any other static value:\n+\n ```java\n if (!PaperConfig.saveEmptyScoreboardTeams) {\n ```\n \n-### PaperWorldConfig example:\n+It is often preferred that you use the fully qualified name for the\n+configuration class when accessing it, like so:\n+`com.destroystokyo.paper.PaperConfig.valueHere`.  \n+If this is preferred, a developer for Paper might just fix that before merging,\n+but it's always nice if you make it a habit where you only need 1-2 lines\n+changed.\n+\n+### PaperWorldConfig example\n+\n ```java\n public boolean useInhabitedTime = true;\n private void useInhabitedTime() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     useInhabitedTime = getBoolean(\"use-chunk-inhabited-timer\", true);\n }\n ```\n-Again, notice that the field is always public, but the setter is always private. To access this value, you'll need an instance of the ```net.minecraft.World``` object:\n+\n+Again, notice that the field is always public, but the setter is always private.\n+To access this value, you'll need an instance of the `net.minecraft.World`\n+object:\n \n ```java\n return this.world.paperConfig.useInhabitedTime ? this.w : 0;\n ```\n+\n+## Frequently Asked Questions\n+\n+### I can't find the NMS file I need!\n+\n+By default, Paper (and upstream) only import files we make changes to. If you\n+would like to make changes to a file that isn't present in `Paper-Server`'s\n+source directory, you just need to add it to our import script ran during the\n+patching process.\n+\n+1. Save (rebuild) any patches you are in the middle of working on! Their\n+progress will be lost if you do not;\n+1. Identify the name(s) of the file(s) you want to import.\n+   - A complete list of all possible file names can be found at\n+   `./work/Minecraft/$MCVER/spigot/net/minecraft/server`. You might find\n+   [MiniMappingViewer] very useful to find the file you need.\n+1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to\n+the script. Skip to the 2nd last header and follow the instructions there;\n+1. Re-patch the server `./paper patch`;\n+1. Edit away!\n+\n+\u2757 This change is temporary! **DO NOT COMMIT CHANGES TO THIS FILE!**  \n+Once you have made your changes to the new file, and rebuilt patches, you may\n+undo your changes to `importmcdev.sh`.\n+\n+Any file modified in a patch file gets automatically imported, so you only need\n+this temporarily to import it to create the first patch.\n+\n+To undo your changes to the file, type `git checkout scripts/importmcdev.sh`.\n+\n+### Where can I learn what this method/field does?\n+\n+For most cases, it is preferred if you use [yarn], as their license works with\n+Paper's license. If you can't do that, [MiniMappingViewer] is always around to\n+provide you with more of a general idea, *but* you cannot use the Mojang names\n+for more than understanding the code.\n+\n+[yarn] is in general more thorough than Mojang's own mappings, as they include\n+method arguments as well, whereas Mojang's do not. If you need local variables\n+to understand the code, you might be more lucky with ModCoderPack.\n+\n+For more information on the Mojang name licensing issues, check this out:\n+<https://cpw.github.io/MinecraftMappingData.html>\n+\n+### My commit doesn't need a build, what do I do?\n+\n+Well, quite simple: You add `[CI-SKIP]` to the start of your commit subject.\n+\n+This case most often applies to changes to files like `README.md`, this very\n+file (`CONTRIBUTING.md`), the `LICENSE.md` file, and so forth.\n+\n+### Patching and building is *really* slow, what can I do?\n+\n+This only applies if you're running Windows 10. If you're running a prior\n+Windows release, either update to Windows 10 or move to macOS/Linux/BSD.\n+\n+To speed up the programs used, you have to get WSL 2. This is available in\n+Windows 10 v2004, build 19041 or higher. Check your version by running `winver`\n+in the run window (Windows key + R). If you're out of date, update your system\n+with the Windows Update Assistant.\n+\n+To get WSL 2, follow the information at this link:\n+<https://docs.microsoft.com/en-us/windows/wsl/install-win10>\n+\n+You will most likely get most out of using the Ubuntu apps. Once it's set up,\n+install the required toolswith `sudo apt-get update && sudo apt-get install\n+git patch default-jdk maven -y`. You can now clone the repository and do\n+everything like usual.\n+\n+\u2757 Do not use the `/mnt/` directory in WSL! Instead, mount the WSL directories\n+in Windows like described here:\n+<https://www.howtogeek.com/426749/how-to-access-your-linux-wsl-files-in-windows-10/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 576}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjE0MjQyOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowODowM1rOGxpkxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowODowM1rOGxpkxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxNDU2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. If you have changes you are working on type `git stash` to store them for\n          \n          \n            \n            later;\n          \n          \n            \n            1. If you have changes you are working on, type `git stash` to store them for\n          \n          \n            \n            later;\n          \n      \n    \n    \n  \n\nmissing comma", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r454714565", "createdAt": "2020-07-15T00:08:03Z", "author": {"login": "granny"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which\n+are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n+`homebrew` (macOS / Linux), and more:\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is made to be built on top of patches applied on top of Spigot in what are\n+essentially submodules within the repository. These are centered around:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` (the `Spigot-API`/`Bukkit` for Paper);\n+- `Paper-MojangAPI` (API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier));\n+- `Paper-Server` (the `Spigot`/`CraftBukkit` for Paper).\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+\u2757 Please note that if you have some specific implementation detail you'd like\n+to document, you should do so in the patch message *or* in comments.\n \n ## Modifying Patches\n+\n Modifying previous patches is a bit more complex:\n \n ### Method 1\n-This method works by temporarily resetting HEAD to the desired commit to edit using rebase.\n \n-However, while in the middle of an edit, unless you also reset your API to a related commit, you will not be able to compile.\n+This method works by temporarily resetting your `HEAD` to the desired commit to\n+edit it using `git rebase`.\n+\n+\u2757 While in the middle of an edit, you will not be able to compile unless you\n+*also* reset the opposing module(s) to a related commit. In the API's case, you\n+must reset the Server, and reset the API if you're editing the Server.\n \n #### Using the Paper tool\n-The PaperMC build tool provides a handy command to automatically do this type of patch modification.\n \n-1. Type `./paper edit server` or `./paper edit api` depending on which project you want to edit.\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `./paper edit continue` to finish and rebuild patches.\n-1. PR your modifications back to this project.\n+The PaperMC build tool provides a handy command to automatically do this type of\n+patch modification.\n+\n+1. Type `./paper edit server` or `./paper edit api` depending on which project\n+you want to edit;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `./paper edit continue` in the root directory to finish and rebuild\n+patches;\n+1. PR your modifications back to this repository.\n+\n+#### Manual method: Stashing\n \n-#### Manual method - Stashing\n In case you need something more complex or want more control, this step-by-step instruction does\n exactly what the above slightly automated system does.\n \n-1. If you have changes you are working on type `git stash` to store them for later.\n-   - Later you can type `git stash pop` to get them back.\n-1. Type `git rebase -i upstream/upstream`\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes.\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `git add .` to add your changes.\n-1. Type `git commit --amend` to commit.\n-   - **MAKE SURE TO ADD `--amend`** or else a new patch will be created.\n-   - You can also modify the commit message here.\n-1. Type `git rebase --continue` to finish rebasing.\n-1. Type `./paper rebuild` in the main directory.\n+1. If you have changes you are working on type `git stash` to store them for\n+later;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjE0NTAxOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowOToyN1rOGxpmRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDowOToyN1rOGxpmRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxNDk1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. PR your modifications back to this repositry.\n          \n          \n            \n            1. PR your modifications back to this repository.\n          \n      \n    \n    \n  \n\nspelling mistake", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r454714950", "createdAt": "2020-07-15T00:09:27Z", "author": {"login": "granny"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which\n+are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n+`homebrew` (macOS / Linux), and more:\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is made to be built on top of patches applied on top of Spigot in what are\n+essentially submodules within the repository. These are centered around:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` (the `Spigot-API`/`Bukkit` for Paper);\n+- `Paper-MojangAPI` (API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier));\n+- `Paper-Server` (the `Spigot`/`CraftBukkit` for Paper).\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+\u2757 Please note that if you have some specific implementation detail you'd like\n+to document, you should do so in the patch message *or* in comments.\n \n ## Modifying Patches\n+\n Modifying previous patches is a bit more complex:\n \n ### Method 1\n-This method works by temporarily resetting HEAD to the desired commit to edit using rebase.\n \n-However, while in the middle of an edit, unless you also reset your API to a related commit, you will not be able to compile.\n+This method works by temporarily resetting your `HEAD` to the desired commit to\n+edit it using `git rebase`.\n+\n+\u2757 While in the middle of an edit, you will not be able to compile unless you\n+*also* reset the opposing module(s) to a related commit. In the API's case, you\n+must reset the Server, and reset the API if you're editing the Server.\n \n #### Using the Paper tool\n-The PaperMC build tool provides a handy command to automatically do this type of patch modification.\n \n-1. Type `./paper edit server` or `./paper edit api` depending on which project you want to edit.\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `./paper edit continue` to finish and rebuild patches.\n-1. PR your modifications back to this project.\n+The PaperMC build tool provides a handy command to automatically do this type of\n+patch modification.\n+\n+1. Type `./paper edit server` or `./paper edit api` depending on which project\n+you want to edit;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `./paper edit continue` in the root directory to finish and rebuild\n+patches;\n+1. PR your modifications back to this repository.\n+\n+#### Manual method: Stashing\n \n-#### Manual method - Stashing\n In case you need something more complex or want more control, this step-by-step instruction does\n exactly what the above slightly automated system does.\n \n-1. If you have changes you are working on type `git stash` to store them for later.\n-   - Later you can type `git stash pop` to get them back.\n-1. Type `git rebase -i upstream/upstream`\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes.\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `git add .` to add your changes.\n-1. Type `git commit --amend` to commit.\n-   - **MAKE SURE TO ADD `--amend`** or else a new patch will be created.\n-   - You can also modify the commit message here.\n-1. Type `git rebase --continue` to finish rebasing.\n-1. Type `./paper rebuild` in the main directory.\n+1. If you have changes you are working on type `git stash` to store them for\n+later;\n+   - You can type `git stash pop` to get them back at any point.\n+1. Type `git rebase -i upstream/upstream`;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `git add .` to add your changes;\n+1. Type `git commit --amend` to commit;\n+   - **Make sure to add `--amend`** or else a new patch will be created.\n+   - You can also modify the commit message and author here.\n+1. Type `git rebase --continue` to finish rebasing;\n+1. Type `./paper rebuild` in the root directory;\n    - This will modify the appropriate patches based on your commits.\n-1. PR your modifications back to this project.\n+1. PR your modifications back to this repositry.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjE1NDc3OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDoxNDoyOFrOGxpr8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDoxNDoyOFrOGxpr8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxNjQwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - You can put a messages with a change if it isn't obvious, like this:\n          \n          \n            \n            - You can put markings with a comment if it isn't obvious, like this:\n          \n      \n    \n    \n  \n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - You can put a messages with a change if it isn't obvious, like this:\n          \n          \n            \n            - You can put messages with a change if it isn't obvious, like this:\n          \n      \n    \n    \n  \n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - You can put a messages with a change if it isn't obvious, like this:\n          \n          \n            \n            - You can put an explanation after the marker if it isn't obvious, like this:\n          \n      \n    \n    \n  \n\nwording suggestions", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r454716401", "createdAt": "2020-07-15T00:14:28Z", "author": {"login": "granny"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which\n+are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n+`homebrew` (macOS / Linux), and more:\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is made to be built on top of patches applied on top of Spigot in what are\n+essentially submodules within the repository. These are centered around:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` (the `Spigot-API`/`Bukkit` for Paper);\n+- `Paper-MojangAPI` (API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier));\n+- `Paper-Server` (the `Spigot`/`CraftBukkit` for Paper).\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+\u2757 Please note that if you have some specific implementation detail you'd like\n+to document, you should do so in the patch message *or* in comments.\n \n ## Modifying Patches\n+\n Modifying previous patches is a bit more complex:\n \n ### Method 1\n-This method works by temporarily resetting HEAD to the desired commit to edit using rebase.\n \n-However, while in the middle of an edit, unless you also reset your API to a related commit, you will not be able to compile.\n+This method works by temporarily resetting your `HEAD` to the desired commit to\n+edit it using `git rebase`.\n+\n+\u2757 While in the middle of an edit, you will not be able to compile unless you\n+*also* reset the opposing module(s) to a related commit. In the API's case, you\n+must reset the Server, and reset the API if you're editing the Server.\n \n #### Using the Paper tool\n-The PaperMC build tool provides a handy command to automatically do this type of patch modification.\n \n-1. Type `./paper edit server` or `./paper edit api` depending on which project you want to edit.\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `./paper edit continue` to finish and rebuild patches.\n-1. PR your modifications back to this project.\n+The PaperMC build tool provides a handy command to automatically do this type of\n+patch modification.\n+\n+1. Type `./paper edit server` or `./paper edit api` depending on which project\n+you want to edit;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `./paper edit continue` in the root directory to finish and rebuild\n+patches;\n+1. PR your modifications back to this repository.\n+\n+#### Manual method: Stashing\n \n-#### Manual method - Stashing\n In case you need something more complex or want more control, this step-by-step instruction does\n exactly what the above slightly automated system does.\n \n-1. If you have changes you are working on type `git stash` to store them for later.\n-   - Later you can type `git stash pop` to get them back.\n-1. Type `git rebase -i upstream/upstream`\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes.\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `git add .` to add your changes.\n-1. Type `git commit --amend` to commit.\n-   - **MAKE SURE TO ADD `--amend`** or else a new patch will be created.\n-   - You can also modify the commit message here.\n-1. Type `git rebase --continue` to finish rebasing.\n-1. Type `./paper rebuild` in the main directory.\n+1. If you have changes you are working on type `git stash` to store them for\n+later;\n+   - You can type `git stash pop` to get them back at any point.\n+1. Type `git rebase -i upstream/upstream`;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `git add .` to add your changes;\n+1. Type `git commit --amend` to commit;\n+   - **Make sure to add `--amend`** or else a new patch will be created.\n+   - You can also modify the commit message and author here.\n+1. Type `git rebase --continue` to finish rebasing;\n+1. Type `./paper rebuild` in the root directory;\n    - This will modify the appropriate patches based on your commits.\n-1. PR your modifications back to this project.\n+1. PR your modifications back to this repositry.\n \n-### Method 2 (sometimes easier) - Manually moving commits\n-If you are simply editing a more recent commit or your change is small, simply making the change at HEAD and then moving the commit after you have tested it may be easier.\n+### Method 2 - Fixup commits\n \n-This method has the benefit of being able to compile to test your change without messing with your API HEAD.\n+If you are simply editing a more recent commit or your change is small, simply\n+making the change at HEAD and then moving the commit after you have tested it\n+may be easier.\n \n-1. Make your change while at HEAD\n-1. Make a temporary commit. You don't need to make a message for this.\n-1. Type `git rebase -i upstream/upstream`, move (cut) your temporary commit and move it under the line of the patch you wish to modify.\n-1. Change the `pick` with `f` (fixup) or `s` (squash) if you need to edit the commit message \n-1. Type `./paper rebuild` in the main directory\n-   - This will modify the appropriate patches based on your commits\n-1. PR your modifications to github\n+This method has the benefit of being able to compile to test your change without\n+messing with your HEADs.\n \n-### Method 3 - Fixup Commits\n-This is the automated way of doing Method 2. Basically, you make your changes at HEAD, but use fixup commits to modify earlier patches and git will rebase the commits to the right place and squash them.\n+#### Manual method\n \n-1. Make your change while at HEAD\n-1. Make a fixup commit. `git commit -a --fixup <hashOfPatchToFix>`. You can get the hash by looking at `git log` or `git blame`, your IDE can assist you too.  \n-Alternatively, if you only know the name of the patch, you can do `git commit -a --fixup \"Subject of Patch name\"`\n-1. Rebase with autosquash: `git rebase --autosquash -i upstream/upstream`. It will move your fixup commit to the right place.\n-1. Type `./paper rebuild` in the main directory\n-   - This will modify the appropriate patches based on your commits\n-1. PR your modifications to github\n+1. Make your change while at HEAD;\n+1. Make a temporary commit. You don't need to make a message for this;\n+1. Type `git rebase -i upstream/upstream`, move (cut) your temporary commit and\n+move it under the line of the patch you wish to modify;\n+1. Change the `pick` to the appropriate action:\n+   1. `f`/`fixup`: Merge your changes into the patch without touching the\n+  message.\n+   1. `s`/`squash`: Merge your changes into the patch and use your commit message\n+  and subject.\n+1. Type `./paper rebuild` in the root directory;\n+   - This will modify the appropriate patches based on your commits.\n+1. PR your modifications back to this repository.\n+\n+#### Automatic method\n+\n+1. Make your change while at HEAD;\n+1. Make a fixup commit. `git commit -a --fixup <hashOfPatchToFix>`;\n+   - You can also use `--squash` instead of `--fixup` if you want the commit\n+   message to also be changed.\n+   - You can get the hash by looking at `git log` or `git blame`; your IDE can\n+  assist you too.\n+   - Alternatively, if you only know the name of the patch, you can do\n+  `git commit -a --fixup \"Subject of Patch name\"`.\n+1. Rebase with autosquash: `git rebase --autosquash -i upstream/upstream`.\n+This will automatically move your fixup commit to the right place, and you just\n+need to \"save\" the changes.\n+1. Type `./paper rebuild` in the root directory;\n+   - This will modify the appropriate patches based on your commits.\n+1. PR your modifications back to this repository.\n \n ## PR Policy\n-We'll accept changes that make sense. You should be able to justify their existence, along with any maintenance costs that come with them. Remember, these changes will affect everyone who runs Paper, not just you and your server.\n-While we will fix minor formatting issues, you should stick to the guide below when making and submitting changes.\n+\n+We'll accept changes that make sense. You should be able to justify their\n+existance, along with any maintenance costs that come with them. Using\n+obfuscation helpers helps in the maintenance costs. Remember that these changes\n+will affect everyone who runs Paper, not just you and your server.\n+\n+While we will fix minor formatting issues, you should stick to the guide below\n+when making and submitting changes.\n \n ## Formatting\n-All modifications to non-Paper files should be marked\n-- Multi line changes start with `// Paper start` and end with `// Paper end`\n-- You can put a messages with a change if it isn't obvious, like this: `// Paper start - reason`\n-  - Should generally be about the reason the change was made, what it was before, or what the change is\n-  - Multi-line messages should start with `// Paper start` and use `/* Multi line message here */` for the message itself\n-- Single line changes should have `// Paper` or `// Paper - reason`\n-- For example:\n-````java\n+\n+All modifications to non-Paper files should be marked.\n+\n+- Multi line changes start with `// Paper start` and end with `// Paper end`;\n+- You can put a messages with a change if it isn't obvious, like this:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 349}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjE1Nzg1OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDoxNTo1OVrOGxpttA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDoxNTo1OVrOGxpttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxNjg1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - When in doubt or the code around is in an a clearly different style, use the\n          \n          \n            \n            same style as the surrounding code.\n          \n          \n            \n            - When in doubt or the code around your change is in an a clearly different style, use the\n          \n          \n            \n            same style as the surrounding code.\n          \n      \n    \n    \n  \n\nwords", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r454716852", "createdAt": "2020-07-15T00:15:59Z", "author": {"login": "granny"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -147,24 +270,40 @@ entity.b();\n Location spawnLocation = ((CraftWorld)entity.getWorld()).getSpawnLocation();\n entity.getWorld().explode(new BlockPosition(spawnLocation.getX(), spawnLocation.getY(), spawnLocation.getZ()));\n // Paper end\n-````\n-- We generally follow usual java style, or what is programmed into most IDEs and formatters by default\n-  - This is also known as oracle style\n-  - It is fine to go over 80 lines as long as it doesn't hurt readability\n-  - There are exceptions, especially in Spigot-related files\n-  - When in doubt, use the same style as the surrounding code\n-  \n+```\n+\n+We generally follow usual Java style (aka. Oracle style), or what is programmed\n+into most IDEs and formatters by default. There are a few notes, however:\n+- It is fine to go over 80 lines as long as it doesn't hurt readability.  \n+There are exceptions, especially in Spigot-related files\n+- When in doubt or the code around is in an a clearly different style, use the\n+same style as the surrounding code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 381}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjE2OTIxOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDoyMjowN1rOGxp0OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDoyMjowN1rOGxp0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxODUyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Or it may be as complex as forwarding an entire method so that it can be overriden later:\n          \n          \n            \n            Or it may be as complex as forwarding an entire method so that it can be overridden later:\n          \n      \n    \n    \n  \n\nspelling", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r454718520", "createdAt": "2020-07-15T00:22:07Z", "author": {"login": "granny"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -192,12 +331,18 @@ index a92bf8967..d0ab87d0f 100644\n ```\n \n ## Obfuscation Helpers\n-In an effort to make future updates easier on ourselves, Paper tries to use obfuscation helpers whenever possible. The purpose of these helpers is to make the code more readable. These helpers should be be made as easy to inline as possible by the JVM whenever possible.\n+\n+In an effort to make future updates easier on ourselves, Paper tries to use\n+obfuscation helpers whenever possible. The purpose of these helpers is to make\n+the code more readable and maintainable. These helpers should be be made as easy\n+to inline as possible by the JVM whenever possible.\n \n An obfuscation helper to get an obfuscated field may be as simple as something like this:\n+\n ```java\n public final int getStuckArrows() { return this.bY(); } // Paper - OBFHELPER\n ```\n+\n Or it may be as complex as forwarding an entire method so that it can be overriden later:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 436}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjE3NzAyOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDoyNjoxNFrOGxp4qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwMDoyNjoxNFrOGxp4qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxOTY1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You will most likely get most out of using the Ubuntu apps. Once it's set up,\n          \n          \n            \n            install the required toolswith `sudo apt-get update && sudo apt-get install\n          \n          \n            \n            git patch default-jdk maven -y`. You can now clone the repository and do\n          \n          \n            \n            everything like usual.\n          \n          \n            \n            You will most likely get the most out of it by using the Ubuntu apps. Once it's set up,\n          \n          \n            \n            install the required tools with `sudo apt-get update && sudo apt-get install\n          \n          \n            \n            git patch default-jdk maven -y`. You can now clone the repository and do\n          \n          \n            \n            everything like usual.\n          \n      \n    \n    \n  \n\nwording and spacing", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r454719657", "createdAt": "2020-07-15T00:26:14Z", "author": {"login": "granny"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -210,32 +355,134 @@ public boolean pushedByWater() {\n     return true;\n }\n ```\n-While they may not always be done in exactly the same way each time, the general goal is always to improve readability and maintainability, so use your best judgement.\n+\n+While they may not always be done in exactly the same way each time, the general\n+goal is always to improve readability and maintainability, so use your best\n+judgement and do what fits best in your situation.\n \n ## Configuration files\n-To use a configurable value in your patch, add a new entry in either ```PaperConfig``` or ```PaperWorldConfig```. Use the former if a value must remain the same throughout all worlds, or the latter if it can change between worlds. The latter is preferred whenever possible.\n \n-### PaperConfig example:\n+To use a configurable value in your patch, add a new entry in either the\n+`PaperConfig` or `PaperWorldConfig` classes. Use the former (`PaperConfig`) if\n+a value must remain the same throughout all worlds, or the latter if it can\n+change between worlds. The latter is preferred whenever possible.\n+\n+### PaperConfig example\n+\n ```java\n public static boolean saveEmptyScoreboardTeams = false;\n private static void saveEmptyScoreboardTeams() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     saveEmptyScoreboardTeams = getBoolean(\"settings.save-empty-scoreboard-teams\", false);\n }\n ```\n-Notice that the field is always public, but the setter is always private. This is important to the way the configuration generation system works. To access this value, reference it as you would any other static value:\n+\n+Notice that the field is always public, but the setter is always private. This\n+is important to the way the configuration generation system works. To access\n+this value, reference it as you would any other static value:\n+\n ```java\n if (!PaperConfig.saveEmptyScoreboardTeams) {\n ```\n \n-### PaperWorldConfig example:\n+It is often preferred that you use the fully qualified name for the\n+configuration class when accessing it, like so:\n+`com.destroystokyo.paper.PaperConfig.valueHere`.  \n+If this is preferred, a developer for Paper might just fix that before merging,\n+but it's always nice if you make it a habit where you only need 1-2 lines\n+changed.\n+\n+### PaperWorldConfig example\n+\n ```java\n public boolean useInhabitedTime = true;\n private void useInhabitedTime() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     useInhabitedTime = getBoolean(\"use-chunk-inhabited-timer\", true);\n }\n ```\n-Again, notice that the field is always public, but the setter is always private. To access this value, you'll need an instance of the ```net.minecraft.World``` object:\n+\n+Again, notice that the field is always public, but the setter is always private.\n+To access this value, you'll need an instance of the `net.minecraft.World`\n+object:\n \n ```java\n return this.world.paperConfig.useInhabitedTime ? this.w : 0;\n ```\n+\n+## Frequently Asked Questions\n+\n+### I can't find the NMS file I need!\n+\n+By default, Paper (and upstream) only import files we make changes to. If you\n+would like to make changes to a file that isn't present in `Paper-Server`'s\n+source directory, you just need to add it to our import script ran during the\n+patching process.\n+\n+1. Save (rebuild) any patches you are in the middle of working on! Their\n+progress will be lost if you do not;\n+1. Identify the name(s) of the file(s) you want to import.\n+   - A complete list of all possible file names can be found at\n+   `./work/Minecraft/$MCVER/spigot/net/minecraft/server`. You might find\n+   [MiniMappingViewer] very useful to find the file you need.\n+1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to\n+the script. Skip to the 2nd last header and follow the instructions there;\n+1. Re-patch the server `./paper patch`;\n+1. Edit away!\n+\n+\u2757 This change is temporary! **DO NOT COMMIT CHANGES TO THIS FILE!**  \n+Once you have made your changes to the new file, and rebuilt patches, you may\n+undo your changes to `importmcdev.sh`.\n+\n+Any file modified in a patch file gets automatically imported, so you only need\n+this temporarily to import it to create the first patch.\n+\n+To undo your changes to the file, type `git checkout scripts/importmcdev.sh`.\n+\n+### Where can I learn what this method/field does?\n+\n+For most cases, it is preferred if you use [yarn], as their license works with\n+Paper's license. If you can't do that, [MiniMappingViewer] is always around to\n+provide you with more of a general idea, *but* you cannot use the Mojang names\n+for more than understanding the code.\n+\n+[yarn] is in general more thorough than Mojang's own mappings, as they include\n+method arguments as well, whereas Mojang's do not. If you need local variables\n+to understand the code, you might be more lucky with ModCoderPack.\n+\n+For more information on the Mojang name licensing issues, check this out:\n+<https://cpw.github.io/MinecraftMappingData.html>\n+\n+### My commit doesn't need a build, what do I do?\n+\n+Well, quite simple: You add `[CI-SKIP]` to the start of your commit subject.\n+\n+This case most often applies to changes to files like `README.md`, this very\n+file (`CONTRIBUTING.md`), the `LICENSE.md` file, and so forth.\n+\n+### Patching and building is *really* slow, what can I do?\n+\n+This only applies if you're running Windows 10. If you're running a prior\n+Windows release, either update to Windows 10 or move to macOS/Linux/BSD.\n+\n+To speed up the programs used, you have to get WSL 2. This is available in\n+Windows 10 v2004, build 19041 or higher. Check your version by running `winver`\n+in the run window (Windows key + R). If you're out of date, update your system\n+with the Windows Update Assistant.\n+\n+To get WSL 2, follow the information at this link:\n+<https://docs.microsoft.com/en-us/windows/wsl/install-win10>\n+\n+You will most likely get most out of using the Ubuntu apps. Once it's set up,\n+install the required toolswith `sudo apt-get update && sudo apt-get install\n+git patch default-jdk maven -y`. You can now clone the repository and do\n+everything like usual.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f36c496a71b0a00fd2cfe8e99a3c0f140982e75"}, "originalPosition": 572}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODc2MjIxOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo1NzozOVrOGyCSHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo1NzozOVrOGyCSHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExOTM5MA==", "bodyText": "existence", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455119390", "createdAt": "2020-07-15T14:57:39Z", "author": {"login": "A248"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which\n+are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n+`homebrew` (macOS / Linux), and more:\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is made to be built on top of patches applied on top of Spigot in what are\n+essentially submodules within the repository. These are centered around:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` (the `Spigot-API`/`Bukkit` for Paper);\n+- `Paper-MojangAPI` (API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier));\n+- `Paper-Server` (the `Spigot`/`CraftBukkit` for Paper).\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+\u2757 Please note that if you have some specific implementation detail you'd like\n+to document, you should do so in the patch message *or* in comments.\n \n ## Modifying Patches\n+\n Modifying previous patches is a bit more complex:\n \n ### Method 1\n-This method works by temporarily resetting HEAD to the desired commit to edit using rebase.\n \n-However, while in the middle of an edit, unless you also reset your API to a related commit, you will not be able to compile.\n+This method works by temporarily resetting your `HEAD` to the desired commit to\n+edit it using `git rebase`.\n+\n+\u2757 While in the middle of an edit, you will not be able to compile unless you\n+*also* reset the opposing module(s) to a related commit. In the API's case, you\n+must reset the Server, and reset the API if you're editing the Server.\n \n #### Using the Paper tool\n-The PaperMC build tool provides a handy command to automatically do this type of patch modification.\n \n-1. Type `./paper edit server` or `./paper edit api` depending on which project you want to edit.\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `./paper edit continue` to finish and rebuild patches.\n-1. PR your modifications back to this project.\n+The PaperMC build tool provides a handy command to automatically do this type of\n+patch modification.\n+\n+1. Type `./paper edit server` or `./paper edit api` depending on which project\n+you want to edit;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `./paper edit continue` in the root directory to finish and rebuild\n+patches;\n+1. PR your modifications back to this repository.\n+\n+#### Manual method: Stashing\n \n-#### Manual method - Stashing\n In case you need something more complex or want more control, this step-by-step instruction does\n exactly what the above slightly automated system does.\n \n-1. If you have changes you are working on type `git stash` to store them for later.\n-   - Later you can type `git stash pop` to get them back.\n-1. Type `git rebase -i upstream/upstream`\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes.\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `git add .` to add your changes.\n-1. Type `git commit --amend` to commit.\n-   - **MAKE SURE TO ADD `--amend`** or else a new patch will be created.\n-   - You can also modify the commit message here.\n-1. Type `git rebase --continue` to finish rebasing.\n-1. Type `./paper rebuild` in the main directory.\n+1. If you have changes you are working on type `git stash` to store them for\n+later;\n+   - You can type `git stash pop` to get them back at any point.\n+1. Type `git rebase -i upstream/upstream`;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `git add .` to add your changes;\n+1. Type `git commit --amend` to commit;\n+   - **Make sure to add `--amend`** or else a new patch will be created.\n+   - You can also modify the commit message and author here.\n+1. Type `git rebase --continue` to finish rebasing;\n+1. Type `./paper rebuild` in the root directory;\n    - This will modify the appropriate patches based on your commits.\n-1. PR your modifications back to this project.\n+1. PR your modifications back to this repositry.\n \n-### Method 2 (sometimes easier) - Manually moving commits\n-If you are simply editing a more recent commit or your change is small, simply making the change at HEAD and then moving the commit after you have tested it may be easier.\n+### Method 2 - Fixup commits\n \n-This method has the benefit of being able to compile to test your change without messing with your API HEAD.\n+If you are simply editing a more recent commit or your change is small, simply\n+making the change at HEAD and then moving the commit after you have tested it\n+may be easier.\n \n-1. Make your change while at HEAD\n-1. Make a temporary commit. You don't need to make a message for this.\n-1. Type `git rebase -i upstream/upstream`, move (cut) your temporary commit and move it under the line of the patch you wish to modify.\n-1. Change the `pick` with `f` (fixup) or `s` (squash) if you need to edit the commit message \n-1. Type `./paper rebuild` in the main directory\n-   - This will modify the appropriate patches based on your commits\n-1. PR your modifications to github\n+This method has the benefit of being able to compile to test your change without\n+messing with your HEADs.\n \n-### Method 3 - Fixup Commits\n-This is the automated way of doing Method 2. Basically, you make your changes at HEAD, but use fixup commits to modify earlier patches and git will rebase the commits to the right place and squash them.\n+#### Manual method\n \n-1. Make your change while at HEAD\n-1. Make a fixup commit. `git commit -a --fixup <hashOfPatchToFix>`. You can get the hash by looking at `git log` or `git blame`, your IDE can assist you too.  \n-Alternatively, if you only know the name of the patch, you can do `git commit -a --fixup \"Subject of Patch name\"`\n-1. Rebase with autosquash: `git rebase --autosquash -i upstream/upstream`. It will move your fixup commit to the right place.\n-1. Type `./paper rebuild` in the main directory\n-   - This will modify the appropriate patches based on your commits\n-1. PR your modifications to github\n+1. Make your change while at HEAD;\n+1. Make a temporary commit. You don't need to make a message for this;\n+1. Type `git rebase -i upstream/upstream`, move (cut) your temporary commit and\n+move it under the line of the patch you wish to modify;\n+1. Change the `pick` to the appropriate action:\n+   1. `f`/`fixup`: Merge your changes into the patch without touching the\n+  message.\n+   1. `s`/`squash`: Merge your changes into the patch and use your commit message\n+  and subject.\n+1. Type `./paper rebuild` in the root directory;\n+   - This will modify the appropriate patches based on your commits.\n+1. PR your modifications back to this repository.\n+\n+#### Automatic method\n+\n+1. Make your change while at HEAD;\n+1. Make a fixup commit. `git commit -a --fixup <hashOfPatchToFix>`;\n+   - You can also use `--squash` instead of `--fixup` if you want the commit\n+   message to also be changed.\n+   - You can get the hash by looking at `git log` or `git blame`; your IDE can\n+  assist you too.\n+   - Alternatively, if you only know the name of the patch, you can do\n+  `git commit -a --fixup \"Subject of Patch name\"`.\n+1. Rebase with autosquash: `git rebase --autosquash -i upstream/upstream`.\n+This will automatically move your fixup commit to the right place, and you just\n+need to \"save\" the changes.\n+1. Type `./paper rebuild` in the root directory;\n+   - This will modify the appropriate patches based on your commits.\n+1. PR your modifications back to this repository.\n \n ## PR Policy\n-We'll accept changes that make sense. You should be able to justify their existence, along with any maintenance costs that come with them. Remember, these changes will affect everyone who runs Paper, not just you and your server.\n-While we will fix minor formatting issues, you should stick to the guide below when making and submitting changes.\n+\n+We'll accept changes that make sense. You should be able to justify their\n+existance, along with any maintenance costs that come with them. Using", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODc2NDUxOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo1ODoxMFrOGyCTlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo1ODoxMFrOGyCTlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExOTc2Nw==", "bodyText": "helps -> aids", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455119767", "createdAt": "2020-07-15T14:58:10Z", "author": {"login": "A248"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which\n+are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n+`homebrew` (macOS / Linux), and more:\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is made to be built on top of patches applied on top of Spigot in what are\n+essentially submodules within the repository. These are centered around:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` (the `Spigot-API`/`Bukkit` for Paper);\n+- `Paper-MojangAPI` (API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier));\n+- `Paper-Server` (the `Spigot`/`CraftBukkit` for Paper).\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+\u2757 Please note that if you have some specific implementation detail you'd like\n+to document, you should do so in the patch message *or* in comments.\n \n ## Modifying Patches\n+\n Modifying previous patches is a bit more complex:\n \n ### Method 1\n-This method works by temporarily resetting HEAD to the desired commit to edit using rebase.\n \n-However, while in the middle of an edit, unless you also reset your API to a related commit, you will not be able to compile.\n+This method works by temporarily resetting your `HEAD` to the desired commit to\n+edit it using `git rebase`.\n+\n+\u2757 While in the middle of an edit, you will not be able to compile unless you\n+*also* reset the opposing module(s) to a related commit. In the API's case, you\n+must reset the Server, and reset the API if you're editing the Server.\n \n #### Using the Paper tool\n-The PaperMC build tool provides a handy command to automatically do this type of patch modification.\n \n-1. Type `./paper edit server` or `./paper edit api` depending on which project you want to edit.\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `./paper edit continue` to finish and rebuild patches.\n-1. PR your modifications back to this project.\n+The PaperMC build tool provides a handy command to automatically do this type of\n+patch modification.\n+\n+1. Type `./paper edit server` or `./paper edit api` depending on which project\n+you want to edit;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `./paper edit continue` in the root directory to finish and rebuild\n+patches;\n+1. PR your modifications back to this repository.\n+\n+#### Manual method: Stashing\n \n-#### Manual method - Stashing\n In case you need something more complex or want more control, this step-by-step instruction does\n exactly what the above slightly automated system does.\n \n-1. If you have changes you are working on type `git stash` to store them for later.\n-   - Later you can type `git stash pop` to get them back.\n-1. Type `git rebase -i upstream/upstream`\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes.\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `git add .` to add your changes.\n-1. Type `git commit --amend` to commit.\n-   - **MAKE SURE TO ADD `--amend`** or else a new patch will be created.\n-   - You can also modify the commit message here.\n-1. Type `git rebase --continue` to finish rebasing.\n-1. Type `./paper rebuild` in the main directory.\n+1. If you have changes you are working on type `git stash` to store them for\n+later;\n+   - You can type `git stash pop` to get them back at any point.\n+1. Type `git rebase -i upstream/upstream`;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `git add .` to add your changes;\n+1. Type `git commit --amend` to commit;\n+   - **Make sure to add `--amend`** or else a new patch will be created.\n+   - You can also modify the commit message and author here.\n+1. Type `git rebase --continue` to finish rebasing;\n+1. Type `./paper rebuild` in the root directory;\n    - This will modify the appropriate patches based on your commits.\n-1. PR your modifications back to this project.\n+1. PR your modifications back to this repositry.\n \n-### Method 2 (sometimes easier) - Manually moving commits\n-If you are simply editing a more recent commit or your change is small, simply making the change at HEAD and then moving the commit after you have tested it may be easier.\n+### Method 2 - Fixup commits\n \n-This method has the benefit of being able to compile to test your change without messing with your API HEAD.\n+If you are simply editing a more recent commit or your change is small, simply\n+making the change at HEAD and then moving the commit after you have tested it\n+may be easier.\n \n-1. Make your change while at HEAD\n-1. Make a temporary commit. You don't need to make a message for this.\n-1. Type `git rebase -i upstream/upstream`, move (cut) your temporary commit and move it under the line of the patch you wish to modify.\n-1. Change the `pick` with `f` (fixup) or `s` (squash) if you need to edit the commit message \n-1. Type `./paper rebuild` in the main directory\n-   - This will modify the appropriate patches based on your commits\n-1. PR your modifications to github\n+This method has the benefit of being able to compile to test your change without\n+messing with your HEADs.\n \n-### Method 3 - Fixup Commits\n-This is the automated way of doing Method 2. Basically, you make your changes at HEAD, but use fixup commits to modify earlier patches and git will rebase the commits to the right place and squash them.\n+#### Manual method\n \n-1. Make your change while at HEAD\n-1. Make a fixup commit. `git commit -a --fixup <hashOfPatchToFix>`. You can get the hash by looking at `git log` or `git blame`, your IDE can assist you too.  \n-Alternatively, if you only know the name of the patch, you can do `git commit -a --fixup \"Subject of Patch name\"`\n-1. Rebase with autosquash: `git rebase --autosquash -i upstream/upstream`. It will move your fixup commit to the right place.\n-1. Type `./paper rebuild` in the main directory\n-   - This will modify the appropriate patches based on your commits\n-1. PR your modifications to github\n+1. Make your change while at HEAD;\n+1. Make a temporary commit. You don't need to make a message for this;\n+1. Type `git rebase -i upstream/upstream`, move (cut) your temporary commit and\n+move it under the line of the patch you wish to modify;\n+1. Change the `pick` to the appropriate action:\n+   1. `f`/`fixup`: Merge your changes into the patch without touching the\n+  message.\n+   1. `s`/`squash`: Merge your changes into the patch and use your commit message\n+  and subject.\n+1. Type `./paper rebuild` in the root directory;\n+   - This will modify the appropriate patches based on your commits.\n+1. PR your modifications back to this repository.\n+\n+#### Automatic method\n+\n+1. Make your change while at HEAD;\n+1. Make a fixup commit. `git commit -a --fixup <hashOfPatchToFix>`;\n+   - You can also use `--squash` instead of `--fixup` if you want the commit\n+   message to also be changed.\n+   - You can get the hash by looking at `git log` or `git blame`; your IDE can\n+  assist you too.\n+   - Alternatively, if you only know the name of the patch, you can do\n+  `git commit -a --fixup \"Subject of Patch name\"`.\n+1. Rebase with autosquash: `git rebase --autosquash -i upstream/upstream`.\n+This will automatically move your fixup commit to the right place, and you just\n+need to \"save\" the changes.\n+1. Type `./paper rebuild` in the root directory;\n+   - This will modify the appropriate patches based on your commits.\n+1. PR your modifications back to this repository.\n \n ## PR Policy\n-We'll accept changes that make sense. You should be able to justify their existence, along with any maintenance costs that come with them. Remember, these changes will affect everyone who runs Paper, not just you and your server.\n-While we will fix minor formatting issues, you should stick to the guide below when making and submitting changes.\n+\n+We'll accept changes that make sense. You should be able to justify their\n+existance, along with any maintenance costs that come with them. Using\n+obfuscation helpers helps in the maintenance costs. Remember that these changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 330}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODc2ODAxOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo1ODo1OVrOGyCVxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyNTo0NFrOGyDgQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMDMyNw==", "bodyText": "Organization -> organization", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455120327", "createdAt": "2020-07-15T14:58:59Z", "author": {"login": "A248"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNTM4OQ==", "bodyText": "The original document had capital O, so I have a feeling that's on purpose.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455125389", "createdAt": "2020-07-15T15:06:15Z", "author": {"login": "Proximyst"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMDMyNw=="}, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzOTM5NQ==", "bodyText": "Alright, I see why that was done.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455139395", "createdAt": "2020-07-15T15:25:44Z", "author": {"login": "A248"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMDMyNw=="}, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODc3NzM0OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowMToxMVrOGyCboQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowMToxMVrOGyCboQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMTgyNQ==", "bodyText": "in an a\n\n-> in a", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455121825", "createdAt": "2020-07-15T15:01:11Z", "author": {"login": "A248"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -147,24 +270,40 @@ entity.b();\n Location spawnLocation = ((CraftWorld)entity.getWorld()).getSpawnLocation();\n entity.getWorld().explode(new BlockPosition(spawnLocation.getX(), spawnLocation.getY(), spawnLocation.getZ()));\n // Paper end\n-````\n-- We generally follow usual java style, or what is programmed into most IDEs and formatters by default\n-  - This is also known as oracle style\n-  - It is fine to go over 80 lines as long as it doesn't hurt readability\n-  - There are exceptions, especially in Spigot-related files\n-  - When in doubt, use the same style as the surrounding code\n-  \n+```\n+\n+We generally follow usual Java style (aka. Oracle style), or what is programmed\n+into most IDEs and formatters by default. There are a few notes, however:\n+- It is fine to go over 80 lines as long as it doesn't hurt readability.  \n+There are exceptions, especially in Spigot-related files\n+- When in doubt or the code around is in an a clearly different style, use the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 380}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODc4MzQ0OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowMjoyNlrOGyCfRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowMjoyNlrOGyCfRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMjc1OQ==", "bodyText": "Remove \"each time\"", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455122759", "createdAt": "2020-07-15T15:02:26Z", "author": {"login": "A248"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -210,32 +355,134 @@ public boolean pushedByWater() {\n     return true;\n }\n ```\n-While they may not always be done in exactly the same way each time, the general goal is always to improve readability and maintainability, so use your best judgement.\n+\n+While they may not always be done in exactly the same way each time, the general", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 445}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODc4ODc4OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowMzoyOVrOGyCiPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowMzoyOVrOGyCiPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMzUxNw==", "bodyText": "If this is preferred,\n\n-> If this is not done,", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455123517", "createdAt": "2020-07-15T15:03:29Z", "author": {"login": "A248"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -210,32 +355,134 @@ public boolean pushedByWater() {\n     return true;\n }\n ```\n-While they may not always be done in exactly the same way each time, the general goal is always to improve readability and maintainability, so use your best judgement.\n+\n+While they may not always be done in exactly the same way each time, the general\n+goal is always to improve readability and maintainability, so use your best\n+judgement and do what fits best in your situation.\n \n ## Configuration files\n-To use a configurable value in your patch, add a new entry in either ```PaperConfig``` or ```PaperWorldConfig```. Use the former if a value must remain the same throughout all worlds, or the latter if it can change between worlds. The latter is preferred whenever possible.\n \n-### PaperConfig example:\n+To use a configurable value in your patch, add a new entry in either the\n+`PaperConfig` or `PaperWorldConfig` classes. Use the former (`PaperConfig`) if\n+a value must remain the same throughout all worlds, or the latter if it can\n+change between worlds. The latter is preferred whenever possible.\n+\n+### PaperConfig example\n+\n ```java\n public static boolean saveEmptyScoreboardTeams = false;\n private static void saveEmptyScoreboardTeams() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     saveEmptyScoreboardTeams = getBoolean(\"settings.save-empty-scoreboard-teams\", false);\n }\n ```\n-Notice that the field is always public, but the setter is always private. This is important to the way the configuration generation system works. To access this value, reference it as you would any other static value:\n+\n+Notice that the field is always public, but the setter is always private. This\n+is important to the way the configuration generation system works. To access\n+this value, reference it as you would any other static value:\n+\n ```java\n if (!PaperConfig.saveEmptyScoreboardTeams) {\n ```\n \n-### PaperWorldConfig example:\n+It is often preferred that you use the fully qualified name for the\n+configuration class when accessing it, like so:\n+`com.destroystokyo.paper.PaperConfig.valueHere`.  \n+If this is preferred, a developer for Paper might just fix that before merging,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 482}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODg3NDkyOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyMzoxNlrOGyDY7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyMzoxNlrOGyDY7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzNzUxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            PaperMC is very happy you're willing to contribute to the projects we have, and\n          \n          \n            \n            we are very lentient with the PRs provided, but there are still some guidelines\n          \n          \n            \n            you should follow.\n          \n          \n            \n            PaperMC is happy you're willing to contribute to our projects. We are usually\n          \n          \n            \n            very lenient with all submitted PRs, but there are still some guidelines you\n          \n          \n            \n            can follow to make the approval process go more smoothly.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455137519", "createdAt": "2020-07-15T15:23:16Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODkwMDM1OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyODo1NlrOGyDorg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyODo1NlrOGyDorg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0MTU1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Paper will routinely modify your PR for you to rebase it on latest or take care\n          \n          \n            \n            of any minor nitpicks that we can just solve for you instead of making you go\n          \n          \n            \n            back for a trivial item.\n          \n          \n            \n            Paper will routinely modify your PR; Whether it's just a quick rebase or to take care\n          \n          \n            \n            of any minor nitpicks we might have. Often times it's better for us to solve these\n          \n          \n            \n            problems for you than to make you go back and forth trying to fix it yourself.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455141550", "createdAt": "2020-07-15T15:28:56Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODkxMzY3OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozMjowOFrOGyDwxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozMjowOFrOGyDwxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0MzYyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            However, if you use an Organization for the PR, this prevents Paper from doing\n          \n          \n            \n            this, and will require us to manually merge it and close the PR instead of it\n          \n          \n            \n            being marked as the purple merged.\n          \n          \n            \n            Unfortunately, if you use an organization for your PR, it prevents Paper from modifying\n          \n          \n            \n            it. This requires us to manually merge your PR; Resulting in us closing the PR itself\n          \n          \n            \n            instead of it being marked as merged.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455143621", "createdAt": "2020-07-15T15:32:08Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODkyODg1OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozNTo1MlrOGyD6Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozNTo1MlrOGyD6Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NjAzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We much prefer to have merged PR's show as merged, so please do not use\n          \n          \n            \n            organizations repositories for PR as GitHub sadly does not support maintainers\n          \n          \n            \n            pushing to them.\n          \n          \n            \n            We much prefer to have PRs show as merged, so please do not use organizations\n          \n          \n            \n            repositories for PRs.\n          \n          \n            \n            \n          \n          \n            \n            See <https://github.com/isaacs/github/issues/1681> for more information on the\n          \n          \n            \n            issue.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455146031", "createdAt": "2020-07-15T15:35:52Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODkyOTgyOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozNjowNFrOGyD6wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjowNTo0MVrOGyFBeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NjE3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            See <https://github.com/isaacs/github/issues/1681> for more information on the\n          \n          \n            \n            issue.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455146178", "createdAt": "2020-07-15T15:36:04Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NDI4MQ==", "bodyText": "The link was present in the original document, and provides reasoning for the requirement. If someone sees it when it's closed, we can also remove this section from the file altogether.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455164281", "createdAt": "2020-07-15T16:05:41Z", "author": {"login": "Proximyst"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NjE3OA=="}, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODkzODAwOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozODoxMlrOGyD_7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozODoxMlrOGyD_7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NzUwMA==", "bodyText": "I'm all for jokes but the newbies may not get this :P\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To actually start doing the more enjoyable part of \"PR or shut up\", you have\n          \n          \n            \n            to get some duct tape.\n          \n          \n            \n            To actually get started with your pull request, you're gonna need some duct tape.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455147500", "createdAt": "2020-07-15T15:38:12Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODk0NTA1OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozOTo1OFrOGyEETw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozOTo1OFrOGyEETw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0ODYyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To do the other part, PRing changes, you require the following software, which\n          \n          \n            \n            are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n          \n          \n            \n            `homebrew` (macOS / Linux), and more:\n          \n          \n            \n            You'll need the following software, most of which\n          \n          \n            \n            are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n          \n          \n            \n            `homebrew` (macOS / Linux), and more:", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455148623", "createdAt": "2020-07-15T15:39:58Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which\n+are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n+`homebrew` (macOS / Linux), and more:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODk1OTQzOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo0MzozNlrOGyENdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo0MzozNlrOGyENdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1MDk2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Paper is made to be built on top of patches applied on top of Spigot in what are\n          \n          \n            \n            essentially submodules within the repository. These are centered around:\n          \n          \n            \n            Paper is, essentially, a set of patches applied on top of Spigot. These patches are\n          \n          \n            \n            split into different folders which target a certain part of code;", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455150964", "createdAt": "2020-07-15T15:43:36Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which\n+are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n+`homebrew` (macOS / Linux), and more:\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is made to be built on top of patches applied on top of Spigot in what are\n+essentially submodules within the repository. These are centered around:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODk2Nzg0OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo0NTozNlrOGyEScA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo0NTozNlrOGyEScA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1MjI0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `Paper-API` (the `Spigot-API`/`Bukkit` for Paper);\n          \n          \n            \n            - `Paper-MojangAPI` (API for\n          \n          \n            \n            [Mojang's Brigadier](https://github.com/Mojang/brigadier));\n          \n          \n            \n            - `Paper-Server` (the `Spigot`/`CraftBukkit` for Paper).\n          \n          \n            \n            - `Paper-API` - Modifications to the `Spigot-API`/`Bukkit`;\n          \n          \n            \n            - `Paper-MojangAPI` - An API for\n          \n          \n            \n            [Mojang's Brigadier](https://github.com/Mojang/brigadier);\n          \n          \n            \n            - `Paper-Server` - Modifications to `Spigot`/`CraftBukkit`.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455152240", "createdAt": "2020-07-15T15:45:36Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is very happy you're willing to contribute to the projects we have, and\n+we are very lentient with the PRs provided, but there are still some guidelines\n+you should follow.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR for you to rebase it on latest or take care\n+of any minor nitpicks that we can just solve for you instead of making you go\n+back for a trivial item.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+However, if you use an Organization for the PR, this prevents Paper from doing\n+this, and will require us to manually merge it and close the PR instead of it\n+being marked as the purple merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have merged PR's show as merged, so please do not use\n+organizations repositories for PR as GitHub sadly does not support maintainers\n+pushing to them.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To actually start doing the more enjoyable part of \"PR or shut up\", you have\n+to get some duct tape.\n \n-These directories aren't git repositories in the traditional sense:\n+To do the other part, PRing changes, you require the following software, which\n+are all available in (most) package managers such as `apt`, `pacman`, `xbps`,\n+`homebrew` (macOS / Linux), and more:\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is made to be built on top of patches applied on top of Spigot in what are\n+essentially submodules within the repository. These are centered around:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` (the `Spigot-API`/`Bukkit` for Paper);\n+- `Paper-MojangAPI` (API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier));\n+- `Paper-Server` (the `Spigot`/`CraftBukkit` for Paper).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24118b3ba73371301189da690201643a94178e17"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDQ1NjU4OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjowNjozOFrOGyS9yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjowNjozOFrOGyS9yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM5MjcxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Assuming you already have forked the repository:\n          \n          \n            \n            \n          \n          \n            \n            1. Pull the latest changes from the main repository;\n          \n          \n            \n            1. Type `./paper patch` in git bash to apply the changes from upstream;\n          \n          \n            \n            1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n          \n          \n            \n            You can also run `./paper server` or `./paper api` for these same directories\n          \n          \n            \n            respectively. If you install the Paper tool with `./paper setup`, you can run\n          \n          \n            \n            `paper <command>` from anywhere in most cases.\n          \n          \n            \n            \n          \n          \n            \n            These directories aren't git repositories in the traditional sense:\n          \n          \n            \n            \n          \n          \n            \n            - Every single commit in `Paper-Server`/`Paper-API` is a patch;\n          \n          \n            \n            - `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n          \n          \n            \n            but for Paper;\n          \n          \n            \n            - Typing `git status` should show that we are 10 or 11 commits ahead of master,\n          \n          \n            \n            meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n          \n          \n            \n               - If it says something like `212 commits ahead, 207 commits behind`,\n          \n          \n            \n               cd into the root directory of the cloned repository and type `git fetch` to\n          \n          \n            \n               update your upstream. Setting up a remote for the upstream Paper repository\n          \n          \n            \n               might be necessary.\n          \n          \n            \n            Assuming you already have forked the repository:\n          \n          \n            \n            \n          \n          \n            \n            1. Clone your fork to your local machine\n          \n          \n            \n            1. Type `./paper patch` in git bash to apply the changes from upstream;\n          \n          \n            \n            1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n          \n          \n            \n            You can also run `./paper server` or `./paper api` for these same directories\n          \n          \n            \n            respectively. \n          \n          \n            \n            1. You can also run `./paper setup`, which allows you to only have to type\n          \n          \n            \n            `paper <command>` from anywhere in most cases.\n          \n          \n            \n            \n          \n          \n            \n            `Paper-Server` and `Paper-API` aren't git repositories in the traditional sense:\n          \n          \n            \n            \n          \n          \n            \n            - Every single commit in `Paper-Server`/`Paper-API` is a patch;\n          \n          \n            \n            - `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n          \n          \n            \n            but for Paper;\n          \n          \n            \n            - Typing `git status` should show that we are 10 or 11 commits ahead of master,\n          \n          \n            \n            meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n          \n          \n            \n               - If it says something like `212 commits ahead, 207 commits behind`,\n          \n          \n            \n               cd into the root directory of the cloned repository and type `git fetch` to\n          \n          \n            \n               update your upstream. Setting up a remote for the upstream Paper repository\n          \n          \n            \n               might be necessary.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455392714", "createdAt": "2020-07-15T22:06:38Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /\n+Ubuntu), `homebrew` (macOS / Linux), and more:\n \n-These directories aren't git repositories in the traditional sense:\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+If you're on Windows, check\n+[the section on WSL](#patching-and-building-is-really-slow-what-can-i-do).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is essentially a set of patches on top of Spigot. These patches are split\n+into different directories which target a certain part of the code. These\n+directories are:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` - Modifications to `Spigot-API`/`Bukkit`;\n+- `Paper-MojangAPI` - An API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier);\n+- `Paper-Server` - Modifications to `Spigot`/`CraftBukkit`.\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDQ2MDEzOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjowODowMlrOGyS__g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjowODowMlrOGyS__g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM5MzI3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. PR your patches back to this repository.\n          \n          \n            \n            1. PR the newly generated patch file(s) back to this repository.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455393278", "createdAt": "2020-07-15T22:08:02Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /\n+Ubuntu), `homebrew` (macOS / Linux), and more:\n \n-These directories aren't git repositories in the traditional sense:\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+If you're on Windows, check\n+[the section on WSL](#patching-and-building-is-really-slow-what-can-i-do).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is essentially a set of patches on top of Spigot. These patches are split\n+into different directories which target a certain part of the code. These\n+directories are:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` - Modifications to `Spigot-API`/`Bukkit`;\n+- `Paper-MojangAPI` - An API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier);\n+- `Paper-Server` - Modifications to `Spigot`/`CraftBukkit`.\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDUzOTg3OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjozODoyM1rOGyTuJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjozODoyM1rOGyTuJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwNTA5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In case you need something more complex or want more control, this step-by-step instruction does\n          \n          \n            \n            exactly what the above slightly automated system does.\n          \n          \n            \n            In case you need to do something more complex or just want more control, these step-by-step instructions do exactly what the automated system above does.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455405093", "createdAt": "2020-07-15T22:38:23Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /\n+Ubuntu), `homebrew` (macOS / Linux), and more:\n \n-These directories aren't git repositories in the traditional sense:\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+If you're on Windows, check\n+[the section on WSL](#patching-and-building-is-really-slow-what-can-i-do).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is essentially a set of patches on top of Spigot. These patches are split\n+into different directories which target a certain part of the code. These\n+directories are:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` - Modifications to `Spigot-API`/`Bukkit`;\n+- `Paper-MojangAPI` - An API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier);\n+- `Paper-Server` - Modifications to `Spigot`/`CraftBukkit`.\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+> \u2757 Please note that if you have some specific implementation detail you'd like\n+> to document, you should do so in the patch message *or* in comments.\n \n ## Modifying Patches\n+\n Modifying previous patches is a bit more complex:\n \n ### Method 1\n-This method works by temporarily resetting HEAD to the desired commit to edit using rebase.\n \n-However, while in the middle of an edit, unless you also reset your API to a related commit, you will not be able to compile.\n+This method works by temporarily resetting your `HEAD` to the desired commit to\n+edit it using `git rebase`.\n+\n+> \u2757 While in the middle of an edit, you will not be able to compile unless you\n+> *also* reset the opposing module(s) to a related commit. In the API's case,\n+> you must reset the Server, and reset the API if you're editing the Server.\n \n #### Using the Paper tool\n-The PaperMC build tool provides a handy command to automatically do this type of patch modification.\n \n-1. Type `./paper edit server` or `./paper edit api` depending on which project you want to edit.\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `./paper edit continue` to finish and rebuild patches.\n-1. PR your modifications back to this project.\n+The PaperMC build tool provides a handy command to automatically do this type of\n+patch modification.\n+\n+1. Type `./paper edit server` or `./paper edit api` depending on which project\n+you want to edit;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `./paper edit continue` in the root directory to finish and rebuild\n+patches;\n+1. PR your modifications back to this repository.\n+\n+#### Manual method: Stashing\n \n-#### Manual method - Stashing\n In case you need something more complex or want more control, this step-by-step instruction does\n exactly what the above slightly automated system does.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDU2MTQyOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo0NzoyNFrOGyT6Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo0NzoyNFrOGyT6Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwODIzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. PR your modifications back to this repository.\n          \n          \n            \n            1. PR your modified patch file(s) back to this repository.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455408230", "createdAt": "2020-07-15T22:47:24Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /\n+Ubuntu), `homebrew` (macOS / Linux), and more:\n \n-These directories aren't git repositories in the traditional sense:\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+If you're on Windows, check\n+[the section on WSL](#patching-and-building-is-really-slow-what-can-i-do).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is essentially a set of patches on top of Spigot. These patches are split\n+into different directories which target a certain part of the code. These\n+directories are:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` - Modifications to `Spigot-API`/`Bukkit`;\n+- `Paper-MojangAPI` - An API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier);\n+- `Paper-Server` - Modifications to `Spigot`/`CraftBukkit`.\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+> \u2757 Please note that if you have some specific implementation detail you'd like\n+> to document, you should do so in the patch message *or* in comments.\n \n ## Modifying Patches\n+\n Modifying previous patches is a bit more complex:\n \n ### Method 1\n-This method works by temporarily resetting HEAD to the desired commit to edit using rebase.\n \n-However, while in the middle of an edit, unless you also reset your API to a related commit, you will not be able to compile.\n+This method works by temporarily resetting your `HEAD` to the desired commit to\n+edit it using `git rebase`.\n+\n+> \u2757 While in the middle of an edit, you will not be able to compile unless you\n+> *also* reset the opposing module(s) to a related commit. In the API's case,\n+> you must reset the Server, and reset the API if you're editing the Server.\n \n #### Using the Paper tool\n-The PaperMC build tool provides a handy command to automatically do this type of patch modification.\n \n-1. Type `./paper edit server` or `./paper edit api` depending on which project you want to edit.\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `./paper edit continue` to finish and rebuild patches.\n-1. PR your modifications back to this project.\n+The PaperMC build tool provides a handy command to automatically do this type of\n+patch modification.\n+\n+1. Type `./paper edit server` or `./paper edit api` depending on which project\n+you want to edit;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `./paper edit continue` in the root directory to finish and rebuild\n+patches;\n+1. PR your modifications back to this repository.\n+\n+#### Manual method: Stashing\n \n-#### Manual method - Stashing\n In case you need something more complex or want more control, this step-by-step instruction does\n exactly what the above slightly automated system does.\n \n-1. If you have changes you are working on type `git stash` to store them for later.\n-   - Later you can type `git stash pop` to get them back.\n-1. Type `git rebase -i upstream/upstream`\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes.\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `git add .` to add your changes.\n-1. Type `git commit --amend` to commit.\n-   - **MAKE SURE TO ADD `--amend`** or else a new patch will be created.\n-   - You can also modify the commit message here.\n-1. Type `git rebase --continue` to finish rebasing.\n-1. Type `./paper rebuild` in the main directory.\n+1. If you have changes you are working on, type `git stash` to store them for\n+later;\n+   - You can type `git stash pop` to get them back at any point.\n+1. Type `git rebase -i upstream/upstream`;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `git add .` to add your changes;\n+1. Type `git commit --amend` to commit;\n+   - **Make sure to add `--amend`** or else a new patch will be created.\n+   - You can also modify the commit message and author here.\n+1. Type `git rebase --continue` to finish rebasing;\n+1. Type `./paper rebuild` in the root directory;\n    - This will modify the appropriate patches based on your commits.\n-1. PR your modifications back to this project.\n+1. PR your modifications back to this repository.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDU4NjE0OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo1ODoyMFrOGyUJXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo1ODoyMFrOGyUJXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMjA2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            obfuscation helpers aids in the maintenance costs. Remember that these changes\n          \n          \n            \n            [obfuscation helpers](#obfuscation-helpers) aids in the maintenance costs. Remember that these changes", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455412063", "createdAt": "2020-07-15T22:58:20Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /\n+Ubuntu), `homebrew` (macOS / Linux), and more:\n \n-These directories aren't git repositories in the traditional sense:\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+If you're on Windows, check\n+[the section on WSL](#patching-and-building-is-really-slow-what-can-i-do).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is essentially a set of patches on top of Spigot. These patches are split\n+into different directories which target a certain part of the code. These\n+directories are:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` - Modifications to `Spigot-API`/`Bukkit`;\n+- `Paper-MojangAPI` - An API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier);\n+- `Paper-Server` - Modifications to `Spigot`/`CraftBukkit`.\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+> \u2757 Please note that if you have some specific implementation detail you'd like\n+> to document, you should do so in the patch message *or* in comments.\n \n ## Modifying Patches\n+\n Modifying previous patches is a bit more complex:\n \n ### Method 1\n-This method works by temporarily resetting HEAD to the desired commit to edit using rebase.\n \n-However, while in the middle of an edit, unless you also reset your API to a related commit, you will not be able to compile.\n+This method works by temporarily resetting your `HEAD` to the desired commit to\n+edit it using `git rebase`.\n+\n+> \u2757 While in the middle of an edit, you will not be able to compile unless you\n+> *also* reset the opposing module(s) to a related commit. In the API's case,\n+> you must reset the Server, and reset the API if you're editing the Server.\n \n #### Using the Paper tool\n-The PaperMC build tool provides a handy command to automatically do this type of patch modification.\n \n-1. Type `./paper edit server` or `./paper edit api` depending on which project you want to edit.\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `./paper edit continue` to finish and rebuild patches.\n-1. PR your modifications back to this project.\n+The PaperMC build tool provides a handy command to automatically do this type of\n+patch modification.\n+\n+1. Type `./paper edit server` or `./paper edit api` depending on which project\n+you want to edit;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `./paper edit continue` in the root directory to finish and rebuild\n+patches;\n+1. PR your modifications back to this repository.\n+\n+#### Manual method: Stashing\n \n-#### Manual method - Stashing\n In case you need something more complex or want more control, this step-by-step instruction does\n exactly what the above slightly automated system does.\n \n-1. If you have changes you are working on type `git stash` to store them for later.\n-   - Later you can type `git stash pop` to get them back.\n-1. Type `git rebase -i upstream/upstream`\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes.\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `git add .` to add your changes.\n-1. Type `git commit --amend` to commit.\n-   - **MAKE SURE TO ADD `--amend`** or else a new patch will be created.\n-   - You can also modify the commit message here.\n-1. Type `git rebase --continue` to finish rebasing.\n-1. Type `./paper rebuild` in the main directory.\n+1. If you have changes you are working on, type `git stash` to store them for\n+later;\n+   - You can type `git stash pop` to get them back at any point.\n+1. Type `git rebase -i upstream/upstream`;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `git add .` to add your changes;\n+1. Type `git commit --amend` to commit;\n+   - **Make sure to add `--amend`** or else a new patch will be created.\n+   - You can also modify the commit message and author here.\n+1. Type `git rebase --continue` to finish rebasing;\n+1. Type `./paper rebuild` in the root directory;\n    - This will modify the appropriate patches based on your commits.\n-1. PR your modifications back to this project.\n+1. PR your modifications back to this repository.\n \n-### Method 2 (sometimes easier) - Manually moving commits\n-If you are simply editing a more recent commit or your change is small, simply making the change at HEAD and then moving the commit after you have tested it may be easier.\n+### Method 2 - Fixup commits\n \n-This method has the benefit of being able to compile to test your change without messing with your API HEAD.\n+If you are simply editing a more recent commit or your change is small, simply\n+making the change at HEAD and then moving the commit after you have tested it\n+may be easier.\n \n-1. Make your change while at HEAD\n-1. Make a temporary commit. You don't need to make a message for this.\n-1. Type `git rebase -i upstream/upstream`, move (cut) your temporary commit and move it under the line of the patch you wish to modify.\n-1. Change the `pick` with `f` (fixup) or `s` (squash) if you need to edit the commit message \n-1. Type `./paper rebuild` in the main directory\n-   - This will modify the appropriate patches based on your commits\n-1. PR your modifications to github\n+This method has the benefit of being able to compile to test your change without\n+messing with your HEADs.\n \n-### Method 3 - Fixup Commits\n-This is the automated way of doing Method 2. Basically, you make your changes at HEAD, but use fixup commits to modify earlier patches and git will rebase the commits to the right place and squash them.\n+#### Manual method\n \n-1. Make your change while at HEAD\n-1. Make a fixup commit. `git commit -a --fixup <hashOfPatchToFix>`. You can get the hash by looking at `git log` or `git blame`, your IDE can assist you too.  \n-Alternatively, if you only know the name of the patch, you can do `git commit -a --fixup \"Subject of Patch name\"`\n-1. Rebase with autosquash: `git rebase --autosquash -i upstream/upstream`. It will move your fixup commit to the right place.\n-1. Type `./paper rebuild` in the main directory\n-   - This will modify the appropriate patches based on your commits\n-1. PR your modifications to github\n+1. Make your change while at HEAD;\n+1. Make a temporary commit. You don't need to make a message for this;\n+1. Type `git rebase -i upstream/upstream`, move (cut) your temporary commit and\n+move it under the line of the patch you wish to modify;\n+1. Change the `pick` to the appropriate action:\n+   1. `f`/`fixup`: Merge your changes into the patch without touching the\n+  message.\n+   1. `s`/`squash`: Merge your changes into the patch and use your commit message\n+  and subject.\n+1. Type `./paper rebuild` in the root directory;\n+   - This will modify the appropriate patches based on your commits.\n+1. PR your modifications back to this repository.\n+\n+#### Automatic method\n+\n+1. Make your change while at HEAD;\n+1. Make a fixup commit. `git commit -a --fixup <hashOfPatchToFix>`;\n+   - You can also use `--squash` instead of `--fixup` if you want the commit\n+   message to also be changed.\n+   - You can get the hash by looking at `git log` or `git blame`; your IDE can\n+  assist you too.\n+   - Alternatively, if you only know the name of the patch, you can do\n+  `git commit -a --fixup \"Subject of Patch name\"`.\n+1. Rebase with autosquash: `git rebase --autosquash -i upstream/upstream`.\n+This will automatically move your fixup commit to the right place, and you just\n+need to \"save\" the changes.\n+1. Type `./paper rebuild` in the root directory;\n+   - This will modify the appropriate patches based on your commits.\n+1. PR your modifications back to this repository.\n \n ## PR Policy\n-We'll accept changes that make sense. You should be able to justify their existence, along with any maintenance costs that come with them. Remember, these changes will affect everyone who runs Paper, not just you and your server.\n-While we will fix minor formatting issues, you should stick to the guide below when making and submitting changes.\n+\n+We'll accept changes that make sense. You should be able to justify their\n+existence, along with any maintenance costs that come with them. Using\n+obfuscation helpers aids in the maintenance costs. Remember that these changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 330}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDU5NTk0OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzowMjozMVrOGyUPDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzowMjozMVrOGyUPDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMzUxNw==", "bodyText": "forEach WeirdChamp", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455413517", "createdAt": "2020-07-15T23:02:31Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,266 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn what this method/field does?](#where-can-i-learn-what-this-methodfield-does)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /\n+Ubuntu), `homebrew` (macOS / Linux), and more:\n \n-These directories aren't git repositories in the traditional sense:\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+If you're on Windows, check\n+[the section on WSL](#patching-and-building-is-really-slow-what-can-i-do).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n+\n+## Understanding Patches\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+Paper is essentially a set of patches on top of Spigot. These patches are split\n+into different directories which target a certain part of the code. These\n+directories are:\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+- `Paper-API` - Modifications to `Spigot-API`/`Bukkit`;\n+- `Paper-MojangAPI` - An API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier);\n+- `Paper-Server` - Modifications to `Spigot`/`CraftBukkit`.\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+Assuming you already have forked the repository:\n+\n+1. Pull the latest changes from the main repository;\n+1. Type `./paper patch` in git bash to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively. If you install the Paper tool with `./paper setup`, you can run\n+`paper <command>` from anywhere in most cases.\n+\n+These directories aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n+\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR your patches back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+> \u2757 Please note that if you have some specific implementation detail you'd like\n+> to document, you should do so in the patch message *or* in comments.\n \n ## Modifying Patches\n+\n Modifying previous patches is a bit more complex:\n \n ### Method 1\n-This method works by temporarily resetting HEAD to the desired commit to edit using rebase.\n \n-However, while in the middle of an edit, unless you also reset your API to a related commit, you will not be able to compile.\n+This method works by temporarily resetting your `HEAD` to the desired commit to\n+edit it using `git rebase`.\n+\n+> \u2757 While in the middle of an edit, you will not be able to compile unless you\n+> *also* reset the opposing module(s) to a related commit. In the API's case,\n+> you must reset the Server, and reset the API if you're editing the Server.\n \n #### Using the Paper tool\n-The PaperMC build tool provides a handy command to automatically do this type of patch modification.\n \n-1. Type `./paper edit server` or `./paper edit api` depending on which project you want to edit.\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `./paper edit continue` to finish and rebuild patches.\n-1. PR your modifications back to this project.\n+The PaperMC build tool provides a handy command to automatically do this type of\n+patch modification.\n+\n+1. Type `./paper edit server` or `./paper edit api` depending on which project\n+you want to edit;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `./paper edit continue` in the root directory to finish and rebuild\n+patches;\n+1. PR your modifications back to this repository.\n+\n+#### Manual method: Stashing\n \n-#### Manual method - Stashing\n In case you need something more complex or want more control, this step-by-step instruction does\n exactly what the above slightly automated system does.\n \n-1. If you have changes you are working on type `git stash` to store them for later.\n-   - Later you can type `git stash pop` to get them back.\n-1. Type `git rebase -i upstream/upstream`\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes.\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `git add .` to add your changes.\n-1. Type `git commit --amend` to commit.\n-   - **MAKE SURE TO ADD `--amend`** or else a new patch will be created.\n-   - You can also modify the commit message here.\n-1. Type `git rebase --continue` to finish rebasing.\n-1. Type `./paper rebuild` in the main directory.\n+1. If you have changes you are working on, type `git stash` to store them for\n+later;\n+   - You can type `git stash pop` to get them back at any point.\n+1. Type `git rebase -i upstream/upstream`;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `git add .` to add your changes;\n+1. Type `git commit --amend` to commit;\n+   - **Make sure to add `--amend`** or else a new patch will be created.\n+   - You can also modify the commit message and author here.\n+1. Type `git rebase --continue` to finish rebasing;\n+1. Type `./paper rebuild` in the root directory;\n    - This will modify the appropriate patches based on your commits.\n-1. PR your modifications back to this project.\n+1. PR your modifications back to this repository.\n \n-### Method 2 (sometimes easier) - Manually moving commits\n-If you are simply editing a more recent commit or your change is small, simply making the change at HEAD and then moving the commit after you have tested it may be easier.\n+### Method 2 - Fixup commits\n \n-This method has the benefit of being able to compile to test your change without messing with your API HEAD.\n+If you are simply editing a more recent commit or your change is small, simply\n+making the change at HEAD and then moving the commit after you have tested it\n+may be easier.\n \n-1. Make your change while at HEAD\n-1. Make a temporary commit. You don't need to make a message for this.\n-1. Type `git rebase -i upstream/upstream`, move (cut) your temporary commit and move it under the line of the patch you wish to modify.\n-1. Change the `pick` with `f` (fixup) or `s` (squash) if you need to edit the commit message \n-1. Type `./paper rebuild` in the main directory\n-   - This will modify the appropriate patches based on your commits\n-1. PR your modifications to github\n+This method has the benefit of being able to compile to test your change without\n+messing with your HEADs.\n \n-### Method 3 - Fixup Commits\n-This is the automated way of doing Method 2. Basically, you make your changes at HEAD, but use fixup commits to modify earlier patches and git will rebase the commits to the right place and squash them.\n+#### Manual method\n \n-1. Make your change while at HEAD\n-1. Make a fixup commit. `git commit -a --fixup <hashOfPatchToFix>`. You can get the hash by looking at `git log` or `git blame`, your IDE can assist you too.  \n-Alternatively, if you only know the name of the patch, you can do `git commit -a --fixup \"Subject of Patch name\"`\n-1. Rebase with autosquash: `git rebase --autosquash -i upstream/upstream`. It will move your fixup commit to the right place.\n-1. Type `./paper rebuild` in the main directory\n-   - This will modify the appropriate patches based on your commits\n-1. PR your modifications to github\n+1. Make your change while at HEAD;\n+1. Make a temporary commit. You don't need to make a message for this;\n+1. Type `git rebase -i upstream/upstream`, move (cut) your temporary commit and\n+move it under the line of the patch you wish to modify;\n+1. Change the `pick` to the appropriate action:\n+   1. `f`/`fixup`: Merge your changes into the patch without touching the\n+  message.\n+   1. `s`/`squash`: Merge your changes into the patch and use your commit message\n+  and subject.\n+1. Type `./paper rebuild` in the root directory;\n+   - This will modify the appropriate patches based on your commits.\n+1. PR your modifications back to this repository.\n+\n+#### Automatic method\n+\n+1. Make your change while at HEAD;\n+1. Make a fixup commit. `git commit -a --fixup <hashOfPatchToFix>`;\n+   - You can also use `--squash` instead of `--fixup` if you want the commit\n+   message to also be changed.\n+   - You can get the hash by looking at `git log` or `git blame`; your IDE can\n+  assist you too.\n+   - Alternatively, if you only know the name of the patch, you can do\n+  `git commit -a --fixup \"Subject of Patch name\"`.\n+1. Rebase with autosquash: `git rebase --autosquash -i upstream/upstream`.\n+This will automatically move your fixup commit to the right place, and you just\n+need to \"save\" the changes.\n+1. Type `./paper rebuild` in the root directory;\n+   - This will modify the appropriate patches based on your commits.\n+1. PR your modifications back to this repository.\n \n ## PR Policy\n-We'll accept changes that make sense. You should be able to justify their existence, along with any maintenance costs that come with them. Remember, these changes will affect everyone who runs Paper, not just you and your server.\n-While we will fix minor formatting issues, you should stick to the guide below when making and submitting changes.\n+\n+We'll accept changes that make sense. You should be able to justify their\n+existence, along with any maintenance costs that come with them. Using\n+obfuscation helpers aids in the maintenance costs. Remember that these changes\n+will affect everyone who runs Paper, not just you and your server.\n+\n+While we will fix minor formatting issues, you should stick to the guide below\n+when making and submitting changes.\n \n ## Formatting\n-All modifications to non-Paper files should be marked\n-- Multi line changes start with `// Paper start` and end with `// Paper end`\n-- You can put a messages with a change if it isn't obvious, like this: `// Paper start - reason`\n-  - Should generally be about the reason the change was made, what it was before, or what the change is\n-  - Multi-line messages should start with `// Paper start` and use `/* Multi line message here */` for the message itself\n-- Single line changes should have `// Paper` or `// Paper - reason`\n-- For example:\n-````java\n+\n+All modifications to non-Paper files should be marked.\n+\n+- Multi-line changes start with `// Paper start` and end with `// Paper end`;\n+- You can put a comment with an explanation if it isn't obvious, like this:\n+`// Paper start - reason`.\n+   - The comments should generally be about the reason the change was made, what\n+  it was before, or what the change is.\n+   - Multi-line messages should start with `// Paper start` and use `/* Multi\n+  line message here */` for the message itself.\n+- One-line changes should have `// Paper` or `// Paper - reason`.\n+\n+Here's an example of how to mark changes by Paper:\n+\n+```java\n entity.getWorld().dontbeStupid(); // Paper - was beStupid() which is bad\n entity.getFriends().forEach(Entity::explode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 361}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDYxODgyOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoxMjoxNlrOGyUcAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoxMjoxNlrOGyUcAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNjgzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            An obfuscation helper to get an obfuscated field may be as simple as something\n          \n          \n            \n            An obfuscation helper to get an obfuscated method may be as simple as something", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455416835", "createdAt": "2020-07-15T23:12:16Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -192,13 +331,21 @@ index a92bf8967..d0ab87d0f 100644\n ```\n \n ## Obfuscation Helpers\n-In an effort to make future updates easier on ourselves, Paper tries to use obfuscation helpers whenever possible. The purpose of these helpers is to make the code more readable. These helpers should be be made as easy to inline as possible by the JVM whenever possible.\n \n-An obfuscation helper to get an obfuscated field may be as simple as something like this:\n+In an effort to make future updates easier on ourselves, Paper tries to use\n+obfuscation helpers whenever possible. The purpose of these helpers is to make\n+the code more readable and maintainable. These helpers should be be made as easy\n+to inline as possible by the JVM whenever possible.\n+\n+An obfuscation helper to get an obfuscated field may be as simple as something", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 431}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDYyNjU4OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoxNTozN1rOGyUgbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoxNTozN1rOGyUgbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNzk2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            always to improve readability and maintainability, so use your best judgement\n          \n          \n            \n            always to improve readability and maintainability. Use your best judgment", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455417964", "createdAt": "2020-07-15T23:15:37Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -210,32 +357,135 @@ public boolean pushedByWater() {\n     return true;\n }\n ```\n-While they may not always be done in exactly the same way each time, the general goal is always to improve readability and maintainability, so use your best judgement.\n+\n+While they may not always be done in exactly the same way, the general goal is\n+always to improve readability and maintainability, so use your best judgement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 451}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDYzNzI3OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoyMDoyOVrOGyUmoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoyMDoyOVrOGyUmoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxOTU1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To use a configurable value in your patch, add a new entry in either the\n          \n          \n            \n            `PaperConfig` or `PaperWorldConfig` classes. Use the former (`PaperConfig`) if\n          \n          \n            \n            a value must remain the same throughout all worlds, or the latter if it can\n          \n          \n            \n            change between worlds. The latter is preferred whenever possible.\n          \n          \n            \n            To use a configurable value in your patch, add a new entry in either the\n          \n          \n            \n            `PaperConfig` or `PaperWorldConfig` classes. Use `PaperConfig` if a value\n          \n          \n            \n            remains the same throughout all worlds, or `PaperWorldConfig` if it can\n          \n          \n            \n            change between worlds. World-specific config options are preferred whenever\n          \n          \n            \n            possible.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455419553", "createdAt": "2020-07-15T23:20:29Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -210,32 +357,135 @@ public boolean pushedByWater() {\n     return true;\n }\n ```\n-While they may not always be done in exactly the same way each time, the general goal is always to improve readability and maintainability, so use your best judgement.\n+\n+While they may not always be done in exactly the same way, the general goal is\n+always to improve readability and maintainability, so use your best judgement\n+and do what fits best in your situation.\n \n ## Configuration files\n-To use a configurable value in your patch, add a new entry in either ```PaperConfig``` or ```PaperWorldConfig```. Use the former if a value must remain the same throughout all worlds, or the latter if it can change between worlds. The latter is preferred whenever possible.\n \n-### PaperConfig example:\n+To use a configurable value in your patch, add a new entry in either the\n+`PaperConfig` or `PaperWorldConfig` classes. Use the former (`PaperConfig`) if\n+a value must remain the same throughout all worlds, or the latter if it can\n+change between worlds. The latter is preferred whenever possible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 461}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDcyMTA2OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzo1OToyM1rOGyVW9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzo1OToyM1rOGyVW9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzMTkyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Where can I learn what this method/field does?\n          \n          \n            \n            ### Where can I learn how to name this method/field?", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455431927", "createdAt": "2020-07-15T23:59:23Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -210,32 +357,135 @@ public boolean pushedByWater() {\n     return true;\n }\n ```\n-While they may not always be done in exactly the same way each time, the general goal is always to improve readability and maintainability, so use your best judgement.\n+\n+While they may not always be done in exactly the same way, the general goal is\n+always to improve readability and maintainability, so use your best judgement\n+and do what fits best in your situation.\n \n ## Configuration files\n-To use a configurable value in your patch, add a new entry in either ```PaperConfig``` or ```PaperWorldConfig```. Use the former if a value must remain the same throughout all worlds, or the latter if it can change between worlds. The latter is preferred whenever possible.\n \n-### PaperConfig example:\n+To use a configurable value in your patch, add a new entry in either the\n+`PaperConfig` or `PaperWorldConfig` classes. Use the former (`PaperConfig`) if\n+a value must remain the same throughout all worlds, or the latter if it can\n+change between worlds. The latter is preferred whenever possible.\n+\n+### PaperConfig example\n+\n ```java\n public static boolean saveEmptyScoreboardTeams = false;\n private static void saveEmptyScoreboardTeams() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     saveEmptyScoreboardTeams = getBoolean(\"settings.save-empty-scoreboard-teams\", false);\n }\n ```\n-Notice that the field is always public, but the setter is always private. This is important to the way the configuration generation system works. To access this value, reference it as you would any other static value:\n+\n+Notice that the field is always public, but the setter is always private. This\n+is important to the way the configuration generation system works. To access\n+this value, reference it as you would any other static value:\n+\n ```java\n if (!PaperConfig.saveEmptyScoreboardTeams) {\n ```\n \n-### PaperWorldConfig example:\n+It is often preferred that you use the fully qualified name for the\n+configuration class when accessing it, like so:\n+`com.destroystokyo.paper.PaperConfig.valueHere`.  \n+If this is not done, a developer for Paper might fix that for you before\n+merging, but it's always nice if you make it a habit where you only need 1-2\n+lines changed.\n+\n+### PaperWorldConfig example\n+\n ```java\n public boolean useInhabitedTime = true;\n private void useInhabitedTime() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     useInhabitedTime = getBoolean(\"use-chunk-inhabited-timer\", true);\n }\n ```\n-Again, notice that the field is always public, but the setter is always private. To access this value, you'll need an instance of the ```net.minecraft.World``` object:\n+\n+Again, notice that the field is always public, but the setter is always private.\n+To access this value, you'll need an instance of the `net.minecraft.World`\n+object:\n \n ```java\n return this.world.paperConfig.useInhabitedTime ? this.w : 0;\n ```\n+\n+## Frequently Asked Questions\n+\n+### I can't find the NMS file I need!\n+\n+By default, Paper (and upstream) only import files we make changes to. If you\n+would like to make changes to a file that isn't present in `Paper-Server`'s\n+source directory, you just need to add it to our import script ran during the\n+patching process.\n+\n+1. Save (rebuild) any patches you are in the middle of working on! Their\n+progress will be lost if you do not;\n+1. Identify the name(s) of the file(s) you want to import.\n+   - A complete list of all possible file names can be found at\n+   `./work/Minecraft/$MCVER/spigot/net/minecraft/server`. You might find\n+   [MiniMappingViewer] very useful to find the file you need.\n+1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to\n+the script. Skip to the 2nd last header and follow the instructions there;\n+1. Re-patch the server `./paper patch`;\n+1. Edit away!\n+\n+> \u2757 This change is temporary! **DO NOT COMMIT CHANGES TO THIS FILE!**  \n+> Once you have made your changes to the new file, and rebuilt patches, you may\n+> undo your changes to `importmcdev.sh`.\n+\n+Any file modified in a patch file gets automatically imported, so you only need\n+this temporarily to import it to create the first patch.\n+\n+To undo your changes to the file, type `git checkout scripts/importmcdev.sh`.\n+\n+### Where can I learn what this method/field does?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 540}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDcyODAwOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDowMjoyNlrOGyVaqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDowMjoyNlrOGyVaqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzMjg3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This only applies if you're running Windows 10. If you're running a prior\n          \n          \n            \n            Windows release, either update to Windows 10 or move to macOS/Linux/BSD.\n          \n          \n            \n            This only applies if you're running Windows. If you're running a prior\n          \n          \n            \n            Windows release, either update to Windows 10 or move to macOS/Linux/BSD.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455432874", "createdAt": "2020-07-16T00:02:26Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -210,32 +357,135 @@ public boolean pushedByWater() {\n     return true;\n }\n ```\n-While they may not always be done in exactly the same way each time, the general goal is always to improve readability and maintainability, so use your best judgement.\n+\n+While they may not always be done in exactly the same way, the general goal is\n+always to improve readability and maintainability, so use your best judgement\n+and do what fits best in your situation.\n \n ## Configuration files\n-To use a configurable value in your patch, add a new entry in either ```PaperConfig``` or ```PaperWorldConfig```. Use the former if a value must remain the same throughout all worlds, or the latter if it can change between worlds. The latter is preferred whenever possible.\n \n-### PaperConfig example:\n+To use a configurable value in your patch, add a new entry in either the\n+`PaperConfig` or `PaperWorldConfig` classes. Use the former (`PaperConfig`) if\n+a value must remain the same throughout all worlds, or the latter if it can\n+change between worlds. The latter is preferred whenever possible.\n+\n+### PaperConfig example\n+\n ```java\n public static boolean saveEmptyScoreboardTeams = false;\n private static void saveEmptyScoreboardTeams() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     saveEmptyScoreboardTeams = getBoolean(\"settings.save-empty-scoreboard-teams\", false);\n }\n ```\n-Notice that the field is always public, but the setter is always private. This is important to the way the configuration generation system works. To access this value, reference it as you would any other static value:\n+\n+Notice that the field is always public, but the setter is always private. This\n+is important to the way the configuration generation system works. To access\n+this value, reference it as you would any other static value:\n+\n ```java\n if (!PaperConfig.saveEmptyScoreboardTeams) {\n ```\n \n-### PaperWorldConfig example:\n+It is often preferred that you use the fully qualified name for the\n+configuration class when accessing it, like so:\n+`com.destroystokyo.paper.PaperConfig.valueHere`.  \n+If this is not done, a developer for Paper might fix that for you before\n+merging, but it's always nice if you make it a habit where you only need 1-2\n+lines changed.\n+\n+### PaperWorldConfig example\n+\n ```java\n public boolean useInhabitedTime = true;\n private void useInhabitedTime() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     useInhabitedTime = getBoolean(\"use-chunk-inhabited-timer\", true);\n }\n ```\n-Again, notice that the field is always public, but the setter is always private. To access this value, you'll need an instance of the ```net.minecraft.World``` object:\n+\n+Again, notice that the field is always public, but the setter is always private.\n+To access this value, you'll need an instance of the `net.minecraft.World`\n+object:\n \n ```java\n return this.world.paperConfig.useInhabitedTime ? this.w : 0;\n ```\n+\n+## Frequently Asked Questions\n+\n+### I can't find the NMS file I need!\n+\n+By default, Paper (and upstream) only import files we make changes to. If you\n+would like to make changes to a file that isn't present in `Paper-Server`'s\n+source directory, you just need to add it to our import script ran during the\n+patching process.\n+\n+1. Save (rebuild) any patches you are in the middle of working on! Their\n+progress will be lost if you do not;\n+1. Identify the name(s) of the file(s) you want to import.\n+   - A complete list of all possible file names can be found at\n+   `./work/Minecraft/$MCVER/spigot/net/minecraft/server`. You might find\n+   [MiniMappingViewer] very useful to find the file you need.\n+1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to\n+the script. Skip to the 2nd last header and follow the instructions there;\n+1. Re-patch the server `./paper patch`;\n+1. Edit away!\n+\n+> \u2757 This change is temporary! **DO NOT COMMIT CHANGES TO THIS FILE!**  \n+> Once you have made your changes to the new file, and rebuilt patches, you may\n+> undo your changes to `importmcdev.sh`.\n+\n+Any file modified in a patch file gets automatically imported, so you only need\n+this temporarily to import it to create the first patch.\n+\n+To undo your changes to the file, type `git checkout scripts/importmcdev.sh`.\n+\n+### Where can I learn what this method/field does?\n+\n+For most cases, it is preferred if you use [yarn], as their license works with\n+Paper's license. If you can't do that, [MiniMappingViewer] is always around to\n+provide you with more of a general idea, *but* you cannot use the Mojang names\n+for more than understanding the code.\n+\n+[yarn] is in general more thorough than Mojang's own mappings, as they include\n+method arguments as well, whereas Mojang's do not. If you need local variables\n+to understand the code, you might be more lucky with ModCoderPack.\n+\n+For more information on the Mojang name licensing issues, check this out:\n+<https://cpw.github.io/MinecraftMappingData.html>\n+\n+### My commit doesn't need a build, what do I do?\n+\n+Well, quite simple: You add `[CI-SKIP]` to the start of your commit subject.\n+\n+This case most often applies to changes to files like `README.md`, this very\n+file (`CONTRIBUTING.md`), the `LICENSE.md` file, and so forth.\n+\n+### Patching and building is *really* slow, what can I do?\n+\n+This only applies if you're running Windows 10. If you're running a prior\n+Windows release, either update to Windows 10 or move to macOS/Linux/BSD.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 564}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDczNjAzOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDowNjoyMFrOGyVfRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDowNjoyMFrOGyVfRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzNDA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To speed up the programs used, you have to get WSL 2. This is available in\n          \n          \n            \n            Windows 10 v2004, build 19041 or higher. Check your version by running `winver`\n          \n          \n            \n            in the run window (Windows key + R). If you're out of date, update your system\n          \n          \n            \n            with the Windows Update Assistant.\n          \n          \n            \n            In order to speed up the patching process on Windows, it's recommended you get WSL 2.\n          \n          \n            \n            WSL2 is available in Windows 10 v2004, build 19041 or higher. (You can check your\n          \n          \n            \n            Windows version by running `winver` in the run window (Windows key + R)). If you're out\n          \n          \n            \n            of date, update your system with the [Windows Update Assistant](https://www.microsoft.com/en-us/software-download/windows10).", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455434054", "createdAt": "2020-07-16T00:06:20Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -210,32 +357,135 @@ public boolean pushedByWater() {\n     return true;\n }\n ```\n-While they may not always be done in exactly the same way each time, the general goal is always to improve readability and maintainability, so use your best judgement.\n+\n+While they may not always be done in exactly the same way, the general goal is\n+always to improve readability and maintainability, so use your best judgement\n+and do what fits best in your situation.\n \n ## Configuration files\n-To use a configurable value in your patch, add a new entry in either ```PaperConfig``` or ```PaperWorldConfig```. Use the former if a value must remain the same throughout all worlds, or the latter if it can change between worlds. The latter is preferred whenever possible.\n \n-### PaperConfig example:\n+To use a configurable value in your patch, add a new entry in either the\n+`PaperConfig` or `PaperWorldConfig` classes. Use the former (`PaperConfig`) if\n+a value must remain the same throughout all worlds, or the latter if it can\n+change between worlds. The latter is preferred whenever possible.\n+\n+### PaperConfig example\n+\n ```java\n public static boolean saveEmptyScoreboardTeams = false;\n private static void saveEmptyScoreboardTeams() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     saveEmptyScoreboardTeams = getBoolean(\"settings.save-empty-scoreboard-teams\", false);\n }\n ```\n-Notice that the field is always public, but the setter is always private. This is important to the way the configuration generation system works. To access this value, reference it as you would any other static value:\n+\n+Notice that the field is always public, but the setter is always private. This\n+is important to the way the configuration generation system works. To access\n+this value, reference it as you would any other static value:\n+\n ```java\n if (!PaperConfig.saveEmptyScoreboardTeams) {\n ```\n \n-### PaperWorldConfig example:\n+It is often preferred that you use the fully qualified name for the\n+configuration class when accessing it, like so:\n+`com.destroystokyo.paper.PaperConfig.valueHere`.  \n+If this is not done, a developer for Paper might fix that for you before\n+merging, but it's always nice if you make it a habit where you only need 1-2\n+lines changed.\n+\n+### PaperWorldConfig example\n+\n ```java\n public boolean useInhabitedTime = true;\n private void useInhabitedTime() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     useInhabitedTime = getBoolean(\"use-chunk-inhabited-timer\", true);\n }\n ```\n-Again, notice that the field is always public, but the setter is always private. To access this value, you'll need an instance of the ```net.minecraft.World``` object:\n+\n+Again, notice that the field is always public, but the setter is always private.\n+To access this value, you'll need an instance of the `net.minecraft.World`\n+object:\n \n ```java\n return this.world.paperConfig.useInhabitedTime ? this.w : 0;\n ```\n+\n+## Frequently Asked Questions\n+\n+### I can't find the NMS file I need!\n+\n+By default, Paper (and upstream) only import files we make changes to. If you\n+would like to make changes to a file that isn't present in `Paper-Server`'s\n+source directory, you just need to add it to our import script ran during the\n+patching process.\n+\n+1. Save (rebuild) any patches you are in the middle of working on! Their\n+progress will be lost if you do not;\n+1. Identify the name(s) of the file(s) you want to import.\n+   - A complete list of all possible file names can be found at\n+   `./work/Minecraft/$MCVER/spigot/net/minecraft/server`. You might find\n+   [MiniMappingViewer] very useful to find the file you need.\n+1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to\n+the script. Skip to the 2nd last header and follow the instructions there;\n+1. Re-patch the server `./paper patch`;\n+1. Edit away!\n+\n+> \u2757 This change is temporary! **DO NOT COMMIT CHANGES TO THIS FILE!**  \n+> Once you have made your changes to the new file, and rebuilt patches, you may\n+> undo your changes to `importmcdev.sh`.\n+\n+Any file modified in a patch file gets automatically imported, so you only need\n+this temporarily to import it to create the first patch.\n+\n+To undo your changes to the file, type `git checkout scripts/importmcdev.sh`.\n+\n+### Where can I learn what this method/field does?\n+\n+For most cases, it is preferred if you use [yarn], as their license works with\n+Paper's license. If you can't do that, [MiniMappingViewer] is always around to\n+provide you with more of a general idea, *but* you cannot use the Mojang names\n+for more than understanding the code.\n+\n+[yarn] is in general more thorough than Mojang's own mappings, as they include\n+method arguments as well, whereas Mojang's do not. If you need local variables\n+to understand the code, you might be more lucky with ModCoderPack.\n+\n+For more information on the Mojang name licensing issues, check this out:\n+<https://cpw.github.io/MinecraftMappingData.html>\n+\n+### My commit doesn't need a build, what do I do?\n+\n+Well, quite simple: You add `[CI-SKIP]` to the start of your commit subject.\n+\n+This case most often applies to changes to files like `README.md`, this very\n+file (`CONTRIBUTING.md`), the `LICENSE.md` file, and so forth.\n+\n+### Patching and building is *really* slow, what can I do?\n+\n+This only applies if you're running Windows 10. If you're running a prior\n+Windows release, either update to Windows 10 or move to macOS/Linux/BSD.\n+\n+To speed up the programs used, you have to get WSL 2. This is available in\n+Windows 10 v2004, build 19041 or higher. Check your version by running `winver`\n+in the run window (Windows key + R). If you're out of date, update your system\n+with the Windows Update Assistant.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 569}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDczNzQzOnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDowNjo1N1rOGyVgAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDowNjo1N1rOGyVgAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzNDI0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To get WSL 2, follow the information at this link:\n          \n          \n            \n            To setup WSL 2, follow the information here:", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r455434243", "createdAt": "2020-07-16T00:06:57Z", "author": {"login": "JRoy"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -210,32 +357,135 @@ public boolean pushedByWater() {\n     return true;\n }\n ```\n-While they may not always be done in exactly the same way each time, the general goal is always to improve readability and maintainability, so use your best judgement.\n+\n+While they may not always be done in exactly the same way, the general goal is\n+always to improve readability and maintainability, so use your best judgement\n+and do what fits best in your situation.\n \n ## Configuration files\n-To use a configurable value in your patch, add a new entry in either ```PaperConfig``` or ```PaperWorldConfig```. Use the former if a value must remain the same throughout all worlds, or the latter if it can change between worlds. The latter is preferred whenever possible.\n \n-### PaperConfig example:\n+To use a configurable value in your patch, add a new entry in either the\n+`PaperConfig` or `PaperWorldConfig` classes. Use the former (`PaperConfig`) if\n+a value must remain the same throughout all worlds, or the latter if it can\n+change between worlds. The latter is preferred whenever possible.\n+\n+### PaperConfig example\n+\n ```java\n public static boolean saveEmptyScoreboardTeams = false;\n private static void saveEmptyScoreboardTeams() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     saveEmptyScoreboardTeams = getBoolean(\"settings.save-empty-scoreboard-teams\", false);\n }\n ```\n-Notice that the field is always public, but the setter is always private. This is important to the way the configuration generation system works. To access this value, reference it as you would any other static value:\n+\n+Notice that the field is always public, but the setter is always private. This\n+is important to the way the configuration generation system works. To access\n+this value, reference it as you would any other static value:\n+\n ```java\n if (!PaperConfig.saveEmptyScoreboardTeams) {\n ```\n \n-### PaperWorldConfig example:\n+It is often preferred that you use the fully qualified name for the\n+configuration class when accessing it, like so:\n+`com.destroystokyo.paper.PaperConfig.valueHere`.  \n+If this is not done, a developer for Paper might fix that for you before\n+merging, but it's always nice if you make it a habit where you only need 1-2\n+lines changed.\n+\n+### PaperWorldConfig example\n+\n ```java\n public boolean useInhabitedTime = true;\n private void useInhabitedTime() {\n+    // This is called automatically!\n+    // The name also doesn't matter.\n     useInhabitedTime = getBoolean(\"use-chunk-inhabited-timer\", true);\n }\n ```\n-Again, notice that the field is always public, but the setter is always private. To access this value, you'll need an instance of the ```net.minecraft.World``` object:\n+\n+Again, notice that the field is always public, but the setter is always private.\n+To access this value, you'll need an instance of the `net.minecraft.World`\n+object:\n \n ```java\n return this.world.paperConfig.useInhabitedTime ? this.w : 0;\n ```\n+\n+## Frequently Asked Questions\n+\n+### I can't find the NMS file I need!\n+\n+By default, Paper (and upstream) only import files we make changes to. If you\n+would like to make changes to a file that isn't present in `Paper-Server`'s\n+source directory, you just need to add it to our import script ran during the\n+patching process.\n+\n+1. Save (rebuild) any patches you are in the middle of working on! Their\n+progress will be lost if you do not;\n+1. Identify the name(s) of the file(s) you want to import.\n+   - A complete list of all possible file names can be found at\n+   `./work/Minecraft/$MCVER/spigot/net/minecraft/server`. You might find\n+   [MiniMappingViewer] very useful to find the file you need.\n+1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to\n+the script. Skip to the 2nd last header and follow the instructions there;\n+1. Re-patch the server `./paper patch`;\n+1. Edit away!\n+\n+> \u2757 This change is temporary! **DO NOT COMMIT CHANGES TO THIS FILE!**  \n+> Once you have made your changes to the new file, and rebuilt patches, you may\n+> undo your changes to `importmcdev.sh`.\n+\n+Any file modified in a patch file gets automatically imported, so you only need\n+this temporarily to import it to create the first patch.\n+\n+To undo your changes to the file, type `git checkout scripts/importmcdev.sh`.\n+\n+### Where can I learn what this method/field does?\n+\n+For most cases, it is preferred if you use [yarn], as their license works with\n+Paper's license. If you can't do that, [MiniMappingViewer] is always around to\n+provide you with more of a general idea, *but* you cannot use the Mojang names\n+for more than understanding the code.\n+\n+[yarn] is in general more thorough than Mojang's own mappings, as they include\n+method arguments as well, whereas Mojang's do not. If you need local variables\n+to understand the code, you might be more lucky with ModCoderPack.\n+\n+For more information on the Mojang name licensing issues, check this out:\n+<https://cpw.github.io/MinecraftMappingData.html>\n+\n+### My commit doesn't need a build, what do I do?\n+\n+Well, quite simple: You add `[CI-SKIP]` to the start of your commit subject.\n+\n+This case most often applies to changes to files like `README.md`, this very\n+file (`CONTRIBUTING.md`), the `LICENSE.md` file, and so forth.\n+\n+### Patching and building is *really* slow, what can I do?\n+\n+This only applies if you're running Windows 10. If you're running a prior\n+Windows release, either update to Windows 10 or move to macOS/Linux/BSD.\n+\n+To speed up the programs used, you have to get WSL 2. This is available in\n+Windows 10 v2004, build 19041 or higher. Check your version by running `winver`\n+in the run window (Windows key + R). If you're out of date, update your system\n+with the Windows Update Assistant.\n+\n+To get WSL 2, follow the information at this link:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "884006400aa9428f3d910f23f7f08cebcf21d922"}, "originalPosition": 571}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDczNzQ3OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjowNTo1N1rOGzwijQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzo0MjozN1rOG4Ah7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyNTgzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            which are all available in (most) package managers such as `apt` (Debian /\n          \n          \n            \n            which is available in package managers such as `apt` (Debian /\n          \n      \n    \n    \n  \n\nsoftware is not countable", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r456925837", "createdAt": "2020-07-19T16:05:57Z", "author": {"login": "kennytv"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,269 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn how to name method/field?](#where-can-i-learn-how-to-name-methodfield)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+  * [I wrote some API, how do I use it in Paper-Server?](#i-wrote-some-api-how-do-i-use-it-in-paper-server)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618494e5162472ba5de23034a36ca7aada888ed6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NjA0OQ==", "bodyText": "most of which is when talking about a mass noun (according to Oxford dictionaries anyway) is not correct either, I believe. I'll wait for someone else to kick in with a correction if I'm wrong.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r461196049", "createdAt": "2020-07-27T22:01:42Z", "author": {"login": "Proximyst"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,269 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn how to name method/field?](#where-can-i-learn-how-to-name-methodfield)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+  * [I wrote some API, how do I use it in Paper-Server?](#i-wrote-some-api-how-do-i-use-it-in-paper-server)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyNTgzNw=="}, "originalCommit": {"oid": "618494e5162472ba5de23034a36ca7aada888ed6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5OTMyOA==", "bodyText": "I think you're wrong. \"software, most of which are available\" sounds off-putting. Software is, not \"software are\".", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r461199328", "createdAt": "2020-07-27T22:10:03Z", "author": {"login": "A248"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,269 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn how to name method/field?](#where-can-i-learn-how-to-name-methodfield)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+  * [I wrote some API, how do I use it in Paper-Server?](#i-wrote-some-api-how-do-i-use-it-in-paper-server)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyNTgzNw=="}, "originalCommit": {"oid": "618494e5162472ba5de23034a36ca7aada888ed6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMDkzMQ==", "bodyText": "I just reworded it as a whole to avoid potential pluralisation.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r461200931", "createdAt": "2020-07-27T22:13:57Z", "author": {"login": "Proximyst"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,269 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn how to name method/field?](#where-can-i-learn-how-to-name-methodfield)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+  * [I wrote some API, how do I use it in Paper-Server?](#i-wrote-some-api-how-do-i-use-it-in-paper-server)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyNTgzNw=="}, "originalCommit": {"oid": "618494e5162472ba5de23034a36ca7aada888ed6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MjEyNA==", "bodyText": "\"Mass-noun\" is just a fancy term for uncountable.. I also don't see anything on that page that suggests you'd treat it as a normal plural (with \"are\") \ud83d\udc40", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r461382124", "createdAt": "2020-07-28T07:42:37Z", "author": {"login": "kennytv"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,269 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn how to name method/field?](#where-can-i-learn-how-to-name-methodfield)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+  * [I wrote some API, how do I use it in Paper-Server?](#i-wrote-some-api-how-do-i-use-it-in-paper-server)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyNTgzNw=="}, "originalCommit": {"oid": "618494e5162472ba5de23034a36ca7aada888ed6"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDczODk4OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjowNzo1MlrOGzwjQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjowNzo1MlrOGzwjQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyNjAxOQ==", "bodyText": "\"Paper is essentially a set of patches on top of Spigot\" - MojangAPI doesn't really fit under that description (so either change the introduction above or move the MojangAPI separated under the patch directories)", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r456926019", "createdAt": "2020-07-19T16:07:52Z", "author": {"login": "kennytv"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,269 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn how to name method/field?](#where-can-i-learn-how-to-name-methodfield)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+  * [I wrote some API, how do I use it in Paper-Server?](#i-wrote-some-api-how-do-i-use-it-in-paper-server)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /\n+Ubuntu), `homebrew` (macOS / Linux), and more:\n \n-These directories aren't git repositories in the traditional sense:\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+If you're on Windows, check\n+[the section on WSL](#patching-and-building-is-really-slow-what-can-i-do).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+## Understanding Patches\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+Paper is essentially a set of patches on top of Spigot. These patches are split\n+into different directories which target a certain part of the code. These\n+directories are:\n+\n+- `Paper-API` - Modifications to `Spigot-API`/`Bukkit`;\n+- `Paper-MojangAPI` - An API for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618494e5162472ba5de23034a36ca7aada888ed6"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDc0MTY5OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjoxMTowNFrOGzwkkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjoxMTowNFrOGzwkkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyNjM1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Assuming you already have forked the repository:\n          \n          \n            \n            Assuming you have already forked the repository:\n          \n      \n    \n    \n  \n\n(most adverbs of time go into mid position)", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r456926355", "createdAt": "2020-07-19T16:11:04Z", "author": {"login": "kennytv"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,269 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn how to name method/field?](#where-can-i-learn-how-to-name-methodfield)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+  * [I wrote some API, how do I use it in Paper-Server?](#i-wrote-some-api-how-do-i-use-it-in-paper-server)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /\n+Ubuntu), `homebrew` (macOS / Linux), and more:\n \n-These directories aren't git repositories in the traditional sense:\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+If you're on Windows, check\n+[the section on WSL](#patching-and-building-is-really-slow-what-can-i-do).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+## Understanding Patches\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+Paper is essentially a set of patches on top of Spigot. These patches are split\n+into different directories which target a certain part of the code. These\n+directories are:\n+\n+- `Paper-API` - Modifications to `Spigot-API`/`Bukkit`;\n+- `Paper-MojangAPI` - An API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier);\n+- `Paper-Server` - Modifications to `Spigot`/`CraftBukkit`.\n+\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Assuming you already have forked the repository:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618494e5162472ba5de23034a36ca7aada888ed6"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDc0MzI5OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjoxMzoxOVrOGzwlYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxNjoxMzoxOVrOGzwlYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyNjU2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            instruction do exactly what the above slightly automated system does.\n          \n          \n            \n            instruction does exactly what the slightly automated system above does.", "url": "https://github.com/PaperMC/Paper/pull/3907#discussion_r456926562", "createdAt": "2020-07-19T16:13:19Z", "author": {"login": "kennytv"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,143 +1,269 @@\n Contributing to Paper\n ==========================\n-PaperMC has a very lenient policy towards PRs, but would prefer that you try and adhere to the following guidelines.\n+PaperMC is happy you're willing to contribute to our projects. We are usually\n+very lentient with all submitted PRs, but there are still some guidelines you\n+can follow to make the approval process go more smoothly.\n+\n+**Table of contents:**\n+<!-- Please don't remove the following comments.\n+To generate and update the TOC: https://github.com/mzlogin/vim-markdown-toc -->\n+<!-- vim-markdown-toc GFM -->\n+\n+* [Use a Personal Fork and not Organization](#use-a-personal-fork-and-not-organization)\n+* [Requirements](#requirements)\n+* [Understanding Patches](#understanding-patches)\n+* [Adding Patches](#adding-patches)\n+* [Modifying Patches](#modifying-patches)\n+  * [Method 1](#method-1)\n+    * [Using the Paper tool](#using-the-paper-tool)\n+    * [Manual method: Stashing](#manual-method-stashing)\n+  * [Method 2 - Fixup commits](#method-2---fixup-commits)\n+    * [Manual method](#manual-method)\n+    * [Automatic method](#automatic-method)\n+* [PR Policy](#pr-policy)\n+* [Formatting](#formatting)\n+* [Patch Notes](#patch-notes)\n+* [Obfuscation Helpers](#obfuscation-helpers)\n+* [Configuration files](#configuration-files)\n+  * [PaperConfig example](#paperconfig-example)\n+  * [PaperWorldConfig example](#paperworldconfig-example)\n+* [Frequently Asked Questions](#frequently-asked-questions)\n+  * [I can't find the NMS file I need!](#i-cant-find-the-nms-file-i-need)\n+  * [Where can I learn how to name method/field?](#where-can-i-learn-how-to-name-methodfield)\n+  * [My commit doesn't need a build, what do I do?](#my-commit-doesnt-need-a-build-what-do-i-do)\n+  * [Patching and building is *really* slow, what can I do?](#patching-and-building-is-really-slow-what-can-i-do)\n+  * [I wrote some API, how do I use it in Paper-Server?](#i-wrote-some-api-how-do-i-use-it-in-paper-server)\n+\n+<!-- vim-markdown-toc -->\n \n ## Use a Personal Fork and not Organization\n-Paper will routinely modify your PR for you to rebase it on latest or take care of any minor nitpicks that we can\n-just solve for you instead of making you go back for a trivial item.\n \n-However, if you use an Organization for the PR, this prevents Paper from doing this, and will require us to manually\n-merge it and close the PR instead of it being marked as the purple merged.\n+Paper will routinely modify your PR, whether it's a quick rebase or to take care\n+of any minor nitpicks we might have. Often, it's better for us to solve these\n+problems for you than make you go back and forth trying to fix it yourself.\n \n-We much prefer to have merged PR's show as merged, so please do not use organizations repo's for PR as GitHub sadly\n-does not support maintainers pushing to them.\n+Unfortunately, if you use an organization for your PR, it prevents Paper from\n+modifying it. This requires us to manually merge your PR, resulting in us\n+closing the PR instead of marking it as merged.\n \n-See [https://github.com/isaacs/github/issues/1681](https://github.com/isaacs/github/issues/1681)\n+We much prefer to have PRs show as merged, so please do not use repositories\n+on organizations for PRs.\n \n-## Understanding Patches\n-Patches to Paper are very simple, but center around the directories 'Paper-API' and 'Paper-Server'\n+See <https://github.com/isaacs/github/issues/1681> for more information on the\n+issue.\n \n-Assuming you already have forked the repository:\n+## Requirements\n \n-1. Pull the latest changes from the main repository\n-1. Type `./paper patch` in git bash to apply the changes from upstream\n-1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes\n+To get started with PRing changes, you'll need the following software, most of\n+which are all available in (most) package managers such as `apt` (Debian /\n+Ubuntu), `homebrew` (macOS / Linux), and more:\n \n-These directories aren't git repositories in the traditional sense:\n+- `git` (package `git` everywhere);\n+- `patch` (often package `patch`);\n+- A Java 8 or later JDK (packages vary, use Google/DuckDuckGo/etc.).  \n+If you need one, you can find them on [AdoptOpenJDK](https://adoptopenjdk.net/).\n+- `maven` (often package `maven`; can be found on\n+[Apache's site](https://maven.apache.org/download.cgi) too).\n \n-- Every single commit in Paper-Server/API is a patch. \n-- 'origin/master' points to a directory similar to Paper-Server/API but for Paper\n-- Typing `git status` should show that we are 10 or 11 commits ahead of master, meaning we have 10 or 11 patches that Paper and Spigot don't\n-  - If it says something like `212 commits ahead, 207 commits behind`, then type `git fetch` to update spigot/paper\n+If you're on Windows, check\n+[the section on WSL](#patching-and-building-is-really-slow-what-can-i-do).\n \n-## Adding Patches\n-Adding patches to Paper is very simple:\n+If you're compiling with Docker, you can use the\n+[`adoptopenjdk`](https://hub.docker.com/_/adoptopenjdk/) images like so:\n \n-1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes\n-1. Type `git add .` to add your changes\n-1. Run `git commit` with the desired patch message\n-1. Run `./paper rebuild` in the main directory to convert your commit into a new patch\n-1. PR your patches back to this repository\n+```console\n+# docker run -it -v \"$(pwd)\":/data --rm adoptopenjdk:8-jdk-hotspot bash\n+Pulling image...\n \n-Your commit will be converted into a patch that you can then PR into Paper\n+root@abcdefg1234:/# javac -version\n+javac 1.8.0_252\n+```\n \n-## Help! I can't find the file I'm looking for!\n-By default, Paper (and upstream) only import files that we make changes to.\n-If you would like to make changes to a file that isn't present in Paper-Server's source directory, you\n-just need to add it to our import script to be ran during the patch process.\n+## Understanding Patches\n \n-1. Save (rebuild) any patches you are in the middle of working on!\n-1. Identify the names of the files you want to import.\n-   - A complete list of all possible file names can be found at ```./work/Minecraft/$MCVER/spigot/net/minecraft/server```\n-1. Open the file at `./scripts/importmcdev.sh` and add the name of your file to the script.\n-1. Re-patch the server `./paper patch`\n-1. Edit away!\n+Paper is essentially a set of patches on top of Spigot. These patches are split\n+into different directories which target a certain part of the code. These\n+directories are:\n+\n+- `Paper-API` - Modifications to `Spigot-API`/`Bukkit`;\n+- `Paper-MojangAPI` - An API for\n+[Mojang's Brigadier](https://github.com/Mojang/brigadier);\n+- `Paper-Server` - Modifications to `Spigot`/`CraftBukkit`.\n+\n+Because the entire structure is based on patches and git, a basic understanding\n+of how to use git is required. A basic tutorial can be found here:\n+<https://git-scm.com/docs/gittutorial>.\n \n-This change is temporary! DO NOT COMMIT CHANGES TO THIS FILE!\n-Once you have made your changes to the new file, and rebuilt patches, you may undo your changes to importmcdev.sh\n+Assuming you already have forked the repository:\n+\n+1. Clone your fork to your local machine;\n+1. Type `./paper patch` in a terminal to apply the changes from upstream;\n+1. cd into `Paper-Server` for server changes, and `Paper-API` for API changes.  \n+You can also run `./paper server` or `./paper api` for these same directories\n+respectively.\n+1. You can also run `./paper setup`, which allows you to type `paper <command>`\n+from anywhere in the Paper structure in most cases.\n+\n+`Paper-Server` and `Paper-API` aren't git repositories in the traditional sense:\n+\n+- Every single commit in `Paper-Server`/`Paper-API` is a patch;\n+- `origin/master` points to a directory similar to `Paper-Server`/`Paper-API`\n+but for Paper;\n+- Typing `git status` should show that we are 10 or 11 commits ahead of master,\n+meaning we have 10 or 11 patches Spigot and CraftBukkit don't.\n+   - If it says something like `212 commits ahead, 207 commits behind`,\n+   cd into the root directory of the cloned repository and type `git fetch` to\n+   update your upstream. Setting up a remote for the upstream Paper repository\n+   might be necessary.\n \n-Any file modified in a patch file gets automatically imported, so you only need this temporarily\n-to import it to create the first patch.\n+## Adding Patches\n+\n+Adding patches to Paper is very simple:\n \n-To undo your changes to the file, type `git checkout scripts/importmcdev.sh`\n+1. Modify `Paper-Server` and/or `Paper-API` with the appropriate changes;\n+1. Type `git add .` inside these directories to add your changes;\n+1. Run `git commit` with the desired patch message;\n+1. Run `./paper rebuild` in the main directory to convert your commit into a new\n+patch;\n+1. PR the generated patch file(s) back to this repository.\n \n+Your commit will be converted into a patch that you can then PR into Paper.\n+\n+> \u2757 Please note that if you have some specific implementation detail you'd like\n+> to document, you should do so in the patch message *or* in comments.\n \n ## Modifying Patches\n+\n Modifying previous patches is a bit more complex:\n \n ### Method 1\n-This method works by temporarily resetting HEAD to the desired commit to edit using rebase.\n \n-However, while in the middle of an edit, unless you also reset your API to a related commit, you will not be able to compile.\n+This method works by temporarily resetting your `HEAD` to the desired commit to\n+edit it using `git rebase`.\n+\n+> \u2757 While in the middle of an edit, you will not be able to compile unless you\n+> *also* reset the opposing module(s) to a related commit. In the API's case,\n+> you must reset the Server, and reset the API if you're editing the Server.\n \n #### Using the Paper tool\n-The PaperMC build tool provides a handy command to automatically do this type of patch modification.\n-\n-1. Type `./paper edit server` or `./paper edit api` depending on which project you want to edit.\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `./paper edit continue` to finish and rebuild patches.\n-1. PR your modifications back to this project.\n-\n-#### Manual method - Stashing\n-In case you need something more complex or want more control, this step-by-step instruction does\n-exactly what the above slightly automated system does.\n-\n-1. If you have changes you are working on type `git stash` to store them for later.\n-   - Later you can type `git stash pop` to get them back.\n-1. Type `git rebase -i upstream/upstream`\n-   - It should show something like [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159).\n-1. Replace `pick` with `edit` for the commit/patch you want to modify, and \"save\" the changes.\n-   - Only do this for one commit at a time.\n-1. Make the changes you want to make to the patch.\n-1. Type `git add .` to add your changes.\n-1. Type `git commit --amend` to commit.\n-   - **MAKE SURE TO ADD `--amend`** or else a new patch will be created.\n-   - You can also modify the commit message here.\n-1. Type `git rebase --continue` to finish rebasing.\n-1. Type `./paper rebuild` in the main directory.\n+\n+The PaperMC build tool provides a handy command to automatically do this type of\n+patch modification.\n+\n+1. Type `./paper edit server` or `./paper edit api` depending on which project\n+you want to edit;\n+   - It should show something like\n+   [this](https://gist.github.com/zachbr/21e92993cb99f62ffd7905d7b02f3159) in\n+   the text editor you get.\n+   - If your editor does not have a \"menu\" at the bottom, you're using `vim`.  \n+   If you don't know how to use `vim` and don't want to\n+   learn, enter `:q!` and press enter. Before redoing this step, do\n+   `export EDITOR=nano` for an easier editor to use.\n+1. Replace `pick` with `edit` for the commit/patch you want to modify, and\n+\"save\" the changes;\n+   - Only do this for **one** commit at a time.\n+1. Make the changes you want to make to the patch;\n+1. Type `./paper edit continue` in the root directory to finish and rebuild\n+patches;\n+1. PR your modified patch file(s) back to this repository.\n+\n+#### Manual method: Stashing\n+\n+In case you need something more complex or want more control, this step-by-step\n+instruction do exactly what the above slightly automated system does.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618494e5162472ba5de23034a36ca7aada888ed6"}, "originalPosition": 244}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1862, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}