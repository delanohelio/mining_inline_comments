{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNjgzNjMw", "number": 4213, "title": "Add additional open container api to HumanEntity", "bodyText": "another round of \"i want this in essentials but i don't want to enter nms hell\"", "createdAt": "2020-08-26T06:32:48Z", "url": "https://github.com/PaperMC/Paper/pull/4213", "merged": true, "mergeCommit": {"oid": "794e6baf144fbb76fd82def160b44dbb0454b60d"}, "closed": true, "closedAt": "2020-09-10T18:31:50Z", "author": {"login": "JRoy"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCmuk4gFqTQ3NTIyMjYxMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHlJmsgFqTQ4NjIwNzQwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjIyNjEy", "url": "https://github.com/PaperMC/Paper/pull/4213#pullrequestreview-475222612", "createdAt": "2020-08-26T07:30:40Z", "commit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozMDo0MFrOHG_ZIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozMToyNVrOHG_awQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjEzMQ==", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092131", "createdAt": "2020-08-26T07:30:40Z", "author": {"login": "kashike"}, "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjI1MQ==", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092251", "createdAt": "2020-08-26T07:30:56Z", "author": {"login": "kashike"}, "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjMxMw==", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092313", "createdAt": "2020-08-26T07:31:01Z", "author": {"login": "kashike"}, "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjQwMQ==", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092401", "createdAt": "2020-08-26T07:31:08Z", "author": {"login": "kashike"}, "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.GRINDSTONE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockGrindstone) Blocks.GRINDSTONE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openLoom(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.LOOM) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjUwNA==", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092504", "createdAt": "2020-08-26T07:31:19Z", "author": {"login": "kashike"}, "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.GRINDSTONE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockGrindstone) Blocks.GRINDSTONE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openLoom(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.LOOM) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockLoom) Blocks.LOOM).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openSmithingTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjU0NQ==", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092545", "createdAt": "2020-08-26T07:31:25Z", "author": {"login": "kashike"}, "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.GRINDSTONE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockGrindstone) Blocks.GRINDSTONE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openLoom(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.LOOM) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockLoom) Blocks.LOOM).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openSmithingTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.SMITHING_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockSmithingTable) Blocks.SMITHING_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openStonecutter(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjMwNjEy", "url": "https://github.com/PaperMC/Paper/pull/4213#pullrequestreview-475230612", "createdAt": "2020-08-26T07:42:18Z", "commit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo0MjoxOFrOHG_x2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo0MzozNlrOHG_0jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5ODQ1OQ==", "bodyText": "Wouldn't it be easier for users to just specify inventory type?", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477098459", "createdAt": "2020-08-26T07:42:18Z", "author": {"login": "Proximyst"}, "path": "Spigot-API-Patches/0221-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,103 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:11:58 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/entity/HumanEntity.java b/src/main/java/org/bukkit/entity/HumanEntity.java\n+index b09d12390d5f77330ac84452e0fee63a169bd01f..77bff8fb6bfdf739e413084e13677a83e723c71e 100644\n+--- a/src/main/java/org/bukkit/entity/HumanEntity.java\n++++ b/src/main/java/org/bukkit/entity/HumanEntity.java\n+@@ -148,6 +148,92 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder\n+     @Nullable\n+     public InventoryView openMerchant(@NotNull Merchant merchant, boolean force);\n+ \n++    // Paper start - Add additional containers\n++    /**\n++     * Opens an empty anvil inventory window with the player's inventory\n++     * on the bottom.\n++     *\n++     * @param location The location to attach it to. If null, the player's\n++     *     location is used.\n++     * @param force If false, and there is no anvil block at the location,\n++     *     no inventory will be opened and null will be returned.\n++     * @return The newly opened inventory view, or null if it could not be\n++     *     opened.\n++     */\n++    @Nullable\n++    public InventoryView openAnvil(@Nullable Location location, boolean force);\n++\n++    /**\n++     * Opens an empty cartography table inventory window with the player's inventory\n++     * on the bottom.\n++     *\n++     * @param location The location to attach it to. If null, the player's\n++     *     location is used.\n++     * @param force If false, and there is no cartography table block at the location,\n++     *     no inventory will be opened and null will be returned.\n++     * @return The newly opened inventory view, or null if it could not be\n++     *     opened.\n++     */\n++    @Nullable\n++    public InventoryView openCartographyTable(@Nullable Location location, boolean force);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5ODczMQ==", "bodyText": "Just set to !force", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477098731", "createdAt": "2020-08-26T07:42:48Z", "author": {"login": "Proximyst"}, "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.GRINDSTONE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockGrindstone) Blocks.GRINDSTONE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openLoom(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.LOOM) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockLoom) Blocks.LOOM).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openSmithingTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.SMITHING_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockSmithingTable) Blocks.SMITHING_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openStonecutter(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.STONECUTTER) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockStonecutter) Blocks.STONECUTTER).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5OTE0OQ==", "bodyText": "Async catcher; this modifies state.", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477099149", "createdAt": "2020-08-26T07:43:36Z", "author": {"login": "Proximyst"}, "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.GRINDSTONE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockGrindstone) Blocks.GRINDSTONE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openLoom(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.LOOM) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockLoom) Blocks.LOOM).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openSmithingTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.SMITHING_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockSmithingTable) Blocks.SMITHING_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openStonecutter(Location location, boolean force) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213"}, "originalPosition": 107}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8bc7b60f57016350873d6b4084d52ed0e84b213", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/PaperMC/Paper/commit/c8bc7b60f57016350873d6b4084d52ed0e84b213", "committedDate": "2020-08-26T06:30:08Z", "message": "Add additional open container api to HumanEntity"}, "afterCommit": {"oid": "da96f583f0142ed34a9efb37af9d7eb45a1b595e", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/PaperMC/Paper/commit/da96f583f0142ed34a9efb37af9d7eb45a1b595e", "committedDate": "2020-08-27T00:48:21Z", "message": "Add additional open container api to HumanEntity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da96f583f0142ed34a9efb37af9d7eb45a1b595e", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/PaperMC/Paper/commit/da96f583f0142ed34a9efb37af9d7eb45a1b595e", "committedDate": "2020-08-27T00:48:21Z", "message": "Add additional open container api to HumanEntity"}, "afterCommit": {"oid": "9448da5a1357c5abcaad32eb5743c7c60aadb16f", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/PaperMC/Paper/commit/9448da5a1357c5abcaad32eb5743c7c60aadb16f", "committedDate": "2020-08-27T03:24:38Z", "message": "Add additional open container api to HumanEntity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9448da5a1357c5abcaad32eb5743c7c60aadb16f", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/PaperMC/Paper/commit/9448da5a1357c5abcaad32eb5743c7c60aadb16f", "committedDate": "2020-08-27T03:24:38Z", "message": "Add additional open container api to HumanEntity"}, "afterCommit": {"oid": "bc706933adca9364c2d3f9a33383a081a47d6f26", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/PaperMC/Paper/commit/bc706933adca9364c2d3f9a33383a081a47d6f26", "committedDate": "2020-08-27T04:17:11Z", "message": "Add additional open container api to HumanEntity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDAxOTQx", "url": "https://github.com/PaperMC/Paper/pull/4213#pullrequestreview-485401941", "createdAt": "2020-09-09T21:03:18Z", "commit": {"oid": "bc706933adca9364c2d3f9a33383a081a47d6f26"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NTQ4Nzk5", "url": "https://github.com/PaperMC/Paper/pull/4213#pullrequestreview-485548799", "createdAt": "2020-09-10T04:00:56Z", "commit": {"oid": "bc706933adca9364c2d3f9a33383a081a47d6f26"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc706933adca9364c2d3f9a33383a081a47d6f26", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/PaperMC/Paper/commit/bc706933adca9364c2d3f9a33383a081a47d6f26", "committedDate": "2020-08-27T04:17:11Z", "message": "Add additional open container api to HumanEntity"}, "afterCommit": {"oid": "a1e1c74ad79601baa35ac35c0cb3f815cb99ef95", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/PaperMC/Paper/commit/a1e1c74ad79601baa35ac35c0cb3f815cb99ef95", "committedDate": "2020-09-10T18:19:42Z", "message": "Add additional open container api to HumanEntity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94ec29189df1a05cb6020c1c2044193c5d630b40", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/PaperMC/Paper/commit/94ec29189df1a05cb6020c1c2044193c5d630b40", "committedDate": "2020-09-10T18:26:31Z", "message": "Add additional open container api to HumanEntity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1e1c74ad79601baa35ac35c0cb3f815cb99ef95", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/PaperMC/Paper/commit/a1e1c74ad79601baa35ac35c0cb3f815cb99ef95", "committedDate": "2020-09-10T18:19:42Z", "message": "Add additional open container api to HumanEntity"}, "afterCommit": {"oid": "94ec29189df1a05cb6020c1c2044193c5d630b40", "author": {"user": {"login": "JRoy", "name": "Josh Roy"}}, "url": "https://github.com/PaperMC/Paper/commit/94ec29189df1a05cb6020c1c2044193c5d630b40", "committedDate": "2020-09-10T18:26:31Z", "message": "Add additional open container api to HumanEntity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MjA3NDAz", "url": "https://github.com/PaperMC/Paper/pull/4213#pullrequestreview-486207403", "createdAt": "2020-09-10T18:31:41Z", "commit": {"oid": "94ec29189df1a05cb6020c1c2044193c5d630b40"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1556, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}