{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTY1NzYy", "number": 3207, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzo0MDozN1rOD2d99A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzo0MzozNFrOD2eAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDQwNjkyOnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0199-Add-villager-reputation-API.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzo0MDozN1rOGMPYmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MDozM1rOGMakOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4ODE1Mg==", "bodyText": "Shouldn't there be //Paper comments in here or something? I think there should be, but I didn't check.", "url": "https://github.com/PaperMC/Paper/pull/3207#discussion_r415488152", "createdAt": "2020-04-27T03:40:37Z", "author": {"login": "Trigary"}, "path": "Spigot-API-Patches/0199-Add-villager-reputation-API.patch", "diffHunk": "@@ -0,0 +1,161 @@\n+From fe579478964c7507612f77bd9256e0beda691466 Mon Sep 17 00:00:00 2001\n+From: Mariell Hoversholm <proximyst@proximyst.com>\n+Date: Wed, 22 Apr 2020 23:13:49 +0200\n+Subject: [PATCH] Add villager reputation API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java b/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java\n+new file mode 100644\n+index 00000000..86b7f6b7\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java\n+@@ -0,0 +1,41 @@\n++package com.destroystokyo.paper.entity.villager;\n++\n++import com.google.common.base.Preconditions;\n++import java.util.Map;\n++import org.jetbrains.annotations.NotNull;\n++\n++/**\n++ * A reputation score for a player on a villager.\n++ */\n++public final class Reputation {\n++    @NotNull\n++    private final Map<ReputationType, Integer> reputation;\n++\n++    public Reputation(@NotNull final Map<ReputationType, Integer> reputation) {\n++        Preconditions.checkNotNull(reputation, \"reputation cannot be null\");\n++\n++        this.reputation = reputation;\n++    }\n++\n++    /**\n++     * Gets the reputation value for a specific {@link ReputationType}.\n++     *\n++     * @param type The {@link ReputationType type} of reputation to get.\n++     * @return The value of the {@link ReputationType type}.\n++     */\n++    public int getReputation(@NotNull ReputationType type) {\n++        Preconditions.checkNotNull(type, \"the reputation type cannot be null\");\n++        return reputation.getOrDefault(type, 0);\n++    }\n++\n++    /**\n++     * Sets the reputation value for a specific {@link ReputationType}.\n++     *\n++     * @param type The {@link ReputationType type} of reputation to set.\n++     * @param value The value of the {@link ReputationType type}.\n++     */\n++    public void setReputation(@NotNull ReputationType type, int value) {\n++        Preconditions.checkNotNull(type, \"the reputation type cannot be null\");\n++        reputation.put(type, value);\n++    }\n++}\n+diff --git a/src/main/java/com/destroystokyo/paper/entity/villager/ReputationType.java b/src/main/java/com/destroystokyo/paper/entity/villager/ReputationType.java\n+new file mode 100644\n+index 00000000..5600fcdc\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/entity/villager/ReputationType.java\n+@@ -0,0 +1,36 @@\n++package com.destroystokyo.paper.entity.villager;\n++\n++/**\n++ * A type of reputation gained with a {@link org.bukkit.entity.Villager Villager}.\n++ * <p>\n++ * All types but {@link #MAJOR_POSITIVE} are shared to other villagers.\n++ */\n++public enum ReputationType {\n++    /**\n++     * A gossip with a majorly negative effect. This is only gained through killing a nearby\n++     * villager.\n++     */\n++    MAJOR_NEGATIVE,\n++\n++    /**\n++     * A gossip with a minor negative effect. This is only gained through damaging a villager.\n++     */\n++    MINOR_NEGATIVE,\n++\n++    /**\n++     * A gossip with a minor positive effect. This is only gained through curing a zombie\n++     * villager.\n++     */\n++    MINOR_POSITIVE,\n++\n++    /**\n++     * A gossip with a major positive effect. This is only gained through curing a zombie\n++     * villager.\n++     */\n++    MAJOR_POSITIVE,\n++\n++    /**\n++     * A gossip with a minor positive effect. This is only gained through trading with a villager.\n++     */\n++    TRADING,\n++}\n+diff --git a/src/main/java/org/bukkit/entity/Villager.java b/src/main/java/org/bukkit/entity/Villager.java\n+index ef48ad9b..c5812e37 100644\n+--- a/src/main/java/org/bukkit/entity/Villager.java\n++++ b/src/main/java/org/bukkit/entity/Villager.java\n+@@ -1,10 +1,13 @@\n+ package org.bukkit.entity;\n+ \n+ import java.util.Locale;\n++import java.util.Map;\n++import java.util.UUID;\n+ import org.bukkit.Keyed;\n+ import org.bukkit.Location;\n+ import org.bukkit.NamespacedKey;\n+ import org.jetbrains.annotations.NotNull;\n++import org.jetbrains.annotations.Nullable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "286257de7d6968e60161a49562865f8fc0ba80ab"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MTM1Mw==", "bodyText": "Should be fixed now.", "url": "https://github.com/PaperMC/Paper/pull/3207#discussion_r415671353", "createdAt": "2020-04-27T09:50:33Z", "author": {"login": "Proximyst"}, "path": "Spigot-API-Patches/0199-Add-villager-reputation-API.patch", "diffHunk": "@@ -0,0 +1,161 @@\n+From fe579478964c7507612f77bd9256e0beda691466 Mon Sep 17 00:00:00 2001\n+From: Mariell Hoversholm <proximyst@proximyst.com>\n+Date: Wed, 22 Apr 2020 23:13:49 +0200\n+Subject: [PATCH] Add villager reputation API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java b/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java\n+new file mode 100644\n+index 00000000..86b7f6b7\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java\n+@@ -0,0 +1,41 @@\n++package com.destroystokyo.paper.entity.villager;\n++\n++import com.google.common.base.Preconditions;\n++import java.util.Map;\n++import org.jetbrains.annotations.NotNull;\n++\n++/**\n++ * A reputation score for a player on a villager.\n++ */\n++public final class Reputation {\n++    @NotNull\n++    private final Map<ReputationType, Integer> reputation;\n++\n++    public Reputation(@NotNull final Map<ReputationType, Integer> reputation) {\n++        Preconditions.checkNotNull(reputation, \"reputation cannot be null\");\n++\n++        this.reputation = reputation;\n++    }\n++\n++    /**\n++     * Gets the reputation value for a specific {@link ReputationType}.\n++     *\n++     * @param type The {@link ReputationType type} of reputation to get.\n++     * @return The value of the {@link ReputationType type}.\n++     */\n++    public int getReputation(@NotNull ReputationType type) {\n++        Preconditions.checkNotNull(type, \"the reputation type cannot be null\");\n++        return reputation.getOrDefault(type, 0);\n++    }\n++\n++    /**\n++     * Sets the reputation value for a specific {@link ReputationType}.\n++     *\n++     * @param type The {@link ReputationType type} of reputation to set.\n++     * @param value The value of the {@link ReputationType type}.\n++     */\n++    public void setReputation(@NotNull ReputationType type, int value) {\n++        Preconditions.checkNotNull(type, \"the reputation type cannot be null\");\n++        reputation.put(type, value);\n++    }\n++}\n+diff --git a/src/main/java/com/destroystokyo/paper/entity/villager/ReputationType.java b/src/main/java/com/destroystokyo/paper/entity/villager/ReputationType.java\n+new file mode 100644\n+index 00000000..5600fcdc\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/entity/villager/ReputationType.java\n+@@ -0,0 +1,36 @@\n++package com.destroystokyo.paper.entity.villager;\n++\n++/**\n++ * A type of reputation gained with a {@link org.bukkit.entity.Villager Villager}.\n++ * <p>\n++ * All types but {@link #MAJOR_POSITIVE} are shared to other villagers.\n++ */\n++public enum ReputationType {\n++    /**\n++     * A gossip with a majorly negative effect. This is only gained through killing a nearby\n++     * villager.\n++     */\n++    MAJOR_NEGATIVE,\n++\n++    /**\n++     * A gossip with a minor negative effect. This is only gained through damaging a villager.\n++     */\n++    MINOR_NEGATIVE,\n++\n++    /**\n++     * A gossip with a minor positive effect. This is only gained through curing a zombie\n++     * villager.\n++     */\n++    MINOR_POSITIVE,\n++\n++    /**\n++     * A gossip with a major positive effect. This is only gained through curing a zombie\n++     * villager.\n++     */\n++    MAJOR_POSITIVE,\n++\n++    /**\n++     * A gossip with a minor positive effect. This is only gained through trading with a villager.\n++     */\n++    TRADING,\n++}\n+diff --git a/src/main/java/org/bukkit/entity/Villager.java b/src/main/java/org/bukkit/entity/Villager.java\n+index ef48ad9b..c5812e37 100644\n+--- a/src/main/java/org/bukkit/entity/Villager.java\n++++ b/src/main/java/org/bukkit/entity/Villager.java\n+@@ -1,10 +1,13 @@\n+ package org.bukkit.entity;\n+ \n+ import java.util.Locale;\n++import java.util.Map;\n++import java.util.UUID;\n+ import org.bukkit.Keyed;\n+ import org.bukkit.Location;\n+ import org.bukkit.NamespacedKey;\n+ import org.jetbrains.annotations.NotNull;\n++import org.jetbrains.annotations.Nullable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4ODE1Mg=="}, "originalCommit": {"oid": "286257de7d6968e60161a49562865f8fc0ba80ab"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDQxMzMyOnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0492-Add-villager-reputation-API.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzo0MzozNFrOGMPb1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MDoyNlrOGMaj3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4ODk4MA==", "bodyText": "Could we reuse code instead of doing code duplication for these few lines? Doesn't really matter, but it triggers me a bit. Well, you know... I'm triggery.", "url": "https://github.com/PaperMC/Paper/pull/3207#discussion_r415488980", "createdAt": "2020-04-27T03:43:34Z", "author": {"login": "Trigary"}, "path": "Spigot-Server-Patches/0492-Add-villager-reputation-API.patch", "diffHunk": "@@ -0,0 +1,125 @@\n+From 3822a3e6327e63028e0e22470db739f4753ee8c3 Mon Sep 17 00:00:00 2001\n+From: Mariell Hoversholm <proximyst@proximyst.com>\n+Date: Wed, 22 Apr 2020 23:29:20 +0200\n+Subject: [PATCH] Add villager reputation API\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/EntityVillager.java b/src/main/java/net/minecraft/server/EntityVillager.java\n+index 6e0020ae0..2b355368d 100644\n+--- a/src/main/java/net/minecraft/server/EntityVillager.java\n++++ b/src/main/java/net/minecraft/server/EntityVillager.java\n+@@ -945,6 +945,7 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation\n+         this.bL = 0;\n+     }\n+ \n++    public Reputation getReputation() { return this.eN(); } // Paper - OBFHELPER\n+     public Reputation eN() {\n+         return this.bG;\n+     }\n+diff --git a/src/main/java/net/minecraft/server/Reputation.java b/src/main/java/net/minecraft/server/Reputation.java\n+index 0b6f91ac1..05bce4120 100644\n+--- a/src/main/java/net/minecraft/server/Reputation.java\n++++ b/src/main/java/net/minecraft/server/Reputation.java\n+@@ -25,7 +25,7 @@ import java.util.stream.Stream;\n+ \n+ public class Reputation {\n+ \n+-    private final Map<UUID, Reputation.a> a = Maps.newHashMap();\n++    private final Map<UUID, Reputation.a> a = Maps.newHashMap(); public Map<UUID, Reputation.a> getReputations() { return this.a; } // Paper - add getter for reputations\n+ \n+     public Reputation() {}\n+ \n+@@ -138,11 +138,11 @@ public class Reputation {\n+         return k > reputationtype.h ? Math.max(reputationtype.h, i) : k;\n+     }\n+ \n+-    static class a {\n++    public static class a { // Paper - make public\n+ \n+-        private final Object2IntMap<ReputationType> a;\n++        private final Object2IntMap<ReputationType> a; public Object2IntMap<ReputationType> getReputationValues() { return this.a; } // Paper - add getter for reputation values\n+ \n+-        private a() {\n++        public a() { // Paper - make public\n+             this.a = new Object2IntOpenHashMap();\n+         }\n+ \n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java\n+index a73ebaa75..dc3f349ea 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java\n+@@ -1,7 +1,12 @@\n+ package org.bukkit.craftbukkit.entity;\n+ \n++import com.destroystokyo.paper.entity.villager.Reputation; // Paper\n++import com.destroystokyo.paper.entity.villager.ReputationType; // Paper\n+ import com.google.common.base.Preconditions;\n++import com.google.common.collect.Maps; // Paper\n+ import java.util.Locale;\n++import java.util.Map; // Paper\n++import java.util.UUID; // Paper\n+ import net.minecraft.server.EntityVillager;\n+ import net.minecraft.server.IRegistry;\n+ import net.minecraft.server.VillagerProfession;\n+@@ -112,4 +117,58 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {\n+     public static VillagerProfession bukkitToNmsProfession(Profession bukkit) {\n+         return IRegistry.VILLAGER_PROFESSION.get(CraftNamespacedKey.toMinecraft(bukkit.getKey()));\n+     }\n++\n++    // Paper start - Add villager reputation API\n++    @Override\n++    public Reputation getReputation(UUID uniqueId) {\n++        net.minecraft.server.Reputation.a rep = getHandle().getReputation().getReputations().get(uniqueId);\n++        if (rep == null) {\n++            return new Reputation(Maps.newHashMap());\n++        }\n++\n++        Map<ReputationType, Integer> reputationMap = Maps.newHashMap();\n++        reputationMap.put(ReputationType.MAJOR_NEGATIVE, rep.getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MAJOR_NEGATIVE, 0));\n++        reputationMap.put(ReputationType.MAJOR_POSITIVE, rep.getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MAJOR_POSITIVE, 0));\n++        reputationMap.put(ReputationType.MINOR_NEGATIVE, rep.getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MINOR_NEGATIVE, 0));\n++        reputationMap.put(ReputationType.MINOR_POSITIVE, rep.getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MINOR_POSITIVE, 0));\n++        reputationMap.put(ReputationType.TRADING, rep.getReputationValues().getOrDefault(net.minecraft.server.ReputationType.TRADING, 0));\n++        return new Reputation(reputationMap);\n++    }\n++\n++    @Override\n++    public Map<UUID, Reputation> getReputations() {\n++        return getHandle().getReputation().getReputations().entrySet()\n++            .stream()\n++            .collect(java.util.stream.Collectors.toMap(Map.Entry::getKey, value -> {\n++                Map<ReputationType, Integer> reputationMap = Maps.newHashMap();\n++                reputationMap.put(ReputationType.MAJOR_NEGATIVE, value.getValue().getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MAJOR_NEGATIVE, 0));\n++                reputationMap.put(ReputationType.MAJOR_POSITIVE, value.getValue().getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MAJOR_POSITIVE, 0));\n++                reputationMap.put(ReputationType.MINOR_NEGATIVE, value.getValue().getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MINOR_NEGATIVE, 0));\n++                reputationMap.put(ReputationType.MINOR_POSITIVE, value.getValue().getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MINOR_POSITIVE, 0));\n++                reputationMap.put(ReputationType.TRADING, value.getValue().getReputationValues().getOrDefault(net.minecraft.server.ReputationType.TRADING, 0));\n++                return new Reputation(reputationMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "286257de7d6968e60161a49562865f8fc0ba80ab"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MTI2Mw==", "bodyText": "Should be fixed now.", "url": "https://github.com/PaperMC/Paper/pull/3207#discussion_r415671263", "createdAt": "2020-04-27T09:50:26Z", "author": {"login": "Proximyst"}, "path": "Spigot-Server-Patches/0492-Add-villager-reputation-API.patch", "diffHunk": "@@ -0,0 +1,125 @@\n+From 3822a3e6327e63028e0e22470db739f4753ee8c3 Mon Sep 17 00:00:00 2001\n+From: Mariell Hoversholm <proximyst@proximyst.com>\n+Date: Wed, 22 Apr 2020 23:29:20 +0200\n+Subject: [PATCH] Add villager reputation API\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/EntityVillager.java b/src/main/java/net/minecraft/server/EntityVillager.java\n+index 6e0020ae0..2b355368d 100644\n+--- a/src/main/java/net/minecraft/server/EntityVillager.java\n++++ b/src/main/java/net/minecraft/server/EntityVillager.java\n+@@ -945,6 +945,7 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation\n+         this.bL = 0;\n+     }\n+ \n++    public Reputation getReputation() { return this.eN(); } // Paper - OBFHELPER\n+     public Reputation eN() {\n+         return this.bG;\n+     }\n+diff --git a/src/main/java/net/minecraft/server/Reputation.java b/src/main/java/net/minecraft/server/Reputation.java\n+index 0b6f91ac1..05bce4120 100644\n+--- a/src/main/java/net/minecraft/server/Reputation.java\n++++ b/src/main/java/net/minecraft/server/Reputation.java\n+@@ -25,7 +25,7 @@ import java.util.stream.Stream;\n+ \n+ public class Reputation {\n+ \n+-    private final Map<UUID, Reputation.a> a = Maps.newHashMap();\n++    private final Map<UUID, Reputation.a> a = Maps.newHashMap(); public Map<UUID, Reputation.a> getReputations() { return this.a; } // Paper - add getter for reputations\n+ \n+     public Reputation() {}\n+ \n+@@ -138,11 +138,11 @@ public class Reputation {\n+         return k > reputationtype.h ? Math.max(reputationtype.h, i) : k;\n+     }\n+ \n+-    static class a {\n++    public static class a { // Paper - make public\n+ \n+-        private final Object2IntMap<ReputationType> a;\n++        private final Object2IntMap<ReputationType> a; public Object2IntMap<ReputationType> getReputationValues() { return this.a; } // Paper - add getter for reputation values\n+ \n+-        private a() {\n++        public a() { // Paper - make public\n+             this.a = new Object2IntOpenHashMap();\n+         }\n+ \n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java\n+index a73ebaa75..dc3f349ea 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java\n+@@ -1,7 +1,12 @@\n+ package org.bukkit.craftbukkit.entity;\n+ \n++import com.destroystokyo.paper.entity.villager.Reputation; // Paper\n++import com.destroystokyo.paper.entity.villager.ReputationType; // Paper\n+ import com.google.common.base.Preconditions;\n++import com.google.common.collect.Maps; // Paper\n+ import java.util.Locale;\n++import java.util.Map; // Paper\n++import java.util.UUID; // Paper\n+ import net.minecraft.server.EntityVillager;\n+ import net.minecraft.server.IRegistry;\n+ import net.minecraft.server.VillagerProfession;\n+@@ -112,4 +117,58 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {\n+     public static VillagerProfession bukkitToNmsProfession(Profession bukkit) {\n+         return IRegistry.VILLAGER_PROFESSION.get(CraftNamespacedKey.toMinecraft(bukkit.getKey()));\n+     }\n++\n++    // Paper start - Add villager reputation API\n++    @Override\n++    public Reputation getReputation(UUID uniqueId) {\n++        net.minecraft.server.Reputation.a rep = getHandle().getReputation().getReputations().get(uniqueId);\n++        if (rep == null) {\n++            return new Reputation(Maps.newHashMap());\n++        }\n++\n++        Map<ReputationType, Integer> reputationMap = Maps.newHashMap();\n++        reputationMap.put(ReputationType.MAJOR_NEGATIVE, rep.getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MAJOR_NEGATIVE, 0));\n++        reputationMap.put(ReputationType.MAJOR_POSITIVE, rep.getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MAJOR_POSITIVE, 0));\n++        reputationMap.put(ReputationType.MINOR_NEGATIVE, rep.getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MINOR_NEGATIVE, 0));\n++        reputationMap.put(ReputationType.MINOR_POSITIVE, rep.getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MINOR_POSITIVE, 0));\n++        reputationMap.put(ReputationType.TRADING, rep.getReputationValues().getOrDefault(net.minecraft.server.ReputationType.TRADING, 0));\n++        return new Reputation(reputationMap);\n++    }\n++\n++    @Override\n++    public Map<UUID, Reputation> getReputations() {\n++        return getHandle().getReputation().getReputations().entrySet()\n++            .stream()\n++            .collect(java.util.stream.Collectors.toMap(Map.Entry::getKey, value -> {\n++                Map<ReputationType, Integer> reputationMap = Maps.newHashMap();\n++                reputationMap.put(ReputationType.MAJOR_NEGATIVE, value.getValue().getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MAJOR_NEGATIVE, 0));\n++                reputationMap.put(ReputationType.MAJOR_POSITIVE, value.getValue().getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MAJOR_POSITIVE, 0));\n++                reputationMap.put(ReputationType.MINOR_NEGATIVE, value.getValue().getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MINOR_NEGATIVE, 0));\n++                reputationMap.put(ReputationType.MINOR_POSITIVE, value.getValue().getReputationValues().getOrDefault(net.minecraft.server.ReputationType.MINOR_POSITIVE, 0));\n++                reputationMap.put(ReputationType.TRADING, value.getValue().getReputationValues().getOrDefault(net.minecraft.server.ReputationType.TRADING, 0));\n++                return new Reputation(reputationMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4ODk4MA=="}, "originalCommit": {"oid": "286257de7d6968e60161a49562865f8fc0ba80ab"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1650, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}