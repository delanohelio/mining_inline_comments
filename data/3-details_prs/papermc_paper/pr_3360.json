{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTg0NzQw", "number": 3360, "title": "Workaround for Client Lag Spikes (MC-162253)", "bodyText": "To avoid rephrasing the ticket, see https://bugs.mojang.com/browse/MC-162253?focusedCommentId=695626&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-695626 for an analysis of how this issue manifests.\nTLDR is: A client bug is triggering the generation of multiple lightmaps at once when passing a chunk boundary causing the client to have a very notable lag spike. Since this issue is present since at least 1.14.4, someone has dug into the code to find out the conditions/problems.\nThis patch serves as a workaround by sending the light maps to the client, so that the generation does not happen, thus mitigating the issue.\nWould you like this to be behind a preference? Ultimatively it'll be removed again when/if mojang fixes 16225.\nUnfortunately, I've mis-added a whitespace in Line 68 of the diff, I'll fix that together with the other input you guys might have.\nEssentially this PR is only about sending PacketPlayOutLightUpdate packets for all 8 neighbors, but I've added some filters to reduce the sent packets, which seems to fork fine so far, but testing is encouraged.\nUse the conditions explained in the linked example (superflat work, placing the glass block and then moving from chunk (9 0) to (8 0) to see the effect. (Server View Distance of 7)\nEdit: The Patch needs to include the missing 3 at the end.", "createdAt": "2020-05-12T21:39:01Z", "url": "https://github.com/PaperMC/Paper/pull/3360", "merged": true, "mergeCommit": {"oid": "72f89a076aa56a6f60cdda354e7ac5eb324daed7"}, "closed": true, "closedAt": "2020-05-17T04:23:11Z", "author": {"login": "MeFisto94"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchZ_IdAFqTQxMjMzMjU0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABciDe-FgBqjMzNDQxNjk5ODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzMyNTQ1", "url": "https://github.com/PaperMC/Paper/pull/3360#pullrequestreview-412332545", "createdAt": "2020-05-15T04:02:10Z", "commit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDowMjoxMFrOGV1v7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDowMjoxMFrOGV1v7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1MzkwMg==", "bodyText": "seven?", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r425553902", "createdAt": "2020-05-15T04:02:10Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzU1ODk5", "url": "https://github.com/PaperMC/Paper/pull/3360#pullrequestreview-412355899", "createdAt": "2020-05-15T05:26:28Z", "commit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNToyNjoyOFrOGV27kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNToyNjoyOFrOGV27kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzI2Ng==", "bodyText": "and this bithack is what? from my memory this looks like getHighestBit, but according to some documentation it appears getHighestBit is implemented differently...", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r425573266", "createdAt": "2020-05-15T05:26:28Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty\n++        }\n++\n++        return mask;\n++    }\n++\n++    private static int getCeilingLightMask(final Chunk chunk) {\n++        int mask = getLightMask(chunk);\n++\n++        mask |= mask >> 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzU2MDY2", "url": "https://github.com/PaperMC/Paper/pull/3360#pullrequestreview-412356066", "createdAt": "2020-05-15T05:26:55Z", "commit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNToyNjo1NVrOGV28DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNToyNjo1NVrOGV28DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzM4OQ==", "bodyText": "no diff should be here", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r425573389", "createdAt": "2020-05-15T05:26:55Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty\n++        }\n++\n++        return mask;\n++    }\n++\n++    private static int getCeilingLightMask(final Chunk chunk) {\n++        int mask = getLightMask(chunk);\n++\n++        mask |= mask >> 1;\n++        mask |= mask >> 2;\n++        mask |= mask >> 4;\n++        mask |= mask >> 8;\n++        mask |= mask >> 16;\n++\n++        return mask;\n++    }\n++\n+     final void sendChunk(EntityPlayer entityplayer, Packet<?>[] apacket, Chunk chunk) { this.a(entityplayer, apacket, chunk); } // Paper - OBFHELPER\n+-    private void a(EntityPlayer entityplayer, Packet<?>[] apacket, Chunk chunk) {\n++    private void a(EntityPlayer entityplayer, Packet<?>[] apacket,  Chunk chunk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTM1MTk4", "url": "https://github.com/PaperMC/Paper/pull/3360#pullrequestreview-412935198", "createdAt": "2020-05-15T20:07:56Z", "commit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowNzo1NlrOGWSXXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowNzo1NlrOGWSXXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMjc0OA==", "bodyText": "needs paper comment", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426022748", "createdAt": "2020-05-15T20:07:56Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTM2NjI0", "url": "https://github.com/PaperMC/Paper/pull/3360#pullrequestreview-412936624", "createdAt": "2020-05-15T20:10:23Z", "commit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoxMDoyM1rOGWSbEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoxMDoyM1rOGWSbEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMzY5Nw==", "bodyText": "these functions need to be enclosed with paper start and end", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426023697", "createdAt": "2020-05-15T20:10:23Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTM2Nzc0", "url": "https://github.com/PaperMC/Paper/pull/3360#pullrequestreview-412936774", "createdAt": "2020-05-15T20:10:37Z", "commit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoxMDozN1rOGWSbfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoxMDozN1rOGWSbfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMzgwNg==", "bodyText": "also needs paper comment", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426023806", "createdAt": "2020-05-15T20:10:37Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTM2OTMw", "url": "https://github.com/PaperMC/Paper/pull/3360#pullrequestreview-412936930", "createdAt": "2020-05-15T20:10:57Z", "commit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72f89a076aa56a6f60cdda354e7ac5eb324daed7", "author": {"user": {"login": "MeFisto94", "name": null}}, "url": "https://github.com/PaperMC/Paper/commit/72f89a076aa56a6f60cdda354e7ac5eb324daed7", "committedDate": "2020-05-17T04:21:42Z", "message": "Workaround for Client Lag Spikes (MC-162253)\n\nWhen crossing certain chunk boundaries, the client needlessly\ncalculates light maps for chunk neighbours. In some specific map\nconfigurations, these calculations cause a 500ms+ freeze on the Client.\n\nThis patch basically serves as a workaround by sending light maps\nto the client, so that it doesn't attempt to calculate them.\nThis mitigates the frametime impact to a minimum (but it's still there)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a", "author": {"user": {"login": "MeFisto94", "name": null}}, "url": "https://github.com/PaperMC/Paper/commit/55e57c508842e4fec015989b5cf92bc55112e46a", "committedDate": "2020-05-12T21:11:30Z", "message": "Workaround for Client Lag Spikes (MC-16225)"}, "afterCommit": {"oid": "72f89a076aa56a6f60cdda354e7ac5eb324daed7", "author": {"user": {"login": "MeFisto94", "name": null}}, "url": "https://github.com/PaperMC/Paper/commit/72f89a076aa56a6f60cdda354e7ac5eb324daed7", "committedDate": "2020-05-17T04:21:42Z", "message": "Workaround for Client Lag Spikes (MC-162253)\n\nWhen crossing certain chunk boundaries, the client needlessly\ncalculates light maps for chunk neighbours. In some specific map\nconfigurations, these calculations cause a 500ms+ freeze on the Client.\n\nThis patch basically serves as a workaround by sending light maps\nto the client, so that it doesn't attempt to calculate them.\nThis mitigates the frametime impact to a minimum (but it's still there)."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1877, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}