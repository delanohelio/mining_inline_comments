{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0OTk1NTg4", "number": 2883, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMTo0MzowMFrODZVAZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjoyNTozN1rODsPpcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODg1MTU5OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0191-Add-PlayerSettingsChangeEvent.patch", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMTo0MzowMVrOFfpzIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1NDo0MFrOFgBa0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODczNTAxMQ==", "bodyText": "let's not make the impl detail of skins api", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r368735011", "createdAt": "2020-01-20T21:43:01Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-API-Patches/0191-Add-PlayerSettingsChangeEvent.patch", "diffHunk": "@@ -0,0 +1,121 @@\n+From e2a607d5a57cb63975f022bc1b67af07781f1c8b Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:34 +0100\n+Subject: [PATCH] Add PlayerSettingsChangeEvent\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+new file mode 100644\n+index 00000000..2d27b6d8\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+@@ -0,0 +1,106 @@\n++package com.destroystokyo.paper.event.player;\n++\n++import org.jetbrains.annotations.NotNull;\n++\n++import org.bukkit.entity.Player;\n++import org.bukkit.event.Cancellable;\n++import org.bukkit.event.HandlerList;\n++import org.bukkit.event.player.PlayerEvent;\n++import org.bukkit.inventory.MainHand;\n++\n++/**\n++ * Called when the player changes his settings\n++ */\n++public class PlayerSettingsChangeEvent extends PlayerEvent {\n++\n++    private static final HandlerList handlers = new HandlerList();\n++\n++    private final String locale;\n++    private final int viewDistance;\n++    private final ChatVisibility chatVisibility;\n++    private final boolean chatColors;\n++    private final int skinparts;\n++    private final MainHand mainHand;\n++\n++    public PlayerSettingsChangeEvent(@NotNull Player player, @NotNull String locale, int viewDistance, @NotNull ChatVisibility chatVisibility, boolean chatColors, int skinParts, @NotNull MainHand mainHand) {\n++        super(player);\n++        this.locale = locale;\n++        this.viewDistance = viewDistance;\n++        this.chatVisibility = chatVisibility;\n++        this.chatColors = chatColors;\n++        this.skinparts = skinParts;\n++        this.mainHand = mainHand;\n++    }\n++\n++    @NotNull\n++    public String getLocale() {\n++        return locale;\n++    }\n++\n++    public int getViewDistance() {\n++        return viewDistance;\n++    }\n++\n++    @NotNull\n++    public ChatVisibility getChatVisibility() {\n++        return chatVisibility;\n++    }\n++\n++    public boolean hasChatColorsEnabled() {\n++        return chatColors;\n++    }\n++\n++    public int getSkinparts() {\n++        return skinparts;\n++    }\n++\n++    @NotNull\n++    public MainHand getMainHand() {\n++        return mainHand;\n++    }\n++\n++    public boolean hasCapeEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08da9459b21ad0e7bdcf4df86aec989f1e38c69f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0NTY2NA==", "bodyText": "Mmh, ok, I will let the event return a new SkinParts API class with an impl that handles that.", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r368845664", "createdAt": "2020-01-21T07:32:28Z", "author": {"login": "MiniDigger"}, "path": "Spigot-API-Patches/0191-Add-PlayerSettingsChangeEvent.patch", "diffHunk": "@@ -0,0 +1,121 @@\n+From e2a607d5a57cb63975f022bc1b67af07781f1c8b Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:34 +0100\n+Subject: [PATCH] Add PlayerSettingsChangeEvent\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+new file mode 100644\n+index 00000000..2d27b6d8\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+@@ -0,0 +1,106 @@\n++package com.destroystokyo.paper.event.player;\n++\n++import org.jetbrains.annotations.NotNull;\n++\n++import org.bukkit.entity.Player;\n++import org.bukkit.event.Cancellable;\n++import org.bukkit.event.HandlerList;\n++import org.bukkit.event.player.PlayerEvent;\n++import org.bukkit.inventory.MainHand;\n++\n++/**\n++ * Called when the player changes his settings\n++ */\n++public class PlayerSettingsChangeEvent extends PlayerEvent {\n++\n++    private static final HandlerList handlers = new HandlerList();\n++\n++    private final String locale;\n++    private final int viewDistance;\n++    private final ChatVisibility chatVisibility;\n++    private final boolean chatColors;\n++    private final int skinparts;\n++    private final MainHand mainHand;\n++\n++    public PlayerSettingsChangeEvent(@NotNull Player player, @NotNull String locale, int viewDistance, @NotNull ChatVisibility chatVisibility, boolean chatColors, int skinParts, @NotNull MainHand mainHand) {\n++        super(player);\n++        this.locale = locale;\n++        this.viewDistance = viewDistance;\n++        this.chatVisibility = chatVisibility;\n++        this.chatColors = chatColors;\n++        this.skinparts = skinParts;\n++        this.mainHand = mainHand;\n++    }\n++\n++    @NotNull\n++    public String getLocale() {\n++        return locale;\n++    }\n++\n++    public int getViewDistance() {\n++        return viewDistance;\n++    }\n++\n++    @NotNull\n++    public ChatVisibility getChatVisibility() {\n++        return chatVisibility;\n++    }\n++\n++    public boolean hasChatColorsEnabled() {\n++        return chatColors;\n++    }\n++\n++    public int getSkinparts() {\n++        return skinparts;\n++    }\n++\n++    @NotNull\n++    public MainHand getMainHand() {\n++        return mainHand;\n++    }\n++\n++    public boolean hasCapeEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODczNTAxMQ=="}, "originalCommit": {"oid": "08da9459b21ad0e7bdcf4df86aec989f1e38c69f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMjAwMw==", "bodyText": "done", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r369122003", "createdAt": "2020-01-21T16:54:40Z", "author": {"login": "MiniDigger"}, "path": "Spigot-API-Patches/0191-Add-PlayerSettingsChangeEvent.patch", "diffHunk": "@@ -0,0 +1,121 @@\n+From e2a607d5a57cb63975f022bc1b67af07781f1c8b Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:34 +0100\n+Subject: [PATCH] Add PlayerSettingsChangeEvent\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+new file mode 100644\n+index 00000000..2d27b6d8\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+@@ -0,0 +1,106 @@\n++package com.destroystokyo.paper.event.player;\n++\n++import org.jetbrains.annotations.NotNull;\n++\n++import org.bukkit.entity.Player;\n++import org.bukkit.event.Cancellable;\n++import org.bukkit.event.HandlerList;\n++import org.bukkit.event.player.PlayerEvent;\n++import org.bukkit.inventory.MainHand;\n++\n++/**\n++ * Called when the player changes his settings\n++ */\n++public class PlayerSettingsChangeEvent extends PlayerEvent {\n++\n++    private static final HandlerList handlers = new HandlerList();\n++\n++    private final String locale;\n++    private final int viewDistance;\n++    private final ChatVisibility chatVisibility;\n++    private final boolean chatColors;\n++    private final int skinparts;\n++    private final MainHand mainHand;\n++\n++    public PlayerSettingsChangeEvent(@NotNull Player player, @NotNull String locale, int viewDistance, @NotNull ChatVisibility chatVisibility, boolean chatColors, int skinParts, @NotNull MainHand mainHand) {\n++        super(player);\n++        this.locale = locale;\n++        this.viewDistance = viewDistance;\n++        this.chatVisibility = chatVisibility;\n++        this.chatColors = chatColors;\n++        this.skinparts = skinParts;\n++        this.mainHand = mainHand;\n++    }\n++\n++    @NotNull\n++    public String getLocale() {\n++        return locale;\n++    }\n++\n++    public int getViewDistance() {\n++        return viewDistance;\n++    }\n++\n++    @NotNull\n++    public ChatVisibility getChatVisibility() {\n++        return chatVisibility;\n++    }\n++\n++    public boolean hasChatColorsEnabled() {\n++        return chatColors;\n++    }\n++\n++    public int getSkinparts() {\n++        return skinparts;\n++    }\n++\n++    @NotNull\n++    public MainHand getMainHand() {\n++        return mainHand;\n++    }\n++\n++    public boolean hasCapeEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODczNTAxMQ=="}, "originalCommit": {"oid": "08da9459b21ad0e7bdcf4df86aec989f1e38c69f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDgwMTI5OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0190-Add-Player-Settings-API.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1NzozOVrOFk-BMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1NzozOVrOFk-BMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwOTE3MA==", "bodyText": "final. we do not want to have inheritance here.", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r374309170", "createdAt": "2020-02-03T19:57:39Z", "author": {"login": "yannicklamprecht"}, "path": "Spigot-API-Patches/0190-Add-Player-Settings-API.patch", "diffHunk": "@@ -20,16 +20,16 @@ index 00000000..27aed60d\n +\n +public class SettingType<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54ef727259a26a658bb69684f0117dd9f6c4e581"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODczMTc4OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0190-Add-Player-Settings-API.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxODo1OVrOFlj0iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxODo1OVrOFlj0iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyODUyMw==", "bodyText": "This should probably be in SettingsType", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r374928523", "createdAt": "2020-02-04T21:18:59Z", "author": {"login": "electronicboy"}, "path": "Spigot-API-Patches/0190-Add-Player-Settings-API.patch", "diffHunk": "@@ -0,0 +1,207 @@\n+From 61e4d95a06a76083d5600102066e145b0d4104e7 Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:34 +0100\n+Subject: [PATCH] Add Player Settings API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/SettingType.java b/src/main/java/com/destroystokyo/paper/SettingType.java\n+new file mode 100644\n+index 00000000..c4f0486c\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/SettingType.java\n+@@ -0,0 +1,28 @@\n++package com.destroystokyo.paper;\n++\n++import com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent.ChatVisibility;\n++\n++import org.jetbrains.annotations.NotNull;\n++\n++import org.bukkit.inventory.MainHand;\n++\n++public final class SettingType<T> {\n++\n++    public static final SettingType<SkinParts> SKIN_PARTS = new SettingType<>(SkinParts.class);\n++    public static final SettingType<Boolean> CHAT_COLORS_ENABLED = new SettingType<>(Boolean.class);\n++    public static final SettingType<ChatVisibility> CHAT_VISIBILITY = new SettingType<>(ChatVisibility.class);\n++    public static final SettingType<String> LOCALE = new SettingType<>(String.class);\n++    public static final SettingType<MainHand> MAIN_HAND = new SettingType<>(MainHand.class);\n++    public static final SettingType<Integer> VIEW_DISTANCE = new SettingType<>(Integer.class);\n++\n++    private final Class<T> type;\n++\n++    private SettingType(@NotNull Class<T> type) {\n++        this.type = type;\n++    }\n++\n++    @NotNull\n++    public Class<T> getType() {\n++        return type;\n++    }\n++}\n+diff --git a/src/main/java/com/destroystokyo/paper/SkinParts.java b/src/main/java/com/destroystokyo/paper/SkinParts.java\n+new file mode 100644\n+index 00000000..4a0c3940\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/SkinParts.java\n+@@ -0,0 +1,20 @@\n++package com.destroystokyo.paper;\n++\n++public interface SkinParts {\n++\n++    boolean hasCapeEnabled();\n++\n++    boolean hasJacketEnabled();\n++\n++    boolean hasLeftSleeveEnabled();\n++\n++    boolean hasRightSleeveEnabled();\n++\n++    boolean hasLeftPantsEnabled();\n++\n++    boolean hasRightPantsEnabled();\n++\n++    boolean hasHatsEnabled();\n++\n++    int getRaw();\n++}\n+diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+new file mode 100644\n+index 00000000..5717b761\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+@@ -0,0 +1,106 @@\n++package com.destroystokyo.paper.event.player;\n++\n++import com.destroystokyo.paper.SettingType;\n++import com.destroystokyo.paper.SkinParts;\n++\n++import org.jetbrains.annotations.NotNull;\n++\n++import org.bukkit.entity.Player;\n++import org.bukkit.event.HandlerList;\n++import org.bukkit.event.player.PlayerEvent;\n++import org.bukkit.inventory.MainHand;\n++\n++/**\n++ * Called when the player changes his settings\n++ */\n++public class PlayerSettingsChangeEvent extends PlayerEvent {\n++\n++    private static final HandlerList handlers = new HandlerList();\n++\n++    private final String locale;\n++    private final int viewDistance;\n++    private final ChatVisibility chatVisibility;\n++    private final boolean chatColors;\n++    private final SkinParts skinparts;\n++    private final MainHand mainHand;\n++\n++    public PlayerSettingsChangeEvent(@NotNull Player player, @NotNull String locale, int viewDistance, @NotNull ChatVisibility chatVisibility, boolean chatColors, @NotNull SkinParts skinParts, @NotNull MainHand mainHand) {\n++        super(player);\n++        this.locale = locale;\n++        this.viewDistance = viewDistance;\n++        this.chatVisibility = chatVisibility;\n++        this.chatColors = chatColors;\n++        this.skinparts = skinParts;\n++        this.mainHand = mainHand;\n++    }\n++\n++    @NotNull\n++    public String getLocale() {\n++        return locale;\n++    }\n++\n++    public boolean hasLocaleChanged() {\n++        return !locale.equals(player.getSetting(SettingType.LOCALE));\n++    }\n++\n++    public int getViewDistance() {\n++        return viewDistance;\n++    }\n++\n++    public boolean hasViewDistanceChanged() {\n++        return viewDistance != player.getSetting(SettingType.VIEW_DISTANCE);\n++    }\n++\n++    @NotNull\n++    public ChatVisibility getChatVisibility() {\n++        return chatVisibility;\n++    }\n++\n++    public boolean hasChatVisibilityChanged() {\n++        return chatVisibility != player.getSetting(SettingType.CHAT_VISIBILITY);\n++    }\n++\n++    public boolean hasChatColorsEnabled() {\n++        return chatColors;\n++    }\n++\n++    public boolean hasChatColorsEnabledChanged() {\n++        return chatColors != player.getSetting(SettingType.CHAT_COLORS_ENABLED);\n++    }\n++\n++    @NotNull\n++    public SkinParts getSkinParts() {\n++        return skinparts;\n++    }\n++\n++    public boolean hasSkinPartsChanged() {\n++        return skinparts.getRaw() != player.getSetting(SettingType.SKIN_PARTS).getRaw();\n++    }\n++\n++    @NotNull\n++    public MainHand getMainHand() {\n++        return mainHand;\n++    }\n++\n++    public boolean hasMainHandChanged() {\n++        return mainHand != player.getSetting(SettingType.MAIN_HAND);\n++    }\n++\n++    @Override\n++    @NotNull\n++    public HandlerList getHandlers() {\n++        return handlers;\n++    }\n++\n++    @NotNull\n++    public static HandlerList getHandlerList() {\n++        return handlers;\n++    }\n++\n++    public enum ChatVisibility {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be9b06f8db3f1da14b35e7f993b89c0da988d51"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODczODU5OnYy", "diffSide": "RIGHT", "path": "Spigot-API-Patches/0190-Add-Player-Settings-API.patch", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMToxN1rOFlj4pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMToxN1rOFlj4pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyOTU3NQ==", "bodyText": "Only concern here is the ambiguity of the class name", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r374929575", "createdAt": "2020-02-04T21:21:17Z", "author": {"login": "electronicboy"}, "path": "Spigot-API-Patches/0190-Add-Player-Settings-API.patch", "diffHunk": "@@ -0,0 +1,207 @@\n+From 61e4d95a06a76083d5600102066e145b0d4104e7 Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:34 +0100\n+Subject: [PATCH] Add Player Settings API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/SettingType.java b/src/main/java/com/destroystokyo/paper/SettingType.java\n+new file mode 100644\n+index 00000000..c4f0486c\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/SettingType.java\n+@@ -0,0 +1,28 @@\n++package com.destroystokyo.paper;\n++\n++import com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent.ChatVisibility;\n++\n++import org.jetbrains.annotations.NotNull;\n++\n++import org.bukkit.inventory.MainHand;\n++\n++public final class SettingType<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be9b06f8db3f1da14b35e7f993b89c0da988d51"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc0NDQ1OnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0435-Implement-Player-Settings-API.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMzoxMFrOFlj8Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoxMzowNVrOFllTtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDUwMw==", "bodyText": "this still being used?", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r374930503", "createdAt": "2020-02-04T21:23:10Z", "author": {"login": "electronicboy"}, "path": "Spigot-Server-Patches/0435-Implement-Player-Settings-API.patch", "diffHunk": "@@ -0,0 +1,199 @@\n+From 2fcb869905325d2c1015fcc8418e44ae212355df Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:15 +0100\n+Subject: [PATCH] Implement Player Settings API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+new file mode 100644\n+index 000000000..b6f4400df\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+@@ -0,0 +1,74 @@\n++package com.destroystokyo.paper;\n++\n++import com.google.common.base.Objects;\n++\n++import java.util.StringJoiner;\n++\n++public class PaperSkinParts implements SkinParts {\n++\n++    private final int raw;\n++\n++    public PaperSkinParts(int raw) {\n++        this.raw = raw;\n++    }\n++\n++    public boolean hasCapeEnabled() {\n++        return (raw & 1) == 1;\n++    }\n++\n++    public boolean hasJacketEnabled() {\n++        return (raw >> 1 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftSleeveEnabled() {\n++        return (raw >> 2 & 1) == 1;\n++    }\n++\n++    public boolean hasRightSleeveEnabled() {\n++        return (raw >> 3 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftPantsEnabled() {\n++        return (raw >> 4 & 1) == 1;\n++    }\n++\n++    public boolean hasRightPantsEnabled() {\n++        return (raw >> 5 & 1) == 1;\n++    }\n++\n++    public boolean hasHatsEnabled() {\n++        return (raw >> 6 & 1) == 1;\n++    }\n++\n++    @Override\n++    public int getRaw() {\n++        return raw;\n++    }\n++\n++    @Override\n++    public boolean equals(Object o) {\n++        if (this == o) return true;\n++        if (o == null || getClass() != o.getClass()) return false;\n++        PaperSkinParts that = (PaperSkinParts) o;\n++        return raw == that.raw;\n++    }\n++\n++    @Override\n++    public int hashCode() {\n++        return Objects.hashCode(raw);\n++    }\n++\n++    @Override\n++    public String toString() {\n++        return new StringJoiner(\", \", PaperSkinParts.class.getSimpleName() + \"[\", \"]\")\n++            .add(\"raw=\" + raw)\n++            .add(\"cape=\" + hasCapeEnabled())\n++            .add(\"jacket=\" + hasJacketEnabled())\n++            .add(\"leftSleeve=\" + hasLeftSleeveEnabled())\n++            .add(\"rightSleeve=\" + hasRightSleeveEnabled())\n++            .add(\"leftPants=\" + hasLeftPantsEnabled())\n++            .add(\"rightPants=\" + hasRightPantsEnabled())\n++            .add(\"hats=\" + hasHatsEnabled())\n++            .toString();\n++    }\n++}\n+diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java\n+index 584166f22..e9f690180 100644\n+--- a/src/main/java/net/minecraft/server/EntityHuman.java\n++++ b/src/main/java/net/minecraft/server/EntityHuman.java\n+@@ -35,7 +35,7 @@ public abstract class EntityHuman extends EntityLiving {\n+     private static final Map<EntityPose, EntitySize> b = ImmutableMap.<EntityPose, EntitySize>builder().put(EntityPose.STANDING, EntityHuman.bp).put(EntityPose.SLEEPING, EntityHuman.ap).put(EntityPose.FALL_FLYING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntitySize.b(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntitySize.b(0.6F, 1.5F)).put(EntityPose.DYING, EntitySize.c(0.2F, 0.2F)).build();\n+     private static final DataWatcherObject<Float> c = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.c);\n+     private static final DataWatcherObject<Integer> d = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.b);\n+-    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n++    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a); public static DataWatcherObject<Byte> getSkinPartsWatcher() { return bq; } // Paper - OBFHELPER\n+     protected static final DataWatcherObject<Byte> br = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n+     protected static final DataWatcherObject<NBTTagCompound> bs = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+     protected static final DataWatcherObject<NBTTagCompound> bt = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java\n+index 15230a834..4ac1df7f8 100644\n+--- a/src/main/java/net/minecraft/server/EntityPlayer.java\n++++ b/src/main/java/net/minecraft/server/EntityPlayer.java\n+@@ -58,7 +58,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {\n+     public int lastSentExp = -99999999;\n+     public int invulnerableTicks = 60;\n+     private EnumChatVisibility ch;\n+-    private boolean ci = true;\n++    private boolean ci = true; public boolean hasChatColorsEnabled() { return this.ci; } // Paper - OBFHELPER\n+     private long cj = SystemUtils.getMonotonicMillis();\n+     private Entity spectatedEntity; private void setSpectatorTargetField(Entity e) { this.spectatedEntity = e; } // Paper - OBFHELPER\n+     public boolean worldChangeInvuln;\n+@@ -1574,6 +1574,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {\n+     }\n+ \n+     public void a(PacketPlayInSettings packetplayinsettings) {\n++        new com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent(getBukkitEntity(), packetplayinsettings.getLocale(), packetplayinsettings.viewDistance, com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent.ChatVisibility.valueOf(packetplayinsettings.getChatVisibility().name()), packetplayinsettings.hasChatColorsEnabled(), new com.destroystokyo.paper.PaperSkinParts(packetplayinsettings.getSkinParts()), packetplayinsettings.getMainHand() == EnumMainHand.LEFT ? MainHand.LEFT : MainHand.RIGHT).callEvent(); // Paper - settings event\n+         // CraftBukkit start\n+         if (getMainHand() != packetplayinsettings.getMainHand()) {\n+             PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(getBukkitEntity(), getMainHand() == EnumMainHand.LEFT ? MainHand.LEFT : MainHand.RIGHT);\n+diff --git a/src/main/java/net/minecraft/server/PacketPlayInSettings.java b/src/main/java/net/minecraft/server/PacketPlayInSettings.java\n+index 8faebf9ef..eeedfa160 100644\n+--- a/src/main/java/net/minecraft/server/PacketPlayInSettings.java\n++++ b/src/main/java/net/minecraft/server/PacketPlayInSettings.java\n+@@ -37,19 +37,19 @@ public class PacketPlayInSettings implements Packet<PacketListenerPlayIn> {\n+         packetlistenerplayin.a(this);\n+     }\n+ \n+-    public String b() {\n++    public String b() { return getLocale(); } public String getLocale() { // Paper - OBFHELPER\n+         return this.a;\n+     }\n+ \n+-    public EnumChatVisibility d() {\n++    public EnumChatVisibility d() { return getChatVisibility(); } public EnumChatVisibility getChatVisibility() { // Paper - OBFHELPER\n+         return this.c;\n+     }\n+ \n+-    public boolean e() {\n++    public boolean e() { return hasChatColorsEnabled(); } public boolean hasChatColorsEnabled() { // Paper - OBFHELPER\n+         return this.d;\n+     }\n+ \n+-    public int f() {\n++    public int f() { return getSkinParts(); } public int getSkinParts() { // Paper - OBFHELPER\n+         return this.e;\n+     }\n+ \n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java\n+index c1acec87f..1cee80f7d 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java\n+@@ -1,6 +1,10 @@\n+ package org.bukkit.craftbukkit.entity;\n+ \n++import com.destroystokyo.paper.PaperSkinParts;\n++import com.destroystokyo.paper.SettingType;\n+ import com.destroystokyo.paper.Title;\n++import com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent;\n++import com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent.ChatVisibility;\n+ import com.destroystokyo.paper.profile.CraftPlayerProfile;\n+ import com.destroystokyo.paper.profile.PlayerProfile;\n+ import com.google.common.base.Preconditions;\n+@@ -36,6 +40,7 @@ import net.minecraft.server.BlockPosition;\n+ import net.minecraft.server.ChatComponentText;\n+ import net.minecraft.server.Container;\n+ import net.minecraft.server.Entity;\n++import net.minecraft.server.EntityHuman;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be9b06f8db3f1da14b35e7f993b89c0da988d51"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1Mjg4Nw==", "bodyText": "yes, to access a datawatcher", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r374952887", "createdAt": "2020-02-04T22:13:05Z", "author": {"login": "MiniDigger"}, "path": "Spigot-Server-Patches/0435-Implement-Player-Settings-API.patch", "diffHunk": "@@ -0,0 +1,199 @@\n+From 2fcb869905325d2c1015fcc8418e44ae212355df Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:15 +0100\n+Subject: [PATCH] Implement Player Settings API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+new file mode 100644\n+index 000000000..b6f4400df\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+@@ -0,0 +1,74 @@\n++package com.destroystokyo.paper;\n++\n++import com.google.common.base.Objects;\n++\n++import java.util.StringJoiner;\n++\n++public class PaperSkinParts implements SkinParts {\n++\n++    private final int raw;\n++\n++    public PaperSkinParts(int raw) {\n++        this.raw = raw;\n++    }\n++\n++    public boolean hasCapeEnabled() {\n++        return (raw & 1) == 1;\n++    }\n++\n++    public boolean hasJacketEnabled() {\n++        return (raw >> 1 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftSleeveEnabled() {\n++        return (raw >> 2 & 1) == 1;\n++    }\n++\n++    public boolean hasRightSleeveEnabled() {\n++        return (raw >> 3 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftPantsEnabled() {\n++        return (raw >> 4 & 1) == 1;\n++    }\n++\n++    public boolean hasRightPantsEnabled() {\n++        return (raw >> 5 & 1) == 1;\n++    }\n++\n++    public boolean hasHatsEnabled() {\n++        return (raw >> 6 & 1) == 1;\n++    }\n++\n++    @Override\n++    public int getRaw() {\n++        return raw;\n++    }\n++\n++    @Override\n++    public boolean equals(Object o) {\n++        if (this == o) return true;\n++        if (o == null || getClass() != o.getClass()) return false;\n++        PaperSkinParts that = (PaperSkinParts) o;\n++        return raw == that.raw;\n++    }\n++\n++    @Override\n++    public int hashCode() {\n++        return Objects.hashCode(raw);\n++    }\n++\n++    @Override\n++    public String toString() {\n++        return new StringJoiner(\", \", PaperSkinParts.class.getSimpleName() + \"[\", \"]\")\n++            .add(\"raw=\" + raw)\n++            .add(\"cape=\" + hasCapeEnabled())\n++            .add(\"jacket=\" + hasJacketEnabled())\n++            .add(\"leftSleeve=\" + hasLeftSleeveEnabled())\n++            .add(\"rightSleeve=\" + hasRightSleeveEnabled())\n++            .add(\"leftPants=\" + hasLeftPantsEnabled())\n++            .add(\"rightPants=\" + hasRightPantsEnabled())\n++            .add(\"hats=\" + hasHatsEnabled())\n++            .toString();\n++    }\n++}\n+diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java\n+index 584166f22..e9f690180 100644\n+--- a/src/main/java/net/minecraft/server/EntityHuman.java\n++++ b/src/main/java/net/minecraft/server/EntityHuman.java\n+@@ -35,7 +35,7 @@ public abstract class EntityHuman extends EntityLiving {\n+     private static final Map<EntityPose, EntitySize> b = ImmutableMap.<EntityPose, EntitySize>builder().put(EntityPose.STANDING, EntityHuman.bp).put(EntityPose.SLEEPING, EntityHuman.ap).put(EntityPose.FALL_FLYING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntitySize.b(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntitySize.b(0.6F, 1.5F)).put(EntityPose.DYING, EntitySize.c(0.2F, 0.2F)).build();\n+     private static final DataWatcherObject<Float> c = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.c);\n+     private static final DataWatcherObject<Integer> d = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.b);\n+-    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n++    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a); public static DataWatcherObject<Byte> getSkinPartsWatcher() { return bq; } // Paper - OBFHELPER\n+     protected static final DataWatcherObject<Byte> br = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n+     protected static final DataWatcherObject<NBTTagCompound> bs = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+     protected static final DataWatcherObject<NBTTagCompound> bt = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java\n+index 15230a834..4ac1df7f8 100644\n+--- a/src/main/java/net/minecraft/server/EntityPlayer.java\n++++ b/src/main/java/net/minecraft/server/EntityPlayer.java\n+@@ -58,7 +58,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {\n+     public int lastSentExp = -99999999;\n+     public int invulnerableTicks = 60;\n+     private EnumChatVisibility ch;\n+-    private boolean ci = true;\n++    private boolean ci = true; public boolean hasChatColorsEnabled() { return this.ci; } // Paper - OBFHELPER\n+     private long cj = SystemUtils.getMonotonicMillis();\n+     private Entity spectatedEntity; private void setSpectatorTargetField(Entity e) { this.spectatedEntity = e; } // Paper - OBFHELPER\n+     public boolean worldChangeInvuln;\n+@@ -1574,6 +1574,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {\n+     }\n+ \n+     public void a(PacketPlayInSettings packetplayinsettings) {\n++        new com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent(getBukkitEntity(), packetplayinsettings.getLocale(), packetplayinsettings.viewDistance, com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent.ChatVisibility.valueOf(packetplayinsettings.getChatVisibility().name()), packetplayinsettings.hasChatColorsEnabled(), new com.destroystokyo.paper.PaperSkinParts(packetplayinsettings.getSkinParts()), packetplayinsettings.getMainHand() == EnumMainHand.LEFT ? MainHand.LEFT : MainHand.RIGHT).callEvent(); // Paper - settings event\n+         // CraftBukkit start\n+         if (getMainHand() != packetplayinsettings.getMainHand()) {\n+             PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(getBukkitEntity(), getMainHand() == EnumMainHand.LEFT ? MainHand.LEFT : MainHand.RIGHT);\n+diff --git a/src/main/java/net/minecraft/server/PacketPlayInSettings.java b/src/main/java/net/minecraft/server/PacketPlayInSettings.java\n+index 8faebf9ef..eeedfa160 100644\n+--- a/src/main/java/net/minecraft/server/PacketPlayInSettings.java\n++++ b/src/main/java/net/minecraft/server/PacketPlayInSettings.java\n+@@ -37,19 +37,19 @@ public class PacketPlayInSettings implements Packet<PacketListenerPlayIn> {\n+         packetlistenerplayin.a(this);\n+     }\n+ \n+-    public String b() {\n++    public String b() { return getLocale(); } public String getLocale() { // Paper - OBFHELPER\n+         return this.a;\n+     }\n+ \n+-    public EnumChatVisibility d() {\n++    public EnumChatVisibility d() { return getChatVisibility(); } public EnumChatVisibility getChatVisibility() { // Paper - OBFHELPER\n+         return this.c;\n+     }\n+ \n+-    public boolean e() {\n++    public boolean e() { return hasChatColorsEnabled(); } public boolean hasChatColorsEnabled() { // Paper - OBFHELPER\n+         return this.d;\n+     }\n+ \n+-    public int f() {\n++    public int f() { return getSkinParts(); } public int getSkinParts() { // Paper - OBFHELPER\n+         return this.e;\n+     }\n+ \n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java\n+index c1acec87f..1cee80f7d 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java\n+@@ -1,6 +1,10 @@\n+ package org.bukkit.craftbukkit.entity;\n+ \n++import com.destroystokyo.paper.PaperSkinParts;\n++import com.destroystokyo.paper.SettingType;\n+ import com.destroystokyo.paper.Title;\n++import com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent;\n++import com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent.ChatVisibility;\n+ import com.destroystokyo.paper.profile.CraftPlayerProfile;\n+ import com.destroystokyo.paper.profile.PlayerProfile;\n+ import com.google.common.base.Preconditions;\n+@@ -36,6 +40,7 @@ import net.minecraft.server.BlockPosition;\n+ import net.minecraft.server.ChatComponentText;\n+ import net.minecraft.server.Container;\n+ import net.minecraft.server.Entity;\n++import net.minecraft.server.EntityHuman;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDUwMw=="}, "originalCommit": {"oid": "1be9b06f8db3f1da14b35e7f993b89c0da988d51"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzIwMzA3OnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0435-Implement-Player-Client-Options-API.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjoyNTozN1rOF9Di7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwODo1ODozNFrOF9IBJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NTU1MQ==", "bodyText": "you totally busted the imports, revert", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r399565551", "createdAt": "2020-03-27T22:25:37Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0435-Implement-Player-Client-Options-API.patch", "diffHunk": "@@ -0,0 +1,218 @@\n+From 6f8dea0c0b5db83788b75263fd0dbcd217f11244 Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:15 +0100\n+Subject: [PATCH] Implement Player Client Options API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+new file mode 100644\n+index 000000000..b6f4400df\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+@@ -0,0 +1,74 @@\n++package com.destroystokyo.paper;\n++\n++import com.google.common.base.Objects;\n++\n++import java.util.StringJoiner;\n++\n++public class PaperSkinParts implements SkinParts {\n++\n++    private final int raw;\n++\n++    public PaperSkinParts(int raw) {\n++        this.raw = raw;\n++    }\n++\n++    public boolean hasCapeEnabled() {\n++        return (raw & 1) == 1;\n++    }\n++\n++    public boolean hasJacketEnabled() {\n++        return (raw >> 1 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftSleeveEnabled() {\n++        return (raw >> 2 & 1) == 1;\n++    }\n++\n++    public boolean hasRightSleeveEnabled() {\n++        return (raw >> 3 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftPantsEnabled() {\n++        return (raw >> 4 & 1) == 1;\n++    }\n++\n++    public boolean hasRightPantsEnabled() {\n++        return (raw >> 5 & 1) == 1;\n++    }\n++\n++    public boolean hasHatsEnabled() {\n++        return (raw >> 6 & 1) == 1;\n++    }\n++\n++    @Override\n++    public int getRaw() {\n++        return raw;\n++    }\n++\n++    @Override\n++    public boolean equals(Object o) {\n++        if (this == o) return true;\n++        if (o == null || getClass() != o.getClass()) return false;\n++        PaperSkinParts that = (PaperSkinParts) o;\n++        return raw == that.raw;\n++    }\n++\n++    @Override\n++    public int hashCode() {\n++        return Objects.hashCode(raw);\n++    }\n++\n++    @Override\n++    public String toString() {\n++        return new StringJoiner(\", \", PaperSkinParts.class.getSimpleName() + \"[\", \"]\")\n++            .add(\"raw=\" + raw)\n++            .add(\"cape=\" + hasCapeEnabled())\n++            .add(\"jacket=\" + hasJacketEnabled())\n++            .add(\"leftSleeve=\" + hasLeftSleeveEnabled())\n++            .add(\"rightSleeve=\" + hasRightSleeveEnabled())\n++            .add(\"leftPants=\" + hasLeftPantsEnabled())\n++            .add(\"rightPants=\" + hasRightPantsEnabled())\n++            .add(\"hats=\" + hasHatsEnabled())\n++            .toString();\n++    }\n++}\n+diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java\n+index 584166f22..e9f690180 100644\n+--- a/src/main/java/net/minecraft/server/EntityHuman.java\n++++ b/src/main/java/net/minecraft/server/EntityHuman.java\n+@@ -35,7 +35,7 @@ public abstract class EntityHuman extends EntityLiving {\n+     private static final Map<EntityPose, EntitySize> b = ImmutableMap.<EntityPose, EntitySize>builder().put(EntityPose.STANDING, EntityHuman.bp).put(EntityPose.SLEEPING, EntityHuman.ap).put(EntityPose.FALL_FLYING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntitySize.b(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntitySize.b(0.6F, 1.5F)).put(EntityPose.DYING, EntitySize.c(0.2F, 0.2F)).build();\n+     private static final DataWatcherObject<Float> c = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.c);\n+     private static final DataWatcherObject<Integer> d = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.b);\n+-    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n++    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a); public static DataWatcherObject<Byte> getSkinPartsWatcher() { return bq; } // Paper - OBFHELPER\n+     protected static final DataWatcherObject<Byte> br = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n+     protected static final DataWatcherObject<NBTTagCompound> bs = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+     protected static final DataWatcherObject<NBTTagCompound> bt = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java\n+index 15230a834..507f1e8c8 100644\n+--- a/src/main/java/net/minecraft/server/EntityPlayer.java\n++++ b/src/main/java/net/minecraft/server/EntityPlayer.java\n+@@ -1,9 +1,11 @@\n+ package net.minecraft.server;\n+ \n+ import com.google.common.collect.Lists;\n++\n++import com.destroystokyo.paper.event.player.PlayerClientOptionsChangeEvent;\n+ import com.mojang.authlib.GameProfile;\n+ import com.mojang.datafixers.util.Either;\n+-import io.netty.util.concurrent.Future;\n++\n+ import java.util.ArrayDeque; // Paper\n+ import java.util.Collection;\n+ import java.util.Deque; // Paper\n+@@ -16,7 +18,6 @@ import org.apache.logging.log4j.LogManager;\n+ import org.apache.logging.log4j.Logger;\n+ \n+ // CraftBukkit start\n+-import com.google.common.base.Preconditions;\n+ import org.bukkit.Bukkit;\n+ import org.bukkit.GameMode;\n+ import org.bukkit.Location;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9968cdeca40898e57fdcfe483180745d24465a29"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzODgyMw==", "bodyText": "done", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r399638823", "createdAt": "2020-03-28T08:58:34Z", "author": {"login": "MiniDigger"}, "path": "Spigot-Server-Patches/0435-Implement-Player-Client-Options-API.patch", "diffHunk": "@@ -0,0 +1,218 @@\n+From 6f8dea0c0b5db83788b75263fd0dbcd217f11244 Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:15 +0100\n+Subject: [PATCH] Implement Player Client Options API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+new file mode 100644\n+index 000000000..b6f4400df\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+@@ -0,0 +1,74 @@\n++package com.destroystokyo.paper;\n++\n++import com.google.common.base.Objects;\n++\n++import java.util.StringJoiner;\n++\n++public class PaperSkinParts implements SkinParts {\n++\n++    private final int raw;\n++\n++    public PaperSkinParts(int raw) {\n++        this.raw = raw;\n++    }\n++\n++    public boolean hasCapeEnabled() {\n++        return (raw & 1) == 1;\n++    }\n++\n++    public boolean hasJacketEnabled() {\n++        return (raw >> 1 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftSleeveEnabled() {\n++        return (raw >> 2 & 1) == 1;\n++    }\n++\n++    public boolean hasRightSleeveEnabled() {\n++        return (raw >> 3 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftPantsEnabled() {\n++        return (raw >> 4 & 1) == 1;\n++    }\n++\n++    public boolean hasRightPantsEnabled() {\n++        return (raw >> 5 & 1) == 1;\n++    }\n++\n++    public boolean hasHatsEnabled() {\n++        return (raw >> 6 & 1) == 1;\n++    }\n++\n++    @Override\n++    public int getRaw() {\n++        return raw;\n++    }\n++\n++    @Override\n++    public boolean equals(Object o) {\n++        if (this == o) return true;\n++        if (o == null || getClass() != o.getClass()) return false;\n++        PaperSkinParts that = (PaperSkinParts) o;\n++        return raw == that.raw;\n++    }\n++\n++    @Override\n++    public int hashCode() {\n++        return Objects.hashCode(raw);\n++    }\n++\n++    @Override\n++    public String toString() {\n++        return new StringJoiner(\", \", PaperSkinParts.class.getSimpleName() + \"[\", \"]\")\n++            .add(\"raw=\" + raw)\n++            .add(\"cape=\" + hasCapeEnabled())\n++            .add(\"jacket=\" + hasJacketEnabled())\n++            .add(\"leftSleeve=\" + hasLeftSleeveEnabled())\n++            .add(\"rightSleeve=\" + hasRightSleeveEnabled())\n++            .add(\"leftPants=\" + hasLeftPantsEnabled())\n++            .add(\"rightPants=\" + hasRightPantsEnabled())\n++            .add(\"hats=\" + hasHatsEnabled())\n++            .toString();\n++    }\n++}\n+diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java\n+index 584166f22..e9f690180 100644\n+--- a/src/main/java/net/minecraft/server/EntityHuman.java\n++++ b/src/main/java/net/minecraft/server/EntityHuman.java\n+@@ -35,7 +35,7 @@ public abstract class EntityHuman extends EntityLiving {\n+     private static final Map<EntityPose, EntitySize> b = ImmutableMap.<EntityPose, EntitySize>builder().put(EntityPose.STANDING, EntityHuman.bp).put(EntityPose.SLEEPING, EntityHuman.ap).put(EntityPose.FALL_FLYING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntitySize.b(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntitySize.b(0.6F, 1.5F)).put(EntityPose.DYING, EntitySize.c(0.2F, 0.2F)).build();\n+     private static final DataWatcherObject<Float> c = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.c);\n+     private static final DataWatcherObject<Integer> d = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.b);\n+-    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n++    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a); public static DataWatcherObject<Byte> getSkinPartsWatcher() { return bq; } // Paper - OBFHELPER\n+     protected static final DataWatcherObject<Byte> br = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n+     protected static final DataWatcherObject<NBTTagCompound> bs = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+     protected static final DataWatcherObject<NBTTagCompound> bt = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java\n+index 15230a834..507f1e8c8 100644\n+--- a/src/main/java/net/minecraft/server/EntityPlayer.java\n++++ b/src/main/java/net/minecraft/server/EntityPlayer.java\n+@@ -1,9 +1,11 @@\n+ package net.minecraft.server;\n+ \n+ import com.google.common.collect.Lists;\n++\n++import com.destroystokyo.paper.event.player.PlayerClientOptionsChangeEvent;\n+ import com.mojang.authlib.GameProfile;\n+ import com.mojang.datafixers.util.Either;\n+-import io.netty.util.concurrent.Future;\n++\n+ import java.util.ArrayDeque; // Paper\n+ import java.util.Collection;\n+ import java.util.Deque; // Paper\n+@@ -16,7 +18,6 @@ import org.apache.logging.log4j.LogManager;\n+ import org.apache.logging.log4j.Logger;\n+ \n+ // CraftBukkit start\n+-import com.google.common.base.Preconditions;\n+ import org.bukkit.Bukkit;\n+ import org.bukkit.GameMode;\n+ import org.bukkit.Location;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NTU1MQ=="}, "originalCommit": {"oid": "9968cdeca40898e57fdcfe483180745d24465a29"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1611, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}