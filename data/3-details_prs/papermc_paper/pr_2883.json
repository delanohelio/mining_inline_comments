{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0OTk1NTg4", "number": 2883, "title": "Add Player Client Options API", "bodyText": "https://streamable.com/uimm5\n    @EventHandler\n    public void onTest(PlayerClientOptionsChangeEvent event) {\n        Bukkit.broadcastMessage(event.getPlayer().getDisplayName() + \" just changed his settings!\");\n        if (event.hasLocaleChanged()) {\n            Bukkit.broadcastMessage(\"Locale changed from \" + event.getPlayer().getClientOption(ClientOption.LOCALE) + \" to \" + event.getLocale());\n        }\n        if (event.hasChatVisibilityChanged()) {\n            Bukkit.broadcastMessage(\"ChatVisibility changed from \" + event.getPlayer().getClientOption(ClientOption.CHAT_VISIBILITY) + \" to \" + event.getChatVisibility());\n        }\n        if (event.hasMainHandChanged()) {\n            Bukkit.broadcastMessage(\"MainHand changed from \" + event.getPlayer().getClientOption(ClientOption.MAIN_HAND) + \" to \" + event.getMainHand());\n        }\n        if (event.hasSkinPartsChanged()) {\n            Bukkit.broadcastMessage(\"SkinParts changed from \" + event.getPlayer().getClientOption(ClientOption.SKIN_PARTS) + \" to \" + event.getSkinParts());\n        }\n        if (event.hasViewDistanceChanged()) {\n            Bukkit.broadcastMessage(\"ViewDistance changed from \" + event.getPlayer().getClientOption(ClientOption.VIEW_DISTANCE) + \" to \" + event.getViewDistance());\n        }\n        if (event.hasChatColorsEnabledChanged()) {\n            Bukkit.broadcastMessage(\"ChatColors changed from \" + event.getPlayer().getClientOption(ClientOption.CHAT_COLORS_ENABLED) + \" to \" + event.hasChatColorsEnabled());\n        }\n    }", "createdAt": "2020-01-20T20:40:59Z", "url": "https://github.com/PaperMC/Paper/pull/2883", "merged": true, "mergeCommit": {"oid": "07915ea18385df0ca8cc18ed6f263aa1de7968a9"}, "closed": true, "closedAt": "2020-04-17T04:10:39Z", "author": {"login": "MiniDigger"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8TorogFqTM0NTU0Mzc3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYZUTWABqjMyNDI3NDk0OTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NTQzNzcy", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-345543772", "createdAt": "2020-01-20T21:43:00Z", "commit": {"oid": "08da9459b21ad0e7bdcf4df86aec989f1e38c69f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMTo0MzowMVrOFfpzIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMTo0MzowMVrOFfpzIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODczNTAxMQ==", "bodyText": "let's not make the impl detail of skins api", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r368735011", "createdAt": "2020-01-20T21:43:01Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-API-Patches/0191-Add-PlayerSettingsChangeEvent.patch", "diffHunk": "@@ -0,0 +1,121 @@\n+From e2a607d5a57cb63975f022bc1b67af07781f1c8b Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:34 +0100\n+Subject: [PATCH] Add PlayerSettingsChangeEvent\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+new file mode 100644\n+index 00000000..2d27b6d8\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+@@ -0,0 +1,106 @@\n++package com.destroystokyo.paper.event.player;\n++\n++import org.jetbrains.annotations.NotNull;\n++\n++import org.bukkit.entity.Player;\n++import org.bukkit.event.Cancellable;\n++import org.bukkit.event.HandlerList;\n++import org.bukkit.event.player.PlayerEvent;\n++import org.bukkit.inventory.MainHand;\n++\n++/**\n++ * Called when the player changes his settings\n++ */\n++public class PlayerSettingsChangeEvent extends PlayerEvent {\n++\n++    private static final HandlerList handlers = new HandlerList();\n++\n++    private final String locale;\n++    private final int viewDistance;\n++    private final ChatVisibility chatVisibility;\n++    private final boolean chatColors;\n++    private final int skinparts;\n++    private final MainHand mainHand;\n++\n++    public PlayerSettingsChangeEvent(@NotNull Player player, @NotNull String locale, int viewDistance, @NotNull ChatVisibility chatVisibility, boolean chatColors, int skinParts, @NotNull MainHand mainHand) {\n++        super(player);\n++        this.locale = locale;\n++        this.viewDistance = viewDistance;\n++        this.chatVisibility = chatVisibility;\n++        this.chatColors = chatColors;\n++        this.skinparts = skinParts;\n++        this.mainHand = mainHand;\n++    }\n++\n++    @NotNull\n++    public String getLocale() {\n++        return locale;\n++    }\n++\n++    public int getViewDistance() {\n++        return viewDistance;\n++    }\n++\n++    @NotNull\n++    public ChatVisibility getChatVisibility() {\n++        return chatVisibility;\n++    }\n++\n++    public boolean hasChatColorsEnabled() {\n++        return chatColors;\n++    }\n++\n++    public int getSkinparts() {\n++        return skinparts;\n++    }\n++\n++    @NotNull\n++    public MainHand getMainHand() {\n++        return mainHand;\n++    }\n++\n++    public boolean hasCapeEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08da9459b21ad0e7bdcf4df86aec989f1e38c69f"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTIyMDAy", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-352522002", "createdAt": "2020-02-03T19:57:39Z", "commit": {"oid": "54ef727259a26a658bb69684f0117dd9f6c4e581"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1NzozOVrOFk-BMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1NzozOVrOFk-BMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwOTE3MA==", "bodyText": "final. we do not want to have inheritance here.", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r374309170", "createdAt": "2020-02-03T19:57:39Z", "author": {"login": "yannicklamprecht"}, "path": "Spigot-API-Patches/0190-Add-Player-Settings-API.patch", "diffHunk": "@@ -20,16 +20,16 @@ index 00000000..27aed60d\n +\n +public class SettingType<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54ef727259a26a658bb69684f0117dd9f6c4e581"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTM4NzQw", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-352538740", "createdAt": "2020-02-03T20:25:43Z", "commit": {"oid": "54ef727259a26a658bb69684f0117dd9f6c4e581"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54ef727259a26a658bb69684f0117dd9f6c4e581", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/54ef727259a26a658bb69684f0117dd9f6c4e581", "committedDate": "2020-02-03T19:28:44Z", "message": "actually test stuff"}, "afterCommit": {"oid": "2fedb5ef839de4928ddc2c3a215596b4a637ed5b", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/2fedb5ef839de4928ddc2c3a215596b4a637ed5b", "committedDate": "2020-02-03T20:40:55Z", "message": "Add Player Settings API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20b54fb92c113e23fa37c2c0b26e434a7c5291a3", "author": {"user": {"login": "electronicboy", "name": "Shane Freeder"}}, "url": "https://github.com/PaperMC/Paper/commit/20b54fb92c113e23fa37c2c0b26e434a7c5291a3", "committedDate": "2020-02-03T20:48:08Z", "message": "Updated Upstream (CraftBukkit)\n\nUpstream has released updates that appears to apply and compile correctly.\nThis update has not been tested by PaperMC and as with ANY update, please do your own testing\n\nCraftBukkit Changes:\n807a677e SPIGOT-5558: Fix World#getHighestBlockAt, previously off by +1"}, "afterCommit": {"oid": "1be9b06f8db3f1da14b35e7f993b89c0da988d51", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/1be9b06f8db3f1da14b35e7f993b89c0da988d51", "committedDate": "2020-02-03T20:53:23Z", "message": "Add Player Settings API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzA4NTAz", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-353308503", "createdAt": "2020-02-04T21:18:59Z", "commit": {"oid": "1be9b06f8db3f1da14b35e7f993b89c0da988d51"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxODo1OVrOFlj0iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMzoxMFrOFlj8Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyODUyMw==", "bodyText": "This should probably be in SettingsType", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r374928523", "createdAt": "2020-02-04T21:18:59Z", "author": {"login": "electronicboy"}, "path": "Spigot-API-Patches/0190-Add-Player-Settings-API.patch", "diffHunk": "@@ -0,0 +1,207 @@\n+From 61e4d95a06a76083d5600102066e145b0d4104e7 Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:34 +0100\n+Subject: [PATCH] Add Player Settings API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/SettingType.java b/src/main/java/com/destroystokyo/paper/SettingType.java\n+new file mode 100644\n+index 00000000..c4f0486c\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/SettingType.java\n+@@ -0,0 +1,28 @@\n++package com.destroystokyo.paper;\n++\n++import com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent.ChatVisibility;\n++\n++import org.jetbrains.annotations.NotNull;\n++\n++import org.bukkit.inventory.MainHand;\n++\n++public final class SettingType<T> {\n++\n++    public static final SettingType<SkinParts> SKIN_PARTS = new SettingType<>(SkinParts.class);\n++    public static final SettingType<Boolean> CHAT_COLORS_ENABLED = new SettingType<>(Boolean.class);\n++    public static final SettingType<ChatVisibility> CHAT_VISIBILITY = new SettingType<>(ChatVisibility.class);\n++    public static final SettingType<String> LOCALE = new SettingType<>(String.class);\n++    public static final SettingType<MainHand> MAIN_HAND = new SettingType<>(MainHand.class);\n++    public static final SettingType<Integer> VIEW_DISTANCE = new SettingType<>(Integer.class);\n++\n++    private final Class<T> type;\n++\n++    private SettingType(@NotNull Class<T> type) {\n++        this.type = type;\n++    }\n++\n++    @NotNull\n++    public Class<T> getType() {\n++        return type;\n++    }\n++}\n+diff --git a/src/main/java/com/destroystokyo/paper/SkinParts.java b/src/main/java/com/destroystokyo/paper/SkinParts.java\n+new file mode 100644\n+index 00000000..4a0c3940\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/SkinParts.java\n+@@ -0,0 +1,20 @@\n++package com.destroystokyo.paper;\n++\n++public interface SkinParts {\n++\n++    boolean hasCapeEnabled();\n++\n++    boolean hasJacketEnabled();\n++\n++    boolean hasLeftSleeveEnabled();\n++\n++    boolean hasRightSleeveEnabled();\n++\n++    boolean hasLeftPantsEnabled();\n++\n++    boolean hasRightPantsEnabled();\n++\n++    boolean hasHatsEnabled();\n++\n++    int getRaw();\n++}\n+diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+new file mode 100644\n+index 00000000..5717b761\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerSettingsChangeEvent.java\n+@@ -0,0 +1,106 @@\n++package com.destroystokyo.paper.event.player;\n++\n++import com.destroystokyo.paper.SettingType;\n++import com.destroystokyo.paper.SkinParts;\n++\n++import org.jetbrains.annotations.NotNull;\n++\n++import org.bukkit.entity.Player;\n++import org.bukkit.event.HandlerList;\n++import org.bukkit.event.player.PlayerEvent;\n++import org.bukkit.inventory.MainHand;\n++\n++/**\n++ * Called when the player changes his settings\n++ */\n++public class PlayerSettingsChangeEvent extends PlayerEvent {\n++\n++    private static final HandlerList handlers = new HandlerList();\n++\n++    private final String locale;\n++    private final int viewDistance;\n++    private final ChatVisibility chatVisibility;\n++    private final boolean chatColors;\n++    private final SkinParts skinparts;\n++    private final MainHand mainHand;\n++\n++    public PlayerSettingsChangeEvent(@NotNull Player player, @NotNull String locale, int viewDistance, @NotNull ChatVisibility chatVisibility, boolean chatColors, @NotNull SkinParts skinParts, @NotNull MainHand mainHand) {\n++        super(player);\n++        this.locale = locale;\n++        this.viewDistance = viewDistance;\n++        this.chatVisibility = chatVisibility;\n++        this.chatColors = chatColors;\n++        this.skinparts = skinParts;\n++        this.mainHand = mainHand;\n++    }\n++\n++    @NotNull\n++    public String getLocale() {\n++        return locale;\n++    }\n++\n++    public boolean hasLocaleChanged() {\n++        return !locale.equals(player.getSetting(SettingType.LOCALE));\n++    }\n++\n++    public int getViewDistance() {\n++        return viewDistance;\n++    }\n++\n++    public boolean hasViewDistanceChanged() {\n++        return viewDistance != player.getSetting(SettingType.VIEW_DISTANCE);\n++    }\n++\n++    @NotNull\n++    public ChatVisibility getChatVisibility() {\n++        return chatVisibility;\n++    }\n++\n++    public boolean hasChatVisibilityChanged() {\n++        return chatVisibility != player.getSetting(SettingType.CHAT_VISIBILITY);\n++    }\n++\n++    public boolean hasChatColorsEnabled() {\n++        return chatColors;\n++    }\n++\n++    public boolean hasChatColorsEnabledChanged() {\n++        return chatColors != player.getSetting(SettingType.CHAT_COLORS_ENABLED);\n++    }\n++\n++    @NotNull\n++    public SkinParts getSkinParts() {\n++        return skinparts;\n++    }\n++\n++    public boolean hasSkinPartsChanged() {\n++        return skinparts.getRaw() != player.getSetting(SettingType.SKIN_PARTS).getRaw();\n++    }\n++\n++    @NotNull\n++    public MainHand getMainHand() {\n++        return mainHand;\n++    }\n++\n++    public boolean hasMainHandChanged() {\n++        return mainHand != player.getSetting(SettingType.MAIN_HAND);\n++    }\n++\n++    @Override\n++    @NotNull\n++    public HandlerList getHandlers() {\n++        return handlers;\n++    }\n++\n++    @NotNull\n++    public static HandlerList getHandlerList() {\n++        return handlers;\n++    }\n++\n++    public enum ChatVisibility {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be9b06f8db3f1da14b35e7f993b89c0da988d51"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyOTU3NQ==", "bodyText": "Only concern here is the ambiguity of the class name", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r374929575", "createdAt": "2020-02-04T21:21:17Z", "author": {"login": "electronicboy"}, "path": "Spigot-API-Patches/0190-Add-Player-Settings-API.patch", "diffHunk": "@@ -0,0 +1,207 @@\n+From 61e4d95a06a76083d5600102066e145b0d4104e7 Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:34 +0100\n+Subject: [PATCH] Add Player Settings API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/SettingType.java b/src/main/java/com/destroystokyo/paper/SettingType.java\n+new file mode 100644\n+index 00000000..c4f0486c\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/SettingType.java\n+@@ -0,0 +1,28 @@\n++package com.destroystokyo.paper;\n++\n++import com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent.ChatVisibility;\n++\n++import org.jetbrains.annotations.NotNull;\n++\n++import org.bukkit.inventory.MainHand;\n++\n++public final class SettingType<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be9b06f8db3f1da14b35e7f993b89c0da988d51"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDUwMw==", "bodyText": "this still being used?", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r374930503", "createdAt": "2020-02-04T21:23:10Z", "author": {"login": "electronicboy"}, "path": "Spigot-Server-Patches/0435-Implement-Player-Settings-API.patch", "diffHunk": "@@ -0,0 +1,199 @@\n+From 2fcb869905325d2c1015fcc8418e44ae212355df Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:15 +0100\n+Subject: [PATCH] Implement Player Settings API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+new file mode 100644\n+index 000000000..b6f4400df\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+@@ -0,0 +1,74 @@\n++package com.destroystokyo.paper;\n++\n++import com.google.common.base.Objects;\n++\n++import java.util.StringJoiner;\n++\n++public class PaperSkinParts implements SkinParts {\n++\n++    private final int raw;\n++\n++    public PaperSkinParts(int raw) {\n++        this.raw = raw;\n++    }\n++\n++    public boolean hasCapeEnabled() {\n++        return (raw & 1) == 1;\n++    }\n++\n++    public boolean hasJacketEnabled() {\n++        return (raw >> 1 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftSleeveEnabled() {\n++        return (raw >> 2 & 1) == 1;\n++    }\n++\n++    public boolean hasRightSleeveEnabled() {\n++        return (raw >> 3 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftPantsEnabled() {\n++        return (raw >> 4 & 1) == 1;\n++    }\n++\n++    public boolean hasRightPantsEnabled() {\n++        return (raw >> 5 & 1) == 1;\n++    }\n++\n++    public boolean hasHatsEnabled() {\n++        return (raw >> 6 & 1) == 1;\n++    }\n++\n++    @Override\n++    public int getRaw() {\n++        return raw;\n++    }\n++\n++    @Override\n++    public boolean equals(Object o) {\n++        if (this == o) return true;\n++        if (o == null || getClass() != o.getClass()) return false;\n++        PaperSkinParts that = (PaperSkinParts) o;\n++        return raw == that.raw;\n++    }\n++\n++    @Override\n++    public int hashCode() {\n++        return Objects.hashCode(raw);\n++    }\n++\n++    @Override\n++    public String toString() {\n++        return new StringJoiner(\", \", PaperSkinParts.class.getSimpleName() + \"[\", \"]\")\n++            .add(\"raw=\" + raw)\n++            .add(\"cape=\" + hasCapeEnabled())\n++            .add(\"jacket=\" + hasJacketEnabled())\n++            .add(\"leftSleeve=\" + hasLeftSleeveEnabled())\n++            .add(\"rightSleeve=\" + hasRightSleeveEnabled())\n++            .add(\"leftPants=\" + hasLeftPantsEnabled())\n++            .add(\"rightPants=\" + hasRightPantsEnabled())\n++            .add(\"hats=\" + hasHatsEnabled())\n++            .toString();\n++    }\n++}\n+diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java\n+index 584166f22..e9f690180 100644\n+--- a/src/main/java/net/minecraft/server/EntityHuman.java\n++++ b/src/main/java/net/minecraft/server/EntityHuman.java\n+@@ -35,7 +35,7 @@ public abstract class EntityHuman extends EntityLiving {\n+     private static final Map<EntityPose, EntitySize> b = ImmutableMap.<EntityPose, EntitySize>builder().put(EntityPose.STANDING, EntityHuman.bp).put(EntityPose.SLEEPING, EntityHuman.ap).put(EntityPose.FALL_FLYING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntitySize.b(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntitySize.b(0.6F, 1.5F)).put(EntityPose.DYING, EntitySize.c(0.2F, 0.2F)).build();\n+     private static final DataWatcherObject<Float> c = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.c);\n+     private static final DataWatcherObject<Integer> d = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.b);\n+-    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n++    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a); public static DataWatcherObject<Byte> getSkinPartsWatcher() { return bq; } // Paper - OBFHELPER\n+     protected static final DataWatcherObject<Byte> br = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n+     protected static final DataWatcherObject<NBTTagCompound> bs = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+     protected static final DataWatcherObject<NBTTagCompound> bt = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java\n+index 15230a834..4ac1df7f8 100644\n+--- a/src/main/java/net/minecraft/server/EntityPlayer.java\n++++ b/src/main/java/net/minecraft/server/EntityPlayer.java\n+@@ -58,7 +58,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {\n+     public int lastSentExp = -99999999;\n+     public int invulnerableTicks = 60;\n+     private EnumChatVisibility ch;\n+-    private boolean ci = true;\n++    private boolean ci = true; public boolean hasChatColorsEnabled() { return this.ci; } // Paper - OBFHELPER\n+     private long cj = SystemUtils.getMonotonicMillis();\n+     private Entity spectatedEntity; private void setSpectatorTargetField(Entity e) { this.spectatedEntity = e; } // Paper - OBFHELPER\n+     public boolean worldChangeInvuln;\n+@@ -1574,6 +1574,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {\n+     }\n+ \n+     public void a(PacketPlayInSettings packetplayinsettings) {\n++        new com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent(getBukkitEntity(), packetplayinsettings.getLocale(), packetplayinsettings.viewDistance, com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent.ChatVisibility.valueOf(packetplayinsettings.getChatVisibility().name()), packetplayinsettings.hasChatColorsEnabled(), new com.destroystokyo.paper.PaperSkinParts(packetplayinsettings.getSkinParts()), packetplayinsettings.getMainHand() == EnumMainHand.LEFT ? MainHand.LEFT : MainHand.RIGHT).callEvent(); // Paper - settings event\n+         // CraftBukkit start\n+         if (getMainHand() != packetplayinsettings.getMainHand()) {\n+             PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(getBukkitEntity(), getMainHand() == EnumMainHand.LEFT ? MainHand.LEFT : MainHand.RIGHT);\n+diff --git a/src/main/java/net/minecraft/server/PacketPlayInSettings.java b/src/main/java/net/minecraft/server/PacketPlayInSettings.java\n+index 8faebf9ef..eeedfa160 100644\n+--- a/src/main/java/net/minecraft/server/PacketPlayInSettings.java\n++++ b/src/main/java/net/minecraft/server/PacketPlayInSettings.java\n+@@ -37,19 +37,19 @@ public class PacketPlayInSettings implements Packet<PacketListenerPlayIn> {\n+         packetlistenerplayin.a(this);\n+     }\n+ \n+-    public String b() {\n++    public String b() { return getLocale(); } public String getLocale() { // Paper - OBFHELPER\n+         return this.a;\n+     }\n+ \n+-    public EnumChatVisibility d() {\n++    public EnumChatVisibility d() { return getChatVisibility(); } public EnumChatVisibility getChatVisibility() { // Paper - OBFHELPER\n+         return this.c;\n+     }\n+ \n+-    public boolean e() {\n++    public boolean e() { return hasChatColorsEnabled(); } public boolean hasChatColorsEnabled() { // Paper - OBFHELPER\n+         return this.d;\n+     }\n+ \n+-    public int f() {\n++    public int f() { return getSkinParts(); } public int getSkinParts() { // Paper - OBFHELPER\n+         return this.e;\n+     }\n+ \n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java\n+index c1acec87f..1cee80f7d 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java\n+@@ -1,6 +1,10 @@\n+ package org.bukkit.craftbukkit.entity;\n+ \n++import com.destroystokyo.paper.PaperSkinParts;\n++import com.destroystokyo.paper.SettingType;\n+ import com.destroystokyo.paper.Title;\n++import com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent;\n++import com.destroystokyo.paper.event.player.PlayerSettingsChangeEvent.ChatVisibility;\n+ import com.destroystokyo.paper.profile.CraftPlayerProfile;\n+ import com.destroystokyo.paper.profile.PlayerProfile;\n+ import com.google.common.base.Preconditions;\n+@@ -36,6 +40,7 @@ import net.minecraft.server.BlockPosition;\n+ import net.minecraft.server.ChatComponentText;\n+ import net.minecraft.server.Container;\n+ import net.minecraft.server.Entity;\n++import net.minecraft.server.EntityHuman;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1be9b06f8db3f1da14b35e7f993b89c0da988d51"}, "originalPosition": 168}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a5c7b5be6e48e5caed51863e7d4d95a2a4996ec", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/7a5c7b5be6e48e5caed51863e7d4d95a2a4996ec", "committedDate": "2020-02-04T22:04:45Z", "message": "rename to clientoption"}, "afterCommit": {"oid": "941bee8c7d71abc74963cb305a329ee3c382be9f", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/941bee8c7d71abc74963cb305a329ee3c382be9f", "committedDate": "2020-02-04T22:05:25Z", "message": "Add Player Settings API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "941bee8c7d71abc74963cb305a329ee3c382be9f", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/941bee8c7d71abc74963cb305a329ee3c382be9f", "committedDate": "2020-02-04T22:05:25Z", "message": "Add Player Settings API"}, "afterCommit": {"oid": "9968cdeca40898e57fdcfe483180745d24465a29", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/9968cdeca40898e57fdcfe483180745d24465a29", "committedDate": "2020-02-04T22:17:26Z", "message": "Add Player Client Options API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjMyMDY4", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-383232068", "createdAt": "2020-03-27T22:21:59Z", "commit": {"oid": "9968cdeca40898e57fdcfe483180745d24465a29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjMzMzIw", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-383233320", "createdAt": "2020-03-27T22:25:37Z", "commit": {"oid": "9968cdeca40898e57fdcfe483180745d24465a29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjoyNTozN1rOF9Di7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjoyNTozN1rOF9Di7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NTU1MQ==", "bodyText": "you totally busted the imports, revert", "url": "https://github.com/PaperMC/Paper/pull/2883#discussion_r399565551", "createdAt": "2020-03-27T22:25:37Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0435-Implement-Player-Client-Options-API.patch", "diffHunk": "@@ -0,0 +1,218 @@\n+From 6f8dea0c0b5db83788b75263fd0dbcd217f11244 Mon Sep 17 00:00:00 2001\n+From: MiniDigger <admin@minidigger.me>\n+Date: Mon, 20 Jan 2020 21:38:15 +0100\n+Subject: [PATCH] Implement Player Client Options API\n+\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+new file mode 100644\n+index 000000000..b6f4400df\n+--- /dev/null\n++++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java\n+@@ -0,0 +1,74 @@\n++package com.destroystokyo.paper;\n++\n++import com.google.common.base.Objects;\n++\n++import java.util.StringJoiner;\n++\n++public class PaperSkinParts implements SkinParts {\n++\n++    private final int raw;\n++\n++    public PaperSkinParts(int raw) {\n++        this.raw = raw;\n++    }\n++\n++    public boolean hasCapeEnabled() {\n++        return (raw & 1) == 1;\n++    }\n++\n++    public boolean hasJacketEnabled() {\n++        return (raw >> 1 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftSleeveEnabled() {\n++        return (raw >> 2 & 1) == 1;\n++    }\n++\n++    public boolean hasRightSleeveEnabled() {\n++        return (raw >> 3 & 1) == 1;\n++    }\n++\n++    public boolean hasLeftPantsEnabled() {\n++        return (raw >> 4 & 1) == 1;\n++    }\n++\n++    public boolean hasRightPantsEnabled() {\n++        return (raw >> 5 & 1) == 1;\n++    }\n++\n++    public boolean hasHatsEnabled() {\n++        return (raw >> 6 & 1) == 1;\n++    }\n++\n++    @Override\n++    public int getRaw() {\n++        return raw;\n++    }\n++\n++    @Override\n++    public boolean equals(Object o) {\n++        if (this == o) return true;\n++        if (o == null || getClass() != o.getClass()) return false;\n++        PaperSkinParts that = (PaperSkinParts) o;\n++        return raw == that.raw;\n++    }\n++\n++    @Override\n++    public int hashCode() {\n++        return Objects.hashCode(raw);\n++    }\n++\n++    @Override\n++    public String toString() {\n++        return new StringJoiner(\", \", PaperSkinParts.class.getSimpleName() + \"[\", \"]\")\n++            .add(\"raw=\" + raw)\n++            .add(\"cape=\" + hasCapeEnabled())\n++            .add(\"jacket=\" + hasJacketEnabled())\n++            .add(\"leftSleeve=\" + hasLeftSleeveEnabled())\n++            .add(\"rightSleeve=\" + hasRightSleeveEnabled())\n++            .add(\"leftPants=\" + hasLeftPantsEnabled())\n++            .add(\"rightPants=\" + hasRightPantsEnabled())\n++            .add(\"hats=\" + hasHatsEnabled())\n++            .toString();\n++    }\n++}\n+diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java\n+index 584166f22..e9f690180 100644\n+--- a/src/main/java/net/minecraft/server/EntityHuman.java\n++++ b/src/main/java/net/minecraft/server/EntityHuman.java\n+@@ -35,7 +35,7 @@ public abstract class EntityHuman extends EntityLiving {\n+     private static final Map<EntityPose, EntitySize> b = ImmutableMap.<EntityPose, EntitySize>builder().put(EntityPose.STANDING, EntityHuman.bp).put(EntityPose.SLEEPING, EntityHuman.ap).put(EntityPose.FALL_FLYING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SWIMMING, EntitySize.b(0.6F, 0.6F)).put(EntityPose.SPIN_ATTACK, EntitySize.b(0.6F, 0.6F)).put(EntityPose.CROUCHING, EntitySize.b(0.6F, 1.5F)).put(EntityPose.DYING, EntitySize.c(0.2F, 0.2F)).build();\n+     private static final DataWatcherObject<Float> c = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.c);\n+     private static final DataWatcherObject<Integer> d = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.b);\n+-    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n++    protected static final DataWatcherObject<Byte> bq = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a); public static DataWatcherObject<Byte> getSkinPartsWatcher() { return bq; } // Paper - OBFHELPER\n+     protected static final DataWatcherObject<Byte> br = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);\n+     protected static final DataWatcherObject<NBTTagCompound> bs = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+     protected static final DataWatcherObject<NBTTagCompound> bt = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);\n+diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java\n+index 15230a834..507f1e8c8 100644\n+--- a/src/main/java/net/minecraft/server/EntityPlayer.java\n++++ b/src/main/java/net/minecraft/server/EntityPlayer.java\n+@@ -1,9 +1,11 @@\n+ package net.minecraft.server;\n+ \n+ import com.google.common.collect.Lists;\n++\n++import com.destroystokyo.paper.event.player.PlayerClientOptionsChangeEvent;\n+ import com.mojang.authlib.GameProfile;\n+ import com.mojang.datafixers.util.Either;\n+-import io.netty.util.concurrent.Future;\n++\n+ import java.util.ArrayDeque; // Paper\n+ import java.util.Collection;\n+ import java.util.Deque; // Paper\n+@@ -16,7 +18,6 @@ import org.apache.logging.log4j.LogManager;\n+ import org.apache.logging.log4j.Logger;\n+ \n+ // CraftBukkit start\n+-import com.google.common.base.Preconditions;\n+ import org.bukkit.Bukkit;\n+ import org.bukkit.GameMode;\n+ import org.bukkit.Location;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9968cdeca40898e57fdcfe483180745d24465a29"}, "originalPosition": 124}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9968cdeca40898e57fdcfe483180745d24465a29", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/9968cdeca40898e57fdcfe483180745d24465a29", "committedDate": "2020-02-04T22:17:26Z", "message": "Add Player Client Options API"}, "afterCommit": {"oid": "ad9df1e041fedaf8087b202b7c41ecc8933f6ff7", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/ad9df1e041fedaf8087b202b7c41ecc8933f6ff7", "committedDate": "2020-03-28T08:57:39Z", "message": "Add Player Client Options API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad9df1e041fedaf8087b202b7c41ecc8933f6ff7", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/ad9df1e041fedaf8087b202b7c41ecc8933f6ff7", "committedDate": "2020-03-28T08:57:39Z", "message": "Add Player Client Options API"}, "afterCommit": {"oid": "7c3588c6df451f926924b1d214992270de54038a", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/7c3588c6df451f926924b1d214992270de54038a", "committedDate": "2020-03-28T09:06:12Z", "message": "Add Player Client Options API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDE2MDI3", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-392016027", "createdAt": "2020-04-13T08:11:21Z", "commit": {"oid": "7c3588c6df451f926924b1d214992270de54038a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTg4MDk5", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-394988099", "createdAt": "2020-04-16T20:49:11Z", "commit": {"oid": "7c3588c6df451f926924b1d214992270de54038a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTg4OTcz", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-394988973", "createdAt": "2020-04-16T20:50:30Z", "commit": {"oid": "7c3588c6df451f926924b1d214992270de54038a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDYwNzI3", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-395060727", "createdAt": "2020-04-16T23:12:41Z", "commit": {"oid": "7c3588c6df451f926924b1d214992270de54038a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDY1Mzc0", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-395065374", "createdAt": "2020-04-16T23:25:34Z", "commit": {"oid": "7c3588c6df451f926924b1d214992270de54038a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDY2MDk4", "url": "https://github.com/PaperMC/Paper/pull/2883#pullrequestreview-395066098", "createdAt": "2020-04-16T23:27:31Z", "commit": {"oid": "7c3588c6df451f926924b1d214992270de54038a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e58bb466cbadb3cc5c5dc673f110fa5e1a3f8b", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/90e58bb466cbadb3cc5c5dc673f110fa5e1a3f8b", "committedDate": "2020-04-17T04:09:55Z", "message": "Add Player Client Options API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c3588c6df451f926924b1d214992270de54038a", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/7c3588c6df451f926924b1d214992270de54038a", "committedDate": "2020-03-28T09:06:12Z", "message": "Add Player Client Options API"}, "afterCommit": {"oid": "90e58bb466cbadb3cc5c5dc673f110fa5e1a3f8b", "author": {"user": {"login": "MiniDigger", "name": "MiniDigger | Martin"}}, "url": "https://github.com/PaperMC/Paper/commit/90e58bb466cbadb3cc5c5dc673f110fa5e1a3f8b", "committedDate": "2020-04-17T04:09:55Z", "message": "Add Player Client Options API"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1194, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}