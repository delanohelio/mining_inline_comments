{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTg0NzQw", "number": 3360, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDowMjoxMFrOD8uXLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoxMDozN1rOD9AIAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDAwNzUwOnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDowMjoxMFrOGV1v7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoxNjo0NlrOGWeH3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1MzkwMg==", "bodyText": "seven?", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r425553902", "createdAt": "2020-05-15T04:02:10Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4NTI3MQ==", "bodyText": "Lightmasks have 18 bits, from the -1 (void) section until the 17th (air) section.\nSections go from 0..16. Now whenever a section is not empty, it can potentially change lighting for the section itself, the section below and the section above, hence the bitmask 111b, which is 7d.", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r425685271", "createdAt": "2020-05-15T09:38:06Z", "author": {"login": "MeFisto94"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1MzkwMg=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMjU3MQ==", "bodyText": "I see\nInstead of commenting what the method is, we use obfhelpers (Like this https://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0004-MC-Utils.patch#L4241)", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426022571", "createdAt": "2020-05-15T20:07:35Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1MzkwMg=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTM5MQ==", "bodyText": "Added obf helper, and added comments made here about the 7 value.", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426215391", "createdAt": "2020-05-17T04:16:46Z", "author": {"login": "aikar"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1MzkwMg=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDEzMjAzOnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNToyNjoyOFrOGV27kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNTozODowMFrOGWeYdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzI2Ng==", "bodyText": "and this bithack is what? from my memory this looks like getHighestBit, but according to some documentation it appears getHighestBit is implemented differently...", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r425573266", "createdAt": "2020-05-15T05:26:28Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty\n++        }\n++\n++        return mask;\n++    }\n++\n++    private static int getCeilingLightMask(final Chunk chunk) {\n++        int mask = getLightMask(chunk);\n++\n++        mask |= mask >> 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4Nzg4MQ==", "bodyText": "It is similar to get highest bit, it would turn an 001010 into an 001111 so basically the highest bit and all below.\nWe then invert this, so we'd have 110000 and compare that to the \"main\" chunk.\nThis is because the bug only appears when the current chunks lightmaps are higher than those of the neighbors, thus we can omit sending neighbors which are lower than the current chunks lights.\nso TLDR is that getCeilingLightMask returns a light mask with all bits set below the highest affected section. We could also count the number of leading zeros and invert them, somehow.", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r425687881", "createdAt": "2020-05-15T09:43:06Z", "author": {"login": "MeFisto94"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty\n++        }\n++\n++        return mask;\n++    }\n++\n++    private static int getCeilingLightMask(final Chunk chunk) {\n++        int mask = getLightMask(chunk);\n++\n++        mask |= mask >> 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzI2Ng=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMTE0OA==", "bodyText": "either use Integer#numberOfLeadingZeros or document what this bithack is supposed to be doing then", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426021148", "createdAt": "2020-05-15T20:04:32Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty\n++        }\n++\n++        return mask;\n++    }\n++\n++    private static int getCeilingLightMask(final Chunk chunk) {\n++        int mask = getLightMask(chunk);\n++\n++        mask |= mask >> 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzI2Ng=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTM3OQ==", "bodyText": "I'm leaving these notes as a comment in the code, can maybe amend this in a future commit to use recommended strategy", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426215379", "createdAt": "2020-05-17T04:16:24Z", "author": {"login": "aikar"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty\n++        }\n++\n++        return mask;\n++    }\n++\n++    private static int getCeilingLightMask(final Chunk chunk) {\n++        int mask = getLightMask(chunk);\n++\n++        mask |= mask >> 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzI2Ng=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxOTYzOA==", "bodyText": "public static long getMask(final long value) {\n    return ~(Long.MIN_VALUE >> (Long.numberOfLeadingZeros(value) - 1));\n}\n\nAlthough given we invert the mask later, could drop ~ from the function above and just not invert it later.", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426219638", "createdAt": "2020-05-17T05:38:00Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty\n++        }\n++\n++        return mask;\n++    }\n++\n++    private static int getCeilingLightMask(final Chunk chunk) {\n++        int mask = getLightMask(chunk);\n++\n++        mask |= mask >> 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzI2Ng=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDEzMjc5OnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNToyNjo1NVrOGV28DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoxMjoyNVrOGWeHBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzM4OQ==", "bodyText": "no diff should be here", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r425573389", "createdAt": "2020-05-15T05:26:55Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty\n++        }\n++\n++        return mask;\n++    }\n++\n++    private static int getCeilingLightMask(final Chunk chunk) {\n++        int mask = getLightMask(chunk);\n++\n++        mask |= mask >> 1;\n++        mask |= mask >> 2;\n++        mask |= mask >> 4;\n++        mask |= mask >> 8;\n++        mask |= mask >> 16;\n++\n++        return mask;\n++    }\n++\n+     final void sendChunk(EntityPlayer entityplayer, Packet<?>[] apacket, Chunk chunk) { this.a(entityplayer, apacket, chunk); } // Paper - OBFHELPER\n+-    private void a(EntityPlayer entityplayer, Packet<?>[] apacket, Chunk chunk) {\n++    private void a(EntityPlayer entityplayer, Packet<?>[] apacket,  Chunk chunk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4ODAxMQ==", "bodyText": "yep, left over from testing, will be fixed.", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r425688011", "createdAt": "2020-05-15T09:43:22Z", "author": {"login": "MeFisto94"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty\n++        }\n++\n++        return mask;\n++    }\n++\n++    private static int getCeilingLightMask(final Chunk chunk) {\n++        int mask = getLightMask(chunk);\n++\n++        mask |= mask >> 1;\n++        mask |= mask >> 2;\n++        mask |= mask >> 4;\n++        mask |= mask >> 8;\n++        mask |= mask >> 16;\n++\n++        return mask;\n++    }\n++\n+     final void sendChunk(EntityPlayer entityplayer, Packet<?>[] apacket, Chunk chunk) { this.a(entityplayer, apacket, chunk); } // Paper - OBFHELPER\n+-    private void a(EntityPlayer entityplayer, Packet<?>[] apacket, Chunk chunk) {\n++    private void a(EntityPlayer entityplayer, Packet<?>[] apacket,  Chunk chunk) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzM4OQ=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTE3Mg==", "bodyText": "handled", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426215172", "createdAt": "2020-05-17T04:12:25Z", "author": {"login": "aikar"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {\n++        final ChunkSection[] chunkSections = chunk.getSections();\n++        int mask = 0;\n++\n++        for (int i = 0; i < chunkSections.length; ++i) {\n++            mask |= (ChunkSection.a(chunkSections[i]) ? 0 : 7) << i; // ChunkSection.isEmpty\n++        }\n++\n++        return mask;\n++    }\n++\n++    private static int getCeilingLightMask(final Chunk chunk) {\n++        int mask = getLightMask(chunk);\n++\n++        mask |= mask >> 1;\n++        mask |= mask >> 2;\n++        mask |= mask >> 4;\n++        mask |= mask >> 8;\n++        mask |= mask >> 16;\n++\n++        return mask;\n++    }\n++\n+     final void sendChunk(EntityPlayer entityplayer, Packet<?>[] apacket, Chunk chunk) { this.a(entityplayer, apacket, chunk); } // Paper - OBFHELPER\n+-    private void a(EntityPlayer entityplayer, Packet<?>[] apacket, Chunk chunk) {\n++    private void a(EntityPlayer entityplayer, Packet<?>[] apacket,  Chunk chunk) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzM4OQ=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjkxMTMzOnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowNzo1NlrOGWSXXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDowNzo1NFrOGWeGGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMjc0OA==", "bodyText": "needs paper comment", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426022748", "createdAt": "2020-05-15T20:07:56Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNDkzOA==", "bodyText": "this was already paper code", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426214938", "createdAt": "2020-05-17T04:07:54Z", "author": {"login": "aikar"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMjc0OA=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjkxNzA5OnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoxMDoyM1rOGWSbEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoxMDowMFrOGWeGeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMzY5Nw==", "bodyText": "these functions need to be enclosed with paper start and end", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426023697", "createdAt": "2020-05-15T20:10:23Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTAzNA==", "bodyText": "handling myself", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426215034", "createdAt": "2020-05-17T04:10:00Z", "author": {"login": "aikar"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded\n+             },\n+             (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,\n+              com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {\n+@@ -1955,12 +1955,92 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+ \n+     }\n+ \n++    private static int getLightMask(final Chunk chunk) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMzY5Nw=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjkxNzc3OnYy", "diffSide": "RIGHT", "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDoxMDozN1rOGWSbfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNDoxMDoxN1rOGWeGmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMzgwNg==", "bodyText": "also needs paper comment", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426023806", "createdAt": "2020-05-15T20:10:37Z", "author": {"login": "Spottedleaf"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxNTA2NA==", "bodyText": "was already paper code", "url": "https://github.com/PaperMC/Paper/pull/3360#discussion_r426215064", "createdAt": "2020-05-17T04:10:17Z", "author": {"login": "aikar"}, "path": "Spigot-Server-Patches/0521-Workaround-for-Client-Lag-Spikes-MC-16225.patch", "diffHunk": "@@ -0,0 +1,132 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: MeFisto94 <MeFisto94@users.noreply.github.com>\n+Date: Tue, 12 May 2020 23:02:43 +0200\n+Subject: [PATCH] Workaround for Client Lag Spikes (MC-16225) When crossing\n+ certain chunk boundaries, the client needlessly calculates light maps for\n+ chunk neighbours. In some specific map configurations, these calculations\n+ cause a 500ms+ freeze on the Client. This patch basically serves as a\n+ workaround by sending light maps to the client, so that it doesn't attempt to\n+ calculate them. This mitigates the frametime impact to a minimum (but it's\n+ still there).\n+\n+\n+diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java\n+index 8c1f3290d23795b58a30274c9437dc7dc43fa3a1..33cca62d90bf037df1b0b4e901baedb91400aee7 100644\n+--- a/src/main/java/net/minecraft/server/Chunk.java\n++++ b/src/main/java/net/minecraft/server/Chunk.java\n+@@ -277,7 +277,7 @@ public class Chunk implements IChunkAccess {\n+ \n+                     // broadcast\n+                     Object[] backingSet = inRange.getBackingSet();\n+-                    Packet[] chunkPackets = new Packet[2];\n++                    Packet[] chunkPackets = new Packet[10];\n+                     for (int index = 0, len = backingSet.length; index < len; ++index) {\n+                         Object temp = backingSet[index];\n+                         if (!(temp instanceof EntityPlayer)) {\n+diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+index 81bb26abc520f49de2e916cf2757ac4c710d02cd..de758f873b4736cdfb617d11fdb0d6f61e8f4a4d 100644\n+--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java\n++++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java\n+@@ -376,7 +376,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {\n+                     player.needsChunkCenterUpdate = false;\n+                     player.playerConnection.sendPacket(new PacketPlayOutViewCentre(currPosX, currPosZ));\n+                 }\n+-                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[2], false, true); // unloaded, loaded\n++                PlayerChunkMap.this.sendChunk(player, new ChunkCoordIntPair(rangeX, rangeZ), new Packet[10], false, true); // unloaded, loaded", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMzgwNg=="}, "originalCommit": {"oid": "55e57c508842e4fec015989b5cf92bc55112e46a"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1971, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}