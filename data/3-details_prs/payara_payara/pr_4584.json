{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjQ1MTM1", "number": 4584, "title": "APPSERV-20 Add Config Source for Payara Variables", "bodyText": "Description\nThis is a feature.\nThis PR adds a config source for a new properties file: payara-expression-config.properties. The properties stored in here are converted from their variable into their actual values. For example, a property of fish.payara.example.alias=${ALIAS=wibbles} will be converted to the password stored under the alias of wibbles. If an alias isn't found, null is returned.\nThis PR also changes it so that the password alias store will also match against both \"wibbles\" and \"${ALIAS=wibbles}\"\nTesting\nNew tests\nSome unit tests added to check that null is returned from the config source if no matching alias is found, and also that the values are successfully converted for system properties and environment variables.\nI also created a small sample app to check that the properties file is read and that password alias store reads both \"wibbles\" and \"${ALIAS=wibbles}\". This has been added under appserver/tests/payara-samples/samples.\nTest suites executed\n\n\nPayara Microprofile TCKs Runner (Config)\n\nTesting Environment\nWindows 10. JDK 8u212.\nDocumentation\npayara/Payara-Server-Documentation#724", "createdAt": "2020-03-20T17:06:41Z", "url": "https://github.com/payara/Payara/pull/4584", "merged": true, "mergeCommit": {"oid": "b2b3e64f11867ca37f446affda58b2da974f5027"}, "closed": true, "closedAt": "2020-04-17T08:18:50Z", "author": {"login": "Pandrex247"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPjfs5gH2gAyMzkxNjQ1MTM1OjRmM2MwNjE5Y2E1OWVjMmM4ZDZmOTEzN2NkZWNiMWFiYjhhMTkwODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV6wDEAFqTM5MDcwNzU5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4f3c0619ca59ec2c8d6f9137cdecb1abb8a19084", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/4f3c0619ca59ec2c8d6f9137cdecb1abb8a19084", "committedDate": "2020-03-20T16:56:15Z", "message": "APPSERV-20 refactor big method in TranslatedConfigView and translate values returned from password alias config provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbcf4bdcf714a6d2bde58ed0c10459c0811ab592", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/cbcf4bdcf714a6d2bde58ed0c10459c0811ab592", "committedDate": "2020-03-20T16:56:32Z", "message": "APPSERV-20 Add new alias config source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98cf24d9afd5df2dda8f5b927b47a95d4a940933", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/98cf24d9afd5df2dda8f5b927b47a95d4a940933", "committedDate": "2020-03-20T16:56:32Z", "message": "APPSERV-20 Add unit test and correct syntax"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebae5e4677825a93e145826bc3c1a1da87c11fb6", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/ebae5e4677825a93e145826bc3c1a1da87c11fb6", "committedDate": "2020-03-20T16:56:32Z", "message": "APPSERV-20 Use correct properties store and add copyright"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f7fae3939223063c7d021c4b16a370b719df732", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/4f7fae3939223063c7d021c4b16a370b719df732", "committedDate": "2020-03-23T14:53:18Z", "message": "APPSERV-20 Add sample test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64fa03c3f75dd669bb2a092928d7d5934da2973f", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/64fa03c3f75dd669bb2a092928d7d5934da2973f", "committedDate": "2020-04-01T12:31:55Z", "message": "APPSERV-20 Undo refactor in TranslatedConfigView since it breaks recursion and add tests for recursion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a2e181f9a787aa1d6dcb2f40c57b3a6965207c3", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/4a2e181f9a787aa1d6dcb2f40c57b3a6965207c3", "committedDate": "2020-04-01T12:34:31Z", "message": "Merge branch 'master' of https://github.com/payara/Payara into APPSERV-20\n\n Conflicts:\n\tnucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/spi/ConfigProviderResolverImpl.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MzIzNTk3", "url": "https://github.com/payara/Payara/pull/4584#pullrequestreview-386323597", "createdAt": "2020-04-02T11:08:37Z", "commit": {"oid": "4a2e181f9a787aa1d6dcb2f40c57b3a6965207c3"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTowODozN1rOF_mSMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTozNjowM1rOF_nHVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzMTg1Nw==", "bodyText": "Is this intentionally left println ?", "url": "https://github.com/payara/Payara/pull/4584#discussion_r402231857", "createdAt": "2020-04-02T11:08:37Z", "author": {"login": "jbee"}, "path": "appserver/tests/payara-samples/samples/microprofile-config-alias-properties/src/test/java/fish/payara/samples/microprofile/config/alias/MicroProfileConfigAliasTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.samples.microprofile.config.alias;\n+\n+import com.gargoylesoftware.htmlunit.TextPage;\n+import com.gargoylesoftware.htmlunit.WebClient;\n+import fish.payara.samples.CliCommands;\n+import fish.payara.samples.NotMicroCompatible;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.nio.file.Paths;\n+\n+/**\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n+@RunWith(Arquillian.class)\n+@NotMicroCompatible\n+public class MicroProfileConfigAliasTest {\n+\n+    @ArquillianResource\n+    private URL url;\n+\n+    @Deployment(testable = false)\n+    public static WebArchive createDeployment() {\n+        return ShrinkWrap.create(WebArchive.class, \"microprofile-config-alias.war\")\n+                .addPackage(\"fish.payara.samples.microprofile.config.alias\")\n+                .addAsManifestResource(new File(\"src/main/resources/META-INF/microprofile-config-alias.properties\"));\n+    }\n+\n+    @BeforeClass\n+    public static void createPasswordAlias() {\n+        CliCommands.payaraGlassFish(\"create-password-alias\", \"-W\", Paths.get(\"\").toAbsolutePath() + \"/src/test/resources/passwordfile.txt\", \"wibbles\");\n+\n+        // Deployment actually happens before @BeforeClass, and the PasswordAlias config source requires an application refresh to update, so disable and enable it\n+        CliCommands.payaraGlassFish(\"set\", \"servers.server.server.application-ref.microprofile-config-alias.enabled=false\");\n+        CliCommands.payaraGlassFish(\"set\", \"servers.server.server.application-ref.microprofile-config-alias.enabled=true\");\n+    }\n+\n+    @AfterClass\n+    public static void deletePasswordAlias() {\n+        CliCommands.payaraGlassFish(\"delete-password-alias\", \"wibbles\");\n+    }\n+\n+    @Test\n+    public void testAliasSubstitution() throws Exception {\n+        TextPage page = new WebClient().getPage(url + \"ConfigServlet\");\n+        System.out.println(page.getContent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e181f9a787aa1d6dcb2f40c57b3a6965207c3"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzMjg1Mg==", "bodyText": "I'd like to see a message in connection with assertTrue and contains. Maybe its a good idea to create a little helper method that in case of failure has a message like \"Expected contains: Normal Notation: wobbles\" and so forth.", "url": "https://github.com/payara/Payara/pull/4584#discussion_r402232852", "createdAt": "2020-04-02T11:10:30Z", "author": {"login": "jbee"}, "path": "appserver/tests/payara-samples/samples/microprofile-config-alias-properties/src/test/java/fish/payara/samples/microprofile/config/alias/MicroProfileConfigAliasTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.samples.microprofile.config.alias;\n+\n+import com.gargoylesoftware.htmlunit.TextPage;\n+import com.gargoylesoftware.htmlunit.WebClient;\n+import fish.payara.samples.CliCommands;\n+import fish.payara.samples.NotMicroCompatible;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.nio.file.Paths;\n+\n+/**\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n+@RunWith(Arquillian.class)\n+@NotMicroCompatible\n+public class MicroProfileConfigAliasTest {\n+\n+    @ArquillianResource\n+    private URL url;\n+\n+    @Deployment(testable = false)\n+    public static WebArchive createDeployment() {\n+        return ShrinkWrap.create(WebArchive.class, \"microprofile-config-alias.war\")\n+                .addPackage(\"fish.payara.samples.microprofile.config.alias\")\n+                .addAsManifestResource(new File(\"src/main/resources/META-INF/microprofile-config-alias.properties\"));\n+    }\n+\n+    @BeforeClass\n+    public static void createPasswordAlias() {\n+        CliCommands.payaraGlassFish(\"create-password-alias\", \"-W\", Paths.get(\"\").toAbsolutePath() + \"/src/test/resources/passwordfile.txt\", \"wibbles\");\n+\n+        // Deployment actually happens before @BeforeClass, and the PasswordAlias config source requires an application refresh to update, so disable and enable it\n+        CliCommands.payaraGlassFish(\"set\", \"servers.server.server.application-ref.microprofile-config-alias.enabled=false\");\n+        CliCommands.payaraGlassFish(\"set\", \"servers.server.server.application-ref.microprofile-config-alias.enabled=true\");\n+    }\n+\n+    @AfterClass\n+    public static void deletePasswordAlias() {\n+        CliCommands.payaraGlassFish(\"delete-password-alias\", \"wibbles\");\n+    }\n+\n+    @Test\n+    public void testAliasSubstitution() throws Exception {\n+        TextPage page = new WebClient().getPage(url + \"ConfigServlet\");\n+        System.out.println(page.getContent());\n+\n+        Assert.assertTrue(page.getContent().contains(\"Normal Notation: wobbles\"));\n+        Assert.assertTrue(page.getContent().contains(\"Substitution Notation: wobbles\"));\n+        Assert.assertTrue(page.getContent().contains(\"Password Alias from File: wobbles\"));\n+        Assert.assertTrue(page.getContent().contains(\"System Property Alias from File: Tiddles!\"));\n+        Assert.assertTrue(page.getContent().contains(\"System Property Alias from File: Tiddles!\"));\n+        Assert.assertTrue(page.getContent().contains(\"Environment Variable Alias referencing System Property Alias from File: Dobbles\"));\n+        Assert.assertTrue(page.getContent().contains(\"Environment Variable Alias and System Property Alias from File (same property): Bibbles and Bobbles\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e181f9a787aa1d6dcb2f40c57b3a6965207c3"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzMzg2Mw==", "bodyText": "Can't see a caller for this method.", "url": "https://github.com/payara/Payara/pull/4584#discussion_r402233863", "createdAt": "2020-04-02T11:12:47Z", "author": {"login": "jbee"}, "path": "nucleus/admin/config-api/src/main/java/org/glassfish/config/support/TranslatedConfigView.java", "diffHunk": "@@ -303,5 +297,19 @@ public static String getRealPasswordFromAlias(final String at) throws\n         return new String(domainPasswordAliasStore.get(an));\n     }\n \n+    private static String expandPasswordAlias(String alias) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e181f9a787aa1d6dcb2f40c57b3a6965207c3"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzODAxNw==", "bodyText": "Collections.emptyList() is suggested to be preferred over using Collections.EMPTY_LIST directly.", "url": "https://github.com/payara/Payara/pull/4584#discussion_r402238017", "createdAt": "2020-04-02T11:21:12Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/spi/ConfigProviderResolverImpl.java", "diffHunk": "@@ -368,6 +373,18 @@ public String getDeployedApplicationProperty(String applicationName, String name\n         return result;\n     }\n \n+    public List<Properties> getDeployedApplicationAliasProperties(String applicationName) {\n+        ApplicationInfo info = applicationRegistry.get(applicationName);\n+        List<Properties> result = Collections.EMPTY_LIST;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e181f9a787aa1d6dcb2f40c57b3a6965207c3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NDgzNA==", "bodyText": "Something like\nreturn properties.entrySet().stream()\n                  .collect(Collectors.toMap(e -> e.getKey().toString(), e -> getValue(e.getValue));\nwould be nice.", "url": "https://github.com/payara/Payara/pull/4584#discussion_r402244834", "createdAt": "2020-04-02T11:34:48Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/source/AliasPropertiesConfigSource.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+\n+package fish.payara.nucleus.microprofile.config.source;\n+\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+import org.glassfish.config.support.TranslatedConfigView;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * Config source for the microprofile-config-alias.properties file. This config source runs properties through the\n+ * TranslatedConfigView class to perform substitutions on aliases, system properties, and environment variables.\n+ *\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n+public class AliasPropertiesConfigSource extends PayaraConfigSource implements ConfigSource {\n+\n+    private final Properties properties;\n+\n+    public AliasPropertiesConfigSource(Properties properties) {\n+        super();\n+        this.properties = properties;\n+    }\n+\n+    @Override\n+    public int getOrdinal() {\n+        return Integer.parseInt(configService.getMPConfig().getAliasPropertiesOrdinality());\n+    }\n+\n+    @Override\n+    public Map<String, String> getProperties() {\n+        HashMap<String,String> result = new HashMap<>(properties.size());\n+\n+        for (Object key : properties.keySet()) {\n+            String alias = properties.getProperty((String) key);\n+            String value = getValue((String) key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e181f9a787aa1d6dcb2f40c57b3a6965207c3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0NTQ2Mg==", "bodyText": "I wonder why PropertiesConfigSource gets the appName passed while AliasPropertiesConfigSource does not.", "url": "https://github.com/payara/Payara/pull/4584#discussion_r402245462", "createdAt": "2020-04-02T11:36:03Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/spi/ConfigProviderResolverImpl.java", "diffHunk": "@@ -300,6 +302,9 @@ Config getNamedConfig(String applicationName) {\n             for (Properties props : getDeployedApplicationProperties(appName)) {\n                 sources.add(new PropertiesConfigSource(props, appName));\n             }\n+            for (Properties props : getDeployedApplicationAliasProperties(appName)) {\n+                sources.add(new AliasPropertiesConfigSource(props));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a2e181f9a787aa1d6dcb2f40c57b3a6965207c3"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a627f9dd2ae287e183a8473c8e699a16a5ed9087", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/a627f9dd2ae287e183a8473c8e699a16a5ed9087", "committedDate": "2020-04-03T12:26:55Z", "message": "Merge branch 'master' of github.com:payara/Payara into APPSERV-20"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cd1027e1b71ffceba47ed63a70fe303db226791", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/2cd1027e1b71ffceba47ed63a70fe303db226791", "committedDate": "2020-04-03T15:59:20Z", "message": "APPSERV-20 Review comments and rename file and config source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bff95a5ccc616a478e82da0798efc66199582604", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/bff95a5ccc616a478e82da0798efc66199582604", "committedDate": "2020-04-03T16:04:15Z", "message": "APPSERV-20 fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDA1ODY3", "url": "https://github.com/payara/Payara/pull/4584#pullrequestreview-387405867", "createdAt": "2020-04-03T16:27:46Z", "commit": {"oid": "bff95a5ccc616a478e82da0798efc66199582604"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzA3NTk0", "url": "https://github.com/payara/Payara/pull/4584#pullrequestreview-390707594", "createdAt": "2020-04-09T11:25:28Z", "commit": {"oid": "bff95a5ccc616a478e82da0798efc66199582604"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 784, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}