{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwODM2MzYx", "number": 4419, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzo0MTo0NFrODW7tww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOTowNjoxOVrODeQxEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzczNjM1OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzo0MTo0NFrOFb-IIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODoxMToyOFrOFb-5QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3Mzc2Mw==", "bodyText": "Same line is duplicated and commented out ... was it tested? :-)", "url": "https://github.com/payara/Payara/pull/4419#discussion_r364873763", "createdAt": "2020-01-09T17:41:44Z", "author": {"login": "dmatej"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -332,7 +333,10 @@ private AuthenticationStatus refreshTokens(HttpMessageContext httpContext, Refre\n             updateContext(tokensObject);\n             OpenIdCredential credential = new OpenIdCredential(tokensObject, httpContext, configuration);\n             CredentialValidationResult validationResult = identityStoreHandler.validate(credential);\n-            // Register session manually (if @AutoApplySession used, this would be done by its interceptor)\n+            \n+            // Dot not register session, as this will invalidate the currently active sessions (with all of its attributes)!\n+            // httpContext.setRegisterSession(validationResult.getCallerPrincipal().getName(), validationResult.getCallerGroups());\n+\n             httpContext.setRegisterSession(validationResult.getCallerPrincipal().getName(), validationResult.getCallerGroups());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c954b01a13ab6586d41a9b59c67f7d5faf5535"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NjMzNg==", "bodyText": "Ah, sorry. Copied the changes from my test-env without removing the line. Will fix it.", "url": "https://github.com/payara/Payara/pull/4419#discussion_r364886336", "createdAt": "2020-01-09T18:11:28Z", "author": {"login": "parysto"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -332,7 +333,10 @@ private AuthenticationStatus refreshTokens(HttpMessageContext httpContext, Refre\n             updateContext(tokensObject);\n             OpenIdCredential credential = new OpenIdCredential(tokensObject, httpContext, configuration);\n             CredentialValidationResult validationResult = identityStoreHandler.validate(credential);\n-            // Register session manually (if @AutoApplySession used, this would be done by its interceptor)\n+            \n+            // Dot not register session, as this will invalidate the currently active sessions (with all of its attributes)!\n+            // httpContext.setRegisterSession(validationResult.getCallerPrincipal().getName(), validationResult.getCallerGroups());\n+\n             httpContext.setRegisterSession(validationResult.getCallerPrincipal().getName(), validationResult.getCallerGroups());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3Mzc2Mw=="}, "originalCommit": {"oid": "f8c954b01a13ab6586d41a9b59c67f7d5faf5535"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDU4NTc4OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwOTowNjoxOVrOFnUB5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzozMzozOVrOFrwumg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2Njk0OA==", "bodyText": "Is really the plan to put the lock to the session object and leave it there forever? What if the token expires for second time? The lock will be still in session attributes from previous iteration.\nAlso replication in cluster will have some latency, is it or isn't it a problem? (probably it isn't)\nI don't say it is incorrect, I am only asking ;-)", "url": "https://github.com/payara/Payara/pull/4419#discussion_r376766948", "createdAt": "2020-02-09T09:06:19Z", "author": {"login": "dmatej"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -364,4 +368,20 @@ private void updateContext(JsonObject tokensObject) {\n         }\n     }\n \n+    private Object getSessionLock(HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af59a1c253e622611e9401025bd69ab9b957954d"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2ODYyOQ==", "bodyText": "Interesting...\nI know raw Object is not Serializable. I do not remember perfectly, but I do wonder what happens at HttpSession passivation... Or if session migrates to other VM...", "url": "https://github.com/payara/Payara/pull/4419#discussion_r376768629", "createdAt": "2020-02-09T09:34:15Z", "author": {"login": "pzygielo"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -364,4 +368,20 @@ private void updateContext(JsonObject tokensObject) {\n         }\n     }\n \n+    private Object getSessionLock(HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2Njk0OA=="}, "originalCommit": {"oid": "af59a1c253e622611e9401025bd69ab9b957954d"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc3MzkxOA==", "bodyText": "Hi @dmatej, hi @pzygielo\n\nIs really the plan to put the lock to the session object and leave it there forever? What if the token expires for second time? The lock will be still in session attributes from previous iteration.\n\nYou mean the lock-object? Yes, when the token expires again, the same instance of the lock will be reused. So, we do not need to set the \"lock-attribute\" again as long as the user's session is not invalidated. When the user's session is invalidated, the lock will be removed. Or am I wrong?\n\nAlso replication in cluster will have some latency, is it or isn't it a problem? (probably it isn't)\n\nObject itself does not have any fields that need to be transferred. So there shouldn't be a huge impact on latency. Although I haven't measured that ;-)\n\nI know raw Object is not Serializable. I do not remember perfectly, but I do wonder what happens at HttpSession passivation... Or if session migrates to other VM...\n\nGood point, haven't thought about that. Yes, Object is not Serializable, so passivation or replication will fail. Will change the lock to an \"empty\" implementation of Serializable.\n\nI don't say it is incorrect, I am only asking ;-)\n\nI appreciate your feedback :-)", "url": "https://github.com/payara/Payara/pull/4419#discussion_r376773918", "createdAt": "2020-02-09T10:59:18Z", "author": {"login": "parysto"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -364,4 +368,20 @@ private void updateContext(JsonObject tokensObject) {\n         }\n     }\n \n+    private Object getSessionLock(HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2Njk0OA=="}, "originalCommit": {"oid": "af59a1c253e622611e9401025bd69ab9b957954d"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI0MjIxNg==", "bodyText": "@pzygielo I think I investigated in years ago when I was fixing SSO session replication and I found that nonserializable objects are simply ignored if there is no special implementation for them.", "url": "https://github.com/payara/Payara/pull/4419#discussion_r381242216", "createdAt": "2020-02-19T11:47:25Z", "author": {"login": "dmatej"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -364,4 +368,20 @@ private void updateContext(JsonObject tokensObject) {\n         }\n     }\n \n+    private Object getSessionLock(HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2Njk0OA=="}, "originalCommit": {"oid": "af59a1c253e622611e9401025bd69ab9b957954d"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1OTEyMw==", "bodyText": "@dmatej thanks for checking\n\nI think I investigated in years ago when I was fixing SSO session replication and I found that nonserializable objects are simply ignored if there is no special implementation for them.\n\nHowever it's not so clear for me, given section 7.7.2 of Servlet 4.0 spec, and:\n\nThe distributed servlet container must throw an IllegalArgumentException for\nobjects where the container cannot support the mechanism necessary for migration\nof the session storing them.\n\nthus I'm not so sure about simply ignoring such session attributes. So it seems I have to investigate myself \ud83d\ude09", "url": "https://github.com/payara/Payara/pull/4419#discussion_r381259123", "createdAt": "2020-02-19T12:26:45Z", "author": {"login": "pzygielo"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -364,4 +368,20 @@ private void updateContext(JsonObject tokensObject) {\n         }\n     }\n \n+    private Object getSessionLock(HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2Njk0OA=="}, "originalCommit": {"oid": "af59a1c253e622611e9401025bd69ab9b957954d"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2NDgxMw==", "bodyText": "Here is one implementation piece I found, that confirms your statement, about \"how it is\": \n  \n    \n      Payara/appserver/web/web-core/src/main/java/org/apache/catalina/session/StandardSession.java\n    \n    \n        Lines 2172 to 2178\n      in\n      bdb468a\n    \n    \n    \n    \n\n        \n          \n           } else if (isSerializable(value)) { \n        \n\n        \n          \n               saveNames.add(keys[i]); \n        \n\n        \n          \n               saveValues.add(value); \n        \n\n        \n          \n           //end HERCULES:mod \n        \n\n        \n          \n           } else { \n        \n\n        \n          \n               removeAttribute(keys[i], true, true); \n        \n\n        \n          \n           }", "url": "https://github.com/payara/Payara/pull/4419#discussion_r381264813", "createdAt": "2020-02-19T12:39:42Z", "author": {"login": "pzygielo"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -364,4 +368,20 @@ private void updateContext(JsonObject tokensObject) {\n         }\n     }\n \n+    private Object getSessionLock(HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2Njk0OA=="}, "originalCommit": {"oid": "af59a1c253e622611e9401025bd69ab9b957954d"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzMTQ1MA==", "bodyText": "\"the container cannot support the mechanism necessary\" ... such mechanism might be even ignoring objects which are managed by some mechanism on the other side.\nBut ... yes, I think there are some \"blank spaces\" in impl ... the problem is that implementing it would crash nearly all older+larger applications I have seen :D", "url": "https://github.com/payara/Payara/pull/4419#discussion_r381431450", "createdAt": "2020-02-19T17:33:39Z", "author": {"login": "dmatej"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -364,4 +368,20 @@ private void updateContext(JsonObject tokensObject) {\n         }\n     }\n \n+    private Object getSessionLock(HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc2Njk0OA=="}, "originalCommit": {"oid": "af59a1c253e622611e9401025bd69ab9b957954d"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1354, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}