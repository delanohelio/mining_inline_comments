{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDMzMjMw", "number": 5010, "title": "FISH-790 Refactor, fix bugs in  JavaEE Context Utility", "bodyText": "Description\nRefactored Context utilities into immutable, serializable class.\nFixed many bugs along the way.\nImportant Info\nBlockers\nThis PR is a blocker for Hazelcast 4 integration.\nTesting\nNew tests\nAdded a unit test\nTesting Performed\nAll test suites pass, tested with Hazelcast 4 branch\nTesting Environment\nJava 8, Mac\nDocumentation\nDocumentation added via Internal API javadoc for new EE context API\nNotes for Reviewers\nThis issue includes APIs necessary for Hazelcast 4 to be much more tightly integrated with Jakarta EE and Payara\nwhen you think invocation.preInvoke() this is easy-to-use replacement and so much more!\nThis refactoring has been in the works for 6+ months, so it's not \"new\" in any sense of the word", "createdAt": "2020-11-27T06:59:35Z", "url": "https://github.com/payara/Payara/pull/5010", "merged": true, "mergeCommit": {"oid": "07cc0af0d1c73c329e6afb81770429b842d245a0"}, "closed": true, "closedAt": "2020-12-03T16:36:39Z", "author": {"login": "lprimak"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgzpSYABqjQwNDc2MzA1MDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdilzzkAFqTU0NDE0OTMyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79cb79909d4cd7f3849c42c66d47d4dc5911a525", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/79cb79909d4cd7f3849c42c66d47d4dc5911a525", "committedDate": "2020-11-28T02:35:15Z", "message": "PayaraValueHolder fixes from Hz migration branch"}, "afterCommit": {"oid": "b4f88f35c6ec6491d5aac4f5f6d35a92d3c6c203", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/b4f88f35c6ec6491d5aac4f5f6d35a92d3c6c203", "committedDate": "2020-11-28T03:32:53Z", "message": "PayaraValueHolder fixes from Hz migration branch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4f88f35c6ec6491d5aac4f5f6d35a92d3c6c203", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/b4f88f35c6ec6491d5aac4f5f6d35a92d3c6c203", "committedDate": "2020-11-28T03:32:53Z", "message": "PayaraValueHolder fixes from Hz migration branch"}, "afterCommit": {"oid": "65dc1ab7d307d2ff434c57d002bff8b0be846ec2", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/65dc1ab7d307d2ff434c57d002bff8b0be846ec2", "committedDate": "2020-11-28T04:11:02Z", "message": "PayaraValueHolder fixes from Hz migration branch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65dc1ab7d307d2ff434c57d002bff8b0be846ec2", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/65dc1ab7d307d2ff434c57d002bff8b0be846ec2", "committedDate": "2020-11-28T04:11:02Z", "message": "PayaraValueHolder fixes from Hz migration branch"}, "afterCommit": {"oid": "333d8ccf05be7c0d8413b455f94b5ad7f380c937", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/333d8ccf05be7c0d8413b455f94b5ad7f380c937", "committedDate": "2020-11-28T04:59:18Z", "message": "immutable, serializable, refactored JavaEEContextUtil and added Payara API for EE context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "460aa7c13338149fb38e4ce750285fbe346508c5", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/460aa7c13338149fb38e4ce750285fbe346508c5", "committedDate": "2020-11-28T05:39:26Z", "message": "immutable, serializable, refactored JavaEEContextUtil and added Payara API for EE context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "333d8ccf05be7c0d8413b455f94b5ad7f380c937", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/333d8ccf05be7c0d8413b455f94b5ad7f380c937", "committedDate": "2020-11-28T04:59:18Z", "message": "immutable, serializable, refactored JavaEEContextUtil and added Payara API for EE context"}, "afterCommit": {"oid": "460aa7c13338149fb38e4ce750285fbe346508c5", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/460aa7c13338149fb38e4ce750285fbe346508c5", "committedDate": "2020-11-28T05:39:26Z", "message": "immutable, serializable, refactored JavaEEContextUtil and added Payara API for EE context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/8f24ea13ca1044c3b97fa30ae7c05b73d7973b11", "committedDate": "2020-11-28T17:24:37Z", "message": "using member reference, diamond infrerence"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNzEyMzA3", "url": "https://github.com/payara/Payara/pull/5010#pullrequestreview-540712307", "createdAt": "2020-11-30T09:06:43Z", "commit": {"oid": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOTowNjo0NFrOH7xk-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOToxNToyNFrOH7x44Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0MDMxNQ==", "bodyText": "Is this really something we encourage users to use in their applications, and promise to keep API binary compatible?\nI think this should have home elsewhere, somewhere under nucleus/common.", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532440315", "createdAt": "2020-11-30T09:06:44Z", "author": {"login": "pdudits"}, "path": "api/payara-api/src/main/java/fish/payara/context/ContextProducer.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ *\n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ *\n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.context;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Utility to create / push Jakarta EE and CDI thread contexts\n+ *\n+ * Example:\n+ * @Inject ContextProducer producer;\n+ * // EJB/CDI thread:\n+ * Instance saved = producer.currentInvocation*();\n+ * // insure 'saved' is not leaked when application undeployed,\n+ * // otherwise use producer.fromComponentId(producer.getInvocationComponentId())\n+ * // and in another, non EJB/CDI thread:\n+ * try (Context ctx = saved.pushRequestContext()) {\n+ *     // runs with EJB / CDI context\n+ * }\n+ *\n+ * @author lprimak\n+ */\n+public interface ContextProducer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0NTQwOQ==", "bodyText": "Making it user-facing API is apparently your intent here, I'm not convinced that we should.", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532445409", "createdAt": "2020-11-30T09:15:24Z", "author": {"login": "pdudits"}, "path": "appserver/web/gf-web-connector/src/main/java/fish/payara/appserver/context/CDIExtension.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ *\n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ *\n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.appserver.context;\n+\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.AnnotatedType;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * adds context producer\n+ *\n+ * @author lprimak\n+ */\n+public class CDIExtension implements Extension {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNzMwOTc3", "url": "https://github.com/payara/Payara/pull/5010#pullrequestreview-540730977", "createdAt": "2020-11-30T09:31:02Z", "commit": {"oid": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOTozMTowMlrOH7yefg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOTo1MDoyMVrOH7zO0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ1NTAzOA==", "bodyText": "I'm all for short names but in this case I cannot see what type of Instance we talk about. An extra word might be needed. Similarly Context makes me wonder what context we talk about exactly. Or this needs to be in a package that helps identify the context of this context :)", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532455038", "createdAt": "2020-11-30T09:31:02Z", "author": {"login": "jbee"}, "path": "api/payara-api/src/main/java/fish/payara/context/ContextProducer.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ *\n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ *\n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.context;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Utility to create / push Jakarta EE and CDI thread contexts\n+ *\n+ * Example:\n+ * @Inject ContextProducer producer;\n+ * // EJB/CDI thread:\n+ * Instance saved = producer.currentInvocation*();\n+ * // insure 'saved' is not leaked when application undeployed,\n+ * // otherwise use producer.fromComponentId(producer.getInvocationComponentId())\n+ * // and in another, non EJB/CDI thread:\n+ * try (Context ctx = saved.pushRequestContext()) {\n+ *     // runs with EJB / CDI context\n+ * }\n+ *\n+ * @author lprimak\n+ */\n+public interface ContextProducer {\n+    /**\n+     * Creates an empty instance, i.e. if the empty context is pushed\n+     * on top of another context, the other context will be 'suppressed'\n+     * for the duration of this context\n+     *\n+     * @return new empty instance\n+     */\n+    Instance empty();\n+\n+    /**\n+     * captures current invocation and returns it as an instance\n+     *\n+     * @return new captured instance\n+     */\n+    Instance currentInvocation() throws IllegalStateException;\n+\n+    /**\n+     *\n+     * @param componentId component id for this instance, non-null\n+     *\n+     * @return new instance based on componentId\n+     */\n+    Instance fromComponentId(String componentId) throws IllegalArgumentException;\n+\n+    /**\n+     * @return Class Loader that's associated with current invocation or null if\n+     * there is no current invocation\n+     */\n+    ClassLoader getInvocationClassLoader();\n+\n+    /**\n+     * @return component ID for the current invocation or null\n+     */\n+    String getInvocationComponentId();\n+\n+    /**\n+     * This is different from class loaded, as there are some situations\n+     * where class is loaded but initialization is not complete,\n+     * such as CDI initializations, extensions start, etc.\n+     *\n+     * @return true if current invocation exists and is loaded / ready\n+     */\n+    boolean isInvocationLoaded();\n+\n+    /**\n+     * specific, immutable, thread-safe instance of the context\n+     */\n+    interface Instance extends Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ1OTA3OA==", "bodyText": "Could do with some javadoc explaining what is going on", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532459078", "createdAt": "2020-11-30T09:37:41Z", "author": {"login": "jbee"}, "path": "appserver/web/gf-web-connector/src/main/java/fish/payara/appserver/context/ContextualizerImpl.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ *\n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ *\n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.appserver.context;\n+\n+import fish.payara.context.ContextProducer;\n+import fish.payara.context.Contextualizer;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.util.stream.Stream;\n+import javax.inject.Inject;\n+import org.glassfish.internal.api.JavaEEContextUtil;\n+import org.jvnet.hk2.annotations.Service;\n+\n+/**\n+ *\n+ * @author lprimak\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ2NTEwNw==", "bodyText": "I feel this deserves a explaining comment as it looks to me you try to address an issue here - was there one? which?", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532465107", "createdAt": "2020-11-30T09:47:01Z", "author": {"login": "jbee"}, "path": "appserver/web/weld-integration/src/main/java/org/glassfish/cdi/transaction/TransactionScopedCDIUtil.java", "diffHunk": "@@ -219,7 +219,7 @@ public BeanWrapper(Class<?> beanClass) {\n             catch(MultiException e) {\n                 log(e.getMessage());\n             }\n-            this.ctxUtil = ctxUtil;\n+            this.ctxUtil = ctxUtil.map(JavaEEContextUtil::currentInvocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ2NjYwMw==", "bodyText": "I'm confused - this extends the new API but this API is \"internal\" while the other is not. Isn't that backwards?", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532466603", "createdAt": "2020-11-30T09:49:17Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/org/glassfish/internal/api/JavaEEContextUtil.java", "diffHunk": "@@ -47,68 +48,21 @@\n  * @author lprimak\n  */\n @Contract\n-public interface JavaEEContextUtil {\n-    /**\n-     * pushes Java EE invocation context onto the invocation stack\n-     * use try-with-resources to pop the context\n-     *\n-     * @return the new context that was created\n-     */\n-    Context pushContext();\n+public interface JavaEEContextUtil extends ContextProducer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ2NzQxMA==", "bodyText": "field order...", "url": "https://github.com/payara/Payara/pull/5010#discussion_r532467410", "createdAt": "2020-11-30T09:50:21Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/PayaraHazelcastSerializer.java", "diffHunk": "@@ -44,15 +44,24 @@\n import com.hazelcast.nio.ObjectDataInput;\n import com.hazelcast.nio.ObjectDataOutput;\n import com.hazelcast.nio.serialization.StreamSerializer;\n+import com.sun.enterprise.util.ExceptionUtil;\n import java.io.IOException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n import org.glassfish.internal.api.JavaEEContextUtil.Context;\n+import org.glassfish.internal.api.JavaEEContextUtil.Instance;\n \n /**\n  *\n  * @author lprimak\n  * @since 4.1.2.173\n  */\n public class PayaraHazelcastSerializer implements StreamSerializer<Object> {\n+    private final JavaEEContextUtil ctxUtil;\n+    private final StreamSerializer<Object> delegate;\n+    private static final Logger log = Logger.getLogger(PayaraHazelcastSerializer.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f24ea13ca1044c3b97fa30ae7c05b73d7973b11"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4993faf76c122c4ff03d025ccb0781ce71025a4a", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/4993faf76c122c4ff03d025ccb0781ce71025a4a", "committedDate": "2020-11-30T15:50:02Z", "message": "field order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcde05e86caeab6c1ffc2e45b333824ba005f734", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/bcde05e86caeab6c1ffc2e45b333824ba005f734", "committedDate": "2020-11-30T16:47:57Z", "message": "removed public context API since it was such a hot-button issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "034db30aa16ac8d704c347a81fbd214e312b4c59", "author": {"user": {"login": "lprimak", "name": "Lenny Primak"}}, "url": "https://github.com/payara/Payara/commit/034db30aa16ac8d704c347a81fbd214e312b4c59", "committedDate": "2020-11-30T17:16:14Z", "message": "fixed compile error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MTEyMjE0", "url": "https://github.com/payara/Payara/pull/5010#pullrequestreview-544112214", "createdAt": "2020-12-03T15:57:57Z", "commit": {"oid": "034db30aa16ac8d704c347a81fbd214e312b4c59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MTQ5MzIz", "url": "https://github.com/payara/Payara/pull/5010#pullrequestreview-544149323", "createdAt": "2020-12-03T16:33:44Z", "commit": {"oid": "034db30aa16ac8d704c347a81fbd214e312b4c59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 629, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}