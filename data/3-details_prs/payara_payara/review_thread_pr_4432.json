{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTUzMzkx", "number": 4432, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo0MDo1MlrODa2Qzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo0MDo1MlrODa2Qzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDc4NjA3OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/test/java/org/glassfish/internal/deployment/GetApplicationNameTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo0MDo1MlrOFh_25g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo0MDo1MlrOFh_25g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5MzU3NA==", "bodyText": "I feel like a assertSomething helper method should be extended and used by each of the 3 test methods which should make them more readable in the the way: this input has that expected output. It should also become clear why only this test needs mockup of the readableArchive.getName().", "url": "https://github.com/payara/Payara/pull/4432#discussion_r371193574", "createdAt": "2020-01-27T11:40:52Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/test/java/org/glassfish/internal/deployment/GetApplicationNameTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.internal.deployment;\n+\n+import java.io.IOException;\n+import org.glassfish.api.deployment.DeploymentContext;\n+import org.glassfish.api.deployment.archive.ReadableArchive;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ *\n+ * @author Susan Rai\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class GetApplicationNameTest {\n+\n+    private static final String USER_PROVIDED_APP_NAME = \"originalAppName\";\n+    //Mocks application name from reading the standard deployment descriptor.\n+    private static final String DD_APP_NAME = \"DDAppName\";\n+    private static final String DEFAULT_ARCHIVE_NAME = \"defaultArchiveName\";\n+\n+    @InjectMocks\n+    private GenericHandlerStub genericHandler = new GenericHandlerStub();\n+\n+    @Mock\n+    private ServiceLocator habitat;\n+\n+    @Mock\n+    private ApplicationInfoProvider applicationInfoProvider;\n+\n+    private ReadableArchive readableArchive;\n+\n+    @Before\n+    public void initialiseMocks() {\n+        readableArchive = mock(ReadableArchive.class);\n+        when(habitat.getService(ApplicationInfoProvider.class)).thenReturn(applicationInfoProvider);\n+    }\n+\n+    @Test\n+    public void testWhenDDHasAppName() {\n+        when(applicationInfoProvider.getNameFor(readableArchive, null)).thenReturn(DD_APP_NAME);\n+        assertEquals(DD_APP_NAME, genericHandler.getDefaultApplicationName(readableArchive, null, USER_PROVIDED_APP_NAME));\n+    }\n+\n+    @Test\n+    public void testWhenDDDoesNotHaveAppName() {\n+        when(applicationInfoProvider.getNameFor(readableArchive, null)).thenReturn(null);\n+        assertEquals(USER_PROVIDED_APP_NAME, genericHandler.getDefaultApplicationName(readableArchive, null, USER_PROVIDED_APP_NAME));\n+    }\n+\n+    @Test\n+    public void testWhenDDAppNameIsSetToDefaultArchiveName() {\n+        when(applicationInfoProvider.getNameFor(readableArchive, null)).thenReturn(DEFAULT_ARCHIVE_NAME);\n+        when(readableArchive.getName()).thenReturn(DEFAULT_ARCHIVE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c8dad83b55ede886030de68f46e8368c43278e"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1365, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}