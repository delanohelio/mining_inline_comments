{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MjQ0NDI1", "number": 4988, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo0MTowNFrOE3wj2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzowMToyNVrOE3ytJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTAyNzQ2OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo0MTowNFrOHxSlyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDozMjowMFrOHx0dzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ0Njg1Ng==", "bodyText": "Just double checking that the change from FINEST to INFO is intentional and not just from testing.", "url": "https://github.com/payara/Payara/pull/4988#discussion_r521446856", "createdAt": "2020-11-11T15:41:04Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java", "diffHunk": "@@ -121,15 +131,16 @@ public CredentialValidationResult validate(SignedJWTCredential signedJWTCredenti\n             JsonWebTokenImpl jsonWebToken\n                     = jwtTokenParser.verify(acceptedIssuer, publicKey.get());\n \n-            List<String> groups = new ArrayList<>(\n-                    jsonWebToken.getClaim(\"groups\"));\n+            Set<String> groups = new HashSet<>();\n+            Collection<String> groupClaims = jsonWebToken.getClaim(\"groups\");\n+            if (groupClaims != null) {\n+                groups.addAll(groupClaims);\n+            }\n \n-            return new CredentialValidationResult(\n-                    jsonWebToken,\n-                    new HashSet<>(groups));\n+            return new CredentialValidationResult(jsonWebToken, groups);\n \n         } catch (Exception e) {\n-            LOGGER.log(FINEST, \"Exception trying to parse JWT token.\", e);\n+            LOGGER.log(INFO, \"Exception trying to parse JWT token.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06cd75fe0ecd3ee0cf869e49068a4f8accb3c26f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2MDMxNw==", "bodyText": "I wanted to ask for feedback on this actually. I did this because I noted that whenever a request was unsuccessful it wasn't clear to me why without debugging. This said, do you think this will be a little too spammy?", "url": "https://github.com/payara/Payara/pull/4988#discussion_r521960317", "createdAt": "2020-11-12T09:28:27Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java", "diffHunk": "@@ -121,15 +131,16 @@ public CredentialValidationResult validate(SignedJWTCredential signedJWTCredenti\n             JsonWebTokenImpl jsonWebToken\n                     = jwtTokenParser.verify(acceptedIssuer, publicKey.get());\n \n-            List<String> groups = new ArrayList<>(\n-                    jsonWebToken.getClaim(\"groups\"));\n+            Set<String> groups = new HashSet<>();\n+            Collection<String> groupClaims = jsonWebToken.getClaim(\"groups\");\n+            if (groupClaims != null) {\n+                groups.addAll(groupClaims);\n+            }\n \n-            return new CredentialValidationResult(\n-                    jsonWebToken,\n-                    new HashSet<>(groups));\n+            return new CredentialValidationResult(jsonWebToken, groups);\n \n         } catch (Exception e) {\n-            LOGGER.log(FINEST, \"Exception trying to parse JWT token.\", e);\n+            LOGGER.log(INFO, \"Exception trying to parse JWT token.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ0Njg1Ng=="}, "originalCommit": {"oid": "06cd75fe0ecd3ee0cf869e49068a4f8accb3c26f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NDY1OA==", "bodyText": "I know very little about the context here - would it log with basically every request of a session that had this problem or is it more once when trying to login?", "url": "https://github.com/payara/Payara/pull/4988#discussion_r521994658", "createdAt": "2020-11-12T10:20:44Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java", "diffHunk": "@@ -121,15 +131,16 @@ public CredentialValidationResult validate(SignedJWTCredential signedJWTCredenti\n             JsonWebTokenImpl jsonWebToken\n                     = jwtTokenParser.verify(acceptedIssuer, publicKey.get());\n \n-            List<String> groups = new ArrayList<>(\n-                    jsonWebToken.getClaim(\"groups\"));\n+            Set<String> groups = new HashSet<>();\n+            Collection<String> groupClaims = jsonWebToken.getClaim(\"groups\");\n+            if (groupClaims != null) {\n+                groups.addAll(groupClaims);\n+            }\n \n-            return new CredentialValidationResult(\n-                    jsonWebToken,\n-                    new HashSet<>(groups));\n+            return new CredentialValidationResult(jsonWebToken, groups);\n \n         } catch (Exception e) {\n-            LOGGER.log(FINEST, \"Exception trying to parse JWT token.\", e);\n+            LOGGER.log(INFO, \"Exception trying to parse JWT token.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ0Njg1Ng=="}, "originalCommit": {"oid": "06cd75fe0ecd3ee0cf869e49068a4f8accb3c26f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMTg2OQ==", "bodyText": "I think that it should only trigger when a JWT Token is provided, so I don't think it's too invasive. I just thought it would be beneficial to see why a token is being rejected", "url": "https://github.com/payara/Payara/pull/4988#discussion_r522001869", "createdAt": "2020-11-12T10:32:00Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/eesecurity/SignedJWTIdentityStore.java", "diffHunk": "@@ -121,15 +131,16 @@ public CredentialValidationResult validate(SignedJWTCredential signedJWTCredenti\n             JsonWebTokenImpl jsonWebToken\n                     = jwtTokenParser.verify(acceptedIssuer, publicKey.get());\n \n-            List<String> groups = new ArrayList<>(\n-                    jsonWebToken.getClaim(\"groups\"));\n+            Set<String> groups = new HashSet<>();\n+            Collection<String> groupClaims = jsonWebToken.getClaim(\"groups\");\n+            if (groupClaims != null) {\n+                groups.addAll(groupClaims);\n+            }\n \n-            return new CredentialValidationResult(\n-                    jsonWebToken,\n-                    new HashSet<>(groups));\n+            return new CredentialValidationResult(jsonWebToken, groups);\n \n         } catch (Exception e) {\n-            LOGGER.log(FINEST, \"Exception trying to parse JWT token.\", e);\n+            LOGGER.log(INFO, \"Exception trying to parse JWT token.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ0Njg1Ng=="}, "originalCommit": {"oid": "06cd75fe0ecd3ee0cf869e49068a4f8accb3c26f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTAzNTA5OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/jaxrs/RolesAllowedRequestFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo0Mjo0OFrOHxSqiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwOTozNDo1OFrOHxyMHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ0ODA3NQ==", "bodyText": "Fairly certain you meant...\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this(request, response, null, true);\n          \n          \n            \n                    this(request, response, null, permitAll);", "url": "https://github.com/payara/Payara/pull/4988#discussion_r521448075", "createdAt": "2020-11-11T15:42:48Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/jaxrs/RolesAllowedRequestFilter.java", "diffHunk": "@@ -77,18 +77,38 @@\n     private final SecurityContext securityContext;\n \n     private final String[] rolesAllowed;\n+    private final boolean permitAll;\n+\n     private final HttpServletRequest request;\n     private final HttpServletResponse response;\n \n     RolesAllowedRequestFilter(HttpServletRequest request, HttpServletResponse response, String[] rolesAllowed) {\n+        this(request, response, rolesAllowed, false);\n+    }\n+\n+    RolesAllowedRequestFilter(HttpServletRequest request, HttpServletResponse response, boolean permitAll) {\n+        this(request, response, null, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06cd75fe0ecd3ee0cf869e49068a4f8accb3c26f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk2NDU3NA==", "bodyText": "Good spot - it was an oversight due to several refactors. I've actually removed the variable entirely, have a look and see what you think", "url": "https://github.com/payara/Payara/pull/4988#discussion_r521964574", "createdAt": "2020-11-12T09:34:58Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/jaxrs/RolesAllowedRequestFilter.java", "diffHunk": "@@ -77,18 +77,38 @@\n     private final SecurityContext securityContext;\n \n     private final String[] rolesAllowed;\n+    private final boolean permitAll;\n+\n     private final HttpServletRequest request;\n     private final HttpServletResponse response;\n \n     RolesAllowedRequestFilter(HttpServletRequest request, HttpServletResponse response, String[] rolesAllowed) {\n+        this(request, response, rolesAllowed, false);\n+    }\n+\n+    RolesAllowedRequestFilter(HttpServletRequest request, HttpServletResponse response, boolean permitAll) {\n+        this(request, response, null, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ0ODA3NQ=="}, "originalCommit": {"oid": "06cd75fe0ecd3ee0cf869e49068a4f8accb3c26f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTA0NTAxOnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/jaxrs/RolesAllowedRequestFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo0NDo1MVrOHxSwVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo0NDo1MVrOHxSwVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ0OTU1Nw==", "bodyText": "I guess XOR works but this is a logical test so I think a logic operator != is more appropriate\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert permitAll ^ rolesAllowed != null;\n          \n          \n            \n                    assert permitAll != (rolesAllowed != null);", "url": "https://github.com/payara/Payara/pull/4988#discussion_r521449557", "createdAt": "2020-11-11T15:44:51Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/jaxrs/RolesAllowedRequestFilter.java", "diffHunk": "@@ -77,18 +77,38 @@\n     private final SecurityContext securityContext;\n \n     private final String[] rolesAllowed;\n+    private final boolean permitAll;\n+\n     private final HttpServletRequest request;\n     private final HttpServletResponse response;\n \n     RolesAllowedRequestFilter(HttpServletRequest request, HttpServletResponse response, String[] rolesAllowed) {\n+        this(request, response, rolesAllowed, false);\n+    }\n+\n+    RolesAllowedRequestFilter(HttpServletRequest request, HttpServletResponse response, boolean permitAll) {\n+        this(request, response, null, true);\n+    }\n+\n+    private RolesAllowedRequestFilter(HttpServletRequest request, HttpServletResponse response, String[] rolesAllowed, boolean permitAll) {\n         this.request = request;\n         this.response = response;\n         this.rolesAllowed = rolesAllowed;\n         this.securityContext = CDI.current().select(SecurityContext.class).get();\n+        this.permitAll = permitAll;\n+        // If permitAll, roles allowed should be null. Otherwise roles allowed should not be null\n+        assert permitAll ^ rolesAllowed != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06cd75fe0ecd3ee0cf869e49068a4f8accb3c26f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTM3ODk1OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/jwt/JWTInjectableType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzowMToyNVrOHxWB1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzowMToyNVrOHxWB1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUwMzE5MA==", "bodyText": "I see that file already contain Class comparison using equals.\nAs it is not reasonable to have two equal instances of a Class unless they are in fact identical I would generally suggest to not shy away from using the == and != operators when working with Classes.", "url": "https://github.com/payara/Payara/pull/4988#discussion_r521503190", "createdAt": "2020-11-11T17:01:25Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/jwt-auth/src/main/java/fish/payara/microprofile/jwtauth/jwt/JWTInjectableType.java", "diffHunk": "@@ -148,8 +148,7 @@ private void installCoreConverter() {\n         } else if (coreClass.equals(Long.class)) {\n             converter = e -> ((JsonNumber) e).longValue();\n         } else if (coreClass.equals(Boolean.class)) {\n-            // TODO\n-            converter = e -> e;\n+            converter = e -> convertToBoolean(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06cd75fe0ecd3ee0cf869e49068a4f8accb3c26f"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1162, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}