{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDAzNDA1", "number": 4493, "title": "APPSERV-36 Extracts Monitoring Console to its own Repository", "bodyText": "Summary\nThree modules got extracted:\n\nMC API: Contains interfaces that make data and watch collection possible. It is implemented by a couple of classes (services) in the server; the modules of those are directly dependent on the API module\nMC Implementation: Contains the processing of data and watch collection and alert evaluation. A \"adapter\" module in the server has this as runtime dependency where the implementation is connected via API using Java service loader.\nMC Webapp: Contains the web application. As this is still deployed from commands the server packaging includes this as a build dependency.\n\nThere is one module left in the server that does the bootstrapping of the monitoring console by using its API. This module is not included in e.g. micro when monitoring should not be included.\nSo in summary a server that does not include monitoring console does only have to include the MC API module. A server that does include it includes all 3 MC modules and the bootstrapping module in the server. From the point of the server those 3 MC modules are external dependencies like any other library is. As such they are referenced by non snapshot versions which are configured via 3 new maven properties in the main pom.xml.\nCorresponding PR in new repository is payara/monitoring-console#1\nNotes for the Reviewer\n\nThe API dependency is added to all module that share metrics. While this make for more work this is cleaner in terms of the OSGi dependency graph.\n\n<dependency>\n  <groupId>fish.payara.monitoring-console</groupId>\n  <artifactId>monitoring-console-api</artifactId>\n</dependency>\n\n(almost) all removed files are moved to monitoring-console repository payara/monitoring-console#1\nMonitoringConsoleRuntimeImpl is the service bootstrapped on startup. It implements the low level grunt work for as requested by the API. In its post construction initialisation it uses the MonitoringConsoleFactory of the API to also bootstrap the MonitoringConsole instance that is the control abstraction for the \"engine\" of monitoring console.\nthe process and webapp modules are runtime dependencies of the server that includes the monitoring console wherefore those are included by the packager\nas there was no central module that also depended on API for CountStatistic or RangeStatistic those now are registered by the modules that rely on them being registered.\n\nSpecial Note on Bootstrapping\nDue to changes in how modules are composed as server the old bootstrapping did no longer trigger creation of the MonitoringConsoleRuntimeImpl which is a @Service. This is most likely to be expected behaviour as no other part of the server needs this service so it is never created by HK2.\nTo work around this the class now implements the ApplicationLifecycleInterceptor @Contract which is resolved via getAllServices(ApplicationLifecycleInterceptor.class) at some point during server bootstrapping causing the creation of the MonitoringConsoleRuntimeImpl service.\nAs this is probably too early it uses the Events and registers itself as a EventListener to wait with the actual bootstrapping of the console until the SERVER_READY event is received.\nTesting\nBuild and start the server.\nCheck:\n\nMC can be started via command\nMC shows data\nMC can be disabled by disabling the server's monitoring service\nMC request tracing detail data is available when enabling RT\nMC custom watches can be created and remain after restart of the server\nMC shows data from other instances\n\nBuild and start Payara Micro. Check no problems due to missing dependencies occur during startup.", "createdAt": "2020-02-14T14:02:12Z", "url": "https://github.com/payara/Payara/pull/4493", "merged": true, "mergeCommit": {"oid": "398c78f153de13ac61452ed628dab34f9659fcec"}, "closed": true, "closedAt": "2020-02-21T19:44:06Z", "author": {"login": "jbee"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAo5kfAH2gAyMzc1NDAzNDA1OjZlMjM4YjE3NDk3ZTBjMjEyN2MzOWM1NTRkZWEzYzFlZjBlMmJhNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGhsg7gH2gAyMzc1NDAzNDA1OmVlN2Q0OGVhNDIxOTcwMjI3NDdkYjlmZmRhNjNjN2FkMjIwYmY4MzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6e238b17497e0c2127c39c554dea3c1ef0e2ba44", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/6e238b17497e0c2127c39c554dea3c1ef0e2ba44", "committedDate": "2020-02-03T08:45:10Z", "message": "APPSERV-36 extract API (incomplete)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d79fc8dedfc41bc20ad7901b72c6cbcc20ea1efa", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/d79fc8dedfc41bc20ad7901b72c6cbcc20ea1efa", "committedDate": "2020-02-10T11:00:26Z", "message": "Merge branch 'master' into APPSERV-36-top-level-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8736b667af9f4a228df1f4354e6794754ab2739e", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/8736b667af9f4a228df1f4354e6794754ab2739e", "committedDate": "2020-02-14T13:44:11Z", "message": "APPSERV-36 extracted monitoring console"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ef0b5c5a27ae27a4d7509e99ed85031379fb12a", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/9ef0b5c5a27ae27a4d7509e99ed85031379fb12a", "committedDate": "2020-02-19T09:51:18Z", "message": "APPSERV-36 removed unused method(s)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/fd0c847f51893d60ca2b99559dbf56dbe8518e01", "committedDate": "2020-02-20T11:02:57Z", "message": "APPSERV-36 fixes automatic startup and monitoring data message exchange classloader issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNTQ3NTk1", "url": "https://github.com/payara/Payara/pull/4493#pullrequestreview-362547595", "createdAt": "2020-02-21T10:51:47Z", "commit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo1MTo0OFrOFszCUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMToxMjoxN1rOFszkvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNzg0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <version>1.0-SNAPSHOT</version>\n          \n      \n    \n    \n  \n\nPresumably isn't needed due to dependency management", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382517840", "createdAt": "2020-02-21T10:51:48Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/pom.xml", "diffHunk": "@@ -85,6 +85,11 @@\n             <artifactId>requesttracing-core</artifactId>\n             <version>${project.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>fish.payara.monitoring-console</groupId>\n+            <artifactId>api</artifactId>\n+            <version>1.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNzkzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <version>1.0-SNAPSHOT</version>\n          \n      \n    \n    \n  \n\nPresumably isn't needed due to dependencyManagement.", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382517931", "createdAt": "2020-02-21T10:52:01Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/pom.xml", "diffHunk": "@@ -108,5 +108,10 @@\n             <groupId>jakarta.platform</groupId>\n             <artifactId>jakarta.jakartaee-api</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>fish.payara.monitoring-console</groupId>\n+            <artifactId>api</artifactId>\n+            <version>1.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxOTEzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    </dependencies>\n          \n          \n            \n                </dependencies>\n          \n      \n    \n    \n  \n\n\ud83e\udd14", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382519139", "createdAt": "2020-02-21T10:54:38Z", "author": {"login": "Pandrex247"}, "path": "nucleus/common/internal-api/pom.xml", "diffHunk": "@@ -145,5 +145,5 @@\n             <version>${mockito.version}</version>\n             <scope>test</scope>\n         </dependency>\n-    </dependencies>\n+        </dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMDA1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    <monitoring-console-process.version>1.0-SNAPSHOT</monitoring-console-process.version>\n          \n          \n            \n                    <monitoring-console-process.version>1.0</monitoring-console-process.version>\n          \n      \n    \n    \n  \n\nPresumably this should be 1.0?", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382520050", "createdAt": "2020-02-21T10:56:30Z", "author": {"login": "Pandrex247"}, "path": "pom.xml", "diffHunk": "@@ -205,6 +205,9 @@\n         <concurrent-api.version>1.1.2</concurrent-api.version>\n         <concurrent.version>1.0.payara-p2</concurrent.version>\n         <asm.version>7.2</asm.version>\n+        <monitoring-console-api.version>1.0</monitoring-console-api.version>\n+        <monitoring-console-process.version>1.0-SNAPSHOT</monitoring-console-process.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMDEyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    <monitoring-console-webapp.version>1.0-SNAPSHOT</monitoring-console-webapp.version>\n          \n          \n            \n                    <monitoring-console-webapp.version>1.0</monitoring-console-webapp.version>\n          \n      \n    \n    \n  \n\nDitto", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382520129", "createdAt": "2020-02-21T10:56:41Z", "author": {"login": "Pandrex247"}, "path": "pom.xml", "diffHunk": "@@ -205,6 +205,9 @@\n         <concurrent-api.version>1.1.2</concurrent-api.version>\n         <concurrent.version>1.0.payara-p2</concurrent.version>\n         <asm.version>7.2</asm.version>\n+        <monitoring-console-api.version>1.0</monitoring-console-api.version>\n+        <monitoring-console-process.version>1.0-SNAPSHOT</monitoring-console-process.version>\n+        <monitoring-console-webapp.version>1.0-SNAPSHOT</monitoring-console-webapp.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNjY1NQ==", "bodyText": "Am I understanding this correctly? It seems off to me.\nSo if Hazelcast isn't enabled, despite an instance for example being called \"Insty1\", it will go to the MonitoringConsoleFactory and eventually get given an InMemorySeriesRepository which registers the instance name as server and adds that name to its set of instances.\nIs that correct? I haven't dug deep down into the guts but an instance registering itself with an incorrect name perked an eyebrow \ud83e\udd14", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382526655", "createdAt": "2020-02-21T11:12:17Z", "author": {"login": "Pandrex247"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/runtime/MonitoringConsoleRuntimeImpl.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.monitoring.runtime;\n+\n+import static java.lang.Boolean.parseBoolean;\n+import static java.util.Collections.emptyList;\n+import static org.jvnet.hk2.config.Dom.unwrap;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.glassfish.api.ActionReport;\n+import org.glassfish.api.admin.CommandRunner;\n+import org.glassfish.api.admin.CommandRunner.CommandInvocation;\n+import org.glassfish.api.admin.ParameterMap;\n+import org.glassfish.api.admin.ServerEnvironment;\n+import org.glassfish.api.event.EventListener;\n+import org.glassfish.api.event.EventTypes;\n+import org.glassfish.api.event.Events;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.glassfish.internal.api.InternalSystemAdministrator;\n+import org.glassfish.internal.deployment.ApplicationLifecycleInterceptor;\n+import org.glassfish.internal.deployment.ExtendedDeploymentContext;\n+import org.glassfish.internal.deployment.ExtendedDeploymentContext.Phase;\n+import org.jvnet.hk2.annotations.Service;\n+import org.jvnet.hk2.config.ConfigBeanProxy;\n+import org.jvnet.hk2.config.ConfigListener;\n+import org.jvnet.hk2.config.UnprocessedChangeEvents;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.ITopic;\n+import com.sun.enterprise.config.serverbeans.Config;\n+import com.sun.enterprise.config.serverbeans.Domain;\n+import com.sun.enterprise.config.serverbeans.MonitoringService;\n+\n+import fish.payara.monitoring.adapt.GroupData;\n+import fish.payara.monitoring.adapt.GroupDataRepository;\n+import fish.payara.monitoring.adapt.MonitoringConsole;\n+import fish.payara.monitoring.adapt.MonitoringConsoleFactory;\n+import fish.payara.monitoring.adapt.MonitoringConsoleRuntime;\n+import fish.payara.monitoring.adapt.MonitoringConsoleWatchConfig;\n+import fish.payara.monitoring.collect.MonitoringDataSource;\n+import fish.payara.monitoring.collect.MonitoringWatchSource;\n+import fish.payara.monitoring.configuration.MonitoringConsoleConfiguration;\n+import fish.payara.notification.requesttracing.RequestTrace;\n+import fish.payara.notification.requesttracing.RequestTraceSpan;\n+import fish.payara.nucleus.executorservice.PayaraExecutorService;\n+import fish.payara.nucleus.hazelcast.HazelcastCore;\n+import fish.payara.nucleus.requesttracing.RequestTracingService;\n+\n+/**\n+ * This implementation of the {@link MonitoringConsoleRuntime} connects the Payara independent parts of the monitoring\n+ * console with the Payara server.\n+ * \n+ * The most complicated aspect about the implementation is the way it is bootstrapped. By implementing\n+ * {@link ApplicationLifecycleInterceptor} it forces the creation of an instance of this {@link Service} even though it\n+ * is not otherwise referenced within the HK2 context. As this happens fairly early in the bootstrapping it then\n+ * registers itself as an {@link EventListener} so that it can run its actual {@link #init()} bootstrapping as soon as\n+ * the {@link EventTypes#SERVER_READY} is received. This makes sure the bootstrapping of the console runtime does not\n+ * alter the order of services created by starting to collect data from services that implement\n+ * {@link MonitoringDataSource} or {@link MonitoringWatchSource}.\n+ * \n+ * @author Jan Bernitt\n+ * @since 5.201\n+ */\n+@Service\n+public class MonitoringConsoleRuntimeImpl\n+        implements ConfigListener, ApplicationLifecycleInterceptor, EventListener,\n+        MonitoringConsoleRuntime, MonitoringConsoleWatchConfig, GroupDataRepository {\n+\n+    private static final Logger LOGGER = Logger.getLogger(\"monitoring-console-core\");\n+\n+    private static final String SET_MONITORING_CONSOLE_CONFIGURATION_COMMAND = \"set-monitoring-console-configuration\";\n+\n+    /**\n+     * The topic name used to share data of instances with the DAS.\n+     */\n+    private static final String MONITORING_DATA_TOPIC_NAME = \"payara-monitoring-data\";\n+\n+    @Inject\n+    private PayaraExecutorService executor;\n+    @Inject\n+    private ServerEnvironment serverEnv;\n+    @Inject @Named(ServerEnvironment.DEFAULT_INSTANCE_NAME)\n+    private Config serverConfig;\n+    @Inject\n+    private Domain domain;\n+    @Inject\n+    private CommandRunner commandRunner;\n+    @Inject\n+    private InternalSystemAdministrator kernelIdentity;\n+    @Inject\n+    private HazelcastCore hazelcastCore;\n+    @Inject\n+    private RequestTracingService requestTracingService;\n+    @Inject\n+    private ServiceLocator serviceLocator;\n+    @Inject\n+    private Events events;\n+\n+    private final AtomicBoolean initialised = new AtomicBoolean();\n+    private ITopic<byte[]> exchange;\n+    private MonitoringConsoleConfiguration config;\n+    private MonitoringConsole console;\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        events.register(this);\n+    }\n+\n+    @Override\n+    public void event(Event<?> event) {\n+        if (event.is(EventTypes.SERVER_READY)) {\n+            init();\n+        }\n+    }\n+\n+    public void init() {\n+        if (!initialised.compareAndSet(false, true) ) {\n+            return;\n+        }\n+        try {\n+            LOGGER.info(\"Bootstrapping Monitoring Console Runtime\");\n+            boolean isDas = serverEnv.isDas();\n+            config = domain.getExtensionByType(MonitoringConsoleConfiguration.class);\n+            String instanceName = \"server\"; // default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 177}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e26a3113f544a8f8bac0900b485f9afe3b10cc8", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/0e26a3113f544a8f8bac0900b485f9afe3b10cc8", "committedDate": "2020-02-21T11:17:15Z", "message": "Update appserver/payara-appserver-modules/microprofile/fault-tolerance/pom.xml\n\nCo-Authored-By: Andrew Pielage <pandrex247@hotmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4ae90a91c1d062c9775777c66a99252136fb03a", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/e4ae90a91c1d062c9775777c66a99252136fb03a", "committedDate": "2020-02-21T11:18:18Z", "message": "Update appserver/payara-appserver-modules/microprofile/metrics/pom.xml\n\nCo-Authored-By: Andrew Pielage <pandrex247@hotmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c55f8339392e9fefdeead19a49ab8e3b6a4c8d3", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/4c55f8339392e9fefdeead19a49ab8e3b6a4c8d3", "committedDate": "2020-02-21T11:18:33Z", "message": "Update nucleus/common/internal-api/pom.xml\n\nCo-Authored-By: Andrew Pielage <pandrex247@hotmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46d556d333313ff3e11a649c03a06480ecceaae9", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/46d556d333313ff3e11a649c03a06480ecceaae9", "committedDate": "2020-02-21T11:19:01Z", "message": "Update pom.xml\n\nCo-Authored-By: Andrew Pielage <pandrex247@hotmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0553861db058bace3cdff39e89c9250fe5ca49e", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/c0553861db058bace3cdff39e89c9250fe5ca49e", "committedDate": "2020-02-21T11:27:15Z", "message": "Merge branch 'master' into APPSERV-36-top-level-repo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba812fefebae7da141d1fa0961eb28f4d425c533", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/ba812fefebae7da141d1fa0961eb28f4d425c533", "committedDate": "2020-02-21T12:00:05Z", "message": "APPSERV-36 fixes wrong dependecy for MC api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b89960c30fc29aa892bb19267f0520482aa3b1f", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/1b89960c30fc29aa892bb19267f0520482aa3b1f", "committedDate": "2020-02-21T12:18:31Z", "message": "APPSERV-36 extracts the instance name from ServerEnvironment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNTk2MTA4", "url": "https://github.com/payara/Payara/pull/4493#pullrequestreview-362596108", "createdAt": "2020-02-21T12:28:48Z", "commit": {"oid": "1b89960c30fc29aa892bb19267f0520482aa3b1f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f5cb070906d4dcc53d8db25ab91c86878c06756", "author": {"user": {"login": "MarkWareham", "name": "Mark Wareham"}}, "url": "https://github.com/payara/Payara/commit/7f5cb070906d4dcc53d8db25ab91c86878c06756", "committedDate": "2020-02-21T15:41:24Z", "message": "APPSERV-36. Grant access to payara-staging for builds to access deployed monitoring console"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee7d48ea42197022747db9ffda63c7ad220bf834", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/ee7d48ea42197022747db9ffda63c7ad220bf834", "committedDate": "2020-02-21T15:45:07Z", "message": "Merge pull request #4 from MarkWareham/use-payara-staging\n\nUse payara staging"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 874, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}