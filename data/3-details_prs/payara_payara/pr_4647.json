{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMTU0MzE5", "number": 4647, "title": "APPSERV-157 preInvoke/postInvoke ComponentInvocation logging", "bodyText": "Summary\nStrictly it would be correct to assume that the ComponentInocation passed to preInvoke should be the same as the one passed to postInvoke. This however is difficult to do in some cases (see #4646). Relaxing expectations equal is also problematic as WebComponentInocation#equal would need to change. To avoid introducing new issues WebComponentInocations will be excluded from the logging. This needs to be done matching the class name as string as the module making the check cannot become dependent on the module defining that class. I figured that checking the simple class name is sufficient here.\nI also improved the formatting of the log message and added the strack trace as it is important to find where the inconsistent call is coming from.\nAfter revisiting this and with the greater insight gained over time spent looking at the invocation manager I also decided to use the current instance from internal stack (that is the ComponentInvocation passed to preInvoke) for the postInvoke to the listeners.\nThe implementation did that in 3/4 of calls before and I replaced that with the argument passed to postInvoke, that was used 1/4 as back then I felt this would be more consistent with preInvoke. But now I think that \"more consistent\" means passing the instanced passed to preInvoke also to postInvoke listeners as originally done for 3/4 of listener notifications.\nTesting\n\nstart server\nopen admin-gui\ncheck that no warning has been logged (related to ComponentInocation)", "createdAt": "2020-05-01T14:33:59Z", "url": "https://github.com/payara/Payara/pull/4647", "merged": true, "mergeCommit": {"oid": "d480d59f4f5df331fbdb9650496b85bd5331f80d"}, "closed": true, "closedAt": "2020-05-05T07:52:14Z", "author": {"login": "jbee"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdCe22AH2gAyNDEyMTU0MzE5OmNlZTI3ZDIzZTA1ODg0ZWViOTg3MDcxY2ExYjcxYmQyYjQ4NWM5ZDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd9-y2gFqTQwNDkxMDg3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cee27d23e05884eeb987071ca1b71bd2b485c9d8", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/cee27d23e05884eeb987071ca1b71bd2b485c9d8", "committedDate": "2020-05-01T14:23:24Z", "message": "APPSERV-157 relaxed expectation of pre and post ComponentInvcation being equal instead of identical; improved log message format and added stack trace to it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dca22e8bd2202939a9fe5fa0b84cb5bcbe7fc192", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/dca22e8bd2202939a9fe5fa0b84cb5bcbe7fc192", "committedDate": "2020-05-01T14:33:01Z", "message": "APPSERV-157 also override hashCode for consistency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjQ1OTYy", "url": "https://github.com/payara/Payara/pull/4647#pullrequestreview-404645962", "createdAt": "2020-05-03T18:41:35Z", "commit": {"oid": "dca22e8bd2202939a9fe5fa0b84cb5bcbe7fc192"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxODo0MTozNlrOGPub1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxODo0MTozNlrOGPub1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0MjYxNQ==", "bodyText": "How about using Objects.hash(container, instance)?", "url": "https://github.com/payara/Payara/pull/4647#discussion_r419142615", "createdAt": "2020-05-03T18:41:36Z", "author": {"login": "svendiedrichsen"}, "path": "appserver/web/web-glue/src/main/java/com/sun/enterprise/web/WebComponentInvocation.java", "diffHunk": "@@ -160,4 +160,18 @@ public boolean equals(Object obj) {\n             return eq;\n         }\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return instance == null ? container.hashCode() : container.hashCode() ^ instance.hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca22e8bd2202939a9fe5fa0b84cb5bcbe7fc192"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NzY4ODcz", "url": "https://github.com/payara/Payara/pull/4647#pullrequestreview-404768873", "createdAt": "2020-05-04T07:48:38Z", "commit": {"oid": "dca22e8bd2202939a9fe5fa0b84cb5bcbe7fc192"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzo0ODozOFrOGP1xmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODowMzowMlrOGP2Mwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2Mjg3Mg==", "bodyText": "I don't like mixing OR and AND operators. AND has higher priority than OR, but then the a.equals(b) will be executed ONLY IF a.getClass() == b.getClass() is true and object a is not b. But then it all can be simplified to\na.equals(b)\nBut then it smells ... so I am going back to equals of those ComponentInvocation implementations....", "url": "https://github.com/payara/Payara/pull/4647#discussion_r419262872", "createdAt": "2020-05-04T07:48:38Z", "author": {"login": "dmatej"}, "path": "nucleus/common/glassfish-api/src/main/java/org/glassfish/api/invocation/InvocationManagerImpl.java", "diffHunk": "@@ -206,6 +206,10 @@ public void setThreadInheritableInvocation(List<? extends ComponentInvocation> p\n         }\n     }\n \n+    private static boolean isEqual(ComponentInvocation a, ComponentInvocation b) {\n+        return a == b || a.getClass() == b.getClass() && a.equals(b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca22e8bd2202939a9fe5fa0b84cb5bcbe7fc192"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2NDE3Mw==", "bodyText": "Maybe instead of printing unlimited stacktrace to a single line I would rather do two logs:\nLOGGER.log(WARNING, ... message with two arguments)\nLOGGER.log(FINE, \"Stacktrace\", new IllegalStateException(\"This exception is not thrown, it is only to trace the invocation\"));", "url": "https://github.com/payara/Payara/pull/4647#discussion_r419264173", "createdAt": "2020-05-04T07:51:23Z", "author": {"login": "dmatej"}, "path": "nucleus/common/glassfish-api/src/main/java/org/glassfish/api/invocation/InvocationManagerImpl.java", "diffHunk": "@@ -178,9 +178,9 @@ public void setThreadInheritableInvocation(List<? extends ComponentInvocation> p\n         }\n \n         ComponentInvocation current = iter.next(); // the last is the current is \"invocation\"\n-        if (invocation != current) {\n-            LOGGER.log(WARNING, \"postInvoke not called with top of the invocation stack. Expected {0} but was: {1}\",\n-                    new Object[] { current, invocation });\n+        if (!isEqual(invocation, current)) {\n+            LOGGER.log(WARNING, \"postInvoke not called with top of the invocation stack. Expected:\\n{0}\\nbut was:\\n{1}\\nfor caller:\\n{2}\",\n+                    new Object[] { current, invocation, Arrays.toString(Thread.currentThread().getStackTrace()) });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca22e8bd2202939a9fe5fa0b84cb5bcbe7fc192"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2NDgyNQ==", "bodyText": "Also that Arrays.toString will be executed even if you would set logger's level to sever or off.", "url": "https://github.com/payara/Payara/pull/4647#discussion_r419264825", "createdAt": "2020-05-04T07:52:38Z", "author": {"login": "dmatej"}, "path": "nucleus/common/glassfish-api/src/main/java/org/glassfish/api/invocation/InvocationManagerImpl.java", "diffHunk": "@@ -178,9 +178,9 @@ public void setThreadInheritableInvocation(List<? extends ComponentInvocation> p\n         }\n \n         ComponentInvocation current = iter.next(); // the last is the current is \"invocation\"\n-        if (invocation != current) {\n-            LOGGER.log(WARNING, \"postInvoke not called with top of the invocation stack. Expected {0} but was: {1}\",\n-                    new Object[] { current, invocation });\n+        if (!isEqual(invocation, current)) {\n+            LOGGER.log(WARNING, \"postInvoke not called with top of the invocation stack. Expected:\\n{0}\\nbut was:\\n{1}\\nfor caller:\\n{2}\",\n+                    new Object[] { current, invocation, Arrays.toString(Thread.currentThread().getStackTrace()) });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2NDE3Mw=="}, "originalCommit": {"oid": "dca22e8bd2202939a9fe5fa0b84cb5bcbe7fc192"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2OTgyNg==", "bodyText": "So I am back here (see comments down there) ...\nWe have two implementations of this class\n\nWebComponentInvocation - now you say two invocations are equal if they are done in same container and same instance. Are you sure it is alright?\nEjbInvocation - this uses Object.equals, so two invocations are equals if they are same one invocation\n\nThese all and even more are events ...", "url": "https://github.com/payara/Payara/pull/4647#discussion_r419269826", "createdAt": "2020-05-04T08:03:02Z", "author": {"login": "dmatej"}, "path": "appserver/web/web-glue/src/main/java/com/sun/enterprise/web/WebComponentInvocation.java", "diffHunk": "@@ -160,4 +160,18 @@ public boolean equals(Object obj) {\n             return eq;\n         }\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return instance == null ? container.hashCode() : container.hashCode() ^ instance.hashCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0MjYxNQ=="}, "originalCommit": {"oid": "dca22e8bd2202939a9fe5fa0b84cb5bcbe7fc192"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "844fbd00498a8792ca935de5bdbcb965c31efc66", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/844fbd00498a8792ca935de5bdbcb965c31efc66", "committedDate": "2020-05-04T08:38:11Z", "message": "APPSERV-157 addresses review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b359a67565c5262fdebefc8eeb84c7242b55d26c", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/b359a67565c5262fdebefc8eeb84c7242b55d26c", "committedDate": "2020-05-04T10:37:21Z", "message": "APPSERV-157 exlude WebComponentInvocation, otherwise expect =="}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTEwODcw", "url": "https://github.com/payara/Payara/pull/4647#pullrequestreview-404910870", "createdAt": "2020-05-04T11:42:41Z", "commit": {"oid": "b359a67565c5262fdebefc8eeb84c7242b55d26c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 816, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}