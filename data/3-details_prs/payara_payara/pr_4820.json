{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTU5ODU4", "number": 4820, "title": "FISH-244 FISH-53 Trace calls from EJB clients", "bodyText": "Description\nThis is a feature.\nAdds SpanContext propagation to EJB clients, and additionally fixes a number of bugs with request tracing.\nI've also added the opentracing-api as a provided dependency in a number of places to help IDEs resolve the opentracing classes since they can't figure it out from the repackaged jar we use.\nImportant Info\nThe change to ending traces is to no longer have a firm dependency on manually having to call the endTrace method of RequestTracingService. It should now check if the trace being ended is the root span (the starting span on the current thread) and finish the trace if it matches.\nThe changes to baggage items is due to another read of the OpenTracing spec, which states that baggage items should propagate down to all new child spans, not merely be span specific.\nThe change to Scope no longer keeping track of all spans comes from a re-read of the OpenTracing spec, which states a Scope is meant to track the activeSpan. It was also ignoring the finishOnClose option, and closing all spans rather than just the active one.\nWe also randomly a) had the wrong opentracing version specified in the pom and b) had it twice\nBlockers\nNone\nTesting\nNew tests\nNew test added to Payara Samples, under samples/remote-ejb-tracing.\nThe test currently is written only for use with the payara-server-remote profile.\nIt does not rely on request tracing being enabled, but could be extended to do so with some sort of log scraper to check the traces are as expected.\nTesting Performed\nNew test ran using payara-server-remote profile, with and without request tracing enabled.\nWhen running with request tracing enabled, the configuration used was traces exceeding 500ms being sent to the log notifier.\nIf running the test via Maven, you need to provide the payara.home system property.\nThe test currently assumes the domain is running on default ports for the EJB lookup.\nA user should see 4 traces like this:\n[#|2020-08-06T18:10:04.699+0100|INFO|Payara 5.2020.4-SNAPSHOT|fish.payara.nucleus.notification.log.LogNotifierService|_ThreadID=248;_ThreadName=orb-thread-pool-1 (pool #1): worker-1;_TimeMillis=1596733804699;_LevelValue=800;|\n  Request execution time: 2178(ms) exceeded the acceptable threshold - {\"traceSpans\":[\n{\"operationName\":\"rmi\",\"spanContext\":{\"spanId\":\"8862f90e-1646-4abe-a255-6419cca42b2d\",\"traceId\":\"3262db55-95af-4d9d-8785-94500f5e0f67\"},\"startTime\":\"2020-08-06T18:10:02.517+01:00[Europe/London]\",\"endTime\":\"2020-08-06T18:10:04.695+01:00[Europe/London]\",\"traceDuration\":\"2178000000\",\"spanTags\":[{\"component\": \"ejb\"},{\"Server\": \"server\"},{\"Domain\": \"domain1\"}],\"spanLogs\":[{\"logDetails\":[{\"logEvent\":\"jtaContextBeginEvent\"},{\"Transaction ID\":\"0000000000000009_00\"},{\"Remaining Timeout\":\"0\"}],\"logTime\":\"1596733802541\"},{\"logDetails\":[{\"logEvent\":\"enterEjbMethodEvent\"},{\"ApplicationName\":\"null\"},{\"ComponentName\":\"Ejb\"},{\"ComponentType\":\"STATELESS_SESSION_BEAN\"},{\"ModuleName\":\"remote-ejb-tracing-server\"},{\"EJBClass\":\"fish.payara.samples.remote.ejb.tracing.Ejb\"},{\"EJBMethod\":\"annotatedMethod\"},{\"CallerPrincipal\":\"ANONYMOUS\"},{\"TX-ID\":\"JavaEETransactionImpl: txId=9 nonXAResource=null jtsTx=null localTxStatus=0 syncs=[com.sun.ejb.containers.ContainerSynchronization@6cc1a9a7]\"}],\"logTime\":\"1596733802541\"}],\"references\":[{\"spanContext\":{\"spanId\":\"0521573c-ac08-4e7e-ba2f-4eb5c447073c\",\"traceId\":\"3262db55-95af-4d9d-8785-94500f5e0f67\"},\"relationshipType\":\"ChildOf\"}]},\n{\"operationName\":\"customName\",\"spanContext\":{\"spanId\":\"1a052167-9a9d-483a-a58d-d8735fdd3f02\",\"traceId\":\"3262db55-95af-4d9d-8785-94500f5e0f67\"},\"startTime\":\"2020-08-06T18:10:02.545+01:00[Europe/London]\",\"endTime\":\"2020-08-06T18:10:04.695+01:00[Europe/London]\",\"traceDuration\":\"2150000000\",\"references\":[{\"spanContext\":{\"spanId\":\"8862f90e-1646-4abe-a255-6419cca42b2d\",\"traceId\":\"3262db55-95af-4d9d-8785-94500f5e0f67\"},\"relationshipType\":\"ChildOf\"}]}\n]}|#]\n\n[#|2020-08-06T18:10:07.964+0100|INFO|Payara 5.2020.4-SNAPSHOT|fish.payara.nucleus.notification.log.LogNotifierService|_ThreadID=251;_ThreadName=orb-thread-pool-1 (pool #1): worker-4;_TimeMillis=1596733807964;_LevelValue=800;|\n  Request execution time: 3263(ms) exceeded the acceptable threshold - {\"traceSpans\":[\n{\"operationName\":\"rmi\",\"spanContext\":{\"spanId\":\"76b1ec13-e4a6-45ec-8d32-c5db40ffeedd\",\"traceId\":\"3262db55-95af-4d9d-8785-94500f5e0f67\"},\"startTime\":\"2020-08-06T18:10:04.701+01:00[Europe/London]\",\"endTime\":\"2020-08-06T18:10:07.964+01:00[Europe/London]\",\"traceDuration\":\"3263000000\",\"spanTags\":[{\"component\": \"ejb\"},{\"Server\": \"server\"},{\"Domain\": \"domain1\"}],\"spanLogs\":[{\"logDetails\":[{\"logEvent\":\"jtaContextBeginEvent\"},{\"Transaction ID\":\"000000000000000A_00\"},{\"Remaining Timeout\":\"0\"}],\"logTime\":\"1596733804702\"},{\"logDetails\":[{\"logEvent\":\"enterEjbMethodEvent\"},{\"ApplicationName\":\"null\"},{\"ComponentName\":\"Ejb\"},{\"ComponentType\":\"STATELESS_SESSION_BEAN\"},{\"ModuleName\":\"remote-ejb-tracing-server\"},{\"EJBClass\":\"fish.payara.samples.remote.ejb.tracing.Ejb\"},{\"EJBMethod\":\"nonAnnotatedMethod\"},{\"CallerPrincipal\":\"ANONYMOUS\"},{\"TX-ID\":\"JavaEETransactionImpl: txId=10 nonXAResource=null jtsTx=null localTxStatus=0 syncs=[com.sun.ejb.containers.ContainerSynchronization@b03125b]\"}],\"logTime\":\"1596733804702\"}],\"references\":[{\"spanContext\":{\"spanId\":\"0521573c-ac08-4e7e-ba2f-4eb5c447073c\",\"traceId\":\"3262db55-95af-4d9d-8785-94500f5e0f67\"},\"relationshipType\":\"ChildOf\"}]}\n]}|#]\n\n[#|2020-08-06T18:10:11.474+0100|INFO|Payara 5.2020.4-SNAPSHOT|fish.payara.nucleus.notification.log.LogNotifierService|_ThreadID=250;_ThreadName=orb-thread-pool-1 (pool #1): worker-3;_TimeMillis=1596733811474;_LevelValue=800;|\n  Request execution time: 3506(ms) exceeded the acceptable threshold - {\"traceSpans\":[\n{\"operationName\":\"rmi\",\"spanContext\":{\"spanId\":\"1ff4fc19-6d05-4732-811f-093b4391509d\",\"traceId\":\"3262db55-95af-4d9d-8785-94500f5e0f67\"},\"startTime\":\"2020-08-06T18:10:07.968+01:00[Europe/London]\",\"endTime\":\"2020-08-06T18:10:11.474+01:00[Europe/London]\",\"traceDuration\":\"3506000000\",\"spanTags\":[{\"component\": \"ejb\"},{\"Server\": \"server\"},{\"Domain\": \"domain1\"}],\"references\":[{\"spanContext\":{\"spanId\":\"0521573c-ac08-4e7e-ba2f-4eb5c447073c\",\"traceId\":\"3262db55-95af-4d9d-8785-94500f5e0f67\"},\"relationshipType\":\"ChildOf\"}]}\n]}|#]\n\n[#|2020-08-06T18:10:14.638+0100|INFO|Payara 5.2020.4-SNAPSHOT|fish.payara.nucleus.notification.log.LogNotifierService|_ThreadID=252;_ThreadName=orb-thread-pool-1 (pool #1): worker-5;_TimeMillis=1596733814638;_LevelValue=800;|\n  Request execution time: 3160(ms) exceeded the acceptable threshold - {\"traceSpans\":[\n{\"operationName\":\"rmi\",\"spanContext\":{\"spanId\":\"74fa592a-9931-416a-9b1f-67459fc1b449\",\"traceId\":\"3262db55-95af-4d9d-8785-94500f5e0f67\"},\"startTime\":\"2020-08-06T18:10:11.478+01:00[Europe/London]\",\"endTime\":\"2020-08-06T18:10:14.638+01:00[Europe/London]\",\"traceDuration\":\"3160000000\",\"spanTags\":[{\"component\": \"ejb\"},{\"Server\": \"server\"},{\"Domain\": \"domain1\"}],\"references\":[{\"spanContext\":{\"spanId\":\"0521573c-ac08-4e7e-ba2f-4eb5c447073c\",\"traceId\":\"3262db55-95af-4d9d-8785-94500f5e0f67\"},\"relationshipType\":\"ChildOf\"}]}\n]}|#]\n\nMicroProfile OpenTracing TCK was also run to ensure I hadn't broken anything there.\nTesting Environment\nWindows 10, Zulu JDK 8u262.\nDocumentation\nPending...", "createdAt": "2020-08-06T17:11:29Z", "url": "https://github.com/payara/Payara/pull/4820", "merged": true, "mergeCommit": {"oid": "d4dedb25cc880b737cd4d22ad4ffab4d550cd097"}, "closed": true, "closedAt": "2020-08-07T15:24:06Z", "author": {"login": "Pandrex247"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8OehkgH2gAyNDY0MTU5ODU4OmRhMDc1OGU2NGUxZTM1ZThkZjk1NWRjNjA5ZDFjYjVhNGE1ZjZlOGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8jhmdgH2gAyNDY0MTU5ODU4OmQ4ZDhhNjJkN2FhYTYxMmQ0MjcyMzljZGNjMTg0MmE2NWQzZWUyMWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "da0758e64e1e35e8df955dc609d1cb5a4a5f6e8e", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/da0758e64e1e35e8df955dc609d1cb5a4a5f6e8e", "committedDate": "2020-08-06T11:53:33Z", "message": "FISH-244 Add simple test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12f73589b90ab3f98cef6c0bc4a5d3fd4a60b4fc", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/12f73589b90ab3f98cef6c0bc4a5d3fd4a60b4fc", "committedDate": "2020-08-06T11:53:40Z", "message": "FISH-244 add client and server interceptors for propagating context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18284302401fdf1d6302231927e184903b884985", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/18284302401fdf1d6302231927e184903b884985", "committedDate": "2020-08-06T11:54:14Z", "message": "FISH-244 Fix span being referenced twice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e424b923072024a9d457f7004fbad7832d61d626", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/e424b923072024a9d457f7004fbad7832d61d626", "committedDate": "2020-08-06T11:54:20Z", "message": "FISH-244 Formatting and comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "412f8f058e1bb7496e994bd320f097aee6e008c2", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/412f8f058e1bb7496e994bd320f097aee6e008c2", "committedDate": "2020-08-06T11:54:26Z", "message": "FISH-244 Clean up test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e148c021274c084a693549ca504c2dbf147f97fc", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/e148c021274c084a693549ca504c2dbf147f97fc", "committedDate": "2020-08-06T12:15:07Z", "message": "FISH-244 Remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d1d6413076dbfc414e9ec0f8e5c02c0b4c638f4", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/2d1d6413076dbfc414e9ec0f8e5c02c0b4c638f4", "committedDate": "2020-08-06T17:01:35Z", "message": "FISH-244 fix failures from OpenTracing TCK"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/119ba6178c83eee4040a9b2047211a4f4ba9b2ec", "committedDate": "2020-08-07T08:06:18Z", "message": "FISH-244 Don't arbitrarily udpate versions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTY4MzQy", "url": "https://github.com/payara/Payara/pull/4820#pullrequestreview-463168342", "createdAt": "2020-08-07T09:26:08Z", "commit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToyNjowOFrOG9TBSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTo0MzoxN1rOG9TiQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNzk0Nw==", "bodyText": "Shouldn't out also be part of the try with resources block?", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466927947", "createdAt": "2020-08-07T09:26:08Z", "author": {"login": "jbee"}, "path": "appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopClientInterceptor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.ejb.opentracing;\n+\n+import fish.payara.opentracing.OpenTracingService;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.util.GlobalTracer;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.IOP.ServiceContext;\n+import org.omg.PortableInterceptor.ClientRequestInfo;\n+import org.omg.PortableInterceptor.ClientRequestInterceptor;\n+import org.omg.PortableInterceptor.ForwardRequest;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static fish.payara.ejb.opentracing.OpenTracingIiopInterceptorFactory.OPENTRACING_IIOP_ID;\n+import static fish.payara.opentracing.OpenTracingService.PAYARA_CORBA_RMI_TRACER_NAME;\n+\n+/**\n+ * IIOP Client Interceptor for propagating OpenTracing SpanContext to Payara Server.\n+ *\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n+public class OpenTracingIiopClientInterceptor extends LocalObject implements ClientRequestInterceptor {\n+\n+    private OpenTracingService openTracingService;\n+\n+    public OpenTracingIiopClientInterceptor(OpenTracingService openTracingService) {\n+        this.openTracingService = openTracingService;\n+    }\n+\n+    @Override\n+    public void send_request(ClientRequestInfo clientRequestInfo) throws ForwardRequest {\n+        if (openTracingService == null) {\n+            return;\n+        }\n+        // Register global tracer if it hasn't been already\n+        Tracer tracer = GlobalTracer.get();\n+        if (!GlobalTracer.isRegistered()) {\n+            Tracer tracerImpl = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);\n+            if (tracerImpl == null) {\n+                return;\n+            } else {\n+                GlobalTracer.register(tracerImpl);\n+            }\n+        }\n+\n+        // Check if there's an active span\n+        Span activeSpan = tracer.activeSpan();\n+        if (activeSpan == null) {\n+            // Nothing to propagate, so simply return\n+            return;\n+        }\n+\n+        // Inject active span context for propagation\n+        OpenTracingIiopTextMap textMap = new OpenTracingIiopTextMap();\n+        tracer.inject(activeSpan.context(), Format.Builtin.TEXT_MAP, textMap);\n+\n+        // Convert text map to bytes and attach to service context\n+        try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {\n+            ObjectOutputStream out = new ObjectOutputStream(bos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyOTMyNA==", "bodyText": "This and the above method basically do the same just for different types. Could be extracted.", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466929324", "createdAt": "2020-08-07T09:28:54Z", "author": {"login": "jbee"}, "path": "appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopInterceptorFactory.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.ejb.opentracing;\n+\n+import fish.payara.opentracing.OpenTracingService;\n+import org.glassfish.enterprise.iiop.api.IIOPInterceptorFactory;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+import org.omg.IOP.Codec;\n+import org.omg.PortableInterceptor.ClientRequestInterceptor;\n+import org.omg.PortableInterceptor.ORBInitInfo;\n+import org.omg.PortableInterceptor.ServerRequestInterceptor;\n+\n+import javax.inject.Singleton;\n+\n+/**\n+ * Factory for creating IIOP client and server interceptors that propagate OpenTracing SpanContext.\n+ *\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n+@Service(name = \"OpenTracingIiopInterceptorFactory\")\n+@Singleton\n+public class OpenTracingIiopInterceptorFactory implements IIOPInterceptorFactory {\n+\n+    public static final int OPENTRACING_IIOP_ID = 3226428;\n+    public static final long OPENTRACING_IIOP_SERIAL_VERSION_UID = 20200731171822L;\n+\n+\n+    private ClientRequestInterceptor clientRequestInterceptor;\n+    private ServerRequestInterceptor serverRequestInterceptor;\n+\n+    @Override\n+    public ClientRequestInterceptor createClientRequestInterceptor(ORBInitInfo info, Codec codec) {\n+        ServiceLocator staticBaseServiceLocator = Globals.getStaticBaseServiceLocator();\n+        if (clientRequestInterceptor == null) {\n+            OpenTracingService openTracingService = staticBaseServiceLocator.getService(OpenTracingService.class);\n+\n+            if (openTracingService != null) {\n+                clientRequestInterceptor = new OpenTracingIiopClientInterceptor(openTracingService);\n+            }\n+        }\n+\n+        return clientRequestInterceptor;\n+    }\n+\n+    @Override\n+    public ServerRequestInterceptor createServerRequestInterceptor(ORBInitInfo info, Codec codec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMDM3OA==", "bodyText": "Is there a reason to not do this in the constructor?", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466930378", "createdAt": "2020-08-07T09:30:46Z", "author": {"login": "jbee"}, "path": "appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.ejb.opentracing;\n+\n+import fish.payara.opentracing.OpenTracingService;\n+import io.opentracing.Scope;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.tag.Tags;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.IOP.ServiceContext;\n+import org.omg.PortableInterceptor.ForwardRequest;\n+import org.omg.PortableInterceptor.ServerRequestInfo;\n+import org.omg.PortableInterceptor.ServerRequestInterceptor;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+\n+import static fish.payara.ejb.opentracing.OpenTracingIiopInterceptorFactory.OPENTRACING_IIOP_ID;\n+import static fish.payara.opentracing.OpenTracingService.PAYARA_CORBA_RMI_TRACER_NAME;\n+\n+/**\n+ * IIOP Server Interceptor for propagating OpenTracing SpanContext to Payara Server.\n+ *\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n+public class OpenTracingIiopServerInterceptor extends LocalObject implements ServerRequestInterceptor {\n+\n+    private OpenTracingService openTracingService;\n+\n+    public OpenTracingIiopServerInterceptor(OpenTracingService openTracingService) {\n+        this.openTracingService = openTracingService;\n+    }\n+\n+    @Override\n+    public void receive_request_service_contexts(ServerRequestInfo ri) throws ForwardRequest {\n+\n+    }\n+\n+    @Override\n+    public void receive_request(ServerRequestInfo serverRequestInfo) throws ForwardRequest {\n+        if (openTracingService == null) {\n+            return;\n+        }\n+\n+        Tracer tracer = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMTMwNA==", "bodyText": "nothing happens with activeScope, seems wrong...", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466931304", "createdAt": "2020-08-07T09:32:43Z", "author": {"login": "jbee"}, "path": "appserver/ejb/ejb-opentracing/src/main/java/fish/payara/ejb/opentracing/OpenTracingIiopServerInterceptor.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.ejb.opentracing;\n+\n+import fish.payara.opentracing.OpenTracingService;\n+import io.opentracing.Scope;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.tag.Tags;\n+import org.omg.CORBA.LocalObject;\n+import org.omg.IOP.ServiceContext;\n+import org.omg.PortableInterceptor.ForwardRequest;\n+import org.omg.PortableInterceptor.ServerRequestInfo;\n+import org.omg.PortableInterceptor.ServerRequestInterceptor;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+\n+import static fish.payara.ejb.opentracing.OpenTracingIiopInterceptorFactory.OPENTRACING_IIOP_ID;\n+import static fish.payara.opentracing.OpenTracingService.PAYARA_CORBA_RMI_TRACER_NAME;\n+\n+/**\n+ * IIOP Server Interceptor for propagating OpenTracing SpanContext to Payara Server.\n+ *\n+ * @author Andrew Pielage <andrew.pielage@payara.fish>\n+ */\n+public class OpenTracingIiopServerInterceptor extends LocalObject implements ServerRequestInterceptor {\n+\n+    private OpenTracingService openTracingService;\n+\n+    public OpenTracingIiopServerInterceptor(OpenTracingService openTracingService) {\n+        this.openTracingService = openTracingService;\n+    }\n+\n+    @Override\n+    public void receive_request_service_contexts(ServerRequestInfo ri) throws ForwardRequest {\n+\n+    }\n+\n+    @Override\n+    public void receive_request(ServerRequestInfo serverRequestInfo) throws ForwardRequest {\n+        if (openTracingService == null) {\n+            return;\n+        }\n+\n+        Tracer tracer = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);\n+        if (tracer == null) {\n+            return;\n+        }\n+\n+        ServiceContext serviceContext = serverRequestInfo.get_request_service_context(OPENTRACING_IIOP_ID);\n+        if (serviceContext == null) {\n+            return;\n+        }\n+\n+        ByteArrayInputStream bis = new ByteArrayInputStream(serviceContext.context_data);\n+        OpenTracingIiopTextMap openTracingIiopTextMap = null;\n+        try (ObjectInput in = new OpenTracingIiopObjectInputStream(bis)) {\n+            openTracingIiopTextMap = (OpenTracingIiopTextMap) in.readObject();\n+        } catch (IOException | ClassNotFoundException exception) {\n+            throw new ForwardRequest(exception.getMessage(), serverRequestInfo);\n+        }\n+\n+        Tracer.SpanBuilder spanBuilder = tracer.buildSpan(\"rmi\")\n+                .withTag(Tags.COMPONENT.getKey(), \"ejb\");\n+\n+        if (openTracingIiopTextMap != null) {\n+            SpanContext spanContext = tracer.extract(Format.Builtin.TEXT_MAP, openTracingIiopTextMap);\n+\n+            // Add the propagated span as a parent\n+            spanBuilder.asChildOf(spanContext);\n+        }\n+\n+        // Start the span and mark it as active\n+        spanBuilder.startActive(true).span();\n+    }\n+\n+    @Override\n+    public void send_reply(ServerRequestInfo serverRequestInfo) {\n+        closeScope();\n+    }\n+\n+    @Override\n+    public void send_exception(ServerRequestInfo serverRequestInfo) throws ForwardRequest {\n+        closeScope();\n+    }\n+\n+    @Override\n+    public void send_other(ServerRequestInfo serverRequestInfo) throws ForwardRequest {\n+        closeScope();\n+    }\n+\n+    private void closeScope() {\n+        if (openTracingService == null) {\n+            return;\n+        }\n+        Tracer tracer = openTracingService.getTracer(PAYARA_CORBA_RMI_TRACER_NAME);\n+        if (tracer == null) {\n+            return;\n+        }\n+\n+        // Make sure active scope is closed - this is an entry point to the server so the currently active span\n+        // **should** be the one started in receive_request\n+        try (Scope activeScope = tracer.scopeManager().active()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzA2OA==", "bodyText": "Some duplication going on...", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466933068", "createdAt": "2020-08-07T09:36:24Z", "author": {"login": "jbee"}, "path": "appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.samples.remote.ejb.tracing;\n+\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.util.GlobalTracer;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import java.util.Properties;\n+\n+public class RemoteEjbClientIT {\n+\n+    @Test\n+    public void executeRemoteEjbMethodIT() {\n+        Properties contextProperties = new Properties();\n+        contextProperties.setProperty(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.enterprise.naming.SerialInitContextFactory\");\n+        contextProperties.setProperty(\"org.omg.CORBA.ORBInitialHost\", \"localhost\");\n+        contextProperties.setProperty(\"org.omg.CORBA.ORBInitialPort\", \"3700\");\n+\n+        try {\n+            Context context = new InitialContext(contextProperties);\n+            EjbRemote ejb = (EjbRemote) context.lookup(\"java:global/remote-ejb-tracing-server/Ejb\");\n+\n+            Tracer tracer = GlobalTracer.get();\n+\n+            try (Scope scope = tracer.buildSpan(\"ExecuteEjb\").startActive(true)) {\n+                Span span = scope.span();\n+                span.setBaggageItem(\"Wibbles\", \"Wobbles\");\n+                String baggageItems = ejb.annotatedMethod();\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.equals(\"\\nWibbles : Wobbles\\n\"));\n+\n+                span.setBaggageItem(\"Nibbles\", \"Nobbles\");\n+                baggageItems = ejb.nonAnnotatedMethod();\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Wibbles : Wobbles\"));\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Nibbles : Nobbles\"));\n+\n+                span.setBaggageItem(\"Bibbles\", \"Bobbles\");\n+                baggageItems = ejb.shouldNotBeTraced();\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Wibbles : Wobbles\"));\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Nibbles : Nobbles\"));\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Bibbles : Bobbles\"));\n+\n+                baggageItems = ejb.editBaggageItems();\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Wibbles : Wabbles\"));\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,\n+                        baggageItems.contains(\"Nibbles : Nabbles\"));\n+                Assert.assertTrue(\"Baggage items didn't match, received: \" + baggageItems,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzY3Mg==", "bodyText": "A word on what the test verifies would be nice.", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466933672", "createdAt": "2020-08-07T09:37:40Z", "author": {"login": "jbee"}, "path": "appserver/tests/payara-samples/samples/remote-ejb-tracing/remote-ejb-tracing-client/src/test/java/fish/payara/samples/remote/ejb/tracing/RemoteEjbClientIT.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.samples.remote.ejb.tracing;\n+\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.util.GlobalTracer;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import java.util.Properties;\n+\n+public class RemoteEjbClientIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNTg2OQ==", "bodyText": "I wonder what it means where we fail here.\nI assume the correct behaviour of this service kind of depends upon receiving the events.\nIsn't logging a warning good manners?", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466935869", "createdAt": "2020-08-07T09:42:08Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java", "diffHunk": "@@ -76,10 +78,17 @@\n     // The tracer instances\n     private static final Map<String, Tracer> tracers = new ConcurrentHashMap<>();\n     \n+    // The name of the Corba RMI Tracer\n+    public static final String PAYARA_CORBA_RMI_TRACER_NAME = \"__PAYARA_CORBA_RMI\";\n+\n     @PostConstruct\n     void postConstruct() {\n         // Listen for events\n-        Globals.getDefaultBaseServiceLocator().getService(Events.class).register(this);\n+        Events events = getFromServiceHandle(Globals.getDefaultBaseServiceLocator(), Events.class);\n+\n+        if (events != null) {\n+            events.register(this);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNjMxOQ==", "bodyText": "Is there a reason to not have these injected and kept in a field?", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466936319", "createdAt": "2020-08-07T09:43:09Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java", "diffHunk": "@@ -131,11 +146,17 @@ public synchronized Tracer getTracer(String applicationName) {\n \n     /**\n      * Pass-through method that checks if Request Tracing is enabled.\n-     * \n+     *\n      * @return True if the Request Tracing Service is enabled\n      */\n     public boolean isEnabled() {\n-        return Globals.getDefaultBaseServiceLocator().getService(RequestTracingService.class).isRequestTracingEnabled();\n+        RequestTracingService requestTracingService = getFromServiceHandle(Globals.getDefaultBaseServiceLocator(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNjM4Nw==", "bodyText": "Is there a reason to not have these injected and kept in a field?", "url": "https://github.com/payara/Payara/pull/4820#discussion_r466936387", "createdAt": "2020-08-07T09:43:17Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/opentracing-adapter/src/main/java/fish/payara/opentracing/OpenTracingService.java", "diffHunk": "@@ -76,10 +78,17 @@\n     // The tracer instances\n     private static final Map<String, Tracer> tracers = new ConcurrentHashMap<>();\n     \n+    // The name of the Corba RMI Tracer\n+    public static final String PAYARA_CORBA_RMI_TRACER_NAME = \"__PAYARA_CORBA_RMI\";\n+\n     @PostConstruct\n     void postConstruct() {\n         // Listen for events\n-        Globals.getDefaultBaseServiceLocator().getService(Events.class).register(this);\n+        Events events = getFromServiceHandle(Globals.getDefaultBaseServiceLocator(), Events.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjM1MzUz", "url": "https://github.com/payara/Payara/pull/4820#pullrequestreview-463235353", "createdAt": "2020-08-07T11:23:33Z", "commit": {"oid": "119ba6178c83eee4040a9b2047211a4f4ba9b2ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2308eee780dd5f1f8ced6481590b44ed49cc322a", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/2308eee780dd5f1f8ced6481590b44ed49cc322a", "committedDate": "2020-08-07T11:57:53Z", "message": "FISH-244 Review comments\nAdds a warning if events aren't present, reduces some duplication in iiop factory, get tracer upon iiop interceptor initialisation, and move into request tracing package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8d8a62d7aaa612d427239cdcc1842a65d3ee21a", "author": {"user": {"login": "Pandrex247", "name": "Andrew Pielage"}}, "url": "https://github.com/payara/Payara/commit/d8d8a62d7aaa612d427239cdcc1842a65d3ee21a", "committedDate": "2020-08-07T12:24:55Z", "message": "FISH-244 Add null check for opentracingservice in Iiop factory"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 759, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}