{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMTE5OTc5", "number": 4480, "title": "CUSTCOM-135 Fixed race condition on ConfigProviderResolver initialization", "bodyText": "instane() is synchronized\nsetInstance is NOT synchronized, so it ignores any locks\npreferring @Inject over ConfigProvider in HealthCheckService\nusing @ContractsProvided to allow both @Inject target types\nmore logging, but only when configured\ntested in extremely slowed TestContainers docker container\n\nImportant Info\nRemoved the timeout and countdouwn latch, because\n\nit is more simple to diagnose deadlock without timeout\ndeadlock should never happen - if it happened, something is broken again => timeout is not a way to get out of it\nthis PR fixed the cause of timeout\nthis PR still allows inverted (incorrect) order of initialization.\n\nTesting\nNew tests\nNot pushed reproducer in PAYARA-4176 branch (not production quality, but stacktraces in logs visible)\nTesting Performed", "createdAt": "2020-02-10T12:57:45Z", "url": "https://github.com/payara/Payara/pull/4480", "merged": true, "mergeCommit": {"oid": "7ecfc39c784a7f790a1ce9051e263980f9208371"}, "closed": true, "closedAt": "2020-02-11T17:34:38Z", "author": {"login": "dmatej"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcC8o3KAH2gAyMzczMTE5OTc5OmU0YTRjNzViZWUzNGE1MzJlZmQwYTc1MzAwYmUwZDI1ZWFhNGM2ZTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDS2nWAFqTM1NjcxNDIyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e4a4c75bee34a532efd0a75300be0d25eaa4c6e9", "author": {"user": null}, "url": "https://github.com/payara/Payara/commit/e4a4c75bee34a532efd0a75300be0d25eaa4c6e9", "committedDate": "2020-02-10T12:52:52Z", "message": "CUSTCOM-135 Fixed race condition on ConfigProviderResolver initialization\n\n- instane() is synchronized\n- setInstance is NOT synchronized, so it ignores any locks\n- preferring @Inject over ConfigProvider in HealthCheckService\n- using @ContractsProvided to allow both @Inject target types\n- more logging, but only when configured\n- tested in extremely slowed TestContainers docker container"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTU3Nzkw", "url": "https://github.com/payara/Payara/pull/4480#pullrequestreview-355957790", "createdAt": "2020-02-10T14:02:20Z", "commit": {"oid": "e4a4c75bee34a532efd0a75300be0d25eaa4c6e9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDowMjoyMFrOFnnHgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDowNjowOFrOFnnPbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3OTY4MA==", "bodyText": ".yield() is a hint, which means that control isn't necessarily  passed on to another Thread.  A sleep with very small amount should be used.", "url": "https://github.com/payara/Payara/pull/4480#discussion_r377079680", "createdAt": "2020-02-10T14:02:20Z", "author": {"login": "rdebusscher"}, "path": "nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/spi/ConfigProviderResolverSync.java", "diffHunk": "@@ -96,4 +95,17 @@ public void registerConfig(Config config, ClassLoader classLoader) {\n     public void releaseConfig(Config config) {\n         await().releaseConfig(config);\n     }\n+\n+\n+    private ConfigProviderResolver await() {\n+        LOG.log(Level.WARNING, \"Payara Microprofile Config requested too early, the HK2 service is not initialized yet.\"\n+            + \" Waiting until it will be active.\");\n+        while (true) {\n+            final ConfigProviderResolver resolver = instance();\n+            if (resolver != null && resolver != this) {\n+                return resolver;\n+            }\n+            Thread.yield();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a4c75bee34a532efd0a75300be0d25eaa4c6e9"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4MTcxMA==", "bodyText": "This is executed too early if you ask me. The current instance is set as value BEFORE the instance is completely setup as HK2 service. So MP config calls can get routed to this class before HK2 is finished processing, resulting in errors (NPE since the @Inject isn't processed?)", "url": "https://github.com/payara/Payara/pull/4480#discussion_r377081710", "createdAt": "2020-02-10T14:06:08Z", "author": {"login": "rdebusscher"}, "path": "nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/spi/ConfigProviderResolverImpl.java", "diffHunk": "@@ -129,31 +126,34 @@\n \n     // Gives access to deployed applications\n     @Inject\n-    ApplicationRegistry applicationRegistry;\n-    \n+    private ApplicationRegistry applicationRegistry;\n+\n     // This injects the configuration from the domain.xml magically\n     // and for the correct server configuation\n     @Inject\n     @Named(ServerEnvironment.DEFAULT_INSTANCE_NAME)\n     @Optional // PAYARA-2255 make optional due to race condition writing a missing entry into domain.xml\n-    MicroprofileConfigConfiguration configuration;\n+    private MicroprofileConfigConfiguration configuration;\n \n     // a config used at the server level when there is no application associated with the thread\n     private Config serverLevelConfig;\n \n+    /**\n+     * Sets the global {@link ConfigProviderResolver#instance()} to this instance.\n+     */\n     public ConfigProviderResolverImpl() {\n+        LOG.finest(\"ConfigProviderResolverImpl()\");\n+        // the setInstance is not synchronized, but instance() method body is.\n+        // this will block possible concurrent access.\n+        synchronized (ConfigProviderResolver.class) {\n+            LOG.log(Level.CONFIG, \"Setting global ConfigProviderResolver instance to {0}\", this);\n+            ConfigProviderResolver.setInstance(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a4c75bee34a532efd0a75300be0d25eaa4c6e9"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MDI1OTM5", "url": "https://github.com/payara/Payara/pull/4480#pullrequestreview-356025939", "createdAt": "2020-02-10T15:25:21Z", "commit": {"oid": "e4a4c75bee34a532efd0a75300be0d25eaa4c6e9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNToyNToyMVrOFnqOSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNToyNToyMVrOFnqOSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEzMDU2OQ==", "bodyText": "instance() also has synchronized block, so there's another yield point there, so I believe this might be correct.\nBut still, I trust CountDownLatch more, but might be overkill for 1 producer to 1 consumer scenario.", "url": "https://github.com/payara/Payara/pull/4480#discussion_r377130569", "createdAt": "2020-02-10T15:25:21Z", "author": {"login": "pdudits"}, "path": "nucleus/payara-modules/nucleus-microprofile/config-service/src/main/java/fish/payara/nucleus/microprofile/config/spi/ConfigProviderResolverSync.java", "diffHunk": "@@ -96,4 +95,17 @@ public void registerConfig(Config config, ClassLoader classLoader) {\n     public void releaseConfig(Config config) {\n         await().releaseConfig(config);\n     }\n+\n+\n+    private ConfigProviderResolver await() {\n+        LOG.log(Level.WARNING, \"Payara Microprofile Config requested too early, the HK2 service is not initialized yet.\"\n+            + \" Waiting until it will be active.\");\n+        while (true) {\n+            final ConfigProviderResolver resolver = instance();\n+            if (resolver != null && resolver != this) {\n+                return resolver;\n+            }\n+            Thread.yield();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3OTY4MA=="}, "originalCommit": {"oid": "e4a4c75bee34a532efd0a75300be0d25eaa4c6e9"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a12e0db31c6f5c86e782fbe2effae6822a5972bb", "author": {"user": null}, "url": "https://github.com/payara/Payara/commit/a12e0db31c6f5c86e782fbe2effae6822a5972bb", "committedDate": "2020-02-10T17:57:39Z", "message": "CUSTCOM-135 Code moved from constructor to postConstruct method\n\n- safer, all fields should be set here."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NzE0MjI2", "url": "https://github.com/payara/Payara/pull/4480#pullrequestreview-356714226", "createdAt": "2020-02-11T14:45:48Z", "commit": {"oid": "a12e0db31c6f5c86e782fbe2effae6822a5972bb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 866, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}