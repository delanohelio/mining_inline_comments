{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MjQ0OTIz", "number": 4884, "title": "FISH-315 Implement New Notifier API", "bodyText": "Description\n\nThis is a major refactor of the notification service. The intention is to allow modules depending solely on the internal-api module to send notifications and implement custom notifiers without either having knowledge of the notification service itself. Extra functionality / modifications include:\n\nPayaraExecutorService is now used across all notifiers, rather than each notifier implementing their own pooling.\nIt's possible to implement dynamic notifiers without domain.xml that are always enabled.\nImplementing custom notifiers no longer requires implementations of: MessageImpl, MessageQueue, NotificationEvent, NotificationEventFactory, NotifierConfigurationExecutionOptions, NotifierConfigurationExecutionOptionsFactory, NotifierExecutionOptions, NotifierExecutionOptionsFactory.\nNew GlassFishStubBean allows copying ConfigBeanProxy objects to be referenced statically (respect commands run without the dynamic flag).\n\nImportant Info\nBlockers\n\nN/A\nTesting\nNew tests\n\nTesting Performed\n\nManual testing of CDI eventbus notifier with the health check and request tracing services.\nDocumentation\n\nNot yet, TBD\nNotes for Reviewers\n\nThe intention is for the notifiers left out of this update to be moved into a different repository by having them depend on an internal-api artifact. Reviewing should keep this in mind - if it's not properly decoupled and version independent it doesn't work.", "createdAt": "2020-09-11T16:29:54Z", "url": "https://github.com/payara/Payara/pull/4884", "merged": true, "mergeCommit": {"oid": "35f2f2d136c99ee9d23546946858d819fc3ffcd5"}, "closed": true, "closedAt": "2020-09-21T15:30:52Z", "author": {"login": "MattGill98"}, "timelineItems": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFjGaIAH2gAyNDg1MjQ0OTIzOjRmOTM5M2ExZTdjOTM3MjM0NjVkYTQ2OWRjZTkwYzk1MjhmYzllYTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLD-vlgFqTQ5MjY0MTIwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4f9393a1e7c93723465da469dce90c9528fc9ea3", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/4f9393a1e7c93723465da469dce90c9528fc9ea3", "committedDate": "2020-09-04T11:00:32Z", "message": "Revert \"FISH-31 Upgrade Grizzly to 2.4.4.payara-p3\"\n\nThis reverts commit 2a0b89bc068ceb6ce93330ee0f822f5afadabdb8.\n\nThe reverted commit breaks a websocket TCK test. QACI-406 will endeavour\nto fix this test without rolling back functionality."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baf8c002a3fa66e64f26d3e1ab871b37b291db99", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/baf8c002a3fa66e64f26d3e1ab871b37b291db99", "committedDate": "2020-09-04T11:00:32Z", "message": "Disable ServerLogTest until Grizzly upgrade\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7391af371594e5326a973b0b645fa53b4f02214", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/a7391af371594e5326a973b0b645fa53b4f02214", "committedDate": "2020-09-08T10:17:20Z", "message": "FISH-315 Implement New Notifier API in Sibling Module\n\nA new notification module exists alongside the original notifier\nproject, which it was copied from. This module has then been modified to\nincorporate the new API - which is implemented in a custom example\nmodule as well as the new log notifier.\n\nThe notifiers can now be referenced by name rather than via a core enum.\nThis makes them more modular as services like the request tracing\nservice can discover the notifiers via HK2, and not through a centrally\nregistered enum.\n\nNotifications can now be sent programmatically through HK2 topics.\n\nNotifiers without any configuration can now be implemented, which\nallows dynamic notifiers to be created by users. There is also now much\nless boilerplate required to implement new services, as each notifier\nlistens for the same event type. No factories are required to be\nimplemented by the API user.\n\nThe notification get commands have also been improved to better discover\nthe notifier names, and to print better information when used from the\nconsole.\n\nIssues left to solve:\n - Some dynamic flags may not work\n - Notifier lifecycles aren't fully controlled (when are the initialize\nmethods called?\n - Performance hasn't been tested\n - No queues or thread pools are implemented for notifiers\n - Exceptions aren't handled in notifiers\n - Hasn't been tested in a clustered setup\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f95d3dfb4a7702e08b9191567e1c9e44487d440f", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/f95d3dfb4a7702e08b9191567e1c9e44487d440f", "committedDate": "2020-09-08T10:17:52Z", "message": "FISH-315 Add Thread Pooling to Notifiers\n\nRedesigned the notification loop to use the PayaraExecutorService. This\nprevents notifications with significant delay from running in the\nnotifying thread.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "053e5ede6a9bb7a55e2396e35a83284a1feec5fc", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/053e5ede6a9bb7a55e2396e35a83284a1feec5fc", "committedDate": "2020-09-08T12:36:14Z", "message": "FISH-315 Fix Notifier Initialisation\n\nThe notifier bootstrap methods were failing if a configuration was\nrequired as it wasn't being configured correctly.\n\nDeleted unused classes.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb5603625698bbbad2b501279c240c6274ad25b1", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/bb5603625698bbbad2b501279c240c6274ad25b1", "committedDate": "2020-09-09T13:05:39Z", "message": "FISH-315 Implement Dynamic Notifier Configuration\n\nFixed the notifier implementation so that the --dynamic flag\nfunctionality is respected. This uses a new proxy bean that duplicates\nthe current configuration and can be referenced with a lower cost. This\ncan simply be recreated each time a dynamic configuration change is\nmade.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1df406f8aef0140fb45b7c6e2b0b8b428127a06", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/b1df406f8aef0140fb45b7c6e2b0b8b428127a06", "committedDate": "2020-09-09T14:32:02Z", "message": "FISH-315 Request Tracing Use New Notifier API\n\nUpdated the request tracing service to use the new notifier API.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12e05bbea0821bae0376f7309de1822a8714d548", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/12e05bbea0821bae0376f7309de1822a8714d548", "committedDate": "2020-09-09T15:00:50Z", "message": "FISH-315 HealthCheck Use New Notifier API\n\nUpdated the health check service to use the new notifier API.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5205c62cc40fec86b428859502738fefb22988ac", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/5205c62cc40fec86b428859502738fefb22988ac", "committedDate": "2020-09-09T16:01:15Z", "message": "FISH-315 Remove Lazy Notifier Loading\n\nBugs were present, so due to time the lazy loading needs removing.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d51be0d96e939636efe9a5170ae40c264231491", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/3d51be0d96e939636efe9a5170ae40c264231491", "committedDate": "2020-09-09T16:22:30Z", "message": "FISH-315 Correct Whitelist Behaviour\n\nAn empty whitelist should count as no notifiers.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfddeaefa502a3fe0682fcceabe9e77fe4953934", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/bfddeaefa502a3fe0682fcceabe9e77fe4953934", "committedDate": "2020-09-09T16:33:25Z", "message": "FISH-315 Fix Notifier Queue Threading\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50096f0bbd357fe37bd30f4fcab9247b89db11cb", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/50096f0bbd357fe37bd30f4fcab9247b89db11cb", "committedDate": "2020-09-10T11:04:41Z", "message": "FISH-315 Javadoc Notifier APIs\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a4e795a4a486a206e5ec9a5ece687edaeb5845", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/85a4e795a4a486a206e5ec9a5ece687edaeb5845", "committedDate": "2020-09-10T11:17:23Z", "message": "FISH-315 Ensure HK2 Topic Distribution\n\nMake sure HK2 Events are enabled in notification service constructor.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83f40cefbff1f286df08b470f7f725e9048adb0b", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/83f40cefbff1f286df08b470f7f725e9048adb0b", "committedDate": "2020-09-10T11:37:38Z", "message": "FISH-315 Replace Old Notification Service\n\nRemoved the old notification service and renamed the new notification\nservice. The current notifiers still need revamping.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f29021e85e06d2dc807bb32d041a0945c4a5dcd4", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/f29021e85e06d2dc807bb32d041a0945c4a5dcd4", "committedDate": "2020-09-10T15:03:46Z", "message": "FISH-315 Update CDI EventBus Notifier to use new API\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d2007f2cc591ba48f636b5f00ff0f93476147c3", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/0d2007f2cc591ba48f636b5f00ff0f93476147c3", "committedDate": "2020-09-10T15:16:37Z", "message": "FISH-315 Update Eventbus Notifier to Use New API\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "add0d9c505550c972322fc5b492b8bf14429fbce", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/add0d9c505550c972322fc5b492b8bf14429fbce", "committedDate": "2020-09-11T14:08:08Z", "message": "FISH-315 Update JMS Notifier to Use New API\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41309d0ba324835904fc06c4c29a050a5402de3e", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/41309d0ba324835904fc06c4c29a050a5402de3e", "committedDate": "2020-09-11T14:08:14Z", "message": "FISH-315 Audit Service Use New Notifier API\n\nUpdated the Audit service to use the new notifier API.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10c601476262c39d98b02c91fc5f1fee78229aac", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/10c601476262c39d98b02c91fc5f1fee78229aac", "committedDate": "2020-09-11T14:08:14Z", "message": "FISH-315 JMX Monitoring Service Use New Notifier API\n\nUpdated the JMX monitoring service to use the new notifier API\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12146e2b315a62970caa33252af50b98e085ce8a", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/12146e2b315a62970caa33252af50b98e085ce8a", "committedDate": "2020-09-11T14:08:14Z", "message": "FISH-315 Removed extra notifiers from build\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0dcabadfddaba75091e03eb62190899468588e2", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/b0dcabadfddaba75091e03eb62190899468588e2", "committedDate": "2020-09-11T14:08:14Z", "message": "FISH-315 Fix OSGI Error on Loading Payara-API\n\nThe API depended on some core notification services packages which it\ndidn't use.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b12e2b3a64e57ac6a73941384ac4c50527f1cd4", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/3b12e2b3a64e57ac6a73941384ac4c50527f1cd4", "committedDate": "2020-09-11T14:08:14Z", "message": "FISH-315 Fix Admin Console Notifier Integrations\n\nThe admin console was broken by the notifier changes, so this change\nmakes all the relevant updates to get it working again.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/1640ee17ad44d1e406f56812cb8f1dc8191ba3c2", "committedDate": "2020-09-11T16:14:15Z", "message": "FISH-315 Fix CDI Eventbus API\n\nThe new Notifier implementation had strayed from the original API (so\nthe Payara API wouldn't work). This change returns the original\nfunctionality.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTM2ODAz", "url": "https://github.com/payara/Payara/pull/4884#pullrequestreview-487536803", "createdAt": "2020-09-14T08:37:31Z", "commit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODozNzozMlrOHRJi9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo0NToxMFrOHROGZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc0NDI0NQ==", "bodyText": "getNotificationConfigurationLogNotifier would read much easier", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487744245", "createdAt": "2020-09-14T08:37:32Z", "author": {"login": "jbee"}, "path": "appserver/admingui/payara-console-extras/src/main/resources/notification/notification.jsf", "diffHunk": "@@ -50,7 +50,7 @@ holder.\n         createMap(result=\"#{pageSession.attrsMap}\")\n         mapPut(map=\"#{pageSession.attrsMap}\" key=\"target\" value=\"#{pageSession.configName}\");\n         gf.restRequest(endpoint=\"#{sessionScope.NOTIFICATION_CONFIG_URL}/get-notification-configuration?target=#{pageSession.configName}\"  method=\"GET\" result=\"#{requestScope.resp}\");\n-        setPageSessionAttribute(key=\"valueMap\", value=\"#{requestScope.resp.data.extraProperties.getNotificationConfigurationLOG}\");\n+        setPageSessionAttribute(key=\"valueMap\", value=\"#{requestScope.resp.data.extraProperties.getNotificationConfigurationlognotifier}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2MjA4Mw==", "bodyText": "Do we want alias names with dash and lower case as well?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487762083", "createdAt": "2020-09-14T09:06:27Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java", "diffHunk": "@@ -131,6 +135,15 @@\n     @Param(name = \"target\", optional = true, defaultValue = \"server-config\")\n     protected String target;\n \n+    @Param(name = \"enableNotifiers\", optional = true)\n+    private List<String> enableNotifiers;\n+\n+    @Param(name = \"disableNotifiers\", optional = true)\n+    private List<String> disableNotifiers;\n+\n+    @Param(name = \"setNotifiers\", optional = true)\n+    private List<String> setNotifiers;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3Nzc5Ng==", "bodyText": "I think we should stick to single character type parameter names to avoid confusing type with actual class names. I'd think C works well.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487777796", "createdAt": "2020-09-14T09:32:47Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3ODk3OA==", "bodyText": "isn't getConfigurationClass(getClass()) available as field configClass ?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487778978", "createdAt": "2020-09-14T09:34:57Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n+\n+    private final Class<NC> configClass;\n+\n+    @Inject\n+    private ServiceLocator habitat;\n+\n+    private NC domainConfiguration;\n+\n+    protected NC configuration;\n+\n+    public PayaraConfiguredNotifier() {\n+        this.configClass = getConfigurationClass(getClass());\n+    }\n+\n+    @PostConstruct\n+    void injectConfiguration() {\n+        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n+        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MTc0NA==", "bodyText": "as this must happen to work correctly I'd think bootstrap should be final and another abstract method is introduced that is called here after configuration is initialised. Possibly passing the configuration as an argument like:\n protected abstract void bootstrap(NC configuration);\nwhich then is implemented by the extending class - this circumvents wrong extension and spares the developer extending this class to understand the exact mechanics of the configuration bootstrap.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487781744", "createdAt": "2020-09-14T09:39:44Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n+\n+    private final Class<NC> configClass;\n+\n+    @Inject\n+    private ServiceLocator habitat;\n+\n+    private NC domainConfiguration;\n+\n+    protected NC configuration;\n+\n+    public PayaraConfiguredNotifier() {\n+        this.configClass = getConfigurationClass(getClass());\n+    }\n+\n+    @PostConstruct\n+    void injectConfiguration() {\n+        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n+        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    }\n+\n+    /**\n+     * Bootstrap the notifier and update the configuration from the domain.xml.\n+     */\n+    @Override\n+    public void bootstrap() {\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MjI5OQ==", "bodyText": "Can this be private? It feels like it should to me.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487782299", "createdAt": "2020-09-14T09:40:37Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n+\n+    private final Class<NC> configClass;\n+\n+    @Inject\n+    private ServiceLocator habitat;\n+\n+    private NC domainConfiguration;\n+\n+    protected NC configuration;\n+\n+    public PayaraConfiguredNotifier() {\n+        this.configClass = getConfigurationClass(getClass());\n+    }\n+\n+    @PostConstruct\n+    void injectConfiguration() {\n+        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n+        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    }\n+\n+    /**\n+     * Bootstrap the notifier and update the configuration from the domain.xml.\n+     */\n+    @Override\n+    public void bootstrap() {\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    }\n+\n+    public NC getConfiguration() {\n+        return configuration;\n+    }\n+\n+    /**\n+     * @param <NC>          a generic class of the notifier configuration class\n+     * @param notifierClass the notifier of the class\n+     * @return the class used to configure the configured notifier\n+     */\n+    public static <NC extends PayaraNotifierConfiguration> Class<NC> getConfigurationClass(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MzAwMg==", "bodyText": "Naming makes me wonder of what?\nI suggest receivers for whitelist and nonReceivers for blacklist.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487783002", "createdAt": "2020-09-14T09:41:47Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -52,60 +56,88 @@\n     private String instanceName;\n     private String subject;\n     private String message;\n+    private Serializable data;\n+\n+    private List<String> whitelist;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MzUwMQ==", "bodyText": "Maybe even final ?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487783501", "createdAt": "2020-09-14T09:42:42Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -36,14 +37,17 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.domain;\n+package fish.payara.internal.notification;\n+\n+import java.io.Serializable;\n+import java.util.List;\n \n /**\n- * Base class for notification events.\n- *\n- * @author mertcaliskan\n+ * A notification received by notifiers and the notification service\n  */\n-public abstract class NotificationEvent {\n+public class PayaraNotification implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTAzMw==", "bodyText": "I there a good reason for messages to be mutable? I'd think messages in a \"bus\" should be immutable to ensure by construction that every receiver sees the same message. Building messages conveniently is ensured by the builder.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487785033", "createdAt": "2020-09-14T09:45:19Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -52,60 +56,88 @@\n     private String instanceName;\n     private String subject;\n     private String message;\n+    private Serializable data;\n+\n+    private List<String> whitelist;\n+    private List<String> blacklist;\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    public void setEventType(String eventType) {\n+    protected void setEventType(String eventType) {\n         this.eventType = eventType;\n     }\n \n     public String getServerName() {\n         return serverName;\n     }\n \n-    public void setServerName(String serverName) {\n+    protected void setServerName(String serverName) {\n         this.serverName = serverName;\n     }\n \n     public String getHostName() {\n         return hostName;\n     }\n \n-    public void setHostName(String hostName) {\n+    protected void setHostName(String hostName) {\n         this.hostName = hostName;\n     }\n \n     public String getDomainName() {\n         return domainName;\n     }\n \n-    public void setDomainName(String domainName) {\n+    protected void setDomainName(String domainName) {\n         this.domainName = domainName;\n     }\n \n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    public void setInstanceName(String instanceName) {\n+    protected void setInstanceName(String instanceName) {\n         this.instanceName = instanceName;\n     }\n \n     public String getSubject() {\n         return subject;\n     }\n \n-    public void setSubject(String subject) {\n+    protected void setSubject(String subject) {\n         this.subject = subject;\n     }\n \n     public String getMessage() {\n         return message;\n     }\n \n-    public void setMessage(String message) {\n+    protected void setMessage(String message) {\n         this.message = message;\n     }\n-}\n\\ No newline at end of file\n+\n+    public List<String> getWhitelist() {\n+        return whitelist;\n+    }\n+\n+    protected void setWhitelist(List<String> whitelist) {\n+        this.whitelist = whitelist;\n+    }\n+\n+    public List<String> getBlacklist() {\n+        return blacklist;\n+    }\n+\n+    protected void setBlacklist(List<String> blacklist) {\n+        this.blacklist = blacklist;\n+    }\n+\n+    public Serializable getData() {\n+        return data;\n+    }\n+\n+    protected void setData(Serializable data) {\n+        this.data = data;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NjU5MQ==", "bodyText": "I wonder how the data should be useful to notifiers if all we know about it is that it is Serializable", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487786591", "createdAt": "2020-09-14T09:47:54Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -52,60 +56,88 @@\n     private String instanceName;\n     private String subject;\n     private String message;\n+    private Serializable data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NzIzMw==", "bodyText": "As suggested in the notification this IMHO should construct a immutable object on build().", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487787233", "createdAt": "2020-09-14T09:49:01Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+\n+/**\n+ * A builder object created by a {@link PayaraNotificationFactory} used to\n+ * configure Notifications for sending.\n+ * \n+ * @author Matthew Gill\n+ */\n+public class PayaraNotificationBuilder {\n+\n+    private final PayaraNotification notification;\n+    \n+    protected PayaraNotificationBuilder(PayaraNotification notification) {\n+        this.notification = notification;\n+    }\n+\n+    public PayaraNotificationBuilder subject(String subject) {\n+        notification.setSubject(subject);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder message(String message) {\n+        notification.setMessage(message);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder data(Serializable data) {\n+        notification.setData(data);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder eventType(String eventType) {\n+        notification.setEventType(eventType);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder whitelist(String... notifierNames) {\n+        for (int i = 0; i < notifierNames.length; i++) {\n+            if (notification.getWhitelist() == null) {\n+                notification.setWhitelist(new ArrayList<>());\n+            }\n+            notification.getWhitelist().add(notifierNames[i]);\n+        }\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder blacklist(String... notifierNames) {\n+        for (int i = 0; i < notifierNames.length; i++) {\n+            if (notification.getBlacklist() == null) {\n+                notification.setBlacklist(new ArrayList<>());\n+            }\n+            notification.getBlacklist().add(notifierNames[i]);\n+        }\n+        return this;\n+    }\n+\n+    public PayaraNotification build() {\n+        return notification;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTI2Mw==", "bodyText": "I understand the historic reason for this to exist and being a @Service but I think in the new notifier concept this is/should merely be a utility class with static helpers that are just convenience methods to construct messages.\nIf some of these need bean state I'd think those utilities are maybe better located where the message is created which I'd assume is a service of some sorts with access to HK2 stuff.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487789263", "createdAt": "2020-09-14T09:52:17Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java", "diffHunk": "@@ -37,95 +37,51 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.domain;\n+package fish.payara.internal.notification;\n \n-import com.sun.enterprise.config.serverbeans.Server;\n-import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n-import fish.payara.notification.requesttracing.RequestTrace;\n-import fish.payara.nucleus.notification.configuration.NotifierType;\n-import fish.payara.nucleus.notification.service.NotificationEventFactoryStore;\n-import org.glassfish.api.admin.ServerEnvironment;\n-import org.glassfish.hk2.api.ServiceLocator;\n-import org.jvnet.hk2.annotations.Contract;\n-\n-import javax.inject.Inject;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n import java.text.MessageFormat;\n-import java.util.List;\n import java.util.logging.Level;\n \n+import javax.inject.Inject;\n+\n+import com.sun.enterprise.config.serverbeans.Server;\n+\n+import org.glassfish.api.admin.ServerEnvironment;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Service;\n+\n /**\n- * Factory for building {@link NotificationEvent}\n+ * Factory for building {@link PayaraNotification} events.\n+ * \n  * @author mertcaliskan\n  * @since 4.1.2.171\n  */\n-@Contract\n-public abstract class NotificationEventFactory<E extends NotificationEvent> {\n-\n-    @Inject\n-    NotificationEventFactoryStore store;\n+@Service\n+public class PayaraNotificationFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MDI3Nw==", "bodyText": "I think this should be a static method in PayaraNotificationBuilder. The factory class seems like an artefact of the past that is no longer needed to build and create messages.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487790277", "createdAt": "2020-09-14T09:54:03Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java", "diffHunk": "@@ -135,33 +91,34 @@ public E buildNotificationEvent(String name, List<HealthCheckResultEntry> entrie\n      * @param parameters An additional parameters to be formatted as part of the message\n      * @return the resulting {@link NotificationEvent}\n      */\n-    public E buildNotificationEvent(Level level, String subject, String message, Object[] parameters) {\n-        E event = initializeEvent(createEventInstance());\n-        event.setSubject(subject);\n+    public PayaraNotification buildNotificationEvent(Level level, String subject, String message, Object[] parameters) {\n+        PayaraNotification event = buildNotificationEvent(subject, message);\n         if (parameters != null && parameters.length > 0) {\n             message = MessageFormat.format(message, parameters);\n         }\n-        event.setMessage(message);\n+        event.setEventType(level.getName());\n         return event;\n     }\n \n-    public NotificationEventFactoryStore getStore() {\n-        return store;\n-    }\n-\n-    protected String getSubject(Level level) {\n-        return \"Health Check notification with severity level: \" + level.getName();\n+    /**\n+     * @return a builder object used to configure notifiers\n+     */\n+    public PayaraNotificationBuilder newBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NDA1MA==", "bodyText": "The javadoc should explain when this is called.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487794050", "createdAt": "2020-09-14T10:00:00Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java", "diffHunk": "@@ -37,23 +37,32 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.notification.eventbus.core;\n+package fish.payara.internal.notification;\n \n-import fish.payara.notification.NotificationData;\n-import fish.payara.nucleus.notification.domain.NotificationEvent;\n+import org.jvnet.hk2.annotations.Contract;\n \n /**\n- * @author mertcaliskan\n+ * A contract for a service representing a dynamic PayaraNotifier with no\n+ * domain.xml configuration. For a notifier with domain.xml configuration see\n+ * {@link PayaraConfiguredNotifier}.\n  */\n-public class CDIEventbusNotificationEvent extends NotificationEvent {\n+@Contract\n+public interface PayaraNotifier {\n \n-    private NotificationData notificationData;\n+    /**\n+     * Receive notifications from the notification service.\n+     * @param event the notification\n+     */\n+    void handleNotification(PayaraNotification event);\n \n-    public NotificationData getNotificationData() {\n-        return notificationData;\n-    }\n+    /**\n+     * Initialise the object from any configuration values.\n+     */\n+    default void bootstrap() {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMjMwMw==", "bodyText": "Wonder why this does not have the Command suffix.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487802303", "createdAt": "2020-09-14T10:14:15Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfiguration.java", "diffHunk": "@@ -37,39 +37,54 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.admin;\n+package fish.payara.internal.notification.admin;\n+\n+import static java.lang.Boolean.FALSE;\n+import static java.lang.Boolean.TRUE;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+\n+import javax.inject.Inject;\n \n import com.sun.enterprise.config.serverbeans.Config;\n import com.sun.enterprise.util.SystemPropertyConstants;\n-import fish.payara.nucleus.notification.configuration.NotificationServiceConfiguration;\n+import com.sun.enterprise.util.ColumnFormatter;\n+\n import org.glassfish.api.ActionReport;\n import org.glassfish.api.Param;\n import org.glassfish.api.admin.AdminCommand;\n import org.glassfish.api.admin.AdminCommandContext;\n import org.glassfish.hk2.api.ServiceLocator;\n import org.glassfish.internal.api.Target;\n \n-import javax.inject.Inject;\n-import java.lang.reflect.ParameterizedType;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n \n /**\n+ * The base admin command to get the configuration of a specified notifier.\n+ * Extend this class to fetch custom notifier configuration options.\n+ * \n  * @author mertcaliskan\n+ * @author Matthew Gill\n  */\n-public abstract class BaseGetNotifierConfiguration<NC> implements AdminCommand {\n+public abstract class BaseGetNotifierConfiguration<NC extends PayaraNotifierConfiguration> implements AdminCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMjQ5MQ==", "bodyText": "Wonder why this does not have the Command suffix.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487802491", "createdAt": "2020-09-14T10:14:35Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfiguration.java", "diffHunk": "@@ -53,17 +60,19 @@\n import org.jvnet.hk2.config.SingleConfigCode;\n import org.jvnet.hk2.config.TransactionFailure;\n \n-import javax.inject.Inject;\n-import java.beans.PropertyVetoException;\n-import java.lang.reflect.ParameterizedType;\n-import java.util.Properties;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n+import fish.payara.internal.notification.PayaraConfiguredNotifier;\n+import fish.payara.internal.notification.PayaraNotifier;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n \n /**\n+ * The base admin command to set the configuration of a specified notifier.\n+ * Extend this class to configure custom notifier configuration options\n+ * from @Param injected fields.\n+ * \n+ * @author Matthew Gill\n  * @author mertcaliskan\n  */\n-public abstract class BaseRequestTracingNotifierConfigurer<C extends Notifier> implements AdminCommand {\n+public abstract class BaseSetNotifierConfiguration<NC extends PayaraNotifierConfiguration, N extends PayaraNotifier> implements AdminCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwNTMxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<?> type);\n          \n          \n            \n                <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<T> type);", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487805315", "createdAt": "2020-09-14T10:19:29Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java", "diffHunk": "@@ -36,41 +35,46 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.configuration;\n-\n-import org.glassfish.api.admin.config.ConfigExtension;\n-import org.jvnet.hk2.config.*;\n+package fish.payara.internal.notification.admin;\n \n import java.beans.PropertyVetoException;\n import java.util.List;\n \n+import org.glassfish.api.admin.config.ConfigExtension;\n+import org.jvnet.hk2.config.Attribute;\n+import org.jvnet.hk2.config.Configured;\n+import org.jvnet.hk2.config.DuckTyped;\n+import org.jvnet.hk2.config.Element;\n+\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n+\n /**\n  * @author mertcaliskan\n- *\n  */\n-@Configured\n-public interface NotificationServiceConfiguration extends ConfigBeanProxy, ConfigExtension {\n+@Configured(name = \"notification-service-configuration\")\n+public interface NotificationServiceConfiguration extends ConfigExtension {\n \n     @Attribute(defaultValue = \"false\", dataType = Boolean.class)\n     String getEnabled();\n     void enabled(String value) throws PropertyVetoException;\n \n     @Element(\"*\")\n-    List<NotifierConfiguration> getNotifierConfigurationList();\n+    List<PayaraNotifierConfiguration> getNotifierConfigurationList();\n \n     @DuckTyped\n-    <T extends NotifierConfiguration> T getNotifierConfigurationByType(Class type);\n+    <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<?> type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxNDA0Mw==", "bodyText": "The javadoc should explain when this is called.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487814043", "createdAt": "2020-09-14T10:35:57Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java", "diffHunk": "@@ -37,23 +37,32 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.notification.eventbus.core;\n+package fish.payara.internal.notification;\n \n-import fish.payara.notification.NotificationData;\n-import fish.payara.nucleus.notification.domain.NotificationEvent;\n+import org.jvnet.hk2.annotations.Contract;\n \n /**\n- * @author mertcaliskan\n+ * A contract for a service representing a dynamic PayaraNotifier with no\n+ * domain.xml configuration. For a notifier with domain.xml configuration see\n+ * {@link PayaraConfiguredNotifier}.\n  */\n-public class CDIEventbusNotificationEvent extends NotificationEvent {\n+@Contract\n+public interface PayaraNotifier {\n \n-    private NotificationData notificationData;\n+    /**\n+     * Receive notifications from the notification service.\n+     * @param event the notification\n+     */\n+    void handleNotification(PayaraNotification event);\n \n-    public NotificationData getNotificationData() {\n-        return notificationData;\n-    }\n+    /**\n+     * Initialise the object from any configuration values.\n+     */\n+    default void bootstrap() {};\n+\n+    /**\n+     * Destroy any objects before configuration values are changed.\n+     */\n+    default void destroy() {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA==", "bodyText": "This will run once every 500ms so there should be a loop sending all messages available at the start of the run. Just one seems delaying message delivery unnecessarily and substantially.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487818854", "createdAt": "2020-09-14T10:45:10Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.nucleus.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.getNotifierName;\n+import static java.lang.Boolean.valueOf;\n+import static java.lang.String.format;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.glassfish.hk2.api.ServiceHandle;\n+\n+import fish.payara.internal.notification.PayaraConfiguredNotifier;\n+import fish.payara.internal.notification.PayaraNotification;\n+import fish.payara.internal.notification.PayaraNotifier;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n+\n+public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n+\n+    private final PayaraNotifier notifier;\n+    private final String notifierName;\n+\n+    private final Queue<PayaraNotification> notificationQueue;\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+        this(notifierHandle, null);\n+    }\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+        this.notifier = notifierHandle.getService();\n+        this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n+        this.notificationQueue = new ConcurrentLinkedQueue<>();\n+    }\n+\n+    protected String getName() {\n+        return notifierName;\n+    }\n+\n+    protected void destroy() {\n+        notifier.destroy();\n+    }\n+\n+    protected void bootstrap() {\n+        notifier.bootstrap();\n+    }\n+\n+    @Override\n+    public void accept(PayaraNotification notification) {\n+        if (isEnabled() && !this.notificationQueue.offer(notification)) {\n+            LOGGER.warning(format(\"Notifier %s failed to accept the notification \\\"%s\\\".\", notifierName, notification));\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        final PayaraNotification notification = notificationQueue.peek();\n+        try {\n+            if (notification != null && isEnabled()) {\n+                notifier.handleNotification(notification);\n+                notificationQueue.remove();\n+            }\n+        } catch (Exception ex) {\n+            LOGGER.log(Level.WARNING,\n+                    format(\"Notifier %s failed to handle notification \\\"%s\\\".\", notifierName, notification), ex);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d03f03a32374361f4dfc328cea39415211873d4c", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/d03f03a32374361f4dfc328cea39415211873d4c", "committedDate": "2020-09-16T10:41:37Z", "message": "FISH-315 Prevent Duplicate Notifiers Enabled\n\nCurrently the log notifier can be enabled repeatedly, meaning the\ndomain.xml fills up with log notifier blocks. This commit prevents\nthis by adding explicit checks to make sure the enabled notifier doesn't\nalready exist.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d96904cd509efdb7ff5a0f0a98d1886ebe9b7b82", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/d96904cd509efdb7ff5a0f0a98d1886ebe9b7b82", "committedDate": "2020-09-16T10:43:00Z", "message": "FISH-315 Allow Silent Notifications\n\nThere should be a distinct difference between a notification with no\nwhitelist (all notifiers), and a notification with an empty whitelist\n(no notifiers). This commit allows empty whitelists.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8cbff0839d8749eda6decd20f0fd24ac18091de", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/c8cbff0839d8749eda6decd20f0fd24ac18091de", "committedDate": "2020-09-17T12:04:14Z", "message": "FISH-315 Address Jan's Review Comments\n\n- Affixed every command class with \"Command\"\n- Renamed 2 letter generics to 1 letter alternative\n- Javadocced and fixed bootstrap and destroy behaviour so that they are\nonly called when appropriate. A bug existed where the destroy method was\ncalled whenever the create method was called.\n- Removed unnecessary extra generic from the set command\n- Changed the REST API properties to the service class names to read\nnicer\n- Fixed bug where the health check admin page didn't correctly recognise\nenabled services\n- Removed configured notifier bootstrap method to remove the possibility\nof invalid method overriding\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/18ba07b7c6a809d077c0511d68149e37e164242f", "committedDate": "2020-09-17T12:30:24Z", "message": "FISH-315 Address Jan's Review Comments\n\n- Add aliases to notifier sender commands\n- Make notification whitelist and blacklist names more specific\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjMzOTEw", "url": "https://github.com/payara/Payara/pull/4884#pullrequestreview-490633910", "createdAt": "2020-09-17T14:07:27Z", "commit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDowNzoyN1rOHTkC1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozNDozN1rOHTlXqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3NTU0Mw==", "bodyText": "Looking at this I wonder how or where the target notifier is identified. I assume there is something in the configuration that allows this. Maybe the javadoc can explain a but how this method is used and what it does.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490275543", "createdAt": "2020-09-17T14:07:27Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import org.jvnet.hk2.annotations.Contract;\n+\n+/**\n+ * A contract for the notification service, which allows the internal API to\n+ * send events to the notification service without having a direct reference to\n+ * it.\n+ */\n+@Contract\n+public interface NotifierManager {\n+\n+    void reconfigureNotifier(PayaraNotifierConfiguration configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NTA0Ng==", "bodyText": "I see the setters are still in and the builder is mostly a fluent API alias for calling setters on the notification. I really would like to see this using builder with fields for the individual values and a notification with a constructor accepting all the fields called on build().", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490285046", "createdAt": "2020-09-17T14:19:22Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -117,20 +117,20 @@ protected void setMessage(String message) {\n         this.message = message;\n     }\n \n-    public List<String> getWhitelist() {\n-        return whitelist;\n+    public List<String> getNotifierWhitelist() {\n+        return notifierWhitelist;\n     }\n \n-    protected void setWhitelist(List<String> whitelist) {\n-        this.whitelist = whitelist;\n+    protected void setNotifierWhitelist(List<String> whitelist) {\n+        this.notifierWhitelist = whitelist;\n     }\n \n-    public List<String> getBlacklist() {\n-        return blacklist;\n+    public List<String> getNotifierBlacklist() {\n+        return notifierBlacklist;\n     }\n \n-    protected void setBlacklist(List<String> blacklist) {\n-        this.blacklist = blacklist;\n+    protected void setNotifierBlacklist(List<String> blacklist) {\n+        this.notifierBlacklist = blacklist;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MTc4Ng==", "bodyText": "Just noticed that factory in line below is also still on. Is there a reason to not have the newBuilder be a static method in the builder class?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490291786", "createdAt": "2020-09-17T14:28:04Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java", "diffHunk": "@@ -285,7 +286,7 @@ public void sendNotification(String name, HealthCheckResult checkResult, Level l\n         String subject = \"Health Check notification with severity level: \" + level.getName();\n         String messageFormatted = getMessageFormatted(new Object[]{name, getCumulativeMessages(checkResult.getEntries())});\n \n-        List<String> enabledNotifiers = healthCheckService.getEnabledNotifiers();\n+        Collection<String> enabledNotifiers = healthCheckService.getEnabledNotifiers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NDQ4MA==", "bodyText": "Not so sure about this guard. If notifiers isn't empty shouldn't the destroy run even when not disabled? What if I do the bootstrap, disable the service and then get here, shouldn't we still destroy?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490294480", "createdAt": "2020-09-17T14:31:30Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java", "diffHunk": "@@ -190,7 +192,9 @@ public void shutdownNotificationService() {\n         if (execution != null) {\n             execution.cancel(true);\n         }\n-        notifiers.forEach(NotifierHandler::destroy);\n+        if (enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NzI1Nw==", "bodyText": "This is the kind of set that you will not see coming should this not behave as expected and you start looking. I wonder if there is a better way where the config and the notifier interact a bit more obvious with each other.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490297257", "createdAt": "2020-09-17T14:34:37Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -61,34 +61,75 @@\n     private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n \n     private final PayaraNotifier notifier;\n+    private final PayaraNotifierConfiguration config;\n     private final String notifierName;\n \n     private final Queue<PayaraNotification> notificationQueue;\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle) {\n         this(notifierHandle, null);\n     }\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle, final PayaraNotifierConfiguration config) {\n         this.notifier = notifierHandle.getService();\n         this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n         this.notificationQueue = new ConcurrentLinkedQueue<>();\n+        this.config = config;\n+    }\n+\n+    protected PayaraNotifierConfiguration getConfig() {\n+        return config;\n     }\n \n     protected String getName() {\n         return notifierName;\n     }\n \n+    protected void reconfigure() {\n+        // Get the current configuration\n+        PayaraNotifierConfiguration currentConfig = null;\n+        if (config != null) {\n+            currentConfig = PayaraConfiguredNotifier.class.cast(notifier).getConfiguration();\n+            if (currentConfig == null) {\n+                currentConfig = config;\n+            }\n+        }\n+\n+        final boolean enabled = config != null && valueOf(config.getEnabled());\n+        final boolean wasEnabled = config != null && valueOf(currentConfig.getEnabled());\n+\n+        if (!enabled) {\n+            if (wasEnabled) {\n+                // If the notifier isn't enabled but was before\n+                destroy();\n+            }\n+        } else {\n+            if (wasEnabled) {\n+                // If the notifier is enabled and was before\n+                destroy();\n+                bootstrap();\n+            } else {\n+                // If the notifier is enabled and wasn't before\n+                bootstrap();\n+            }\n+        }\n+    }\n+\n     protected void destroy() {\n         notifier.destroy();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     protected void bootstrap() {\n+        // Set the configuration before bootstrapping the notifier\n+        if (config != null) {\n+            PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a47a0d820fcb63f439ebf8b572a2a64b8783a750", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/a47a0d820fcb63f439ebf8b572a2a64b8783a750", "committedDate": "2020-09-17T15:36:39Z", "message": "Merge branch 'master' into FISH-315"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1052dc3f083c3004bf1a1b8714b4157e9ae5b2ed", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/1052dc3f083c3004bf1a1b8714b4157e9ae5b2ed", "committedDate": "2020-09-18T10:22:25Z", "message": "FISH-315 Fix Admin Audit Service Console Bug\n\nIn the admin console, the admin audit service would ignore the status of\nthe first recognised notifier. This is a bug existing prior to the\nnotifier rewrite, but came up in testing.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44c6254a2e14a6cb21eb10748a792b9b5ec98d70", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/44c6254a2e14a6cb21eb10748a792b9b5ec98d70", "committedDate": "2020-09-18T10:47:37Z", "message": "FISH-315 Enable Log Notifier By Default\n\nWhile the log notifier itself was enabled by default, the notification\nsuppliers had no notifiers whitelisted so would do nothing until\nreconfigured. This change makes sure that by default, the log notifier\nwill be notified from each notification source.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9f5a67b096ce31a4a6d2ad6898a8ab21ba306a7", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/d9f5a67b096ce31a4a6d2ad6898a8ab21ba306a7", "committedDate": "2020-09-18T10:55:25Z", "message": "FISH-315 Fix Notification Testing\n\nThe audit service and healthcheck service had tests for their notifier\nconfiguration that no longer worked.\n\nThe configuration value changing tests have been removed\ne.g. noisyAffectsConfig*. This is because before the refactor each\nservice could override the configuration of the notifier. The refactor\ndoesn't allow this, and only allows specifying the name of the notifiers\nto whitelist.\n\nThe tests have also been altered to disable the log notifier instead of\nenable it, as the log notifier should now be enabled by default.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/2e009b7f5ce03b26972b94f1152c1d53f1e3ba06", "committedDate": "2020-09-18T11:23:34Z", "message": "FISH-315 Make PayaraNotification Immutable\n\nThe builder API is now more resilient, and the notifications less\nsusceptible to incorrect extensions which might cause errors.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f3edf3837243e51a37df0ba1ec063bb424d6678", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/4f3edf3837243e51a37df0ba1ec063bb424d6678", "committedDate": "2020-09-18T12:12:17Z", "message": "FISH-315 Expand NotifierManager Javadoc\n\nIt was unclear what the NotifierManager interface was for, so this\ncommit adds better commentary.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bdefc41de83b205edc9ea15deba70ae17dd36a9", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/3bdefc41de83b205edc9ea15deba70ae17dd36a9", "committedDate": "2020-09-18T12:36:11Z", "message": "FISH-315 Fix Dynamic Notifier Status\n\nThis fixes 2 bugs:\n\n- When the notification service is initialised, it would initialise all\nnotifiers regardless of whether they need initialising.\n- When a notifier was disabled dynamically, the configuration of the\nnotifier wouldn't update so it wouldn't be destroyed\n\nThe isEnabled() method now reads the current notifier configuration\nrather than the domain.xml, and destroying a bean will also cause a\nconfig reload before it shuts down.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f215290af1503130b7eb210a8e566f359fb3bdc3", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/f215290af1503130b7eb210a8e566f359fb3bdc3", "committedDate": "2020-09-18T13:02:59Z", "message": "FISH-315 Disable Notification Service Properly\n\nWhen the notification service is disabled, none of the notifiers were\nbeing shut down. They are now shutdown, and the destroy() method called\nif any notifiers were available.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDU3ODM2", "url": "https://github.com/payara/Payara/pull/4884#pullrequestreview-491457836", "createdAt": "2020-09-18T13:21:11Z", "commit": {"oid": "f215290af1503130b7eb210a8e566f359fb3bdc3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoyMToxMVrOHUM3qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoyMToxMVrOHUM3qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk0NDQyNQ==", "bodyText": "No, would need to checkout the codebase and browse around this a little to get a better understanding of the relations involved. But as long as we are aware of this I think we could also just give it some time and at some point in the future a batter way becomes apparent to us - then we just have to also do the change :)", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490944425", "createdAt": "2020-09-18T13:21:11Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -61,34 +61,75 @@\n     private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n \n     private final PayaraNotifier notifier;\n+    private final PayaraNotifierConfiguration config;\n     private final String notifierName;\n \n     private final Queue<PayaraNotification> notificationQueue;\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle) {\n         this(notifierHandle, null);\n     }\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle, final PayaraNotifierConfiguration config) {\n         this.notifier = notifierHandle.getService();\n         this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n         this.notificationQueue = new ConcurrentLinkedQueue<>();\n+        this.config = config;\n+    }\n+\n+    protected PayaraNotifierConfiguration getConfig() {\n+        return config;\n     }\n \n     protected String getName() {\n         return notifierName;\n     }\n \n+    protected void reconfigure() {\n+        // Get the current configuration\n+        PayaraNotifierConfiguration currentConfig = null;\n+        if (config != null) {\n+            currentConfig = PayaraConfiguredNotifier.class.cast(notifier).getConfiguration();\n+            if (currentConfig == null) {\n+                currentConfig = config;\n+            }\n+        }\n+\n+        final boolean enabled = config != null && valueOf(config.getEnabled());\n+        final boolean wasEnabled = config != null && valueOf(currentConfig.getEnabled());\n+\n+        if (!enabled) {\n+            if (wasEnabled) {\n+                // If the notifier isn't enabled but was before\n+                destroy();\n+            }\n+        } else {\n+            if (wasEnabled) {\n+                // If the notifier is enabled and was before\n+                destroy();\n+                bootstrap();\n+            } else {\n+                // If the notifier is enabled and wasn't before\n+                bootstrap();\n+            }\n+        }\n+    }\n+\n     protected void destroy() {\n         notifier.destroy();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     protected void bootstrap() {\n+        // Set the configuration before bootstrapping the notifier\n+        if (config != null) {\n+            PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NzI1Nw=="}, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTAxNTYw", "url": "https://github.com/payara/Payara/pull/4884#pullrequestreview-491501560", "createdAt": "2020-09-18T14:10:21Z", "commit": {"oid": "f215290af1503130b7eb210a8e566f359fb3bdc3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b58c24c04a26458ac2d21730fc07b38b39de246", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/5b58c24c04a26458ac2d21730fc07b38b39de246", "committedDate": "2020-09-18T14:41:47Z", "message": "FISH-315 Fix NPE in Notification Initialisation\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6fc19f67096f199e804028c431e15692c02c616", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/e6fc19f67096f199e804028c431e15692c02c616", "committedDate": "2020-09-18T15:53:42Z", "message": "FISH-315 Log Notifier Print Subject\n\nThe subject wasn't being printed in the messages.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef556e7147d613099b4466b3214f4958753dcb6a", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/ef556e7147d613099b4466b3214f4958753dcb6a", "committedDate": "2020-09-21T09:32:31Z", "message": "FISH-315 Create New Lazy Thread For Each Notifier\n\nBefore this change, one thread ran for the notification service and\npolled each notifier to handle one notification at a time, before\nwaiting 50ms. This may not keep up with the speed at which the\nnotification queue fills up, and notifiers may blocke each other.\n\nAfter this change, each notifier has it's own thread, which will wait\nindefinitely on the queue to fill up on the take() method, and then\nreschedule itself every 5ms. This will be much more efficient in\nhandling notifications, with hopefully a minimal CPU impact.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e29d3f466ae49ed063b5e67e13bc7b666e9ea277", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/e29d3f466ae49ed063b5e67e13bc7b666e9ea277", "committedDate": "2020-09-21T09:43:21Z", "message": "Merge branch 'master' into FISH-315"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNDQ0MzE3", "url": "https://github.com/payara/Payara/pull/4884#pullrequestreview-492444317", "createdAt": "2020-09-21T10:02:02Z", "commit": {"oid": "ef556e7147d613099b4466b3214f4958753dcb6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDowMjowMlrOHVIruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDowMjowMlrOHVIruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNDQxMQ==", "bodyText": "take() is a blocking operation, and you are calling it every 5 milliseconds, so that will end up with a lot waiting on this if there aren't many notifications being sent, the opposite problem of what was wrong before. I think a better solution would be to flush the queue every 50 milliseconds or something like that.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r491924411", "createdAt": "2020-09-21T10:02:02Z", "author": {"login": "Cousjava"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -146,17 +162,20 @@ public void accept(final PayaraNotification notification) {\n         }\n     }\n \n-    @Override\n-    public void run() {\n-        final PayaraNotification notification = notificationQueue.peek();\n+    private void run() {\n+        assert isEnabled();\n         try {\n-            if (notification != null && isEnabled()) {\n-                notifier.handleNotification(notification);\n-                notificationQueue.remove();\n+            final PayaraNotification notification = notificationQueue.take();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef556e7147d613099b4466b3214f4958753dcb6a"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNDYwNTgw", "url": "https://github.com/payara/Payara/pull/4884#pullrequestreview-492460580", "createdAt": "2020-09-21T10:24:04Z", "commit": {"oid": "e29d3f466ae49ed063b5e67e13bc7b666e9ea277"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39435b41e57191b86367303e87a3f818fddf420e", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/39435b41e57191b86367303e87a3f818fddf420e", "committedDate": "2020-09-21T12:20:30Z", "message": "FISH-315 API Fixes to Prevent Admin Console Errors\n\nThe getNotifierProperties method was prone to incorrect extension, which\nwas causing admin console configuration issues to arise. This change\nfixes these errors by removing the requirement to implement this method,\nand fixes the remaining admin console issues.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "559241a8ed4dae91062dce1466ff5de75625efca", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/559241a8ed4dae91062dce1466ff5de75625efca", "committedDate": "2020-09-21T12:33:58Z", "message": "FISH-315 Fix Test Notifier Console Buttons\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9373ae7f6b5784a8507eed1db2be0b2f2d342fbe", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/9373ae7f6b5784a8507eed1db2be0b2f2d342fbe", "committedDate": "2020-09-21T13:36:35Z", "message": "FISH-315 Fix Module Structure\n\nMoved the example notification module into nucleus, and removed the\nremaining packager modules from the build lifecycle.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNjQxMjA4", "url": "https://github.com/payara/Payara/pull/4884#pullrequestreview-492641208", "createdAt": "2020-09-21T14:08:39Z", "commit": {"oid": "9373ae7f6b5784a8507eed1db2be0b2f2d342fbe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 670, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}