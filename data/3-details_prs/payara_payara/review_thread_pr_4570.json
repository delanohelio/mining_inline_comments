{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MTUzMjM0", "number": 4570, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDo1MToyMVrOEDJP0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDo1MToyMVrOEDJP0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzMyNjkwOnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNDo1MToyMVrOGgB2RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNTo1MzoyNVrOGgCE5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzg5Mw==", "bodyText": "They way you've nested this means that tokenAutoRefresh is ignored if at least one of accessTokenExpiry or identityTokenExpiry isn't true.\nOn one hand, I think this makes sense because if a user has set tokenAutoRefresh then logically the application requires a valid access token to function. On the other hand, maybe someone wants to automatically refresh tokens, but they don't want the user to be logged-out if the tokens expire.\nIf this is the intended behaviour, then the documentation should be clear that tokenAutoRefresh only works when at least one of accessTokenExpiry or identityTokenExpiry is set.", "url": "https://github.com/payara/Payara/pull/4570#discussion_r436237893", "createdAt": "2020-06-06T04:51:21Z", "author": {"login": "sharpedavid"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -214,9 +220,30 @@ public AuthenticationStatus validateRequest(\n                 throw new AuthenticationException(\"Failed to register CallerPrincipalCallback.\", ex);\n             }\n \n-            if (configuration.isTokenAutoRefresh()) {\n+            LogoutConfiguration logout = configuration.getLogoutConfiguration();\n+            boolean accessTokenExpired = this.context.getAccessToken().isExpired();\n+            boolean identityTokenExpired = this.context.getIdentityToken().isExpired();\n+            if (logout.isIdentityTokenExpiry()) {\n+                LOGGER.log(Level.FINE, \"UserPrincipal is set, check if Identity Token is valid.\");\n+            }\n+            if (logout.isAccessTokenExpiry()) {\n                 LOGGER.log(Level.FINE, \"UserPrincipal is set, check if Access Token is valid.\");\n-                return this.reAuthenticate(request, response, httpContext);\n+            }\n+\n+            if((logout.isAccessTokenExpiry() && accessTokenExpired)\n+                    || (logout.isIdentityTokenExpiry() && identityTokenExpired)) {\n+                if (configuration.isTokenAutoRefresh()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ee958716ac29b63fd7c623108732fec66fc5228"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzODk2Ng==", "bodyText": "Hi,\nYes, it is intended behavior, I will update the documentation. Also IMO accessTokenExpiry should be true by default, WDYT?", "url": "https://github.com/payara/Payara/pull/4570#discussion_r436238966", "createdAt": "2020-06-06T05:09:54Z", "author": {"login": "jGauravGupta"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -214,9 +220,30 @@ public AuthenticationStatus validateRequest(\n                 throw new AuthenticationException(\"Failed to register CallerPrincipalCallback.\", ex);\n             }\n \n-            if (configuration.isTokenAutoRefresh()) {\n+            LogoutConfiguration logout = configuration.getLogoutConfiguration();\n+            boolean accessTokenExpired = this.context.getAccessToken().isExpired();\n+            boolean identityTokenExpired = this.context.getIdentityToken().isExpired();\n+            if (logout.isIdentityTokenExpiry()) {\n+                LOGGER.log(Level.FINE, \"UserPrincipal is set, check if Identity Token is valid.\");\n+            }\n+            if (logout.isAccessTokenExpiry()) {\n                 LOGGER.log(Level.FINE, \"UserPrincipal is set, check if Access Token is valid.\");\n-                return this.reAuthenticate(request, response, httpContext);\n+            }\n+\n+            if((logout.isAccessTokenExpiry() && accessTokenExpired)\n+                    || (logout.isIdentityTokenExpiry() && identityTokenExpired)) {\n+                if (configuration.isTokenAutoRefresh()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzg5Mw=="}, "originalCommit": {"oid": "5ee958716ac29b63fd7c623108732fec66fc5228"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MTYzOA==", "bodyText": "Access tokens are usually short-lived. It's 5 minutes by default on Keycloak. So if accessTokenExpiry is true by default, then maybe tokenAutoRefresh should also be true by default otherwise that's a really short idle timeout (assuming 5 minutes). See what I mean?\nI think you can make a good case for either being the default, true or false. On one hand false is simpler and reduces network traffic, on the other hand I think most people will want to use true once they realize the benefits of tying their Payara session to OIDC token expiry.", "url": "https://github.com/payara/Payara/pull/4570#discussion_r436241638", "createdAt": "2020-06-06T05:53:25Z", "author": {"login": "sharpedavid"}, "path": "appserver/payara-appserver-modules/security-openid/src/main/java/fish/payara/security/openid/OpenIdAuthenticationMechanism.java", "diffHunk": "@@ -214,9 +220,30 @@ public AuthenticationStatus validateRequest(\n                 throw new AuthenticationException(\"Failed to register CallerPrincipalCallback.\", ex);\n             }\n \n-            if (configuration.isTokenAutoRefresh()) {\n+            LogoutConfiguration logout = configuration.getLogoutConfiguration();\n+            boolean accessTokenExpired = this.context.getAccessToken().isExpired();\n+            boolean identityTokenExpired = this.context.getIdentityToken().isExpired();\n+            if (logout.isIdentityTokenExpiry()) {\n+                LOGGER.log(Level.FINE, \"UserPrincipal is set, check if Identity Token is valid.\");\n+            }\n+            if (logout.isAccessTokenExpiry()) {\n                 LOGGER.log(Level.FINE, \"UserPrincipal is set, check if Access Token is valid.\");\n-                return this.reAuthenticate(request, response, httpContext);\n+            }\n+\n+            if((logout.isAccessTokenExpiry() && accessTokenExpired)\n+                    || (logout.isIdentityTokenExpiry() && identityTokenExpired)) {\n+                if (configuration.isTokenAutoRefresh()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzNzg5Mw=="}, "originalCommit": {"oid": "5ee958716ac29b63fd7c623108732fec66fc5228"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1312, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}