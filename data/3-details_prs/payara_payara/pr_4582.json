{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzkyNTE1", "number": 4582, "title": "APPSERV-59 Updates to MicroProfile Metrics 2.3", "bodyText": "Summary\nUpdates Payara to conform to the MicroProfile Metrics 2.3 standard.\nNew Features and Additions:\n\nImplements the added SimpleTimer metric type and @SinplyTimed annotation\nMetadata now has uses Optionals to distinguish between not set values for unit, description or display name from intentionally set values including the empty string. This requires to change how Metadata is build from annotations.\nMetricRegistry now uses a Clock so the Metrics it creates that use a Clock use the one passed to the registry so it becomes unit testable\nConcurrentGaugeImpl now uses a Clock for deciding when to roll over the min/max state so this becomes unit testable without waiting a minute.\nTimerImpl  can now be created with a custom Clock for unit testing\nReplaced the use of LongAdded with AtomicLong in some places. While it is true that the adder has better throughput due to smaller risk of thread contention it is only used on paths that will also use at least one but often several other atomic primitives so if there ever were a thread contention it would simply occur on one of those CAS instead. With that in mind AtomicLong seems the better choice as it is more lightweight in both memory and CPU usage. Also should there be a hot loop with many threads involved using a metric (e.g. a counter) the bottleneck of thread contention on an atomic CAS operation will be the least of our problems. There are many other (in comparison) heavy weight operations in the path that should pop up as problem before the CAS.\nA race condition in the MinMax updating of ConcurrentGaugeImpl was fixed.\nMetricsWriter now uses MetricRegistry.Type for the scope (which was misunderstood as registryName before (Scope only allows base, vendor, application whereas the registry name is base, vendor or that of a particular application).\ngauges resolved via CDI are injected as a proxy in case no such gauge is currently known to the registry assuming that the gauge will be made known later during discovery and bootstrapping. As long as proxy cannot get hold of the actual gauge it will return null. This behaviour is not yet standard but suggested to be (see eclipse/microprofile-metrics#563 (comment))\nNoSuchRegistryException made a RuntimeException (otherwise cause ugly try-catch cascades for no reason)\nfixes MP config ordering of sources that should fall back on name order in case of same ordinal\n\nRelated Issues\n\neclipse/microprofile-metrics#563\narquillian/arquillian-core#235\n\nTesting\nTests Added\nThe Metrics module was sparsely tested. Since the existing code was hard to follow, at times seemed duplicated and inconsistent I decided to change code so that it became unit-testable and easier to follow so I could write test to make sure we are complaint with the specification.\nAll extracting data from annotations and annotated member is replaced by the AnnotationReader class which is tested with a coverage > 88%. This replaces different utilities that would each have their own inconsistent logic (which isn't correct).\nThe export to JSON is done by JsonExporter (coverage > 97%), the export to OpenMetrics is done by OpenMetricsExporter (coverage > 98%). These operate on the level of individual metrics which in a case for multiple metrics for the same name must be exported following one another. Extracting the data for export from one or more registries and feeding individual metrics in right grouping into the exporter is done by the MetricsWriterImpl (tests need to be created).\nUnit and component tests were added to cover the important and complex parts.\nThis includes:\n\nReading effective metrics IDs and Metadata from annotations\nGeneral interceptor logic\nREST API JSON and OpenMetrics formatting\n\nThe formatting is both tested with examples found in the spec. These (and some more) are added as text files (OpenMetrics format) and JSON files (JSON format). Some of these examples contained inconsistencies with the specification which were corrected in eclipse/microprofile-metrics#555\nThe added tests only take a few seconds to run so they are no problem for the build process.\nTests Performed\nBesides the over 150 new unit tests manual testing was done using the endpoints\nhttp://localhost:8080/metrics/\nhttp://localhost:8080/metrics/base\nhttp://localhost:8080/metrics/vendor\nhttp://localhost:8080/metrics/application\nhttp://localhost:8080/metrics/base/gc.total\n\nTo test both JSON and OpenMetrics some browser addon can be used to set the Accept header to application/json and test both GET and OPTIONS for the above URLs.\nRunning the TCK with updates in payara/MicroProfile-TCK-Runners#103 against local server instance using:\n mvn clean install \"-Ppayara-server-remote\" \"-Dpayara.version=5.202\"\n\nRemember that MP_METRICS_TAGS needs to be set to tier=integration when running against remote server using\nexport MP_METRICS_TAGS=tier=integration\nin the shell that is used to start the server.", "createdAt": "2020-03-20T07:40:49Z", "url": "https://github.com/payara/Payara/pull/4582", "merged": true, "mergeCommit": {"oid": "90a7e868af10a0ec173fe0dd3c9f25e016c5c0ea"}, "closed": true, "closedAt": "2020-04-03T09:52:08Z", "author": {"login": "jbee"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMpW84gH2gAyMzkxMzkyNTE1OmU4ZTE4NjQ1ZDU4ZjcxZTU1NzIxZjRkYTg5NmM5Y2ZjOGUwNzZmMmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTtS00AFqTM4NjQ5MDgxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e8e18645d58f71e55721f4da896c9cfc8e076f2f", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/e8e18645d58f71e55721f4da896c9cfc8e076f2f", "committedDate": "2020-03-11T16:04:21Z", "message": "APPSERV-59 initial update to MP Metrics 2.3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe4d3204dafa8d8e44ecf86cc6027236e57c1085", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/fe4d3204dafa8d8e44ecf86cc6027236e57c1085", "committedDate": "2020-03-11T16:07:16Z", "message": "APPSERV-59 deletes outdates class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf7ed86baad88727e7b34e03836c94090e5f39c5", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/cf7ed86baad88727e7b34e03836c94090e5f39c5", "committedDate": "2020-03-11T18:37:35Z", "message": "APPSERV-59 adds javadoc to AnnotationReader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d387fdf03a706fbdfbd19d7150cac71aba320e5", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/3d387fdf03a706fbdfbd19d7150cac71aba320e5", "committedDate": "2020-03-11T18:54:47Z", "message": "APPSERV-59 prepares unit tests for AnnotationReader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46d4ac6870ec56e628d5b560c835d9130ec38476", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/46d4ac6870ec56e628d5b560c835d9130ec38476", "committedDate": "2020-03-12T15:52:30Z", "message": "APPSERV-59 adds unit tests for AnnotationReader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28793a1f90bc3090d53b0d64065bdb19ae839b7f", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/28793a1f90bc3090d53b0d64065bdb19ae839b7f", "committedDate": "2020-03-12T17:30:15Z", "message": "APPSERV-59 makes AnnotationReader metadata automatically pick a MetricType when INVALID"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bc821acd6c8684e6bdaa64beb16eafdee2f98bd", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/1bc821acd6c8684e6bdaa64beb16eafdee2f98bd", "committedDate": "2020-03-13T11:18:15Z", "message": "APPSERV-59 more tests for the AnnotationReader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8637118ea804236f2f471c6938a3d1cb6379b97", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/e8637118ea804236f2f471c6938a3d1cb6379b97", "committedDate": "2020-03-13T12:19:46Z", "message": "APPSERV-59 final set of AnnotationReader tests and a fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eea00ccc08ebbb1292d9f02c8a827f53d3278d6", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/6eea00ccc08ebbb1292d9f02c8a827f53d3278d6", "committedDate": "2020-03-16T10:52:21Z", "message": "APPSERV-59 adds tests for AnnotationReader#getOrRegister"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b31d11dd9cf2f216e122542d523f00840e2ac52", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/8b31d11dd9cf2f216e122542d523f00840e2ac52", "committedDate": "2020-03-16T13:24:38Z", "message": "APPSERV-59 adds unit tests for CountedInterceptor\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cdabfc9447aa700b0115a77cd9839e243d78628", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/3cdabfc9447aa700b0115a77cd9839e243d78628", "committedDate": "2020-03-16T15:39:02Z", "message": "APPSERV-59 adds tests for MeterdInterceptor\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d92c7ca6f65d3acdf570ce97894aa6e102545b5", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/5d92c7ca6f65d3acdf570ce97894aa6e102545b5", "committedDate": "2020-03-16T16:12:56Z", "message": "APPSERV-59 adds tests for TimedInterceptor and SimplyTimedInterceptor\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6e468b92b4557323c231d309ca4c075d6b0051e", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/a6e468b92b4557323c231d309ca4c075d6b0051e", "committedDate": "2020-03-16T16:55:29Z", "message": "APPSERV-59 adds tests for ConcurrentGuageInterceptor\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbf36c51e8b47fa13c4946ba62479b29de031288", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/bbf36c51e8b47fa13c4946ba62479b29de031288", "committedDate": "2020-03-17T09:43:47Z", "message": "APPSERV-59 concurrent gauges test finishing touches\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b9fc5212cb4f0686ed5d5823da1f70f9677429d", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/8b9fc5212cb4f0686ed5d5823da1f70f9677429d", "committedDate": "2020-03-17T17:23:35Z", "message": "APPSERV-59 adds OpenMetrics exporter and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6be0f4b4da30de1c3070dee9cd2dac4af6cb094", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/c6be0f4b4da30de1c3070dee9cd2dac4af6cb094", "committedDate": "2020-03-18T10:04:11Z", "message": "APPSERV-59 more tests for the OpenMetricsExporter\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79047c6f659c49c809cce2653d8daaa3d88ff359", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/79047c6f659c49c809cce2653d8daaa3d88ff359", "committedDate": "2020-03-18T10:44:30Z", "message": "APPSERV-59 ensure no duplicate TYPE or HELP lines are exported; adds copyright headers\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a9a06161e9c80ba0210fe95aecaf225c29442cb", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/1a9a06161e9c80ba0210fe95aecaf225c29442cb", "committedDate": "2020-03-18T16:54:11Z", "message": "APPSERV-59 adds JSON exporter and tests from specification\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e54bdf7dbd8b70458e8e8ad87dc97c7e022a1a25", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/e54bdf7dbd8b70458e8e8ad87dc97c7e022a1a25", "committedDate": "2020-03-18T20:33:43Z", "message": "APPSERV-59 adds JSON export and tests\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a2706534646447b0ba95bcaaf923f056db4de40", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/6a2706534646447b0ba95bcaaf923f056db4de40", "committedDate": "2020-03-19T13:10:13Z", "message": "APPSERV-59 connect REST API with JsonExporter implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41e6aa65396f46a725188d76ad2bc6f6d284e0a9", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/41e6aa65396f46a725188d76ad2bc6f6d284e0a9", "committedDate": "2020-03-19T14:27:00Z", "message": "APPSERV-59 fixes the REST API to exporter connection and JSON GET nesting for 'all metrics by scope'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8b91d0740bf350b16e79be8b057485d729b8e27", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/e8b91d0740bf350b16e79be8b057485d729b8e27", "committedDate": "2020-03-20T14:34:43Z", "message": "APPSERV-59 fixes misunderstanding on class level annotation naming rules and CDI setup (mostly)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f70304a4344e41ca4c6e6db7699e61ba54561b46", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/f70304a4344e41ca4c6e6db7699e61ba54561b46", "committedDate": "2020-03-20T15:36:09Z", "message": "APPSERV-59 fixes unit to Metadata from annotation for none, Gauge annotation Nonbinding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be3244f325ed7da3f4623db34e3e9c688ccb8d11", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/be3244f325ed7da3f4623db34e3e9c688ccb8d11", "committedDate": "2020-03-20T19:56:07Z", "message": "APPSERV-59 fixes CDI Metric qualifier setup, fixes display name inconsistency\n\nSigned-off-by: Jan Bernitt <jaanbernitt@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e33890e1d5fcf3cf5713ebc320c3e41c159ed41", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/9e33890e1d5fcf3cf5713ebc320c3e41c159ed41", "committedDate": "2020-03-30T13:50:40Z", "message": "fixes (work-around) CDI InjectionPoint implementation issue for parameter injecton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "996464eaa02a992b2527704565ec6019f0ad7ede", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/996464eaa02a992b2527704565ec6019f0ad7ede", "committedDate": "2020-03-31T08:11:57Z", "message": "APPSERV-59 removes unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a601cdac301b1cece9b51949a54ab8a74f919d7", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/0a601cdac301b1cece9b51949a54ab8a74f919d7", "committedDate": "2020-03-31T08:12:36Z", "message": "Merge branch 'master' into APPSERV-59-mp-metrics-2.3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf3bbe030229c6453d9573488ed3fdee45359fe7", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/bf3bbe030229c6453d9573488ed3fdee45359fe7", "committedDate": "2020-03-31T09:18:34Z", "message": "APPSERV-59 work around gauge discovery order dependency with lazy gauge proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c0c5adc2a5b5aa0b50933090feae09f6bc47924", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/0c0c5adc2a5b5aa0b50933090feae09f6bc47924", "committedDate": "2020-03-31T11:54:52Z", "message": "APPSERV-59 fixes details in OpenMetrics and Json export formatting; fixes config source order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41df514bd1d463f25d98628e522c523c9bb481d1", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/41df514bd1d463f25d98628e522c523c9bb481d1", "committedDate": "2020-03-31T12:17:19Z", "message": "APPSERV-59 updates copyright headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/0218a1d184a40eb72cba256eaf4ceecfa845ae0b", "committedDate": "2020-03-31T15:37:33Z", "message": "Merge branch 'master' into APPSERV-59-mp-metrics-2.3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjY0ODQ4", "url": "https://github.com/payara/Payara/pull/4582#pullrequestreview-386264848", "createdAt": "2020-04-02T09:42:36Z", "commit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0MjozNlrOF_jZkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0NzoyMlrOF_loHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDU5NQ==", "bodyText": "What's the thought behind this method name? It doesn't quite gel with me.\nAnnotationReader.reading(annotation).???\nMy IDE doesn't find any usages for me to compare against.", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402184595", "createdAt": "2020-04-02T09:42:36Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/AnnotationReader.java", "diffHunk": "@@ -0,0 +1,790 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.metrics.cdi;\n+\n+import static java.util.Arrays.asList;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.lang.reflect.Type;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import javax.enterprise.inject.spi.Annotated;\n+import javax.enterprise.inject.spi.AnnotatedMember;\n+import javax.enterprise.inject.spi.AnnotatedParameter;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+import org.eclipse.microprofile.metrics.annotation.Gauge;\n+import org.eclipse.microprofile.metrics.annotation.Metered;\n+import org.eclipse.microprofile.metrics.annotation.Metric;\n+import org.eclipse.microprofile.metrics.annotation.SimplyTimed;\n+import org.eclipse.microprofile.metrics.annotation.Timed;\n+\n+/**\n+ * Utility that allows reading the different MP metrics {@link Annotation}s from different annotated abstractions\n+ * providing a common interface to allow generic handling and a common logic independent of the source of the\n+ * {@link Annotation}.\n+ *\n+ * Supported are:\n+ * <ul>\n+ * <li>{@link AnnotatedElement}</li>\n+ * <li>{@link Annotated}</li>\n+ * <li>{@link InjectionPoint}</li>\n+ * </ul>\n+ *\n+ * It is important to realise that {@link Annotated} and {@link InjectionPoint} have to be used as a source when\n+ * available as they allow to add or remove {@link Annotation} effectively acting as a runtime override of the compiled\n+ * information provided by {@link AnnotatedElement}.\n+ *\n+ * This utility also encodes most of the logic as defined by the MP Metrics specification. This includes the logic of\n+ * which annotation applied and how the metrics effective name if computed from annotation values and the annotated\n+ * element. For this reason the methods are documented in great detail.\n+ *\n+ * @author Jan Bernitt\n+ * @since 5.202\n+ *\n+ * @param <T> Type of the MP metrics annotation\n+ */\n+public final class AnnotationReader<T extends Annotation> {\n+\n+    /**\n+     * Get {@link AnnotationReader} for a provided {@link Annotation}.\n+     *\n+     * @param annotationType\n+     * @return The {@link AnnotationReader} for the provided {@link Annotation} type\n+     * @throws IllegalAccessException In case no such reader exists\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends Annotation> AnnotationReader<T> reading(Class<T> annotationType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5OTYwMA==", "bodyText": "Not a fan of this name - it sounds like a method.\nHow about simply MetricGetter or GenericMetricRegistry?\nYou could always go with the super generic MetricUtils \ud83d\ude04\nMore controversially would it work to move this into MetricsService?", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402199600", "createdAt": "2020-04-02T10:07:52Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/MetricGetOrRegister.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.metrics.cdi;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+\n+/**\n+ * Unfortunately the {@link MetricRegistry} has no generic versions of the get or register methods for the different\n+ * types of {@link Metric}s. Therefore this utility provides a generic API by mapping the generic methods to the type\n+ * specific ones.\n+ *\n+ * @author Jan Bernitt\n+ * @since 5.202\n+ */\n+public final class MetricGetOrRegister<T extends Metric> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIwMTcyNA==", "bodyText": "How much effort is it to do this?", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402201724", "createdAt": "2020-04-02T10:11:41Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/interceptor/AbstractInterceptor.java", "diffHunk": "@@ -96,10 +101,13 @@ private Object timeoutInvocation(InvocationContext context) throws Exception {\n     private <E extends Member & AnnotatedElement> Object preInterceptor(InvocationContext context, E element) throws Exception {\n         initService();\n         if (metricsService.isEnabled()) {\n+            //FIXME there is an issue here: the element does not correctly reflect the updated annotations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNDc3Mw==", "bodyText": "I'm probably overlooking something, but why aren't you simply creating the AnnotationReader as the associated type?\nAnnotationReader<HISTOGRAM>", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402214773", "createdAt": "2020-04-02T10:35:18Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/producer/MetricProducer.java", "diffHunk": "@@ -51,105 +52,67 @@\n import org.eclipse.microprofile.metrics.Histogram;\n import org.eclipse.microprofile.metrics.Meter;\n import org.eclipse.microprofile.metrics.MetricRegistry;\n-import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n import org.eclipse.microprofile.metrics.Timer;\n import org.eclipse.microprofile.metrics.annotation.Metric;\n \n @Dependent\n public class MetricProducer {\n \n-    @Inject\n-    private MetricRegistry registry;\n+    private static final AnnotationReader<Metric> COUNTER = AnnotationReader.METRIC.asType(MetricType.COUNTER);\n+    private static final AnnotationReader<Metric> CONCURRENT_GAUGE = AnnotationReader.METRIC.asType(MetricType.CONCURRENT_GAUGE);\n+    private static final AnnotationReader<Metric> GAUGE = AnnotationReader.METRIC.asType(MetricType.GAUGE);\n+    private static final AnnotationReader<Metric> HISTOGRAM = AnnotationReader.METRIC.asType(MetricType.HISTOGRAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzE2OA==", "bodyText": "I know it's not a part of this PR, but this is a horribly named class \ud83d\ude02\nCan we not simply call it ExponentiallyWeightedMovingAverage?", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402217168", "createdAt": "2020-04-02T10:39:44Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/impl/EWMA.java", "diffHunk": "@@ -1,8 +1,8 @@\n /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n- * \n- *    Copyright (c) [2018] Payara Foundation and/or its affiliates. All rights reserved.\n- * \n+ *\n+ *    Copyright (c) [2018-2020] Payara Foundation and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMTA4NA==", "bodyText": "I take it this is required somewhere?\nIt doesn't seem to be used in any comparison.", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402221084", "createdAt": "2020-04-02T10:47:22Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/impl/MetricRegistryImpl.java", "diffHunk": "@@ -341,11 +383,16 @@ public void removeMatching(MetricFilter filter) {\n \n     private <T extends Metric> T findMetricOrCreate(String name, MetricType metricType, Tag... tags) {\n         checkNameIsNotNullOrEmpty(name);\n-        return findMetricOrCreate(Metadata.builder().withName(name).withType(metricType).build(), true, tags);\n+        Metadata metadata = Metadata.builder()\n+                .withName(name)\n+                .withType(metricType)\n+                .withOptionalDisplayName(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 202}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ce0dd855575f9f78e83e3b451dbee070368dba9", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/4ce0dd855575f9f78e83e3b451dbee070368dba9", "committedDate": "2020-04-02T12:28:38Z", "message": "APPSERV-59 renamed classes and methods as suggested by review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4cdc26fe6aaa895e558dee3e191451d9a309af2", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/a4cdc26fe6aaa895e558dee3e191451d9a309af2", "committedDate": "2020-04-02T12:28:56Z", "message": "Merge branch 'APPSERV-59-mp-metrics-2.3' of github.com:jbee/Payara into APPSERV-59-mp-metrics-2.3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDkwODE4", "url": "https://github.com/payara/Payara/pull/4582#pullrequestreview-386490818", "createdAt": "2020-04-02T14:36:56Z", "commit": {"oid": "a4cdc26fe6aaa895e558dee3e191451d9a309af2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 782, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}