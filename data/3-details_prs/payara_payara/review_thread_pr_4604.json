{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3Njg2OTg1", "number": 4604, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozMTo0N1rODuTQJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo0NTo0NFrODuTj9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODc2NTE3OnYy", "diffSide": "RIGHT", "path": "appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/impl/CommandResultWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozMTo0N1rOGANzbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozMTo0N1rOGANzbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3OTM0MQ==", "bodyText": "I'd think of this as an adapter.", "url": "https://github.com/payara/Payara/pull/4604#discussion_r402879341", "createdAt": "2020-04-03T09:31:47Z", "author": {"login": "jbee"}, "path": "appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/impl/CommandResultWrapper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *    Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *    The contents of this file are subject to the terms of either the GNU\n+ *    General Public License Version 2 only (\"GPL\") or the Common Development\n+ *    and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *    may not use this file except in compliance with the License.  You can\n+ *    obtain a copy of the License at\n+ *    https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *    See the License for the specific\n+ *    language governing permissions and limitations under the License.\n+ *\n+ *    When distributing the software, include this License Header Notice in each\n+ *    file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *    GPL Classpath Exception:\n+ *    The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *    exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *    file that accompanied this code.\n+ *\n+ *    Modifications:\n+ *    If applicable, add the following below the License Header, with the fields\n+ *    enclosed by brackets [] replaced by your own identifying information:\n+ *    \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *    Contributor(s):\n+ *    If you wish your version of this file to be governed by only the CDDL or\n+ *    only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *    elects to include this software in this distribution under the [CDDL or GPL\n+ *    Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *    recipient has the option to distribute your version of this file under\n+ *    either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *    its licensees as provided above.  However, if you add GPL Version 2 code\n+ *    and therefore, elected the GPL Version 2 license, then the option applies\n+ *    only if the new code is made subject to such option by the copyright\n+ *    holder.\n+ */\n+\n+package fish.payara.micro.impl;\n+\n+import fish.payara.micro.ClusterCommandResult;\n+import org.glassfish.embeddable.CommandResult;\n+\n+class CommandResultWrapper implements ClusterCommandResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abfc105ff45ac4c0bcd46ea10e865417f7d93d7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODc5MDQyOnYy", "diffSide": "RIGHT", "path": "appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/impl/PayaraMicroImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozODo0OVrOGAOC_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjo0OTozNVrOGBJ2bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzMyNQ==", "bodyText": "Don't know how the dependencies look like but it might be possible to have CommandRunner implement AdminCommandRunner and have CommandResult implement ClusterCommandResult.", "url": "https://github.com/payara/Payara/pull/4604#discussion_r402883325", "createdAt": "2020-04-03T09:38:49Z", "author": {"login": "jbee"}, "path": "appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/impl/PayaraMicroImpl.java", "diffHunk": "@@ -1077,6 +1056,13 @@ public PayaraMicroRuntime bootStrap() throws BootstrapException {\n         }\n     }\n \n+    private void callHandler(Consumer<AdminCommandRunner> handler) throws GlassFishException {\n+        CommandRunner runner = gf.getCommandRunner();\n+        if (handler != null) {\n+            handler.accept((cmd, args) -> new CommandResultWrapper(runner.run(cmd, args)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abfc105ff45ac4c0bcd46ea10e865417f7d93d7"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2MzE0OA==", "bodyText": "Unfortunately those are part of Embedded API, and we don't want embedded to be dependant on Micro, or vice versa. Also that embedded API is public API since Glassfish 3 and adding inheritance would break compatibility. Especially problematic one is CommandResult.ExitStatus which is an enum.", "url": "https://github.com/payara/Payara/pull/4604#discussion_r403863148", "createdAt": "2020-04-06T06:49:35Z", "author": {"login": "pdudits"}, "path": "appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/impl/PayaraMicroImpl.java", "diffHunk": "@@ -1077,6 +1056,13 @@ public PayaraMicroRuntime bootStrap() throws BootstrapException {\n         }\n     }\n \n+    private void callHandler(Consumer<AdminCommandRunner> handler) throws GlassFishException {\n+        CommandRunner runner = gf.getCommandRunner();\n+        if (handler != null) {\n+            handler.accept((cmd, args) -> new CommandResultWrapper(runner.run(cmd, args)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzMyNQ=="}, "originalCommit": {"oid": "2abfc105ff45ac4c0bcd46ea10e865417f7d93d7"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODgxMjY3OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/test/java/fish/payara/microprofile/faulttolerance/policy/AbstractBulkheadTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo0NDo0N1rOGAOQKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo0NDo0N1rOGAOQKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4NjY5Ng==", "bodyText": "As discussed I believe the issue here is that the async worker entering and exiting the bulkhead also sets the result in test code after having left the bulkhead. At that point the main thread can see all workers exited the bulkhead and starts to assert but there is no synchronisation forcing it to wait until the worker also has set its result. This part has to be outside of the bulkhead. So a proper fix is to introduce some kind of waiting in the main thread that keeps track of the workers and if they have set the result. This is by no means a request to do such a change in this PR but meant to document the issue. We should address it in a separate PR.", "url": "https://github.com/payara/Payara/pull/4604#discussion_r402886696", "createdAt": "2020-04-03T09:44:47Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/test/java/fish/payara/microprofile/faulttolerance/policy/AbstractBulkheadTest.java", "diffHunk": "@@ -134,7 +134,7 @@ public void delay(long delayMillis) throws InterruptedException {\n     static class InOut {\n         static final Object IN = new Object();\n \n-        Object result;\n+        volatile Object result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abfc105ff45ac4c0bcd46ea10e865417f7d93d7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODgxNTg5OnYy", "diffSide": "RIGHT", "path": "appserver/extras/payara-micro/payara-micro-boot/src/main/java/fish/payara/micro/boot/AdminCommandRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo0NTo0NFrOGAOSHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo0NTo0NFrOGAOSHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4NzE5Nw==", "bodyText": "A javadoc on what this runner does or where its roll is compared to other runners and why this is needed would be nice.", "url": "https://github.com/payara/Payara/pull/4604#discussion_r402887197", "createdAt": "2020-04-03T09:45:44Z", "author": {"login": "jbee"}, "path": "appserver/extras/payara-micro/payara-micro-boot/src/main/java/fish/payara/micro/boot/AdminCommandRunner.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ *    Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ *    The contents of this file are subject to the terms of either the GNU\n+ *    General Public License Version 2 only (\"GPL\") or the Common Development\n+ *    and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *    may not use this file except in compliance with the License.  You can\n+ *    obtain a copy of the License at\n+ *    https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *    See the License for the specific\n+ *    language governing permissions and limitations under the License.\n+ *\n+ *    When distributing the software, include this License Header Notice in each\n+ *    file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ *    GPL Classpath Exception:\n+ *    The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *    exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *    file that accompanied this code.\n+ *\n+ *    Modifications:\n+ *    If applicable, add the following below the License Header, with the fields\n+ *    enclosed by brackets [] replaced by your own identifying information:\n+ *    \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ *    Contributor(s):\n+ *    If you wish your version of this file to be governed by only the CDDL or\n+ *    only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *    elects to include this software in this distribution under the [CDDL or GPL\n+ *    Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *    recipient has the option to distribute your version of this file under\n+ *    either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *    its licensees as provided above.  However, if you add GPL Version 2 code\n+ *    and therefore, elected the GPL Version 2 license, then the option applies\n+ *    only if the new code is made subject to such option by the copyright\n+ *    holder.\n+ */\n+\n+package fish.payara.micro.boot;\n+\n+import fish.payara.micro.ClusterCommandResult;\n+\n+public interface AdminCommandRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abfc105ff45ac4c0bcd46ea10e865417f7d93d7"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1328, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}