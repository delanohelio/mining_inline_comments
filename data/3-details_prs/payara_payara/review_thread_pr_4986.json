{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NDI1NDk2", "number": 4986, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTozNDoxNFrOE3oGkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTozNDoxNFrOE3oGkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzY0MTc5OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/healthcheck/src/main/java/fish/payara/microprofile/healthcheck/HealthCheckService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTozNDoxNFrOHxFXEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo0Njo0OVrOHxQPtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIzMDA5Nw==", "bodyText": "Can't wrap my head around this one. How is an empty modifiable map of any use? Why would a concurrent map be wrong in a shared service? How is this only applying to health and not equally to readiness and liveness?\nMaybe you can shine some light on this for me.", "url": "https://github.com/payara/Payara/pull/4986#discussion_r521230097", "createdAt": "2020-11-11T09:34:14Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/healthcheck/src/main/java/fish/payara/microprofile/healthcheck/HealthCheckService.java", "diffHunk": "@@ -116,16 +115,11 @@\n     private ApplicationRegistry applicationRegistry;\n \n     @Inject\n-    private MetricsHealthCheckConfiguration configuration;\n-\n-    @Inject\n-    private ConfigProviderResolver microConfigResolver;\n-\n-    private boolean backwardCompEnabled;\n+    private MicroprofileHealthCheckConfiguration configuration;\n \n     private static final Logger LOG = Logger.getLogger(HealthCheckService.class.getName());\n \n-    private final Map<String, Set<HealthCheck>> health = new ConcurrentHashMap<>();\n+    private final Map<String, Set<HealthCheck>> health = unmodifiableMap(new HashMap<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5714744023ca96ec57c9f11387dec8df721c97d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQwODQzNg==", "bodyText": "I did it in the interest of \"non invasive changes\" whilst still trying to make it clear that this isn't modified anymore. Perhaps it would be more readable if I just use an explicit new HashMap each time instead. I'll refactor this", "url": "https://github.com/payara/Payara/pull/4986#discussion_r521408436", "createdAt": "2020-11-11T14:46:49Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/microprofile/healthcheck/src/main/java/fish/payara/microprofile/healthcheck/HealthCheckService.java", "diffHunk": "@@ -116,16 +115,11 @@\n     private ApplicationRegistry applicationRegistry;\n \n     @Inject\n-    private MetricsHealthCheckConfiguration configuration;\n-\n-    @Inject\n-    private ConfigProviderResolver microConfigResolver;\n-\n-    private boolean backwardCompEnabled;\n+    private MicroprofileHealthCheckConfiguration configuration;\n \n     private static final Logger LOG = Logger.getLogger(HealthCheckService.class.getName());\n \n-    private final Map<String, Set<HealthCheck>> health = new ConcurrentHashMap<>();\n+    private final Map<String, Set<HealthCheck>> health = unmodifiableMap(new HashMap<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIzMDA5Nw=="}, "originalCommit": {"oid": "e5714744023ca96ec57c9f11387dec8df721c97d"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1159, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}