{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNDk1Mzkz", "number": 4548, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTo1OToyM1rODpzxwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDowMDowN1rODpzyjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTY2NTMwOnYy", "diffSide": "RIGHT", "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeSshCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTo1OToyM1rOF5NjHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDoxNTo0OFrOF5OA-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTEzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Param(name = \"sshauthtype\", optional=true)\n          \n          \n            \n                @Param(name = \"sshauthtype\", optional = true)\n          \n      \n    \n    \n  \n\n\u0ca0_\u0ca0", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395535132", "createdAt": "2020-03-20T09:59:23Z", "author": {"login": "Pandrex247"}, "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeSshCommand.java", "diffHunk": "@@ -72,6 +73,9 @@\n     private String sshportInSubClass;\n     @Param(name = \"sshuser\", optional = true)\n     private String sshuserInSubClass;\n+    /** {@link SshAuthType} name */\n+    @Param(name = \"sshauthtype\", optional=true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13adba24347055d1bd6b63a1c204fb6c92a28d54"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0Mjc3Nw==", "bodyText": "Copy paste effect from another class \ud83d\udc83\nI agree :-)", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395542777", "createdAt": "2020-03-20T10:15:48Z", "author": {"login": "dmatej"}, "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeSshCommand.java", "diffHunk": "@@ -72,6 +73,9 @@\n     private String sshportInSubClass;\n     @Param(name = \"sshuser\", optional = true)\n     private String sshuserInSubClass;\n+    /** {@link SshAuthType} name */\n+    @Param(name = \"sshauthtype\", optional=true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTEzMg=="}, "originalCommit": {"oid": "13adba24347055d1bd6b63a1c204fb6c92a28d54"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTY2Njg5OnYy", "diffSide": "RIGHT", "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTo1OTo1NlrOF5NkLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzoxMDozOFrOF5TBkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n          \n          \n            \n                            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE,", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395535405", "createdAt": "2020-03-20T09:59:56Z", "author": {"login": "Pandrex247"}, "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java", "diffHunk": "@@ -203,21 +203,28 @@ private ParameterMap createValidationParameters(final Node node) {\n \n         final SshAuth ssha = sshc.getSshAuth();\n         parameters.insert(NodeUtils.PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n-\n-        if (sshkeyfile == null && remotepassword == null) {\n-            // use previous values if they are set\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n-        } else if (sshkeyfile == null) {\n-            // keyfile is preferred over password.\n-            // if keyfile is not set, configure password.\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+        parameters.insert(NodeUtils.PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n+\n+        if (sshAuthType == null) {\n+            if (sshkeyfile == null && remotepassword == null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n+            } else if (remotepassword != null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+            } else {\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13adba24347055d1bd6b63a1c204fb6c92a28d54"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU2OTAxOQ==", "bodyText": "Disagree. This prevents random reformatting to less readable code and it is still less annoying than using // @formatter:off (supported by Eclipse and Idea, but ugly)", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395569019", "createdAt": "2020-03-20T11:10:52Z", "author": {"login": "dmatej"}, "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java", "diffHunk": "@@ -203,21 +203,28 @@ private ParameterMap createValidationParameters(final Node node) {\n \n         final SshAuth ssha = sshc.getSshAuth();\n         parameters.insert(NodeUtils.PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n-\n-        if (sshkeyfile == null && remotepassword == null) {\n-            // use previous values if they are set\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n-        } else if (sshkeyfile == null) {\n-            // keyfile is preferred over password.\n-            // if keyfile is not set, configure password.\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+        parameters.insert(NodeUtils.PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n+\n+        if (sshAuthType == null) {\n+            if (sshkeyfile == null && remotepassword == null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n+            } else if (remotepassword != null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+            } else {\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQwNQ=="}, "originalCommit": {"oid": "13adba24347055d1bd6b63a1c204fb6c92a28d54"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4MTUzMA==", "bodyText": "Better to properly configure formatter than this kind of hacky comments. We used to do this too, but it is just a pain in the... if you have to refactor this kind of \"prettyfied\" code.", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395581530", "createdAt": "2020-03-20T11:38:46Z", "author": {"login": "sgflt"}, "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java", "diffHunk": "@@ -203,21 +203,28 @@ private ParameterMap createValidationParameters(final Node node) {\n \n         final SshAuth ssha = sshc.getSshAuth();\n         parameters.insert(NodeUtils.PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n-\n-        if (sshkeyfile == null && remotepassword == null) {\n-            // use previous values if they are set\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n-        } else if (sshkeyfile == null) {\n-            // keyfile is preferred over password.\n-            // if keyfile is not set, configure password.\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+        parameters.insert(NodeUtils.PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n+\n+        if (sshAuthType == null) {\n+            if (sshkeyfile == null && remotepassword == null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n+            } else if (remotepassword != null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+            } else {\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQwNQ=="}, "originalCommit": {"oid": "13adba24347055d1bd6b63a1c204fb6c92a28d54"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxNjA1OQ==", "bodyText": "Some formatting cannot be done automatically. I don't see any possible issue with refactoring.\nI assume you only configured your editor to NOT formatting. Or tell me more, better on chat :)", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395616059", "createdAt": "2020-03-20T12:53:56Z", "author": {"login": "dmatej"}, "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java", "diffHunk": "@@ -203,21 +203,28 @@ private ParameterMap createValidationParameters(final Node node) {\n \n         final SshAuth ssha = sshc.getSshAuth();\n         parameters.insert(NodeUtils.PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n-\n-        if (sshkeyfile == null && remotepassword == null) {\n-            // use previous values if they are set\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n-        } else if (sshkeyfile == null) {\n-            // keyfile is preferred over password.\n-            // if keyfile is not set, configure password.\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+        parameters.insert(NodeUtils.PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n+\n+        if (sshAuthType == null) {\n+            if (sshkeyfile == null && remotepassword == null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n+            } else if (remotepassword != null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+            } else {\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQwNQ=="}, "originalCommit": {"oid": "13adba24347055d1bd6b63a1c204fb6c92a28d54"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyNDg0OA==", "bodyText": "Compromise: static imports -> no need for formatting.", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395624848", "createdAt": "2020-03-20T13:10:38Z", "author": {"login": "dmatej"}, "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java", "diffHunk": "@@ -203,21 +203,28 @@ private ParameterMap createValidationParameters(final Node node) {\n \n         final SshAuth ssha = sshc.getSshAuth();\n         parameters.insert(NodeUtils.PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n-\n-        if (sshkeyfile == null && remotepassword == null) {\n-            // use previous values if they are set\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n-        } else if (sshkeyfile == null) {\n-            // keyfile is preferred over password.\n-            // if keyfile is not set, configure password.\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+        parameters.insert(NodeUtils.PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n+\n+        if (sshAuthType == null) {\n+            if (sshkeyfile == null && remotepassword == null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n+            } else if (remotepassword != null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+            } else {\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQwNQ=="}, "originalCommit": {"oid": "13adba24347055d1bd6b63a1c204fb6c92a28d54"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTY2NzMyOnYy", "diffSide": "RIGHT", "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDowMDowN1rOF5Nkfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDowMDowN1rOF5Nkfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzNTQ4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n          \n          \n            \n                            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE,", "url": "https://github.com/payara/Payara/pull/4548#discussion_r395535487", "createdAt": "2020-03-20T10:00:07Z", "author": {"login": "Pandrex247"}, "path": "nucleus/cluster/admin/src/main/java/com/sun/enterprise/v3/admin/cluster/UpdateNodeRemoteCommand.java", "diffHunk": "@@ -203,21 +203,28 @@ private ParameterMap createValidationParameters(final Node node) {\n \n         final SshAuth ssha = sshc.getSshAuth();\n         parameters.insert(NodeUtils.PARAM_REMOTEUSER, remoteUser, getSupplier(ssha, ssha::getUserName));\n-\n-        if (sshkeyfile == null && remotepassword == null) {\n-            // use previous values if they are set\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n-        } else if (sshkeyfile == null) {\n-            // keyfile is preferred over password.\n-            // if keyfile is not set, configure password.\n-            parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+        parameters.insert(NodeUtils.PARAM_SSHAUTHTYPE, sshAuthType, getSupplier(ssha, () -> null));\n+\n+        if (sshAuthType == null) {\n+            if (sshkeyfile == null && remotepassword == null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, null, getSupplier(ssha, ssha::getPassword));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, null, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, null, getSupplier(ssha, ssha::getKeyPassphrase));\n+            } else if (remotepassword != null) {\n+                parameters.insert(NodeUtils.PARAM_SSHPASSWORD, remotepassword, getSupplier(ssha, ssha::getPassword));\n+            } else {\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n+                    sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n+            }\n         } else {\n-            // if keyfile is set, don't configure password.\n-            parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n-            parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //\n-                sshkeypassphrase, getSupplier(ssha, ssha::getKeyPassphrase));\n+            if (SshAuthType.KEY.name().equals(sshAuthType)) {\n+                parameters.insert(NodeUtils.PARAM_SSHKEYFILE, sshkeyfile, getSupplier(ssha, ssha::getKeyfile));\n+                parameters.insert(NodeUtils.PARAM_SSHKEYPASSPHRASE, //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13adba24347055d1bd6b63a1c204fb6c92a28d54"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1308, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}