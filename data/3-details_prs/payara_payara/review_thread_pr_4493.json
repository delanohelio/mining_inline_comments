{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDAzNDA1", "number": 4493, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo1MTo0OFrODh1tzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMToxMjoxN1rODh2DSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODA5Njc2OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo1MTo0OFrOFszCUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo1MTo0OFrOFszCUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNzg0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <version>1.0-SNAPSHOT</version>\n          \n      \n    \n    \n  \n\nPresumably isn't needed due to dependency management", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382517840", "createdAt": "2020-02-21T10:51:48Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/pom.xml", "diffHunk": "@@ -85,6 +85,11 @@\n             <artifactId>requesttracing-core</artifactId>\n             <version>${project.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>fish.payara.monitoring-console</groupId>\n+            <artifactId>api</artifactId>\n+            <version>1.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODA5NzI4OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/metrics/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo1MjowMVrOFszCqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMToxODowN1rOFsztzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNzkzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <version>1.0-SNAPSHOT</version>\n          \n      \n    \n    \n  \n\nPresumably isn't needed due to dependencyManagement.", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382517931", "createdAt": "2020-02-21T10:52:01Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/pom.xml", "diffHunk": "@@ -108,5 +108,10 @@\n             <groupId>jakarta.platform</groupId>\n             <artifactId>jakarta.jakartaee-api</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>fish.payara.monitoring-console</groupId>\n+            <artifactId>api</artifactId>\n+            <version>1.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyODk3Mg==", "bodyText": "Yes, missed to clean this after I added the property. \ud83d\ude44", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382528972", "createdAt": "2020-02-21T11:18:07Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/pom.xml", "diffHunk": "@@ -108,5 +108,10 @@\n             <groupId>jakarta.platform</groupId>\n             <artifactId>jakarta.jakartaee-api</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>fish.payara.monitoring-console</groupId>\n+            <artifactId>api</artifactId>\n+            <version>1.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNzkzMQ=="}, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODEwNDg5OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo1NDozOFrOFszHYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo1NDozOFrOFszHYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxOTEzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    </dependencies>\n          \n          \n            \n                </dependencies>\n          \n      \n    \n    \n  \n\n\ud83e\udd14", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382519139", "createdAt": "2020-02-21T10:54:38Z", "author": {"login": "Pandrex247"}, "path": "nucleus/common/internal-api/pom.xml", "diffHunk": "@@ -145,5 +145,5 @@\n             <version>${mockito.version}</version>\n             <scope>test</scope>\n         </dependency>\n-    </dependencies>\n+        </dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODExMDY4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo1NjozMFrOFszK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMToyOToxMVrOFsz-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMDA1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    <monitoring-console-process.version>1.0-SNAPSHOT</monitoring-console-process.version>\n          \n          \n            \n                    <monitoring-console-process.version>1.0</monitoring-console-process.version>\n          \n      \n    \n    \n  \n\nPresumably this should be 1.0?", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382520050", "createdAt": "2020-02-21T10:56:30Z", "author": {"login": "Pandrex247"}, "path": "pom.xml", "diffHunk": "@@ -205,6 +205,9 @@\n         <concurrent-api.version>1.1.2</concurrent-api.version>\n         <concurrent.version>1.0.payara-p2</concurrent.version>\n         <asm.version>7.2</asm.version>\n+        <monitoring-console-api.version>1.0</monitoring-console-api.version>\n+        <monitoring-console-process.version>1.0-SNAPSHOT</monitoring-console-process.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzMzIwNQ==", "bodyText": "Yes, during development I used SNAPSHOT but now it should be 1.0. I also changes the webapp version to 1.0.", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382533205", "createdAt": "2020-02-21T11:29:11Z", "author": {"login": "jbee"}, "path": "pom.xml", "diffHunk": "@@ -205,6 +205,9 @@\n         <concurrent-api.version>1.1.2</concurrent-api.version>\n         <concurrent.version>1.0.payara-p2</concurrent.version>\n         <asm.version>7.2</asm.version>\n+        <monitoring-console-api.version>1.0</monitoring-console-api.version>\n+        <monitoring-console-process.version>1.0-SNAPSHOT</monitoring-console-process.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMDA1MA=="}, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODExMTE2OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo1Njo0MVrOFszLQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo1Njo0MVrOFszLQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMDEyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    <monitoring-console-webapp.version>1.0-SNAPSHOT</monitoring-console-webapp.version>\n          \n          \n            \n                    <monitoring-console-webapp.version>1.0</monitoring-console-webapp.version>\n          \n      \n    \n    \n  \n\nDitto", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382520129", "createdAt": "2020-02-21T10:56:41Z", "author": {"login": "Pandrex247"}, "path": "pom.xml", "diffHunk": "@@ -205,6 +205,9 @@\n         <concurrent-api.version>1.1.2</concurrent-api.version>\n         <concurrent.version>1.0.payara-p2</concurrent.version>\n         <asm.version>7.2</asm.version>\n+        <monitoring-console-api.version>1.0</monitoring-console-api.version>\n+        <monitoring-console-process.version>1.0-SNAPSHOT</monitoring-console-process.version>\n+        <monitoring-console-webapp.version>1.0-SNAPSHOT</monitoring-console-webapp.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODE1MTc3OnYy", "diffSide": "RIGHT", "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/runtime/MonitoringConsoleRuntimeImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMToxMjoxN1rOFszkvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjoyMDoyMlrOFs1JuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNjY1NQ==", "bodyText": "Am I understanding this correctly? It seems off to me.\nSo if Hazelcast isn't enabled, despite an instance for example being called \"Insty1\", it will go to the MonitoringConsoleFactory and eventually get given an InMemorySeriesRepository which registers the instance name as server and adds that name to its set of instances.\nIs that correct? I haven't dug deep down into the guts but an instance registering itself with an incorrect name perked an eyebrow \ud83e\udd14", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382526655", "createdAt": "2020-02-21T11:12:17Z", "author": {"login": "Pandrex247"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/runtime/MonitoringConsoleRuntimeImpl.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.monitoring.runtime;\n+\n+import static java.lang.Boolean.parseBoolean;\n+import static java.util.Collections.emptyList;\n+import static org.jvnet.hk2.config.Dom.unwrap;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.glassfish.api.ActionReport;\n+import org.glassfish.api.admin.CommandRunner;\n+import org.glassfish.api.admin.CommandRunner.CommandInvocation;\n+import org.glassfish.api.admin.ParameterMap;\n+import org.glassfish.api.admin.ServerEnvironment;\n+import org.glassfish.api.event.EventListener;\n+import org.glassfish.api.event.EventTypes;\n+import org.glassfish.api.event.Events;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.glassfish.internal.api.InternalSystemAdministrator;\n+import org.glassfish.internal.deployment.ApplicationLifecycleInterceptor;\n+import org.glassfish.internal.deployment.ExtendedDeploymentContext;\n+import org.glassfish.internal.deployment.ExtendedDeploymentContext.Phase;\n+import org.jvnet.hk2.annotations.Service;\n+import org.jvnet.hk2.config.ConfigBeanProxy;\n+import org.jvnet.hk2.config.ConfigListener;\n+import org.jvnet.hk2.config.UnprocessedChangeEvents;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.ITopic;\n+import com.sun.enterprise.config.serverbeans.Config;\n+import com.sun.enterprise.config.serverbeans.Domain;\n+import com.sun.enterprise.config.serverbeans.MonitoringService;\n+\n+import fish.payara.monitoring.adapt.GroupData;\n+import fish.payara.monitoring.adapt.GroupDataRepository;\n+import fish.payara.monitoring.adapt.MonitoringConsole;\n+import fish.payara.monitoring.adapt.MonitoringConsoleFactory;\n+import fish.payara.monitoring.adapt.MonitoringConsoleRuntime;\n+import fish.payara.monitoring.adapt.MonitoringConsoleWatchConfig;\n+import fish.payara.monitoring.collect.MonitoringDataSource;\n+import fish.payara.monitoring.collect.MonitoringWatchSource;\n+import fish.payara.monitoring.configuration.MonitoringConsoleConfiguration;\n+import fish.payara.notification.requesttracing.RequestTrace;\n+import fish.payara.notification.requesttracing.RequestTraceSpan;\n+import fish.payara.nucleus.executorservice.PayaraExecutorService;\n+import fish.payara.nucleus.hazelcast.HazelcastCore;\n+import fish.payara.nucleus.requesttracing.RequestTracingService;\n+\n+/**\n+ * This implementation of the {@link MonitoringConsoleRuntime} connects the Payara independent parts of the monitoring\n+ * console with the Payara server.\n+ * \n+ * The most complicated aspect about the implementation is the way it is bootstrapped. By implementing\n+ * {@link ApplicationLifecycleInterceptor} it forces the creation of an instance of this {@link Service} even though it\n+ * is not otherwise referenced within the HK2 context. As this happens fairly early in the bootstrapping it then\n+ * registers itself as an {@link EventListener} so that it can run its actual {@link #init()} bootstrapping as soon as\n+ * the {@link EventTypes#SERVER_READY} is received. This makes sure the bootstrapping of the console runtime does not\n+ * alter the order of services created by starting to collect data from services that implement\n+ * {@link MonitoringDataSource} or {@link MonitoringWatchSource}.\n+ * \n+ * @author Jan Bernitt\n+ * @since 5.201\n+ */\n+@Service\n+public class MonitoringConsoleRuntimeImpl\n+        implements ConfigListener, ApplicationLifecycleInterceptor, EventListener,\n+        MonitoringConsoleRuntime, MonitoringConsoleWatchConfig, GroupDataRepository {\n+\n+    private static final Logger LOGGER = Logger.getLogger(\"monitoring-console-core\");\n+\n+    private static final String SET_MONITORING_CONSOLE_CONFIGURATION_COMMAND = \"set-monitoring-console-configuration\";\n+\n+    /**\n+     * The topic name used to share data of instances with the DAS.\n+     */\n+    private static final String MONITORING_DATA_TOPIC_NAME = \"payara-monitoring-data\";\n+\n+    @Inject\n+    private PayaraExecutorService executor;\n+    @Inject\n+    private ServerEnvironment serverEnv;\n+    @Inject @Named(ServerEnvironment.DEFAULT_INSTANCE_NAME)\n+    private Config serverConfig;\n+    @Inject\n+    private Domain domain;\n+    @Inject\n+    private CommandRunner commandRunner;\n+    @Inject\n+    private InternalSystemAdministrator kernelIdentity;\n+    @Inject\n+    private HazelcastCore hazelcastCore;\n+    @Inject\n+    private RequestTracingService requestTracingService;\n+    @Inject\n+    private ServiceLocator serviceLocator;\n+    @Inject\n+    private Events events;\n+\n+    private final AtomicBoolean initialised = new AtomicBoolean();\n+    private ITopic<byte[]> exchange;\n+    private MonitoringConsoleConfiguration config;\n+    private MonitoringConsole console;\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        events.register(this);\n+    }\n+\n+    @Override\n+    public void event(Event<?> event) {\n+        if (event.is(EventTypes.SERVER_READY)) {\n+            init();\n+        }\n+    }\n+\n+    public void init() {\n+        if (!initialised.compareAndSet(false, true) ) {\n+            return;\n+        }\n+        try {\n+            LOGGER.info(\"Bootstrapping Monitoring Console Runtime\");\n+            boolean isDas = serverEnv.isDas();\n+            config = domain.getExtensionByType(MonitoringConsoleConfiguration.class);\n+            String instanceName = \"server\"; // default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUzMDI4Nw==", "bodyText": "So far I extracted the name from hazelcast from the HazelcastCore.INSTANCE_ATTRIBUTE as I found that is done at other places. Happy to use some other reliable source if you can point me at one.", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382530287", "createdAt": "2020-02-21T11:21:37Z", "author": {"login": "jbee"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/runtime/MonitoringConsoleRuntimeImpl.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.monitoring.runtime;\n+\n+import static java.lang.Boolean.parseBoolean;\n+import static java.util.Collections.emptyList;\n+import static org.jvnet.hk2.config.Dom.unwrap;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.glassfish.api.ActionReport;\n+import org.glassfish.api.admin.CommandRunner;\n+import org.glassfish.api.admin.CommandRunner.CommandInvocation;\n+import org.glassfish.api.admin.ParameterMap;\n+import org.glassfish.api.admin.ServerEnvironment;\n+import org.glassfish.api.event.EventListener;\n+import org.glassfish.api.event.EventTypes;\n+import org.glassfish.api.event.Events;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.glassfish.internal.api.InternalSystemAdministrator;\n+import org.glassfish.internal.deployment.ApplicationLifecycleInterceptor;\n+import org.glassfish.internal.deployment.ExtendedDeploymentContext;\n+import org.glassfish.internal.deployment.ExtendedDeploymentContext.Phase;\n+import org.jvnet.hk2.annotations.Service;\n+import org.jvnet.hk2.config.ConfigBeanProxy;\n+import org.jvnet.hk2.config.ConfigListener;\n+import org.jvnet.hk2.config.UnprocessedChangeEvents;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.ITopic;\n+import com.sun.enterprise.config.serverbeans.Config;\n+import com.sun.enterprise.config.serverbeans.Domain;\n+import com.sun.enterprise.config.serverbeans.MonitoringService;\n+\n+import fish.payara.monitoring.adapt.GroupData;\n+import fish.payara.monitoring.adapt.GroupDataRepository;\n+import fish.payara.monitoring.adapt.MonitoringConsole;\n+import fish.payara.monitoring.adapt.MonitoringConsoleFactory;\n+import fish.payara.monitoring.adapt.MonitoringConsoleRuntime;\n+import fish.payara.monitoring.adapt.MonitoringConsoleWatchConfig;\n+import fish.payara.monitoring.collect.MonitoringDataSource;\n+import fish.payara.monitoring.collect.MonitoringWatchSource;\n+import fish.payara.monitoring.configuration.MonitoringConsoleConfiguration;\n+import fish.payara.notification.requesttracing.RequestTrace;\n+import fish.payara.notification.requesttracing.RequestTraceSpan;\n+import fish.payara.nucleus.executorservice.PayaraExecutorService;\n+import fish.payara.nucleus.hazelcast.HazelcastCore;\n+import fish.payara.nucleus.requesttracing.RequestTracingService;\n+\n+/**\n+ * This implementation of the {@link MonitoringConsoleRuntime} connects the Payara independent parts of the monitoring\n+ * console with the Payara server.\n+ * \n+ * The most complicated aspect about the implementation is the way it is bootstrapped. By implementing\n+ * {@link ApplicationLifecycleInterceptor} it forces the creation of an instance of this {@link Service} even though it\n+ * is not otherwise referenced within the HK2 context. As this happens fairly early in the bootstrapping it then\n+ * registers itself as an {@link EventListener} so that it can run its actual {@link #init()} bootstrapping as soon as\n+ * the {@link EventTypes#SERVER_READY} is received. This makes sure the bootstrapping of the console runtime does not\n+ * alter the order of services created by starting to collect data from services that implement\n+ * {@link MonitoringDataSource} or {@link MonitoringWatchSource}.\n+ * \n+ * @author Jan Bernitt\n+ * @since 5.201\n+ */\n+@Service\n+public class MonitoringConsoleRuntimeImpl\n+        implements ConfigListener, ApplicationLifecycleInterceptor, EventListener,\n+        MonitoringConsoleRuntime, MonitoringConsoleWatchConfig, GroupDataRepository {\n+\n+    private static final Logger LOGGER = Logger.getLogger(\"monitoring-console-core\");\n+\n+    private static final String SET_MONITORING_CONSOLE_CONFIGURATION_COMMAND = \"set-monitoring-console-configuration\";\n+\n+    /**\n+     * The topic name used to share data of instances with the DAS.\n+     */\n+    private static final String MONITORING_DATA_TOPIC_NAME = \"payara-monitoring-data\";\n+\n+    @Inject\n+    private PayaraExecutorService executor;\n+    @Inject\n+    private ServerEnvironment serverEnv;\n+    @Inject @Named(ServerEnvironment.DEFAULT_INSTANCE_NAME)\n+    private Config serverConfig;\n+    @Inject\n+    private Domain domain;\n+    @Inject\n+    private CommandRunner commandRunner;\n+    @Inject\n+    private InternalSystemAdministrator kernelIdentity;\n+    @Inject\n+    private HazelcastCore hazelcastCore;\n+    @Inject\n+    private RequestTracingService requestTracingService;\n+    @Inject\n+    private ServiceLocator serviceLocator;\n+    @Inject\n+    private Events events;\n+\n+    private final AtomicBoolean initialised = new AtomicBoolean();\n+    private ITopic<byte[]> exchange;\n+    private MonitoringConsoleConfiguration config;\n+    private MonitoringConsole console;\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        events.register(this);\n+    }\n+\n+    @Override\n+    public void event(Event<?> event) {\n+        if (event.is(EventTypes.SERVER_READY)) {\n+            init();\n+        }\n+    }\n+\n+    public void init() {\n+        if (!initialised.compareAndSet(false, true) ) {\n+            return;\n+        }\n+        try {\n+            LOGGER.info(\"Bootstrapping Monitoring Console Runtime\");\n+            boolean isDas = serverEnv.isDas();\n+            config = domain.getExtensionByType(MonitoringConsoleConfiguration.class);\n+            String instanceName = \"server\"; // default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNjY1NQ=="}, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU0MzcwNA==", "bodyText": "I believe ServerEnvironment.getInstanceName() is fairly reliable.\nOttomh I'm not sure that the name returned by that is 100% always the name used in Hazelcast, but I'm nitpicking what happens if Hazelcast isn't enabled here so should be fine (assuming it works).\nAlthough having said all that - does the monitoring even work without Hazelcast?", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382543704", "createdAt": "2020-02-21T11:57:24Z", "author": {"login": "Pandrex247"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/runtime/MonitoringConsoleRuntimeImpl.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.monitoring.runtime;\n+\n+import static java.lang.Boolean.parseBoolean;\n+import static java.util.Collections.emptyList;\n+import static org.jvnet.hk2.config.Dom.unwrap;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.glassfish.api.ActionReport;\n+import org.glassfish.api.admin.CommandRunner;\n+import org.glassfish.api.admin.CommandRunner.CommandInvocation;\n+import org.glassfish.api.admin.ParameterMap;\n+import org.glassfish.api.admin.ServerEnvironment;\n+import org.glassfish.api.event.EventListener;\n+import org.glassfish.api.event.EventTypes;\n+import org.glassfish.api.event.Events;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.glassfish.internal.api.InternalSystemAdministrator;\n+import org.glassfish.internal.deployment.ApplicationLifecycleInterceptor;\n+import org.glassfish.internal.deployment.ExtendedDeploymentContext;\n+import org.glassfish.internal.deployment.ExtendedDeploymentContext.Phase;\n+import org.jvnet.hk2.annotations.Service;\n+import org.jvnet.hk2.config.ConfigBeanProxy;\n+import org.jvnet.hk2.config.ConfigListener;\n+import org.jvnet.hk2.config.UnprocessedChangeEvents;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.ITopic;\n+import com.sun.enterprise.config.serverbeans.Config;\n+import com.sun.enterprise.config.serverbeans.Domain;\n+import com.sun.enterprise.config.serverbeans.MonitoringService;\n+\n+import fish.payara.monitoring.adapt.GroupData;\n+import fish.payara.monitoring.adapt.GroupDataRepository;\n+import fish.payara.monitoring.adapt.MonitoringConsole;\n+import fish.payara.monitoring.adapt.MonitoringConsoleFactory;\n+import fish.payara.monitoring.adapt.MonitoringConsoleRuntime;\n+import fish.payara.monitoring.adapt.MonitoringConsoleWatchConfig;\n+import fish.payara.monitoring.collect.MonitoringDataSource;\n+import fish.payara.monitoring.collect.MonitoringWatchSource;\n+import fish.payara.monitoring.configuration.MonitoringConsoleConfiguration;\n+import fish.payara.notification.requesttracing.RequestTrace;\n+import fish.payara.notification.requesttracing.RequestTraceSpan;\n+import fish.payara.nucleus.executorservice.PayaraExecutorService;\n+import fish.payara.nucleus.hazelcast.HazelcastCore;\n+import fish.payara.nucleus.requesttracing.RequestTracingService;\n+\n+/**\n+ * This implementation of the {@link MonitoringConsoleRuntime} connects the Payara independent parts of the monitoring\n+ * console with the Payara server.\n+ * \n+ * The most complicated aspect about the implementation is the way it is bootstrapped. By implementing\n+ * {@link ApplicationLifecycleInterceptor} it forces the creation of an instance of this {@link Service} even though it\n+ * is not otherwise referenced within the HK2 context. As this happens fairly early in the bootstrapping it then\n+ * registers itself as an {@link EventListener} so that it can run its actual {@link #init()} bootstrapping as soon as\n+ * the {@link EventTypes#SERVER_READY} is received. This makes sure the bootstrapping of the console runtime does not\n+ * alter the order of services created by starting to collect data from services that implement\n+ * {@link MonitoringDataSource} or {@link MonitoringWatchSource}.\n+ * \n+ * @author Jan Bernitt\n+ * @since 5.201\n+ */\n+@Service\n+public class MonitoringConsoleRuntimeImpl\n+        implements ConfigListener, ApplicationLifecycleInterceptor, EventListener,\n+        MonitoringConsoleRuntime, MonitoringConsoleWatchConfig, GroupDataRepository {\n+\n+    private static final Logger LOGGER = Logger.getLogger(\"monitoring-console-core\");\n+\n+    private static final String SET_MONITORING_CONSOLE_CONFIGURATION_COMMAND = \"set-monitoring-console-configuration\";\n+\n+    /**\n+     * The topic name used to share data of instances with the DAS.\n+     */\n+    private static final String MONITORING_DATA_TOPIC_NAME = \"payara-monitoring-data\";\n+\n+    @Inject\n+    private PayaraExecutorService executor;\n+    @Inject\n+    private ServerEnvironment serverEnv;\n+    @Inject @Named(ServerEnvironment.DEFAULT_INSTANCE_NAME)\n+    private Config serverConfig;\n+    @Inject\n+    private Domain domain;\n+    @Inject\n+    private CommandRunner commandRunner;\n+    @Inject\n+    private InternalSystemAdministrator kernelIdentity;\n+    @Inject\n+    private HazelcastCore hazelcastCore;\n+    @Inject\n+    private RequestTracingService requestTracingService;\n+    @Inject\n+    private ServiceLocator serviceLocator;\n+    @Inject\n+    private Events events;\n+\n+    private final AtomicBoolean initialised = new AtomicBoolean();\n+    private ITopic<byte[]> exchange;\n+    private MonitoringConsoleConfiguration config;\n+    private MonitoringConsole console;\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        events.register(this);\n+    }\n+\n+    @Override\n+    public void event(Event<?> event) {\n+        if (event.is(EventTypes.SERVER_READY)) {\n+            init();\n+        }\n+    }\n+\n+    public void init() {\n+        if (!initialised.compareAndSet(false, true) ) {\n+            return;\n+        }\n+        try {\n+            LOGGER.info(\"Bootstrapping Monitoring Console Runtime\");\n+            boolean isDas = serverEnv.isDas();\n+            config = domain.getExtensionByType(MonitoringConsoleConfiguration.class);\n+            String instanceName = \"server\"; // default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNjY1NQ=="}, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MjUwNA==", "bodyText": "I changed it to ServerEnvironment.getInstanceName(). It does work without Hazelcast in a single instance (DAS) configuration.", "url": "https://github.com/payara/Payara/pull/4493#discussion_r382552504", "createdAt": "2020-02-21T12:20:22Z", "author": {"login": "jbee"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/runtime/MonitoringConsoleRuntimeImpl.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.monitoring.runtime;\n+\n+import static java.lang.Boolean.parseBoolean;\n+import static java.util.Collections.emptyList;\n+import static org.jvnet.hk2.config.Dom.unwrap;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.glassfish.api.ActionReport;\n+import org.glassfish.api.admin.CommandRunner;\n+import org.glassfish.api.admin.CommandRunner.CommandInvocation;\n+import org.glassfish.api.admin.ParameterMap;\n+import org.glassfish.api.admin.ServerEnvironment;\n+import org.glassfish.api.event.EventListener;\n+import org.glassfish.api.event.EventTypes;\n+import org.glassfish.api.event.Events;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.glassfish.internal.api.InternalSystemAdministrator;\n+import org.glassfish.internal.deployment.ApplicationLifecycleInterceptor;\n+import org.glassfish.internal.deployment.ExtendedDeploymentContext;\n+import org.glassfish.internal.deployment.ExtendedDeploymentContext.Phase;\n+import org.jvnet.hk2.annotations.Service;\n+import org.jvnet.hk2.config.ConfigBeanProxy;\n+import org.jvnet.hk2.config.ConfigListener;\n+import org.jvnet.hk2.config.UnprocessedChangeEvents;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.ITopic;\n+import com.sun.enterprise.config.serverbeans.Config;\n+import com.sun.enterprise.config.serverbeans.Domain;\n+import com.sun.enterprise.config.serverbeans.MonitoringService;\n+\n+import fish.payara.monitoring.adapt.GroupData;\n+import fish.payara.monitoring.adapt.GroupDataRepository;\n+import fish.payara.monitoring.adapt.MonitoringConsole;\n+import fish.payara.monitoring.adapt.MonitoringConsoleFactory;\n+import fish.payara.monitoring.adapt.MonitoringConsoleRuntime;\n+import fish.payara.monitoring.adapt.MonitoringConsoleWatchConfig;\n+import fish.payara.monitoring.collect.MonitoringDataSource;\n+import fish.payara.monitoring.collect.MonitoringWatchSource;\n+import fish.payara.monitoring.configuration.MonitoringConsoleConfiguration;\n+import fish.payara.notification.requesttracing.RequestTrace;\n+import fish.payara.notification.requesttracing.RequestTraceSpan;\n+import fish.payara.nucleus.executorservice.PayaraExecutorService;\n+import fish.payara.nucleus.hazelcast.HazelcastCore;\n+import fish.payara.nucleus.requesttracing.RequestTracingService;\n+\n+/**\n+ * This implementation of the {@link MonitoringConsoleRuntime} connects the Payara independent parts of the monitoring\n+ * console with the Payara server.\n+ * \n+ * The most complicated aspect about the implementation is the way it is bootstrapped. By implementing\n+ * {@link ApplicationLifecycleInterceptor} it forces the creation of an instance of this {@link Service} even though it\n+ * is not otherwise referenced within the HK2 context. As this happens fairly early in the bootstrapping it then\n+ * registers itself as an {@link EventListener} so that it can run its actual {@link #init()} bootstrapping as soon as\n+ * the {@link EventTypes#SERVER_READY} is received. This makes sure the bootstrapping of the console runtime does not\n+ * alter the order of services created by starting to collect data from services that implement\n+ * {@link MonitoringDataSource} or {@link MonitoringWatchSource}.\n+ * \n+ * @author Jan Bernitt\n+ * @since 5.201\n+ */\n+@Service\n+public class MonitoringConsoleRuntimeImpl\n+        implements ConfigListener, ApplicationLifecycleInterceptor, EventListener,\n+        MonitoringConsoleRuntime, MonitoringConsoleWatchConfig, GroupDataRepository {\n+\n+    private static final Logger LOGGER = Logger.getLogger(\"monitoring-console-core\");\n+\n+    private static final String SET_MONITORING_CONSOLE_CONFIGURATION_COMMAND = \"set-monitoring-console-configuration\";\n+\n+    /**\n+     * The topic name used to share data of instances with the DAS.\n+     */\n+    private static final String MONITORING_DATA_TOPIC_NAME = \"payara-monitoring-data\";\n+\n+    @Inject\n+    private PayaraExecutorService executor;\n+    @Inject\n+    private ServerEnvironment serverEnv;\n+    @Inject @Named(ServerEnvironment.DEFAULT_INSTANCE_NAME)\n+    private Config serverConfig;\n+    @Inject\n+    private Domain domain;\n+    @Inject\n+    private CommandRunner commandRunner;\n+    @Inject\n+    private InternalSystemAdministrator kernelIdentity;\n+    @Inject\n+    private HazelcastCore hazelcastCore;\n+    @Inject\n+    private RequestTracingService requestTracingService;\n+    @Inject\n+    private ServiceLocator serviceLocator;\n+    @Inject\n+    private Events events;\n+\n+    private final AtomicBoolean initialised = new AtomicBoolean();\n+    private ITopic<byte[]> exchange;\n+    private MonitoringConsoleConfiguration config;\n+    private MonitoringConsole console;\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        events.register(this);\n+    }\n+\n+    @Override\n+    public void event(Event<?> event) {\n+        if (event.is(EventTypes.SERVER_READY)) {\n+            init();\n+        }\n+    }\n+\n+    public void init() {\n+        if (!initialised.compareAndSet(false, true) ) {\n+            return;\n+        }\n+        try {\n+            LOGGER.info(\"Bootstrapping Monitoring Console Runtime\");\n+            boolean isDas = serverEnv.isDas();\n+            config = domain.getExtensionByType(MonitoringConsoleConfiguration.class);\n+            String instanceName = \"server\"; // default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNjY1NQ=="}, "originalCommit": {"oid": "fd0c847f51893d60ca2b99559dbf56dbe8518e01"}, "originalPosition": 177}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1394, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}