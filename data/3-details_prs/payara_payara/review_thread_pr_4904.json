{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMzcyNjMz", "number": 4904, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozNzoxMVrOEm_9nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo1MDo1MVrOEnAUZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzI5MzExOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozNzoxMVrOHXWMEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozNzoxMVrOHXWMEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0MjgzMw==", "bodyText": "Perhaps a assert for white space before or after a internal symbol", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494242833", "createdAt": "2020-09-24T11:37:11Z", "author": {"login": "AlanRoth"}, "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.convertToCamelCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class CamelCaseConversionTest {\n+\n+    @Test\n+    public void if_empty_expect_same() {\n+        assertEquals(null, convertToCamelCase(null));\n+        assertEquals(\"\", convertToCamelCase(\"\"));\n+    }\n+\n+    @Test\n+    public void if_lower_case_expect_same() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"accountid\"));\n+    }\n+\n+    @Test\n+    public void if_upper_case_expect_lower_case() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"ACCOUNTID\"));\n+    }\n+\n+    @Test\n+    public void if_numbers_expect_same() {\n+        assertEquals(\"a123\", convertToCamelCase(\"a123\"));\n+        assertEquals(\"a123b\", convertToCamelCase(\"a123b\"));\n+        assertEquals(\"123\", convertToCamelCase(\"123\"));\n+    }\n+\n+    @Test\n+    public void if_leading_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+    }\n+\n+    @Test\n+    public void if_trailing_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+    }\n+\n+    @Test\n+    public void if_internal_symbols_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b2652ecb7035acbe05719570eef591163e3143"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzMwMDI0OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozOToxOVrOHXWQYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTozOToxOVrOHXWQYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0MzkzNw==", "bodyText": "Assert for multiple internal symbols?", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494243937", "createdAt": "2020-09-24T11:39:19Z", "author": {"login": "AlanRoth"}, "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.convertToCamelCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class CamelCaseConversionTest {\n+\n+    @Test\n+    public void if_empty_expect_same() {\n+        assertEquals(null, convertToCamelCase(null));\n+        assertEquals(\"\", convertToCamelCase(\"\"));\n+    }\n+\n+    @Test\n+    public void if_lower_case_expect_same() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"accountid\"));\n+    }\n+\n+    @Test\n+    public void if_upper_case_expect_lower_case() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"ACCOUNTID\"));\n+    }\n+\n+    @Test\n+    public void if_numbers_expect_same() {\n+        assertEquals(\"a123\", convertToCamelCase(\"a123\"));\n+        assertEquals(\"a123b\", convertToCamelCase(\"a123b\"));\n+        assertEquals(\"123\", convertToCamelCase(\"123\"));\n+    }\n+\n+    @Test\n+    public void if_leading_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+    }\n+\n+    @Test\n+    public void if_trailing_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+    }\n+\n+    @Test\n+    public void if_internal_symbols_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b2652ecb7035acbe05719570eef591163e3143"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzMyMzM2OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo0NDoxOFrOHXWeRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo0NDoxOFrOHXWeRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0NzQ5NA==", "bodyText": "Could add a case for \"   \" expect \"\" or expect same, whichever is correct\nif (string == null || string.isEmpty()) { return string; }\nCan do string.trim().isEmpty() and return string.trim(), so \"\" is returned if a whitespace string of any length is entered", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494247494", "createdAt": "2020-09-24T11:44:18Z", "author": {"login": "AlanRoth"}, "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.convertToCamelCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class CamelCaseConversionTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b2652ecb7035acbe05719570eef591163e3143"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzMzNDIzOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo0NTo1MlrOHXWktw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo0NTo1MlrOHXWktw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0OTE0Mw==", "bodyText": "Assert for multiple whitespaces?", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494249143", "createdAt": "2020-09-24T11:45:52Z", "author": {"login": "AlanRoth"}, "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.convertToCamelCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class CamelCaseConversionTest {\n+\n+    @Test\n+    public void if_empty_expect_same() {\n+        assertEquals(null, convertToCamelCase(null));\n+        assertEquals(\"\", convertToCamelCase(\"\"));\n+    }\n+\n+    @Test\n+    public void if_lower_case_expect_same() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"accountid\"));\n+    }\n+\n+    @Test\n+    public void if_upper_case_expect_lower_case() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"ACCOUNTID\"));\n+    }\n+\n+    @Test\n+    public void if_numbers_expect_same() {\n+        assertEquals(\"a123\", convertToCamelCase(\"a123\"));\n+        assertEquals(\"a123b\", convertToCamelCase(\"a123b\"));\n+        assertEquals(\"123\", convertToCamelCase(\"123\"));\n+    }\n+\n+    @Test\n+    public void if_leading_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+    }\n+\n+    @Test\n+    public void if_trailing_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+    }\n+\n+    @Test\n+    public void if_internal_symbols_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));\n+    }\n+\n+    @Test\n+    public void if_surrounding_whitespace_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc \"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc  \"));\n+        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n+    }\n+\n+    @Test\n+    public void if_internal_whitespace_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a bc\"));\n+        assertEquals(\"abC\", convertToCamelCase(\"ab c\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b2652ecb7035acbe05719570eef591163e3143"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzM1MTQwOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo1MDo1MVrOHXWvbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo1Mjo1NlrOHXWzrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1MTg4NA==", "bodyText": "Whats expected if there is a number followed by a whitespace and vice versa?", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494251884", "createdAt": "2020-09-24T11:50:51Z", "author": {"login": "AlanRoth"}, "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.convertToCamelCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class CamelCaseConversionTest {\n+\n+    @Test\n+    public void if_empty_expect_same() {\n+        assertEquals(null, convertToCamelCase(null));\n+        assertEquals(\"\", convertToCamelCase(\"\"));\n+    }\n+\n+    @Test\n+    public void if_lower_case_expect_same() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"accountid\"));\n+    }\n+\n+    @Test\n+    public void if_upper_case_expect_lower_case() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"ACCOUNTID\"));\n+    }\n+\n+    @Test\n+    public void if_numbers_expect_same() {\n+        assertEquals(\"a123\", convertToCamelCase(\"a123\"));\n+        assertEquals(\"a123b\", convertToCamelCase(\"a123b\"));\n+        assertEquals(\"123\", convertToCamelCase(\"123\"));\n+    }\n+\n+    @Test\n+    public void if_leading_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+    }\n+\n+    @Test\n+    public void if_trailing_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+    }\n+\n+    @Test\n+    public void if_internal_symbols_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));\n+    }\n+\n+    @Test\n+    public void if_surrounding_whitespace_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc \"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc  \"));\n+        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n+    }\n+\n+    @Test\n+    public void if_internal_whitespace_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a bc\"));\n+        assertEquals(\"abC\", convertToCamelCase(\"ab c\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b2652ecb7035acbe05719570eef591163e3143"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1Mjk3Mw==", "bodyText": "Or number + internal symbol + whitespace? __l33t - code-", "url": "https://github.com/payara/Payara/pull/4904#discussion_r494252973", "createdAt": "2020-09-24T11:52:56Z", "author": {"login": "AlanRoth"}, "path": "nucleus/common/internal-api/src/test/java/fish/payara/internal/notification/CamelCaseConversionTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.convertToCamelCase;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public class CamelCaseConversionTest {\n+\n+    @Test\n+    public void if_empty_expect_same() {\n+        assertEquals(null, convertToCamelCase(null));\n+        assertEquals(\"\", convertToCamelCase(\"\"));\n+    }\n+\n+    @Test\n+    public void if_lower_case_expect_same() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"accountid\"));\n+    }\n+\n+    @Test\n+    public void if_upper_case_expect_lower_case() {\n+        assertEquals(\"accountid\", convertToCamelCase(\"ACCOUNTID\"));\n+    }\n+\n+    @Test\n+    public void if_numbers_expect_same() {\n+        assertEquals(\"a123\", convertToCamelCase(\"a123\"));\n+        assertEquals(\"a123b\", convertToCamelCase(\"a123b\"));\n+        assertEquals(\"123\", convertToCamelCase(\"123\"));\n+    }\n+\n+    @Test\n+    public void if_leading_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"_abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"&abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"-abc\"));\n+    }\n+\n+    @Test\n+    public void if_trailing_symbols_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc_\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc&\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc-\"));\n+    }\n+\n+    @Test\n+    public void if_internal_symbols_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a_bc\"));\n+        assertEquals(\"aBc\", convertToCamelCase(\"a-bc\"));\n+    }\n+\n+    @Test\n+    public void if_surrounding_whitespace_expect_removed() {\n+        assertEquals(\"abc\", convertToCamelCase(\"abc \"));\n+        assertEquals(\"abc\", convertToCamelCase(\"abc  \"));\n+        assertEquals(\"abc\", convertToCamelCase(\" abc\"));\n+        assertEquals(\"abc\", convertToCamelCase(\"  abc\"));\n+    }\n+\n+    @Test\n+    public void if_internal_whitespace_expect_next_character_capitalised() {\n+        assertEquals(\"aBc\", convertToCamelCase(\"a bc\"));\n+        assertEquals(\"abC\", convertToCamelCase(\"ab c\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1MTg4NA=="}, "originalCommit": {"oid": "09b2652ecb7035acbe05719570eef591163e3143"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1227, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}