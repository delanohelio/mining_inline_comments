{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwOTkzMzU4", "number": 4873, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyMDoyN1rOE6CcvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyODozOFrOE6CsBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjkyOTg4OnYy", "diffSide": "RIGHT", "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/MemberAddressPicker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyMDoyN1rOH03Emw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo0NDoyMVrOH1D7Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5MDI5OQ==", "bodyText": "Presumably docker0 is the default Linux interface name for the Docker network?\nOn Windows it appears to resolve to host.docker.internal, so I don't know if you need to account for that.", "url": "https://github.com/payara/Payara/pull/4873#discussion_r525190299", "createdAt": "2020-11-17T14:20:27Z", "author": {"login": "Pandrex247"}, "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/MemberAddressPicker.java", "diffHunk": "@@ -151,22 +189,21 @@ private void findAppropriateInterfaces() {\n             while (interfaces.hasMoreElements()) {\n                 NetworkInterface intf = interfaces.nextElement();\n                 logger.log(Level.FINE, \"Found Network Interface {0}\", new Object[]{intf.getName()});\n-                \n-                if (intf.isUp() && !intf.isLoopback() && !intf.isVirtual() && !intf.getName().contains(\"docker0\") &&!intf.getDisplayName().contains(\"Teredo\") && intf.getInterfaceAddresses().size()>0) {\n+\n+                if (intf.isUp() && !intf.isLoopback() && !intf.isVirtual() && !intf.isPointToPoint() && !intf.getName().contains(\"docker0\") &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e51e4355354561083d1bed3018e4b0230648f43"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwMDkyMw==", "bodyText": "@smillidge put that in. I have no idea", "url": "https://github.com/payara/Payara/pull/4873#discussion_r525400923", "createdAt": "2020-11-17T18:44:21Z", "author": {"login": "lprimak"}, "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/MemberAddressPicker.java", "diffHunk": "@@ -151,22 +189,21 @@ private void findAppropriateInterfaces() {\n             while (interfaces.hasMoreElements()) {\n                 NetworkInterface intf = interfaces.nextElement();\n                 logger.log(Level.FINE, \"Found Network Interface {0}\", new Object[]{intf.getName()});\n-                \n-                if (intf.isUp() && !intf.isLoopback() && !intf.isVirtual() && !intf.getName().contains(\"docker0\") &&!intf.getDisplayName().contains(\"Teredo\") && intf.getInterfaceAddresses().size()>0) {\n+\n+                if (intf.isUp() && !intf.isLoopback() && !intf.isVirtual() && !intf.isPointToPoint() && !intf.getName().contains(\"docker0\") &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5MDI5OQ=="}, "originalCommit": {"oid": "2e51e4355354561083d1bed3018e4b0230648f43"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mjk0Njg0OnYy", "diffSide": "RIGHT", "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/MemberAddressPicker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyNDoxMlrOH03PTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyNDoxMlrOH03PTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5MzAzOA==", "bodyText": "Slight wording change - the \"by searching\" bit is unnecessary and also irks me because you never say what or where you were searching \ud83d\ude1c\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.log(Level.FINE, \"Could not find an appropriate address by searching falling back to local host\");\n          \n          \n            \n                        logger.log(Level.FINE, \"Could not find an appropriate address, falling back to local host\");", "url": "https://github.com/payara/Payara/pull/4873#discussion_r525193038", "createdAt": "2020-11-17T14:24:12Z", "author": {"login": "Pandrex247"}, "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/MemberAddressPicker.java", "diffHunk": "@@ -97,52 +109,78 @@ public InetSocketAddress getBindAddress() {\n \n     @Override\n     public InetSocketAddress getPublicAddress() {\n-        if (publicAddress != null) {\n-            return publicAddress;\n+        return publicAddress;\n+    }\n+\n+    private InetSocketAddress initBindAddress() {\n+        InetSocketAddress address = new InetSocketAddress(0);\n+        if (env.isDas() && !env.isMicro() && !config.getDASBindAddress().isEmpty()) {\n+            int port = new Integer(config.getDasPort());\n+            address = initAddress(config.getDASBindAddress(), port);\n+            logger.log(Level.FINE, \"Bind address is specified in the configuration so we will use that {0}\", address);\n+        } else if (config.getDiscoveryMode().startsWith(\"multicast\")) {\n+            // in multicast mode, Hazelcast needs actual interface to bind, not wildcard\n+            address = ensureAddress(null, null, chosenAddress, 0);\n         } else {\n-            return bindAddress;\n+            logger.log(Level.FINE, \"Using Wildcard bind address\");\n         }\n+        return address;\n     }\n-    \n-    /**\n-     * This method picks an interface using the following rules\n-     * If there is only one interface that is not loopback choose that\n-     * If there is an interfaces element use that\n-     * For the DAS if there is a bind address specified use that\n-     * If none of those choose the one that isn't the default docker one\n-     * For a standalone if the DAS specifies a Bind or Public address choose the interface on the same net or subnet\n-     * If none of those choose the one that is not the default docker interface\n-     * For micro if domain discovery mode choose the network on the same subnet\n-     * If tcpip mode choose the interface which matches a subnet in the tcpip list\n-     * If none of those choose the first interface that is not the default docker one\n-     */\n-    private void findAppropriateInterfaces() {\n-        \n-        if (localConfig.getPublicAddress() != null && !localConfig.getPublicAddress().isEmpty()) {\n-            String address[] = localConfig.getPublicAddress().split(\":\");\n-            if (address.length > 1) {\n-                publicAddress = new InetSocketAddress(address[0], Integer.parseInt(address[1]));\n-            } else {\n-                publicAddress = new InetSocketAddress(address[0], Integer.parseInt(config.getStartPort()));\n-            }\n-        }\n-        \n+\n+    private InetSocketAddress initPublicAddress(InetSocketAddress bindAddress) {\n         logger.fine(\"Finding an appropriate address for Hazelcast to use\");\n+        InetSocketAddress address;\n         int port = 0;\n         if (env.isDas() && !env.isMicro()) {\n             port = new Integer(config.getDasPort());\n-            if (config.getDASPublicAddress() != null && !config.getDASPublicAddress().isEmpty()) {\n-                publicAddress = new InetSocketAddress(config.getDASPublicAddress(), port);\n+            // try setting public address from global Payara config\n+            address = initAddress(config.getDASPublicAddress(), port);\n+        } else {\n+            // try setting public address from configuration, Payara node config\n+            address = initAddress(localConfig.getPublicAddress(), Integer.parseInt(config.getStartPort()));\n+        }\n+        return ensureAddress(address, bindAddress, chosenAddress, port);\n+    }\n+\n+    static InetSocketAddress initAddress(String address, int port) {\n+        if (address != null && !address.isEmpty()) {\n+            String addressParts[] = address.split(\":\");\n+            if (addressParts.length > 1) {\n+                return new InetSocketAddress(addressParts[0], Integer.parseInt(addressParts[1]));\n+            } else {\n+                return new InetSocketAddress(addressParts[0], port);\n             }\n-            \n-            if (config.getDASBindAddress() != null && !config.getDASBindAddress().isEmpty()) {\n-                bindAddress = new InetSocketAddress(config.getDASBindAddress(), port);\n-                logger.log(Level.FINE, \"Bind address is specified in the configuration so we will use that {0}\", bindAddress);\n-                return;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private static InetSocketAddress ensureAddress(InetSocketAddress targetAddress, InetSocketAddress sourceAddress,\n+            LazyHolder<InetAddress> backupAddress, int port) {\n+        if (targetAddress == null) {\n+            if (sourceAddress != null && !sourceAddress.getAddress().isAnyLocalAddress()) {\n+                targetAddress = sourceAddress;\n+            } else if (backupAddress.get() != null) {\n+                targetAddress = new InetSocketAddress(backupAddress.get(), port);\n+            } else {\n+                targetAddress = tryLocalHostOrLoopback(port);\n             }\n         }\n-       \n-        \n+        return targetAddress;\n+    }\n+\n+    private static InetSocketAddress tryLocalHostOrLoopback(int port) {\n+        try {\n+            // ok do the easy thing\n+            logger.log(Level.FINE, \"Could not find an appropriate address by searching falling back to local host\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e51e4355354561083d1bed3018e4b0230648f43"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mjk1ODc2OnYy", "diffSide": "RIGHT", "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/HazelcastCore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyNjozMVrOH03WfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo0NjoyOVrOH1EA_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5NDg3Nw==", "bodyText": "In future watch out for these. IDE's like to constantly add or remove these whitespace characters and it's mildly annoying having to filter them out, particularly when it's done to a file with no other changes!", "url": "https://github.com/payara/Payara/pull/4873#discussion_r525194877", "createdAt": "2020-11-17T14:26:31Z", "author": {"login": "Pandrex247"}, "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/HazelcastCore.java", "diffHunk": "@@ -127,13 +127,13 @@\n \n     @Inject\n     ServerContext context;\n-    \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e51e4355354561083d1bed3018e4b0230648f43"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwMjM2NA==", "bodyText": "I have my IDE set to remove by default. Whitespace should be removed. You can always go git diff w/o whitespace in the settings or git diff -b that's what I do :)\nNetBeans likes to add them by default (bad!)", "url": "https://github.com/payara/Payara/pull/4873#discussion_r525402364", "createdAt": "2020-11-17T18:46:29Z", "author": {"login": "lprimak"}, "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/HazelcastCore.java", "diffHunk": "@@ -127,13 +127,13 @@\n \n     @Inject\n     ServerContext context;\n-    \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5NDg3Nw=="}, "originalCommit": {"oid": "2e51e4355354561083d1bed3018e4b0230648f43"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mjk2Njg1OnYy", "diffSide": "RIGHT", "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/MemberAddressPicker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyODoxMFrOH03bmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo0Njo1NFrOH1EB_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5NjE4NQ==", "bodyText": "Too high up to let me suggest it, but the copyright needs updating to 2020 rather than 2019", "url": "https://github.com/payara/Payara/pull/4873#discussion_r525196185", "createdAt": "2020-11-17T14:28:10Z", "author": {"login": "Pandrex247"}, "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/MemberAddressPicker.java", "diffHunk": "@@ -44,40 +44,52 @@\n import java.net.Inet4Address;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n-import java.net.InterfaceAddress;\n import java.net.NetworkInterface;\n import java.net.SocketException;\n import java.net.UnknownHostException;\n-import java.util.Arrays;\n import java.util.Enumeration;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.logging.Level;\n import org.glassfish.api.admin.ServerEnvironment;\n import java.util.logging.Logger;\n+import org.glassfish.grizzly.utils.Holder.LazyHolder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e51e4355354561083d1bed3018e4b0230648f43"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwMjYyMA==", "bodyText": "corrected", "url": "https://github.com/payara/Payara/pull/4873#discussion_r525402620", "createdAt": "2020-11-17T18:46:54Z", "author": {"login": "lprimak"}, "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/MemberAddressPicker.java", "diffHunk": "@@ -44,40 +44,52 @@\n import java.net.Inet4Address;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n-import java.net.InterfaceAddress;\n import java.net.NetworkInterface;\n import java.net.SocketException;\n import java.net.UnknownHostException;\n-import java.util.Arrays;\n import java.util.Enumeration;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.logging.Level;\n import org.glassfish.api.admin.ServerEnvironment;\n import java.util.logging.Logger;\n+import org.glassfish.grizzly.utils.Holder.LazyHolder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5NjE4NQ=="}, "originalCommit": {"oid": "2e51e4355354561083d1bed3018e4b0230648f43"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Mjk2OTAxOnYy", "diffSide": "RIGHT", "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/DomainDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyODozOFrOH03c4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyODozOFrOH03c4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5NjUxMw==", "bodyText": "Too high up to let me suggest it, but the copyright needs updating to 2020 rather than 2018", "url": "https://github.com/payara/Payara/pull/4873#discussion_r525196513", "createdAt": "2020-11-17T14:28:38Z", "author": {"login": "Pandrex247"}, "path": "nucleus/payara-modules/hazelcast-bootstrap/src/main/java/fish/payara/nucleus/hazelcast/DomainDiscoveryService.java", "diffHunk": "@@ -46,35 +46,34 @@\n import com.sun.enterprise.config.serverbeans.Domain;\n import com.sun.enterprise.config.serverbeans.Node;\n import com.sun.enterprise.util.io.InstanceDirs;\n+import static fish.payara.nucleus.hazelcast.MemberAddressPicker.initAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e51e4355354561083d1bed3018e4b0230648f43"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1205, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}