{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjI0NzYz", "number": 4568, "title": "APPSERV-57 Updates to MicroProfile Fault Tolerance 2.1", "bodyText": "Summary\nA good summary on the spec changes can be found https://download.eclipse.org/microprofile/microprofile-fault-tolerance-2.1/microprofile-fault-tolerance-spec.html#release_notes_21\nChanges for Payara FT:\n\nadds of new exception handling properties to @Fallback (applyOn and skipOn) and @CircuitBreaker (skipOn)\nadds: CDI @RequestScope context is now activated for worker threads working @Asynchronous computation\nadds: @Bulkhead and @Asynchronous annotated methods returning CompletionStage now semantically exit the bulkhead when they complete (not when the annotated method returns a value).\nfixes: exception handling corrected to handle both Exception and Error (missed Error before which wasn't spec compliant before but went unnoticed until 2.1 that clarified exception behaviour)\nfixes: Class name overrides via configuration now use context ClassLoader (failed to load application specific classes before)\n\nTesting\nAdds additional unit test for the new bulkhead semantics where the bulkhead context is exited on completion of the returned CompletionStage.\nTests Performed\nRunning TCK 2.1 (needs payara/MicroProfile-TCK-Runners#102) against locally running server:\ncd MicroProfile-Fault-Tolerance/tck-runner\nmvn clean install \"-Ppayara-server-remote\" \"-Dpayara.version=5.202\"\nThe important part is that the TCK runner prints API and TCK version 2.1 as shown below:\n     [echo] FT version     2.1\n     [echo] FT TCK version 2.1\n     [echo] FT suite       tck-suite2.1-stable.xml", "createdAt": "2020-03-09T14:35:16Z", "url": "https://github.com/payara/Payara/pull/4568", "merged": true, "mergeCommit": {"oid": "835bf5efbcd4116267bd619ddf2522a28283f59b"}, "closed": true, "closedAt": "2020-03-20T07:23:42Z", "author": {"login": "jbee"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcL9EDSgH2gAyMzg1NjI0NzYzOjkyNDMyNGYwMTZmMmEzNjkyMWVkN2JhODA3NTUzMjA2NDBkODUzYzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPOEm5gFqTM3Nzg2MTEyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "924324f016f2a36921ed7ba80755320640d853c5", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/924324f016f2a36921ed7ba80755320640d853c5", "committedDate": "2020-03-09T12:27:53Z", "message": "APPSERV-57 FT 2.1 baseline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "891ad719f7b72d9eae1cefe63b7455abda973ad9", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/891ad719f7b72d9eae1cefe63b7455abda973ad9", "committedDate": "2020-03-09T14:12:44Z", "message": "APPSERV-57 adds Bulkhead CompletionStage special semantics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee5695fb9cdb89d184896d1a2768a30bbf13fab8", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/ee5695fb9cdb89d184896d1a2768a30bbf13fab8", "committedDate": "2020-03-09T15:12:02Z", "message": "APPSERV-57 fixes special bulkhead semantics only applied for async methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7815826dd567c0787e28f27f7cc3cce18a90b79", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/c7815826dd567c0787e28f27f7cc3cce18a90b79", "committedDate": "2020-03-09T16:10:53Z", "message": "APPSERV-57 adds unit tests for special bulkhead semantics, updates copyright headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NTg3NzQ1", "url": "https://github.com/payara/Payara/pull/4568#pullrequestreview-377587745", "createdAt": "2020-03-19T10:21:00Z", "commit": {"oid": "c7815826dd567c0787e28f27f7cc3cce18a90b79"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMDoyMTowMFrOF4oKiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMTozNzo0MlrOF4qpow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkyMjYzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return True if the exception is considered a failure, false if it is considered a success (anyway).\n          \n          \n            \n                 * @return True if the exception is considered a failure, false if it is considered a success.", "url": "https://github.com/payara/Payara/pull/4568#discussion_r394922635", "createdAt": "2020-03-19T10:21:00Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/policy/CircuitBreakerPolicy.java", "diffHunk": "@@ -95,12 +96,23 @@ public static CircuitBreakerPolicy create(InvocationContext context, FaultTolera\n     }\n \n     /**\n-     * Helper method that checks whether or not the given exception is included in the failOn parameter.\n+     * Helper method that checks whether or not the given exception is considered a success or failure.\n+     * \n+     * Relevant part from the {@link CircuitBreaker} documentation:\n+     * <blockquote>\n+     * When a method returns a result, the following rules are applied to determine whether the result is a success or a failure:\n+     * <ul>\n+     * <li>If the method does not throw a {@link Throwable}, it is considered a success\n+     * <li>Otherwise, if the thrown object is assignable to any value in the {@link #skipOn()} parameter, is is considered a success\n+     * <li>Otherwise, if the thrown object is assignable to any value in the {@link #failOn()} parameter, it is considered a failure\n+     * <li>Otherwise it is considered a success\n+     * </ul>\n+     * </blockquote>\n      * \n      * @param ex The exception to check\n-     * @return True if the exception is covered by {@link #failOn} list of this policy\n+     * @return True if the exception is considered a failure, false if it is considered a success (anyway).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7815826dd567c0787e28f27f7cc3cce18a90b79"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk2MzM2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    return ((CompletionStage<?>) res).whenComplete((value, excetion) -> {\n          \n          \n            \n                                    return ((CompletionStage<?>) res).whenComplete((value, exception) -> {\n          \n      \n    \n    \n  \n\nPresumably meant to be exception?", "url": "https://github.com/payara/Payara/pull/4568#discussion_r394963363", "createdAt": "2020-03-19T11:37:42Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/policy/FaultTolerancePolicy.java", "diffHunk": "@@ -579,15 +601,28 @@ private Object processBulkheadStage(FaultToleranceInvocation invocation) throws\n                     try {\n                         logger.log(Level.FINE, \"Entered bulkhead execution.\");\n                         // ok, lets run\n-                        return proceed(invocation);\n+                        Object res = proceed(invocation);\n+                        if (!exitOnCompletion) {\n+                            return res;\n+                        }\n+                        return ((CompletionStage<?>) res).whenComplete((value, excetion) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7815826dd567c0787e28f27f7cc3cce18a90b79"}, "originalPosition": 162}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e056a4e3c62256fe478120ae156179ae34c156a", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/7e056a4e3c62256fe478120ae156179ae34c156a", "committedDate": "2020-03-19T12:51:11Z", "message": "Update appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/policy/FaultTolerancePolicy.java\n\nCo-Authored-By: Andrew Pielage <pandrex247@hotmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cbdb4c3da68096afb7e606974e7354db7bdf4f1", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/4cbdb4c3da68096afb7e606974e7354db7bdf4f1", "committedDate": "2020-03-19T12:51:28Z", "message": "Update appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/policy/CircuitBreakerPolicy.java\n\nCo-Authored-By: Andrew Pielage <pandrex247@hotmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODYxMTI1", "url": "https://github.com/payara/Payara/pull/4568#pullrequestreview-377861125", "createdAt": "2020-03-19T15:58:39Z", "commit": {"oid": "4cbdb4c3da68096afb7e606974e7354db7bdf4f1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 778, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}