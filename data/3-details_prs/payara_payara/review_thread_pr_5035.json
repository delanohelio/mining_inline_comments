{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNjAxNDA1", "number": 5035, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo0MjoxOFrOFFxhPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDo0NjowNFrOFFzFzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTk4NTI2OnYy", "diffSide": "RIGHT", "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo0MjoxOFrOIGc38w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoxODo0M1rOIIdFNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzNTQ0Mw==", "bodyText": "This makes some assumption about the type of connection but it might be a JarURLConnection. Like this one: jar:http://www.foo.com/bar/baz.jar.\nYou might want a separate if-block to handle these kind of archive URLs.\nBut if it is all about local URLs this is unnessessary.", "url": "https://github.com/payara/Payara/pull/5035#discussion_r543635443", "createdAt": "2020-12-15T19:42:18Z", "author": {"login": "svendiedrichsen"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -171,18 +173,27 @@ private URL findArtefactURL(List<URL> repositoryURLs, String relativeURLString)\n                 try {\n                     artefactURL = new URL(repositoryURL, relativeURLString + archiveType);\n \n-                    HttpURLConnection httpConnection = (HttpURLConnection) artefactURL.openConnection();\n-                    \n-                    String auth = artefactURL.getUserInfo();\n-                    if (auth != null) {\n-                        String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes());\n-                        httpConnection.setRequestProperty(\"Authorization\", \"Basic \" + encodedAuth);\n+                    if (\"file\".equalsIgnoreCase(artefactURL.getProtocol())) {\n+                        if (Files.exists(Paths.get(artefactURL.toURI()))) {\n+                            validURLFound = true;\n+                        }\n+                    } else {\n+                        HttpURLConnection httpConnection = (HttpURLConnection) artefactURL.openConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxNjQ1Ng==", "bodyText": "I only needed a local repository but jar scheme support also possible", "url": "https://github.com/payara/Payara/pull/5035#discussion_r543716456", "createdAt": "2020-12-15T21:58:00Z", "author": {"login": "avpinchuk"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -171,18 +173,27 @@ private URL findArtefactURL(List<URL> repositoryURLs, String relativeURLString)\n                 try {\n                     artefactURL = new URL(repositoryURL, relativeURLString + archiveType);\n \n-                    HttpURLConnection httpConnection = (HttpURLConnection) artefactURL.openConnection();\n-                    \n-                    String auth = artefactURL.getUserInfo();\n-                    if (auth != null) {\n-                        String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes());\n-                        httpConnection.setRequestProperty(\"Authorization\", \"Basic \" + encodedAuth);\n+                    if (\"file\".equalsIgnoreCase(artefactURL.getProtocol())) {\n+                        if (Files.exists(Paths.get(artefactURL.toURI()))) {\n+                            validURLFound = true;\n+                        }\n+                    } else {\n+                        HttpURLConnection httpConnection = (HttpURLConnection) artefactURL.openConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzNTQ0Mw=="}, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMjgxNw==", "bodyText": "This needs to be decided by someone from Payara.", "url": "https://github.com/payara/Payara/pull/5035#discussion_r545102817", "createdAt": "2020-12-17T13:48:44Z", "author": {"login": "svendiedrichsen"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -171,18 +173,27 @@ private URL findArtefactURL(List<URL> repositoryURLs, String relativeURLString)\n                 try {\n                     artefactURL = new URL(repositoryURL, relativeURLString + archiveType);\n \n-                    HttpURLConnection httpConnection = (HttpURLConnection) artefactURL.openConnection();\n-                    \n-                    String auth = artefactURL.getUserInfo();\n-                    if (auth != null) {\n-                        String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes());\n-                        httpConnection.setRequestProperty(\"Authorization\", \"Basic \" + encodedAuth);\n+                    if (\"file\".equalsIgnoreCase(artefactURL.getProtocol())) {\n+                        if (Files.exists(Paths.get(artefactURL.toURI()))) {\n+                            validURLFound = true;\n+                        }\n+                    } else {\n+                        HttpURLConnection httpConnection = (HttpURLConnection) artefactURL.openConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzNTQ0Mw=="}, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNTk5MQ==", "bodyText": "I'd say that's outside the scope of this PR.\nI'm not immediately sure of the need to handle them either tbh - I think that functionality is covered by the standard --deploy option unless you're talking about using a Jar Url as a \"maven\" repository in its own right, which sounds mega-niche!", "url": "https://github.com/payara/Payara/pull/5035#discussion_r545735991", "createdAt": "2020-12-18T10:18:43Z", "author": {"login": "Pandrex247"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -171,18 +173,27 @@ private URL findArtefactURL(List<URL> repositoryURLs, String relativeURLString)\n                 try {\n                     artefactURL = new URL(repositoryURL, relativeURLString + archiveType);\n \n-                    HttpURLConnection httpConnection = (HttpURLConnection) artefactURL.openConnection();\n-                    \n-                    String auth = artefactURL.getUserInfo();\n-                    if (auth != null) {\n-                        String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes());\n-                        httpConnection.setRequestProperty(\"Authorization\", \"Basic \" + encodedAuth);\n+                    if (\"file\".equalsIgnoreCase(artefactURL.getProtocol())) {\n+                        if (Files.exists(Paths.get(artefactURL.toURI()))) {\n+                            validURLFound = true;\n+                        }\n+                    } else {\n+                        HttpURLConnection httpConnection = (HttpURLConnection) artefactURL.openConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzNTQ0Mw=="}, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA1NTg2OnYy", "diffSide": "RIGHT", "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1ODo0MVrOIGdh-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0MTo1MVrOIIb1Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NjIwMA==", "bodyText": "Maven coordinates might also include packaging and classifier. If the packaging coordinate exists you don't have to iterate over the whole list of possible file extensions. You could simply use this. If the classifier coordinate exists you won't be able to find the artefact without it in the URL.\nYou can find some examples here: https://developpaper.com/coordinates-of-maven-basic-course/", "url": "https://github.com/payara/Payara/pull/5035#discussion_r543646200", "createdAt": "2020-12-15T19:58:41Z", "author": {"login": "svendiedrichsen"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -117,7 +120,7 @@\n      * the provided GAV as Strings\n      */\n     private Map<String, String> splitGAV(String GAV) throws MalformedURLException {\n-        final String[] splitGAV = GAV.split(\",|:\");\n+        final String[] splitGAV = GAV.split(\"[,:]\");\n         final Map<String, String> GAVMap = new HashMap<>();\n         try {\n             GAVMap.put(\"groupId\", splitGAV[0].replace('.', '/'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxOTk2MQ==", "bodyText": "This may be implemented if we stick to some predefined format. In community doc defined artifactId, groupId and version only. Link in next answer", "url": "https://github.com/payara/Payara/pull/5035#discussion_r543719961", "createdAt": "2020-12-15T22:03:56Z", "author": {"login": "avpinchuk"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -117,7 +120,7 @@\n      * the provided GAV as Strings\n      */\n     private Map<String, String> splitGAV(String GAV) throws MalformedURLException {\n-        final String[] splitGAV = GAV.split(\",|:\");\n+        final String[] splitGAV = GAV.split(\"[,:]\");\n         final Map<String, String> GAVMap = new HashMap<>();\n         try {\n             GAVMap.put(\"groupId\", splitGAV[0].replace('.', '/'));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NjIwMA=="}, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMjQxNg==", "bodyText": "Yes, its true according to the Payara doc but shouldn't there be a possibility to use packaging and qualifier? You could imagine having a build of an deplyoable artefact which builts a jar and a war of the same name. According the current code it would only be possible to deploy the jar. As this comes first in the list. The same goes for the qualifier by which you have a built which produces two jars of the same name but one has i.e. the qualifier UBER to mark the uber-jar containing all the dependencies inside. You couldn't distinguish them without using a qualifier.\nYou could default those two GAV components to jar and empty and would not have to iterate over the list of file suffixes. But maybe I'm just over-engineering this thing for this usecase.\nThis needs to be decided by someone from Payara.", "url": "https://github.com/payara/Payara/pull/5035#discussion_r545102416", "createdAt": "2020-12-17T13:48:08Z", "author": {"login": "svendiedrichsen"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -117,7 +120,7 @@\n      * the provided GAV as Strings\n      */\n     private Map<String, String> splitGAV(String GAV) throws MalformedURLException {\n-        final String[] splitGAV = GAV.split(\",|:\");\n+        final String[] splitGAV = GAV.split(\"[,:]\");\n         final Map<String, String> GAVMap = new HashMap<>();\n         try {\n             GAVMap.put(\"groupId\", splitGAV[0].replace('.', '/'));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NjIwMA=="}, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxNTUzMA==", "bodyText": "Not allowing a user to specify packaging and qualifiers is simply a limitation / missing feature of the implementation at the moment - I'd say it's out of scope for this PR though. The use case you described makes sense, I just wouldn't bundle it into this PR to prevent scope creep, particularly since it isn't a trivial 1 line change.", "url": "https://github.com/payara/Payara/pull/5035#discussion_r545715530", "createdAt": "2020-12-18T09:41:51Z", "author": {"login": "Pandrex247"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -117,7 +120,7 @@\n      * the provided GAV as Strings\n      */\n     private Map<String, String> splitGAV(String GAV) throws MalformedURLException {\n-        final String[] splitGAV = GAV.split(\",|:\");\n+        final String[] splitGAV = GAV.split(\"[,:]\");\n         final Map<String, String> GAVMap = new HashMap<>();\n         try {\n             GAVMap.put(\"groupId\", splitGAV[0].replace('.', '/'));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NjIwMA=="}, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjI0MjY4OnYy", "diffSide": "RIGHT", "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDo0NjowNFrOIGfO3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTozMjowOVrOIIbgCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3NDA3Nw==", "bodyText": "Isn't a valid GAV only split by :? Doesn't it suggest when you find a comma that this is really a list of GAV? And if you accept lists here you should really focus on splitting by comma first to have a chance to determine optional fields like packaging and classifier.", "url": "https://github.com/payara/Payara/pull/5035#discussion_r543674077", "createdAt": "2020-12-15T20:46:04Z", "author": {"login": "svendiedrichsen"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -117,7 +120,7 @@\n      * the provided GAV as Strings\n      */\n     private Map<String, String> splitGAV(String GAV) throws MalformedURLException {\n-        final String[] splitGAV = GAV.split(\",|:\");\n+        final String[] splitGAV = GAV.split(\"[,:]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxODIxNA==", "bodyText": "According to documentation https://docs.payara.fish/community/docs/5.2020.7/documentation/payara-micro/deploying/deploy-cmd-line.html#deploying-applications-from-a-maven-repository for each GAV needs its own   --deployFromGAV option. Or I misunderstood the documentation. Here I just replaced logical operator with a simple class", "url": "https://github.com/payara/Payara/pull/5035#discussion_r543718214", "createdAt": "2020-12-15T22:00:59Z", "author": {"login": "avpinchuk"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -117,7 +120,7 @@\n      * the provided GAV as Strings\n      */\n     private Map<String, String> splitGAV(String GAV) throws MalformedURLException {\n-        final String[] splitGAV = GAV.split(\",|:\");\n+        final String[] splitGAV = GAV.split(\"[,:]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3NDA3Nw=="}, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMTI4NA==", "bodyText": "Yes it is true for the Payara doc, but at least uncommon to use a comma nonetheless. This needs to be decided by someone from Payara.", "url": "https://github.com/payara/Payara/pull/5035#discussion_r545101284", "createdAt": "2020-12-17T13:46:32Z", "author": {"login": "svendiedrichsen"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -117,7 +120,7 @@\n      * the provided GAV as Strings\n      */\n     private Map<String, String> splitGAV(String GAV) throws MalformedURLException {\n-        final String[] splitGAV = GAV.split(\",|:\");\n+        final String[] splitGAV = GAV.split(\"[,:]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3NDA3Nw=="}, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxMDA5MQ==", "bodyText": "Looking back at the commit history around this, comma was the original delimiter as that's the \"default\" delimiter for Payara CLI (though we do use different delimiters all over the place), and we added in support for using a colon after to be more in line with the usual Maven notation.\nSo fish.payara,guppy,1.0 and fish.payara:guppy:1.0 are both valid, and if you want to deploy more than one artefact you have to specify the option multiple times.", "url": "https://github.com/payara/Payara/pull/5035#discussion_r545710091", "createdAt": "2020-12-18T09:32:09Z", "author": {"login": "Pandrex247"}, "path": "nucleus/deployment/common/src/main/java/fish/payara/deployment/util/GAVConvertor.java", "diffHunk": "@@ -117,7 +120,7 @@\n      * the provided GAV as Strings\n      */\n     private Map<String, String> splitGAV(String GAV) throws MalformedURLException {\n-        final String[] splitGAV = GAV.split(\",|:\");\n+        final String[] splitGAV = GAV.split(\"[,:]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3NDA3Nw=="}, "originalCommit": {"oid": "d36259c33f2bf3e68bd9385e15d277900ad48a98"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1183, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}