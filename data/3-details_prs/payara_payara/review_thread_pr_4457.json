{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NDMxMDY0", "number": 4457, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzo0MzoxM1rODbemaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTozODoxOVrODb4pog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTM5NDk3OnYy", "diffSide": "RIGHT", "path": "appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/impl/PayaraMicroImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzo0MzoxM1rOFi_Dyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzo0MzoxM1rOFi_Dyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIyOTA2Ng==", "bodyText": "If this solves the issue and we agree, that this is how hazelcast bootstrap should work (pre-boot, rather than post boot), then entire code for handling \"threadlocaldisabled\" should be removed as well, as it has no other usage.", "url": "https://github.com/payara/Payara/pull/4457#discussion_r372229066", "createdAt": "2020-01-29T07:43:13Z", "author": {"login": "pdudits"}, "path": "appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/impl/PayaraMicroImpl.java", "diffHunk": "@@ -1043,7 +1043,6 @@ public PayaraMicroRuntime bootStrap() throws BootstrapException {\n \n             // boot the server\n             preBootCommands.executeCommands(gf.getCommandRunner());\n-            HazelcastCore.setThreadLocalDisabled(true);\n             try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c908357e36037a3ccf939ea4172687ce23b6a7d1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY2MzA2OnYy", "diffSide": "RIGHT", "path": "appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/impl/PayaraMicroImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTozODoxOVrOFjoC4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTozNjowM1rOFjvdIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMDU3Nw==", "bodyText": "If all the reproducers we mentioned work with this configuration, would you let try swapping these two statements, finalizing config before deploy?", "url": "https://github.com/payara/Payara/pull/4457#discussion_r372900577", "createdAt": "2020-01-30T11:38:19Z", "author": {"login": "pdudits"}, "path": "appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/impl/PayaraMicroImpl.java", "diffHunk": "@@ -1043,19 +1043,14 @@ public PayaraMicroRuntime bootStrap() throws BootstrapException {\n \n             // boot the server\n             preBootCommands.executeCommands(gf.getCommandRunner());\n-            HazelcastCore.setThreadLocalDisabled(true);\n-            try {\n-                gf.start();\n+            gf.start();\n \n-                // Execute post boot commands\n-                postBootCommands.executeCommands(gf.getCommandRunner());\n-                this.runtime = new PayaraMicroRuntimeImpl(gf, gfruntime);\n+            // Execute post boot commands\n+            postBootCommands.executeCommands(gf.getCommandRunner());\n+            this.runtime = new PayaraMicroRuntimeImpl(gf, gfruntime);\n \n-                // load all applications, but do not start them until Hazelcast gets a chance to initialize\n-                deployAll();\n-            } finally {\n-                HazelcastCore.setThreadLocalDisabled(false);\n-            }\n+            // load all applications, but do not start them until Hazelcast gets a chance to initialize\n+            deployAll();\n             if (!noCluster) {\n                 gf.getCommandRunner().run(\"set-hazelcast-configuration\", \"--enabled\", \"true\", \"--dynamic\", \"true\", \"--target\", \"server-config\", \"--hostawarepartitioning\", Boolean.toString(hostAware), \"--lite\", Boolean.toString(liteMember));\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd07f55c8f6b0ce789b83f744fc16efb87d00648"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAyMTk4NA==", "bodyText": "I've swapped them and my reproducer seems to work fine, so I agree this is a good change. I'm going to commit it, I just need to test the other reproducers before I merge this", "url": "https://github.com/payara/Payara/pull/4457#discussion_r373021984", "createdAt": "2020-01-30T15:36:03Z", "author": {"login": "MattGill98"}, "path": "appserver/extras/payara-micro/payara-micro-core/src/main/java/fish/payara/micro/impl/PayaraMicroImpl.java", "diffHunk": "@@ -1043,19 +1043,14 @@ public PayaraMicroRuntime bootStrap() throws BootstrapException {\n \n             // boot the server\n             preBootCommands.executeCommands(gf.getCommandRunner());\n-            HazelcastCore.setThreadLocalDisabled(true);\n-            try {\n-                gf.start();\n+            gf.start();\n \n-                // Execute post boot commands\n-                postBootCommands.executeCommands(gf.getCommandRunner());\n-                this.runtime = new PayaraMicroRuntimeImpl(gf, gfruntime);\n+            // Execute post boot commands\n+            postBootCommands.executeCommands(gf.getCommandRunner());\n+            this.runtime = new PayaraMicroRuntimeImpl(gf, gfruntime);\n \n-                // load all applications, but do not start them until Hazelcast gets a chance to initialize\n-                deployAll();\n-            } finally {\n-                HazelcastCore.setThreadLocalDisabled(false);\n-            }\n+            // load all applications, but do not start them until Hazelcast gets a chance to initialize\n+            deployAll();\n             if (!noCluster) {\n                 gf.getCommandRunner().run(\"set-hazelcast-configuration\", \"--enabled\", \"true\", \"--dynamic\", \"true\", \"--target\", \"server-config\", \"--hostawarepartitioning\", Boolean.toString(hostAware), \"--lite\", Boolean.toString(liteMember));\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMDU3Nw=="}, "originalCommit": {"oid": "dd07f55c8f6b0ce789b83f744fc16efb87d00648"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1377, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}