{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzkyNTE1", "number": 4582, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0MjozNlrODt4FLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0NzoyMlrODt5c8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDMxMzQzOnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/AnnotationReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTo0MjozNlrOF_jZkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoyNjo1NVrOF_ozgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDU5NQ==", "bodyText": "What's the thought behind this method name? It doesn't quite gel with me.\nAnnotationReader.reading(annotation).???\nMy IDE doesn't find any usages for me to compare against.", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402184595", "createdAt": "2020-04-02T09:42:36Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/AnnotationReader.java", "diffHunk": "@@ -0,0 +1,790 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.metrics.cdi;\n+\n+import static java.util.Arrays.asList;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.lang.reflect.Type;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import javax.enterprise.inject.spi.Annotated;\n+import javax.enterprise.inject.spi.AnnotatedMember;\n+import javax.enterprise.inject.spi.AnnotatedParameter;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+import org.eclipse.microprofile.metrics.annotation.Gauge;\n+import org.eclipse.microprofile.metrics.annotation.Metered;\n+import org.eclipse.microprofile.metrics.annotation.Metric;\n+import org.eclipse.microprofile.metrics.annotation.SimplyTimed;\n+import org.eclipse.microprofile.metrics.annotation.Timed;\n+\n+/**\n+ * Utility that allows reading the different MP metrics {@link Annotation}s from different annotated abstractions\n+ * providing a common interface to allow generic handling and a common logic independent of the source of the\n+ * {@link Annotation}.\n+ *\n+ * Supported are:\n+ * <ul>\n+ * <li>{@link AnnotatedElement}</li>\n+ * <li>{@link Annotated}</li>\n+ * <li>{@link InjectionPoint}</li>\n+ * </ul>\n+ *\n+ * It is important to realise that {@link Annotated} and {@link InjectionPoint} have to be used as a source when\n+ * available as they allow to add or remove {@link Annotation} effectively acting as a runtime override of the compiled\n+ * information provided by {@link AnnotatedElement}.\n+ *\n+ * This utility also encodes most of the logic as defined by the MP Metrics specification. This includes the logic of\n+ * which annotation applied and how the metrics effective name if computed from annotation values and the annotated\n+ * element. For this reason the methods are documented in great detail.\n+ *\n+ * @author Jan Bernitt\n+ * @since 5.202\n+ *\n+ * @param <T> Type of the MP metrics annotation\n+ */\n+public final class AnnotationReader<T extends Annotation> {\n+\n+    /**\n+     * Get {@link AnnotationReader} for a provided {@link Annotation}.\n+     *\n+     * @param annotationType\n+     * @return The {@link AnnotationReader} for the provided {@link Annotation} type\n+     * @throws IllegalAccessException In case no such reader exists\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends Annotation> AnnotationReader<T> reading(Class<T> annotationType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0OTYwNg==", "bodyText": "AnnotationReader.reading(Metered.class) should be pretty self-explanatory I thought...", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402249606", "createdAt": "2020-04-02T11:44:36Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/AnnotationReader.java", "diffHunk": "@@ -0,0 +1,790 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.metrics.cdi;\n+\n+import static java.util.Arrays.asList;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.lang.reflect.Type;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import javax.enterprise.inject.spi.Annotated;\n+import javax.enterprise.inject.spi.AnnotatedMember;\n+import javax.enterprise.inject.spi.AnnotatedParameter;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+import org.eclipse.microprofile.metrics.annotation.Gauge;\n+import org.eclipse.microprofile.metrics.annotation.Metered;\n+import org.eclipse.microprofile.metrics.annotation.Metric;\n+import org.eclipse.microprofile.metrics.annotation.SimplyTimed;\n+import org.eclipse.microprofile.metrics.annotation.Timed;\n+\n+/**\n+ * Utility that allows reading the different MP metrics {@link Annotation}s from different annotated abstractions\n+ * providing a common interface to allow generic handling and a common logic independent of the source of the\n+ * {@link Annotation}.\n+ *\n+ * Supported are:\n+ * <ul>\n+ * <li>{@link AnnotatedElement}</li>\n+ * <li>{@link Annotated}</li>\n+ * <li>{@link InjectionPoint}</li>\n+ * </ul>\n+ *\n+ * It is important to realise that {@link Annotated} and {@link InjectionPoint} have to be used as a source when\n+ * available as they allow to add or remove {@link Annotation} effectively acting as a runtime override of the compiled\n+ * information provided by {@link AnnotatedElement}.\n+ *\n+ * This utility also encodes most of the logic as defined by the MP Metrics specification. This includes the logic of\n+ * which annotation applied and how the metrics effective name if computed from annotation values and the annotated\n+ * element. For this reason the methods are documented in great detail.\n+ *\n+ * @author Jan Bernitt\n+ * @since 5.202\n+ *\n+ * @param <T> Type of the MP metrics annotation\n+ */\n+public final class AnnotationReader<T extends Annotation> {\n+\n+    /**\n+     * Get {@link AnnotationReader} for a provided {@link Annotation}.\n+     *\n+     * @param annotationType\n+     * @return The {@link AnnotationReader} for the provided {@link Annotation} type\n+     * @throws IllegalAccessException In case no such reader exists\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends Annotation> AnnotationReader<T> reading(Class<T> annotationType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDU5NQ=="}, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3MzE1NA==", "bodyText": "Renamed it to forAnnotation", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402273154", "createdAt": "2020-04-02T12:26:55Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/AnnotationReader.java", "diffHunk": "@@ -0,0 +1,790 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.metrics.cdi;\n+\n+import static java.util.Arrays.asList;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.lang.reflect.Type;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import javax.enterprise.inject.spi.Annotated;\n+import javax.enterprise.inject.spi.AnnotatedMember;\n+import javax.enterprise.inject.spi.AnnotatedParameter;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+import org.eclipse.microprofile.metrics.annotation.Gauge;\n+import org.eclipse.microprofile.metrics.annotation.Metered;\n+import org.eclipse.microprofile.metrics.annotation.Metric;\n+import org.eclipse.microprofile.metrics.annotation.SimplyTimed;\n+import org.eclipse.microprofile.metrics.annotation.Timed;\n+\n+/**\n+ * Utility that allows reading the different MP metrics {@link Annotation}s from different annotated abstractions\n+ * providing a common interface to allow generic handling and a common logic independent of the source of the\n+ * {@link Annotation}.\n+ *\n+ * Supported are:\n+ * <ul>\n+ * <li>{@link AnnotatedElement}</li>\n+ * <li>{@link Annotated}</li>\n+ * <li>{@link InjectionPoint}</li>\n+ * </ul>\n+ *\n+ * It is important to realise that {@link Annotated} and {@link InjectionPoint} have to be used as a source when\n+ * available as they allow to add or remove {@link Annotation} effectively acting as a runtime override of the compiled\n+ * information provided by {@link AnnotatedElement}.\n+ *\n+ * This utility also encodes most of the logic as defined by the MP Metrics specification. This includes the logic of\n+ * which annotation applied and how the metrics effective name if computed from annotation values and the annotated\n+ * element. For this reason the methods are documented in great detail.\n+ *\n+ * @author Jan Bernitt\n+ * @since 5.202\n+ *\n+ * @param <T> Type of the MP metrics annotation\n+ */\n+public final class AnnotationReader<T extends Annotation> {\n+\n+    /**\n+     * Get {@link AnnotationReader} for a provided {@link Annotation}.\n+     *\n+     * @param annotationType\n+     * @return The {@link AnnotationReader} for the provided {@link Annotation} type\n+     * @throws IllegalAccessException In case no such reader exists\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends Annotation> AnnotationReader<T> reading(Class<T> annotationType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDU5NQ=="}, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDQwNTA0OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/MetricGetOrRegister.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDowNzo1MlrOF_kUMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMToxNVrOF_o9nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5OTYwMA==", "bodyText": "Not a fan of this name - it sounds like a method.\nHow about simply MetricGetter or GenericMetricRegistry?\nYou could always go with the super generic MetricUtils \ud83d\ude04\nMore controversially would it work to move this into MetricsService?", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402199600", "createdAt": "2020-04-02T10:07:52Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/MetricGetOrRegister.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.metrics.cdi;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+\n+/**\n+ * Unfortunately the {@link MetricRegistry} has no generic versions of the get or register methods for the different\n+ * types of {@link Metric}s. Therefore this utility provides a generic API by mapping the generic methods to the type\n+ * specific ones.\n+ *\n+ * @author Jan Bernitt\n+ * @since 5.202\n+ */\n+public final class MetricGetOrRegister<T extends Metric> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1MjQ4OQ==", "bodyText": "it sounds like a method.\n\nThat was intentional. It essentially is one. I think in MP Metrics 3.0 we can replace it with a method existing on the registry.\n\nMore controversially would it work to move this into MetricsService?\n\nI'd consider this a bad idea and the way to a big ball of mud architecture. Nothing in this class has any dependency to the MetricsService. Why create it just for the sake of putting it in a bucket?\nI have nothing against using a different name but MetricGetter and GenericMetricRegistry are confusing to me given what it does. In that case I rather name it just MetricUtils (or add it to such a class should it exist).", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402252489", "createdAt": "2020-04-02T11:50:20Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/MetricGetOrRegister.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.metrics.cdi;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+\n+/**\n+ * Unfortunately the {@link MetricRegistry} has no generic versions of the get or register methods for the different\n+ * types of {@link Metric}s. Therefore this utility provides a generic API by mapping the generic methods to the type\n+ * specific ones.\n+ *\n+ * @author Jan Bernitt\n+ * @since 5.202\n+ */\n+public final class MetricGetOrRegister<T extends Metric> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5OTYwMA=="}, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTc0MQ==", "bodyText": "Renamed to MetricUtils", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402275741", "createdAt": "2020-04-02T12:31:15Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/MetricGetOrRegister.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.metrics.cdi;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+\n+/**\n+ * Unfortunately the {@link MetricRegistry} has no generic versions of the get or register methods for the different\n+ * types of {@link Metric}s. Therefore this utility provides a generic API by mapping the generic methods to the type\n+ * specific ones.\n+ *\n+ * @author Jan Bernitt\n+ * @since 5.202\n+ */\n+public final class MetricGetOrRegister<T extends Metric> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5OTYwMA=="}, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDQxODA0OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/interceptor/AbstractInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDoxMTo0MVrOF_kcfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTo1NDo0NVrOF_nr4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIwMTcyNA==", "bodyText": "How much effort is it to do this?", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402201724", "createdAt": "2020-04-02T10:11:41Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/interceptor/AbstractInterceptor.java", "diffHunk": "@@ -96,10 +101,13 @@ private Object timeoutInvocation(InvocationContext context) throws Exception {\n     private <E extends Member & AnnotatedElement> Object preInterceptor(InvocationContext context, E element) throws Exception {\n         initService();\n         if (metricsService.isEnabled()) {\n+            //FIXME there is an issue here: the element does not correctly reflect the updated annotations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDgxNg==", "bodyText": "I opted to not open that box because of the change of behaviour it might bring. I don't think it is much work but it is this ugly inconsistency in CDI where you cannot ask for the Bean that is intercepted. Weld has a non standard way around it which allows to access the CDI level abstraction which has the correct picture. To be clear: this is just the difference between dynamic adds/removes of annotations on CDI level considered or not.", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402254816", "createdAt": "2020-04-02T11:54:45Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/interceptor/AbstractInterceptor.java", "diffHunk": "@@ -96,10 +101,13 @@ private Object timeoutInvocation(InvocationContext context) throws Exception {\n     private <E extends Member & AnnotatedElement> Object preInterceptor(InvocationContext context, E element) throws Exception {\n         initService();\n         if (metricsService.isEnabled()) {\n+            //FIXME there is an issue here: the element does not correctly reflect the updated annotations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIwMTcyNA=="}, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDQ5ODgyOnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/producer/MetricProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozNToxOFrOF_lPdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTo1NTo0MFrOF_nt0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNDc3Mw==", "bodyText": "I'm probably overlooking something, but why aren't you simply creating the AnnotationReader as the associated type?\nAnnotationReader<HISTOGRAM>", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402214773", "createdAt": "2020-04-02T10:35:18Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/producer/MetricProducer.java", "diffHunk": "@@ -51,105 +52,67 @@\n import org.eclipse.microprofile.metrics.Histogram;\n import org.eclipse.microprofile.metrics.Meter;\n import org.eclipse.microprofile.metrics.MetricRegistry;\n-import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n import org.eclipse.microprofile.metrics.Timer;\n import org.eclipse.microprofile.metrics.annotation.Metric;\n \n @Dependent\n public class MetricProducer {\n \n-    @Inject\n-    private MetricRegistry registry;\n+    private static final AnnotationReader<Metric> COUNTER = AnnotationReader.METRIC.asType(MetricType.COUNTER);\n+    private static final AnnotationReader<Metric> CONCURRENT_GAUGE = AnnotationReader.METRIC.asType(MetricType.CONCURRENT_GAUGE);\n+    private static final AnnotationReader<Metric> GAUGE = AnnotationReader.METRIC.asType(MetricType.GAUGE);\n+    private static final AnnotationReader<Metric> HISTOGRAM = AnnotationReader.METRIC.asType(MetricType.HISTOGRAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NTMxNA==", "bodyText": "Indeed. You always read @Metric annotations. Just that they refer or represent different metric types.", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402255314", "createdAt": "2020-04-02T11:55:40Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/cdi/producer/MetricProducer.java", "diffHunk": "@@ -51,105 +52,67 @@\n import org.eclipse.microprofile.metrics.Histogram;\n import org.eclipse.microprofile.metrics.Meter;\n import org.eclipse.microprofile.metrics.MetricRegistry;\n-import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n import org.eclipse.microprofile.metrics.Timer;\n import org.eclipse.microprofile.metrics.annotation.Metric;\n \n @Dependent\n public class MetricProducer {\n \n-    @Inject\n-    private MetricRegistry registry;\n+    private static final AnnotationReader<Metric> COUNTER = AnnotationReader.METRIC.asType(MetricType.COUNTER);\n+    private static final AnnotationReader<Metric> CONCURRENT_GAUGE = AnnotationReader.METRIC.asType(MetricType.CONCURRENT_GAUGE);\n+    private static final AnnotationReader<Metric> GAUGE = AnnotationReader.METRIC.asType(MetricType.GAUGE);\n+    private static final AnnotationReader<Metric> HISTOGRAM = AnnotationReader.METRIC.asType(MetricType.HISTOGRAM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNDc3Mw=="}, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDUxNDA3OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/impl/EWMA.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozOTo0NFrOF_lY0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMTozN1rOF_o-cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzE2OA==", "bodyText": "I know it's not a part of this PR, but this is a horribly named class \ud83d\ude02\nCan we not simply call it ExponentiallyWeightedMovingAverage?", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402217168", "createdAt": "2020-04-02T10:39:44Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/impl/EWMA.java", "diffHunk": "@@ -1,8 +1,8 @@\n /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n- * \n- *    Copyright (c) [2018] Payara Foundation and/or its affiliates. All rights reserved.\n- * \n+ *\n+ *    Copyright (c) [2018-2020] Payara Foundation and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NTk1NQ==", "bodyText": "Renamed-", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402275955", "createdAt": "2020-04-02T12:31:37Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/impl/EWMA.java", "diffHunk": "@@ -1,8 +1,8 @@\n /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n- * \n- *    Copyright (c) [2018] Payara Foundation and/or its affiliates. All rights reserved.\n- * \n+ *\n+ *    Copyright (c) [2018-2020] Payara Foundation and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNzE2OA=="}, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDUzODA5OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/impl/MetricRegistryImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0NzoyMlrOF_loHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzowMDo0NVrOF_qDnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMTA4NA==", "bodyText": "I take it this is required somewhere?\nIt doesn't seem to be used in any comparison.", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402221084", "createdAt": "2020-04-02T10:47:22Z", "author": {"login": "Pandrex247"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/impl/MetricRegistryImpl.java", "diffHunk": "@@ -341,11 +383,16 @@ public void removeMatching(MetricFilter filter) {\n \n     private <T extends Metric> T findMetricOrCreate(String name, MetricType metricType, Tag... tags) {\n         checkNameIsNotNullOrEmpty(name);\n-        return findMetricOrCreate(Metadata.builder().withName(name).withType(metricType).build(), true, tags);\n+        Metadata metadata = Metadata.builder()\n+                .withName(name)\n+                .withType(metricType)\n+                .withOptionalDisplayName(null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NTk5NQ==", "bodyText": "You talk about the display name?", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402255995", "createdAt": "2020-04-02T11:56:56Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/impl/MetricRegistryImpl.java", "diffHunk": "@@ -341,11 +383,16 @@ public void removeMatching(MetricFilter filter) {\n \n     private <T extends Metric> T findMetricOrCreate(String name, MetricType metricType, Tag... tags) {\n         checkNameIsNotNullOrEmpty(name);\n-        return findMetricOrCreate(Metadata.builder().withName(name).withType(metricType).build(), true, tags);\n+        Metadata metadata = Metadata.builder()\n+                .withName(name)\n+                .withType(metricType)\n+                .withOptionalDisplayName(null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMTA4NA=="}, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5MzY2MQ==", "bodyText": "This is a work-around to get a uniform result for both type and display name. This is important since Metadata is compared with equals and expected to be same in case of shared family.\nSee also eclipse/microprofile-metrics#557 and eclipse/microprofile-metrics#558", "url": "https://github.com/payara/Payara/pull/4582#discussion_r402293661", "createdAt": "2020-04-02T13:00:45Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/metrics/src/main/java/fish/payara/microprofile/metrics/impl/MetricRegistryImpl.java", "diffHunk": "@@ -341,11 +383,16 @@ public void removeMatching(MetricFilter filter) {\n \n     private <T extends Metric> T findMetricOrCreate(String name, MetricType metricType, Tag... tags) {\n         checkNameIsNotNullOrEmpty(name);\n-        return findMetricOrCreate(Metadata.builder().withName(name).withType(metricType).build(), true, tags);\n+        Metadata metadata = Metadata.builder()\n+                .withName(name)\n+                .withType(metricType)\n+                .withOptionalDisplayName(null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMTA4NA=="}, "originalCommit": {"oid": "0218a1d184a40eb72cba256eaf4ceecfa845ae0b"}, "originalPosition": 202}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1316, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}