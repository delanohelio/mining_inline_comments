{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNjQyNjE0", "number": 4966, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjowNTozNlrOEyUcjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDozNTozMFrOE7fEMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTk5MjQ1OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/config/src/main/java/fish/payara/microprofile/config/ConfigSniffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjowNTozNlrOHo46Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjowNTozNlrOHo46Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzNzU0Mw==", "bodyText": "much nicer using an array literal, something like\nreturn { org.eclipse.microprofile.config.inject.ConfigProperty.class }\nMaybe also use a import for ConfigProperty?", "url": "https://github.com/payara/Payara/pull/4966#discussion_r512637543", "createdAt": "2020-10-27T12:05:36Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/config/src/main/java/fish/payara/microprofile/config/ConfigSniffer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.config;\n+\n+import java.lang.annotation.Annotation;\n+\n+import org.glassfish.hk2.api.PerLookup;\n+import org.jvnet.hk2.annotations.Service;\n+\n+import fish.payara.microprofile.connector.MicroProfileSniffer;\n+\n+@Service\n+@PerLookup\n+public class ConfigSniffer extends MicroProfileSniffer {\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Class<? extends Annotation>[] getAnnotationTypes() {\n+        Class<? extends Annotation>[] annotations = new Class[1];\n+\n+        // Search for ConfigProperty annotation used in the CDI extension\n+        annotations[0] = org.eclipse.microprofile.config.inject.ConfigProperty.class;\n+\n+        return annotations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4592003f2abd7720a90694a7d4f8de00fdff8061"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTk5ODIzOnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/FaultToleranceApplicationContainer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjowNzowNVrOHo49-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTo0MDozNVrOHsmtXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzODQ1Ng==", "bodyText": "Why override the methods identical to how they are implemented in the super class?", "url": "https://github.com/payara/Payara/pull/4966#discussion_r512638456", "createdAt": "2020-10-27T12:07:05Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/FaultToleranceApplicationContainer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.faulttolerance;\n+\n+import org.glassfish.api.deployment.ApplicationContext;\n+import org.glassfish.api.deployment.DeploymentContext;\n+\n+import fish.payara.microprofile.connector.MicroProfileApplicationContainer;\n+\n+public class FaultToleranceApplicationContainer extends MicroProfileApplicationContainer {\n+\n+    protected FaultToleranceApplicationContainer(DeploymentContext deploymentContext) {\n+        super(deploymentContext);\n+    }\n+\n+    @Override\n+    public boolean start(ApplicationContext ctx) throws Exception {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean stop(ApplicationContext ctx) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean resume() throws Exception {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean suspend() {\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4592003f2abd7720a90694a7d4f8de00fdff8061"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0NDEzNg==", "bodyText": "These aren't implemented in the superclass which is why they're required. I'm hesitant to implement them in the super class, as thinking abstractly it doesn't make sense to me to have these as the default implementation. I want to remove the instances of \"magic\" that make the class harder to understand. I can add some javadocs to explain what these methods are doing?", "url": "https://github.com/payara/Payara/pull/4966#discussion_r512744136", "createdAt": "2020-10-27T14:33:18Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/FaultToleranceApplicationContainer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.faulttolerance;\n+\n+import org.glassfish.api.deployment.ApplicationContext;\n+import org.glassfish.api.deployment.DeploymentContext;\n+\n+import fish.payara.microprofile.connector.MicroProfileApplicationContainer;\n+\n+public class FaultToleranceApplicationContainer extends MicroProfileApplicationContainer {\n+\n+    protected FaultToleranceApplicationContainer(DeploymentContext deploymentContext) {\n+        super(deploymentContext);\n+    }\n+\n+    @Override\n+    public boolean start(ApplicationContext ctx) throws Exception {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean stop(ApplicationContext ctx) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean resume() throws Exception {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean suspend() {\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzODQ1Ng=="}, "originalCommit": {"oid": "4592003f2abd7720a90694a7d4f8de00fdff8061"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5NjQ3MA==", "bodyText": "Must have become confused by all the new classes. I thought I saw these also being implemented in a base class. So you say these are implemented identical several times for different reasons?", "url": "https://github.com/payara/Payara/pull/4966#discussion_r513296470", "createdAt": "2020-10-28T09:31:08Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/FaultToleranceApplicationContainer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.faulttolerance;\n+\n+import org.glassfish.api.deployment.ApplicationContext;\n+import org.glassfish.api.deployment.DeploymentContext;\n+\n+import fish.payara.microprofile.connector.MicroProfileApplicationContainer;\n+\n+public class FaultToleranceApplicationContainer extends MicroProfileApplicationContainer {\n+\n+    protected FaultToleranceApplicationContainer(DeploymentContext deploymentContext) {\n+        super(deploymentContext);\n+    }\n+\n+    @Override\n+    public boolean start(ApplicationContext ctx) throws Exception {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean stop(ApplicationContext ctx) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean resume() throws Exception {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean suspend() {\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzODQ1Ng=="}, "originalCommit": {"oid": "4592003f2abd7720a90694a7d4f8de00fdff8061"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzMzU5OQ==", "bodyText": "The start and stop methods are stubs in a couple of cases, but the resume and suspend methods may be stubs everywhere. I'll implement default resume and suspend methods.", "url": "https://github.com/payara/Payara/pull/4966#discussion_r516533599", "createdAt": "2020-11-03T09:40:35Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/microprofile/fault-tolerance/src/main/java/fish/payara/microprofile/faulttolerance/FaultToleranceApplicationContainer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.faulttolerance;\n+\n+import org.glassfish.api.deployment.ApplicationContext;\n+import org.glassfish.api.deployment.DeploymentContext;\n+\n+import fish.payara.microprofile.connector.MicroProfileApplicationContainer;\n+\n+public class FaultToleranceApplicationContainer extends MicroProfileApplicationContainer {\n+\n+    protected FaultToleranceApplicationContainer(DeploymentContext deploymentContext) {\n+        super(deploymentContext);\n+    }\n+\n+    @Override\n+    public boolean start(ApplicationContext ctx) throws Exception {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean stop(ApplicationContext ctx) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean resume() throws Exception {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean suspend() {\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzODQ1Ng=="}, "originalCommit": {"oid": "4592003f2abd7720a90694a7d4f8de00fdff8061"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODAxMjc2OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/OpenAPISupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDo1Mjo0N1rOHvpEow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozOToxM1rOHv6GBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxODA1MQ==", "bodyText": "Does this work like as intended should an exception be thrown at some of the steps so that the document contains as much information as possible to that point?", "url": "https://github.com/payara/Payara/pull/4966#discussion_r519718051", "createdAt": "2020-11-09T10:52:47Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/OpenAPISupplier.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.openapi.impl;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import java.util.logging.Logger;\n+\n+import com.sun.enterprise.v3.server.ApplicationLifecycle;\n+import com.sun.enterprise.v3.services.impl.GrizzlyService;\n+\n+import org.eclipse.microprofile.openapi.models.OpenAPI;\n+import org.glassfish.api.admin.ServerEnvironment;\n+import org.glassfish.api.deployment.archive.ReadableArchive;\n+import org.glassfish.grizzly.config.dom.NetworkListener;\n+import org.glassfish.hk2.api.MultiException;\n+import org.glassfish.hk2.classmodel.reflect.Parser;\n+import org.glassfish.hk2.classmodel.reflect.Type;\n+import org.glassfish.hk2.classmodel.reflect.Types;\n+import org.glassfish.internal.api.Globals;\n+import org.glassfish.internal.api.ServerContext;\n+import org.glassfish.internal.deployment.analysis.StructuredDeploymentTracing;\n+\n+import fish.payara.microprofile.openapi.impl.config.OpenApiConfiguration;\n+import fish.payara.microprofile.openapi.impl.model.OpenAPIImpl;\n+import fish.payara.microprofile.openapi.impl.processor.ApplicationProcessor;\n+import fish.payara.microprofile.openapi.impl.processor.BaseProcessor;\n+import fish.payara.microprofile.openapi.impl.processor.FileProcessor;\n+import fish.payara.microprofile.openapi.impl.processor.FilterProcessor;\n+import fish.payara.microprofile.openapi.impl.processor.ModelReaderProcessor;\n+\n+public class OpenAPISupplier implements Supplier<OpenAPI> {\n+\n+    private final OpenApiConfiguration config;\n+    private final String applicationId;\n+    private final String contextRoot;\n+    private final ReadableArchive archive;\n+    private final ClassLoader classLoader;\n+\n+    private volatile OpenAPI document;\n+\n+    private boolean enabled;\n+\n+    public OpenAPISupplier(String applicationId, String contextRoot,\n+            ReadableArchive archive, ClassLoader classLoader) {\n+        this.config = new OpenApiConfiguration(classLoader);\n+        this.applicationId = applicationId;\n+        this.contextRoot = contextRoot;\n+        this.archive = archive;\n+        this.classLoader = classLoader;\n+        this.enabled = true;\n+    }\n+\n+    public void setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    @Override\n+    public synchronized OpenAPI get() {\n+        if (this.document != null) {\n+            return this.document;\n+        }\n+        if (!enabled) {\n+            return null;\n+        }\n+\n+        try {\n+            final Parser parser = Globals.get(ApplicationLifecycle.class).getDeployableParser(\n+                    archive,\n+                    true,\n+                    true,\n+                    StructuredDeploymentTracing.create(applicationId),\n+                    Logger.getLogger(OpenApiService.class.getName())\n+            );\n+            final Types types = parser.getContext().getTypes();\n+\n+            OpenAPI doc = new OpenAPIImpl();\n+            try {\n+                final List<URL> baseURLs = getServerURL(contextRoot);\n+                doc = new ModelReaderProcessor().process(doc, config);\n+                doc = new FileProcessor(classLoader).process(doc, config);\n+                doc = new ApplicationProcessor(\n+                        types,\n+                        filterTypes(archive, config, types),\n+                        classLoader\n+                ).process(doc, config);\n+                doc = new BaseProcessor(baseURLs).process(doc, config);\n+                doc = new FilterProcessor().process(doc, config);\n+            } finally {\n+                this.document = doc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca874527daddd1df962be89ab73fca387f1c4be"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NjkzMg==", "bodyText": "My changes don't (see \"shouldn't\") change any functionality when the sniffer returns true for the application. All DeploymentExceptions related to MP deployment should still propagate, this just disables all CDI extensions and processing when no MP or JAX-RS annotations are detected", "url": "https://github.com/payara/Payara/pull/4966#discussion_r519996932", "createdAt": "2020-11-09T17:39:13Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/OpenAPISupplier.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.microprofile.openapi.impl;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import java.util.logging.Logger;\n+\n+import com.sun.enterprise.v3.server.ApplicationLifecycle;\n+import com.sun.enterprise.v3.services.impl.GrizzlyService;\n+\n+import org.eclipse.microprofile.openapi.models.OpenAPI;\n+import org.glassfish.api.admin.ServerEnvironment;\n+import org.glassfish.api.deployment.archive.ReadableArchive;\n+import org.glassfish.grizzly.config.dom.NetworkListener;\n+import org.glassfish.hk2.api.MultiException;\n+import org.glassfish.hk2.classmodel.reflect.Parser;\n+import org.glassfish.hk2.classmodel.reflect.Type;\n+import org.glassfish.hk2.classmodel.reflect.Types;\n+import org.glassfish.internal.api.Globals;\n+import org.glassfish.internal.api.ServerContext;\n+import org.glassfish.internal.deployment.analysis.StructuredDeploymentTracing;\n+\n+import fish.payara.microprofile.openapi.impl.config.OpenApiConfiguration;\n+import fish.payara.microprofile.openapi.impl.model.OpenAPIImpl;\n+import fish.payara.microprofile.openapi.impl.processor.ApplicationProcessor;\n+import fish.payara.microprofile.openapi.impl.processor.BaseProcessor;\n+import fish.payara.microprofile.openapi.impl.processor.FileProcessor;\n+import fish.payara.microprofile.openapi.impl.processor.FilterProcessor;\n+import fish.payara.microprofile.openapi.impl.processor.ModelReaderProcessor;\n+\n+public class OpenAPISupplier implements Supplier<OpenAPI> {\n+\n+    private final OpenApiConfiguration config;\n+    private final String applicationId;\n+    private final String contextRoot;\n+    private final ReadableArchive archive;\n+    private final ClassLoader classLoader;\n+\n+    private volatile OpenAPI document;\n+\n+    private boolean enabled;\n+\n+    public OpenAPISupplier(String applicationId, String contextRoot,\n+            ReadableArchive archive, ClassLoader classLoader) {\n+        this.config = new OpenApiConfiguration(classLoader);\n+        this.applicationId = applicationId;\n+        this.contextRoot = contextRoot;\n+        this.archive = archive;\n+        this.classLoader = classLoader;\n+        this.enabled = true;\n+    }\n+\n+    public void setEnabled(boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    @Override\n+    public synchronized OpenAPI get() {\n+        if (this.document != null) {\n+            return this.document;\n+        }\n+        if (!enabled) {\n+            return null;\n+        }\n+\n+        try {\n+            final Parser parser = Globals.get(ApplicationLifecycle.class).getDeployableParser(\n+                    archive,\n+                    true,\n+                    true,\n+                    StructuredDeploymentTracing.create(applicationId),\n+                    Logger.getLogger(OpenApiService.class.getName())\n+            );\n+            final Types types = parser.getContext().getTypes();\n+\n+            OpenAPI doc = new OpenAPIImpl();\n+            try {\n+                final List<URL> baseURLs = getServerURL(contextRoot);\n+                doc = new ModelReaderProcessor().process(doc, config);\n+                doc = new FileProcessor(classLoader).process(doc, config);\n+                doc = new ApplicationProcessor(\n+                        types,\n+                        filterTypes(archive, config, types),\n+                        classLoader\n+                ).process(doc, config);\n+                doc = new BaseProcessor(baseURLs).process(doc, config);\n+                doc = new FilterProcessor().process(doc, config);\n+            } finally {\n+                this.document = doc;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxODA1MQ=="}, "originalCommit": {"oid": "aca874527daddd1df962be89ab73fca387f1c4be"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODEwNDE5OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/healthcheck/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDozNTozMFrOH3KPuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDozNTozMFrOH3KPuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMTU5Mg==", "bodyText": "Copyright year needs updating", "url": "https://github.com/payara/Payara/pull/4966#discussion_r527601592", "createdAt": "2020-11-20T10:35:30Z", "author": {"login": "Cousjava"}, "path": "appserver/payara-appserver-modules/microprofile/healthcheck/pom.xml", "diffHunk": "@@ -67,6 +67,11 @@\n             <groupId>org.eclipse.microprofile.health</groupId>\n             <artifactId>microprofile-health-api</artifactId>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5247791d6fcd99cb43d1ab81892b42adfe598b1c"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1242, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}