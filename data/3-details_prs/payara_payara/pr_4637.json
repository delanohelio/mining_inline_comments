{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTk4ODYx", "number": 4637, "title": "APPSERV-141 Fixes undefined behaviour of PayaraConfig ", "bodyText": "Summary\nFixes behaviour for undefined properties of PayaraConfig for arrays, lists and sets.\nIf an undefined property is resolved the Config implementation should always throw an NoSuchElementException. This behaviour was changed unintentional and incorrectly by #4614 .\nTesting\nAdded unit tests for undefined property lookup.\nTesting Performed\nRunning MP TCKs https://github.com/payara/MicroProfile-TCK-Runners :\n# setup environment for TCKs\nexport my_int_property=45\nexport MY_BOOLEAN_PROPERTY=true\nexport my_string_property=haha\nexport MY_STRING_PROPERTY=woohoo\nexport MP_CONFIG_CACHE_DURATION=0\nexport MP_METRICS_TAGS=tier=integration\n\n# start server\n{payara-bin-dir}/asadmin start-domain\n\n# run different MP TCKs\ncd {tck--runner-base-dir}/tck-runner/\nmvn clean install \"-Ppayara-server-remote\" \"-Dpayara.version=5.202\"\nThis is used to run MP Config, MP Metrics, MP Rest Client and MP FaultTolerance TCKs.\nThis will run all TCK with cache disabled (MP_CONFIG_CACHE_DURATION=0). This configuration is only needed for the MP Config TCK. Other TCKs should also pass with cache enabled (do export MP_CONFIG_CACHE_DURATION=30 and restart the server).\nNote that both starting the server and running the TCK should be done in same console to avoid having to setup same environment in multiple shells.\nI did run both with and without caching enabled (except the MP Config TCK that requires cache to be disabled as otherwise 2 tests will fail)", "createdAt": "2020-04-21T10:58:11Z", "url": "https://github.com/payara/Payara/pull/4637", "merged": true, "mergeCommit": {"oid": "24b465f05b41407bad1e880f769dbbc8f9d09fcd"}, "closed": true, "closedAt": "2020-04-23T09:38:31Z", "author": {"login": "jbee"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZxbxIAH2gAyNDA2NTk4ODYxOjZiNzVjYzgxMjI2MTE4OTYwNzFiNjVkY2U1ODI4YjBmOTc1MTIwMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ2JcvgFqTM5NzQ2NTYwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6b75cc8122611896071b65dce5828b0f9751200a", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/6b75cc8122611896071b65dce5828b0f9751200a", "committedDate": "2020-04-21T10:49:52Z", "message": "APPSERV-141 fixes undefined behaviour of PayaraConfig for arrays, lists and sets"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MjI2NTk1", "url": "https://github.com/payara/Payara/pull/4637#pullrequestreview-397226595", "createdAt": "2020-04-21T11:11:01Z", "commit": {"oid": "6b75cc8122611896071b65dce5828b0f9751200a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMToxMTowMlrOGJAFfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMToxMTowMlrOGJAFfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA5MTc3Mw==", "bodyText": "I was looking into not using getSetValues and getListValues directly (plain Config API access to avoid cast to PayaraConfig) as I realised that these should be implemented by using array access and later wrapping the returned array in a List or Set. What is unclear is how the default gets passed on using the standard API. So I made this cleanup as a preparation and noticed that it was simply assumed that the actual type argument is a Class type which it might not be so I added a more descriptive exception instead of the ClassCastException that was caused in such a case. As far as I understand it using a non Class type is not allowed according to standard but a user might get the idea it is valid and use a type like List<List<String>>.", "url": "https://github.com/payara/Payara/pull/4637#discussion_r412091773", "createdAt": "2020-04-21T11:11:02Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/config/src/main/java/fish/payara/microprofile/config/cdi/ConfigPropertyProducer.java", "diffHunk": "@@ -111,4 +112,14 @@ public static final Object getGenericProperty(InjectionPoint ip) {\n         return result;\n     }\n \n+    private static Class<?> getElementTypeFrom(ParameterizedType collectionType) {\n+        Type elementType = collectionType.getActualTypeArguments()[0];\n+        if (!(elementType instanceof Class)) {\n+            throw new DeploymentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b75cc8122611896071b65dce5828b0f9751200a"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDY1NjA2", "url": "https://github.com/payara/Payara/pull/4637#pullrequestreview-397465606", "createdAt": "2020-04-21T16:19:23Z", "commit": {"oid": "6b75cc8122611896071b65dce5828b0f9751200a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 811, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}