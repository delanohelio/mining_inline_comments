{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNzc3MjEw", "number": 4918, "title": "FISH-334 Integrate MicroProfile Metrics into Payara Health Service", "bodyText": "Description\nIntegrated MicroProfile Metrics into Payara Health service. This provides a way to monitor and log the values of metrics exposed by MicroProfile Metrics.\nTesting\nTesting Performed\nManually tested by monitoring metrics for different scopes, using MicroProfile Metrics sample application available in payara samples.\nDocumentation\nTODO\nNotes for Reviewers", "createdAt": "2020-09-27T21:03:19Z", "url": "https://github.com/payara/Payara/pull/4918", "merged": true, "mergeCommit": {"oid": "b3557409f892c291482a3df0a77ccbb756d8aec2"}, "closed": true, "closedAt": "2020-10-04T14:14:37Z", "author": {"login": "MeroRai"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMXWjxgH2gAyNDkzNzc3MjEwOmU1ZWE1MDlmNGU3MWVmNWJiZDhkMGE1ZThjZDk5MDU5NDIxNWUxOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPNo8NgH2gAyNDkzNzc3MjEwOjI2ZWZhYWZiZmNkYjQ2NmNmOTMzNmVhNjZmYzA1ZjkyZWY3ZDQ2MTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e5ea509f4e71ef5bbd8d0a5e8cd990594215e191", "author": {"user": {"login": "MeroRai", "name": "Mero Rai"}}, "url": "https://github.com/payara/Payara/commit/e5ea509f4e71ef5bbd8d0a5e8cd990594215e191", "committedDate": "2020-09-25T15:16:47Z", "message": "FISH-334 Integrate MicroProfile Metrics into Payara Healthcheck Service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0d9d5a61766522a3c4d6bf84a8a482bdc45960b", "author": {"user": {"login": "MeroRai", "name": "Mero Rai"}}, "url": "https://github.com/payara/Payara/commit/e0d9d5a61766522a3c4d6bf84a8a482bdc45960b", "committedDate": "2020-09-25T18:42:05Z", "message": "Admin console integration of Microprofile Metrics Checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5582668f009c6fc3319425083a3bc000b8195175", "author": {"user": {"login": "MeroRai", "name": "Mero Rai"}}, "url": "https://github.com/payara/Payara/commit/5582668f009c6fc3319425083a3bc000b8195175", "committedDate": "2020-09-27T20:46:02Z", "message": "Support for dynamic loading of application in the Admin Console and support for mutiple monitoring mutiple metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "974d33d82335c34455819059678fb587f88419e5", "author": {"user": {"login": "MeroRai", "name": "Mero Rai"}}, "url": "https://github.com/payara/Payara/commit/974d33d82335c34455819059678fb587f88419e5", "committedDate": "2020-09-27T21:38:42Z", "message": "Merge branch 'master' of https://github.com/payara/Payara into FISH-335"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NjczODI5", "url": "https://github.com/payara/Payara/pull/4918#pullrequestreview-497673829", "createdAt": "2020-09-28T15:57:11Z", "commit": {"oid": "974d33d82335c34455819059678fb587f88419e5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo1NzoxMVrOHZFI0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjoyMjozNVrOHZGJEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MDYyNQ==", "bodyText": "Looks like this has a default, but it's not displayed in the admin console!", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496060625", "createdAt": "2020-09-28T15:57:11Z", "author": {"login": "MattGill98"}, "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/configuration/MicroProfileMetricsChecker.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *    Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *     The contents of this file are subject to the terms of either the GNU\n+ *     General Public License Version 2 only (\"GPL\") or the Common Development\n+ *     and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *     may not use this file except in compliance with the License.  You can\n+ *     obtain a copy of the License at\n+ *     https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *     See the License for the specific\n+ *     language governing permissions and limitations under the License.\n+ * \n+ *     When distributing the software, include this License Header Notice in each\n+ *     file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *     GPL Classpath Exception:\n+ *     The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *     exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *     file that accompanied this code.\n+ * \n+ *     Modifications:\n+ *     If applicable, add the following below the License Header, with the fields\n+ *     enclosed by brackets [] replaced by your own identifying information:\n+ *     \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *     Contributor(s):\n+ *     If you wish your version of this file to be governed by only the CDDL or\n+ *     only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *     elects to include this software in this distribution under the [CDDL or GPL\n+ *     Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *     recipient has the option to distribute your version of this file under\n+ *     either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *     its licensees as provided above.  However, if you add GPL Version 2 code\n+ *     and therefore, elected the GPL Version 2 license, then the option applies\n+ *     only if the new code is made subject to such option by the copyright\n+ *     holder.\n+ */\n+package fish.payara.nucleus.healthcheck.configuration;\n+\n+import static fish.payara.nucleus.healthcheck.HealthCheckConstants.DEFAULT_MICROPROFILE_METRICS_NAME;\n+import org.jvnet.hk2.config.Attribute;\n+import org.jvnet.hk2.config.Configured;\n+\n+import java.beans.PropertyVetoException;\n+\n+/**\n+ * @author mertcaliskan\n+ */\n+@Configured\n+@CheckerConfigurationType(type = CheckerType.MP_METRICS)\n+public interface MicroProfileMetricsChecker extends Checker {\n+    \n+    @Attribute(defaultValue = DEFAULT_MICROPROFILE_METRICS_NAME)\n+    String getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "974d33d82335c34455819059678fb587f88419e5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NTQ5Mg==", "bodyText": "I'd remove extra whitespace here", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496065492", "createdAt": "2020-09-28T16:04:35Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/healthcheck-metrics/src/main/java/fish/payara/healthcheck/microprofile/metrics/MicroProfileMetricsCheck.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ * \n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.healthcheck.microprofile.metrics;\n+\n+import fish.payara.microprofile.metrics.MetricsService;\n+import fish.payara.nucleus.healthcheck.configuration.MicroProfileMetricsChecker;\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.GOOD;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.WARNING;\n+import fish.payara.nucleus.healthcheck.HealthCheckResult;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.PostConstruct;\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.glassfish.api.StartupRunLevel;\n+import org.glassfish.hk2.runlevel.RunLevel;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+\n+@Service(name = \"healthcheck-mpmetrics\")\n+@RunLevel(StartupRunLevel.VAL)\n+public class MicroProfileMetricsCheck\n+        extends BaseHealthCheck<HealthCheckMicroProfileMetricstExecutionOptions, MicroProfileMetricsChecker> {\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        postConstruct(this, MicroProfileMetricsChecker.class);\n+    }\n+\n+    @Override\n+    public HealthCheckMicroProfileMetricstExecutionOptions constructOptions(MicroProfileMetricsChecker checker) {\n+        return new HealthCheckMicroProfileMetricstExecutionOptions(Boolean.valueOf(\n+                checker.getEnabled()),\n+                Long.parseLong(checker.getTime()),\n+                asTimeUnit(checker.getUnit()),\n+                checker.getMetricsScope(),\n+                checker.getMetricApplicationName(),\n+                checker.getMetricName());\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"healthcheck.description.MPmetrics\";\n+    }\n+\n+    @Override\n+    protected HealthCheckResult doCheckInternal() {\n+        String registryName = options.getMetricsScope();\n+        List<String> metricNames = new ArrayList<>(Arrays.asList(options.getMetricName().split(\",\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "974d33d82335c34455819059678fb587f88419e5"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NTk1NA==", "bodyText": "This is slow, I'd remove it from the string when removing whitespace to save 2 passes", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496065954", "createdAt": "2020-09-28T16:05:17Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/healthcheck-metrics/src/main/java/fish/payara/healthcheck/microprofile/metrics/MicroProfileMetricsCheck.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ * \n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.healthcheck.microprofile.metrics;\n+\n+import fish.payara.microprofile.metrics.MetricsService;\n+import fish.payara.nucleus.healthcheck.configuration.MicroProfileMetricsChecker;\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.GOOD;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.WARNING;\n+import fish.payara.nucleus.healthcheck.HealthCheckResult;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.PostConstruct;\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.glassfish.api.StartupRunLevel;\n+import org.glassfish.hk2.runlevel.RunLevel;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+\n+@Service(name = \"healthcheck-mpmetrics\")\n+@RunLevel(StartupRunLevel.VAL)\n+public class MicroProfileMetricsCheck\n+        extends BaseHealthCheck<HealthCheckMicroProfileMetricstExecutionOptions, MicroProfileMetricsChecker> {\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        postConstruct(this, MicroProfileMetricsChecker.class);\n+    }\n+\n+    @Override\n+    public HealthCheckMicroProfileMetricstExecutionOptions constructOptions(MicroProfileMetricsChecker checker) {\n+        return new HealthCheckMicroProfileMetricstExecutionOptions(Boolean.valueOf(\n+                checker.getEnabled()),\n+                Long.parseLong(checker.getTime()),\n+                asTimeUnit(checker.getUnit()),\n+                checker.getMetricsScope(),\n+                checker.getMetricApplicationName(),\n+                checker.getMetricName());\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"healthcheck.description.MPmetrics\";\n+    }\n+\n+    @Override\n+    protected HealthCheckResult doCheckInternal() {\n+        String registryName = options.getMetricsScope();\n+        List<String> metricNames = new ArrayList<>(Arrays.asList(options.getMetricName().split(\",\")));\n+        metricNames.removeAll(Arrays.asList(\"\", null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "974d33d82335c34455819059678fb587f88419e5"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NjQ2Nw==", "bodyText": "Is there any reason you're injecting the metrics service fresh each time?", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496066467", "createdAt": "2020-09-28T16:06:05Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/healthcheck-metrics/src/main/java/fish/payara/healthcheck/microprofile/metrics/MicroProfileMetricsCheck.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ * \n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.healthcheck.microprofile.metrics;\n+\n+import fish.payara.microprofile.metrics.MetricsService;\n+import fish.payara.nucleus.healthcheck.configuration.MicroProfileMetricsChecker;\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.GOOD;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.WARNING;\n+import fish.payara.nucleus.healthcheck.HealthCheckResult;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.PostConstruct;\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.glassfish.api.StartupRunLevel;\n+import org.glassfish.hk2.runlevel.RunLevel;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+\n+@Service(name = \"healthcheck-mpmetrics\")\n+@RunLevel(StartupRunLevel.VAL)\n+public class MicroProfileMetricsCheck\n+        extends BaseHealthCheck<HealthCheckMicroProfileMetricstExecutionOptions, MicroProfileMetricsChecker> {\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        postConstruct(this, MicroProfileMetricsChecker.class);\n+    }\n+\n+    @Override\n+    public HealthCheckMicroProfileMetricstExecutionOptions constructOptions(MicroProfileMetricsChecker checker) {\n+        return new HealthCheckMicroProfileMetricstExecutionOptions(Boolean.valueOf(\n+                checker.getEnabled()),\n+                Long.parseLong(checker.getTime()),\n+                asTimeUnit(checker.getUnit()),\n+                checker.getMetricsScope(),\n+                checker.getMetricApplicationName(),\n+                checker.getMetricName());\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"healthcheck.description.MPmetrics\";\n+    }\n+\n+    @Override\n+    protected HealthCheckResult doCheckInternal() {\n+        String registryName = options.getMetricsScope();\n+        List<String> metricNames = new ArrayList<>(Arrays.asList(options.getMetricName().split(\",\")));\n+        metricNames.removeAll(Arrays.asList(\"\", null));\n+        MetricsService metricsService = Globals.getDefaultBaseServiceLocator().getService(MetricsService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "974d33d82335c34455819059678fb587f88419e5"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODM5Nw==", "bodyText": "Does this need repeating each loop? Also, users won't be familiar with the dot notation of the metrics - they're mote likely to use underscore notation as it appears in the metrics result", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496068397", "createdAt": "2020-09-28T16:09:15Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/healthcheck-metrics/src/main/java/fish/payara/healthcheck/microprofile/metrics/MicroProfileMetricsCheck.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ * \n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.healthcheck.microprofile.metrics;\n+\n+import fish.payara.microprofile.metrics.MetricsService;\n+import fish.payara.nucleus.healthcheck.configuration.MicroProfileMetricsChecker;\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.GOOD;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.WARNING;\n+import fish.payara.nucleus.healthcheck.HealthCheckResult;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.PostConstruct;\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.glassfish.api.StartupRunLevel;\n+import org.glassfish.hk2.runlevel.RunLevel;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+\n+@Service(name = \"healthcheck-mpmetrics\")\n+@RunLevel(StartupRunLevel.VAL)\n+public class MicroProfileMetricsCheck\n+        extends BaseHealthCheck<HealthCheckMicroProfileMetricstExecutionOptions, MicroProfileMetricsChecker> {\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        postConstruct(this, MicroProfileMetricsChecker.class);\n+    }\n+\n+    @Override\n+    public HealthCheckMicroProfileMetricstExecutionOptions constructOptions(MicroProfileMetricsChecker checker) {\n+        return new HealthCheckMicroProfileMetricstExecutionOptions(Boolean.valueOf(\n+                checker.getEnabled()),\n+                Long.parseLong(checker.getTime()),\n+                asTimeUnit(checker.getUnit()),\n+                checker.getMetricsScope(),\n+                checker.getMetricApplicationName(),\n+                checker.getMetricName());\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"healthcheck.description.MPmetrics\";\n+    }\n+\n+    @Override\n+    protected HealthCheckResult doCheckInternal() {\n+        String registryName = options.getMetricsScope();\n+        List<String> metricNames = new ArrayList<>(Arrays.asList(options.getMetricName().split(\",\")));\n+        metricNames.removeAll(Arrays.asList(\"\", null));\n+        MetricsService metricsService = Globals.getDefaultBaseServiceLocator().getService(MetricsService.class);\n+        if (registryName.equalsIgnoreCase(\"application\")) {\n+            registryName = options.getMetricsApplicationName();\n+        }\n+\n+        HealthCheckResult result = new HealthCheckResult();\n+        List<String> metrics = collectMetrics(metricsService.getRegistry(registryName), metricNames);\n+\n+        result.add(new HealthCheckResultEntry(metrics.isEmpty() ? WARNING : GOOD,\n+                metrics.isEmpty() ? \"The metric you entered doesn't exist under \" + registryName : metrics.stream().map(Object::toString).collect(Collectors.joining())));\n+\n+        return result;\n+\n+    }\n+\n+    private List<String> collectMetrics(MetricRegistry state, List<String> metricNames) {\n+        List<String> array = new ArrayList<>();\n+        String metricsInfos;\n+        if (metricNames == null || metricNames.isEmpty()) {\n+            for (String name : state.getNames()) {\n+                metricsInfos = getMetricInfos(name, state);\n+                if (metricsInfos != null) {\n+                    array.add(metricsInfos);\n+                }\n+\n+            }\n+        } else {\n+            for (String metricName : metricNames) {\n+                metricsInfos = getMetricInfos(metricName.trim(), state);\n+                if (metricsInfos != null) {\n+                    array.add(metricsInfos);\n+                }\n+            }\n+        }\n+        return array;\n+    }\n+\n+    private String getMetricInfos(String metricName, MetricRegistry state) {\n+        Map<MetricID, Metric> metricInfos = state.getMetrics().entrySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "974d33d82335c34455819059678fb587f88419e5"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NTk0NQ==", "bodyText": "Can we have a few more variables? I don't find the streaming particularly intuitive here, and the result contains excess whitespace", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496075945", "createdAt": "2020-09-28T16:20:53Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/healthcheck-metrics/src/main/java/fish/payara/healthcheck/microprofile/metrics/MicroProfileMetricsCheck.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *  Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *  The contents of this file are subject to the terms of either the GNU\n+ *  General Public License Version 2 only (\"GPL\") or the Common Development\n+ *  and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *  may not use this file except in compliance with the License.  You can\n+ *  obtain a copy of the License at\n+ *  https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *  See the License for the specific\n+ *  language governing permissions and limitations under the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License.\n+ * \n+ *  When distributing the software, include this License Header Notice in each\n+ *  file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *  GPL Classpath Exception:\n+ *  The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *  exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *  file that accompanied this code.\n+ * \n+ *  Modifications:\n+ *  If applicable, add the following below the License Header, with the fields\n+ *  enclosed by brackets [] replaced by your own identifying information:\n+ *  \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *  Contributor(s):\n+ *  If you wish your version of this file to be governed by only the CDDL or\n+ *  only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *  elects to include this software in this distribution under the [CDDL or GPL\n+ *  Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *  recipient has the option to distribute your version of this file under\n+ *  either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *  its licensees as provided above.  However, if you add GPL Version 2 code\n+ *  and therefore, elected the GPL Version 2 license, then the option applies\n+ *  only if the new code is made subject to such option by the copyright\n+ *  holder.\n+ */\n+package fish.payara.healthcheck.microprofile.metrics;\n+\n+import fish.payara.microprofile.metrics.MetricsService;\n+import fish.payara.nucleus.healthcheck.configuration.MicroProfileMetricsChecker;\n+import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.GOOD;\n+import static fish.payara.notification.healthcheck.HealthCheckResultStatus.WARNING;\n+import fish.payara.nucleus.healthcheck.HealthCheckResult;\n+import fish.payara.nucleus.healthcheck.preliminary.BaseHealthCheck;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.PostConstruct;\n+import org.eclipse.microprofile.metrics.ConcurrentGauge;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Histogram;\n+import org.eclipse.microprofile.metrics.Meter;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.glassfish.api.StartupRunLevel;\n+import org.glassfish.hk2.runlevel.RunLevel;\n+import org.glassfish.internal.api.Globals;\n+import org.jvnet.hk2.annotations.Service;\n+\n+@Service(name = \"healthcheck-mpmetrics\")\n+@RunLevel(StartupRunLevel.VAL)\n+public class MicroProfileMetricsCheck\n+        extends BaseHealthCheck<HealthCheckMicroProfileMetricstExecutionOptions, MicroProfileMetricsChecker> {\n+\n+    @PostConstruct\n+    public void postConstruct() {\n+        postConstruct(this, MicroProfileMetricsChecker.class);\n+    }\n+\n+    @Override\n+    public HealthCheckMicroProfileMetricstExecutionOptions constructOptions(MicroProfileMetricsChecker checker) {\n+        return new HealthCheckMicroProfileMetricstExecutionOptions(Boolean.valueOf(\n+                checker.getEnabled()),\n+                Long.parseLong(checker.getTime()),\n+                asTimeUnit(checker.getUnit()),\n+                checker.getMetricsScope(),\n+                checker.getMetricApplicationName(),\n+                checker.getMetricName());\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"healthcheck.description.MPmetrics\";\n+    }\n+\n+    @Override\n+    protected HealthCheckResult doCheckInternal() {\n+        String registryName = options.getMetricsScope();\n+        List<String> metricNames = new ArrayList<>(Arrays.asList(options.getMetricName().split(\",\")));\n+        metricNames.removeAll(Arrays.asList(\"\", null));\n+        MetricsService metricsService = Globals.getDefaultBaseServiceLocator().getService(MetricsService.class);\n+        if (registryName.equalsIgnoreCase(\"application\")) {\n+            registryName = options.getMetricsApplicationName();\n+        }\n+\n+        HealthCheckResult result = new HealthCheckResult();\n+        List<String> metrics = collectMetrics(metricsService.getRegistry(registryName), metricNames);\n+\n+        result.add(new HealthCheckResultEntry(metrics.isEmpty() ? WARNING : GOOD,\n+                metrics.isEmpty() ? \"The metric you entered doesn't exist under \" + registryName : metrics.stream().map(Object::toString).collect(Collectors.joining())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "974d33d82335c34455819059678fb587f88419e5"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NzA3NQ==", "bodyText": "This should be an actual list IMO (@Element(\"metric\")), to prevent comma separated strings in XML files - which can cause all sorts of issues!", "url": "https://github.com/payara/Payara/pull/4918#discussion_r496077075", "createdAt": "2020-09-28T16:22:35Z", "author": {"login": "MattGill98"}, "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/configuration/MicroProfileMetricsChecker.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ * \n+ *    Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ * \n+ *     The contents of this file are subject to the terms of either the GNU\n+ *     General Public License Version 2 only (\"GPL\") or the Common Development\n+ *     and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ *     may not use this file except in compliance with the License.  You can\n+ *     obtain a copy of the License at\n+ *     https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ *     See the License for the specific\n+ *     language governing permissions and limitations under the License.\n+ * \n+ *     When distributing the software, include this License Header Notice in each\n+ *     file and include the License file at glassfish/legal/LICENSE.txt.\n+ * \n+ *     GPL Classpath Exception:\n+ *     The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ *     exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ *     file that accompanied this code.\n+ * \n+ *     Modifications:\n+ *     If applicable, add the following below the License Header, with the fields\n+ *     enclosed by brackets [] replaced by your own identifying information:\n+ *     \"Portions Copyright [year] [name of copyright owner]\"\n+ * \n+ *     Contributor(s):\n+ *     If you wish your version of this file to be governed by only the CDDL or\n+ *     only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ *     elects to include this software in this distribution under the [CDDL or GPL\n+ *     Version 2] license.\"  If you don't indicate a single choice of license, a\n+ *     recipient has the option to distribute your version of this file under\n+ *     either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ *     its licensees as provided above.  However, if you add GPL Version 2 code\n+ *     and therefore, elected the GPL Version 2 license, then the option applies\n+ *     only if the new code is made subject to such option by the copyright\n+ *     holder.\n+ */\n+package fish.payara.nucleus.healthcheck.configuration;\n+\n+import static fish.payara.nucleus.healthcheck.HealthCheckConstants.DEFAULT_MICROPROFILE_METRICS_NAME;\n+import org.jvnet.hk2.config.Attribute;\n+import org.jvnet.hk2.config.Configured;\n+\n+import java.beans.PropertyVetoException;\n+\n+/**\n+ * @author mertcaliskan\n+ */\n+@Configured\n+@CheckerConfigurationType(type = CheckerType.MP_METRICS)\n+public interface MicroProfileMetricsChecker extends Checker {\n+    \n+    @Attribute(defaultValue = DEFAULT_MICROPROFILE_METRICS_NAME)\n+    String getName();\n+    void setName(String value) throws PropertyVetoException;\n+\n+    @Attribute\n+    String getMetricsScope();\n+    void setMetricsScope(String metricsSource) throws PropertyVetoException;\n+    \n+    @Attribute\n+    String getMetricApplicationName();\n+    void setMetricApplicationName(String metricsType) throws PropertyVetoException;\n+    \n+    @Attribute", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "974d33d82335c34455819059678fb587f88419e5"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50ab4576d903b44d040821c61cda07327c0da117", "author": {"user": {"login": "MeroRai", "name": "Mero Rai"}}, "url": "https://github.com/payara/Payara/commit/50ab4576d903b44d040821c61cda07327c0da117", "committedDate": "2020-10-01T18:14:41Z", "message": "Monitored metrics can now be added to a list of property"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abfb2248051682f4f4f36c2b1e0a6e5163d12d1a", "author": {"user": {"login": "MeroRai", "name": "Mero Rai"}}, "url": "https://github.com/payara/Payara/commit/abfb2248051682f4f4f36c2b1e0a6e5163d12d1a", "committedDate": "2020-10-02T00:00:41Z", "message": "Added copyright right header, updated portions copyright and refactored the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0f8c128cee01bdb0cf891c3c0ff0494415dd2ef", "author": {"user": {"login": "MeroRai", "name": "Mero Rai"}}, "url": "https://github.com/payara/Payara/commit/b0f8c128cee01bdb0cf891c3c0ff0494415dd2ef", "committedDate": "2020-10-02T01:52:29Z", "message": "Prevent MicroProfileMetricsChecker for registering without monitored metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4379d59de85ca3f30e58a554b4238baf18cc582", "author": {"user": {"login": "MeroRai", "name": "Mero Rai"}}, "url": "https://github.com/payara/Payara/commit/b4379d59de85ca3f30e58a554b4238baf18cc582", "committedDate": "2020-10-02T10:29:20Z", "message": "Fixed an issue where Monitored Metrics Property table changes were not being recognised"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMTE1ODI1", "url": "https://github.com/payara/Payara/pull/4918#pullrequestreview-501115825", "createdAt": "2020-10-02T13:04:17Z", "commit": {"oid": "b4379d59de85ca3f30e58a554b4238baf18cc582"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f3098b08c5322a15c932a2de42e28846635f942", "author": {"user": {"login": "MattGill98", "name": "Matthew Gill"}}, "url": "https://github.com/payara/Payara/commit/8f3098b08c5322a15c932a2de42e28846635f942", "committedDate": "2020-10-02T15:43:55Z", "message": "FISH-334 Use New Custom Writer\n\nAllows monitoring metrics by their actual name, rather than internal\nname. Needs new lines removing from output, and WriterProxy replacing\nwith a new custom Writer.\n\nSigned-off-by: Matthew Gill <matthew.gill@live.co.uk>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a981dc248855282dbf1b901d10410db6aa49b50c", "author": {"user": {"login": "MeroRai", "name": "Mero Rai"}}, "url": "https://github.com/payara/Payara/commit/a981dc248855282dbf1b901d10410db6aa49b50c", "committedDate": "2020-10-02T15:45:33Z", "message": "Added copyright header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e5f93060eb1511673150975ed157eff68a43e6a", "author": {"user": {"login": "MeroRai", "name": "Mero Rai"}}, "url": "https://github.com/payara/Payara/commit/6e5f93060eb1511673150975ed157eff68a43e6a", "committedDate": "2020-10-03T18:50:12Z", "message": "Enabled parameter is no longer mandatory and add new MicroProfile Metrics Checker to the test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjExODc4", "url": "https://github.com/payara/Payara/pull/4918#pullrequestreview-501611878", "createdAt": "2020-10-04T10:51:52Z", "commit": {"oid": "6e5f93060eb1511673150975ed157eff68a43e6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26efaafbfcdb466cf9336ea66fc05f92ef7d4612", "author": {"user": {"login": "MeroRai", "name": "Mero Rai"}}, "url": "https://github.com/payara/Payara/commit/26efaafbfcdb466cf9336ea66fc05f92ef7d4612", "committedDate": "2020-10-04T11:39:35Z", "message": "Merge branch 'master' of https://github.com/payara/Payara into FISH-334"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 686, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}