{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MjQ0OTIz", "number": 4884, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODozNzozMlrOEjBV5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDowMjowMlrOEllc0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTU3NjA3OnYy", "diffSide": "RIGHT", "path": "appserver/admingui/payara-console-extras/src/main/resources/notification/notification.jsf", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODozNzozMlrOHRJi9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODozNzozMlrOHRJi9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc0NDI0NQ==", "bodyText": "getNotificationConfigurationLogNotifier would read much easier", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487744245", "createdAt": "2020-09-14T08:37:32Z", "author": {"login": "jbee"}, "path": "appserver/admingui/payara-console-extras/src/main/resources/notification/notification.jsf", "diffHunk": "@@ -50,7 +50,7 @@ holder.\n         createMap(result=\"#{pageSession.attrsMap}\")\n         mapPut(map=\"#{pageSession.attrsMap}\" key=\"target\" value=\"#{pageSession.configName}\");\n         gf.restRequest(endpoint=\"#{sessionScope.NOTIFICATION_CONFIG_URL}/get-notification-configuration?target=#{pageSession.configName}\"  method=\"GET\" result=\"#{requestScope.resp}\");\n-        setPageSessionAttribute(key=\"valueMap\", value=\"#{requestScope.resp.data.extraProperties.getNotificationConfigurationLOG}\");\n+        setPageSessionAttribute(key=\"valueMap\", value=\"#{requestScope.resp.data.extraProperties.getNotificationConfigurationlognotifier}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTY5MTU2OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTowNjoyN1rOHRKoow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTowNjoyN1rOHRKoow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2MjA4Mw==", "bodyText": "Do we want alias names with dash and lower case as well?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487762083", "createdAt": "2020-09-14T09:06:27Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/jmx-monitoring-service/src/main/java/fish/payara/jmx/monitoring/admin/SetJMXMonitoringConfiguration.java", "diffHunk": "@@ -131,6 +135,15 @@\n     @Param(name = \"target\", optional = true, defaultValue = \"server-config\")\n     protected String target;\n \n+    @Param(name = \"enableNotifiers\", optional = true)\n+    private List<String> enableNotifiers;\n+\n+    @Param(name = \"disableNotifiers\", optional = true)\n+    private List<String> disableNotifiers;\n+\n+    @Param(name = \"setNotifiers\", optional = true)\n+    private List<String> setNotifiers;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTc5MzUyOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTozMjo0N1rOHRLmBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTozMjo0N1rOHRLmBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3Nzc5Ng==", "bodyText": "I think we should stick to single character type parameter names to avoid confusing type with actual class names. I'd think C works well.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487777796", "createdAt": "2020-09-14T09:32:47Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTgwMDk0OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTozNDo1N1rOHRLqog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTozNDo1N1rOHRLqog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3ODk3OA==", "bodyText": "isn't getConfigurationClass(getClass()) available as field configClass ?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487778978", "createdAt": "2020-09-14T09:34:57Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n+\n+    private final Class<NC> configClass;\n+\n+    @Inject\n+    private ServiceLocator habitat;\n+\n+    private NC domainConfiguration;\n+\n+    protected NC configuration;\n+\n+    public PayaraConfiguredNotifier() {\n+        this.configClass = getConfigurationClass(getClass());\n+    }\n+\n+    @PostConstruct\n+    void injectConfiguration() {\n+        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n+        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTgxODg4OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTozOTo0NFrOHRL1cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTozOTo0NFrOHRL1cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MTc0NA==", "bodyText": "as this must happen to work correctly I'd think bootstrap should be final and another abstract method is introduced that is called here after configuration is initialised. Possibly passing the configuration as an argument like:\n protected abstract void bootstrap(NC configuration);\nwhich then is implemented by the extending class - this circumvents wrong extension and spares the developer extending this class to understand the exact mechanics of the configuration bootstrap.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487781744", "createdAt": "2020-09-14T09:39:44Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n+\n+    private final Class<NC> configClass;\n+\n+    @Inject\n+    private ServiceLocator habitat;\n+\n+    private NC domainConfiguration;\n+\n+    protected NC configuration;\n+\n+    public PayaraConfiguredNotifier() {\n+        this.configClass = getConfigurationClass(getClass());\n+    }\n+\n+    @PostConstruct\n+    void injectConfiguration() {\n+        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n+        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    }\n+\n+    /**\n+     * Bootstrap the notifier and update the configuration from the domain.xml.\n+     */\n+    @Override\n+    public void bootstrap() {\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTgyMjU5OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0MDozN1rOHRL3mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0MDozN1rOHRL3mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MjI5OQ==", "bodyText": "Can this be private? It feels like it should to me.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487782299", "createdAt": "2020-09-14T09:40:37Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraConfiguredNotifier.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.lang.reflect.ParameterizedType;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import org.glassfish.config.support.GlassFishStubBean;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Contract;\n+\n+import fish.payara.internal.notification.admin.NotificationServiceConfiguration;\n+\n+/**\n+ * A notifier that is backed by a configuration in the domain.xml\n+ * \n+ * @param <NC> the configuration class for the notifier\n+ */\n+@Contract\n+public abstract class PayaraConfiguredNotifier<NC extends PayaraNotifierConfiguration> implements PayaraNotifier {\n+\n+    private final Class<NC> configClass;\n+\n+    @Inject\n+    private ServiceLocator habitat;\n+\n+    private NC domainConfiguration;\n+\n+    protected NC configuration;\n+\n+    public PayaraConfiguredNotifier() {\n+        this.configClass = getConfigurationClass(getClass());\n+    }\n+\n+    @PostConstruct\n+    void injectConfiguration() {\n+        final NotificationServiceConfiguration config = habitat.getService(NotificationServiceConfiguration.class);\n+        this.domainConfiguration = config.getNotifierConfigurationByType(getConfigurationClass(getClass()));\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    }\n+\n+    /**\n+     * Bootstrap the notifier and update the configuration from the domain.xml.\n+     */\n+    @Override\n+    public void bootstrap() {\n+        this.configuration = GlassFishStubBean.cloneBean(domainConfiguration, configClass);\n+    }\n+\n+    public NC getConfiguration() {\n+        return configuration;\n+    }\n+\n+    /**\n+     * @param <NC>          a generic class of the notifier configuration class\n+     * @param notifierClass the notifier of the class\n+     * @return the class used to configure the configured notifier\n+     */\n+    public static <NC extends PayaraNotifierConfiguration> Class<NC> getConfigurationClass(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTgyNzA4OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0MTo0N1rOHRL6Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0MTo0N1rOHRL6Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MzAwMg==", "bodyText": "Naming makes me wonder of what?\nI suggest receivers for whitelist and nonReceivers for blacklist.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487783002", "createdAt": "2020-09-14T09:41:47Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -52,60 +56,88 @@\n     private String instanceName;\n     private String subject;\n     private String message;\n+    private Serializable data;\n+\n+    private List<String> whitelist;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTgzMDMyOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0Mjo0MlrOHRL8TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjozNDo0N1rOHTf4eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MzUwMQ==", "bodyText": "Maybe even final ?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487783501", "createdAt": "2020-09-14T09:42:42Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -36,14 +37,17 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.domain;\n+package fish.payara.internal.notification;\n+\n+import java.io.Serializable;\n+import java.util.List;\n \n /**\n- * Base class for notification events.\n- *\n- * @author mertcaliskan\n+ * A notification received by notifiers and the notification service\n  */\n-public abstract class NotificationEvent {\n+public class PayaraNotification implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwNzM1NA==", "bodyText": "I don't see any problem with extending it - see my comment below", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490207354", "createdAt": "2020-09-17T12:34:47Z", "author": {"login": "MattGill98"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -36,14 +37,17 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.domain;\n+package fish.payara.internal.notification;\n+\n+import java.io.Serializable;\n+import java.util.List;\n \n /**\n- * Base class for notification events.\n- *\n- * @author mertcaliskan\n+ * A notification received by notifiers and the notification service\n  */\n-public abstract class NotificationEvent {\n+public class PayaraNotification implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MzUwMQ=="}, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg0MDMyOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0NToxOVrOHRMCSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjozNDoyN1rOHTf3qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTAzMw==", "bodyText": "I there a good reason for messages to be mutable? I'd think messages in a \"bus\" should be immutable to ensure by construction that every receiver sees the same message. Building messages conveniently is ensured by the builder.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487785033", "createdAt": "2020-09-14T09:45:19Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -52,60 +56,88 @@\n     private String instanceName;\n     private String subject;\n     private String message;\n+    private Serializable data;\n+\n+    private List<String> whitelist;\n+    private List<String> blacklist;\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    public void setEventType(String eventType) {\n+    protected void setEventType(String eventType) {\n         this.eventType = eventType;\n     }\n \n     public String getServerName() {\n         return serverName;\n     }\n \n-    public void setServerName(String serverName) {\n+    protected void setServerName(String serverName) {\n         this.serverName = serverName;\n     }\n \n     public String getHostName() {\n         return hostName;\n     }\n \n-    public void setHostName(String hostName) {\n+    protected void setHostName(String hostName) {\n         this.hostName = hostName;\n     }\n \n     public String getDomainName() {\n         return domainName;\n     }\n \n-    public void setDomainName(String domainName) {\n+    protected void setDomainName(String domainName) {\n         this.domainName = domainName;\n     }\n \n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    public void setInstanceName(String instanceName) {\n+    protected void setInstanceName(String instanceName) {\n         this.instanceName = instanceName;\n     }\n \n     public String getSubject() {\n         return subject;\n     }\n \n-    public void setSubject(String subject) {\n+    protected void setSubject(String subject) {\n         this.subject = subject;\n     }\n \n     public String getMessage() {\n         return message;\n     }\n \n-    public void setMessage(String message) {\n+    protected void setMessage(String message) {\n         this.message = message;\n     }\n-}\n\\ No newline at end of file\n+\n+    public List<String> getWhitelist() {\n+        return whitelist;\n+    }\n+\n+    protected void setWhitelist(List<String> whitelist) {\n+        this.whitelist = whitelist;\n+    }\n+\n+    public List<String> getBlacklist() {\n+        return blacklist;\n+    }\n+\n+    protected void setBlacklist(List<String> blacklist) {\n+        this.blacklist = blacklist;\n+    }\n+\n+    public Serializable getData() {\n+        return data;\n+    }\n+\n+    protected void setData(Serializable data) {\n+        this.data = data;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwNzE0NQ==", "bodyText": "It's immutable outside of the builder API with one notable caveat - if the notification is extended. I figured that since it has to be serializable that's not too much of an issue. The use case would be writing your own notification sender with extra field that your own receiver uses", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490207145", "createdAt": "2020-09-17T12:34:27Z", "author": {"login": "MattGill98"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -52,60 +56,88 @@\n     private String instanceName;\n     private String subject;\n     private String message;\n+    private Serializable data;\n+\n+    private List<String> whitelist;\n+    private List<String> blacklist;\n \n     public String getEventType() {\n         return eventType;\n     }\n \n-    public void setEventType(String eventType) {\n+    protected void setEventType(String eventType) {\n         this.eventType = eventType;\n     }\n \n     public String getServerName() {\n         return serverName;\n     }\n \n-    public void setServerName(String serverName) {\n+    protected void setServerName(String serverName) {\n         this.serverName = serverName;\n     }\n \n     public String getHostName() {\n         return hostName;\n     }\n \n-    public void setHostName(String hostName) {\n+    protected void setHostName(String hostName) {\n         this.hostName = hostName;\n     }\n \n     public String getDomainName() {\n         return domainName;\n     }\n \n-    public void setDomainName(String domainName) {\n+    protected void setDomainName(String domainName) {\n         this.domainName = domainName;\n     }\n \n     public String getInstanceName() {\n         return instanceName;\n     }\n \n-    public void setInstanceName(String instanceName) {\n+    protected void setInstanceName(String instanceName) {\n         this.instanceName = instanceName;\n     }\n \n     public String getSubject() {\n         return subject;\n     }\n \n-    public void setSubject(String subject) {\n+    protected void setSubject(String subject) {\n         this.subject = subject;\n     }\n \n     public String getMessage() {\n         return message;\n     }\n \n-    public void setMessage(String message) {\n+    protected void setMessage(String message) {\n         this.message = message;\n     }\n-}\n\\ No newline at end of file\n+\n+    public List<String> getWhitelist() {\n+        return whitelist;\n+    }\n+\n+    protected void setWhitelist(List<String> whitelist) {\n+        this.whitelist = whitelist;\n+    }\n+\n+    public List<String> getBlacklist() {\n+        return blacklist;\n+    }\n+\n+    protected void setBlacklist(List<String> blacklist) {\n+        this.blacklist = blacklist;\n+    }\n+\n+    public Serializable getData() {\n+        return data;\n+    }\n+\n+    protected void setData(Serializable data) {\n+        this.data = data;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTAzMw=="}, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg1MDUzOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0Nzo1NFrOHRMIXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjozMzoxM1rOHTf08A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NjU5MQ==", "bodyText": "I wonder how the data should be useful to notifiers if all we know about it is that it is Serializable", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487786591", "createdAt": "2020-09-14T09:47:54Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -52,60 +56,88 @@\n     private String instanceName;\n     private String subject;\n     private String message;\n+    private Serializable data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwNjQ0OA==", "bodyText": "This is a hangover from before. The API specifies that getData returns a typed version of the string message. I.e. the receiver is supposed to already know what to expect", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490206448", "createdAt": "2020-09-17T12:33:13Z", "author": {"login": "MattGill98"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -52,60 +56,88 @@\n     private String instanceName;\n     private String subject;\n     private String message;\n+    private Serializable data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NjU5MQ=="}, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg1NDYwOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0OTowMVrOHRMK4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0OTowMVrOHRMK4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NzIzMw==", "bodyText": "As suggested in the notification this IMHO should construct a immutable object on build().", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487787233", "createdAt": "2020-09-14T09:49:01Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationBuilder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+\n+/**\n+ * A builder object created by a {@link PayaraNotificationFactory} used to\n+ * configure Notifications for sending.\n+ * \n+ * @author Matthew Gill\n+ */\n+public class PayaraNotificationBuilder {\n+\n+    private final PayaraNotification notification;\n+    \n+    protected PayaraNotificationBuilder(PayaraNotification notification) {\n+        this.notification = notification;\n+    }\n+\n+    public PayaraNotificationBuilder subject(String subject) {\n+        notification.setSubject(subject);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder message(String message) {\n+        notification.setMessage(message);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder data(Serializable data) {\n+        notification.setData(data);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder eventType(String eventType) {\n+        notification.setEventType(eventType);\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder whitelist(String... notifierNames) {\n+        for (int i = 0; i < notifierNames.length; i++) {\n+            if (notification.getWhitelist() == null) {\n+                notification.setWhitelist(new ArrayList<>());\n+            }\n+            notification.getWhitelist().add(notifierNames[i]);\n+        }\n+        return this;\n+    }\n+\n+    public PayaraNotificationBuilder blacklist(String... notifierNames) {\n+        for (int i = 0; i < notifierNames.length; i++) {\n+            if (notification.getBlacklist() == null) {\n+                notification.setBlacklist(new ArrayList<>());\n+            }\n+            notification.getBlacklist().add(notifierNames[i]);\n+        }\n+        return this;\n+    }\n+\n+    public PayaraNotification build() {\n+        return notification;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg2NzYyOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1MjoxN1rOHRMSzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjozNTo1MFrOHTf65w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTI2Mw==", "bodyText": "I understand the historic reason for this to exist and being a @Service but I think in the new notifier concept this is/should merely be a utility class with static helpers that are just convenience methods to construct messages.\nIf some of these need bean state I'd think those utilities are maybe better located where the message is created which I'd assume is a service of some sorts with access to HK2 stuff.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487789263", "createdAt": "2020-09-14T09:52:17Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java", "diffHunk": "@@ -37,95 +37,51 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.domain;\n+package fish.payara.internal.notification;\n \n-import com.sun.enterprise.config.serverbeans.Server;\n-import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n-import fish.payara.notification.requesttracing.RequestTrace;\n-import fish.payara.nucleus.notification.configuration.NotifierType;\n-import fish.payara.nucleus.notification.service.NotificationEventFactoryStore;\n-import org.glassfish.api.admin.ServerEnvironment;\n-import org.glassfish.hk2.api.ServiceLocator;\n-import org.jvnet.hk2.annotations.Contract;\n-\n-import javax.inject.Inject;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n import java.text.MessageFormat;\n-import java.util.List;\n import java.util.logging.Level;\n \n+import javax.inject.Inject;\n+\n+import com.sun.enterprise.config.serverbeans.Server;\n+\n+import org.glassfish.api.admin.ServerEnvironment;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Service;\n+\n /**\n- * Factory for building {@link NotificationEvent}\n+ * Factory for building {@link PayaraNotification} events.\n+ * \n  * @author mertcaliskan\n  * @since 4.1.2.171\n  */\n-@Contract\n-public abstract class NotificationEventFactory<E extends NotificationEvent> {\n-\n-    @Inject\n-    NotificationEventFactoryStore store;\n+@Service\n+public class PayaraNotificationFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwNzk3NQ==", "bodyText": "It needs some HK2 services to be injected, and as I'm not a fan of the Globals class usage this seems to be the only clean option unless you can think of another way?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490207975", "createdAt": "2020-09-17T12:35:50Z", "author": {"login": "MattGill98"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java", "diffHunk": "@@ -37,95 +37,51 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.domain;\n+package fish.payara.internal.notification;\n \n-import com.sun.enterprise.config.serverbeans.Server;\n-import fish.payara.notification.healthcheck.HealthCheckResultEntry;\n-import fish.payara.notification.requesttracing.RequestTrace;\n-import fish.payara.nucleus.notification.configuration.NotifierType;\n-import fish.payara.nucleus.notification.service.NotificationEventFactoryStore;\n-import org.glassfish.api.admin.ServerEnvironment;\n-import org.glassfish.hk2.api.ServiceLocator;\n-import org.jvnet.hk2.annotations.Contract;\n-\n-import javax.inject.Inject;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n import java.text.MessageFormat;\n-import java.util.List;\n import java.util.logging.Level;\n \n+import javax.inject.Inject;\n+\n+import com.sun.enterprise.config.serverbeans.Server;\n+\n+import org.glassfish.api.admin.ServerEnvironment;\n+import org.glassfish.hk2.api.ServiceLocator;\n+import org.jvnet.hk2.annotations.Service;\n+\n /**\n- * Factory for building {@link NotificationEvent}\n+ * Factory for building {@link PayaraNotification} events.\n+ * \n  * @author mertcaliskan\n  * @since 4.1.2.171\n  */\n-@Contract\n-public abstract class NotificationEventFactory<E extends NotificationEvent> {\n-\n-    @Inject\n-    NotificationEventFactoryStore store;\n+@Service\n+public class PayaraNotificationFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTI2Mw=="}, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg3NDI2OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1NDowM1rOHRMWxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1NDowM1rOHRMWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MDI3Nw==", "bodyText": "I think this should be a static method in PayaraNotificationBuilder. The factory class seems like an artefact of the past that is no longer needed to build and create messages.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487790277", "createdAt": "2020-09-14T09:54:03Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotificationFactory.java", "diffHunk": "@@ -135,33 +91,34 @@ public E buildNotificationEvent(String name, List<HealthCheckResultEntry> entrie\n      * @param parameters An additional parameters to be formatted as part of the message\n      * @return the resulting {@link NotificationEvent}\n      */\n-    public E buildNotificationEvent(Level level, String subject, String message, Object[] parameters) {\n-        E event = initializeEvent(createEventInstance());\n-        event.setSubject(subject);\n+    public PayaraNotification buildNotificationEvent(Level level, String subject, String message, Object[] parameters) {\n+        PayaraNotification event = buildNotificationEvent(subject, message);\n         if (parameters != null && parameters.length > 0) {\n             message = MessageFormat.format(message, parameters);\n         }\n-        event.setMessage(message);\n+        event.setEventType(level.getName());\n         return event;\n     }\n \n-    public NotificationEventFactoryStore getStore() {\n-        return store;\n-    }\n-\n-    protected String getSubject(Level level) {\n-        return \"Health Check notification with severity level: \" + level.getName();\n+    /**\n+     * @return a builder object used to configure notifiers\n+     */\n+    public PayaraNotificationBuilder newBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg5OTMxOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowMDowMFrOHRMlgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowMDowMFrOHRMlgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NDA1MA==", "bodyText": "The javadoc should explain when this is called.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487794050", "createdAt": "2020-09-14T10:00:00Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java", "diffHunk": "@@ -37,23 +37,32 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.notification.eventbus.core;\n+package fish.payara.internal.notification;\n \n-import fish.payara.notification.NotificationData;\n-import fish.payara.nucleus.notification.domain.NotificationEvent;\n+import org.jvnet.hk2.annotations.Contract;\n \n /**\n- * @author mertcaliskan\n+ * A contract for a service representing a dynamic PayaraNotifier with no\n+ * domain.xml configuration. For a notifier with domain.xml configuration see\n+ * {@link PayaraConfiguredNotifier}.\n  */\n-public class CDIEventbusNotificationEvent extends NotificationEvent {\n+@Contract\n+public interface PayaraNotifier {\n \n-    private NotificationData notificationData;\n+    /**\n+     * Receive notifications from the notification service.\n+     * @param event the notification\n+     */\n+    void handleNotification(PayaraNotification event);\n \n-    public NotificationData getNotificationData() {\n-        return notificationData;\n-    }\n+    /**\n+     * Initialise the object from any configuration values.\n+     */\n+    default void bootstrap() {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTk1NDA3OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxNDoxNVrOHRNFvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxNDoxNVrOHRNFvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMjMwMw==", "bodyText": "Wonder why this does not have the Command suffix.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487802303", "createdAt": "2020-09-14T10:14:15Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseGetNotifierConfiguration.java", "diffHunk": "@@ -37,39 +37,54 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.admin;\n+package fish.payara.internal.notification.admin;\n+\n+import static java.lang.Boolean.FALSE;\n+import static java.lang.Boolean.TRUE;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+\n+import javax.inject.Inject;\n \n import com.sun.enterprise.config.serverbeans.Config;\n import com.sun.enterprise.util.SystemPropertyConstants;\n-import fish.payara.nucleus.notification.configuration.NotificationServiceConfiguration;\n+import com.sun.enterprise.util.ColumnFormatter;\n+\n import org.glassfish.api.ActionReport;\n import org.glassfish.api.Param;\n import org.glassfish.api.admin.AdminCommand;\n import org.glassfish.api.admin.AdminCommandContext;\n import org.glassfish.hk2.api.ServiceLocator;\n import org.glassfish.internal.api.Target;\n \n-import javax.inject.Inject;\n-import java.lang.reflect.ParameterizedType;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n \n /**\n+ * The base admin command to get the configuration of a specified notifier.\n+ * Extend this class to fetch custom notifier configuration options.\n+ * \n  * @author mertcaliskan\n+ * @author Matthew Gill\n  */\n-public abstract class BaseGetNotifierConfiguration<NC> implements AdminCommand {\n+public abstract class BaseGetNotifierConfiguration<NC extends PayaraNotifierConfiguration> implements AdminCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTk1NTM5OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxNDozNVrOHRNGew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxNDozNVrOHRNGew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMjQ5MQ==", "bodyText": "Wonder why this does not have the Command suffix.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487802491", "createdAt": "2020-09-14T10:14:35Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/BaseSetNotifierConfiguration.java", "diffHunk": "@@ -53,17 +60,19 @@\n import org.jvnet.hk2.config.SingleConfigCode;\n import org.jvnet.hk2.config.TransactionFailure;\n \n-import javax.inject.Inject;\n-import java.beans.PropertyVetoException;\n-import java.lang.reflect.ParameterizedType;\n-import java.util.Properties;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n+import fish.payara.internal.notification.PayaraConfiguredNotifier;\n+import fish.payara.internal.notification.PayaraNotifier;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n \n /**\n+ * The base admin command to set the configuration of a specified notifier.\n+ * Extend this class to configure custom notifier configuration options\n+ * from @Param injected fields.\n+ * \n+ * @author Matthew Gill\n  * @author mertcaliskan\n  */\n-public abstract class BaseRequestTracingNotifierConfigurer<C extends Notifier> implements AdminCommand {\n+public abstract class BaseSetNotifierConfiguration<NC extends PayaraNotifierConfiguration, N extends PayaraNotifier> implements AdminCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTk3MzQ5OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxOToyOVrOHRNRgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxOToyOVrOHRNRgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwNTMxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<?> type);\n          \n          \n            \n                <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<T> type);", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487805315", "createdAt": "2020-09-14T10:19:29Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/admin/NotificationServiceConfiguration.java", "diffHunk": "@@ -36,41 +35,46 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.nucleus.notification.configuration;\n-\n-import org.glassfish.api.admin.config.ConfigExtension;\n-import org.jvnet.hk2.config.*;\n+package fish.payara.internal.notification.admin;\n \n import java.beans.PropertyVetoException;\n import java.util.List;\n \n+import org.glassfish.api.admin.config.ConfigExtension;\n+import org.jvnet.hk2.config.Attribute;\n+import org.jvnet.hk2.config.Configured;\n+import org.jvnet.hk2.config.DuckTyped;\n+import org.jvnet.hk2.config.Element;\n+\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n+\n /**\n  * @author mertcaliskan\n- *\n  */\n-@Configured\n-public interface NotificationServiceConfiguration extends ConfigBeanProxy, ConfigExtension {\n+@Configured(name = \"notification-service-configuration\")\n+public interface NotificationServiceConfiguration extends ConfigExtension {\n \n     @Attribute(defaultValue = \"false\", dataType = Boolean.class)\n     String getEnabled();\n     void enabled(String value) throws PropertyVetoException;\n \n     @Element(\"*\")\n-    List<NotifierConfiguration> getNotifierConfigurationList();\n+    List<PayaraNotifierConfiguration> getNotifierConfigurationList();\n \n     @DuckTyped\n-    <T extends NotifierConfiguration> T getNotifierConfigurationByType(Class type);\n+    <T extends PayaraNotifierConfiguration> T getNotifierConfigurationByType(Class<?> type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjAzMDMyOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDozNTo1N1rOHRNzmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDozNTo1N1rOHRNzmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxNDA0Mw==", "bodyText": "The javadoc should explain when this is called.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487814043", "createdAt": "2020-09-14T10:35:57Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotifier.java", "diffHunk": "@@ -37,23 +37,32 @@\n  * only if the new code is made subject to such option by the copyright\n  * holder.\n  */\n-package fish.payara.notification.eventbus.core;\n+package fish.payara.internal.notification;\n \n-import fish.payara.notification.NotificationData;\n-import fish.payara.nucleus.notification.domain.NotificationEvent;\n+import org.jvnet.hk2.annotations.Contract;\n \n /**\n- * @author mertcaliskan\n+ * A contract for a service representing a dynamic PayaraNotifier with no\n+ * domain.xml configuration. For a notifier with domain.xml configuration see\n+ * {@link PayaraConfiguredNotifier}.\n  */\n-public class CDIEventbusNotificationEvent extends NotificationEvent {\n+@Contract\n+public interface PayaraNotifier {\n \n-    private NotificationData notificationData;\n+    /**\n+     * Receive notifications from the notification service.\n+     * @param event the notification\n+     */\n+    void handleNotification(PayaraNotification event);\n \n-    public NotificationData getNotificationData() {\n-        return notificationData;\n-    }\n+    /**\n+     * Initialise the object from any configuration values.\n+     */\n+    default void bootstrap() {};\n+\n+    /**\n+     * Destroy any objects before configuration values are changed.\n+     */\n+    default void destroy() {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjA2MTczOnYy", "diffSide": "RIGHT", "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo0NToxMFrOHROGZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTo0MDoyMlrOHVH0iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA==", "bodyText": "This will run once every 500ms so there should be a loop sending all messages available at the start of the run. Just one seems delaying message delivery unnecessarily and substantially.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r487818854", "createdAt": "2020-09-14T10:45:10Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.nucleus.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.getNotifierName;\n+import static java.lang.Boolean.valueOf;\n+import static java.lang.String.format;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.glassfish.hk2.api.ServiceHandle;\n+\n+import fish.payara.internal.notification.PayaraConfiguredNotifier;\n+import fish.payara.internal.notification.PayaraNotification;\n+import fish.payara.internal.notification.PayaraNotifier;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n+\n+public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n+\n+    private final PayaraNotifier notifier;\n+    private final String notifierName;\n+\n+    private final Queue<PayaraNotification> notificationQueue;\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+        this(notifierHandle, null);\n+    }\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+        this.notifier = notifierHandle.getService();\n+        this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n+        this.notificationQueue = new ConcurrentLinkedQueue<>();\n+    }\n+\n+    protected String getName() {\n+        return notifierName;\n+    }\n+\n+    protected void destroy() {\n+        notifier.destroy();\n+    }\n+\n+    protected void bootstrap() {\n+        notifier.bootstrap();\n+    }\n+\n+    @Override\n+    public void accept(PayaraNotification notification) {\n+        if (isEnabled() && !this.notificationQueue.offer(notification)) {\n+            LOGGER.warning(format(\"Notifier %s failed to accept the notification \\\"%s\\\".\", notifierName, notification));\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        final PayaraNotification notification = notificationQueue.peek();\n+        try {\n+            if (notification != null && isEnabled()) {\n+                notifier.handleNotification(notification);\n+                notificationQueue.remove();\n+            }\n+        } catch (Exception ex) {\n+            LOGGER.log(Level.WARNING,\n+                    format(\"Notifier %s failed to handle notification \\\"%s\\\".\", notifierName, notification), ex);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIwOTYyMg==", "bodyText": "It's worth bearing in mind that each thread run loops through every single notifier, so I wasn't sure if trying to flush every single notification every time might have the potential to stall the other notifiers", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490209622", "createdAt": "2020-09-17T12:38:37Z", "author": {"login": "MattGill98"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.nucleus.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.getNotifierName;\n+import static java.lang.Boolean.valueOf;\n+import static java.lang.String.format;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.glassfish.hk2.api.ServiceHandle;\n+\n+import fish.payara.internal.notification.PayaraConfiguredNotifier;\n+import fish.payara.internal.notification.PayaraNotification;\n+import fish.payara.internal.notification.PayaraNotifier;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n+\n+public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n+\n+    private final PayaraNotifier notifier;\n+    private final String notifierName;\n+\n+    private final Queue<PayaraNotification> notificationQueue;\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+        this(notifierHandle, null);\n+    }\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+        this.notifier = notifierHandle.getService();\n+        this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n+        this.notificationQueue = new ConcurrentLinkedQueue<>();\n+    }\n+\n+    protected String getName() {\n+        return notifierName;\n+    }\n+\n+    protected void destroy() {\n+        notifier.destroy();\n+    }\n+\n+    protected void bootstrap() {\n+        notifier.bootstrap();\n+    }\n+\n+    @Override\n+    public void accept(PayaraNotification notification) {\n+        if (isEnabled() && !this.notificationQueue.offer(notification)) {\n+            LOGGER.warning(format(\"Notifier %s failed to accept the notification \\\"%s\\\".\", notifierName, notification));\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        final PayaraNotification notification = notificationQueue.peek();\n+        try {\n+            if (notification != null && isEnabled()) {\n+                notifier.handleNotification(notification);\n+                notificationQueue.remove();\n+            }\n+        } catch (Exception ex) {\n+            LOGGER.log(Level.WARNING,\n+                    format(\"Notifier %s failed to handle notification \\\"%s\\\".\", notifierName, notification), ex);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA=="}, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3MTI5Ng==", "bodyText": "I understand your concern but I can't see how the notifiers actually would affect each other directly other then competing for CPU in general. If we want to enforce fairness beyond OS multi-threading I suggest to look into a single worker thread multi-dispatch where any message enters a single queue and the worker thread pulls from there and dispatches directly to the PayaraNotifiers. So instead of a NotifierHandler per type of PayaraNotifier there is only the single dispatch for all of them.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490271296", "createdAt": "2020-09-17T14:02:19Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.nucleus.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.getNotifierName;\n+import static java.lang.Boolean.valueOf;\n+import static java.lang.String.format;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.glassfish.hk2.api.ServiceHandle;\n+\n+import fish.payara.internal.notification.PayaraConfiguredNotifier;\n+import fish.payara.internal.notification.PayaraNotification;\n+import fish.payara.internal.notification.PayaraNotifier;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n+\n+public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n+\n+    private final PayaraNotifier notifier;\n+    private final String notifierName;\n+\n+    private final Queue<PayaraNotification> notificationQueue;\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+        this(notifierHandle, null);\n+    }\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+        this.notifier = notifierHandle.getService();\n+        this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n+        this.notificationQueue = new ConcurrentLinkedQueue<>();\n+    }\n+\n+    protected String getName() {\n+        return notifierName;\n+    }\n+\n+    protected void destroy() {\n+        notifier.destroy();\n+    }\n+\n+    protected void bootstrap() {\n+        notifier.bootstrap();\n+    }\n+\n+    @Override\n+    public void accept(PayaraNotification notification) {\n+        if (isEnabled() && !this.notificationQueue.offer(notification)) {\n+            LOGGER.warning(format(\"Notifier %s failed to accept the notification \\\"%s\\\".\", notifierName, notification));\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        final PayaraNotification notification = notificationQueue.peek();\n+        try {\n+            if (notification != null && isEnabled()) {\n+                notifier.handleNotification(notification);\n+                notificationQueue.remove();\n+            }\n+        } catch (Exception ex) {\n+            LOGGER.log(Level.WARNING,\n+                    format(\"Notifier %s failed to handle notification \\\"%s\\\".\", notifierName, notification), ex);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA=="}, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkzNzk2Mw==", "bodyText": "Just so I understand properly, are you suggesting that instead of having one task for the entire service that loops through each notifier polling them, we have one thread for each notifier to flush it's queue?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490937963", "createdAt": "2020-09-18T13:10:28Z", "author": {"login": "MattGill98"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.nucleus.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.getNotifierName;\n+import static java.lang.Boolean.valueOf;\n+import static java.lang.String.format;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.glassfish.hk2.api.ServiceHandle;\n+\n+import fish.payara.internal.notification.PayaraConfiguredNotifier;\n+import fish.payara.internal.notification.PayaraNotification;\n+import fish.payara.internal.notification.PayaraNotifier;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n+\n+public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n+\n+    private final PayaraNotifier notifier;\n+    private final String notifierName;\n+\n+    private final Queue<PayaraNotification> notificationQueue;\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+        this(notifierHandle, null);\n+    }\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+        this.notifier = notifierHandle.getService();\n+        this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n+        this.notificationQueue = new ConcurrentLinkedQueue<>();\n+    }\n+\n+    protected String getName() {\n+        return notifierName;\n+    }\n+\n+    protected void destroy() {\n+        notifier.destroy();\n+    }\n+\n+    protected void bootstrap() {\n+        notifier.bootstrap();\n+    }\n+\n+    @Override\n+    public void accept(PayaraNotification notification) {\n+        if (isEnabled() && !this.notificationQueue.offer(notification)) {\n+            LOGGER.warning(format(\"Notifier %s failed to accept the notification \\\"%s\\\".\", notifierName, notification));\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        final PayaraNotification notification = notificationQueue.peek();\n+        try {\n+            if (notification != null && isEnabled()) {\n+                notifier.handleNotification(notification);\n+                notificationQueue.remove();\n+            }\n+        } catch (Exception ex) {\n+            LOGGER.log(Level.WARNING,\n+                    format(\"Notifier %s failed to handle notification \\\"%s\\\".\", notifierName, notification), ex);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA=="}, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMjQxMQ==", "bodyText": "Oh I wasn't looking close enough and assumed from your comment that the notifiers would each be scheduled so that they actually do compete with each other in some form - Now I had a closer look and saw that there is only a single job scheduled that sequentially works the notifiers. So your concern was that working a single notifier in its entirety could delay working the other notifiers later in the sequence.\nSo what I suggested was more of a round robin. Forget the NotifierHandler class exist. Think that in the service you have a list of notifiers and a (generic) queue of messages to deliver. The method called periodically has a loop that runs until the queue is empty. It pulls one message from the queue and forwards it to each notifier that should receive it. This way all notifier will always see the first message before any can see the second which can be said is quite fair. On the downside a notifier that is very slow in its message processing will slow down message processing for all other notifiers. A problem the current loop has as well just in another form.\nWhich brings me back to what I thought initially the solution was - that each notifier would have its own queue and its own scheduled task. As this would solve \"stalling\" messages for other notifiers. Each would in their task method try to send all messages of the queue. Now the notifiers compete for CPU and co but given we want messages going through the system as fast as possible this is a good thing. But we still might delay message processing because of the scheduling. This makes me think: why do we use scheduled tasks when it can be event-reaction that are asynchronously coupled by a queue.\nI think what we want is:\n\nthe thread creating a message to be send should not be delayed\nnotifiers do not affect each other message delivery\nmessages are delivered as promptly as possible\nmessages are delivered in order they are handed to the service (for each notifier)\n\nWith this in mind I think a queue already decouples a message source from sending the message so the scheduling is just causing unnecessary delay and work. The message processor or processors should just block wait on the queue. A solution that has all the qualities above is a bit more complicated.\n[Edit: realised it can be simpler, changed the text below]\n\nSource puts the message in each receiving notifiers individual queue (via service)\neach notifier specific queue has a own thread block wait - when it awakens from the message offered to the queue it pulls it and forwards the message to the notifier.\nnotifier does its notifier specific thing\n\nOnly downside I see here is that this needs n worker threads for n notifier types. But they mostly be waiting.\nAlso the number of actually enabled and receiving notifiers is low. So if this is build so that the thread for a notifier is only spawned if there is actually a message for that notifier and it is enabled I think this is a good way to meet all the qualities we want.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r491032411", "createdAt": "2020-09-18T15:38:17Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.nucleus.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.getNotifierName;\n+import static java.lang.Boolean.valueOf;\n+import static java.lang.String.format;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.glassfish.hk2.api.ServiceHandle;\n+\n+import fish.payara.internal.notification.PayaraConfiguredNotifier;\n+import fish.payara.internal.notification.PayaraNotification;\n+import fish.payara.internal.notification.PayaraNotifier;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n+\n+public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n+\n+    private final PayaraNotifier notifier;\n+    private final String notifierName;\n+\n+    private final Queue<PayaraNotification> notificationQueue;\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+        this(notifierHandle, null);\n+    }\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+        this.notifier = notifierHandle.getService();\n+        this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n+        this.notificationQueue = new ConcurrentLinkedQueue<>();\n+    }\n+\n+    protected String getName() {\n+        return notifierName;\n+    }\n+\n+    protected void destroy() {\n+        notifier.destroy();\n+    }\n+\n+    protected void bootstrap() {\n+        notifier.bootstrap();\n+    }\n+\n+    @Override\n+    public void accept(PayaraNotification notification) {\n+        if (isEnabled() && !this.notificationQueue.offer(notification)) {\n+            LOGGER.warning(format(\"Notifier %s failed to accept the notification \\\"%s\\\".\", notifierName, notification));\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        final PayaraNotification notification = notificationQueue.peek();\n+        try {\n+            if (notification != null && isEnabled()) {\n+                notifier.handleNotification(notification);\n+                notificationQueue.remove();\n+            }\n+        } catch (Exception ex) {\n+            LOGGER.log(Level.WARNING,\n+                    format(\"Notifier %s failed to handle notification \\\"%s\\\".\", notifierName, notification), ex);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA=="}, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkxMDI4Mw==", "bodyText": "I've created a thread for each notifier that runs with a 5ms delay but waits on the queue to fill up - I hope this addresses the threading problems!", "url": "https://github.com/payara/Payara/pull/4884#discussion_r491910283", "createdAt": "2020-09-21T09:40:22Z", "author": {"login": "MattGill98"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.nucleus.notification;\n+\n+import static fish.payara.internal.notification.NotifierUtils.getNotifierName;\n+import static java.lang.Boolean.valueOf;\n+import static java.lang.String.format;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.glassfish.hk2.api.ServiceHandle;\n+\n+import fish.payara.internal.notification.PayaraConfiguredNotifier;\n+import fish.payara.internal.notification.PayaraNotification;\n+import fish.payara.internal.notification.PayaraNotifier;\n+import fish.payara.internal.notification.PayaraNotifierConfiguration;\n+\n+public class NotifierHandler implements Runnable, Consumer<PayaraNotification> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n+\n+    private final PayaraNotifier notifier;\n+    private final String notifierName;\n+\n+    private final Queue<PayaraNotification> notificationQueue;\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+        this(notifierHandle, null);\n+    }\n+\n+    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+        this.notifier = notifierHandle.getService();\n+        this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n+        this.notificationQueue = new ConcurrentLinkedQueue<>();\n+    }\n+\n+    protected String getName() {\n+        return notifierName;\n+    }\n+\n+    protected void destroy() {\n+        notifier.destroy();\n+    }\n+\n+    protected void bootstrap() {\n+        notifier.bootstrap();\n+    }\n+\n+    @Override\n+    public void accept(PayaraNotification notification) {\n+        if (isEnabled() && !this.notificationQueue.offer(notification)) {\n+            LOGGER.warning(format(\"Notifier %s failed to accept the notification \\\"%s\\\".\", notifierName, notification));\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        final PayaraNotification notification = notificationQueue.peek();\n+        try {\n+            if (notification != null && isEnabled()) {\n+                notifier.handleNotification(notification);\n+                notificationQueue.remove();\n+            }\n+        } catch (Exception ex) {\n+            LOGGER.log(Level.WARNING,\n+                    format(\"Notifier %s failed to handle notification \\\"%s\\\".\", notifierName, notification), ex);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODg1NA=="}, "originalCommit": {"oid": "1640ee17ad44d1e406f56812cb8f1dc8191ba3c2"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzY2MzY2OnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDowNzoyN1rOHTkC1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDowNzoyN1rOHTkC1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3NTU0Mw==", "bodyText": "Looking at this I wonder how or where the target notifier is identified. I assume there is something in the configuration that allows this. Maybe the javadoc can explain a but how this method is used and what it does.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490275543", "createdAt": "2020-09-17T14:07:27Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/NotifierManager.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2020] Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.internal.notification;\n+\n+import org.jvnet.hk2.annotations.Contract;\n+\n+/**\n+ * A contract for the notification service, which allows the internal API to\n+ * send events to the notification service without having a direct reference to\n+ * it.\n+ */\n+@Contract\n+public interface NotifierManager {\n+\n+    void reconfigureNotifier(PayaraNotifierConfiguration configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzcyNTIyOnYy", "diffSide": "RIGHT", "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxOToyMlrOHTkn9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxOToyMlrOHTkn9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NTA0Ng==", "bodyText": "I see the setters are still in and the builder is mostly a fluent API alias for calling setters on the notification. I really would like to see this using builder with fields for the individual values and a notification with a constructor accepting all the fields called on build().", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490285046", "createdAt": "2020-09-17T14:19:22Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/internal/notification/PayaraNotification.java", "diffHunk": "@@ -117,20 +117,20 @@ protected void setMessage(String message) {\n         this.message = message;\n     }\n \n-    public List<String> getWhitelist() {\n-        return whitelist;\n+    public List<String> getNotifierWhitelist() {\n+        return notifierWhitelist;\n     }\n \n-    protected void setWhitelist(List<String> whitelist) {\n-        this.whitelist = whitelist;\n+    protected void setNotifierWhitelist(List<String> whitelist) {\n+        this.notifierWhitelist = whitelist;\n     }\n \n-    public List<String> getBlacklist() {\n-        return blacklist;\n+    public List<String> getNotifierBlacklist() {\n+        return notifierBlacklist;\n     }\n \n-    protected void setBlacklist(List<String> blacklist) {\n-        this.blacklist = blacklist;\n+    protected void setNotifierBlacklist(List<String> blacklist) {\n+        this.notifierBlacklist = blacklist;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc2NzIwOnYy", "diffSide": "RIGHT", "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyODowNFrOHTlCSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoxNDozNFrOHUKn9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MTc4Ng==", "bodyText": "Just noticed that factory in line below is also still on. Is there a reason to not have the newBuilder be a static method in the builder class?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490291786", "createdAt": "2020-09-17T14:28:04Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java", "diffHunk": "@@ -285,7 +286,7 @@ public void sendNotification(String name, HealthCheckResult checkResult, Level l\n         String subject = \"Health Check notification with severity level: \" + level.getName();\n         String messageFormatted = getMessageFormatted(new Object[]{name, getCumulativeMessages(checkResult.getEntries())});\n \n-        List<String> enabledNotifiers = healthCheckService.getEnabledNotifiers();\n+        Collection<String> enabledNotifiers = healthCheckService.getEnabledNotifiers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwNzYzOA==", "bodyText": "The factory is needed to inject the HK2 properties required in the notification. I've reworked the builder API so it should be more clear now!", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490907638", "createdAt": "2020-09-18T12:14:34Z", "author": {"login": "MattGill98"}, "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/BaseHealthCheck.java", "diffHunk": "@@ -285,7 +286,7 @@ public void sendNotification(String name, HealthCheckResult checkResult, Level l\n         String subject = \"Health Check notification with severity level: \" + level.getName();\n         String messageFormatted = getMessageFormatted(new Object[]{name, getCumulativeMessages(checkResult.getEntries())});\n \n-        List<String> enabledNotifiers = healthCheckService.getEnabledNotifiers();\n+        Collection<String> enabledNotifiers = healthCheckService.getEnabledNotifiers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MTc4Ng=="}, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc4MzIzOnYy", "diffSide": "RIGHT", "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozMTozMFrOHTlM0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozMTozMFrOHTlM0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NDQ4MA==", "bodyText": "Not so sure about this guard. If notifiers isn't empty shouldn't the destroy run even when not disabled? What if I do the bootstrap, disable the service and then get here, shouldn't we still destroy?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490294480", "createdAt": "2020-09-17T14:31:30Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotificationService.java", "diffHunk": "@@ -190,7 +192,9 @@ public void shutdownNotificationService() {\n         if (execution != null) {\n             execution.cancel(true);\n         }\n-        notifiers.forEach(NotifierHandler::destroy);\n+        if (enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc5OTc2OnYy", "diffSide": "RIGHT", "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozNDozN1rOHTlXqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoyMToxMVrOHUM3qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NzI1Nw==", "bodyText": "This is the kind of set that you will not see coming should this not behave as expected and you start looking. I wonder if there is a better way where the config and the notifier interact a bit more obvious with each other.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490297257", "createdAt": "2020-09-17T14:34:37Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -61,34 +61,75 @@\n     private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n \n     private final PayaraNotifier notifier;\n+    private final PayaraNotifierConfiguration config;\n     private final String notifierName;\n \n     private final Queue<PayaraNotification> notificationQueue;\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle) {\n         this(notifierHandle, null);\n     }\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle, final PayaraNotifierConfiguration config) {\n         this.notifier = notifierHandle.getService();\n         this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n         this.notificationQueue = new ConcurrentLinkedQueue<>();\n+        this.config = config;\n+    }\n+\n+    protected PayaraNotifierConfiguration getConfig() {\n+        return config;\n     }\n \n     protected String getName() {\n         return notifierName;\n     }\n \n+    protected void reconfigure() {\n+        // Get the current configuration\n+        PayaraNotifierConfiguration currentConfig = null;\n+        if (config != null) {\n+            currentConfig = PayaraConfiguredNotifier.class.cast(notifier).getConfiguration();\n+            if (currentConfig == null) {\n+                currentConfig = config;\n+            }\n+        }\n+\n+        final boolean enabled = config != null && valueOf(config.getEnabled());\n+        final boolean wasEnabled = config != null && valueOf(currentConfig.getEnabled());\n+\n+        if (!enabled) {\n+            if (wasEnabled) {\n+                // If the notifier isn't enabled but was before\n+                destroy();\n+            }\n+        } else {\n+            if (wasEnabled) {\n+                // If the notifier is enabled and was before\n+                destroy();\n+                bootstrap();\n+            } else {\n+                // If the notifier is enabled and wasn't before\n+                bootstrap();\n+            }\n+        }\n+    }\n+\n     protected void destroy() {\n         notifier.destroy();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     protected void bootstrap() {\n+        // Set the configuration before bootstrapping the notifier\n+        if (config != null) {\n+            PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwODg3Mw==", "bodyText": "I know what you mean, but I can't currently think of a better way. Any ideas?", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490908873", "createdAt": "2020-09-18T12:17:08Z", "author": {"login": "MattGill98"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -61,34 +61,75 @@\n     private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n \n     private final PayaraNotifier notifier;\n+    private final PayaraNotifierConfiguration config;\n     private final String notifierName;\n \n     private final Queue<PayaraNotification> notificationQueue;\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle) {\n         this(notifierHandle, null);\n     }\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle, final PayaraNotifierConfiguration config) {\n         this.notifier = notifierHandle.getService();\n         this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n         this.notificationQueue = new ConcurrentLinkedQueue<>();\n+        this.config = config;\n+    }\n+\n+    protected PayaraNotifierConfiguration getConfig() {\n+        return config;\n     }\n \n     protected String getName() {\n         return notifierName;\n     }\n \n+    protected void reconfigure() {\n+        // Get the current configuration\n+        PayaraNotifierConfiguration currentConfig = null;\n+        if (config != null) {\n+            currentConfig = PayaraConfiguredNotifier.class.cast(notifier).getConfiguration();\n+            if (currentConfig == null) {\n+                currentConfig = config;\n+            }\n+        }\n+\n+        final boolean enabled = config != null && valueOf(config.getEnabled());\n+        final boolean wasEnabled = config != null && valueOf(currentConfig.getEnabled());\n+\n+        if (!enabled) {\n+            if (wasEnabled) {\n+                // If the notifier isn't enabled but was before\n+                destroy();\n+            }\n+        } else {\n+            if (wasEnabled) {\n+                // If the notifier is enabled and was before\n+                destroy();\n+                bootstrap();\n+            } else {\n+                // If the notifier is enabled and wasn't before\n+                bootstrap();\n+            }\n+        }\n+    }\n+\n     protected void destroy() {\n         notifier.destroy();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     protected void bootstrap() {\n+        // Set the configuration before bootstrapping the notifier\n+        if (config != null) {\n+            PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NzI1Nw=="}, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk0NDQyNQ==", "bodyText": "No, would need to checkout the codebase and browse around this a little to get a better understanding of the relations involved. But as long as we are aware of this I think we could also just give it some time and at some point in the future a batter way becomes apparent to us - then we just have to also do the change :)", "url": "https://github.com/payara/Payara/pull/4884#discussion_r490944425", "createdAt": "2020-09-18T13:21:11Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -61,34 +61,75 @@\n     private static final Logger LOGGER = Logger.getLogger(NotifierHandler.class.getName());\n \n     private final PayaraNotifier notifier;\n+    private final PayaraNotifierConfiguration config;\n     private final String notifierName;\n \n     private final Queue<PayaraNotification> notificationQueue;\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle) {\n         this(notifierHandle, null);\n     }\n \n-    public NotifierHandler(ServiceHandle<PayaraNotifier> notifierHandle, PayaraNotifierConfiguration config) {\n+    public NotifierHandler(final ServiceHandle<PayaraNotifier> notifierHandle, final PayaraNotifierConfiguration config) {\n         this.notifier = notifierHandle.getService();\n         this.notifierName = getNotifierName(notifierHandle.getActiveDescriptor());\n         this.notificationQueue = new ConcurrentLinkedQueue<>();\n+        this.config = config;\n+    }\n+\n+    protected PayaraNotifierConfiguration getConfig() {\n+        return config;\n     }\n \n     protected String getName() {\n         return notifierName;\n     }\n \n+    protected void reconfigure() {\n+        // Get the current configuration\n+        PayaraNotifierConfiguration currentConfig = null;\n+        if (config != null) {\n+            currentConfig = PayaraConfiguredNotifier.class.cast(notifier).getConfiguration();\n+            if (currentConfig == null) {\n+                currentConfig = config;\n+            }\n+        }\n+\n+        final boolean enabled = config != null && valueOf(config.getEnabled());\n+        final boolean wasEnabled = config != null && valueOf(currentConfig.getEnabled());\n+\n+        if (!enabled) {\n+            if (wasEnabled) {\n+                // If the notifier isn't enabled but was before\n+                destroy();\n+            }\n+        } else {\n+            if (wasEnabled) {\n+                // If the notifier is enabled and was before\n+                destroy();\n+                bootstrap();\n+            } else {\n+                // If the notifier is enabled and wasn't before\n+                bootstrap();\n+            }\n+        }\n+    }\n+\n     protected void destroy() {\n         notifier.destroy();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     protected void bootstrap() {\n+        // Set the configuration before bootstrapping the notifier\n+        if (config != null) {\n+            PayaraConfiguredNotifier.class.cast(notifier).setConfiguration(config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NzI1Nw=="}, "originalCommit": {"oid": "18ba07b7c6a809d077c0511d68149e37e164242f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODQ2MzUzOnYy", "diffSide": "RIGHT", "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDowMjowMlrOHVIruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDowMjowMlrOHVIruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNDQxMQ==", "bodyText": "take() is a blocking operation, and you are calling it every 5 milliseconds, so that will end up with a lot waiting on this if there aren't many notifications being sent, the opposite problem of what was wrong before. I think a better solution would be to flush the queue every 50 milliseconds or something like that.", "url": "https://github.com/payara/Payara/pull/4884#discussion_r491924411", "createdAt": "2020-09-21T10:02:02Z", "author": {"login": "Cousjava"}, "path": "nucleus/payara-modules/notification-core/src/main/java/fish/payara/nucleus/notification/NotifierHandler.java", "diffHunk": "@@ -146,17 +162,20 @@ public void accept(final PayaraNotification notification) {\n         }\n     }\n \n-    @Override\n-    public void run() {\n-        final PayaraNotification notification = notificationQueue.peek();\n+    private void run() {\n+        assert isEnabled();\n         try {\n-            if (notification != null && isEnabled()) {\n-                notifier.handleNotification(notification);\n-                notificationQueue.remove();\n+            final PayaraNotification notification = notificationQueue.take();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef556e7147d613099b4466b3214f4958753dcb6a"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1215, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}