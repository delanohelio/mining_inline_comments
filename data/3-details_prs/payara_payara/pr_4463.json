{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDIxMzc5", "number": 4463, "title": "APPSERV-47 Adds Custom Watches to Monitoring Console", "bodyText": "Summary\nAdds custom watches to client. In contrast to watches collected from MonitoringWatchSources a custom watch is a user defined Watch instance. The monitoring client is used to compose such a watch. This can be done in the new page Watches that also lists all watches and allows to edit, delete or disable and enable them.\nA disabled watch is simply not actively evaluating data, it is ignored but it will show in the graphs as a outline box instead of a filled one. All watches can be disabled and enabled. This is stored in the added configuration so that the disabled state can be recreated on server startup.\nOnly custom watches can be delete. Collected (or programmatic) watches cannot be deleted as they originate from the server's code.\nCustom watches can be edited. Programmatic watches can be duplicated, which changes the name of the duplicate to Copy of {Name}. So this becomes another watch but allows to use the programmatic watch as a template.\nTo recreate the custom watches on server-startup the watches need to be stored in some form.\nI decided to write custom to and from JSON methods for the affected classes. This will allow to put in the proper code that can handle changes to the data structure. The strategy here is to be able to handle missing fields (that would be added) and ignore fields (that would be removed).\nThe conversion is covered with unit tests.\nOn server side:\n\nadds monitoring console configuration to store disabled watches as well as custom watch data\nREST and service API to enable/disable watches\ndistinction between custom watches and programmatic watches\nwatch states are shared when deriving a watch\nREST and service API to create custom watches\nREST and service API to delete custom watches\nWatchData REST API class is not writable to receive custom watch data send by client\n\nOn client side:\n\nadds a Watches configuration page that lists existing watches, allows to edit, delete or disable/enable them.\nextracts model constants to a separate file for better readability and clarity\nextracts a controller file that encapsulation the client-server communication on client side for better readability and clarity\nfixes/updates formatting of watch conditions (e.g. in alert tables) and watch lists\nuses payara design system colors with better contrast\nfixes alignment of indicator (text message above graph)\nuses configured colours for status messages\nnow also triggers status messages from alerts (red=critical, amber=alerting)\nadds new colour defaults for error and missing status\nuse of const instead of let (TLDR; const should be default, let only when variable is actually changed, var is basically never needed or better suited in our \"non-legacy\" codebase)\nwatch indicator at right side of the graph now shows the indicator as outline if the watch is disabled\nSetting input with unit now can use a function to provide a changing unit.\n\nWriteableView and ProtectedList\nTried to improve it to make it more usable. Code also could do with some cleanup.\n\nadded generics\nadded missing @Override annoations\nremoved unnecessary else nesting\nmade static helpers static\nadded some List methods that would otherwise throw a UnsupportedOperationException on the basis of existing method (so no actual transaction management was needed)\n\nAs mentioned some of the existing methods of the ProtectedList still show some odd behaviour.\nWhen using set(int, E) the value at the index would be null next time I loaded the list.\nTests\nUnit tests were added to verify the correctness of the to/from JSON conversion of the Watch class and all classes involved.\nGeneral information can be taken from the documentation payara/Payara-Server-Documentation#705.\nThe custom watches feature was tested manually following the steps below:\nGeneral Setup:\n\nbuild, install and start the server\nuse set-monitoring-console-configuration --enabled=true to deploy MC\nopen MC at http://localhost:8080/monitoring-console/\nmake sure browser cache for JS/CSS is cleared for MC's domain\ncheck that following pages do exist: Watches (if not most likely a browser cache issue - or get in touch)\n\nTesting Disabling Existing Watches\n\nOpen page Watches in MC\nclick checkbox of one of the listed watches to disable it, e.g. Metric Collection Duration\nfor Metric Collection Duration watch open page Monitoring and check the watch indicator on right side of the graph is now drawn as outline instead of filled\nrestart the server, e.g. using asadmin commands\nrefresh page Watches in MC and check disabled watch is still disabled\nenable the watch again\nfor Metric Collection Duration watch open page Monitoring again and check the indicator is now drawn filled\n\nTesting Disabling Custom Watches\n\nOpen page Watches in MC\ncreate a new watch named Heap Check by checking Unhealthy, filling in: If ns:jvm HeapUsage in Percent is > (some value clearly below your current heap usage, see Core page), and press Save or Update\ngoto Core page and check that the graph shows an alert because heap usage is above the watch level\ngo back to Watches page and disable the created watch by clicking the checkbox on the left or using the cogs menu\ngo back to Core and check that alert is gone (and that indicator is now as outline)\ngo to Alerts page and check the alert is shown in Past Unacknowledged Alerts\ngo to Watches page again an enable the watch once more, check on Core page that an alert is triggered again\n\nTesting Custom Watches\n\ncreate a custom watch as given in steps for Testing Disabling Custom Watches\nrestart the server\nopen Watches page and check the custom watch created is still there\n\nTesting Listing of collected Watches\n\nopen Watches page of MC, with default settings two watches should be listed\nopen admin console and browse to Configurations => server-config => HealthCheck_ tab CPU Usage and check Enabled\ngo back to Watches page and check a new watch CPU Usage is listed now\n\nTesting new admin command parameters are hidden\nrun:\nasadmin> set-monitoring-console-configuration --help\nNAME\n     set-monitoring-console-configuration\n\nSYNOPSIS\n     Usage: set-monitoring-console-configuration [--enabled=true|\n     false] \n\nOPTIONS\n     --enabled\n\nCommand set-monitoring-console-configuration executed successfully.", "createdAt": "2020-01-30T11:26:22Z", "url": "https://github.com/payara/Payara/pull/4463", "merged": true, "mergeCommit": {"oid": "52a7791afe96d45705ee8d1d43f5a5673a56790f"}, "closed": true, "closedAt": "2020-02-05T11:55:39Z", "author": {"login": "jbee"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9h2JPgH2gAyMzY5MDIxMzc5OjZmYTBhOTNlZDM4ZDA3NDQ4NDUyOGNmYjc1ZTNjZGFlYmE5ZGJiODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBTHD_gFqTM1MzU4ODQwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6fa0a93ed38d074484528cfb75e3cdaeba9dbb82", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/6fa0a93ed38d074484528cfb75e3cdaeba9dbb82", "committedDate": "2020-01-24T16:50:19Z", "message": "SMARTTASK-202001 adds basic watches settings with list of watches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96c57cb95617d10b5d65a398a63630469c4a3bb1", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/96c57cb95617d10b5d65a398a63630469c4a3bb1", "committedDate": "2020-01-27T15:52:54Z", "message": "SMARTTASK-202001 adds basic watch builder UI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d592a19c8fa5d8ffb498d2e8d9573bdb93c9d6a", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/1d592a19c8fa5d8ffb498d2e8d9573bdb93c9d6a", "committedDate": "2020-01-28T14:06:38Z", "message": "APPSERV-47 extracts client data and controller to file, adds full featured watch list and editor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "102f7f20265e17da1873a6671a1b6386e0c19ce9", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/102f7f20265e17da1873a6671a1b6386e0c19ce9", "committedDate": "2020-01-28T16:19:19Z", "message": "APPSERV-47 fixes assessment of watches so that stopped or disabled watches have no effect on visuals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b87e25bff7f42d0fa3ba5067525a6bb1d22796f", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/7b87e25bff7f42d0fa3ba5067525a6bb1d22796f", "committedDate": "2020-01-28T16:29:59Z", "message": "APPSERV-47 fixes editing of programmatic watches makes a deep copy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d6b048e0ef67b8473be887f3ccbf9726ccad03", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/92d6b048e0ef67b8473be887f3ccbf9726ccad03", "committedDate": "2020-01-28T17:06:52Z", "message": "APPSERV-47 fixes various issues with custom watch editing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65bab00427b9865b0efebbcb1207fbb7138f9b62", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/65bab00427b9865b0efebbcb1207fbb7138f9b62", "committedDate": "2020-01-28T19:12:14Z", "message": "APPSERV-47 better color contrast and component alignment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70afe694a33d7e27c61180c5d1402e52fd52a77b", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/70afe694a33d7e27c61180c5d1402e52fd52a77b", "committedDate": "2020-01-29T10:28:59Z", "message": "APPSERV-47 fixes watch transitions from collection; fixes Indicator status, colors and triggers linked to alert system"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ca228dc0401361a55f26ff51408f0900d9fa2b4", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/0ca228dc0401361a55f26ff51408f0900d9fa2b4", "committedDate": "2020-01-29T10:56:02Z", "message": "APPSERV-47 adds watch status indicator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56ad00e09b09f19992086479953a2646e09ceee9", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/56ad00e09b09f19992086479953a2646e09ceee9", "committedDate": "2020-01-29T15:21:08Z", "message": "APPSERV-47 disabled watch names are persistent in monitoring console config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "917e10fec529e366d8ea3af836887f0e33a47f43", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/917e10fec529e366d8ea3af836887f0e33a47f43", "committedDate": "2020-01-30T11:17:30Z", "message": "APPSERV-47 adds setting to store custom watches to restore them at startup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/a6627c4b8c663131c537554ce30491a53daadd0b", "committedDate": "2020-01-30T11:18:11Z", "message": "APPSERV-47 generics and some more methods implemented"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzU3MTUz", "url": "https://github.com/payara/Payara/pull/4463#pullrequestreview-350757153", "createdAt": "2020-01-30T11:34:07Z", "commit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTozNDowN1rOFjn74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTozNDowN1rOFjn74w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg5ODc4Nw==", "bodyText": "NB. I opted for a parameter for each action. This could also be done by adding a general parameter watch for the name and data for the JSON and another parameter action or so. But I found this easier to use. On the other hand these are not really intended to be used manually. They mainly exist so that the service can run them to update the config. Manual use is possible but will take a restart to take effect.", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372898787", "createdAt": "2020-01-30T11:34:07Z", "author": {"login": "jbee"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/admin/SetMonitoringConsoleConfigurationCommand.java", "diffHunk": "@@ -61,22 +66,50 @@\n import org.glassfish.hk2.api.PerLookup;\n import org.glassfish.hk2.api.ServiceLocator;\n import org.jvnet.hk2.annotations.Service;\n+import org.jvnet.hk2.config.ConfigSupport;\n+import org.jvnet.hk2.config.SingleConfigCode;\n+import org.jvnet.hk2.config.TransactionFailure;\n \n import com.sun.enterprise.config.serverbeans.Domain;\n import com.sun.enterprise.util.SystemPropertyConstants;\n \n+import fish.payara.monitoring.configuration.MonitoringConsoleConfiguration;\n+\n @Service(name = \"set-monitoring-console-configuration\")\n @PerLookup\n @ExecuteOn({RuntimeType.DAS})\n @TargetType({DAS})\n+@RestEndpoints({\n+    @RestEndpoint(configBean = Domain.class,\n+            opType = RestEndpoint.OpType.POST,\n+            path = \"set-monitoring-console-configuration\",\n+            description = \"Set Monitoring Console Configuration\")\n+})\n public class SetMonitoringConsoleConfigurationCommand implements AdminCommand {\n \n+    private static final Logger LOGGER = Logger.getLogger(SetMonitoringConsoleConfigurationCommand.class.getName());\n+\n     private static final String MONITORING_CONSOLE_APP_NAME = \"__monitoringconsole\";\n     private final static String GLASSFISH_LIB_INSTALL_APPLICATIONS = \"glassfish/lib/install/applications\";\n \n     @Param(optional = true)\n     private Boolean enabled;\n \n+    @Param(optional = true, alias = \"disable-watch\")\n+    private String disableWatch;\n+\n+    @Param(optional = true, alias = \"enable-watch\")\n+    private String enableWatch;\n+\n+    @Param(optional = true, alias = \"add-watch-name\")\n+    private String addWatchName;\n+\n+    @Param(optional = true, alias = \"add-watch-json\")\n+    private String addWatchJson;\n+\n+    @Param(optional = true, alias = \"remove-watch\")\n+    private String removeWatch;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzYwODIw", "url": "https://github.com/payara/Payara/pull/4463#pullrequestreview-350760820", "createdAt": "2020-01-30T11:41:13Z", "commit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0MToxM1rOFjoHMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0MToxM1rOFjoHMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMTY4MA==", "bodyText": "NB. Filling in generics the ConfigBeanProxy has shown to be not correct. While this might be the actual type the generics along the path to this point do not actually provide this guarantee.", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372901680", "createdAt": "2020-01-30T11:41:13Z", "author": {"login": "jbee"}, "path": "nucleus/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/WriteableView.java", "diffHunk": "@@ -317,16 +318,16 @@ public synchronized boolean canCommit(Transaction t) throws TransactionFailure {\n         return currentTx==t;\n     }\n \n-    private void handleValidationException(Set constraintViolations) throws ConstraintViolationException {\n+    private void handleValidationException(Set<? extends ConstraintViolation<?>> constraintViolations) throws ConstraintViolationException {\n \n         if (constraintViolations != null && !constraintViolations.isEmpty()) {\n-            Iterator<ConstraintViolation<ConfigBeanProxy>> it = constraintViolations.iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzYxNTEy", "url": "https://github.com/payara/Payara/pull/4463#pullrequestreview-350761512", "createdAt": "2020-01-30T11:42:33Z", "commit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0MjozM1rOFjoJPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0MjozM1rOFjoJPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjIwNA==", "bodyText": "NB. The loop body got extracted to the commitListChanges method because I needed a bindable type variable to use generics.", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372902204", "createdAt": "2020-01-30T11:42:33Z", "author": {"login": "jbee"}, "path": "nucleus/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/WriteableView.java", "diffHunk": "@@ -394,43 +396,8 @@ else if ( s.startsWith(\"<\") ) {\n                 }\n                 appliedChanges.add(event);\n             }\n-            for (ProtectedList entry :  changedCollections.values())  {\n-                List<Object> originalList = entry.readOnly;\n-                for (PropertyChangeEvent event : entry.changeEvents) {\n-                    if (event.getOldValue()==null) {\n-                        originalList.add(event.getNewValue());\n-                    } else {\n-                        final Object toBeRemovedObj = event.getOldValue();\n-                        if ( toBeRemovedObj instanceof ConfigBeanProxy ) {\n-                            final Dom toBeRemoved = Dom.unwrap((ConfigBeanProxy)toBeRemovedObj);\n-                            for (int index=0;index<originalList.size();index++) {\n-                                Object element = originalList.get(index);\n-                                Dom dom = Dom.unwrap((ConfigBeanProxy) element);\n-                                if (dom==toBeRemoved) {\n-                                    Object newValue = event.getNewValue();\n-                                    if (newValue == null) {\n-                                        originalList.remove(index);\n-                                    } else {\n-                                        originalList.set(index, newValue);\n-                                    }\n-                                }\n-                            }\n-                        }\n-                        else if ( toBeRemovedObj instanceof String ) {\n-                            final String toBeRemoved = (String)toBeRemovedObj;\n-                            for (int index=0;index<originalList.size();index++) {\n-                                final String item = (String)originalList.get(index);\n-                                if (item.equals(toBeRemoved)) {\n-                                    originalList.remove(index);\n-                                }\n-                            }\n-                        }\n-                        else {\n-                              throw new IllegalArgumentException();\n-                        }\n-                    }\n-                    appliedChanges.add(event);\n-                }\n+            for (ProtectedList<?> entry :  changedCollections.values())  {\n+                commitListChanges(entry, appliedChanges);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "originalPosition": 229}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzYxOTM4", "url": "https://github.com/payara/Payara/pull/4463#pullrequestreview-350761938", "createdAt": "2020-01-30T11:43:20Z", "commit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0MzoyMVrOFjoKcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0MzoyMVrOFjoKcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMjUxNQ==", "bodyText": "NB. Changed to static access or the static method getWriteableView.", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372902515", "createdAt": "2020-01-30T11:43:21Z", "author": {"login": "jbee"}, "path": "nucleus/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/WriteableView.java", "diffHunk": "@@ -472,32 +479,37 @@ public synchronized void abort(Transaction t) {\n             throw new TransactionFailure(\"Not part of a transaction\", null);\n         }\n         ConfigBean newBean = bean.allocate(type);\n-        WriteableView writeableView = bean.getHabitat().<ConfigSupport>getService(ConfigSupport.class).getWriteableView(newBean.getProxy(type), newBean);\n+        bean.getHabitat().<ConfigSupport>getService(ConfigSupport.class);\n+        WriteableView writeableView = ConfigSupport.getWriteableView(newBean.getProxy(type), newBean);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "originalPosition": 294}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzYyNzgw", "url": "https://github.com/payara/Payara/pull/4463#pullrequestreview-350762780", "createdAt": "2020-01-30T11:44:55Z", "commit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0NDo1NVrOFjoMvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0NDo1NVrOFjoMvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMzEwMQ==", "bodyText": "NB. These actually work now \ud83d\udd7a", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372903101", "createdAt": "2020-01-30T11:44:55Z", "author": {"login": "jbee"}, "path": "nucleus/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/WriteableView.java", "diffHunk": "@@ -597,12 +610,28 @@ public int size() {\n      * @throws IndexOutOfBoundsException if the given index is out of range\n      *                                   (<tt>index &lt; 0 || index &gt;= size()</tt>).\n      */\n-    public Object get(int index) {\n+    @Override\n+    public E get(int index) {\n         return proxied.get(index);\n     }\n \n     @Override\n-    public synchronized boolean add(Object object) {\n+    public int indexOf(Object object) {\n+        return proxied.indexOf(object);\n+    }\n+\n+    @Override\n+    public int lastIndexOf(Object object) {\n+        return proxied.lastIndexOf(object);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return proxied.toString();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "originalPosition": 392}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzYzNDkz", "url": "https://github.com/payara/Payara/pull/4463#pullrequestreview-350763493", "createdAt": "2020-01-30T11:46:17Z", "commit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0NjoxN1rOFjoO4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0NjoxN1rOFjoO4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMzY1MA==", "bodyText": "NB. While the above two now work I think set is not behaving properly. I looked into that but decided to not mess with it and avoid using it.", "url": "https://github.com/payara/Payara/pull/4463#discussion_r372903650", "createdAt": "2020-01-30T11:46:17Z", "author": {"login": "jbee"}, "path": "nucleus/hk2/hk2-config/src/main/java/org/jvnet/hk2/config/WriteableView.java", "diffHunk": "@@ -736,11 +762,31 @@ public synchronized boolean remove(Object object) {\n         return removed;\n     }\n \n-    public Object set(int index, Object object) {\n-        Object replaced = proxied.set(index, object);\n+    @Override\n+    public E remove(int index) {\n+        if (index >= size())\n+                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size());\n+        E removed = proxied.get(index);\n+        return remove(removed) ? removed : null;\n+    }\n+\n+    @Override\n+    public boolean removeIf(Predicate<? super E> filter) {\n+        boolean removedAny = false;\n+        for (E e : proxied) {\n+            if (filter.test(e) && remove(e)) {\n+                removedAny = true;\n+            }\n+        }\n+        return removedAny;\n+    }\n+\n+    @Override\n+    public E set(int index, E object) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "originalPosition": 484}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7a870a884af9f2a070e4cf1bbe5df8e9939dee0", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/a7a870a884af9f2a070e4cf1bbe5df8e9939dee0", "committedDate": "2020-01-30T12:20:02Z", "message": "APPSERV-47 indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "653ddacedda339f1bf04adca07388833587e160d", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/653ddacedda339f1bf04adca07388833587e160d", "committedDate": "2020-01-30T13:55:45Z", "message": "APPSERV-47 fixes watch state transition when stopping goes to white; removed watches are also removed from disabled list"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDMyNDA5", "url": "https://github.com/payara/Payara/pull/4463#pullrequestreview-351432409", "createdAt": "2020-01-31T11:01:27Z", "commit": {"oid": "653ddacedda339f1bf04adca07388833587e160d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMTowMToyN1rOFkIEJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozOTo1NVrOFk1yeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNTE5MA==", "bodyText": "If they're not for manual use you can prepend them with an underscore (or two underscores, can't remember) to hide them as options on the command line (but not from REST).", "url": "https://github.com/payara/Payara/pull/4463#discussion_r373425190", "createdAt": "2020-01-31T11:01:27Z", "author": {"login": "Pandrex247"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/admin/SetMonitoringConsoleConfigurationCommand.java", "diffHunk": "@@ -61,22 +66,50 @@\n import org.glassfish.hk2.api.PerLookup;\n import org.glassfish.hk2.api.ServiceLocator;\n import org.jvnet.hk2.annotations.Service;\n+import org.jvnet.hk2.config.ConfigSupport;\n+import org.jvnet.hk2.config.SingleConfigCode;\n+import org.jvnet.hk2.config.TransactionFailure;\n \n import com.sun.enterprise.config.serverbeans.Domain;\n import com.sun.enterprise.util.SystemPropertyConstants;\n \n+import fish.payara.monitoring.configuration.MonitoringConsoleConfiguration;\n+\n @Service(name = \"set-monitoring-console-configuration\")\n @PerLookup\n @ExecuteOn({RuntimeType.DAS})\n @TargetType({DAS})\n+@RestEndpoints({\n+    @RestEndpoint(configBean = Domain.class,\n+            opType = RestEndpoint.OpType.POST,\n+            path = \"set-monitoring-console-configuration\",\n+            description = \"Set Monitoring Console Configuration\")\n+})\n public class SetMonitoringConsoleConfigurationCommand implements AdminCommand {\n \n+    private static final Logger LOGGER = Logger.getLogger(SetMonitoringConsoleConfigurationCommand.class.getName());\n+\n     private static final String MONITORING_CONSOLE_APP_NAME = \"__monitoringconsole\";\n     private final static String GLASSFISH_LIB_INSTALL_APPLICATIONS = \"glassfish/lib/install/applications\";\n \n     @Param(optional = true)\n     private Boolean enabled;\n \n+    @Param(optional = true, alias = \"disable-watch\")\n+    private String disableWatch;\n+\n+    @Param(optional = true, alias = \"enable-watch\")\n+    private String enableWatch;\n+\n+    @Param(optional = true, alias = \"add-watch-name\")\n+    private String addWatchName;\n+\n+    @Param(optional = true, alias = \"add-watch-json\")\n+    private String addWatchJson;\n+\n+    @Param(optional = true, alias = \"remove-watch\")\n+    private String removeWatch;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg5ODc4Nw=="}, "originalCommit": {"oid": "a6627c4b8c663131c537554ce30491a53daadd0b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3MTg4Nw==", "bodyText": "Is the full canonical name necessary here? I can't see a conflicting import, and neither does my IDE", "url": "https://github.com/payara/Payara/pull/4463#discussion_r373571887", "createdAt": "2020-01-31T16:35:49Z", "author": {"login": "Pandrex247"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/alert/Alert.java", "diffHunk": "@@ -84,6 +84,10 @@\n         public boolean isLessSevereThan(Level other) {\n             return ordinal() > other.ordinal();\n         }\n+\n+        public static fish.payara.monitoring.alert.Alert.Level parse(String level) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653ddacedda339f1bf04adca07388833587e160d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MTYxMA==", "bodyText": "Think you mean 201 \ud83d\ude09", "url": "https://github.com/payara/Payara/pull/4463#discussion_r373591610", "createdAt": "2020-01-31T17:19:10Z", "author": {"login": "Pandrex247"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/configuration/MonitoringConsoleConfiguration.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.monitoring.configuration;\n+\n+import java.beans.PropertyVetoException;\n+import java.util.List;\n+\n+import org.jvnet.hk2.config.Attribute;\n+import org.jvnet.hk2.config.Configured;\n+import org.jvnet.hk2.config.Element;\n+\n+import com.sun.enterprise.config.serverbeans.DomainExtension;\n+\n+/**\n+ * Configuration for the monitoring console core.\n+ * This is first of all the data and watch collection and evaluation.\n+ * \n+ * @author Jan Bernitt\n+ * @since 5.204", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653ddacedda339f1bf04adca07388833587e160d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3MDM5OQ==", "bodyText": "Is bytes necessarily the best unit vs. kilo or mega?\nAn concrete example in our monitoring doesn't jump immediately to mind but just inciting the thought.", "url": "https://github.com/payara/Payara/pull/4463#discussion_r374170399", "createdAt": "2020-02-03T15:33:18Z", "author": {"login": "Pandrex247"}, "path": "appserver/monitoring-console/webapp/src/main/webapp/js/mc-view-units.js", "diffHunk": "@@ -115,6 +115,21 @@ MonitoringConsole.View.Units = (function() {\n       percent: PERCENT_FACTORS,\n    };\n \n+   const UNIT_NAMES = {\n+      count: 'Count', \n+      ms: 'Milliseconds', \n+      ns: 'Nanoseconds', \n+      bytes: 'Bytes', ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653ddacedda339f1bf04adca07388833587e160d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3MjgyMQ==", "bodyText": "Color\n(\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b", "url": "https://github.com/payara/Payara/pull/4463#discussion_r374172821", "createdAt": "2020-02-03T15:37:20Z", "author": {"login": "Pandrex247"}, "path": "appserver/monitoring-console/webapp/src/main/webapp/css/monitoring-console.css", "diffHunk": "@@ -37,16 +37,31 @@\n    only if the new code is made subject to such option by the copyright\n    holder.\n */\n+:root {\n+  /* Color RGB values to be used in other variable definitions */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653ddacedda339f1bf04adca07388833587e160d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3NDMyOQ==", "bodyText": "I know this class already exists, but a description of what it's used for wouldn't go amiss - circumstance isn't an intuitive name to me in the context of alerts (in comparison to something like event).", "url": "https://github.com/payara/Payara/pull/4463#discussion_r374174329", "createdAt": "2020-02-03T15:39:55Z", "author": {"login": "Pandrex247"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/alert/Circumstance.java", "diffHunk": "@@ -137,4 +141,30 @@ public String toString() {\n         }\n         return str.toString();\n     }\n+\n+    public JsonValue toJSON() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653ddacedda339f1bf04adca07388833587e160d"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d4f419d7c4bfa9d56856010226cf3644d7df1bd", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/9d4f419d7c4bfa9d56856010226cf3644d7df1bd", "committedDate": "2020-02-04T11:14:03Z", "message": "APPSERV-47 addressed Andrew's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTg4NDA1", "url": "https://github.com/payara/Payara/pull/4463#pullrequestreview-353588405", "createdAt": "2020-02-05T09:55:55Z", "commit": {"oid": "9d4f419d7c4bfa9d56856010226cf3644d7df1bd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 852, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}