{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMTE0MDQy", "number": 4949, "title": "FISH-629 Cleanup of deployment/dol module", "bodyText": "Description\nThis is a code cleanup.\nTesting\nNew tests\nTesting Performed\n\nJavaEE7Sampes\n\nTesting Environment\nZulu JDK 1.8_262 on Ubuntu 18.04 with Maven 3.6.3\nNotes for Reviewers\nThis is mostly just adding @Override and using generics.", "createdAt": "2020-10-13T08:55:36Z", "url": "https://github.com/payara/Payara/pull/4949", "merged": true, "mergeCommit": {"oid": "a8ea44d5dcb7b69dfdd102ff2f1378a12263a32d"}, "closed": true, "closedAt": "2020-10-13T11:27:08Z", "author": {"login": "Cousjava"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSEoq_gH2gAyNTAyMTE0MDQyOjRiYTU0OTNiZjM4M2RlMWU2ZjM5MmRhODQxNDQyY2EwNzM4YjhhYjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSG18_AFqTUwNzMzMjEyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4ba5493bf383de1e6f392da841442ca0738b8ab3", "author": {"user": {"login": "Cousjava", "name": "Jonathan C"}}, "url": "https://github.com/payara/Payara/commit/4ba5493bf383de1e6f392da841442ca0738b8ab3", "committedDate": "2020-10-13T08:51:55Z", "message": "FISH-629 Cleanup of deployment/dol module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MzEyNDcx", "url": "https://github.com/payara/Payara/pull/4949#pullrequestreview-507312471", "createdAt": "2020-10-13T10:57:57Z", "commit": {"oid": "4ba5493bf383de1e6f392da841442ca0738b8ab3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowMTowNVrOHghJlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTowODoxMVrOHghYRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1OTYwNA==", "bodyText": "This is no longer thread safe, I'd revert this to be safe", "url": "https://github.com/payara/Payara/pull/4949#discussion_r503859604", "createdAt": "2020-10-13T11:01:05Z", "author": {"login": "MattGill98"}, "path": "appserver/deployment/dol/src/main/java/com/sun/enterprise/deployment/ApplicationClientDescriptor.java", "diffHunk": "@@ -165,25 +160,25 @@ public Collection getNamedDescriptors() {\n     /**\n     * Returns the set of environment properties of this app client.\n     */\n-    public Set getEnvironmentProperties() {\n+    @Override\n+    public Set<EnvironmentProperty> getEnvironmentProperties() {\n \tif (this.environmentProperties == null) {\n-\t    this.environmentProperties = new OrderedSet();\n+\t    this.environmentProperties = new OrderedSet<>();\n \t}\n-\treturn this.environmentProperties = new OrderedSet(this.environmentProperties);\n+\treturn this.environmentProperties = new OrderedSet<>(this.environmentProperties);\n     }\n \n     /**\n      * Returns the environment property object searching on the supplied key.\n      * throws an illegal argument exception if no such environment property exists.\n      */\n+    @Override\n     public EnvironmentProperty getEnvironmentPropertyByName(String name) {\n-\tfor (Iterator itr = this.getEnvironmentProperties().iterator();\n-             itr.hasNext();) {\n-\t    EnvironmentProperty ev = (EnvironmentProperty) itr.next();\n-\t    if (ev.getName().equals(name)) {\n-\t\treturn ev;\n-\t    }\n-\t}\n+        for (EnvironmentProperty ev : this.getEnvironmentProperties()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba5493bf383de1e6f392da841442ca0738b8ab3"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MDY0OA==", "bodyText": "This comment isn't essential, but a lot of these variables use the implementation as the type, when an interface will probably do", "url": "https://github.com/payara/Payara/pull/4949#discussion_r503860648", "createdAt": "2020-10-13T11:03:01Z", "author": {"login": "MattGill98"}, "path": "appserver/deployment/dol/src/main/java/com/sun/enterprise/deployment/BundleDescriptor.java", "diffHunk": "@@ -109,7 +106,7 @@\n     private boolean keepState = false;\n     private boolean defaultGroupPrincipalMapping = true;\n \n-    protected HashMap<String, RootXMLNode> rootNodes = new HashMap<String, RootXMLNode>();\n+    protected HashMap<String, RootXMLNode> rootNodes = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba5493bf383de1e6f392da841442ca0738b8ab3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MjQ3MA==", "bodyText": "This isn't a class variable to it's less important somewhat, but this still isn't thread safe. Whatever we do, I'd update the method so that each of the loops here uses the same convention", "url": "https://github.com/payara/Payara/pull/4949#discussion_r503862470", "createdAt": "2020-10-13T11:06:23Z", "author": {"login": "MattGill98"}, "path": "appserver/deployment/dol/src/main/java/com/sun/enterprise/deployment/BundleDescriptor.java", "diffHunk": "@@ -388,26 +385,24 @@ public void addRole(SecurityRoleDescriptor descriptor) {\n     /**\n      * Removes a role object from me.\n      */\n+    @Override\n     public void removeRole(Role role) {\n         this.getRoles().remove(role);\n     }\n \n     /**\n      * Utility method for iterating the set of named descriptors in the supplied nameEnvironment\n      */\n-    protected Collection getNamedDescriptorsFrom(JndiNameEnvironment nameEnvironment) {\n-        Collection namedDescriptors = new Vector();\n-        for (Iterator itr = nameEnvironment.getResourceReferenceDescriptors().iterator(); itr.hasNext();) {\n-            ResourceReferenceDescriptor resourceReference = (ResourceReferenceDescriptor) itr.next();\n+    protected Collection<NamedDescriptor> getNamedDescriptorsFrom(JndiNameEnvironment nameEnvironment) {\n+        Collection<NamedDescriptor> namedDescriptors = new Vector<>();\n+        for (ResourceReferenceDescriptor resourceReference : nameEnvironment.getResourceReferenceDescriptors()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba5493bf383de1e6f392da841442ca0738b8ab3"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MjY3Mg==", "bodyText": "Same as above", "url": "https://github.com/payara/Payara/pull/4949#discussion_r503862672", "createdAt": "2020-10-13T11:06:48Z", "author": {"login": "MattGill98"}, "path": "appserver/deployment/dol/src/main/java/com/sun/enterprise/deployment/BundleDescriptor.java", "diffHunk": "@@ -418,18 +413,15 @@ protected Collection getNamedDescriptorsFrom(JndiNameEnvironment nameEnvironment\n      * Utility method for iterating the set of NameReference pairs in the supplied nameEnvironment\n      */\n     protected Vector<NamedReferencePair> getNamedReferencePairsFrom(JndiNameEnvironment nameEnvironment) {\n-        Vector<NamedReferencePair> pairs = new Vector<NamedReferencePair>();\n-        for (Iterator itr = nameEnvironment.getResourceReferenceDescriptors().iterator(); itr.hasNext();) {\n-            ResourceReferenceDescriptor resourceReference = (ResourceReferenceDescriptor) itr.next();\n+        Vector<NamedReferencePair> pairs = new Vector<>();\n+        for (ResourceReferenceDescriptor resourceReference : nameEnvironment.getResourceReferenceDescriptors()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba5493bf383de1e6f392da841442ca0738b8ab3"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MzM2NQ==", "bodyText": "As above", "url": "https://github.com/payara/Payara/pull/4949#discussion_r503863365", "createdAt": "2020-10-13T11:08:11Z", "author": {"login": "MattGill98"}, "path": "appserver/deployment/dol/src/main/java/com/sun/enterprise/deployment/BundleDescriptor.java", "diffHunk": "@@ -483,69 +476,50 @@ public InjectionInfo getInjectionInfoByClass(Class clazz,\n         String className = clazz.getName();\n \n         // if it's not in the cache, create a new one\n-        LifecycleCallbackDescriptor postConstructDesc =\n-                getPostConstructDescriptorByClass(className, jndiNameEnv);\n-        String postConstructMethodName = (postConstructDesc != null) ?\n-                postConstructDesc.getLifecycleCallbackMethod() : null;\n-        LifecycleCallbackDescriptor preDestroyDesc =\n-                getPreDestroyDescriptorByClass(className, jndiNameEnv);\n-        String preDestroyMethodName = (preDestroyDesc != null) ?\n-                preDestroyDesc.getLifecycleCallbackMethod() : null;\n-        injectionInfo = new InjectionInfo(className,\n-                postConstructMethodName, preDestroyMethodName,\n-                getInjectableResourcesByClass(className,\n-                        jndiNameEnv));\n+        LifecycleCallbackDescriptor postConstructDesc = getPostConstructDescriptorByClass(className, jndiNameEnv);\n+        String postConstructMethodName = (postConstructDesc != null) ? postConstructDesc.getLifecycleCallbackMethod() : null;\n+        LifecycleCallbackDescriptor preDestroyDesc = getPreDestroyDescriptorByClass(className, jndiNameEnv);\n+        String preDestroyMethodName = (preDestroyDesc != null) ? preDestroyDesc.getLifecycleCallbackMethod() : null;\n+        injectionInfo = new InjectionInfo(className, postConstructMethodName, preDestroyMethodName, getInjectableResourcesByClass(className, jndiNameEnv));\n \n         // store it in the cache and return\n         injectionInfos.put(key, injectionInfo);\n         return injectionInfo;\n     }\n \n-    public LifecycleCallbackDescriptor\n-    getPostConstructDescriptorByClass(String className,\n-                                      JndiNameEnvironment jndiNameEnv) {\n-        for (LifecycleCallbackDescriptor next :\n-                jndiNameEnv.getPostConstructDescriptors()) {\n+    public LifecycleCallbackDescriptor getPostConstructDescriptorByClass(String className, JndiNameEnvironment jndiNameEnv) {\n+        for (LifecycleCallbackDescriptor next : jndiNameEnv.getPostConstructDescriptors()) {\n             if (next.getLifecycleCallbackClass().equals(className)) {\n                 return next;\n             }\n         }\n         return null;\n     }\n \n-    public LifecycleCallbackDescriptor\n-    getPreDestroyDescriptorByClass(String className,\n-                                   JndiNameEnvironment jndiNameEnv) {\n-        for (LifecycleCallbackDescriptor next :\n-                jndiNameEnv.getPreDestroyDescriptors()) {\n+    public LifecycleCallbackDescriptor getPreDestroyDescriptorByClass(String className, JndiNameEnvironment jndiNameEnv) {\n+        for (LifecycleCallbackDescriptor next : jndiNameEnv.getPreDestroyDescriptors()) {\n             if (next.getLifecycleCallbackClass().equals(className)) {\n                 return next;\n             }\n         }\n         return null;\n     }\n \n-    public List<InjectionCapable> getInjectableResources\n-            (JndiNameEnvironment jndiNameEnv) {\n+    public List<InjectionCapable> getInjectableResources(JndiNameEnvironment jndiNameEnv) {\n \n-        List<InjectionCapable> injectables =\n-                new LinkedList<InjectionCapable>();\n+        List<InjectionCapable> injectables = new LinkedList<>();\n \n         addJndiNameEnvironmentInjectables(jndiNameEnv, injectables);\n \n         return injectables;\n     }\n \n-    private void addJndiNameEnvironmentInjectables(JndiNameEnvironment jndiNameEnv,\n-                                                   List<InjectionCapable> injectables) {\n+    private void addJndiNameEnvironmentInjectables(JndiNameEnvironment jndiNameEnv, List<InjectionCapable> injectables) {\n \n-        Collection allEnvProps = new HashSet();\n+        Collection allEnvProps = new HashSet<>();\n \n-        for (Iterator envEntryItr =\n-                jndiNameEnv.getEnvironmentProperties().iterator();\n-             envEntryItr.hasNext();) {\n-            EnvironmentProperty envEntry = (EnvironmentProperty)\n-                    envEntryItr.next();\n+        for (Iterator envEntryItr =jndiNameEnv.getEnvironmentProperties().iterator(); envEntryItr.hasNext();) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba5493bf383de1e6f392da841442ca0738b8ab3"}, "originalPosition": 271}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MzMyMTI2", "url": "https://github.com/payara/Payara/pull/4949#pullrequestreview-507332126", "createdAt": "2020-10-13T11:26:14Z", "commit": {"oid": "4ba5493bf383de1e6f392da841442ca0738b8ab3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 696, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}