{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDE0MDU4", "number": 4494, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzo0Njo0OVrODgl2Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyOToxMFrODg_xGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTAxMTM0OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzo0Njo0OVrOFq4DSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToyODozMFrOFq69uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMjg1OA==", "bodyText": "The visitSchema() is now called twice with the same parameters.", "url": "https://github.com/payara/Payara/pull/4494#discussion_r380502858", "createdAt": "2020-02-18T07:46:49Z", "author": {"login": "rdebusscher"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "diffHunk": "@@ -1031,11 +1031,18 @@ private boolean insertObjectReference(ApiContext context, Reference<?> referee,\n             return false;\n         }\n \n+        final Schema schema = AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class);\n+\n         // Set the reference name\n-        referee.setRef(referenceClass.getSimpleName());\n+        if (schema == null || schema.name().isEmpty()) {\n+            referee.setRef(referenceClass.getSimpleName());\n+        } else {\n+            referee.setRef(schema.name());\n+        }\n \n         // Create the schema\n         visitSchema(AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class), referenceClass, context);\n+        visitSchema(schema, referenceClass, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d0e54f6d8d27105cf375aa1c86f3cafee7f56db"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU1MDU4Nw==", "bodyText": "Thank you. That line is completely in vain there. Removed in e3fd7d2", "url": "https://github.com/payara/Payara/pull/4494#discussion_r380550587", "createdAt": "2020-02-18T09:28:30Z", "author": {"login": "Pscheidl"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "diffHunk": "@@ -1031,11 +1031,18 @@ private boolean insertObjectReference(ApiContext context, Reference<?> referee,\n             return false;\n         }\n \n+        final Schema schema = AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class);\n+\n         // Set the reference name\n-        referee.setRef(referenceClass.getSimpleName());\n+        if (schema == null || schema.name().isEmpty()) {\n+            referee.setRef(referenceClass.getSimpleName());\n+        } else {\n+            referee.setRef(schema.name());\n+        }\n \n         // Create the schema\n         visitSchema(AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class), referenceClass, context);\n+        visitSchema(schema, referenceClass, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMjg1OA=="}, "originalCommit": {"oid": "5d0e54f6d8d27105cf375aa1c86f3cafee7f56db"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTI1MzY4OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/test/java/fish/payara/microprofile/openapi/test/app/application/OASchemaReferenceNameTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyNzo1OVrOFrgtGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTo1OTo1NlrOFrh5GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODkyMQ==", "bodyText": "2020", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381168921", "createdAt": "2020-02-19T09:27:59Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/test/java/fish/payara/microprofile/openapi/test/app/application/OASchemaReferenceNameTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2019] Payara Foundation and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3fd7d2e2920ac58a126d0434caf61b588e4738b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4ODM3Nw==", "bodyText": "Done.", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381188377", "createdAt": "2020-02-19T09:59:56Z", "author": {"login": "Pscheidl"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/test/java/fish/payara/microprofile/openapi/test/app/application/OASchemaReferenceNameTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) [2019] Payara Foundation and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODkyMQ=="}, "originalCommit": {"oid": "e3fd7d2e2920ac58a126d0434caf61b588e4738b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTI1Nzg1OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyOToxMFrOFrgvwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDo1MDo0N1rOFrrJsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ==", "bodyText": "I'd prefer a single referee.setRef(...) with a conditional expression but that is personal preference.", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381169601", "createdAt": "2020-02-19T09:29:10Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "diffHunk": "@@ -1031,11 +1031,17 @@ private boolean insertObjectReference(ApiContext context, Reference<?> referee,\n             return false;\n         }\n \n+        final Schema schema = AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class);\n+\n         // Set the reference name\n-        referee.setRef(referenceClass.getSimpleName());\n+        if (schema == null || schema.name().isEmpty()) {\n+            referee.setRef(referenceClass.getSimpleName());\n+        } else {\n+            referee.setRef(schema.name());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3fd7d2e2920ac58a126d0434caf61b588e4738b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4ODI1NQ==", "bodyText": "Why not ? Can be squeezed into a single line quite easily.\nreferee.setRef(schema == null || schema.name().isEmpty() ? referenceClass.getSimpleName() : schema.name());\n\nChanged in 2e2e6f6.", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381188255", "createdAt": "2020-02-19T09:59:44Z", "author": {"login": "Pscheidl"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "diffHunk": "@@ -1031,11 +1031,17 @@ private boolean insertObjectReference(ApiContext context, Reference<?> referee,\n             return false;\n         }\n \n+        final Schema schema = AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class);\n+\n         // Set the reference name\n-        referee.setRef(referenceClass.getSimpleName());\n+        if (schema == null || schema.name().isEmpty()) {\n+            referee.setRef(referenceClass.getSimpleName());\n+        } else {\n+            referee.setRef(schema.name());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ=="}, "originalCommit": {"oid": "e3fd7d2e2920ac58a126d0434caf61b588e4738b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5MjgzMQ==", "bodyText": "Don't know why, some people do not like conditionals.", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381192831", "createdAt": "2020-02-19T10:07:33Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "diffHunk": "@@ -1031,11 +1031,17 @@ private boolean insertObjectReference(ApiContext context, Reference<?> referee,\n             return false;\n         }\n \n+        final Schema schema = AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class);\n+\n         // Set the reference name\n-        referee.setRef(referenceClass.getSimpleName());\n+        if (schema == null || schema.name().isEmpty()) {\n+            referee.setRef(referenceClass.getSimpleName());\n+        } else {\n+            referee.setRef(schema.name());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ=="}, "originalCommit": {"oid": "e3fd7d2e2920ac58a126d0434caf61b588e4738b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyODEyMw==", "bodyText": "ternary operators make it far less readable, compiler can do this optimization.", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381228123", "createdAt": "2020-02-19T11:14:55Z", "author": {"login": "rdebusscher"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "diffHunk": "@@ -1031,11 +1031,17 @@ private boolean insertObjectReference(ApiContext context, Reference<?> referee,\n             return false;\n         }\n \n+        final Schema schema = AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class);\n+\n         // Set the reference name\n-        referee.setRef(referenceClass.getSimpleName());\n+        if (schema == null || schema.name().isEmpty()) {\n+            referee.setRef(referenceClass.getSimpleName());\n+        } else {\n+            referee.setRef(schema.name());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ=="}, "originalCommit": {"oid": "e3fd7d2e2920ac58a126d0434caf61b588e4738b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2Mzc4NA==", "bodyText": "ternary operators make it far less readable\n\nThat is subjective. I can read conditions \"better\".\n\ncompiler can do this optimization.\n\nIts not a readability or performance optimization as far as I am concerned but a semantic one.  With the conditional it is very clear that we want to do this (here setRef) with some value in any branch. This is much clearer expressed by not doing that in an if-else where both branches do it but a single call with a argument that is either this or that.", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381263784", "createdAt": "2020-02-19T12:37:21Z", "author": {"login": "jbee"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "diffHunk": "@@ -1031,11 +1031,17 @@ private boolean insertObjectReference(ApiContext context, Reference<?> referee,\n             return false;\n         }\n \n+        final Schema schema = AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class);\n+\n         // Set the reference name\n-        referee.setRef(referenceClass.getSimpleName());\n+        if (schema == null || schema.name().isEmpty()) {\n+            referee.setRef(referenceClass.getSimpleName());\n+        } else {\n+            referee.setRef(schema.name());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ=="}, "originalCommit": {"oid": "e3fd7d2e2920ac58a126d0434caf61b588e4738b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0MDA4Mw==", "bodyText": "I'm fine with both. I can read almost any code of any style. Feel free to adjust it to your liking.", "url": "https://github.com/payara/Payara/pull/4494#discussion_r381340083", "createdAt": "2020-02-19T14:50:47Z", "author": {"login": "Pscheidl"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java", "diffHunk": "@@ -1031,11 +1031,17 @@ private boolean insertObjectReference(ApiContext context, Reference<?> referee,\n             return false;\n         }\n \n+        final Schema schema = AnnotationInfo.valueOf(referenceClass).getAnnotation(Schema.class);\n+\n         // Set the reference name\n-        referee.setRef(referenceClass.getSimpleName());\n+        if (schema == null || schema.name().isEmpty()) {\n+            referee.setRef(referenceClass.getSimpleName());\n+        } else {\n+            referee.setRef(schema.name());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2OTYwMQ=="}, "originalCommit": {"oid": "e3fd7d2e2920ac58a126d0434caf61b588e4738b"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1396, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}