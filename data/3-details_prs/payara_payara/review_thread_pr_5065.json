{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNTgwODUw", "number": 5065, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo0NjozOVrOFILu_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo1MDowM1rOFINLlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTI1MTgyOnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo0NjozOVrOIJ9ong==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTozNjo1NVrOIJ_XKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxNzkxOA==", "bodyText": "Suggestion:\nremove the if (from.getSchemas()!= null) { and put it with the if (from == null) {\nLike so:\nif (from==null || from.getSchemas()!= null) {", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547317918", "createdAt": "2020-12-22T14:46:39Z", "author": {"login": "MarkWareham"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java", "diffHunk": "@@ -305,11 +354,13 @@ public static void merge(Components from, Components to,\n         }\n         // Handle @Schema\n         if (from.getSchemas()!= null) {\n-            for (String schemaName : from.getSchemas().keySet()) {\n+            for (Entry<String, Schema> fromEntry : from.getSchemas().entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a452e202106f7df3234abb1eca61f19790b63f4c"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0NjIxNg==", "bodyText": "This method merged quite a lot of properties, and even if one of them exists it needs merging. I'd argue in favour of the current code", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547346216", "createdAt": "2020-12-22T15:36:55Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ComponentsImpl.java", "diffHunk": "@@ -305,11 +354,13 @@ public static void merge(Components from, Components to,\n         }\n         // Handle @Schema\n         if (from.getSchemas()!= null) {\n-            for (String schemaName : from.getSchemas().keySet()) {\n+            for (Entry<String, Schema> fromEntry : from.getSchemas().entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxNzkxOA=="}, "originalCommit": {"oid": "a452e202106f7df3234abb1eca61f19790b63f4c"}, "originalPosition": 348}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTI5MDI3OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo1NzowMFrOIJ9_NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjowNTo0NFrOIKAWFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMzcwMA==", "bodyText": "It seems you do a lot of unnecessary null checks. When could the object be null? It's instantiated in the declaration and nothing sets or nullifies it (that I see)", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547323700", "createdAt": "2020-12-22T14:57:00Z", "author": {"login": "MarkWareham"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java", "diffHunk": "@@ -58,25 +60,30 @@\n     private static final Logger LOGGER = Logger.getLogger(ExtensibleImpl.class.getName());\n \n     @JsonIgnore\n-    protected Map<String, Object> extensions = new LinkedHashMap<>();\n+    protected Map<String, Object> extensions = createMap();\n \n     @Override\n     public Map<String, Object> getExtensions() {\n-        return extensions;\n+        return readOnlyView(extensions);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public T addExtension(String name, Object value) {\n         if (value != null) {\n+            if (extensions == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a452e202106f7df3234abb1eca61f19790b63f4c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2MjMyNA==", "bodyText": "I'd missed a method in my large collection refactor. I've fixed that now, so the extensions can now be null. The TCK asserts than a handful of these collections are still nullable", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547362324", "createdAt": "2020-12-22T16:05:44Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java", "diffHunk": "@@ -58,25 +60,30 @@\n     private static final Logger LOGGER = Logger.getLogger(ExtensibleImpl.class.getName());\n \n     @JsonIgnore\n-    protected Map<String, Object> extensions = new LinkedHashMap<>();\n+    protected Map<String, Object> extensions = createMap();\n \n     @Override\n     public Map<String, Object> getExtensions() {\n-        return extensions;\n+        return readOnlyView(extensions);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public T addExtension(String name, Object value) {\n         if (value != null) {\n+            if (extensions == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMzcwMA=="}, "originalCommit": {"oid": "a452e202106f7df3234abb1eca61f19790b63f4c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTI5OTQxOnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo1OTozNlrOIJ-EyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo1OTozNlrOIJ-EyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNTEyOQ==", "bodyText": "can remove the negation and put into the first if of the method to return. Easier to read, less cyclomatic complexity", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547325129", "createdAt": "2020-12-22T14:59:36Z", "author": {"login": "MarkWareham"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/ExtensibleImpl.java", "diffHunk": "@@ -100,7 +107,7 @@ public static void merge(Extensible<?> from, Extensible<?> to, boolean override)\n             return;\n         }\n         if (to.getExtensions() == null) {\n-            to.setExtensions(new LinkedHashMap<>());\n+            to.setExtensions(createMap());\n         }\n         if (!from.getExtensions().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a452e202106f7df3234abb1eca61f19790b63f4c"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTMxNzg0OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowNDozNVrOIJ-Pqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTowNDozNVrOIJ-Pqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNzkxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (server != null) {\n          \n          \n            \n                        if (servers == null) {\n          \n          \n            \n                            servers = createList();\n          \n          \n            \n                        }\n          \n          \n            \n                        if (server.getUrl() != null) {\n          \n          \n            \n                            for (Server existingServer : getServers()) {\n          \n          \n            \n                                // If a server with the same URL is found, merge them\n          \n          \n            \n                                if (server.getUrl().equals(existingServer.getUrl())) {\n          \n          \n            \n                                    ModelUtils.merge(server, existingServer, true);\n          \n          \n            \n                                    return this;\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                \n          \n          \n            \n                        // If a server with the same URL doesn't exist, create it\n          \n          \n            \n                        servers.add(server);\n          \n          \n            \n                    }\n          \n          \n            \n                    if (server == null || server.getUrl() == null)) {\n          \n          \n            \n                        return this;\n          \n          \n            \n                    }\n          \n          \n            \n                   \n          \n          \n            \n                    if (servers == null) {\n          \n          \n            \n                        servers = createList();\n          \n          \n            \n                    }\n          \n          \n            \n                       \n          \n          \n            \n                     for (Server existingServer : getServers()) {\n          \n          \n            \n                          // If a server with the same URL is found, merge them\n          \n          \n            \n                          if (server.getUrl().equals(existingServer.getUrl())) {\n          \n          \n            \n                              ModelUtils.merge(server, existingServer, true);\n          \n          \n            \n                              return this;\n          \n          \n            \n                          }\n          \n          \n            \n                      }\n          \n          \n            \n                       \n          \n          \n            \n                        // If a server with the same URL doesn't exist, create it\n          \n          \n            \n                        servers.add(server);\n          \n      \n    \n    \n  \n\nreduces complexity", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547327915", "createdAt": "2020-12-22T15:04:35Z", "author": {"login": "MarkWareham"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/OpenAPIImpl.java", "diffHunk": "@@ -130,76 +131,95 @@ public void setExternalDocs(ExternalDocumentation externalDocs) {\n \n     @Override\n     public List<Server> getServers() {\n-        return servers;\n+        return readOnlyView(servers);\n     }\n \n     @Override\n     public void setServers(List<Server> servers) {\n-        this.servers = servers;\n+        this.servers = createList(servers);\n     }\n \n     @Override\n     public OpenAPI addServer(Server server) {\n-        if (server.getUrl() != null) {\n-            for (Server existingServer : getServers()) {\n-                // If a server with the same URL is found, merge them\n-                if (server.getUrl().equals(existingServer.getUrl())) {\n-                    ModelUtils.merge(server, existingServer, true);\n-                    return this;\n+        if (server != null) {\n+            if (servers == null) {\n+                servers = createList();\n+            }\n+            if (server.getUrl() != null) {\n+                for (Server existingServer : getServers()) {\n+                    // If a server with the same URL is found, merge them\n+                    if (server.getUrl().equals(existingServer.getUrl())) {\n+                        ModelUtils.merge(server, existingServer, true);\n+                        return this;\n+                    }\n                 }\n             }\n+    \n+            // If a server with the same URL doesn't exist, create it\n+            servers.add(server);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a452e202106f7df3234abb1eca61f19790b63f4c"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTQ4ODg0OnYy", "diffSide": "RIGHT", "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/parameters/RequestBodyImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo1MDowM1rOIJ_0DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNzowNDozNFrOIKCOZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MzYxMw==", "bodyText": "As per the existing design of OpenAPI Impl, merge operations are invoked after the creation of the instances.\n    public void visitOpenAPI(AnnotationModel definition, AnnotatedElement element, ApiContext context) {\n        OpenAPIImpl.merge(OpenAPIImpl.createInstance(definition, context), context.getApi(), true, context);\n    }", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547353613", "createdAt": "2020-12-22T15:50:03Z", "author": {"login": "jGauravGupta"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/parameters/RequestBodyImpl.java", "diffHunk": "@@ -55,19 +57,24 @@\n \n     private String description;\n     private Content content = new ContentImpl();\n-    private List<ContentImpl> contents = new ArrayList<>();\n     private Boolean required;\n     private String ref;\n \n-    public static RequestBody createInstance(AnnotationModel annotation, ApiContext context) {\n+    public static RequestBodyImpl createInstance(AnnotationModel annotation, ApiContext context) {\n         RequestBodyImpl from = new RequestBodyImpl();\n         from.setDescription(annotation.getValue(\"description\", String.class));\n         from.setRequired(annotation.getValue(\"required\", Boolean.class));\n         String ref = annotation.getValue(\"ref\", String.class);\n         if (ref != null && !ref.isEmpty()) {\n             from.setRef(ref);\n         }\n-        extractAnnotations(annotation, context, \"content\", ContentImpl::createInstance, from.getContents());\n+\n+        final List<ContentImpl> contents = createList();\n+        extractAnnotations(annotation, context, \"content\", ContentImpl::createInstance, contents::add);\n+        for (ContentImpl content : contents) {\n+            ContentImpl.merge(content, from.content, true, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a452e202106f7df3234abb1eca61f19790b63f4c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM2MTE3OQ==", "bodyText": "What do you mean?", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547361179", "createdAt": "2020-12-22T16:03:41Z", "author": {"login": "MattGill98"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/parameters/RequestBodyImpl.java", "diffHunk": "@@ -55,19 +57,24 @@\n \n     private String description;\n     private Content content = new ContentImpl();\n-    private List<ContentImpl> contents = new ArrayList<>();\n     private Boolean required;\n     private String ref;\n \n-    public static RequestBody createInstance(AnnotationModel annotation, ApiContext context) {\n+    public static RequestBodyImpl createInstance(AnnotationModel annotation, ApiContext context) {\n         RequestBodyImpl from = new RequestBodyImpl();\n         from.setDescription(annotation.getValue(\"description\", String.class));\n         from.setRequired(annotation.getValue(\"required\", Boolean.class));\n         String ref = annotation.getValue(\"ref\", String.class);\n         if (ref != null && !ref.isEmpty()) {\n             from.setRef(ref);\n         }\n-        extractAnnotations(annotation, context, \"content\", ContentImpl::createInstance, from.getContents());\n+\n+        final List<ContentImpl> contents = createList();\n+        extractAnnotations(annotation, context, \"content\", ContentImpl::createInstance, contents::add);\n+        for (ContentImpl content : contents) {\n+            ContentImpl.merge(content, from.content, true, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MzYxMw=="}, "originalCommit": {"oid": "a452e202106f7df3234abb1eca61f19790b63f4c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM5MzEyNg==", "bodyText": "Discussed impl design over DM. PR LGTM.", "url": "https://github.com/payara/Payara/pull/5065#discussion_r547393126", "createdAt": "2020-12-22T17:04:34Z", "author": {"login": "jGauravGupta"}, "path": "appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/model/parameters/RequestBodyImpl.java", "diffHunk": "@@ -55,19 +57,24 @@\n \n     private String description;\n     private Content content = new ContentImpl();\n-    private List<ContentImpl> contents = new ArrayList<>();\n     private Boolean required;\n     private String ref;\n \n-    public static RequestBody createInstance(AnnotationModel annotation, ApiContext context) {\n+    public static RequestBodyImpl createInstance(AnnotationModel annotation, ApiContext context) {\n         RequestBodyImpl from = new RequestBodyImpl();\n         from.setDescription(annotation.getValue(\"description\", String.class));\n         from.setRequired(annotation.getValue(\"required\", Boolean.class));\n         String ref = annotation.getValue(\"ref\", String.class);\n         if (ref != null && !ref.isEmpty()) {\n             from.setRef(ref);\n         }\n-        extractAnnotations(annotation, context, \"content\", ContentImpl::createInstance, from.getContents());\n+\n+        final List<ContentImpl> contents = createList();\n+        extractAnnotations(annotation, context, \"content\", ContentImpl::createInstance, contents::add);\n+        for (ContentImpl content : contents) {\n+            ContentImpl.merge(content, from.content, true, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MzYxMw=="}, "originalCommit": {"oid": "a452e202106f7df3234abb1eca61f19790b63f4c"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1195, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}