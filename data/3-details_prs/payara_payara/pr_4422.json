{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTM1ODIz", "number": 4422, "title": "APPSERV-14 Slow SQL tracing views", "bodyText": "Summary\nAdds on server side:\n\na general data annotation mechanism to data collection (see details below)\nSQL max execution time metric based on SQL tracing\na watch for SQL max execution time with threshold from pool configuration\nextends watch conditions\nadds series tag name wildcards, ala ?:foo (any tag name with value foo including no tag) to allow explicit selection of family of series where some have further tags and others have not like used for lists of health check alerts or a general alert list\nREST API for data requests supports better selection of the needed type of data (points, alerts, annotations, watches) to avoid sending data between client and server that isn't used by the client\nextends request tracing metric so it does allow adding useful watch\nadds a watch to cause alerts in case request tracing is above threshold\nadds \"compaction\" for alert frames to limit memory consumption and client-server data exchange\n\nAdds on client side:\n\nshows thresholds of multiple watches in charts as stacked threshold indicator lines/areas\nfixes threshold indicator gradient and line alignment\nfixes alert condition formatting\nadds annotations to alerts with setting to hide them\nadds new widget type Annotations that lists just the matching annotations in a list or table\nadds new widget setting Mode to switch between Table or List layout for Annotations widgets\nwidgets now have a page wide unique id so that same series (pattern) can be used multiple times on the same page as done for SQL, request tracing or alerts.\nadds a new SQL preset page that show slow SQL tracing information\nfixes alert table vertical overflow by using a scrollbar when needed\nadds list of tracing data and tracing metric with alerts to request tracing page\nadds a general Alerts page preset that shows all alerts organised in groups\n\nData Annotations\nAnnotations are a new concept in collection of metrics to attach key-value data to a particular metric at a particular point in time. Such annotation should only be done in situations that are in some way noteworthy such as a metric's value exceeding a particular threshold. In general annotations are event like information that are stored per series in a queue of fixed size. Newer annotations eventually replace older annotations to avoid number of annotations growing out of control.\nCurrent limit is set at 20 per metric series.\nThe annotation data is used by the client to enhance views such as lists of alerts with more data for the period of the alert or to allow widgets of type annotation that for example can list the slow SQL meta data in table.\nAnnotations provide a general mechanism that makes such values available for any metric and from all instances. To verify the general nature of the concept it has also been applied to request tracing which allows to also list the trace span attributes in a table.\nTesting\nNew unit tests were added for\n\nextended variants of Condition logic\nextended Series patterns using the added ? wild-card\nAlert.Frame compaction\n\nTesting Performed\nManual testing of various features. This PR does change general parts and extends others. It makes sense to test usual workflows even though they were not an explicit target of the changes.\nTesting Instructions\nGeneral Setup:\n\nbuild, install and start the server\nuse set-monitoring-console-configuration --enabled=true to deploy MC\nopen MC at http://localhost:8080/monitoring-console/\nmake sure browser cache for JS/CSS is cleared for MC's domain\ncheck that following pages do exist: SQL and Alerts (if not most likely a browser cache issue - or get in touch)\n\nTesting slow SQL tracing:\n\nOpen admin console at http://localhost:4848/\nnavigate to Resources => JDBC => JDBC Connection Pools\nselect H2Pool tab Advanced\nchange Slow Query Log Threshold from -1 (disabled) to 0.001 (1ms)\nopen page SQL in MC\ndeploy e.g. https://github.com/javaee/tutorial-examples/tree/master/persistence/order (some app using the default pool)\ndeployment should already cause alert(s) and annotations being shown on the SQL page.\nuse the order app some and see how \"slow\" queries cause alerts and SQL is available in the table on SQL page\n\nNOTE: the order app causes errors during deploy on server restart. Undeploy the app and redeploy with server running. AFAIK this is a shortcoming of the app's setup/scripts.\nTesting Request Tracing (again):\n\nOpen admin console at http://localhost:4848/\nnavigate to Configurations => server-config => Request Tracing\ncheck Enabled\nset Target Count to 2, Time Value to 20, Time Unit to SECONDS\nset Threshold Value to somewhere between 5 to 20, Threshold Unit to MILLISECONDS\nsave changes\nopen MC Request Tracing page. The polling of MC itself should be enough to cause some data to appear in the widgets\n\nTesting Health Checks (again):\n\nOpen admin console at http://localhost:4848/\nnavigate to Configurations => server-config => HealthCheck\nopen tab CPU Usage , check Enabled and save changes\neventually open other tabs to enable more checks, the Enabled checkbox on General tab does not have to be checked.\nopen Health Checks page in MC and check that the graphs for the enabled checks do show data and thresholds\ngo back to admin console configuration and change a threshold, e.g. heap usage to a level that is in between the low and high point currently present for your GC cycle (see graph).\ncheck that changed threshold is updated in graph and that alerts are caused when heap usage is exceeded (note that the alert condition requires the threshold to be exceeded for average of last 15 points)\n\nFurther things in MC to test (again)\n\ncreate a new page, name it, add some widgets, remove some widgets\nreset preset pages after changes\nchange settings of widgets\nchange colour scheme\nclear local storage for the page and reload the page (full reset or client side settings)", "createdAt": "2020-01-10T16:50:14Z", "url": "https://github.com/payara/Payara/pull/4422", "merged": true, "mergeCommit": {"oid": "fe00e887075fe0265a176fc37e9dd0557442c2ed"}, "closed": true, "closedAt": "2020-01-22T15:38:48Z", "author": {"login": "jbee"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4Vyb3gH2gAyMzYxNTM1ODIzOjhkZjMyNGQ4MGIwZmU2NWRiYTU5NmIwYzJmZmEwYWUxYmNlODg5YmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb83hnigFqTM0NjY3OTM0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8df324d80b0fe65dba596b0c2ffa0ae1bce889bf", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/8df324d80b0fe65dba596b0c2ffa0ae1bce889bf", "committedDate": "2020-01-08T13:57:47Z", "message": "APPSERV-14 slow SQL monitoring (incomplete)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f62cb4142a146841f13f8ae60fe2f8bdbc412adb", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/f62cb4142a146841f13f8ae60fe2f8bdbc412adb", "committedDate": "2020-01-08T14:14:23Z", "message": "Merge branch 'master' into APPSERV-14-slow-sql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a511309c055af6cfe3bdbe4c253f83c69c9317ec", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/a511309c055af6cfe3bdbe4c253f83c69c9317ec", "committedDate": "2020-01-08T14:42:53Z", "message": "APPSERV-14 reverts changes to JdbcResourcesUtil.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7119b70021a5a9ab314560c69be185050b018689", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/7119b70021a5a9ab314560c69be185050b018689", "committedDate": "2020-01-08T15:02:18Z", "message": "APPSERV-11 APPSERV-14 fixed NPE when health check options are not initialised yet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1908a9d3d10df0fe6ae3d4d0ae8909b3a48046df", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/1908a9d3d10df0fe6ae3d4d0ae8909b3a48046df", "committedDate": "2020-01-08T15:08:18Z", "message": "APPSERV-11 APPSERV-14 fixed NPE when health check options are not initialised yet (2)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ab11c5459c3cd0aaa8647e8da0fcf9dc14accd", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/d2ab11c5459c3cd0aaa8647e8da0fcf9dc14accd", "committedDate": "2020-01-09T15:04:03Z", "message": "APPSERV-14 SQL max execution time metric and watch per pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0161e41f753578d5b657851b1bc1ace4ecee248a", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/0161e41f753578d5b657851b1bc1ace4ecee248a", "committedDate": "2020-01-10T13:58:21Z", "message": "APPSERV-14 adds annotations to server and webapp API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a188f9a9c6325d577ad1ddd5abcf2b065b2a25ea", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/a188f9a9c6325d577ad1ddd5abcf2b065b2a25ea", "committedDate": "2020-01-10T15:39:18Z", "message": "APPSERV-14 show all watches and decoration as background area"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c50a42f30dae7286de08e7b7fa477ec52fe485af", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/c50a42f30dae7286de08e7b7fa477ec52fe485af", "committedDate": "2020-01-10T15:49:14Z", "message": "APPSERV-14 fixed gradient background for background areas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e67faaf9f175cd4ae900a8a3a3768ccb58700b3", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/3e67faaf9f175cd4ae900a8a3a3768ccb58700b3", "committedDate": "2020-01-10T16:48:41Z", "message": "APPSERV-14 fixed background area gradient-line alignment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26c6ccd52f46aaf99154273c75bf359f8be947cd", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/26c6ccd52f46aaf99154273c75bf359f8be947cd", "committedDate": "2020-01-13T09:27:38Z", "message": "APPSERV-14 extends alert condition logic and fixes condition formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc1b94161d772ca0b5c303d0e704e55b308347c7", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/cc1b94161d772ca0b5c303d0e704e55b308347c7", "committedDate": "2020-01-13T10:53:46Z", "message": "APPSERV-14 series tag name wildcards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbad554175b88d9ae50460aebfd225bf9fdbea1c", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/bbad554175b88d9ae50460aebfd225bf9fdbea1c", "committedDate": "2020-01-13T11:13:28Z", "message": "APPSERV-14 fixed series tag name wild-cards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7308b6fcd3f65433c4bd5c37503835a8b12d2279", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/7308b6fcd3f65433c4bd5c37503835a8b12d2279", "committedDate": "2020-01-13T14:07:36Z", "message": "APPSERV-14 completes annotations in alert tables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd038ee4a2d1870b121da8a79bba34c91c167050", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/bd038ee4a2d1870b121da8a79bba34c91c167050", "committedDate": "2020-01-13T17:35:47Z", "message": "APPSERV-14 alarm annotations via AnnotationTable component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0044aa4522a6ebb5116f80488d78c9e232774be2", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/0044aa4522a6ebb5116f80488d78c9e232774be2", "committedDate": "2020-01-14T10:16:46Z", "message": "APPSERV-14 annotation fields setting; fixed: alert starts ends on cause data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24dc17abf03cc89e6ae4d4a88c1b2fe5e7a23c4d", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/24dc17abf03cc89e6ae4d4a88c1b2fe5e7a23c4d", "committedDate": "2020-01-14T12:24:32Z", "message": "APPSERV-14 basic annotations table widget type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbfddf3e9e1c9ba32cd4aba0880a7d49a42c424d", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/fbfddf3e9e1c9ba32cd4aba0880a7d49a42c424d", "committedDate": "2020-01-14T14:38:05Z", "message": "APPSERV-14 annotation list and table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "415ad98655bd0f172f14eaca22907ffff4beb243", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/415ad98655bd0f172f14eaca22907ffff4beb243", "committedDate": "2020-01-14T14:53:42Z", "message": "APPSERV-14 fixed: do not show alerts for widget type annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9c0a648780badcb5388a3eeb7d5a911e994fc79", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/c9c0a648780badcb5388a3eeb7d5a911e994fc79", "committedDate": "2020-01-14T15:11:27Z", "message": "APPSERV-14 fixed CSS for annotation table font size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1204fa84161fa42a375a281683f58212f28ab93", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/d1204fa84161fa42a375a281683f58212f28ab93", "committedDate": "2020-01-14T17:02:06Z", "message": "APPSERV-14 adds widgets unique ids on page; adds SQL page preset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da0b1adc9eefdb5d839f73d4c71f131b3948f76d", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/da0b1adc9eefdb5d839f73d4c71f131b3948f76d", "committedDate": "2020-01-14T18:49:19Z", "message": "APPSERV-14 SQL page details and styling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6031a5fd587239251c5be596fa2fb6dd49cf609", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/b6031a5fd587239251c5be596fa2fb6dd49cf609", "committedDate": "2020-01-15T10:18:15Z", "message": "APPSERV-14 restrict client-server data exchange to needed data for widget type; add instance coloring to annotation table with widget type specific legend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "029bd9f837ac1a73cca7a3daeabac89a9d567d4c", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/029bd9f837ac1a73cca7a3daeabac89a9d567d4c", "committedDate": "2020-01-15T13:22:41Z", "message": "APPSERV-14 adds request tracing watch and annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d0fb4ab37c09c01523a2335bd9446f813f462e0", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/7d0fb4ab37c09c01523a2335bd9446f813f462e0", "committedDate": "2020-01-15T13:51:13Z", "message": "APPSERV-14 scroll vertical when alerts or annotations list overflows; adds Alerts page preset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03d32de4a514175520af8a012617605d1e3d8626", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/03d32de4a514175520af8a012617605d1e3d8626", "committedDate": "2020-01-15T14:31:59Z", "message": "APPSERV-14 fixes request tracing metric clears alerts properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15a6300ecd360ddd22abdbbcfea28a42c4a3759e", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/15a6300ecd360ddd22abdbbcfea28a42c4a3759e", "committedDate": "2020-01-15T14:32:30Z", "message": "APPSERV-14 adds coloring dependent legend for annotation tables and lists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac417d7d91ac2424fa09417cc0064ace27ec94c8", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/ac417d7d91ac2424fa09417cc0064ace27ec94c8", "committedDate": "2020-01-15T17:04:54Z", "message": "APPSERV-14 adds alert frame compaction; fixes annotation widget legend for undefined coloring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "committedDate": "2020-01-17T10:50:51Z", "message": "Merge branch 'master' into APPSERV-14-slow-sql"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTAyMjY5", "url": "https://github.com/payara/Payara/pull/4422#pullrequestreview-344502269", "createdAt": "2020-01-17T10:54:32Z", "commit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDo1NDozMlrOFe1fDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDo1NDozMlrOFe1fDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3NzkwMg==", "bodyText": "NB. This was not needed and even could cause outdated threshold to be used as listeners installed will not be replaced when a listener of same class is attempted to be installed again (which would happen later when a connection is created).", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367877902", "createdAt": "2020-01-17T10:54:32Z", "author": {"login": "jbee"}, "path": "appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/com/sun/gjc/spi/ManagedConnectionFactoryImpl.java", "diffHunk": "@@ -1199,22 +1197,21 @@ public void setSqlTraceListeners(String sqlTraceListeners) {\n             detectSqlTraceListeners();\n         }\n     }\n-    \n+\n     public void setSlowQueryThresholdInSeconds(String seconds) {\n         spec.setDetail(DataSourceSpec.SLOWSQLLOGTHRESHOLD, seconds);\n         double threshold = Double.parseDouble(seconds);\n         if (threshold > 0) {\n             if (sqlTraceDelegator == null) {\n                 sqlTraceDelegator = new SQLTraceDelegator(getPoolName(), getApplicationName(), getModuleName());\n             }\n-            sqlTraceDelegator.registerSQLTraceListener(new SlowSQLLogger((long)(threshold * 1000), TimeUnit.MILLISECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTA0NjY2", "url": "https://github.com/payara/Payara/pull/4422#pullrequestreview-344504666", "createdAt": "2020-01-17T10:58:57Z", "commit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDo1ODo1N1rOFe1myA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDo1ODo1N1rOFe1myA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3OTg4MA==", "bodyText": "NB. isSlowQueryLoggingEnabled includes the null check.", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367879880", "createdAt": "2020-01-17T10:58:57Z", "author": {"login": "jbee"}, "path": "appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/com/sun/gjc/spi/ManagedConnectionImpl.java", "diffHunk": "@@ -506,7 +511,7 @@ public Object getConnection(Subject sub, javax.resource.spi.ConnectionRequestInf\n         \n         if (sqlTraceDelegator == null) {\n             if ((requestTracing != null && requestTracing.isRequestTracingEnabled())\n-                    || (connectionPool != null && isSlowQueryLoggingEnabled())) {\n+                    || (isSlowQueryLoggingEnabled())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTA1OTE4", "url": "https://github.com/payara/Payara/pull/4422#pullrequestreview-344505918", "createdAt": "2020-01-17T11:01:16Z", "commit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTowMToxNlrOFe1rHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTowMToxNlrOFe1rHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MDk4OQ==", "bodyText": "NB. Sadly this cannot share code with SQLTraceLogger which does almost the same as this has to be its own thread local otherwise the manipulation of the query happens multiple times if both listeners are installed which messes up the query.", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367880989", "createdAt": "2020-01-17T11:01:16Z", "author": {"login": "jbee"}, "path": "appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n+ * or packager/legal/LICENSE.txt.  See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at packager/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * Oracle designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by Oracle in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.jdbc;\n+\n+import org.glassfish.api.jdbc.SQLTraceListener;\n+import org.glassfish.api.jdbc.SQLTraceRecord;\n+import org.glassfish.api.jdbc.SQLTraceStore;\n+import org.glassfish.internal.api.Globals;\n+\n+/**\n+ * An adapter between the {@link SQLTraceListener} abstraction that is registered with implementation class as key and a\n+ * managed instance of the {@link SQLTraceStore}.\n+ * \n+ * @author Jan Bernitt\n+ */\n+public class SQLTraceStoreAdapter implements SQLTraceListener {\n+\n+    private static ThreadLocal<SQLQuery> currentQuery = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTA3Mzg4", "url": "https://github.com/payara/Payara/pull/4422#pullrequestreview-344507388", "createdAt": "2020-01-17T11:03:55Z", "commit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTowMzo1NVrOFe1wHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTowMzo1NVrOFe1wHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MjI2OA==", "bodyText": "NB. Most interesting part is the class location. It had to be in a module that supports HK2 stuff and which ideally already depends on modules dealing with SQL tracing.", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367882268", "createdAt": "2020-01-17T11:03:55Z", "author": {"login": "jbee"}, "path": "appserver/jdbc/jdbc-runtime/src/main/java/fish/payara/jdbc/SQLTraceStoreImpl.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n+ * or packager/legal/LICENSE.txt.  See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at packager/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * Oracle designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by Oracle in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.jdbc;\n+\n+import static java.lang.Double.parseDouble;\n+import static java.lang.Math.round;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.glassfish.api.jdbc.SQLTraceRecord;\n+import org.glassfish.api.jdbc.SQLTraceStore;\n+import org.glassfish.jdbc.config.JdbcConnectionPool;\n+import org.jvnet.hk2.annotations.Service;\n+\n+import com.sun.appserv.connectors.internal.api.ConnectorsUtil;\n+import com.sun.enterprise.config.serverbeans.Domain;\n+import com.sun.enterprise.config.serverbeans.ResourcePool;\n+\n+import fish.payara.monitoring.collect.MonitoringData;\n+import fish.payara.monitoring.collect.MonitoringDataCollector;\n+import fish.payara.monitoring.collect.MonitoringDataSource;\n+import fish.payara.monitoring.collect.MonitoringWatchCollector;\n+import fish.payara.monitoring.collect.MonitoringWatchSource;\n+\n+@Service\n+@Singleton\n+public class SQLTraceStoreImpl implements SQLTraceStore, MonitoringDataSource, MonitoringWatchSource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTA4ODE1", "url": "https://github.com/payara/Payara/pull/4422#pullrequestreview-344508815", "createdAt": "2020-01-17T11:06:46Z", "commit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTowNjo0NlrOFe10jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTowNjo0NlrOFe10jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MzQwNg==", "bodyText": "NB. The watch for a metric provided by InMemoryMonitoringDataRepository had to be added here as this would otherwise cause a cyclic dependency between the two.", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367883406", "createdAt": "2020-01-17T11:06:46Z", "author": {"login": "jbee"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/store/InMemoryAlarmService.java", "diffHunk": "@@ -108,11 +108,14 @@\n     public void init() {\n         isDas = serverEnv.isDas();\n         changedConfig(parseBoolean(serverConfig.getMonitoringService().getMonitoringEnabled()));\n-        Watch watch = new Watch(\"Metric Collection Duration\", new Metric(new Series(\"ns:monitoring CollectionDuration\")))\n-                .red(800L, 3, true, 800L, 5, false)\n-                .amber(600L, 3, true, 600L, 5, false)\n-                .green(-400L, 1, false, null, null, false);\n-        addWatch(watch);\n+        addWatch(new Watch(\"Metric Collection Duration\", new Metric(new Series(\"ns:monitoring CollectionDuration\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTEwMzM5", "url": "https://github.com/payara/Payara/pull/4422#pullrequestreview-344510339", "createdAt": "2020-01-17T11:09:56Z", "commit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTowOTo1NlrOFe15Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTowOTo1NlrOFe15Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDU3NQ==", "bodyText": "NB. Initially I thought evaluating alerts every two seconds is good enough. While this is true in general this does allow to miss value spikes that should cause an alert in case of most basic condition that only looks at the latest value. So it was changed to 1 second to make sure each value is considered.", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367884575", "createdAt": "2020-01-17T11:09:56Z", "author": {"login": "jbee"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/store/InMemoryAlarmService.java", "diffHunk": "@@ -123,12 +126,12 @@ void changedConfig(boolean enabled) {\n         if (!enabled) {\n             checker.stop();\n         } else {\n-            checker.start(executor, 2, SECONDS, this::checkWatches);\n+            checker.start(executor, 1, SECONDS, this::checkWatches);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTEzMzEy", "url": "https://github.com/payara/Payara/pull/4422#pullrequestreview-344513312", "createdAt": "2020-01-17T11:16:15Z", "commit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxNjoxNlrOFe2CHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxNjoxNlrOFe2CHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4Njg3Nw==", "bodyText": "NB. Main reason this interface is needed is because of module dependencies.", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367886877", "createdAt": "2020-01-17T11:16:16Z", "author": {"login": "jbee"}, "path": "nucleus/common/glassfish-api/src/main/java/org/glassfish/api/jdbc/SQLTraceStore.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n+ * or packager/legal/LICENSE.txt.  See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at packager/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * Oracle designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by Oracle in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package org.glassfish.api.jdbc;\n+\n+import org.jvnet.hk2.annotations.Contract;\n+\n+@Contract\n+public interface SQLTraceStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTE0Nzc4", "url": "https://github.com/payara/Payara/pull/4422#pullrequestreview-344514778", "createdAt": "2020-01-17T11:19:14Z", "commit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxOToxNFrOFe2GeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToxOToxNFrOFe2GeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4Nzk5Mg==", "bodyText": "NB. It was a bug to not return this for any of the methods of MonitoringDataCollector because when the instance is used with chaining it should be the wrapper that is called (so it does its prefix thing), not the instance returned by self (that would not do the prefix thing). In practice this bug never had an effect as the only usage would not use chaining but for future this now works properly.", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367887992", "createdAt": "2020-01-17T11:19:14Z", "author": {"login": "jbee"}, "path": "nucleus/common/internal-api/src/main/java/fish/payara/monitoring/collect/MonitoringDataCollector.java", "diffHunk": "@@ -88,14 +109,26 @@ default MonitoringDataCollector prefix(CharSequence prefix) {\n         MonitoringDataCollector self = this;\n         return new MonitoringDataCollector() {\n \n+            StringBuilder prefixed = new StringBuilder(prefix);\n+\n             @Override\n             public MonitoringDataCollector tag(CharSequence name, CharSequence value) {\n-                return self.tag(name, value);\n+                self.tag(name, value);\n+                return this;\n+            }\n+\n+            @Override\n+            public MonitoringDataCollector collect(CharSequence metric, long value) {\n+                prefixed.setLength(prefix.length());\n+                self.collect(prefixed.append(metric), value);\n+                return this;\n             }\n \n             @Override\n-            public MonitoringDataCollector collect(CharSequence key, long value) {\n-                return self.collect(new StringBuilder(prefix).append(key), value);\n+            public MonitoringDataCollector annotate(CharSequence metric, long value, String... attrs) {\n+                prefixed.setLength(prefix.length());\n+                self.annotate(prefixed.append(metric), value, attrs);\n+                return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTE1MzIz", "url": "https://github.com/payara/Payara/pull/4422#pullrequestreview-344515323", "createdAt": "2020-01-17T11:20:20Z", "commit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToyMDoyMFrOFe2ILQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToyMDoyMFrOFe2ILQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4ODQyOQ==", "bodyText": "NB. 10 turned out to be too flaky so I increased it.", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367888429", "createdAt": "2020-01-17T11:20:20Z", "author": {"login": "jbee"}, "path": "nucleus/payara-modules/healthcheck-core/src/main/java/fish/payara/nucleus/healthcheck/preliminary/HeapMemoryUsageHealthCheck.java", "diffHunk": "@@ -102,7 +102,7 @@ private static MemoryUsage getMemoryUsage() {\n \n     @Override\n     public void collect(MonitoringWatchCollector collector) {\n-        collectUsage(collector, \"ns:health HeapUsage\", \"Heap Usage\", 10, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTUzMTMx", "url": "https://github.com/payara/Payara/pull/4422#pullrequestreview-344553131", "createdAt": "2020-01-17T12:42:32Z", "commit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMjo0MjozMlrOFe34Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0Mzo1NVrOFe-3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNzA5MQ==", "bodyText": "Might be worth adding a simplified version of this comment to the code", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367917091", "createdAt": "2020-01-17T12:42:32Z", "author": {"login": "Pandrex247"}, "path": "appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n+ * or packager/legal/LICENSE.txt.  See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at packager/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * Oracle designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by Oracle in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.jdbc;\n+\n+import org.glassfish.api.jdbc.SQLTraceListener;\n+import org.glassfish.api.jdbc.SQLTraceRecord;\n+import org.glassfish.api.jdbc.SQLTraceStore;\n+import org.glassfish.internal.api.Globals;\n+\n+/**\n+ * An adapter between the {@link SQLTraceListener} abstraction that is registered with implementation class as key and a\n+ * managed instance of the {@link SQLTraceStore}.\n+ * \n+ * @author Jan Bernitt\n+ */\n+public class SQLTraceStoreAdapter implements SQLTraceListener {\n+\n+    private static ThreadLocal<SQLQuery> currentQuery = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MDk4OQ=="}, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNzU5Nw==", "bodyText": "Minor point: this comment seems to be floating in space a bit", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367917597", "createdAt": "2020-01-17T12:44:00Z", "author": {"login": "Pandrex247"}, "path": "appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n+ * or packager/legal/LICENSE.txt.  See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at packager/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * Oracle designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by Oracle in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.jdbc;\n+\n+import org.glassfish.api.jdbc.SQLTraceListener;\n+import org.glassfish.api.jdbc.SQLTraceRecord;\n+import org.glassfish.api.jdbc.SQLTraceStore;\n+import org.glassfish.internal.api.Globals;\n+\n+/**\n+ * An adapter between the {@link SQLTraceListener} abstraction that is registered with implementation class as key and a\n+ * managed instance of the {@link SQLTraceStore}.\n+ * \n+ * @author Jan Bernitt\n+ */\n+public class SQLTraceStoreAdapter implements SQLTraceListener {\n+\n+    private static ThreadLocal<SQLQuery> currentQuery = new ThreadLocal<>();\n+\n+    private final SQLTraceStore store;\n+\n+    public SQLTraceStoreAdapter() {\n+        this.store = Globals.getDefaultHabitat().getService(SQLTraceStore.class);\n+    }\n+\n+    @Override\n+    public void sqlTrace(SQLTraceRecord record) {\n+        if (record != null) {    \n+            switch (record.getMethodName()) {\n+\n+            // these calls capture a query string\n+            case \"nativeSQL\":\n+            case \"prepareCall\":\n+            case \"prepareStatement\":\n+            case \"addBatch\":\n+            {\n+                // acquire the SQL\n+                SQLQuery query = currentQuery.get();\n+                if (query == null) {\n+                    query = new SQLQuery();\n+                    currentQuery.set(query);\n+                }  \n+                if (record.getParams() != null && record.getParams().length > 0)\n+                    query.addSQL((String)record.getParams()[0]);\n+                break;\n+            }\n+            case \"execute\":\n+            case \"executeQuery\":\n+            case \"executeUpdate\":\n+            {\n+                // acquire the SQL\n+                SQLQuery query = currentQuery.get();\n+                if (query == null) {\n+                    query = new SQLQuery();\n+                    currentQuery.set(query);\n+                }                      // these can all run the SQL and contain SQL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTAzOQ==", "bodyText": "Personally I prefer Bean style: private fields with getters & setters.", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368021039", "createdAt": "2020-01-17T16:22:37Z", "author": {"login": "Pandrex247"}, "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.monitoring.model;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n+/**\n+ * An {@link SeriesAnnotation} is meta data linked to a {@link SeriesDataset} by having the same {@link Series} and\n+ * {@link #instance} and pointing to a {@link #time} that is in the range of {@link SeriesDataset}.\n+ * \n+ * The meta data attached is a list of key-value pairs.\n+ * \n+ * @author Jan Bernitt\n+ * @since 5.201\n+ */\n+public final class SeriesAnnotation implements Serializable {\n+\n+    public final long time;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNzE3MQ==", "bodyText": "Reason there is for Yoda-style? <(\u00b0.\u00b0)>", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368027171", "createdAt": "2020-01-17T16:34:47Z", "author": {"login": "Pandrex247"}, "path": "nucleus/payara-modules/requesttracing-core/src/main/java/fish/payara/nucleus/requesttracing/RequestTracingService.java", "diffHunk": "@@ -563,26 +574,70 @@ public RequestTraceStoreInterface getRequestTraceStore() {\n     }\n \n     @Override\n-    public void collect(MonitoringDataCollector rootCollector) {\n-        MonitoringDataCollector tracingCollector = rootCollector.in(\"trace\");\n+    public void collect(MonitoringWatchCollector collector) {\n+        if (\"true\".equals(configuration.getEnabled())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMTU4Mg==", "bodyText": "\ud83d\udc4c", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368031582", "createdAt": "2020-01-17T16:43:55Z", "author": {"login": "Pandrex247"}, "path": "appserver/monitoring-console/webapp/JS_DOCS.md", "diffHunk": "@@ -267,7 +316,7 @@ Mandatory members of `ENTRY` depend on `type` member. Variants are:\n 'text'     : { label, value, onChange }\n 'color'    : { label, value, defaultValue, onChange }\n ```\n-* `onChange` may be ommitted for _text_ inputs which makes the field _readonly_.\n+* `onChange` may be omitted for _text_ inputs which makes the field _readonly_.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49da5fa161f554f50678104dec3a121fe4125ebb", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/49da5fa161f554f50678104dec3a121fe4125ebb", "committedDate": "2020-01-22T12:15:22Z", "message": "APPSERV-14 addressed Andrew's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46aaca97fbcec018ec1f16f05121f2b47a0e0fba", "author": {"user": {"login": "jbee", "name": "Jan Bernitt"}}, "url": "https://github.com/payara/Payara/commit/46aaca97fbcec018ec1f16f05121f2b47a0e0fba", "committedDate": "2020-01-22T13:06:47Z", "message": "APPSERV-14 fixed possible memory leak in case monitoring is disabled"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Njc5MzQz", "url": "https://github.com/payara/Payara/pull/4422#pullrequestreview-346679343", "createdAt": "2020-01-22T15:31:53Z", "commit": {"oid": "46aaca97fbcec018ec1f16f05121f2b47a0e0fba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 832, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}