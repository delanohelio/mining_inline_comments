{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMzg3ODA0", "number": 4078, "title": "NXP-29103: explorer bundle groups review", "bodyText": "T&P running at https://qa.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-atchertchian-master/231/\nNote that with the group introspection logics change, some new subgroups appear nicely imho: besides the apidoc one, some are subgroups of \"org.nuxeo.ecm.core\", typically  \"org.nuxeo.ecm.core.storage\".\nBut a spurious new bundle subgroup \"org.nuxeo.ecm.platform.routing\" appears as subgroup of \"org.nuxeo.ecm.routing\" and might not seem ideal, so i could blacklist it too (to be discussed).\n\n\"org.nuxeo.ecm.routing\" contains bundle \"org.nuxeo.ecm.platform.restapi.server.routing\"\n\"org.nuxeo.ecm.platform.routing\" contains bundles \"org.nuxeo.ecm.platform.routing.api\", \"org.nuxeo.ecm.platform.routing.core\", org.nuxeo.ecm.platform.routing.default\".", "createdAt": "2020-05-26T18:47:07Z", "url": "https://github.com/nuxeo/nuxeo/pull/4078", "merged": true, "mergeCommit": {"oid": "6e06b29a820f42a156acb0b012b9dbbf71cc4a38"}, "closed": true, "closedAt": "2020-05-29T15:22:30Z", "author": {"login": "atchertchian"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclUUfpAFqTQxODkzMzMzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmEF_VAFqTQyMTA1MzM1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTMzMzMz", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-418933333", "createdAt": "2020-05-27T07:41:45Z", "commit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0MTo0NVrOGa9JYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0MTo0NVrOGa9JYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNzk4Ng==", "bodyText": "This was < 2 in the original code, is there really a need to change this and do a split if size is 1?", "url": "https://github.com/nuxeo/nuxeo/pull/4078#discussion_r430917986", "createdAt": "2020-05-27T07:41:45Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/api/BundleGroupExtractor.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.api;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.apidoc.introspection.BundleGroupImpl;\n+import org.nuxeo.apidoc.introspection.BundleInfoImpl;\n+\n+/**\n+ * Introspects maven groupId and artifactId to generate bundle groups for Nuxeo modules.\n+ *\n+ * @since 11.1\n+ */\n+public class BundleGroupExtractor {\n+\n+    private static final Logger log = LogManager.getLogger(BundleGroupExtractor.class);\n+\n+    protected final Map<String, BundleInfo> bundles;\n+\n+    protected final String version;\n+\n+    protected final Map<String, List<String>> mavenGroups = new HashMap<>();\n+\n+    protected final Map<String, List<String>> mavenSubGroups = new HashMap<>();\n+\n+    protected final List<BundleGroup> roots = new ArrayList<>();\n+\n+    protected final Map<String, BundleGroup> groups = new LinkedHashMap<>();\n+\n+    public static final String VIRTUAL_BUNDLE_GROUP = BundleGroup.PREFIX + \"org.nuxeo.misc\";\n+\n+    protected static final List<String> BLACKLIST_SUFFIX = List.of(\"test\", \"tests\");\n+\n+    protected static final List<String> BLACKLIST = List.of(\"org\", \"org.nuxeo\", \"org.nuxeo.ecm\",\n+            \"org.nuxeo.ecm.platform\", \"com\", \"com.nuxeo\");\n+\n+    public BundleGroupExtractor(Map<String, BundleInfo> bundles, String version) {\n+        this.bundles = bundles;\n+        this.version = version;\n+        for (BundleInfo bundle : bundles.values()) {\n+            registerBundle(bundle);\n+        }\n+        generateGroups(version);\n+    }\n+\n+    public List<BundleGroup> getRoots() {\n+        return Collections.unmodifiableList(\n+                roots.stream().sorted(new NuxeoArtifactComparator()).collect(Collectors.toList()));\n+    }\n+\n+    public Map<String, BundleGroup> getGroups() {\n+        return Collections.unmodifiableMap(groups);\n+    }\n+\n+    protected void registerBundle(BundleInfo bundle) {\n+        String groupId = bundle.getGroupId();\n+        if (groupId != null) {\n+            groupId = BundleGroup.PREFIX + groupId;\n+        }\n+        String artifactId = bundle.getArtifactId();\n+        if (groupId == null || artifactId == null) {\n+            groupId = VIRTUAL_BUNDLE_GROUP;\n+            ((BundleInfoImpl) bundle).setGroupId(groupId);\n+        }\n+        if (!mavenGroups.containsKey(groupId)) {\n+            mavenGroups.put(groupId, new ArrayList<String>());\n+        }\n+        mavenGroups.get(groupId).add(bundle.getId());\n+    }\n+\n+    protected void generateGroups(String version) {\n+        // post process bundle groups\n+        List<String> mvnGroupNames = new ArrayList<>();\n+        mvnGroupNames.addAll(mavenGroups.keySet());\n+\n+        for (String mvnGroupName : mvnGroupNames) {\n+            List<String> artifactIds = mavenGroups.get(mvnGroupName);\n+            Collections.sort(artifactIds);\n+            Set<String> subGroups = new LinkedHashSet<>();\n+            for (String id : artifactIds) {\n+                if (id.contains(\".\")) {\n+                    String suffix = id.substring(id.lastIndexOf(\".\") + 1);\n+                    if (BLACKLIST_SUFFIX.contains(suffix.toLowerCase())) {\n+                        continue;\n+                    }\n+                    String grpName = id.substring(0, id.lastIndexOf(\".\"));\n+                    String grp = BundleGroup.PREFIX + grpName;\n+                    if (grp.equals(mvnGroupName) || BLACKLIST.contains(grpName.toLowerCase())) {\n+                        continue;\n+                    }\n+                    subGroups.add(grp);\n+                }\n+            }\n+            if (subGroups.size() < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTMzODU1", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-418933855", "createdAt": "2020-05-27T07:42:28Z", "commit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0MjoyOVrOGa9K-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0MjoyOVrOGa9K-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxODM5Mg==", "bodyText": "protected static class", "url": "https://github.com/nuxeo/nuxeo/pull/4078#discussion_r430918392", "createdAt": "2020-05-27T07:42:29Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/test/java/org/nuxeo/apidoc/core/test/TestBundleGroupExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Test;\n+import org.nuxeo.apidoc.api.BundleGroup;\n+import org.nuxeo.apidoc.api.BundleGroupExtractor;\n+import org.nuxeo.apidoc.api.BundleInfo;\n+import org.nuxeo.apidoc.introspection.BundleInfoImpl;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestBundleGroupExtractor {\n+\n+    class MockBundle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTM0MDM4", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-418934038", "createdAt": "2020-05-27T07:42:42Z", "commit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0Mjo0MlrOGa9Ljw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0Mjo0MlrOGa9Ljw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxODU0Mw==", "bodyText": "protected fields", "url": "https://github.com/nuxeo/nuxeo/pull/4078#discussion_r430918543", "createdAt": "2020-05-27T07:42:42Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/test/java/org/nuxeo/apidoc/core/test/TestBundleGroupExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Test;\n+import org.nuxeo.apidoc.api.BundleGroup;\n+import org.nuxeo.apidoc.api.BundleGroupExtractor;\n+import org.nuxeo.apidoc.api.BundleInfo;\n+import org.nuxeo.apidoc.introspection.BundleInfoImpl;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestBundleGroupExtractor {\n+\n+    class MockBundle {\n+\n+        String id;\n+\n+        String groupId;\n+\n+        String artifactId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTQ2NDQ5", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-418946449", "createdAt": "2020-05-27T07:59:57Z", "commit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo1OTo1N1rOGa9yag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo1OTo1N1rOGa9yag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyODQ5MA==", "bodyText": "You could use computeIfAbsent:\nmavenGroups.computeIfAbsent(groupId, k -> new ArrayList<>()).add(bundle.getId()));", "url": "https://github.com/nuxeo/nuxeo/pull/4078#discussion_r430928490", "createdAt": "2020-05-27T07:59:57Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/api/BundleGroupExtractor.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.api;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.apidoc.introspection.BundleGroupImpl;\n+import org.nuxeo.apidoc.introspection.BundleInfoImpl;\n+\n+/**\n+ * Introspects maven groupId and artifactId to generate bundle groups for Nuxeo modules.\n+ *\n+ * @since 11.1\n+ */\n+public class BundleGroupExtractor {\n+\n+    private static final Logger log = LogManager.getLogger(BundleGroupExtractor.class);\n+\n+    protected final Map<String, BundleInfo> bundles;\n+\n+    protected final String version;\n+\n+    protected final Map<String, List<String>> mavenGroups = new HashMap<>();\n+\n+    protected final Map<String, List<String>> mavenSubGroups = new HashMap<>();\n+\n+    protected final List<BundleGroup> roots = new ArrayList<>();\n+\n+    protected final Map<String, BundleGroup> groups = new LinkedHashMap<>();\n+\n+    public static final String VIRTUAL_BUNDLE_GROUP = BundleGroup.PREFIX + \"org.nuxeo.misc\";\n+\n+    protected static final List<String> BLACKLIST_SUFFIX = List.of(\"test\", \"tests\");\n+\n+    protected static final List<String> BLACKLIST = List.of(\"org\", \"org.nuxeo\", \"org.nuxeo.ecm\",\n+            \"org.nuxeo.ecm.platform\", \"com\", \"com.nuxeo\");\n+\n+    public BundleGroupExtractor(Map<String, BundleInfo> bundles, String version) {\n+        this.bundles = bundles;\n+        this.version = version;\n+        for (BundleInfo bundle : bundles.values()) {\n+            registerBundle(bundle);\n+        }\n+        generateGroups(version);\n+    }\n+\n+    public List<BundleGroup> getRoots() {\n+        return Collections.unmodifiableList(\n+                roots.stream().sorted(new NuxeoArtifactComparator()).collect(Collectors.toList()));\n+    }\n+\n+    public Map<String, BundleGroup> getGroups() {\n+        return Collections.unmodifiableMap(groups);\n+    }\n+\n+    protected void registerBundle(BundleInfo bundle) {\n+        String groupId = bundle.getGroupId();\n+        if (groupId != null) {\n+            groupId = BundleGroup.PREFIX + groupId;\n+        }\n+        String artifactId = bundle.getArtifactId();\n+        if (groupId == null || artifactId == null) {\n+            groupId = VIRTUAL_BUNDLE_GROUP;\n+            ((BundleInfoImpl) bundle).setGroupId(groupId);\n+        }\n+        if (!mavenGroups.containsKey(groupId)) {\n+            mavenGroups.put(groupId, new ArrayList<String>());\n+        }\n+        mavenGroups.get(groupId).add(bundle.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTc4MDcz", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-418978073", "createdAt": "2020-05-27T08:40:35Z", "commit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo0MDozNlrOGa_QOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo0MDozNlrOGa_QOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MjUwNQ==", "bodyText": "Could be\n    return parents.stream()\n                  .map(doc -> doc.getAdapter(BundleGroup.class))\n                  .filter(Objects::nonNull)\n                  .map(BundleGroup::getId)\n                  .collect(Collectors.toList());", "url": "https://github.com/nuxeo/nuxeo/pull/4078#discussion_r430952505", "createdAt": "2020-05-27T08:40:36Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BundleGroupDocAdapter.java", "diffHunk": "@@ -136,9 +137,23 @@ public String getArtifactType() {\n         return TYPE_NAME;\n     }\n \n+    @Override\n+    public BundleGroup getParentGroup() {\n+        return getCoreSession().getParentDocument(doc.getRef()).getAdapter(BundleGroup.class);\n+    }\n+\n     @Override\n     public List<String> getParentIds() {\n-        throw new UnsupportedOperationException();\n+        List<DocumentModel> parents = getCoreSession().getParentDocuments(doc.getRef());\n+        Collections.reverse(parents);\n+        List<String> res = new ArrayList<>();\n+        for (DocumentModel doc : parents) {\n+            BundleGroup bgroup = doc.getAdapter(BundleGroup.class);\n+            if (bgroup != null) {\n+                res.add(bgroup.getId());\n+            }\n+        }\n+        return res;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTc4NjQ0", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-418978644", "createdAt": "2020-05-27T08:41:19Z", "commit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo0MToxOVrOGa_R7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo0MToxOVrOGa_R7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1Mjk0Mw==", "bodyText": "Could be bundles.values().forEach(this::registerBundle)", "url": "https://github.com/nuxeo/nuxeo/pull/4078#discussion_r430952943", "createdAt": "2020-05-27T08:41:19Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/api/BundleGroupExtractor.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.api;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.apidoc.introspection.BundleGroupImpl;\n+import org.nuxeo.apidoc.introspection.BundleInfoImpl;\n+\n+/**\n+ * Introspects maven groupId and artifactId to generate bundle groups for Nuxeo modules.\n+ *\n+ * @since 11.1\n+ */\n+public class BundleGroupExtractor {\n+\n+    private static final Logger log = LogManager.getLogger(BundleGroupExtractor.class);\n+\n+    protected final Map<String, BundleInfo> bundles;\n+\n+    protected final String version;\n+\n+    protected final Map<String, List<String>> mavenGroups = new HashMap<>();\n+\n+    protected final Map<String, List<String>> mavenSubGroups = new HashMap<>();\n+\n+    protected final List<BundleGroup> roots = new ArrayList<>();\n+\n+    protected final Map<String, BundleGroup> groups = new LinkedHashMap<>();\n+\n+    public static final String VIRTUAL_BUNDLE_GROUP = BundleGroup.PREFIX + \"org.nuxeo.misc\";\n+\n+    protected static final List<String> BLACKLIST_SUFFIX = List.of(\"test\", \"tests\");\n+\n+    protected static final List<String> BLACKLIST = List.of(\"org\", \"org.nuxeo\", \"org.nuxeo.ecm\",\n+            \"org.nuxeo.ecm.platform\", \"com\", \"com.nuxeo\");\n+\n+    public BundleGroupExtractor(Map<String, BundleInfo> bundles, String version) {\n+        this.bundles = bundles;\n+        this.version = version;\n+        for (BundleInfo bundle : bundles.values()) {\n+            registerBundle(bundle);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTc5OTI4", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-418979928", "createdAt": "2020-05-27T08:42:55Z", "commit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo0Mjo1NVrOGa_Vug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODo0Mjo1NVrOGa_Vug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MzkxNA==", "bodyText": "Could be grpArtifactIds.forEach(artifactIds::remove)", "url": "https://github.com/nuxeo/nuxeo/pull/4078#discussion_r430953914", "createdAt": "2020-05-27T08:42:55Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/api/BundleGroupExtractor.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.api;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.apidoc.introspection.BundleGroupImpl;\n+import org.nuxeo.apidoc.introspection.BundleInfoImpl;\n+\n+/**\n+ * Introspects maven groupId and artifactId to generate bundle groups for Nuxeo modules.\n+ *\n+ * @since 11.1\n+ */\n+public class BundleGroupExtractor {\n+\n+    private static final Logger log = LogManager.getLogger(BundleGroupExtractor.class);\n+\n+    protected final Map<String, BundleInfo> bundles;\n+\n+    protected final String version;\n+\n+    protected final Map<String, List<String>> mavenGroups = new HashMap<>();\n+\n+    protected final Map<String, List<String>> mavenSubGroups = new HashMap<>();\n+\n+    protected final List<BundleGroup> roots = new ArrayList<>();\n+\n+    protected final Map<String, BundleGroup> groups = new LinkedHashMap<>();\n+\n+    public static final String VIRTUAL_BUNDLE_GROUP = BundleGroup.PREFIX + \"org.nuxeo.misc\";\n+\n+    protected static final List<String> BLACKLIST_SUFFIX = List.of(\"test\", \"tests\");\n+\n+    protected static final List<String> BLACKLIST = List.of(\"org\", \"org.nuxeo\", \"org.nuxeo.ecm\",\n+            \"org.nuxeo.ecm.platform\", \"com\", \"com.nuxeo\");\n+\n+    public BundleGroupExtractor(Map<String, BundleInfo> bundles, String version) {\n+        this.bundles = bundles;\n+        this.version = version;\n+        for (BundleInfo bundle : bundles.values()) {\n+            registerBundle(bundle);\n+        }\n+        generateGroups(version);\n+    }\n+\n+    public List<BundleGroup> getRoots() {\n+        return Collections.unmodifiableList(\n+                roots.stream().sorted(new NuxeoArtifactComparator()).collect(Collectors.toList()));\n+    }\n+\n+    public Map<String, BundleGroup> getGroups() {\n+        return Collections.unmodifiableMap(groups);\n+    }\n+\n+    protected void registerBundle(BundleInfo bundle) {\n+        String groupId = bundle.getGroupId();\n+        if (groupId != null) {\n+            groupId = BundleGroup.PREFIX + groupId;\n+        }\n+        String artifactId = bundle.getArtifactId();\n+        if (groupId == null || artifactId == null) {\n+            groupId = VIRTUAL_BUNDLE_GROUP;\n+            ((BundleInfoImpl) bundle).setGroupId(groupId);\n+        }\n+        if (!mavenGroups.containsKey(groupId)) {\n+            mavenGroups.put(groupId, new ArrayList<String>());\n+        }\n+        mavenGroups.get(groupId).add(bundle.getId());\n+    }\n+\n+    protected void generateGroups(String version) {\n+        // post process bundle groups\n+        List<String> mvnGroupNames = new ArrayList<>();\n+        mvnGroupNames.addAll(mavenGroups.keySet());\n+\n+        for (String mvnGroupName : mvnGroupNames) {\n+            List<String> artifactIds = mavenGroups.get(mvnGroupName);\n+            Collections.sort(artifactIds);\n+            Set<String> subGroups = new LinkedHashSet<>();\n+            for (String id : artifactIds) {\n+                if (id.contains(\".\")) {\n+                    String suffix = id.substring(id.lastIndexOf(\".\") + 1);\n+                    if (BLACKLIST_SUFFIX.contains(suffix.toLowerCase())) {\n+                        continue;\n+                    }\n+                    String grpName = id.substring(0, id.lastIndexOf(\".\"));\n+                    String grp = BundleGroup.PREFIX + grpName;\n+                    if (grp.equals(mvnGroupName) || BLACKLIST.contains(grpName.toLowerCase())) {\n+                        continue;\n+                    }\n+                    subGroups.add(grp);\n+                }\n+            }\n+            if (subGroups.size() < 1) {\n+                // no need to split the maven group into subGroups\n+            } else {\n+                for (String grp : subGroups) {\n+                    List<String> grpArtifactIds = new ArrayList<>();\n+                    for (String aid : artifactIds) {\n+                        if (aid.startsWith(grp) || (BundleGroup.PREFIX + aid).startsWith(grp)) {\n+                            grpArtifactIds.add(aid);\n+                        }\n+                    }\n+                    if (grpArtifactIds.size() > 1) {\n+                        for (String aid : grpArtifactIds) {\n+                            artifactIds.remove(aid);\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDIzMDA1", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-419023005", "createdAt": "2020-05-27T09:36:46Z", "commit": {"oid": "abf51fc350847842072da6841d5ded31ea3119e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTozNjo0NlrOGbBZXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTozNjo0NlrOGbBZXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4NzYxNA==", "bodyText": "should not have pushed this", "url": "https://github.com/nuxeo/nuxeo/pull/4078#discussion_r430987614", "createdAt": "2020-05-27T09:36:46Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/AbstractApidocTest.java", "diffHunk": "@@ -38,7 +38,7 @@\n public abstract class AbstractApidocTest {\n \n     // helper for quicker update when running tests locally\n-    public static final boolean UPDATE_REFERENCE_FILES_ON_FAILURE = false;\n+    public static final boolean UPDATE_REFERENCE_FILES_ON_FAILURE = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abf51fc350847842072da6841d5ded31ea3119e2"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76a883437b4b6b7abaaa17c87cd8eb5c29977680", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/76a883437b4b6b7abaaa17c87cd8eb5c29977680", "committedDate": "2020-05-26T18:32:38Z", "message": "NXP-29103: review bundle group display"}, "afterCommit": {"oid": "4f6e1fd4c0a51cf148d690216b38e4a210504c4a", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4f6e1fd4c0a51cf148d690216b38e4a210504c4a", "committedDate": "2020-05-27T10:16:43Z", "message": "NXP-29103: code cleanup (lambda feast)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f6e1fd4c0a51cf148d690216b38e4a210504c4a", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4f6e1fd4c0a51cf148d690216b38e4a210504c4a", "committedDate": "2020-05-27T10:16:43Z", "message": "NXP-29103: code cleanup (lambda feast)"}, "afterCommit": {"oid": "ddde734f6a969ca7eae95182201fbfb276abc1ad", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ddde734f6a969ca7eae95182201fbfb276abc1ad", "committedDate": "2020-05-27T14:44:52Z", "message": "NXP-29103: fix subgroup extraction logics for connect bundles use case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMDY5MjEx", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-420069211", "createdAt": "2020-05-28T12:45:31Z", "commit": {"oid": "ddde734f6a969ca7eae95182201fbfb276abc1ad"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMDU3MDg0", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-420057084", "createdAt": "2020-05-28T12:29:18Z", "commit": {"oid": "ddde734f6a969ca7eae95182201fbfb276abc1ad"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoyOToxOFrOGby1iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoyOToxOFrOGby1iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc5NzY0MA==", "bodyText": "Suggestion:\n        return docs.stream()\n                   .map(doc -> doc.getAdapter(BundleInfo.class))\n                   .filter(Objects::nonNull)\n                   .map(BundleInfo::getId)\n                   .filter(Predicate.isEqual(getId()))\n                   .collect(Collectors.toList());\nThe main difference is that getId is called only once, otherwise it is just style.", "url": "https://github.com/nuxeo/nuxeo/pull/4078#discussion_r431797640", "createdAt": "2020-05-28T12:29:18Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BundleGroupDocAdapter.java", "diffHunk": "@@ -81,16 +85,14 @@ public BundleGroupDocAdapter(DocumentModel doc) {\n \n     @Override\n     public List<String> getBundleIds() {\n-        List<String> bundles = new ArrayList<>();\n-        String query = QueryHelper.select(BundleInfo.TYPE_NAME, doc);\n-        DocumentModelList docs = getCoreSession().query(query + QueryHelper.ORDER_BY_POS);\n-        for (DocumentModel child : docs) {\n-            BundleInfo bi = child.getAdapter(BundleInfo.class);\n-            if (bi != null && !bi.getId().equals(getId())) {\n-                bundles.add(bi.getId());\n-            }\n-        }\n-        return bundles;\n+        String query = QueryHelper.select(BundleInfo.TYPE_NAME, doc, NXQL.ECM_POS);\n+        DocumentModelList docs = getCoreSession().query(query);\n+        return docs.stream()\n+                   .map(doc -> doc.getAdapter(BundleInfo.class))\n+                   .filter(Objects::nonNull)\n+                   .filter(b -> !b.getId().equals(getId()))\n+                   .map(BundleInfo::getId)\n+                   .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde734f6a969ca7eae95182201fbfb276abc1ad"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ddde734f6a969ca7eae95182201fbfb276abc1ad", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ddde734f6a969ca7eae95182201fbfb276abc1ad", "committedDate": "2020-05-27T14:44:52Z", "message": "NXP-29103: fix subgroup extraction logics for connect bundles use case"}, "afterCommit": {"oid": "67e202a9f3c0f2a25acac598a78cc01edf4c0946", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/67e202a9f3c0f2a25acac598a78cc01edf4c0946", "committedDate": "2020-05-28T13:51:01Z", "message": "NXP-29103: fix subgroup extraction logics for connect bundles use case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTMxNDI5", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-420131429", "createdAt": "2020-05-28T13:54:58Z", "commit": {"oid": "67e202a9f3c0f2a25acac598a78cc01edf4c0946"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "812bef53a69a3394cc11ad2db610d1fa15753cec", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/812bef53a69a3394cc11ad2db610d1fa15753cec", "committedDate": "2020-05-29T06:52:16Z", "message": "NXP-29103: revert test paths commited by mistake for NXP-28995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bebc64077e97e913d290676a602dc73263258ef2", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bebc64077e97e913d290676a602dc73263258ef2", "committedDate": "2020-05-29T06:52:16Z", "message": "NXP-29025: adjust legacy json export to operation chain fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f54189df67d5f1306d9717698fd8a3a538883fe5", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f54189df67d5f1306d9717698fd8a3a538883fe5", "committedDate": "2020-05-29T06:52:46Z", "message": "NXP-29103: fix explorer 'version' property on bundle group json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "914625dd971991047140eee32157fa23c4d559cf", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/914625dd971991047140eee32157fa23c4d559cf", "committedDate": "2020-05-29T06:54:58Z", "message": "NXP-29103: review bundle group json export"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93c9f39e41341547228b61acb2576c4c84e6ee68", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/93c9f39e41341547228b61acb2576c4c84e6ee68", "committedDate": "2020-05-29T06:55:00Z", "message": "NXP-29103: extract bundle group introspection, add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4fd255746337628e43419618033f9fdee361e24", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d4fd255746337628e43419618033f9fdee361e24", "committedDate": "2020-05-29T06:57:21Z", "message": "NXP-29103: review bundle group introspection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79bee44ceac24c2c3aee589285995ee2696e6ca8", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/79bee44ceac24c2c3aee589285995ee2696e6ca8", "committedDate": "2020-05-29T09:04:45Z", "message": "NXP-29103: review bundle group display"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079d004325461a83da63be2b7b5c33bdce1147cb", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/079d004325461a83da63be2b7b5c33bdce1147cb", "committedDate": "2020-05-29T09:34:44Z", "message": "NXP-29103: code cleanup (lambda feast)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1bffc7579063bdb7ad7782a98b3c96bc4386a99", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a1bffc7579063bdb7ad7782a98b3c96bc4386a99", "committedDate": "2020-05-29T09:34:44Z", "message": "NXP-29103: add connect bundles use case to higlight bundle group extraction issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9b59c5886e88215e21892ea5d1eabaa4f476bed", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c9b59c5886e88215e21892ea5d1eabaa4f476bed", "committedDate": "2020-05-29T09:34:44Z", "message": "NXP-29103: fix subgroup extraction logics for connect bundles use case"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67e202a9f3c0f2a25acac598a78cc01edf4c0946", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/67e202a9f3c0f2a25acac598a78cc01edf4c0946", "committedDate": "2020-05-28T13:51:01Z", "message": "NXP-29103: fix subgroup extraction logics for connect bundles use case"}, "afterCommit": {"oid": "c9b59c5886e88215e21892ea5d1eabaa4f476bed", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c9b59c5886e88215e21892ea5d1eabaa4f476bed", "committedDate": "2020-05-29T09:34:44Z", "message": "NXP-29103: fix subgroup extraction logics for connect bundles use case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDQ5MTQz", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-421049143", "createdAt": "2020-05-29T15:16:12Z", "commit": {"oid": "c9b59c5886e88215e21892ea5d1eabaa4f476bed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDUzMzU5", "url": "https://github.com/nuxeo/nuxeo/pull/4078#pullrequestreview-421053359", "createdAt": "2020-05-29T15:21:22Z", "commit": {"oid": "c9b59c5886e88215e21892ea5d1eabaa4f476bed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4744, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}