{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMTY0NDQz", "number": 4267, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozMDoxOFrOEZ-pEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNDowMlrOEagO1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Njc2MTc5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-test/src/test/java/org/nuxeo/ecm/automation/core/context/TestHttpHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozMDoxOFrOHDHeZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozMDoxOFrOHDHeZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzMDI0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(\"dummy data\", result);\n          \n          \n            \n                    assertTrue(result.contains(\"dummy data\"));\n          \n          \n            \n                    assertEquals(\"dummy data\", result);", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473030245", "createdAt": "2020-08-19T13:30:18Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-test/src/test/java/org/nuxeo/ecm/automation/core/context/TestHttpHelpers.java", "diffHunk": "@@ -87,49 +87,51 @@ protected String getBaseURL() {\n         int port = servletContainerFeature.getPort();\n         return \"http://localhost:\" + port;\n     }\n+\n     @Test\n     public void canUseHttpHelperGET() throws OperationException, IOException {\n         Map<String, Object> params = new HashMap<>();\n-        params.put(\"script\", \"Context.result = HTTP.call(\\\"Administrator\\\",\\\"Administrator\\\",\\\"GET\\\", \\\"\"\n-                + getBaseURL() + \"/api/v1/path/default-domain\\\");\");\n+        params.put(\"script\", \"Context.result = HTTP.call(\\\"Administrator\\\",\\\"Administrator\\\",\\\"GET\\\", \\\"\" + getBaseURL()\n+                + \"/dummy/string\\\");\");\n         automationService.run(ctx, \"RunScript\", params);\n         String result = ((Blob) ctx.get(\"result\")).getString();\n         assertNotEquals(\"Internal Server Error\", result);\n-        assertTrue(result.contains(\"entity-type\"));\n+        assertEquals(\"dummy\", result);\n     }\n \n     @Test\n     public void canUseHttpHelperPOST() throws OperationException, IOException {\n-        String data = \"{\\\"entity-type\\\": \\\"document\\\",\\\"type\\\": \\\"Workspace\\\",\\\"name\\\":\\\"newName\\\",\\\"properties\\\": {\\\"dc:title\\\":\\\"My title\\\",\\\"dc:description\\\":\\\" \\\"}}\";\n+        String data = \"dummy data\";\n         Map<String, String> headers = new HashMap<>();\n         headers.put(\"Content-type\", MediaType.APPLICATION_JSON);\n         Map<String, Object> params = new HashMap<>();\n         ctx.put(\"data\", data);\n         ctx.put(\"headers\", headers);\n         params.put(\"script\", \"Context.result = HTTP.call(\\\"Administrator\\\",\\\"Administrator\\\",\\\"POST\\\", \\\"\"\n-                + getBaseURL() + \"/api/v1/path/default-domain\\\", Context.data, Context.headers);\");\n+                + getBaseURL() + \"/dummy/post\\\", Context.data, Context.headers);\");\n         automationService.run(ctx, \"RunScript\", params);\n         String result = ((Blob) ctx.get(\"result\")).getString();\n         assertNotEquals(\"Internal Server Error\", result);\n-        assertTrue(result.contains(\"entity-type\"));\n+        assertEquals(\"dummy data\", result);\n+        assertTrue(result.contains(\"dummy data\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f633a4dfa50a98cad04f3b61f2074019a333aaa"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Njc5NjA4OnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/BinariesObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozNzo0MlrOHDHzRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozNzo0MlrOHDHzRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzNTU4OA==", "bodyText": "What about throwing an exception instead of returning a Response? We have this pattern in the BulkObject.\nFurthermore, we recently saw an issue when using the Response pattern in JSONDocumentObject. The  Response has application/json as content type whereas the entity is a simple String.", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473035588", "createdAt": "2020-08-19T13:37:42Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/BinariesObject.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static javax.ws.rs.core.Response.Status.CONFLICT;\n+\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.nuxeo.ecm.core.blob.DocumentBlobManager;\n+import org.nuxeo.ecm.core.blob.binary.BinaryManagerStatus;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Endpoint to manage the binaries.\n+ *\n+ * @since 11.3\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"binaries\")\n+@Produces(APPLICATION_JSON)\n+public class BinariesObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    /**\n+     * Garbage collect the unused (orphaned) binaries.\n+     * \n+     * @return {@link BinaryManagerStatus} if no gc is in progress, otherwise a\n+     *         {@link javax.ws.rs.core.Response.Status#CONFLICT}\n+     */\n+    @DELETE\n+    @Path(\"orphaned\")\n+    public Response garbageCollectBinaries() {\n+        DocumentBlobManager documentBlobManager = Framework.getService(DocumentBlobManager.class);\n+\n+        if (!documentBlobManager.isBinariesGarbageCollectionInProgress()) {\n+            BinaryManagerStatus binaryManagerStatus = documentBlobManager.garbageCollectBinaries(true);\n+            return Response.ok(binaryManagerStatus).build();\n+        }\n+\n+        return Response.status(CONFLICT).build();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46d0b7462fc6752424e76a030f5b56adc7cdd769"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Njg0NzI0OnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/ManagementBAFTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzo0OToxOVrOHDITgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzo0OToxOVrOHDITgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA0Mzg0MQ==", "bodyText": "To remove?", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473043841", "createdAt": "2020-08-19T13:49:19Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/ManagementBAFTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_COMMAND_ID;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus.State;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+\n+/**\n+ * @since 11.3\n+ */\n+public abstract class ManagementBAFTest extends ManagementBaseTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46d0b7462fc6752424e76a030f5b56adc7cdd769"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Njk3MTI3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestPictureBlobHolder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoxNjo1M1rOHDJhaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowMTowMFrOHDLkow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Mzc4Nw==", "bodyText": "shouldn't be in the cleanup / format commit since there is one ?", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473063787", "createdAt": "2020-08-19T14:16:53Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestPictureBlobHolder.java", "diffHunk": "@@ -93,12 +88,14 @@ public void testBlobHolder() throws Exception {\n         DocumentModel picturebook = session.createDocumentModel(\"/\", \"picturebook\", PICTUREBOOK_TYPE_NAME);\n         session.createDocument(picturebook);\n         DocumentModel picture = session.createDocumentModel(picturebook.getPathAsString(), \"pic1\", PICTURE_TYPE_NAME);\n-        picture.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(\n-                getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null, \"mysample.jpg\"));\n+        picture.setPropertyValue(\"file:content\",\n+                (Serializable) Blobs.createBlob(getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null,\n+                        \"mysample.jpg\"));\n         picture = session.createDocument(picture);\n         DocumentModel picture2 = session.createDocumentModel(picturebook.getPathAsString(), \"pic2\", PICTURE_TYPE_NAME);\n-        picture2.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(\n-                getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null, \"mysample.jpg\"));\n+        picture2.setPropertyValue(\"file:content\",\n+                (Serializable) Blobs.createBlob(getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null,\n+                        \"mysample.jpg\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5abd74b2bbd8c8f3379182969250301e7ef4542c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4OTYwMQ==", "bodyText": "Yes, will do that on #4260 so :)", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473089601", "createdAt": "2020-08-19T14:50:33Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestPictureBlobHolder.java", "diffHunk": "@@ -93,12 +88,14 @@ public void testBlobHolder() throws Exception {\n         DocumentModel picturebook = session.createDocumentModel(\"/\", \"picturebook\", PICTUREBOOK_TYPE_NAME);\n         session.createDocument(picturebook);\n         DocumentModel picture = session.createDocumentModel(picturebook.getPathAsString(), \"pic1\", PICTURE_TYPE_NAME);\n-        picture.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(\n-                getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null, \"mysample.jpg\"));\n+        picture.setPropertyValue(\"file:content\",\n+                (Serializable) Blobs.createBlob(getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null,\n+                        \"mysample.jpg\"));\n         picture = session.createDocument(picture);\n         DocumentModel picture2 = session.createDocumentModel(picturebook.getPathAsString(), \"pic2\", PICTURE_TYPE_NAME);\n-        picture2.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(\n-                getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null, \"mysample.jpg\"));\n+        picture2.setPropertyValue(\"file:content\",\n+                (Serializable) Blobs.createBlob(getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null,\n+                        \"mysample.jpg\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Mzc4Nw=="}, "originalCommit": {"oid": "5abd74b2bbd8c8f3379182969250301e7ef4542c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA5NzM3OQ==", "bodyText": "Done.", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473097379", "createdAt": "2020-08-19T15:01:00Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestPictureBlobHolder.java", "diffHunk": "@@ -93,12 +88,14 @@ public void testBlobHolder() throws Exception {\n         DocumentModel picturebook = session.createDocumentModel(\"/\", \"picturebook\", PICTUREBOOK_TYPE_NAME);\n         session.createDocument(picturebook);\n         DocumentModel picture = session.createDocumentModel(picturebook.getPathAsString(), \"pic1\", PICTURE_TYPE_NAME);\n-        picture.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(\n-                getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null, \"mysample.jpg\"));\n+        picture.setPropertyValue(\"file:content\",\n+                (Serializable) Blobs.createBlob(getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null,\n+                        \"mysample.jpg\"));\n         picture = session.createDocument(picture);\n         DocumentModel picture2 = session.createDocumentModel(picturebook.getPathAsString(), \"pic2\", PICTURE_TYPE_NAME);\n-        picture2.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(\n-                getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null, \"mysample.jpg\"));\n+        picture2.setPropertyValue(\"file:content\",\n+                (Serializable) Blobs.createBlob(getFileFromPath(\"images/exif_sample.jpg\"), \"image/jpeg\", null,\n+                        \"mysample.jpg\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Mzc4Nw=="}, "originalCommit": {"oid": "5abd74b2bbd8c8f3379182969250301e7ef4542c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjI2NTE4OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/ServletContainerFeature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNDowMlrOHD-XFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNDowMlrOHD-XFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyOTQ5NQ==", "bodyText": "It should be higher in the import list.", "url": "https://github.com/nuxeo/nuxeo/pull/4267#discussion_r473929495", "createdAt": "2020-08-20T12:24:02Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/ServletContainerFeature.java", "diffHunk": "@@ -23,8 +23,11 @@\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n import org.nuxeo.runtime.server.ServerComponent;\n \n+import static org.nuxeo.launcher.config.ConfigurationGenerator.PARAM_HTTP_PORT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9cb8d7ad5862ef1296b2220cdd62183ba35f26"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4345, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}