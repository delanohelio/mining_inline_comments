{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NDgyMjM2", "number": 4544, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTowNjoxNVrOFIHjEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMDowNDoyNlrOFIhk_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDU2NTk1OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/MockEventsInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTowNjoxNVrOIJ3Vzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTowNjoxNVrOIJ3Vzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxNDc5OA==", "bodyText": "Old code but = 0 is redundant. You should probably keep Bogdan's name in the contributors as well.", "url": "https://github.com/nuxeo/nuxeo/pull/4544#discussion_r547214798", "createdAt": "2020-12-22T11:06:15Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/MockEventsInfo.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class MockEventsInfo {\n+\n+    public int beforeStop = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d37accf92cfea39967d740d496a46ecd6932fb9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDYwMDA2OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMToxNzoxNlrOIJ3pPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMToxNzoxNlrOIJ3pPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxOTc3Mg==", "bodyText": "Maybe change the debug messages?", "url": "https://github.com/nuxeo/nuxeo/pull/4544#discussion_r547219772", "createdAt": "2020-12-22T11:17:16Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamServiceImpl.java", "diffHunk": "@@ -247,21 +246,18 @@ public void stopProcessors() {\n         processors.clear();\n     }\n \n-    protected class ComponentsLifeCycleListener implements ComponentManager.Listener {\n-        @Override\n-        public void afterStart(ComponentManager mgr, boolean isResume) {\n-            // this is called once all components are started and ready\n-            log.debug(\"afterStart\");\n-            startProcessors();\n-        }\n+    @Override\n+    public void afterRuntimeStart(ComponentManager mgr, boolean isResume) {\n+        // this is called once all components are started and ready\n+        log.debug(\"afterStart\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632df06619e4fa8f7ad6a843809bed25acfc635c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDgzMDcwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMDowNDoyNlrOIKfzWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMDowNDoyNlrOIKfzWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg3NzcyMA==", "bodyText": "To be consistent I think that stop should use the reverse order.", "url": "https://github.com/nuxeo/nuxeo/pull/4544#discussion_r547877720", "createdAt": "2020-12-23T10:04:26Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -1283,49 +1293,63 @@ public void remove(ComponentManager.Listener listener) {\n \n         public void beforeActivation() {\n             for (Object listener : listeners.getListeners()) {\n-                ((ComponentManager.Listener) listener).beforeActivation(ComponentManagerImpl.this);\n+                ((ComponentManager.Listener) listener).beforeRuntimeActivation(ComponentManagerImpl.this);\n             }\n         }\n \n         public void afterActivation() {\n             for (Object listener : listeners.getListeners()) {\n-                ((ComponentManager.Listener) listener).afterActivation(ComponentManagerImpl.this);\n+                ((ComponentManager.Listener) listener).afterRuntimeActivation(ComponentManagerImpl.this);\n             }\n         }\n \n         public void beforeDeactivation() {\n             for (Object listener : listeners.getListeners()) {\n-                ((ComponentManager.Listener) listener).beforeDeactivation(ComponentManagerImpl.this);\n+                ((ComponentManager.Listener) listener).beforeRuntimeDeactivation(ComponentManagerImpl.this);\n             }\n         }\n \n         public void afterDeactivation() {\n             for (Object listener : listeners.getListeners()) {\n-                ((ComponentManager.Listener) listener).afterDeactivation(ComponentManagerImpl.this);\n+                ((ComponentManager.Listener) listener).afterRuntimeDeactivation(ComponentManagerImpl.this);\n             }\n         }\n \n+        /**\n+         * Sort listeners to follow start order on components.\n+         *\n+         * @since 11.5\n+         */\n+        protected Stream<ComponentManager.Listener> sortedForStart() {\n+            Stream<ComponentManager.Listener> regularListeners = Arrays.stream(listeners.getListeners())\n+                                                                       .filter(l -> !(l instanceof Component))\n+                                                                       .map(ComponentManager.Listener.class::cast);\n+            Stream<ComponentManager.Listener> componentListeners = Arrays.stream(listeners.getListeners())\n+                                                                         .filter(Component.class::isInstance)\n+                                                                         .map(Component.class::cast)\n+                                                                         .sorted(Comparator.comparingInt(\n+                                                                                 Component::getApplicationStartedOrder))\n+                                                                         .map(ComponentManager.Listener.class::cast);\n+            return Stream.concat(regularListeners, componentListeners);\n+        }\n+\n         public void beforeStart(boolean isResume) {\n-            for (Object listener : listeners.getListeners()) {\n-                ((ComponentManager.Listener) listener).beforeStart(ComponentManagerImpl.this, isResume);\n-            }\n+            sortedForStart().forEach(listener -> listener.beforeRuntimeStart(ComponentManagerImpl.this, isResume));\n         }\n \n         public void afterStart(boolean isResume) {\n-            for (Object listener : listeners.getListeners()) {\n-                ((ComponentManager.Listener) listener).afterStart(ComponentManagerImpl.this, isResume);\n-            }\n+            sortedForStart().forEach(listener -> listener.afterRuntimeStart(ComponentManagerImpl.this, isResume));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c43aecd4ebb153c196f13f7dd6ec85b722e6641"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4296, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}