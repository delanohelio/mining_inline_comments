{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjkzMDAx", "number": 3869, "title": "fix-NXP-28784-Record-management-Missing-abels-in-the-audit-for-retention-events", "bodyText": "PR created from https://qa.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-saouana/220/\nNew T&P after the review: https://qa.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-saouana/221/ --> OK", "createdAt": "2020-03-26T16:52:43Z", "url": "https://github.com/nuxeo/nuxeo/pull/3869", "merged": true, "mergeCommit": {"oid": "592daa16e53a53e91fa9c0e46a1dda342da5f790"}, "closed": true, "closedAt": "2020-03-27T17:02:14Z", "author": {"login": "nuxeojenkins"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRfa-dgFqTM4MjIxNTM3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRumShgFqTM4Mjc1OTQxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjE1Mzc5", "url": "https://github.com/nuxeo/nuxeo/pull/3869#pullrequestreview-382215379", "createdAt": "2020-03-26T16:59:40Z", "commit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjo1OTo0MVrOF8Q6aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoxOTowNVrOF8Rw_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczNTk3Ng==", "bodyText": "Formatting issue?", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398735976", "createdAt": "2020-03-26T16:59:41Z", "author": {"login": "kevinleturc"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setLegalHold(file.getRef(), hold, comment);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            listener.streamCapturedEvents()\n+                    .forEach(ev -> assertEquals(\"Event: \" + ev.getName(), //\n+                            comment, ev.getContext().getProperties().get(\"comment\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczOTYwNA==", "bodyText": "retainUntil doesn't seem to be null which can simplify this expression.", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398739604", "createdAt": "2020-03-26T17:04:42Z", "author": {"login": "kevinleturc"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setLegalHold(file.getRef(), hold, comment);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            listener.streamCapturedEvents()\n+                    .forEach(ev -> assertEquals(\"Event: \" + ev.getName(), //\n+                            comment, ev.getContext().getProperties().get(\"comment\")));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyRetention() {\n+        session.makeRecord(file.getRef());\n+        Calendar retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 5);\n+\n+        // current retention is null\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+\n+        // extend the retention\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 25);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // current retention is indeterminate\n+        checkRetentionEvents(RETAIN_UNTIL_INDETERMINATE, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // modify an indeterminate once\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 10);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+    }\n+\n+    protected void checkRetentionEvents(Calendar retainUntil, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setRetainUntil(file.getRef(), retainUntil, null);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            boolean retainUntilIndeterminate = retainUntil == null\n+                    || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0MDIzOQ==", "bodyText": "I would go for setRetentionAndCheckEvents because this method doesn't just check events.", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398740239", "createdAt": "2020-03-26T17:05:36Z", "author": {"login": "kevinleturc"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setLegalHold(file.getRef(), hold, comment);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            listener.streamCapturedEvents()\n+                    .forEach(ev -> assertEquals(\"Event: \" + ev.getName(), //\n+                            comment, ev.getContext().getProperties().get(\"comment\")));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyRetention() {\n+        session.makeRecord(file.getRef());\n+        Calendar retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 5);\n+\n+        // current retention is null\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+\n+        // extend the retention\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 25);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // current retention is indeterminate\n+        checkRetentionEvents(RETAIN_UNTIL_INDETERMINATE, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // modify an indeterminate once\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 10);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+    }\n+\n+    protected void checkRetentionEvents(Calendar retainUntil, String... expectedEvents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0MDcyNA==", "bodyText": "I would go for setLegalHoldAndCheckEvents because this method doesn't just check events.", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398740724", "createdAt": "2020-03-26T17:06:22Z", "author": {"login": "kevinleturc"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg==", "bodyText": "Shouldn't we do the same thing than above in the code (ie: using Objects.equals)?", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398744716", "createdAt": "2020-03-26T17:11:49Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java", "diffHunk": "@@ -2077,18 +2078,19 @@ public void setRetainUntil(DocumentRef docRef, Calendar retainUntil, String comm\n         checkPermission(doc, SET_RETENTION);\n         Map<String, Serializable> options = new HashMap<>();\n         options.put(CoreEventConstants.RETAIN_UNTIL, retainUntil);\n-        String commentStart = retainUntil == null ? null : retainUntil.toInstant().toString();\n-        if (comment == null) {\n-            comment = commentStart;\n-        } else if (commentStart != null) {\n-            comment = commentStart + \" \" + comment;\n-        }\n-        options.put(\"comment\", comment);\n+        boolean retainUntilIndeterminate = retainUntil == null\n+                || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0OTk1MQ==", "bodyText": "Should we have the same thing for the before events?", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398749951", "createdAt": "2020-03-26T17:19:05Z", "author": {"login": "kevinleturc"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-audit.xml", "diffHunk": "@@ -1,5 +1,15 @@\n <component name=\"org.nuxeo.retention.audit\" version=\"1.0\">\n   <extension target=\"org.nuxeo.ecm.platform.audit.service.NXAuditEventsService\" point=\"event\">\n     <event name=\"retentionRuleAttached\" />\n+    <event name=\"afterSetRetention\">\n+      <extendedInfos>\n+        <extendedInfo expression=\"${message.properties.retainUntil}\" key=\"retainUntil\" />\n+      </extendedInfos>\n+    </event>\n+    <event name=\"afterExtendRetention\">\n+      <extendedInfos>\n+        <extendedInfo expression=\"${message.properties.retainUntil}\" key=\"retainUntil\" />\n+      </extendedInfos>\n+    </event>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2edbcfe0ed7181c3572124f1261f302a38a909db", "committedDate": "2020-03-26T11:50:28Z", "message": "NXP-28786: Record management - Expiration date displayed for undeterminate retention"}, "afterCommit": {"oid": "3c47a83b2961baad63c52c018db3f3d7bf95127a", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3c47a83b2961baad63c52c018db3f3d7bf95127a", "committedDate": "2020-03-27T10:47:11Z", "message": "NXP-28786: Record management - Expiration date displayed for undeterminate retention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8731b78ab780d66bdca6f80bd54f97eb27692f5b", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8731b78ab780d66bdca6f80bd54f97eb27692f5b", "committedDate": "2020-03-27T10:50:21Z", "message": "NXP-28784: Record management - Missing labels in the audit for retention events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e56ef363bc14f15ca351f3920f2c7431d269722", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1e56ef363bc14f15ca351f3920f2c7431d269722", "committedDate": "2020-03-27T10:50:21Z", "message": "NXP-28786: Record management - Expiration date displayed for undeterminate retention"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c47a83b2961baad63c52c018db3f3d7bf95127a", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3c47a83b2961baad63c52c018db3f3d7bf95127a", "committedDate": "2020-03-27T10:47:11Z", "message": "NXP-28786: Record management - Expiration date displayed for undeterminate retention"}, "afterCommit": {"oid": "1e56ef363bc14f15ca351f3920f2c7431d269722", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1e56ef363bc14f15ca351f3920f2c7431d269722", "committedDate": "2020-03-27T10:50:21Z", "message": "NXP-28786: Record management - Expiration date displayed for undeterminate retention"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzU0NjM3", "url": "https://github.com/nuxeo/nuxeo/pull/3869#pullrequestreview-382754637", "createdAt": "2020-03-27T10:53:02Z", "commit": {"oid": "1e56ef363bc14f15ca351f3920f2c7431d269722"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzU5NDE2", "url": "https://github.com/nuxeo/nuxeo/pull/3869#pullrequestreview-382759416", "createdAt": "2020-03-27T11:00:15Z", "commit": {"oid": "1e56ef363bc14f15ca351f3920f2c7431d269722"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4815, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}