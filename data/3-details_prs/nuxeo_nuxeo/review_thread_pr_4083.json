{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzODczODYx", "number": 4083, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozNjowOFrOEAOhLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo0MDoxN1rOEAOmZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjczMzI3OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-client/src/main/java/org/nuxeo/ecm/automation/client/jaxrs/spi/marshallers/DocumentsMarshaller.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozNjowOFrOGbYHOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo1MDoyNFrOGbrtZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1OTgwMg==", "bodyText": "This part doesn't seem tested in this PR. This is automation-client so I can understand if it's too complex.\nCan this be \"aggregates\" instead of \"aggregations\" for consistency?", "url": "https://github.com/nuxeo/nuxeo/pull/4083#discussion_r431359802", "createdAt": "2020-05-27T18:36:08Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-client/src/main/java/org/nuxeo/ecm/automation/client/jaxrs/spi/marshallers/DocumentsMarshaller.java", "diffHunk": "@@ -92,6 +92,8 @@ protected Documents readPaginableDocuments(JsonParser jp) throws IOException {\n                 docs.setCurrentPageIndex(jp.getIntValue());\n             } else if (\"entries\".equals(key)) {\n                 readDocumentEntries(jp, docs);\n+            } else if (\"aggregations\".equals(key)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cfb0dd0f2528dbefe25ccd7085760f2c1e4dcf6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0NjU1Mg==", "bodyText": "TBH this is just so I can check whether the skipAggregates flag is working since our automation client returns pageable documents which did not include any aggregates information and I couldn't get it to return a \"raw\" JsonNode like I did with the HttpAutomationClient in master.", "url": "https://github.com/nuxeo/nuxeo/pull/4083#discussion_r431446552", "createdAt": "2020-05-27T21:15:19Z", "author": {"login": "nelsonsilva"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-client/src/main/java/org/nuxeo/ecm/automation/client/jaxrs/spi/marshallers/DocumentsMarshaller.java", "diffHunk": "@@ -92,6 +92,8 @@ protected Documents readPaginableDocuments(JsonParser jp) throws IOException {\n                 docs.setCurrentPageIndex(jp.getIntValue());\n             } else if (\"entries\".equals(key)) {\n                 readDocumentEntries(jp, docs);\n+            } else if (\"aggregations\".equals(key)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1OTgwMg=="}, "originalCommit": {"oid": "9cfb0dd0f2528dbefe25ccd7085760f2c1e4dcf6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4MDg2OA==", "bodyText": "Can't change it to \"aggregates\" as it would break the REST API. This has been called \"aggregations\" since the beginning \ud83e\udd37\u200d\u2642\ufe0f", "url": "https://github.com/nuxeo/nuxeo/pull/4083#discussion_r431680868", "createdAt": "2020-05-28T08:50:24Z", "author": {"login": "nelsonsilva"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-client/src/main/java/org/nuxeo/ecm/automation/client/jaxrs/spi/marshallers/DocumentsMarshaller.java", "diffHunk": "@@ -92,6 +92,8 @@ protected Documents readPaginableDocuments(JsonParser jp) throws IOException {\n                 docs.setCurrentPageIndex(jp.getIntValue());\n             } else if (\"entries\".equals(key)) {\n                 readDocumentEntries(jp, docs);\n+            } else if (\"aggregations\".equals(key)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1OTgwMg=="}, "originalCommit": {"oid": "9cfb0dd0f2528dbefe25ccd7085760f2c1e4dcf6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Njc0NjYxOnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/test/java/org/nuxeo/elasticsearch/test/rest/AutomationESDocumentsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo0MDoxN1rOGbYP0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo0MDoxN1rOGbYP0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MjAwMA==", "bodyText": "Please add a newline.", "url": "https://github.com/nuxeo/nuxeo/pull/4083#discussion_r431362000", "createdAt": "2020-05-27T18:40:17Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/test/java/org/nuxeo/elasticsearch/test/rest/AutomationESDocumentsTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (C) Copyright 20202 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.nuxeo.elasticsearch.test.rest;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.client.Session;\n+import org.nuxeo.ecm.automation.client.model.PaginableDocuments;\n+import org.nuxeo.ecm.automation.core.util.Properties;\n+import org.nuxeo.ecm.automation.core.operations.services.DocumentPageProviderOperation;\n+import org.nuxeo.ecm.automation.test.EmbeddedAutomationServerFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.query.api.PageProvider;\n+import org.nuxeo.ecm.restapi.test.RestServerInit;\n+import org.nuxeo.elasticsearch.test.RepositoryElasticSearchFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({EmbeddedAutomationServerFeature.class, RepositoryElasticSearchFeature.class})\n+@Deploy(\"org.nuxeo.elasticsearch.core.test:elasticsearch-test-contrib.xml\")\n+@Deploy(\"org.nuxeo.elasticsearch.core.test:pageprovider-test-contrib.xml\")\n+@Deploy(\"org.nuxeo.elasticsearch.core.test:pageprovider2-test-contrib.xml\")\n+@Deploy(\"org.nuxeo.elasticsearch.core.test:pageprovider2-coretype-test-contrib.xml\")\n+@RepositoryConfig(cleanup = Granularity.METHOD, init = RestServerInit.class)\n+public class AutomationESDocumentsTest {\n+\n+    @Inject\n+    protected Session session;\n+\n+    @Test\n+    public void iCanPerformESQLPageProviderOperationOnRepository() throws Exception {\n+        Properties namedParameters = new Properties();\n+        namedParameters.put(\"defaults:dc_nature_agg\", \"[\\\"article\\\"]\");\n+        PaginableDocuments docs = (PaginableDocuments) session.newRequest(DocumentPageProviderOperation.ID)\n+                .set(\"namedParameters\", namedParameters)\n+                .set(\"providerName\", \"default_search\")\n+                .execute();\n+        assertEquals(docs.getPageSize(), 20);\n+        assertEquals(docs.getResultsCount(), 11);\n+    }\n+\n+    @Test\n+    public void iCanSkipAggregatesOnESQLPageProviderOperationOnRepository() throws Exception {\n+        PaginableDocuments docs = (PaginableDocuments) session.newRequest(DocumentPageProviderOperation.ID)\n+                .set(\"providerName\", \"aggregates_1\")\n+                .execute();\n+        assertTrue(docs.hasAggregates());\n+\n+        docs = (PaginableDocuments) session.newRequest(DocumentPageProviderOperation.ID)\n+                .setHeader(PageProvider.SKIP_AGGREGATES_PROP, \"true\")\n+                .set(\"providerName\", \"aggregates_1\")\n+                .execute();\n+        assertFalse(docs.hasAggregates());\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cfb0dd0f2528dbefe25ccd7085760f2c1e4dcf6"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4157, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}