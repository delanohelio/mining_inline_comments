{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2OTU0MDA2", "number": 4540, "title": "10.10-HF/fix-NXP-25485-take-into-account-local-configuration-subtypes", "bodyText": "PR created from https://qa2.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-cboidot-10.10/28/", "createdAt": "2020-12-11T14:40:59Z", "url": "https://github.com/nuxeo/nuxeo/pull/4540", "merged": true, "mergeCommit": {"oid": "670411037562d096fbb79cc6fc3a2ad1513f4543"}, "closed": true, "closedAt": "2021-01-04T14:30:30Z", "author": {"login": "nuxeojenkins"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlQShsgFqTU1MDYzNTY4Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdsy_XTAFqTU2MDg4NzMwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjM1Njgz", "url": "https://github.com/nuxeo/nuxeo/pull/4540#pullrequestreview-550635683", "createdAt": "2020-12-11T23:11:02Z", "commit": {"oid": "6bf4b23cf5f38e99739d42a19836b98cad384a4b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMzoxMTowMlrOIEUDCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMzoxMTowMlrOIEUDCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM5MzY3NA==", "bodyText": "Shouldn't you remove the Java class itself as well?\nOr if there's will to keep it for backward compat (not a bad idea), it should be marked deprecated.", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r541393674", "createdAt": "2020-12-11T23:11:02Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-io/src/main/resources/OSGI-INF/marshallers-contrib.xml", "diffHunk": "@@ -31,7 +31,6 @@\n     <register class=\"org.nuxeo.ecm.core.io.marshallers.json.enrichers.ChildrenJsonEnricher\" enable=\"true\" />\n     <register class=\"org.nuxeo.ecm.core.io.marshallers.json.enrichers.HasFolderishChildJsonEnricher\" enable=\"true\" />\n     <register class=\"org.nuxeo.ecm.core.io.marshallers.json.enrichers.ContextualParametersJsonEnricher\" enable=\"true\" />\n-    <register class=\"org.nuxeo.ecm.core.io.marshallers.json.enrichers.SubtypesJsonEnricher\" enable=\"true\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf4b23cf5f38e99739d42a19836b98cad384a4b"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6bf4b23cf5f38e99739d42a19836b98cad384a4b", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6bf4b23cf5f38e99739d42a19836b98cad384a4b", "committedDate": "2020-12-11T11:08:32Z", "message": "NXP-25485: take into account the local configuration defined in JSF UI"}, "afterCommit": {"oid": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/af6bd2624af6feb56528cf83e4631a5da2402ae4", "committedDate": "2020-12-14T09:35:00Z", "message": "NXP-25485: take into account the local configuration defined in JSF UI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDAyMzUx", "url": "https://github.com/nuxeo/nuxeo/pull/4540#pullrequestreview-552402351", "createdAt": "2020-12-15T12:32:17Z", "commit": {"oid": "af6bd2624af6feb56528cf83e4631a5da2402ae4"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MzgyNTUw", "url": "https://github.com/nuxeo/nuxeo/pull/4540#pullrequestreview-554382550", "createdAt": "2020-12-17T08:41:25Z", "commit": {"oid": "af6bd2624af6feb56528cf83e4631a5da2402ae4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODo0MToyNVrOIHqfAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOToyMDoxOVrOIHsB4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkwNzAxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 11.4\n          \n          \n            \n             * @since 11.5", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544907011", "createdAt": "2020-12-17T08:41:25Z", "author": {"login": "troger"}, "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af6bd2624af6feb56528cf83e4631a5da2402ae4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkyMTkwMQ==", "bodyText": "What about extracting this logic in a dedicated protected method? So that people can easily extend this enricher without having to copy/paste the whole code.", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544921901", "createdAt": "2020-12-17T09:04:20Z", "author": {"login": "troger"}, "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.4\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        Collection<String> subtypes = new HashSet<String>();\n+\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+            if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+                String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                        UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+                String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                        UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+\n+                List<String> allowedTypes = new ArrayList<>();\n+                List<String> deniedTypes = new ArrayList<>();\n+                if (allowedTypesProperty != null) {\n+                    allowedTypes = Arrays.asList(allowedTypesProperty);\n+                }\n+                if (deniedTypesProperty != null) {\n+                    deniedTypes = Arrays.asList(deniedTypesProperty);\n+                }\n+                if (!(allowedTypes.isEmpty() && deniedTypes.isEmpty())) {\n+                    for (String subtype : defaultSubtypes) {\n+                        if (!deniedTypes.contains(subtype)\n+                                && (allowedTypes.isEmpty() || allowedTypes.contains(subtype))) {\n+                            subtypes.add(subtype);\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            subtypes.addAll(defaultSubtypes);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af6bd2624af6feb56528cf83e4631a5da2402ae4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzMDM3MQ==", "bodyText": "Remove blank line.", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544930371", "createdAt": "2020-12-17T09:17:22Z", "author": {"login": "troger"}, "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -59,10 +67,15 @@ public void setup() {\n \n     }\n \n+    /**\n+     * @since 11.5\n+     */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af6bd2624af6feb56528cf83e4631a5da2402ae4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzMDcyNA==", "bodyText": "Remove blank line.", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544930724", "createdAt": "2020-12-17T09:17:56Z", "author": {"login": "troger"}, "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -95,4 +108,20 @@ public void test() throws Exception {\n         json.childrenContains(\"type\", \"DummyDoc\");\n     }\n \n-}\n\\ No newline at end of file\n+    @Test\n+    public void testSubtypesWithLocalConfiguration() throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af6bd2624af6feb56528cf83e4631a5da2402ae4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzMjMyMw==", "bodyText": "Worth adding more tests to validate the whole enricher:\n\ndenyAllTypes\nallowedTypes\ndeniedTypes\nmix of properties", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r544932323", "createdAt": "2020-12-17T09:20:19Z", "author": {"login": "troger"}, "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -95,4 +108,20 @@ public void test() throws Exception {\n         json.childrenContains(\"type\", \"DummyDoc\");\n     }\n \n-}\n\\ No newline at end of file\n+    @Test\n+    public void testSubtypesWithLocalConfiguration() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af6bd2624af6feb56528cf83e4631a5da2402ae4"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af6bd2624af6feb56528cf83e4631a5da2402ae4", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/af6bd2624af6feb56528cf83e4631a5da2402ae4", "committedDate": "2020-12-14T09:35:00Z", "message": "NXP-25485: take into account the local configuration defined in JSF UI"}, "afterCommit": {"oid": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "committedDate": "2020-12-17T10:32:19Z", "message": "NXP-25485: take into account the local configuration defined in JSF UI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NzY4MTk1", "url": "https://github.com/nuxeo/nuxeo/pull/4540#pullrequestreview-554768195", "createdAt": "2020-12-17T16:23:45Z", "commit": {"oid": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjoyMzo0NVrOIH9rjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjo0Mzo0NVrOIH-m0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyMTUxOQ==", "bodyText": "You can use Set directly instead of Collection, furthermore, there's no need to declare the type in the HashSet implementation, this line would be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Collection<String> subtypes = new HashSet<String>();\n          \n          \n            \n                    Set<String> subtypes = new HashSet<>();", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545221519", "createdAt": "2020-12-17T16:23:45Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Collection<String> subtypes = new HashSet<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyOTk2MQ==", "bodyText": "You could use a ternary expression such as below:\nList<String> allowedTypes = allowedTypesProperty == null ? Collections.emptyList() : Arrays.asList(allowedTypesProperty);", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545229961", "createdAt": "2020-12-17T16:35:00Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Collection<String> subtypes = new HashSet<String>();\n+        Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+        if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+            String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+            String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+            List<String> allowedTypes = new ArrayList<>();\n+            List<String> deniedTypes = new ArrayList<>();\n+            if (allowedTypesProperty != null) {\n+                allowedTypes = Arrays.asList(allowedTypesProperty);\n+            }\n+            if (deniedTypesProperty != null) {\n+                deniedTypes = Arrays.asList(deniedTypesProperty);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNjI2Ng==", "bodyText": "allowedTypes.isEmpty() in the second if is always false, you can remove it.\nWe could use the Stream API there, with something such as below:\nimport static java.util.stream.Collectors.toSet;\n\nreturn defaultSubtypes.stream().filter(s -> !deniedTypes.contains(s)).filter(allowedTypes::contains).collect(toSet());\nThe proposed return will make the subtypes useless, you can replace the last return with a Collections.emptySet().", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545236266", "createdAt": "2020-12-17T16:43:10Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Collection<String> subtypes = new HashSet<String>();\n+        Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+        if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+            String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+            String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+            List<String> allowedTypes = new ArrayList<>();\n+            List<String> deniedTypes = new ArrayList<>();\n+            if (allowedTypesProperty != null) {\n+                allowedTypes = Arrays.asList(allowedTypesProperty);\n+            }\n+            if (deniedTypesProperty != null) {\n+                deniedTypes = Arrays.asList(deniedTypesProperty);\n+            }\n+            if (!(allowedTypes.isEmpty() && deniedTypes.isEmpty())) {\n+                for (String subtype : defaultSubtypes) {\n+                    if (!deniedTypes.contains(subtype) && (allowedTypes.isEmpty() || allowedTypes.contains(subtype))) {\n+                        subtypes.add(subtype);\n+                    }\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNjY5MQ==", "bodyText": "Could you put fields before the constructor?", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545236691", "createdAt": "2020-12-17T16:43:45Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-services/nuxeo-platform-types-core/src/test/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricherTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2016 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Gabriel Barata <gbarata@nuxeo.com>\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.JsonAssert;\n+import org.nuxeo.ecm.core.io.marshallers.json.document.DocumentModelJsonWriter;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+/**\n+ * @since 8.4\n+ */\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.core.io:OSGI-INF/doc-type-contrib.xml\")\n+public class SubtypesJsonEnricherTest extends AbstractJsonWriterTest.Local<DocumentModelJsonWriter, DocumentModel> {\n+\n+    public SubtypesJsonEnricherTest() {\n+        super(DocumentModelJsonWriter.class, DocumentModel.class);\n+    }\n+\n+    @Inject\n+    private CoreSession session;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/82910e00ddc640bad4cbb7f4f3edd8673ba6b983", "committedDate": "2020-12-17T10:32:19Z", "message": "NXP-25485: take into account the local configuration defined in JSF UI"}, "afterCommit": {"oid": "37603cc31c53f87a078d0130f2d4f10e2c8f8090", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/37603cc31c53f87a078d0130f2d4f10e2c8f8090", "committedDate": "2020-12-18T10:48:50Z", "message": "NXP-25485: take into account the local configuration defined in JSF UI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37603cc31c53f87a078d0130f2d4f10e2c8f8090", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/37603cc31c53f87a078d0130f2d4f10e2c8f8090", "committedDate": "2020-12-18T10:48:50Z", "message": "NXP-25485: take into account the local configuration defined in JSF UI"}, "afterCommit": {"oid": "0611dd0928203d419f00b0172b3ce59f9b4f7a78", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0611dd0928203d419f00b0172b3ce59f9b4f7a78", "committedDate": "2020-12-18T10:56:16Z", "message": "NXP-25485: take into account the local configuration defined in JSF UI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDYyNTkz", "url": "https://github.com/nuxeo/nuxeo/pull/4540#pullrequestreview-555462593", "createdAt": "2020-12-18T12:56:23Z", "commit": {"oid": "0611dd0928203d419f00b0172b3ce59f9b4f7a78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjo1NjoyM1rOIIh08Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjo1NjoyM1rOIIh08Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgxMzc0NQ==", "bodyText": "Could you format/indent the class?", "url": "https://github.com/nuxeo/nuxeo/pull/4540#discussion_r545813745", "createdAt": "2020-12-18T12:56:23Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-services/nuxeo-platform-types-core/src/main/java/org/nuxeo/ecm/platform/types/SubtypesJsonEnricher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot <cboidot@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.types;\n+\n+import static java.util.stream.Collectors.toSet;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Instantiations.SINGLETON;\n+import static org.nuxeo.ecm.core.io.registry.reflect.Priorities.REFERENCE;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.enrichers.AbstractJsonEnricher;\n+import org.nuxeo.ecm.core.io.registry.reflect.Setup;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.platform.types.localconfiguration.UITypesConfigurationConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Enrich {@link DocumentModel} JSON object with an array of the document types that can be created under the current\n+ * document taking account the local configuration.\n+ *\n+ * @since 11.5\n+ */\n+@Setup(mode = SINGLETON, priority = REFERENCE)\n+public class SubtypesJsonEnricher extends AbstractJsonEnricher<DocumentModel> {\n+\n+    public static final String NAME = \"subtypes\";\n+\n+    public SubtypesJsonEnricher() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void write(JsonGenerator jg, DocumentModel enriched) throws IOException {\n+        SchemaManager schemaManager = Framework.getService(SchemaManager.class);\n+        Collection<String> subtypes = computeSubtypes(enriched);\n+        jg.writeFieldName(NAME);\n+        jg.writeStartArray();\n+        for (String subtype : subtypes) {\n+            jg.writeStartObject();\n+            jg.writeStringField(\"type\", subtype);\n+            jg.writeArrayFieldStart(\"facets\");\n+            for (String facet : schemaManager.getDocumentType(subtype).getFacets()) {\n+                jg.writeString(facet);\n+            }\n+            jg.writeEndArray();\n+            jg.writeEndObject();\n+        }\n+        jg.writeEndArray();\n+    }\n+\n+    protected Collection<String> computeSubtypes(DocumentModel enriched) {\n+        Collection<String> defaultSubtypes = enriched.getDocumentType().getAllowedSubtypes();\n+        if (enriched.hasFacet(UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_FACET)) {\n+            return computeLocalConfigurationSubtypes(enriched, defaultSubtypes);\n+        }\n+        return defaultSubtypes;\n+    }\n+\n+    protected Collection<String> computeLocalConfigurationSubtypes(DocumentModel enriched,\n+            Collection<String> defaultSubtypes) {\n+        Boolean denyAllTypes = (Boolean) enriched.getPropertyValue(\n+                UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENY_ALL_TYPES_PROPERTY);\n+        if (BooleanUtils.isNotTrue(denyAllTypes)) {\n+            String[] allowedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_ALLOWED_TYPES_PROPERTY);\n+            String[] deniedTypesProperty = (String[]) enriched.getPropertyValue(\n+                    UITypesConfigurationConstants.UI_TYPES_CONFIGURATION_DENIED_TYPES_PROPERTY);\n+            List<String> allowedTypes = allowedTypesProperty == null ? Collections.emptyList() : Arrays.asList(allowedTypesProperty);\n+            List<String> deniedTypes = deniedTypesProperty == null ? Collections.emptyList() : Arrays.asList(deniedTypesProperty);\n+            return defaultSubtypes.stream().filter(s -> !deniedTypes.contains(s)).filter(s -> allowedTypes.contains(s) || allowedTypes.isEmpty()).collect(toSet());\n+        }\n+        return Collections.emptySet();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0611dd0928203d419f00b0172b3ce59f9b4f7a78"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "committedDate": "2020-12-18T12:58:09Z", "message": "NXP-25485: take into account the local configuration defined in JSF UI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0611dd0928203d419f00b0172b3ce59f9b4f7a78", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0611dd0928203d419f00b0172b3ce59f9b4f7a78", "committedDate": "2020-12-18T10:56:16Z", "message": "NXP-25485: take into account the local configuration defined in JSF UI"}, "afterCommit": {"oid": "f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f1cd6622a54ac18fe12dbafffcb3471c82ff5c92", "committedDate": "2020-12-18T12:58:09Z", "message": "NXP-25485: take into account the local configuration defined in JSF UI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NjI4MDY2", "url": "https://github.com/nuxeo/nuxeo/pull/4540#pullrequestreview-555628066", "createdAt": "2020-12-18T16:19:58Z", "commit": {"oid": "f1cd6622a54ac18fe12dbafffcb3471c82ff5c92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MDY0MjY1", "url": "https://github.com/nuxeo/nuxeo/pull/4540#pullrequestreview-557064265", "createdAt": "2020-12-22T13:04:40Z", "commit": {"oid": "f1cd6622a54ac18fe12dbafffcb3471c82ff5c92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODg3MzA5", "url": "https://github.com/nuxeo/nuxeo/pull/4540#pullrequestreview-560887309", "createdAt": "2021-01-04T09:34:22Z", "commit": {"oid": "f1cd6622a54ac18fe12dbafffcb3471c82ff5c92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4915, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}