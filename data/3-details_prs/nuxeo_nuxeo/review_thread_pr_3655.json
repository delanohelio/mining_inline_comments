{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMDYzMjcx", "number": 3655, "reviewThreads": {"totalCount": 76, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzowNDo0MFrODXNxYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjoxNjoyMlrODXkwhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjY5NDc1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/RetentionConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzowNDo0MFrOFcaWfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMToxNjozMFrOFczs_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMzNjE5MQ==", "bodyText": "as it is a constants class can you add a private constructor to avoid / prevents any instantiation :\n// Prevents instantiation\nprivate RetentionConstants() {\n}", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365336191", "createdAt": "2020-01-10T17:04:40Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/RetentionConstants.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention;\n+\n+import org.apache.commons.lang3.time.FastDateFormat;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionConstants {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc1MTU0OQ==", "bodyText": "The class could also be final.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365751549", "createdAt": "2020-01-13T11:16:30Z", "author": {"login": "nmpcunha"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/RetentionConstants.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention;\n+\n+import org.apache.commons.lang3.time.FastDateFormat;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionConstants {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMzNjE5MQ=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjcyMzM2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/RetentionConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoxNTowMVrOFcan6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzo1NjowMVrOFcbnCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0MDY0OQ==", "bodyText": "wdyt about replacing the query concatenation constant by String.format:\n public static final String ACTIVE_EVENT_BASED_RETENTION_RULES_QUERY = String.format( //\n            \"SELECT * FROM Document WHERE ecm:mixinType = '%s' AND ecm:isTrashed = 0 AND ecm:isVersion = 0 AND %s = 1 AND %s = '%s'\",\n            RETENTION_RULE_FACET, ENABLED_PROP, STARTING_POINT_POLICY_PROP, EVENT_BASED.name().toLowerCase() //\n    );", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365340649", "createdAt": "2020-01-10T17:15:01Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/RetentionConstants.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention;\n+\n+import org.apache.commons.lang3.time.FastDateFormat;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionConstants {\n+\n+    public static final String RULES_CONTAINER_TYPE = \"RetentionRules\";\n+\n+    public static final String DURATION_DAYS_PROP = \"retention_def:durationDays\";\n+\n+    public static final String DURATION_MONTHS_PROP = \"retention_def:durationMonths\";\n+\n+    public static final String DURATION_YEARS_PROP = \"retention_def:durationYears\";\n+\n+    public static final String RECORD_FACET = \"Record\";\n+\n+    public static final String RETENTION_RULE_FACET = \"RetentionRule\";\n+\n+    public static final String APPLICATION_POLICY_PROP = \"retention_rule:applicationPolicy\";\n+\n+    public static final String ENABLED_PROP = \"retention_rule:enabled\";\n+\n+    public static final String EXPRESSION_PROP = \"retention_def:expression\";\n+\n+    public static final String BEGIN_ACTIONS_PROP = \"retention_def:beginActions\";\n+\n+    public static final String END_ACTIONS_PROP = \"retention_def:endActions\";\n+\n+    public static final String DURATION_MILLIS_PROP = \"retention_def:durationMillis\";\n+\n+    public static final String EVENTS_DIRECTORY_NAME = \"RetentionEvent\";\n+\n+    public static final String OBSOLETE_FIELD_ID = \"obsolete\";\n+\n+    public static final String RETENTION_CHECKER_LISTENER_IGNORE = \"retentionRecordIgnore\";\n+\n+    public static final String STARTING_POINT_POLICY_PROP = \"retention_def:startingPointPolicy\";\n+\n+    public static final String STARTING_POINT_EXPRESSION_PROP = \"retention_def:startingPointExpression\";\n+\n+    public static final FastDateFormat DEFAULT_DATE_FORMAT = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss\");\n+\n+    public static final String STARTING_POINT_EVENT_PROP = \"retention_def:startingPointEvent\";\n+\n+    public static final String RECORD_MANAGER_GROUP_NAME = \"RecordManager\";\n+\n+    public static final String MANAGE_LEGAL_HOLD_PERMISSION = \"ManageLegalHold\";\n+\n+    public static final String MANAGE_RECORD_PERMISSION = \"ManageRecord\";\n+\n+    public static final String DOC_TYPES_PROP = \"retention_rule:docTypes\";\n+\n+    public static final String METADATA_XPATH_PROP = \"retention_def:metadataXPath\";\n+\n+    public static final String RECORD_RULE_IDS_PROP = \"record:ruleIds\";\n+\n+    public static final String INPUT_PROPERTY_KEY = \"input\";\n+\n+    public static final String RETAIN_UNTIL_PROP = \"record:retainUntil\";\n+\n+    public static final String ACTIVE_EVENT_BASED_RETENTION_RULES_QUERY = \"SELECT * FROM Document\" //\n+            + \" WHERE ecm:mixinType = '\" + RETENTION_RULE_FACET + \"'\" //\n+            + \" AND ecm:isTrashed = 0\" //\n+            + \" AND ecm:isVersion = 0\" //\n+            + \" AND \" + ENABLED_PROP + \" = 1\" //\n+            + \" AND \" + STARTING_POINT_POLICY_PROP + \" = '\"\n+            + RetentionRule.StartingPointPolicy.EVENT_BASED.name().toLowerCase() + \"'\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1NjgwOQ==", "bodyText": "I don't think that's more readable.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365356809", "createdAt": "2020-01-10T17:56:01Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/RetentionConstants.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention;\n+\n+import org.apache.commons.lang3.time.FastDateFormat;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionConstants {\n+\n+    public static final String RULES_CONTAINER_TYPE = \"RetentionRules\";\n+\n+    public static final String DURATION_DAYS_PROP = \"retention_def:durationDays\";\n+\n+    public static final String DURATION_MONTHS_PROP = \"retention_def:durationMonths\";\n+\n+    public static final String DURATION_YEARS_PROP = \"retention_def:durationYears\";\n+\n+    public static final String RECORD_FACET = \"Record\";\n+\n+    public static final String RETENTION_RULE_FACET = \"RetentionRule\";\n+\n+    public static final String APPLICATION_POLICY_PROP = \"retention_rule:applicationPolicy\";\n+\n+    public static final String ENABLED_PROP = \"retention_rule:enabled\";\n+\n+    public static final String EXPRESSION_PROP = \"retention_def:expression\";\n+\n+    public static final String BEGIN_ACTIONS_PROP = \"retention_def:beginActions\";\n+\n+    public static final String END_ACTIONS_PROP = \"retention_def:endActions\";\n+\n+    public static final String DURATION_MILLIS_PROP = \"retention_def:durationMillis\";\n+\n+    public static final String EVENTS_DIRECTORY_NAME = \"RetentionEvent\";\n+\n+    public static final String OBSOLETE_FIELD_ID = \"obsolete\";\n+\n+    public static final String RETENTION_CHECKER_LISTENER_IGNORE = \"retentionRecordIgnore\";\n+\n+    public static final String STARTING_POINT_POLICY_PROP = \"retention_def:startingPointPolicy\";\n+\n+    public static final String STARTING_POINT_EXPRESSION_PROP = \"retention_def:startingPointExpression\";\n+\n+    public static final FastDateFormat DEFAULT_DATE_FORMAT = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss\");\n+\n+    public static final String STARTING_POINT_EVENT_PROP = \"retention_def:startingPointEvent\";\n+\n+    public static final String RECORD_MANAGER_GROUP_NAME = \"RecordManager\";\n+\n+    public static final String MANAGE_LEGAL_HOLD_PERMISSION = \"ManageLegalHold\";\n+\n+    public static final String MANAGE_RECORD_PERMISSION = \"ManageRecord\";\n+\n+    public static final String DOC_TYPES_PROP = \"retention_rule:docTypes\";\n+\n+    public static final String METADATA_XPATH_PROP = \"retention_def:metadataXPath\";\n+\n+    public static final String RECORD_RULE_IDS_PROP = \"record:ruleIds\";\n+\n+    public static final String INPUT_PROPERTY_KEY = \"input\";\n+\n+    public static final String RETAIN_UNTIL_PROP = \"record:retainUntil\";\n+\n+    public static final String ACTIVE_EVENT_BASED_RETENTION_RULES_QUERY = \"SELECT * FROM Document\" //\n+            + \" WHERE ecm:mixinType = '\" + RETENTION_RULE_FACET + \"'\" //\n+            + \" AND ecm:isTrashed = 0\" //\n+            + \" AND ecm:isVersion = 0\" //\n+            + \" AND \" + ENABLED_PROP + \" = 1\" //\n+            + \" AND \" + STARTING_POINT_POLICY_PROP + \" = '\"\n+            + RetentionRule.StartingPointPolicy.EVENT_BASED.name().toLowerCase() + \"'\";\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0MDY0OQ=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjcyNjc0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/RetentionConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoxNjoxNVrOFcaqDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoxNjoxNVrOFcaqDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0MTE5OQ==", "bodyText": "same proposition as above :)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365341199", "createdAt": "2020-01-10T17:16:15Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/RetentionConstants.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention;\n+\n+import org.apache.commons.lang3.time.FastDateFormat;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionConstants {\n+\n+    public static final String RULES_CONTAINER_TYPE = \"RetentionRules\";\n+\n+    public static final String DURATION_DAYS_PROP = \"retention_def:durationDays\";\n+\n+    public static final String DURATION_MONTHS_PROP = \"retention_def:durationMonths\";\n+\n+    public static final String DURATION_YEARS_PROP = \"retention_def:durationYears\";\n+\n+    public static final String RECORD_FACET = \"Record\";\n+\n+    public static final String RETENTION_RULE_FACET = \"RetentionRule\";\n+\n+    public static final String APPLICATION_POLICY_PROP = \"retention_rule:applicationPolicy\";\n+\n+    public static final String ENABLED_PROP = \"retention_rule:enabled\";\n+\n+    public static final String EXPRESSION_PROP = \"retention_def:expression\";\n+\n+    public static final String BEGIN_ACTIONS_PROP = \"retention_def:beginActions\";\n+\n+    public static final String END_ACTIONS_PROP = \"retention_def:endActions\";\n+\n+    public static final String DURATION_MILLIS_PROP = \"retention_def:durationMillis\";\n+\n+    public static final String EVENTS_DIRECTORY_NAME = \"RetentionEvent\";\n+\n+    public static final String OBSOLETE_FIELD_ID = \"obsolete\";\n+\n+    public static final String RETENTION_CHECKER_LISTENER_IGNORE = \"retentionRecordIgnore\";\n+\n+    public static final String STARTING_POINT_POLICY_PROP = \"retention_def:startingPointPolicy\";\n+\n+    public static final String STARTING_POINT_EXPRESSION_PROP = \"retention_def:startingPointExpression\";\n+\n+    public static final FastDateFormat DEFAULT_DATE_FORMAT = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss\");\n+\n+    public static final String STARTING_POINT_EVENT_PROP = \"retention_def:startingPointEvent\";\n+\n+    public static final String RECORD_MANAGER_GROUP_NAME = \"RecordManager\";\n+\n+    public static final String MANAGE_LEGAL_HOLD_PERMISSION = \"ManageLegalHold\";\n+\n+    public static final String MANAGE_RECORD_PERMISSION = \"ManageRecord\";\n+\n+    public static final String DOC_TYPES_PROP = \"retention_rule:docTypes\";\n+\n+    public static final String METADATA_XPATH_PROP = \"retention_def:metadataXPath\";\n+\n+    public static final String RECORD_RULE_IDS_PROP = \"record:ruleIds\";\n+\n+    public static final String INPUT_PROPERTY_KEY = \"input\";\n+\n+    public static final String RETAIN_UNTIL_PROP = \"record:retainUntil\";\n+\n+    public static final String ACTIVE_EVENT_BASED_RETENTION_RULES_QUERY = \"SELECT * FROM Document\" //\n+            + \" WHERE ecm:mixinType = '\" + RETENTION_RULE_FACET + \"'\" //\n+            + \" AND ecm:isTrashed = 0\" //\n+            + \" AND ecm:isVersion = 0\" //\n+            + \" AND \" + ENABLED_PROP + \" = 1\" //\n+            + \" AND \" + STARTING_POINT_POLICY_PROP + \" = '\"\n+            + RetentionRule.StartingPointPolicy.EVENT_BASED.name().toLowerCase() + \"'\";\n+\n+    public static final String RULE_RECORD_DOCUMENT_QUERY = \"SELECT * FROM Document\" //\n+            + \" WHERE ecm:mixinType = '\" + RECORD_FACET + \"'\" //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjczODE3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/AttachRetentionRuleAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoyMDo0NVrOFcaxPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoyMDo0NVrOFcaxPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0MzAzOA==", "bodyText": "Bulk action to attach the retention...", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365343038", "createdAt": "2020-01-10T17:20:45Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/AttachRetentionRuleAction.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to attach retention rule.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njc0MzE5OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/AttachRetentionRuleAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoyMjo0MVrOFca0Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoyMjo0MVrOFca0Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0MzgzMA==", "bodyText": "No need to cast to String,  here getParam is a generic method public <T> T getParam(String key)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365343830", "createdAt": "2020-01-10T17:22:41Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/AttachRetentionRuleAction.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to attach retention rule.\n+ * @since 11.1\n+ */\n+public class AttachRetentionRuleAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"attachRetentionRule\";\n+\n+    public static final String PARAM_RULE_ID = \"ruleId\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(EvaluateRuleComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class EvaluateRuleComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(EvaluateRuleComputation.class);\n+\n+        protected boolean disableAudit;\n+\n+        protected RetentionManager retentionManager;\n+\n+        protected String ruleId;\n+\n+        public EvaluateRuleComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER);\n+            disableAudit = auditParam != null && Boolean.parseBoolean(auditParam.toString());\n+            retentionManager = Framework.getService(RetentionManager.class);\n+            ruleId = (String) command.getParam(PARAM_RULE_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njc0NTIzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoyMzozM1rOFca1qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyOTowN1rOFe-bJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0NDE3MA==", "bodyText": "this field is unused ->   static final Logger log =....", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365344170", "createdAt": "2020-01-10T17:23:33Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to evaluate expression on record documents with an attached event-based retention rule. Depending on the\n+ * expression evaluation outcome, a determinate retention period is computed and set on the record document.\n+ *\n+ * @since 11.1\n+ */\n+public class EvalInputEventBasedRuleAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"evalInputEventBasedRule\";\n+\n+    public static final String PARAM_EVENT = \"event\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(EvalEventBasedRuleComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class EvalEventBasedRuleComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(EvalEventBasedRuleComputation.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNDM1OQ==", "bodyText": "Actually it is used, in the compute method. Moving to private though.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368024359", "createdAt": "2020-01-17T16:29:07Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to evaluate expression on record documents with an attached event-based retention rule. Depending on the\n+ * expression evaluation outcome, a determinate retention period is computed and set on the record document.\n+ *\n+ * @since 11.1\n+ */\n+public class EvalInputEventBasedRuleAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"evalInputEventBasedRule\";\n+\n+    public static final String PARAM_EVENT = \"event\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(EvalEventBasedRuleComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class EvalEventBasedRuleComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(EvalEventBasedRuleComputation.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0NDE3MA=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njc1NDM0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/ProcessRetentionEventAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoyNzoxNlrOFca7Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoyNzoxNlrOFca7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0NTYyMg==", "bodyText": "this field is unused or it is here to be exposed to an external use", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365345622", "createdAt": "2020-01-10T17:27:16Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/ProcessRetentionEventAction.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.repository.RepositoryService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to retrieve event-based retention rules. For each rule, a\n+ * #{@link org.nuxeo.retention.actions.EvalInputEventBasedRuleAction} is scheduled.\n+ *\n+ * @since 11.1\n+ */\n+public class ProcessRetentionEventAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"processRetentionEvent\";\n+\n+    public static final String PARAM_EVENT = \"event\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njc1ODI0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/ProcessRetentionEventAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoyODozOVrOFca9sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzoyODozOVrOFca9sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0NjIyNA==", "bodyText": "add private -> private static final Logger log ...", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365346224", "createdAt": "2020-01-10T17:28:39Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/ProcessRetentionEventAction.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.repository.RepositoryService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to retrieve event-based retention rules. For each rule, a\n+ * #{@link org.nuxeo.retention.actions.EvalInputEventBasedRuleAction} is scheduled.\n+ *\n+ * @since 11.1\n+ */\n+public class ProcessRetentionEventAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"processRetentionEvent\";\n+\n+    public static final String PARAM_EVENT = \"event\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(EvalEventBasedRuleComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class EvalEventBasedRuleComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(EvalEventBasedRuleComputation.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njc2MjAyOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzozMDoxNFrOFcbAMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozMzo0NFrOFe-kKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0Njg2NA==", "bodyText": "you can use a static import for more readability. wdty ;)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365346864", "createdAt": "2020-01-10T17:30:14Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to evaluate expression on record documents with an attached event-based retention rule. Depending on the\n+ * expression evaluation outcome, a determinate retention period is computed and set on the record document.\n+ *\n+ * @since 11.1\n+ */\n+public class EvalInputEventBasedRuleAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"evalInputEventBasedRule\";\n+\n+    public static final String PARAM_EVENT = \"event\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(EvalEventBasedRuleComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class EvalEventBasedRuleComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(EvalEventBasedRuleComputation.class);\n+\n+        protected boolean disableAudit;\n+\n+        protected RetentionManager retentionManager;\n+\n+        public EvalEventBasedRuleComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER);\n+            disableAudit = auditParam != null && Boolean.parseBoolean(auditParam.toString());\n+            retentionManager = Framework.getService(RetentionManager.class);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            for (DocumentModel recordDoc : loadDocuments(session, ids)) {\n+                if (!recordDoc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+                    log.debug(\"Document {} is not a record, ignoring ...\", recordDoc::getPathAsString);\n+                    continue;\n+                }\n+\n+                Record record = recordDoc.getAdapter(Record.class);\n+                if (!record.isRetainUntilInderterminate()) {\n+                    log.debug(\"Record {} has already a determinate retention date {}, ignoring ...\",\n+                            recordDoc::getPathAsString,\n+                            () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(recordDoc.getRetainUntil()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNjY2NA==", "bodyText": "Not sure, DEFAULT_DATE_FORMAT by itself wouldn't give much context about which default. I'll probably change this to a standard ISO formatter later anyway.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368026664", "createdAt": "2020-01-17T16:33:44Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to evaluate expression on record documents with an attached event-based retention rule. Depending on the\n+ * expression evaluation outcome, a determinate retention period is computed and set on the record document.\n+ *\n+ * @since 11.1\n+ */\n+public class EvalInputEventBasedRuleAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"evalInputEventBasedRule\";\n+\n+    public static final String PARAM_EVENT = \"event\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(EvalEventBasedRuleComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class EvalEventBasedRuleComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(EvalEventBasedRuleComputation.class);\n+\n+        protected boolean disableAudit;\n+\n+        protected RetentionManager retentionManager;\n+\n+        public EvalEventBasedRuleComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER);\n+            disableAudit = auditParam != null && Boolean.parseBoolean(auditParam.toString());\n+            retentionManager = Framework.getService(RetentionManager.class);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            for (DocumentModel recordDoc : loadDocuments(session, ids)) {\n+                if (!recordDoc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+                    log.debug(\"Document {} is not a record, ignoring ...\", recordDoc::getPathAsString);\n+                    continue;\n+                }\n+\n+                Record record = recordDoc.getAdapter(Record.class);\n+                if (!record.isRetainUntilInderterminate()) {\n+                    log.debug(\"Record {} has already a determinate retention date {}, ignoring ...\",\n+                            recordDoc::getPathAsString,\n+                            () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(recordDoc.getRetainUntil()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0Njg2NA=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTE4NTA3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/HoldDocumentsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTowNToyMVrOFcwU8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTowNToyMVrOFcwU8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY5NjI0Mw==", "bodyText": "cast is not needed.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365696243", "createdAt": "2020-01-13T09:05:21Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/HoldDocumentsAction.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to set legal hold.\n+ *\n+ * @since 11.1\n+ */\n+public class HoldDocumentsAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"holdDocumentsAction\";\n+\n+    public static final String PARAM_DESC = \"description\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(SetLegalHoldComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class SetLegalHoldComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(SetLegalHoldComputation.class);\n+\n+        protected String description;\n+\n+        public SetLegalHoldComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            description = (String) command.getParam(PARAM_DESC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTE4NTYxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/HoldDocumentsAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTowNTozNVrOFcwVPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozNDozMFrOFe-loA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY5NjMxOQ==", "bodyText": "add private on the logger field", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365696319", "createdAt": "2020-01-13T09:05:35Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/HoldDocumentsAction.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to set legal hold.\n+ *\n+ * @since 11.1\n+ */\n+public class HoldDocumentsAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"holdDocumentsAction\";\n+\n+    public static final String PARAM_DESC = \"description\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(SetLegalHoldComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class SetLegalHoldComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(SetLegalHoldComputation.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNzA0MA==", "bodyText": "Actually unused, removed.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368027040", "createdAt": "2020-01-17T16:34:30Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/HoldDocumentsAction.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to set legal hold.\n+ *\n+ * @since 11.1\n+ */\n+public class HoldDocumentsAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"holdDocumentsAction\";\n+\n+    public static final String PARAM_DESC = \"description\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(SetLegalHoldComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class SetLegalHoldComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(SetLegalHoldComputation.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY5NjMxOQ=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTE5MjE3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTowODoxOFrOFcwZIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTowODoxOFrOFcwZIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY5NzMxMw==", "bodyText": "seems unused", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365697313", "createdAt": "2020-01-13T09:08:18Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to unset legal hold.\n+ *\n+ * @since 11.1\n+ */\n+public class UnholdDocumentsAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"unholdDocumentsAction\";\n+\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(SetLegalHoldComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class SetLegalHoldComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(SetLegalHoldComputation.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTE5NTQ3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTowOTo0NVrOFcwbJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTowOTo0NVrOFcwbJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY5NzgyOA==", "bodyText": "semicolon not needed at line 74", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365697828", "createdAt": "2020-01-13T09:09:45Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to unset legal hold.\n+ *\n+ * @since 11.1\n+ */\n+public class UnholdDocumentsAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"unholdDocumentsAction\";\n+\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(SetLegalHoldComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class SetLegalHoldComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(SetLegalHoldComputation.class);\n+\n+        public SetLegalHoldComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            ids.stream()\n+               .map(id -> new IdRef(id))\n+               .filter((docRef) -> session.hasLegalHold(docRef)\n+                       && session.hasPermission(docRef, SecurityConstants.MANAGE_LEGAL_HOLD))\n+               .forEach((docRef) -> {\n+                   session.setLegalHold(docRef, false, null);\n+               });\n+            ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTIwNDEzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOToxMzoyNVrOFcwgXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOToxMzoyNVrOFcwgXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY5OTE2Ng==", "bodyText": "can be replace by map(IdRef::new)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365699166", "createdAt": "2020-01-13T09:13:25Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to unset legal hold.\n+ *\n+ * @since 11.1\n+ */\n+public class UnholdDocumentsAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"unholdDocumentsAction\";\n+\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(SetLegalHoldComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class SetLegalHoldComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(SetLegalHoldComputation.class);\n+\n+        public SetLegalHoldComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            ids.stream()\n+               .map(id -> new IdRef(id))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTIwNzM4OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOToxNDo0NFrOFcwiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozOToxMlrOFe-ugw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY5OTY0OA==", "bodyText": "curly bracket and parenthesis are not needed => ....forEach(docRef -> session.setLegalHold(docRef, false, null))", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365699648", "createdAt": "2020-01-13T09:14:44Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to unset legal hold.\n+ *\n+ * @since 11.1\n+ */\n+public class UnholdDocumentsAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"unholdDocumentsAction\";\n+\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(SetLegalHoldComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class SetLegalHoldComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(SetLegalHoldComputation.class);\n+\n+        public SetLegalHoldComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            ids.stream()\n+               .map(id -> new IdRef(id))\n+               .filter((docRef) -> session.hasLegalHold(docRef)\n+                       && session.hasPermission(docRef, SecurityConstants.MANAGE_LEGAL_HOLD))\n+               .forEach((docRef) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwMDI0OA==", "bodyText": "at the end we can replace it by:\n               ids.stream()\n                    .map(IdRef::new)\n                    .filter(session::hasLegalHold)\n                    .forEach(docRef -> session.setLegalHold(docRef, false, null));\n\nbecause permissions are checked at AbstractSession level even for the read see  here and here", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365700248", "createdAt": "2020-01-13T09:16:16Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to unset legal hold.\n+ *\n+ * @since 11.1\n+ */\n+public class UnholdDocumentsAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"unholdDocumentsAction\";\n+\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(SetLegalHoldComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class SetLegalHoldComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(SetLegalHoldComputation.class);\n+\n+        public SetLegalHoldComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            ids.stream()\n+               .map(id -> new IdRef(id))\n+               .filter((docRef) -> session.hasLegalHold(docRef)\n+                       && session.hasPermission(docRef, SecurityConstants.MANAGE_LEGAL_HOLD))\n+               .forEach((docRef) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY5OTY0OA=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyOTMxNQ==", "bodyText": "But we want to skip those we can't manage, not throw an exception when we encounter them.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368029315", "createdAt": "2020-01-17T16:39:12Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to unset legal hold.\n+ *\n+ * @since 11.1\n+ */\n+public class UnholdDocumentsAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"unholdDocumentsAction\";\n+\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(SetLegalHoldComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class SetLegalHoldComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(SetLegalHoldComputation.class);\n+\n+        public SetLegalHoldComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            ids.stream()\n+               .map(id -> new IdRef(id))\n+               .filter((docRef) -> session.hasLegalHold(docRef)\n+                       && session.hasPermission(docRef, SecurityConstants.MANAGE_LEGAL_HOLD))\n+               .forEach((docRef) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY5OTY0OA=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTIzMzE0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOToyNDo1NFrOFcwxpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOToyNDo1NFrOFcwxpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwMzU4OQ==", "bodyText": "parentheses are not need on (docRef) for more details see https://rules.sonarsource.com/java/RSPEC-1611", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365703589", "createdAt": "2020-01-13T09:24:54Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to unset legal hold.\n+ *\n+ * @since 11.1\n+ */\n+public class UnholdDocumentsAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"unholdDocumentsAction\";\n+\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(SetLegalHoldComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class SetLegalHoldComputation extends AbstractBulkComputation {\n+\n+        static final Logger log = LogManager.getLogger(SetLegalHoldComputation.class);\n+\n+        public SetLegalHoldComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            ids.stream()\n+               .map(id -> new IdRef(id))\n+               .filter((docRef) -> session.hasLegalHold(docRef)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTI2NzM5OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTozNjo0N1rOFcxFww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0MDoxM1rOFe-wXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwODczOQ==", "bodyText": "can be replaced for one element on the list by return Collections.singletonList((String) propertyValue);", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365708739", "createdAt": "2020-01-13T09:36:47Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyOTc5MQ==", "bodyText": "That isn't shorter.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368029791", "createdAt": "2020-01-17T16:40:13Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwODczOQ=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTI5NDE3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOTo0NTo0MlrOFcxVtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1Njo1OFrOFe_QDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxMjgyMA==", "bodyText": "body method can be replaced by the use of  Objects.equals(CoreSession.RETAIN_UNTIL_INDETERMINATE, retainUntil.getTimeInMillis());", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365712820", "createdAt": "2020-01-13T09:45:42Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetainUntilInderterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        return retainUntil != null\n+                ? CoreSession.RETAIN_UNTIL_INDETERMINATE.getTimeInMillis() == retainUntil.getTimeInMillis()\n+                : false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMTQyNQ==", "bodyText": "Hm no not at all. That would NPE if retainUntil is null.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368031425", "createdAt": "2020-01-17T16:43:37Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetainUntilInderterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        return retainUntil != null\n+                ? CoreSession.RETAIN_UNTIL_INDETERMINATE.getTimeInMillis() == retainUntil.getTimeInMillis()\n+                : false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxMjgyMA=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNzkwMg==", "bodyText": "i agree sorry about it :)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368037902", "createdAt": "2020-01-17T16:56:58Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetainUntilInderterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        return retainUntil != null\n+                ? CoreSession.RETAIN_UNTIL_INDETERMINATE.getTimeInMillis() == retainUntil.getTimeInMillis()\n+                : false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxMjgyMA=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM0NTc0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowMzowMFrOFcx0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0Nzo1NVrOFe-_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMDYyMQ==", "bodyText": "i am wondering why we don't use directly the getDocument().isUnderRetentionOrLegalHold() because the second check  (retainUntil = getDocument().getRetainUntil()) == null || !Calendar.getInstance().before(retainUntil); is already covered by getDocument().isUnderRetentionOrLegalHold() or perhaps the need is to be sure that we was under retention and the data now is in the past and in this case  getDocument().getRetainUntil()) should be different from null", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365720621", "createdAt": "2020-01-13T10:03:00Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetainUntilInderterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        return retainUntil != null\n+                ? CoreSession.RETAIN_UNTIL_INDETERMINATE.getTimeInMillis() == retainUntil.getTimeInMillis()\n+                : false;\n+    }\n+\n+    public boolean isRetentionExpired() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return true;\n+        }\n+        Calendar retainUntil;\n+        return (retainUntil = getDocument().getRetainUntil()) == null || !Calendar.getInstance().before(retainUntil);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMzYxOQ==", "bodyText": "This checks only retention expiration, whereas isUnderRetentionOrLegalHold can also return true when there's a legal hold.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368033619", "createdAt": "2020-01-17T16:47:55Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetainUntilInderterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        return retainUntil != null\n+                ? CoreSession.RETAIN_UNTIL_INDETERMINATE.getTimeInMillis() == retainUntil.getTimeInMillis()\n+                : false;\n+    }\n+\n+    public boolean isRetentionExpired() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return true;\n+        }\n+        Calendar retainUntil;\n+        return (retainUntil = getDocument().getRetainUntil()) == null || !Calendar.getInstance().before(retainUntil);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMDYyMQ=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM1NjkxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNjo1NFrOFcx6zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1MDozOVrOFe_EWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMjMxNw==", "bodyText": "should use CoreSession#setRetainUtil which checks the permissions before setting the value, and the method can  be replaced by document.getCoreSession().setRetainUntil(getDocument().getRef(), retainUntil, null); but we should ensure that the document.getCorSession() is not null", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365722317", "createdAt": "2020-01-13T10:06:54Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetainUntilInderterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        return retainUntil != null\n+                ? CoreSession.RETAIN_UNTIL_INDETERMINATE.getTimeInMillis() == retainUntil.getTimeInMillis()\n+                : false;\n+    }\n+\n+    public boolean isRetentionExpired() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return true;\n+        }\n+        Calendar retainUntil;\n+        return (retainUntil = getDocument().getRetainUntil()) == null || !Calendar.getInstance().before(retainUntil);\n+    }\n+\n+    protected void save(CoreSession session) {\n+        document.putContextData(DublinCoreListener.DISABLE_DUBLINCORE_LISTENER, true);\n+        document.putContextData(NotificationConstants.DISABLE_NOTIFICATION_SERVICE, true);\n+        document.putContextData(NXAuditEventsService.DISABLE_AUDIT_LOGGER, true);\n+        document.putContextData(VersioningService.DISABLE_AUTO_CHECKOUT, true);\n+        document.putContextData(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE, true);\n+        session.saveDocument(document);\n+        document.putContextData(DublinCoreListener.DISABLE_DUBLINCORE_LISTENER, null);\n+        document.putContextData(NotificationConstants.DISABLE_NOTIFICATION_SERVICE, null);\n+        document.putContextData(NXAuditEventsService.DISABLE_AUDIT_LOGGER, null);\n+        document.putContextData(VersioningService.DISABLE_AUTO_CHECKOUT, null);\n+        document.getContextData().remove(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE);\n+    }\n+\n+    public void saveRetainUntil(Calendar retainUntil) {\n+        document.setPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP, retainUntil);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNDkwNQ==", "bodyText": "But this is an adapter for the current document, and the RETAIN_UNTIL_PROP here is not the low-level one you're thinking about.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368034905", "createdAt": "2020-01-17T16:50:39Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetainUntilInderterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        return retainUntil != null\n+                ? CoreSession.RETAIN_UNTIL_INDETERMINATE.getTimeInMillis() == retainUntil.getTimeInMillis()\n+                : false;\n+    }\n+\n+    public boolean isRetentionExpired() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return true;\n+        }\n+        Calendar retainUntil;\n+        return (retainUntil = getDocument().getRetainUntil()) == null || !Calendar.getInstance().before(retainUntil);\n+    }\n+\n+    protected void save(CoreSession session) {\n+        document.putContextData(DublinCoreListener.DISABLE_DUBLINCORE_LISTENER, true);\n+        document.putContextData(NotificationConstants.DISABLE_NOTIFICATION_SERVICE, true);\n+        document.putContextData(NXAuditEventsService.DISABLE_AUDIT_LOGGER, true);\n+        document.putContextData(VersioningService.DISABLE_AUTO_CHECKOUT, true);\n+        document.putContextData(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE, true);\n+        session.saveDocument(document);\n+        document.putContextData(DublinCoreListener.DISABLE_DUBLINCORE_LISTENER, null);\n+        document.putContextData(NotificationConstants.DISABLE_NOTIFICATION_SERVICE, null);\n+        document.putContextData(NXAuditEventsService.DISABLE_AUDIT_LOGGER, null);\n+        document.putContextData(VersioningService.DISABLE_AUTO_CHECKOUT, null);\n+        document.getContextData().remove(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE);\n+    }\n+\n+    public void saveRetainUntil(Calendar retainUntil) {\n+        document.setPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP, retainUntil);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMjMxNw=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM1ODQ4OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNzozMVrOFcx75A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNzozMVrOFcx75A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMjU5Ng==", "bodyText": "end break line at the end of the file.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365722596", "createdAt": "2020-01-13T10:07:31Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetainUntilInderterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        return retainUntil != null\n+                ? CoreSession.RETAIN_UNTIL_INDETERMINATE.getTimeInMillis() == retainUntil.getTimeInMillis()\n+                : false;\n+    }\n+\n+    public boolean isRetentionExpired() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return true;\n+        }\n+        Calendar retainUntil;\n+        return (retainUntil = getDocument().getRetainUntil()) == null || !Calendar.getInstance().before(retainUntil);\n+    }\n+\n+    protected void save(CoreSession session) {\n+        document.putContextData(DublinCoreListener.DISABLE_DUBLINCORE_LISTENER, true);\n+        document.putContextData(NotificationConstants.DISABLE_NOTIFICATION_SERVICE, true);\n+        document.putContextData(NXAuditEventsService.DISABLE_AUDIT_LOGGER, true);\n+        document.putContextData(VersioningService.DISABLE_AUTO_CHECKOUT, true);\n+        document.putContextData(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE, true);\n+        session.saveDocument(document);\n+        document.putContextData(DublinCoreListener.DISABLE_DUBLINCORE_LISTENER, null);\n+        document.putContextData(NotificationConstants.DISABLE_NOTIFICATION_SERVICE, null);\n+        document.putContextData(NXAuditEventsService.DISABLE_AUDIT_LOGGER, null);\n+        document.putContextData(VersioningService.DISABLE_AUTO_CHECKOUT, null);\n+        document.getContextData().remove(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE);\n+    }\n+\n+    public void saveRetainUntil(Calendar retainUntil) {\n+        document.setPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP, retainUntil);\n+    }\n+\n+    public void setRule(RetentionRule rule, CoreSession session) {\n+        setRuleIds(Arrays.asList(rule.getDocument().getId()));\n+        save(session);\n+    }\n+\n+    protected void setRuleIds(final List<String> ruleIds) {\n+        document.setPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP, (Serializable) ruleIds);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM3NTc5OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDoxMzoxNlrOFcyGJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDoxMzoxNlrOFcyGJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyNTIyMg==", "bodyText": "can be replaced by return Collections.singletonList((String)propertyValue);", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365725222", "createdAt": "2020-01-13T10:13:16Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionRule {\n+\n+    public enum ApplicationPolicy {\n+        AUTO, MANUAL\n+    }\n+\n+    public enum StartingPointPolicy {\n+        IMMEDIATE, AFTER_DELAY, EVENT_BASED, METADATA_BASED\n+    }\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public RetentionRule(DocumentModel doc) {\n+        this.document = doc;\n+    }\n+\n+    public void disable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, false);\n+    }\n+\n+    public void enable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, true);\n+    }\n+\n+    public String getApplicationPolicy() {\n+        return (String) document.getPropertyValue(RetentionConstants.APPLICATION_POLICY_PROP);\n+    }\n+\n+    public List<String> getBeginActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.BEGIN_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public List<String> getDocTypes() {\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> propertyValue = (List<String>) document.getPropertyValue(RetentionConstants.DOC_TYPES_PROP);\n+        return propertyValue;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public Long getDurationDays() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_DAYS_PROP);\n+    }\n+\n+    public Long getDurationMillis() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MILLIS_PROP);\n+    }\n+\n+    public Long getDurationMonths() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MONTHS_PROP);\n+    }\n+\n+    public Long getDurationYears() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_YEARS_PROP);\n+    }\n+\n+    public List<String> getEndActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.END_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM4NDQxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDoxNjoyM1rOFcyLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDoxNjoyM1rOFcyLVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyNjU1MA==", "bodyText": "1000000 -> 1_000_000, and i think we can replace plusNanos(getDurationMillis() * 1000000) by  .plus(getDurationMillis(), ChronoUnit.MILLIS); wdyt", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365726550", "createdAt": "2020-01-13T10:16:23Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionRule {\n+\n+    public enum ApplicationPolicy {\n+        AUTO, MANUAL\n+    }\n+\n+    public enum StartingPointPolicy {\n+        IMMEDIATE, AFTER_DELAY, EVENT_BASED, METADATA_BASED\n+    }\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public RetentionRule(DocumentModel doc) {\n+        this.document = doc;\n+    }\n+\n+    public void disable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, false);\n+    }\n+\n+    public void enable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, true);\n+    }\n+\n+    public String getApplicationPolicy() {\n+        return (String) document.getPropertyValue(RetentionConstants.APPLICATION_POLICY_PROP);\n+    }\n+\n+    public List<String> getBeginActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.BEGIN_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public List<String> getDocTypes() {\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> propertyValue = (List<String>) document.getPropertyValue(RetentionConstants.DOC_TYPES_PROP);\n+        return propertyValue;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public Long getDurationDays() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_DAYS_PROP);\n+    }\n+\n+    public Long getDurationMillis() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MILLIS_PROP);\n+    }\n+\n+    public Long getDurationMonths() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MONTHS_PROP);\n+    }\n+\n+    public Long getDurationYears() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_YEARS_PROP);\n+    }\n+\n+    public List<String> getEndActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.END_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public String getExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.EXPRESSION_PROP);\n+    }\n+\n+    public String getMetadataXpath() {\n+        return (String) document.getPropertyValue(RetentionConstants.METADATA_XPATH_PROP);\n+    }\n+\n+    public Calendar getRetainUntilDateFrom(Calendar calendar) {\n+        LocalDateTime datetime = LocalDateTime.ofInstant(calendar.getTime().toInstant(), ZoneId.systemDefault());\n+        return getRetainUntilDateFrom(datetime);\n+    }\n+\n+    protected Calendar getRetainUntilDateFrom(LocalDateTime datetime) {\n+        LocalDateTime localDateTime = datetime.plusYears(getDurationYears())\n+                                              .plusMonths(getDurationMonths())\n+                                              .plusDays(getDurationDays())\n+                                              .plusNanos(getDurationMillis() * 1000000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQwNjIxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDoyMzo0NVrOFcyX8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1NToxNFrOFe_M6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyOTc3OQ==", "bodyText": "can we make a new variable from datetime parameter to enforce immutability and defensive copy = > LocalDateTime localDateTime = LocalDateTime.from(datetime);", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365729779", "createdAt": "2020-01-13T10:23:45Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionRule {\n+\n+    public enum ApplicationPolicy {\n+        AUTO, MANUAL\n+    }\n+\n+    public enum StartingPointPolicy {\n+        IMMEDIATE, AFTER_DELAY, EVENT_BASED, METADATA_BASED\n+    }\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public RetentionRule(DocumentModel doc) {\n+        this.document = doc;\n+    }\n+\n+    public void disable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, false);\n+    }\n+\n+    public void enable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, true);\n+    }\n+\n+    public String getApplicationPolicy() {\n+        return (String) document.getPropertyValue(RetentionConstants.APPLICATION_POLICY_PROP);\n+    }\n+\n+    public List<String> getBeginActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.BEGIN_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public List<String> getDocTypes() {\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> propertyValue = (List<String>) document.getPropertyValue(RetentionConstants.DOC_TYPES_PROP);\n+        return propertyValue;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public Long getDurationDays() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_DAYS_PROP);\n+    }\n+\n+    public Long getDurationMillis() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MILLIS_PROP);\n+    }\n+\n+    public Long getDurationMonths() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MONTHS_PROP);\n+    }\n+\n+    public Long getDurationYears() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_YEARS_PROP);\n+    }\n+\n+    public List<String> getEndActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.END_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public String getExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.EXPRESSION_PROP);\n+    }\n+\n+    public String getMetadataXpath() {\n+        return (String) document.getPropertyValue(RetentionConstants.METADATA_XPATH_PROP);\n+    }\n+\n+    public Calendar getRetainUntilDateFrom(Calendar calendar) {\n+        LocalDateTime datetime = LocalDateTime.ofInstant(calendar.getTime().toInstant(), ZoneId.systemDefault());\n+        return getRetainUntilDateFrom(datetime);\n+    }\n+\n+    protected Calendar getRetainUntilDateFrom(LocalDateTime datetime) {\n+        LocalDateTime localDateTime = datetime.plusYears(getDurationYears())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNzA5Ng==", "bodyText": "They're already immutable, plusYears and friends already return a copy.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368037096", "createdAt": "2020-01-17T16:55:14Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionRule {\n+\n+    public enum ApplicationPolicy {\n+        AUTO, MANUAL\n+    }\n+\n+    public enum StartingPointPolicy {\n+        IMMEDIATE, AFTER_DELAY, EVENT_BASED, METADATA_BASED\n+    }\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public RetentionRule(DocumentModel doc) {\n+        this.document = doc;\n+    }\n+\n+    public void disable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, false);\n+    }\n+\n+    public void enable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, true);\n+    }\n+\n+    public String getApplicationPolicy() {\n+        return (String) document.getPropertyValue(RetentionConstants.APPLICATION_POLICY_PROP);\n+    }\n+\n+    public List<String> getBeginActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.BEGIN_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public List<String> getDocTypes() {\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> propertyValue = (List<String>) document.getPropertyValue(RetentionConstants.DOC_TYPES_PROP);\n+        return propertyValue;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public Long getDurationDays() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_DAYS_PROP);\n+    }\n+\n+    public Long getDurationMillis() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MILLIS_PROP);\n+    }\n+\n+    public Long getDurationMonths() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MONTHS_PROP);\n+    }\n+\n+    public Long getDurationYears() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_YEARS_PROP);\n+    }\n+\n+    public List<String> getEndActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.END_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public String getExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.EXPRESSION_PROP);\n+    }\n+\n+    public String getMetadataXpath() {\n+        return (String) document.getPropertyValue(RetentionConstants.METADATA_XPATH_PROP);\n+    }\n+\n+    public Calendar getRetainUntilDateFrom(Calendar calendar) {\n+        LocalDateTime datetime = LocalDateTime.ofInstant(calendar.getTime().toInstant(), ZoneId.systemDefault());\n+        return getRetainUntilDateFrom(datetime);\n+    }\n+\n+    protected Calendar getRetainUntilDateFrom(LocalDateTime datetime) {\n+        LocalDateTime localDateTime = datetime.plusYears(getDurationYears())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyOTc3OQ=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQyNTI5OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDozMDoyOFrOFcyjWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDozMDoyOFrOFcyjWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTczMjY5Ng==", "bodyText": "isAfterDely -> isAfterDelay", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365732696", "createdAt": "2020-01-13T10:30:28Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionRule {\n+\n+    public enum ApplicationPolicy {\n+        AUTO, MANUAL\n+    }\n+\n+    public enum StartingPointPolicy {\n+        IMMEDIATE, AFTER_DELAY, EVENT_BASED, METADATA_BASED\n+    }\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public RetentionRule(DocumentModel doc) {\n+        this.document = doc;\n+    }\n+\n+    public void disable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, false);\n+    }\n+\n+    public void enable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, true);\n+    }\n+\n+    public String getApplicationPolicy() {\n+        return (String) document.getPropertyValue(RetentionConstants.APPLICATION_POLICY_PROP);\n+    }\n+\n+    public List<String> getBeginActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.BEGIN_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public List<String> getDocTypes() {\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> propertyValue = (List<String>) document.getPropertyValue(RetentionConstants.DOC_TYPES_PROP);\n+        return propertyValue;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public Long getDurationDays() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_DAYS_PROP);\n+    }\n+\n+    public Long getDurationMillis() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MILLIS_PROP);\n+    }\n+\n+    public Long getDurationMonths() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MONTHS_PROP);\n+    }\n+\n+    public Long getDurationYears() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_YEARS_PROP);\n+    }\n+\n+    public List<String> getEndActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.END_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public String getExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.EXPRESSION_PROP);\n+    }\n+\n+    public String getMetadataXpath() {\n+        return (String) document.getPropertyValue(RetentionConstants.METADATA_XPATH_PROP);\n+    }\n+\n+    public Calendar getRetainUntilDateFrom(Calendar calendar) {\n+        LocalDateTime datetime = LocalDateTime.ofInstant(calendar.getTime().toInstant(), ZoneId.systemDefault());\n+        return getRetainUntilDateFrom(datetime);\n+    }\n+\n+    protected Calendar getRetainUntilDateFrom(LocalDateTime datetime) {\n+        LocalDateTime localDateTime = datetime.plusYears(getDurationYears())\n+                                              .plusMonths(getDurationMonths())\n+                                              .plusDays(getDurationDays())\n+                                              .plusNanos(getDurationMillis() * 1000000);\n+        return GregorianCalendar.from(localDateTime.atZone(ZoneId.systemDefault()));\n+    }\n+\n+    public Calendar getRetainUntilDateFromNow() {\n+        return getRetainUntilDateFrom(LocalDateTime.now());\n+    }\n+\n+    public String getStartingPointEvent() {\n+        return (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_EVENT_PROP);\n+    }\n+\n+    public String getStartingPointExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_EXPRESSION_PROP);\n+    }\n+\n+    public StartingPointPolicy getStartingPointPolicy() {\n+        String value = (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_POLICY_PROP);\n+        if (value != null) {\n+            return StartingPointPolicy.valueOf(value.toUpperCase());\n+        }\n+        return null;\n+\n+    }\n+\n+    public boolean isAfterDely() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQ2OTkzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo0NjowNFrOFcy9Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzowODowMFrOFe_jOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTczOTI3OA==", "bodyText": "as getStartingPointPolicy returns the enum we can use directly the == operator instead of equals and i think getStartingPointPolicy can be adapted to be part of the enum itself  and i will see the enum improved with:\n    public enum StartingPointPolicy {\n        IMMEDIATE, AFTER_DELAY, EVENT_BASED, METADATA_BASED;\n\n        public static StartingPointPolicy fromValue(String value) {\n            if (value != null) {\n                return StartingPointPolicy.valueOf(value.toUpperCase());\n            }\n            return null;\n        }\n\n        public static StartingPointPolicy fromDocument(DocumentModel document) {\n            if (document != null) {\n                return fromValue((String) document.getPropertyValue(RetentionConstants.STARTING_POINT_POLICY_PROP));\n            }\n            return null;\n        }\n    }\n\nand the call\npublic boolean isAfterDely() {\n        return AFTER_DELAY == StartingPointPolicy.fromDocument(document);\n    }\n\nwdyt,  we can ask the team for more feedbacks ;)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365739278", "createdAt": "2020-01-13T10:46:04Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionRule {\n+\n+    public enum ApplicationPolicy {\n+        AUTO, MANUAL\n+    }\n+\n+    public enum StartingPointPolicy {\n+        IMMEDIATE, AFTER_DELAY, EVENT_BASED, METADATA_BASED\n+    }\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public RetentionRule(DocumentModel doc) {\n+        this.document = doc;\n+    }\n+\n+    public void disable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, false);\n+    }\n+\n+    public void enable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, true);\n+    }\n+\n+    public String getApplicationPolicy() {\n+        return (String) document.getPropertyValue(RetentionConstants.APPLICATION_POLICY_PROP);\n+    }\n+\n+    public List<String> getBeginActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.BEGIN_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public List<String> getDocTypes() {\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> propertyValue = (List<String>) document.getPropertyValue(RetentionConstants.DOC_TYPES_PROP);\n+        return propertyValue;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public Long getDurationDays() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_DAYS_PROP);\n+    }\n+\n+    public Long getDurationMillis() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MILLIS_PROP);\n+    }\n+\n+    public Long getDurationMonths() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MONTHS_PROP);\n+    }\n+\n+    public Long getDurationYears() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_YEARS_PROP);\n+    }\n+\n+    public List<String> getEndActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.END_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public String getExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.EXPRESSION_PROP);\n+    }\n+\n+    public String getMetadataXpath() {\n+        return (String) document.getPropertyValue(RetentionConstants.METADATA_XPATH_PROP);\n+    }\n+\n+    public Calendar getRetainUntilDateFrom(Calendar calendar) {\n+        LocalDateTime datetime = LocalDateTime.ofInstant(calendar.getTime().toInstant(), ZoneId.systemDefault());\n+        return getRetainUntilDateFrom(datetime);\n+    }\n+\n+    protected Calendar getRetainUntilDateFrom(LocalDateTime datetime) {\n+        LocalDateTime localDateTime = datetime.plusYears(getDurationYears())\n+                                              .plusMonths(getDurationMonths())\n+                                              .plusDays(getDurationDays())\n+                                              .plusNanos(getDurationMillis() * 1000000);\n+        return GregorianCalendar.from(localDateTime.atZone(ZoneId.systemDefault()));\n+    }\n+\n+    public Calendar getRetainUntilDateFromNow() {\n+        return getRetainUntilDateFrom(LocalDateTime.now());\n+    }\n+\n+    public String getStartingPointEvent() {\n+        return (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_EVENT_PROP);\n+    }\n+\n+    public String getStartingPointExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_EXPRESSION_PROP);\n+    }\n+\n+    public StartingPointPolicy getStartingPointPolicy() {\n+        String value = (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_POLICY_PROP);\n+        if (value != null) {\n+            return StartingPointPolicy.valueOf(value.toUpperCase());\n+        }\n+        return null;\n+\n+    }\n+\n+    public boolean isAfterDely() {\n+        return StartingPointPolicy.AFTER_DELAY.equals(getStartingPointPolicy());\n+    }\n+\n+    public boolean isAuto() {\n+        return ApplicationPolicy.AUTO.name().toLowerCase().equals(getApplicationPolicy());\n+    }\n+\n+    public boolean isDocTypeAccepted(String docType) {\n+        List<String> types = getDocTypes();\n+        return types == null || types.isEmpty() || types.contains(docType);\n+    }\n+\n+    public boolean isEnabled() {\n+        return (boolean) document.getPropertyValue(RetentionConstants.ENABLED_PROP);\n+    }\n+\n+    public boolean isEventBased() {\n+        return StartingPointPolicy.EVENT_BASED.equals(getStartingPointPolicy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0MjgxMA==", "bodyText": "Ok for ==, I'll refactor the upper/lower stuff later it's rather ugly.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368042810", "createdAt": "2020-01-17T17:08:00Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionRule {\n+\n+    public enum ApplicationPolicy {\n+        AUTO, MANUAL\n+    }\n+\n+    public enum StartingPointPolicy {\n+        IMMEDIATE, AFTER_DELAY, EVENT_BASED, METADATA_BASED\n+    }\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public RetentionRule(DocumentModel doc) {\n+        this.document = doc;\n+    }\n+\n+    public void disable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, false);\n+    }\n+\n+    public void enable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, true);\n+    }\n+\n+    public String getApplicationPolicy() {\n+        return (String) document.getPropertyValue(RetentionConstants.APPLICATION_POLICY_PROP);\n+    }\n+\n+    public List<String> getBeginActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.BEGIN_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public List<String> getDocTypes() {\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> propertyValue = (List<String>) document.getPropertyValue(RetentionConstants.DOC_TYPES_PROP);\n+        return propertyValue;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public Long getDurationDays() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_DAYS_PROP);\n+    }\n+\n+    public Long getDurationMillis() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MILLIS_PROP);\n+    }\n+\n+    public Long getDurationMonths() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MONTHS_PROP);\n+    }\n+\n+    public Long getDurationYears() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_YEARS_PROP);\n+    }\n+\n+    public List<String> getEndActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.END_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public String getExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.EXPRESSION_PROP);\n+    }\n+\n+    public String getMetadataXpath() {\n+        return (String) document.getPropertyValue(RetentionConstants.METADATA_XPATH_PROP);\n+    }\n+\n+    public Calendar getRetainUntilDateFrom(Calendar calendar) {\n+        LocalDateTime datetime = LocalDateTime.ofInstant(calendar.getTime().toInstant(), ZoneId.systemDefault());\n+        return getRetainUntilDateFrom(datetime);\n+    }\n+\n+    protected Calendar getRetainUntilDateFrom(LocalDateTime datetime) {\n+        LocalDateTime localDateTime = datetime.plusYears(getDurationYears())\n+                                              .plusMonths(getDurationMonths())\n+                                              .plusDays(getDurationDays())\n+                                              .plusNanos(getDurationMillis() * 1000000);\n+        return GregorianCalendar.from(localDateTime.atZone(ZoneId.systemDefault()));\n+    }\n+\n+    public Calendar getRetainUntilDateFromNow() {\n+        return getRetainUntilDateFrom(LocalDateTime.now());\n+    }\n+\n+    public String getStartingPointEvent() {\n+        return (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_EVENT_PROP);\n+    }\n+\n+    public String getStartingPointExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_EXPRESSION_PROP);\n+    }\n+\n+    public StartingPointPolicy getStartingPointPolicy() {\n+        String value = (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_POLICY_PROP);\n+        if (value != null) {\n+            return StartingPointPolicy.valueOf(value.toUpperCase());\n+        }\n+        return null;\n+\n+    }\n+\n+    public boolean isAfterDely() {\n+        return StartingPointPolicy.AFTER_DELAY.equals(getStartingPointPolicy());\n+    }\n+\n+    public boolean isAuto() {\n+        return ApplicationPolicy.AUTO.name().toLowerCase().equals(getApplicationPolicy());\n+    }\n+\n+    public boolean isDocTypeAccepted(String docType) {\n+        List<String> types = getDocTypes();\n+        return types == null || types.isEmpty() || types.contains(docType);\n+    }\n+\n+    public boolean isEnabled() {\n+        return (boolean) document.getPropertyValue(RetentionConstants.ENABLED_PROP);\n+    }\n+\n+    public boolean isEventBased() {\n+        return StartingPointPolicy.EVENT_BASED.equals(getStartingPointPolicy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTczOTI3OA=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQ3NTYzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo0ODowMVrOFczAUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo0ODowMVrOFczAUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDExMw==", "bodyText": "same proposition as above on the three last methods or at least just use ==operator instead equals", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365740113", "createdAt": "2020-01-13T10:48:01Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionRule {\n+\n+    public enum ApplicationPolicy {\n+        AUTO, MANUAL\n+    }\n+\n+    public enum StartingPointPolicy {\n+        IMMEDIATE, AFTER_DELAY, EVENT_BASED, METADATA_BASED\n+    }\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public RetentionRule(DocumentModel doc) {\n+        this.document = doc;\n+    }\n+\n+    public void disable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, false);\n+    }\n+\n+    public void enable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, true);\n+    }\n+\n+    public String getApplicationPolicy() {\n+        return (String) document.getPropertyValue(RetentionConstants.APPLICATION_POLICY_PROP);\n+    }\n+\n+    public List<String> getBeginActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.BEGIN_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public List<String> getDocTypes() {\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> propertyValue = (List<String>) document.getPropertyValue(RetentionConstants.DOC_TYPES_PROP);\n+        return propertyValue;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public Long getDurationDays() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_DAYS_PROP);\n+    }\n+\n+    public Long getDurationMillis() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MILLIS_PROP);\n+    }\n+\n+    public Long getDurationMonths() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_MONTHS_PROP);\n+    }\n+\n+    public Long getDurationYears() {\n+        return (Long) document.getPropertyValue(RetentionConstants.DURATION_YEARS_PROP);\n+    }\n+\n+    public List<String> getEndActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.END_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public String getExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.EXPRESSION_PROP);\n+    }\n+\n+    public String getMetadataXpath() {\n+        return (String) document.getPropertyValue(RetentionConstants.METADATA_XPATH_PROP);\n+    }\n+\n+    public Calendar getRetainUntilDateFrom(Calendar calendar) {\n+        LocalDateTime datetime = LocalDateTime.ofInstant(calendar.getTime().toInstant(), ZoneId.systemDefault());\n+        return getRetainUntilDateFrom(datetime);\n+    }\n+\n+    protected Calendar getRetainUntilDateFrom(LocalDateTime datetime) {\n+        LocalDateTime localDateTime = datetime.plusYears(getDurationYears())\n+                                              .plusMonths(getDurationMonths())\n+                                              .plusDays(getDurationDays())\n+                                              .plusNanos(getDurationMillis() * 1000000);\n+        return GregorianCalendar.from(localDateTime.atZone(ZoneId.systemDefault()));\n+    }\n+\n+    public Calendar getRetainUntilDateFromNow() {\n+        return getRetainUntilDateFrom(LocalDateTime.now());\n+    }\n+\n+    public String getStartingPointEvent() {\n+        return (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_EVENT_PROP);\n+    }\n+\n+    public String getStartingPointExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_EXPRESSION_PROP);\n+    }\n+\n+    public StartingPointPolicy getStartingPointPolicy() {\n+        String value = (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_POLICY_PROP);\n+        if (value != null) {\n+            return StartingPointPolicy.valueOf(value.toUpperCase());\n+        }\n+        return null;\n+\n+    }\n+\n+    public boolean isAfterDely() {\n+        return StartingPointPolicy.AFTER_DELAY.equals(getStartingPointPolicy());\n+    }\n+\n+    public boolean isAuto() {\n+        return ApplicationPolicy.AUTO.name().toLowerCase().equals(getApplicationPolicy());\n+    }\n+\n+    public boolean isDocTypeAccepted(String docType) {\n+        List<String> types = getDocTypes();\n+        return types == null || types.isEmpty() || types.contains(docType);\n+    }\n+\n+    public boolean isEnabled() {\n+        return (boolean) document.getPropertyValue(RetentionConstants.ENABLED_PROP);\n+    }\n+\n+    public boolean isEventBased() {\n+        return StartingPointPolicy.EVENT_BASED.equals(getStartingPointPolicy());\n+    }\n+\n+    public boolean isImmediate() {\n+        return StartingPointPolicy.IMMEDIATE.equals(getStartingPointPolicy());\n+    }\n+\n+    public boolean isManual() {\n+        return ApplicationPolicy.MANUAL.name().toLowerCase().equals(getApplicationPolicy());\n+    }\n+\n+    public boolean isMetadataBased() {\n+        return StartingPointPolicy.METADATA_BASED.equals(getStartingPointPolicy());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQ5MjUxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/event/RetentionEventContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo1Mzo1NFrOFczKbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo1Mzo1NFrOFczKbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MjcwMg==", "bodyText": "i am wondering what if we cast directly instead of the check because  ( return (String)getProperty(RetentionConstants.INPUT_PROPERTY_KEY))if the type is not a string, i think we can find ourself with a non consistent data and this code will returns null and we have the setInput  which will do the insertion correctly", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365742702", "createdAt": "2020-01-13T10:53:54Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/event/RetentionEventContext.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.event;\n+\n+import java.io.Serializable;\n+\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.event.impl.UnboundEventContext;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * Specialized event context for retention events.\n+ *\n+ * @since 11.1\n+ */\n+public class RetentionEventContext extends UnboundEventContext {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public RetentionEventContext(NuxeoPrincipal principal) {\n+        super(principal, null);\n+        setProperty(\"category\", RetentionConstants.EVENT_CATEGORY);\n+    }\n+\n+    public String getInput() {\n+        Serializable input = getProperty(RetentionConstants.INPUT_PROPERTY_KEY);\n+        if (input instanceof String) {\n+            return (String) input;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTUxNjQwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowMjo0N1rOFczZAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowMjo0N1rOFczZAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0NjQzNQ==", "bodyText": "you can use diamond operator\n    Map<String, Set<String>> docsToCheckAndEvents = new HashMap<String, Set<String>>();\n    Map<String, Boolean> documentModifiedIgnored = new HashMap<String, Boolean>();\n\nshould be replaced by\n    Map<String, Set<String>> docsToCheckAndEvents = new HashMap<>();\n     Map<String, Boolean> documentModifiedIgnored = new HashMap<>();", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365746435", "createdAt": "2020-01-13T11:02:47Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.listeners;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventBundle;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.PostCommitFilteringEventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Listener processing events with a {@link org.nuxeo.ecm.core.event.impl.DocumentEventContext}). If the targeted\n+ * document is a record and has an attached event-based, the rule is then evaluated to check if the retention expiration\n+ * date has to be recomputed.\n+ *\n+ * @since 11.1\n+ */\n+public class RetentionDocumentEventListener implements PostCommitFilteringEventListener {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionDocumentEventListener.class);\n+\n+    @Override\n+    public boolean acceptEvent(Event event) {\n+        EventContext eventCtx = event.getContext();\n+        if (!(eventCtx instanceof DocumentEventContext)) {\n+            return false;\n+        }\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        if (retentionManager == null) {\n+            log.trace(\"RetentionManager not started yet?!\");\n+            return false;\n+        }\n+        return retentionManager.getAcceptedEvents().contains(event.getName());\n+    }\n+\n+    @Override\n+    public void handleEvent(EventBundle events) {\n+\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+\n+        Map<String, Set<String>> docsToCheckAndEvents = new HashMap<String, Set<String>>();\n+\n+        Map<String, Boolean> documentModifiedIgnored = new HashMap<String, Boolean>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTUyNDg5OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowNjowOVrOFczeFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowNjowOVrOFczeFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0NzczMw==", "bodyText": "log.trace(\"Proceeding event \" + event.getName()); ->  log.trace(\"Proceeding event {}\" , event::getName);", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365747733", "createdAt": "2020-01-13T11:06:09Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.listeners;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventBundle;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.PostCommitFilteringEventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Listener processing events with a {@link org.nuxeo.ecm.core.event.impl.DocumentEventContext}). If the targeted\n+ * document is a record and has an attached event-based, the rule is then evaluated to check if the retention expiration\n+ * date has to be recomputed.\n+ *\n+ * @since 11.1\n+ */\n+public class RetentionDocumentEventListener implements PostCommitFilteringEventListener {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionDocumentEventListener.class);\n+\n+    @Override\n+    public boolean acceptEvent(Event event) {\n+        EventContext eventCtx = event.getContext();\n+        if (!(eventCtx instanceof DocumentEventContext)) {\n+            return false;\n+        }\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        if (retentionManager == null) {\n+            log.trace(\"RetentionManager not started yet?!\");\n+            return false;\n+        }\n+        return retentionManager.getAcceptedEvents().contains(event.getName());\n+    }\n+\n+    @Override\n+    public void handleEvent(EventBundle events) {\n+\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+\n+        Map<String, Set<String>> docsToCheckAndEvents = new HashMap<String, Set<String>>();\n+\n+        Map<String, Boolean> documentModifiedIgnored = new HashMap<String, Boolean>();\n+        for (Event event : events) {\n+            log.trace(\"Proceeding event \" + event.getName());\n+            EventContext evtCtx = event.getContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTUzMDY2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowODozN1rOFczhnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowODozN1rOFczhnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0ODYzNw==", "bodyText": "log.trace(\"Document is not a record\", doc::getPathAsString); -> log.trace(\"Document {} is not a record\", doc::getPathAsString); --> missing {}", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365748637", "createdAt": "2020-01-13T11:08:37Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.listeners;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventBundle;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.PostCommitFilteringEventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Listener processing events with a {@link org.nuxeo.ecm.core.event.impl.DocumentEventContext}). If the targeted\n+ * document is a record and has an attached event-based, the rule is then evaluated to check if the retention expiration\n+ * date has to be recomputed.\n+ *\n+ * @since 11.1\n+ */\n+public class RetentionDocumentEventListener implements PostCommitFilteringEventListener {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionDocumentEventListener.class);\n+\n+    @Override\n+    public boolean acceptEvent(Event event) {\n+        EventContext eventCtx = event.getContext();\n+        if (!(eventCtx instanceof DocumentEventContext)) {\n+            return false;\n+        }\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        if (retentionManager == null) {\n+            log.trace(\"RetentionManager not started yet?!\");\n+            return false;\n+        }\n+        return retentionManager.getAcceptedEvents().contains(event.getName());\n+    }\n+\n+    @Override\n+    public void handleEvent(EventBundle events) {\n+\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+\n+        Map<String, Set<String>> docsToCheckAndEvents = new HashMap<String, Set<String>>();\n+\n+        Map<String, Boolean> documentModifiedIgnored = new HashMap<String, Boolean>();\n+        for (Event event : events) {\n+            log.trace(\"Proceeding event \" + event.getName());\n+            EventContext evtCtx = event.getContext();\n+            DocumentEventContext docEventCtx = (DocumentEventContext) evtCtx;\n+            DocumentModel doc = docEventCtx.getSourceDocument();\n+            String docId = doc.getId();\n+            if (docEventCtx.getProperties().containsKey(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE)\n+                    && !documentModifiedIgnored.containsKey(docId)) {\n+                // ignore only once per document per bundle, the rule can be attached and document later modified\n+                // into\n+                // the same transaction\n+                documentModifiedIgnored.put(docId, true);\n+                continue;\n+            }\n+            if (!doc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+                log.trace(\"Document is not a record\", doc::getPathAsString);\n+                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTUzMjI5OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowOToyMVrOFczipA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTowOToyMVrOFczipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0ODkwMA==", "bodyText": "log.trace(\"Record already expired\", doc::getPathAsString); ->  log.trace(\"Record {} already expired\", doc::getPathAsString); --> missing {}", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365748900", "createdAt": "2020-01-13T11:09:21Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.listeners;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventBundle;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.PostCommitFilteringEventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Listener processing events with a {@link org.nuxeo.ecm.core.event.impl.DocumentEventContext}). If the targeted\n+ * document is a record and has an attached event-based, the rule is then evaluated to check if the retention expiration\n+ * date has to be recomputed.\n+ *\n+ * @since 11.1\n+ */\n+public class RetentionDocumentEventListener implements PostCommitFilteringEventListener {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionDocumentEventListener.class);\n+\n+    @Override\n+    public boolean acceptEvent(Event event) {\n+        EventContext eventCtx = event.getContext();\n+        if (!(eventCtx instanceof DocumentEventContext)) {\n+            return false;\n+        }\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        if (retentionManager == null) {\n+            log.trace(\"RetentionManager not started yet?!\");\n+            return false;\n+        }\n+        return retentionManager.getAcceptedEvents().contains(event.getName());\n+    }\n+\n+    @Override\n+    public void handleEvent(EventBundle events) {\n+\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+\n+        Map<String, Set<String>> docsToCheckAndEvents = new HashMap<String, Set<String>>();\n+\n+        Map<String, Boolean> documentModifiedIgnored = new HashMap<String, Boolean>();\n+        for (Event event : events) {\n+            log.trace(\"Proceeding event \" + event.getName());\n+            EventContext evtCtx = event.getContext();\n+            DocumentEventContext docEventCtx = (DocumentEventContext) evtCtx;\n+            DocumentModel doc = docEventCtx.getSourceDocument();\n+            String docId = doc.getId();\n+            if (docEventCtx.getProperties().containsKey(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE)\n+                    && !documentModifiedIgnored.containsKey(docId)) {\n+                // ignore only once per document per bundle, the rule can be attached and document later modified\n+                // into\n+                // the same transaction\n+                documentModifiedIgnored.put(docId, true);\n+                continue;\n+            }\n+            if (!doc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+                log.trace(\"Document is not a record\", doc::getPathAsString);\n+                continue;\n+            }\n+            Record record = doc.getAdapter(Record.class);\n+            RetentionRule rule = record.getRule(docEventCtx.getCoreSession());\n+            if (rule == null) {\n+                log.trace(\"Record {} does not have rule\", doc::getPathAsString);\n+                continue;\n+            }\n+            if (!rule.isEventBased()) {\n+                log.trace(\"Rule {} is not event-based\", () -> rule.getDocument().getPathAsString());\n+                continue;\n+            }\n+            if (record.isRetentionExpired()) {\n+                log.trace(\"Record already expired\", doc::getPathAsString);\n+                retentionManager.proceedRetentionExpired(record, event.getContext().getCoreSession());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTU0MDEwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMToxMjozNVrOFcznLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMToxMjozNVrOFcznLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc1MDA2MQ==", "bodyText": "diamond operator, new HashSet<String>(); can be replaced by new HashSet<>();", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365750061", "createdAt": "2020-01-13T11:12:35Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.listeners;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventBundle;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.PostCommitFilteringEventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Listener processing events with a {@link org.nuxeo.ecm.core.event.impl.DocumentEventContext}). If the targeted\n+ * document is a record and has an attached event-based, the rule is then evaluated to check if the retention expiration\n+ * date has to be recomputed.\n+ *\n+ * @since 11.1\n+ */\n+public class RetentionDocumentEventListener implements PostCommitFilteringEventListener {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionDocumentEventListener.class);\n+\n+    @Override\n+    public boolean acceptEvent(Event event) {\n+        EventContext eventCtx = event.getContext();\n+        if (!(eventCtx instanceof DocumentEventContext)) {\n+            return false;\n+        }\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        if (retentionManager == null) {\n+            log.trace(\"RetentionManager not started yet?!\");\n+            return false;\n+        }\n+        return retentionManager.getAcceptedEvents().contains(event.getName());\n+    }\n+\n+    @Override\n+    public void handleEvent(EventBundle events) {\n+\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+\n+        Map<String, Set<String>> docsToCheckAndEvents = new HashMap<String, Set<String>>();\n+\n+        Map<String, Boolean> documentModifiedIgnored = new HashMap<String, Boolean>();\n+        for (Event event : events) {\n+            log.trace(\"Proceeding event \" + event.getName());\n+            EventContext evtCtx = event.getContext();\n+            DocumentEventContext docEventCtx = (DocumentEventContext) evtCtx;\n+            DocumentModel doc = docEventCtx.getSourceDocument();\n+            String docId = doc.getId();\n+            if (docEventCtx.getProperties().containsKey(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE)\n+                    && !documentModifiedIgnored.containsKey(docId)) {\n+                // ignore only once per document per bundle, the rule can be attached and document later modified\n+                // into\n+                // the same transaction\n+                documentModifiedIgnored.put(docId, true);\n+                continue;\n+            }\n+            if (!doc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+                log.trace(\"Document is not a record\", doc::getPathAsString);\n+                continue;\n+            }\n+            Record record = doc.getAdapter(Record.class);\n+            RetentionRule rule = record.getRule(docEventCtx.getCoreSession());\n+            if (rule == null) {\n+                log.trace(\"Record {} does not have rule\", doc::getPathAsString);\n+                continue;\n+            }\n+            if (!rule.isEventBased()) {\n+                log.trace(\"Rule {} is not event-based\", () -> rule.getDocument().getPathAsString());\n+                continue;\n+            }\n+            if (record.isRetentionExpired()) {\n+                log.trace(\"Record already expired\", doc::getPathAsString);\n+                retentionManager.proceedRetentionExpired(record, event.getContext().getCoreSession());\n+                // XXX should we check if the record should be under retention again?\n+                continue;\n+            }\n+            if (docsToCheckAndEvents.containsKey(docId)) {\n+                Set<String> eventsToCheck = docsToCheckAndEvents.get(docId);\n+                if (!eventsToCheck.contains(event.getName())) {\n+                    eventsToCheck.add(event.getName());\n+                }\n+                docsToCheckAndEvents.put(docId, eventsToCheck);\n+            } else {\n+                Set<String> evts = new HashSet<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTU4NzU1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-web-ui/src/main/resources/web/nuxeo.war/ui/document/retentionrule/nuxeo-retentionrule-create-layout.html", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTozMjoxMlrOFc0Ddw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo1NTozNlrOFfAtNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc1NzMwMw==", "bodyText": "Is this what we want as placeholder?", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365757303", "createdAt": "2020-01-13T11:32:12Z", "author": {"login": "nmpcunha"}, "path": "addons/nuxeo-retention/nuxeo-retention-web-ui/src/main/resources/web/nuxeo.war/ui/document/retentionrule/nuxeo-retentionrule-create-layout.html", "diffHunk": "@@ -0,0 +1,197 @@\n+<!--\n+@license\n+(C) Copyright Nuxeo Corp. (http://nuxeo.com/)\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this retentionrule except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+<!--\n+`nuxeo-retentionrule-create-layout`\n+@group Nuxeo UI\n+@element nuxeo-retentionrule-create-layout\n+-->\n+<dom-module id=\"nuxeo-retentionrule-create-layout\">\n+\n+  <template>\n+    <style include=\"iron-flex iron-flex-alignment nuxeo-styles\">\n+      *[role=widget] {\n+        margin-bottom: 8px;\n+      }\n+    </style>\n+\n+    <nuxeo-input role=\"widget\"\n+                 label=\"[[i18n('retention.rule.label.ruleName')]]\"\n+                 name=\"title\"\n+                 value=\"{{document.properties.dc:title}}\"\n+                 autofocus required>\n+    </nuxeo-input>\n+\n+    <nuxeo-input role=\"widget\"\n+                 label=\"[[i18n('retention.rule.label.ruleDescription')]]\"\n+                 name=\"description\"\n+                 value=\"{{document.properties.dc:description}}\">\n+    </nuxeo-input>\n+\n+    <paper-checkbox role=\"widget\" name=\"disabled\" checked=\"{{document.properties.retention_rule:enabled}}\">\n+      [[i18n('retention.rule.label.enabled')]]\n+    </paper-checkbox>\n+\n+    <nuxeo-card heading=\"[[i18n('retention.rule.label.applicationPolicy.heading')]]\">\n+      <nuxeo-select id=\"applicationPolicyDropdown\" selected=\"{{document.properties.retention_rule:applicationPolicy}}\"\n+        attr-for-selected=\"key\"\n+        role=\"widget\"\n+        disabled\n+        placeholder=\"[[i18n('retention.rule.label.applicationPolicy.placehodler')]]\"\n+        label=\"[[i18n('retention.rule.label.applicationPolicy.description')]]\" required>\n+        <paper-item key=\"auto\">[[i18n('retention.rule.label.applicationPolicy.auto')]]</paper-item>\n+        <paper-item key=\"manual\">[[i18n('retention.rule.label.applicationPolicy.manual')]]</paper-item>\n+      </nuxeo-select>\n+      <dom-if if=\"[[_isAuto(document.properties.retention_rule:applicationPolicy)]]\">\n+        <template>\n+          <nuxeo-input role=\"widget\"\n+                       label=\"[[i18n('retention.rule.label.applicationPolicy.auto.description')]]\"\n+                       placeholder=\"Document.getType() == 'File'\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6b458c6bd3cf8cd0f048a073677a91e5ed068e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1NDk1Nw==", "bodyText": "No idea. @Gabez0r / @guirenard ?", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368054957", "createdAt": "2020-01-17T17:37:45Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-web-ui/src/main/resources/web/nuxeo.war/ui/document/retentionrule/nuxeo-retentionrule-create-layout.html", "diffHunk": "@@ -0,0 +1,197 @@\n+<!--\n+@license\n+(C) Copyright Nuxeo Corp. (http://nuxeo.com/)\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this retentionrule except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+<!--\n+`nuxeo-retentionrule-create-layout`\n+@group Nuxeo UI\n+@element nuxeo-retentionrule-create-layout\n+-->\n+<dom-module id=\"nuxeo-retentionrule-create-layout\">\n+\n+  <template>\n+    <style include=\"iron-flex iron-flex-alignment nuxeo-styles\">\n+      *[role=widget] {\n+        margin-bottom: 8px;\n+      }\n+    </style>\n+\n+    <nuxeo-input role=\"widget\"\n+                 label=\"[[i18n('retention.rule.label.ruleName')]]\"\n+                 name=\"title\"\n+                 value=\"{{document.properties.dc:title}}\"\n+                 autofocus required>\n+    </nuxeo-input>\n+\n+    <nuxeo-input role=\"widget\"\n+                 label=\"[[i18n('retention.rule.label.ruleDescription')]]\"\n+                 name=\"description\"\n+                 value=\"{{document.properties.dc:description}}\">\n+    </nuxeo-input>\n+\n+    <paper-checkbox role=\"widget\" name=\"disabled\" checked=\"{{document.properties.retention_rule:enabled}}\">\n+      [[i18n('retention.rule.label.enabled')]]\n+    </paper-checkbox>\n+\n+    <nuxeo-card heading=\"[[i18n('retention.rule.label.applicationPolicy.heading')]]\">\n+      <nuxeo-select id=\"applicationPolicyDropdown\" selected=\"{{document.properties.retention_rule:applicationPolicy}}\"\n+        attr-for-selected=\"key\"\n+        role=\"widget\"\n+        disabled\n+        placeholder=\"[[i18n('retention.rule.label.applicationPolicy.placehodler')]]\"\n+        label=\"[[i18n('retention.rule.label.applicationPolicy.description')]]\" required>\n+        <paper-item key=\"auto\">[[i18n('retention.rule.label.applicationPolicy.auto')]]</paper-item>\n+        <paper-item key=\"manual\">[[i18n('retention.rule.label.applicationPolicy.manual')]]</paper-item>\n+      </nuxeo-select>\n+      <dom-if if=\"[[_isAuto(document.properties.retention_rule:applicationPolicy)]]\">\n+        <template>\n+          <nuxeo-input role=\"widget\"\n+                       label=\"[[i18n('retention.rule.label.applicationPolicy.auto.description')]]\"\n+                       placeholder=\"Document.getType() == 'File'\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc1NzMwMw=="}, "originalCommit": {"oid": "7f6b458c6bd3cf8cd0f048a073677a91e5ed068e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1NjcxNQ==", "bodyText": "Or @nmpcunha ?", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368056715", "createdAt": "2020-01-17T17:42:16Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-web-ui/src/main/resources/web/nuxeo.war/ui/document/retentionrule/nuxeo-retentionrule-create-layout.html", "diffHunk": "@@ -0,0 +1,197 @@\n+<!--\n+@license\n+(C) Copyright Nuxeo Corp. (http://nuxeo.com/)\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this retentionrule except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+<!--\n+`nuxeo-retentionrule-create-layout`\n+@group Nuxeo UI\n+@element nuxeo-retentionrule-create-layout\n+-->\n+<dom-module id=\"nuxeo-retentionrule-create-layout\">\n+\n+  <template>\n+    <style include=\"iron-flex iron-flex-alignment nuxeo-styles\">\n+      *[role=widget] {\n+        margin-bottom: 8px;\n+      }\n+    </style>\n+\n+    <nuxeo-input role=\"widget\"\n+                 label=\"[[i18n('retention.rule.label.ruleName')]]\"\n+                 name=\"title\"\n+                 value=\"{{document.properties.dc:title}}\"\n+                 autofocus required>\n+    </nuxeo-input>\n+\n+    <nuxeo-input role=\"widget\"\n+                 label=\"[[i18n('retention.rule.label.ruleDescription')]]\"\n+                 name=\"description\"\n+                 value=\"{{document.properties.dc:description}}\">\n+    </nuxeo-input>\n+\n+    <paper-checkbox role=\"widget\" name=\"disabled\" checked=\"{{document.properties.retention_rule:enabled}}\">\n+      [[i18n('retention.rule.label.enabled')]]\n+    </paper-checkbox>\n+\n+    <nuxeo-card heading=\"[[i18n('retention.rule.label.applicationPolicy.heading')]]\">\n+      <nuxeo-select id=\"applicationPolicyDropdown\" selected=\"{{document.properties.retention_rule:applicationPolicy}}\"\n+        attr-for-selected=\"key\"\n+        role=\"widget\"\n+        disabled\n+        placeholder=\"[[i18n('retention.rule.label.applicationPolicy.placehodler')]]\"\n+        label=\"[[i18n('retention.rule.label.applicationPolicy.description')]]\" required>\n+        <paper-item key=\"auto\">[[i18n('retention.rule.label.applicationPolicy.auto')]]</paper-item>\n+        <paper-item key=\"manual\">[[i18n('retention.rule.label.applicationPolicy.manual')]]</paper-item>\n+      </nuxeo-select>\n+      <dom-if if=\"[[_isAuto(document.properties.retention_rule:applicationPolicy)]]\">\n+        <template>\n+          <nuxeo-input role=\"widget\"\n+                       label=\"[[i18n('retention.rule.label.applicationPolicy.auto.description')]]\"\n+                       placeholder=\"Document.getType() == 'File'\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc1NzMwMw=="}, "originalCommit": {"oid": "7f6b458c6bd3cf8cd0f048a073677a91e5ed068e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MTc0OQ==", "bodyText": "I'd say so, since this is bound to a field holding an EL expression to be executed by the retention policy. It's an example.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368061749", "createdAt": "2020-01-17T17:55:36Z", "author": {"login": "Gabez0r"}, "path": "addons/nuxeo-retention/nuxeo-retention-web-ui/src/main/resources/web/nuxeo.war/ui/document/retentionrule/nuxeo-retentionrule-create-layout.html", "diffHunk": "@@ -0,0 +1,197 @@\n+<!--\n+@license\n+(C) Copyright Nuxeo Corp. (http://nuxeo.com/)\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this retentionrule except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+<!--\n+`nuxeo-retentionrule-create-layout`\n+@group Nuxeo UI\n+@element nuxeo-retentionrule-create-layout\n+-->\n+<dom-module id=\"nuxeo-retentionrule-create-layout\">\n+\n+  <template>\n+    <style include=\"iron-flex iron-flex-alignment nuxeo-styles\">\n+      *[role=widget] {\n+        margin-bottom: 8px;\n+      }\n+    </style>\n+\n+    <nuxeo-input role=\"widget\"\n+                 label=\"[[i18n('retention.rule.label.ruleName')]]\"\n+                 name=\"title\"\n+                 value=\"{{document.properties.dc:title}}\"\n+                 autofocus required>\n+    </nuxeo-input>\n+\n+    <nuxeo-input role=\"widget\"\n+                 label=\"[[i18n('retention.rule.label.ruleDescription')]]\"\n+                 name=\"description\"\n+                 value=\"{{document.properties.dc:description}}\">\n+    </nuxeo-input>\n+\n+    <paper-checkbox role=\"widget\" name=\"disabled\" checked=\"{{document.properties.retention_rule:enabled}}\">\n+      [[i18n('retention.rule.label.enabled')]]\n+    </paper-checkbox>\n+\n+    <nuxeo-card heading=\"[[i18n('retention.rule.label.applicationPolicy.heading')]]\">\n+      <nuxeo-select id=\"applicationPolicyDropdown\" selected=\"{{document.properties.retention_rule:applicationPolicy}}\"\n+        attr-for-selected=\"key\"\n+        role=\"widget\"\n+        disabled\n+        placeholder=\"[[i18n('retention.rule.label.applicationPolicy.placehodler')]]\"\n+        label=\"[[i18n('retention.rule.label.applicationPolicy.description')]]\" required>\n+        <paper-item key=\"auto\">[[i18n('retention.rule.label.applicationPolicy.auto')]]</paper-item>\n+        <paper-item key=\"manual\">[[i18n('retention.rule.label.applicationPolicy.manual')]]</paper-item>\n+      </nuxeo-select>\n+      <dom-if if=\"[[_isAuto(document.properties.retention_rule:applicationPolicy)]]\">\n+        <template>\n+          <nuxeo-input role=\"widget\"\n+                       label=\"[[i18n('retention.rule.label.applicationPolicy.auto.description')]]\"\n+                       placeholder=\"Document.getType() == 'File'\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc1NzMwMw=="}, "originalCommit": {"oid": "7f6b458c6bd3cf8cd0f048a073677a91e5ed068e"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTU5OTE4OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-web-ui/src/main/resources/web/nuxeo.war/ui/document/retentionrule/nuxeo-retentionrule-view-layout.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTozNjo1MFrOFc0KWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTozNjo1MFrOFc0KWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc1OTA2NQ==", "bodyText": "Assuming that there is always a label (i.e., enabled is a boolean flag), probably we could stamp only one label and compute the label according the flag.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365759065", "createdAt": "2020-01-13T11:36:50Z", "author": {"login": "nmpcunha"}, "path": "addons/nuxeo-retention/nuxeo-retention-web-ui/src/main/resources/web/nuxeo.war/ui/document/retentionrule/nuxeo-retentionrule-view-layout.html", "diffHunk": "@@ -0,0 +1,127 @@\n+<!--\n+`nuxeo-retentionrule-view-layout`\n+@group Nuxeo UI\n+@element nuxeo-retentionrule-view-layout\n+-->\n+<dom-module id=\"nuxeo-retentionrule-view-layout\">\n+  <template>\n+    <style include=\"iron-flex iron-flex-alignment nuxeo-styles\">\n+      *[role=widget] {\n+        margin-bottom: 16px;\n+      }\n+    </style>\n+\n+    <retention-config-widget document=\"[[document]]\"></retention-config-widget>\n+\n+    <nuxeo-card heading=\"[[i18n('retention.rule.label.heading')]]\">\n+      <div role=\"widget\">\n+        <label>[[i18n('retention.rule.label.ruleName')]]</label>\n+        <div name=\"title\">[[document.properties.dc:title]]</div>\n+      </div>\n+\n+      <div role=\"widget\" hidden$=\"[[!document.properties.dc:description]]\">\n+        <label>[[i18n('retention.rule.label.ruleDescription')]]</label>\n+        <div name=\"description\" class=\"multiline\">[[document.properties.dc:description]]</div>\n+      </div>\n+\n+      <div role=\"widget\">\n+        <label hidden$=\"[[!document.properties.retention_rule:enabled]]\">[[i18n('retention.rule.label.enabled')]]</label>\n+        <label hidden$=\"[[document.properties.retention_rule:enabled]]\">[[i18n('retention.rule.label.disabled')]]</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6b458c6bd3cf8cd0f048a073677a91e5ed068e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTYxMTcxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo0MTo1NFrOFc0Rnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo0MTo1NFrOFc0Rnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2MDkyNw==", "bodyText": "i am wondering if we can find a way to simply this part of code, and for more information Sonar reports that with Cognitive Complexity of methods should not be too high squid: S3776  i tried some things like the use of Map#merge:\nreplace the\nif (docsToCheckAndEvents.containsKey(docId)) {\n                Set<String> eventsToCheck = docsToCheckAndEvents.get(docId);\n                if (!eventsToCheck.contains(event.getName())) {\n                    eventsToCheck.add(event.getName());\n                }\n                docsToCheckAndEvents.put(docId, eventsToCheck);\n            } else {\n                Set<String> evts = new HashSet<String>();\n                evts.add(event.getName());\n                docsToCheckAndEvents.put(docId, evts);\n            }\n\nby\n docsToCheckAndEvents.merge(docId, new HashSet<>(singleton(event.getName())), (oldV, newV) -> {\n                oldV.add(event.getName());\n                return oldV;\n            });\n\ni told my self what if we separate the events to two lists when that will processed  and a second just logged, wdyth about:\nprotected boolean accept(Event event) {\n        DocumentEventContext eventContext = (DocumentEventContext) event.getContext();\n        DocumentModel document = eventContext.getSourceDocument();\n        RetentionRule rule;\n        Record record = document.getAdapter(Record.class);\n        return document.hasFacet(RetentionConstants.RECORD_FACET) //\n                && ((rule = record.getRule(document.getCoreSession())) != null && rule.isEventBased()) //\n                && !record.isRetentionExpired();\n    }\n\n @Override\n    public void handleEvent(EventBundle events) {\n       ......\n      \n//Separate the two list \nMap<Boolean, List<Event>> map = StreamSupport.stream(events.spliterator(), false)\n                                                     .collect(Collectors.groupingBy(this::accept, Collectors.toList()));\n\n// log because something is missing on the event / document \n  map.get(false).forEach();\n//process the accepted \nmap.get(true).map or map.get(true).foreach to use the second part //see above", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365760927", "createdAt": "2020-01-13T11:41:54Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.listeners;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventBundle;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.PostCommitFilteringEventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Listener processing events with a {@link org.nuxeo.ecm.core.event.impl.DocumentEventContext}). If the targeted\n+ * document is a record and has an attached event-based, the rule is then evaluated to check if the retention expiration\n+ * date has to be recomputed.\n+ *\n+ * @since 11.1\n+ */\n+public class RetentionDocumentEventListener implements PostCommitFilteringEventListener {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionDocumentEventListener.class);\n+\n+    @Override\n+    public boolean acceptEvent(Event event) {\n+        EventContext eventCtx = event.getContext();\n+        if (!(eventCtx instanceof DocumentEventContext)) {\n+            return false;\n+        }\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        if (retentionManager == null) {\n+            log.trace(\"RetentionManager not started yet?!\");\n+            return false;\n+        }\n+        return retentionManager.getAcceptedEvents().contains(event.getName());\n+    }\n+\n+    @Override\n+    public void handleEvent(EventBundle events) {\n+\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+\n+        Map<String, Set<String>> docsToCheckAndEvents = new HashMap<String, Set<String>>();\n+\n+        Map<String, Boolean> documentModifiedIgnored = new HashMap<String, Boolean>();\n+        for (Event event : events) {\n+            log.trace(\"Proceeding event \" + event.getName());\n+            EventContext evtCtx = event.getContext();\n+            DocumentEventContext docEventCtx = (DocumentEventContext) evtCtx;\n+            DocumentModel doc = docEventCtx.getSourceDocument();\n+            String docId = doc.getId();\n+            if (docEventCtx.getProperties().containsKey(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE)\n+                    && !documentModifiedIgnored.containsKey(docId)) {\n+                // ignore only once per document per bundle, the rule can be attached and document later modified\n+                // into\n+                // the same transaction\n+                documentModifiedIgnored.put(docId, true);\n+                continue;\n+            }\n+            if (!doc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+                log.trace(\"Document is not a record\", doc::getPathAsString);\n+                continue;\n+            }\n+            Record record = doc.getAdapter(Record.class);\n+            RetentionRule rule = record.getRule(docEventCtx.getCoreSession());\n+            if (rule == null) {\n+                log.trace(\"Record {} does not have rule\", doc::getPathAsString);\n+                continue;\n+            }\n+            if (!rule.isEventBased()) {\n+                log.trace(\"Rule {} is not event-based\", () -> rule.getDocument().getPathAsString());\n+                continue;\n+            }\n+            if (record.isRetentionExpired()) {\n+                log.trace(\"Record already expired\", doc::getPathAsString);\n+                retentionManager.proceedRetentionExpired(record, event.getContext().getCoreSession());\n+                // XXX should we check if the record should be under retention again?\n+                continue;\n+            }\n+            if (docsToCheckAndEvents.containsKey(docId)) {\n+                Set<String> eventsToCheck = docsToCheckAndEvents.get(docId);\n+                if (!eventsToCheck.contains(event.getName())) {\n+                    eventsToCheck.add(event.getName());\n+                }\n+                docsToCheckAndEvents.put(docId, eventsToCheck);\n+            } else {\n+                Set<String> evts = new HashSet<String>();\n+                evts.add(event.getName());\n+                docsToCheckAndEvents.put(docId, evts);\n+            }\n+        }\n+        if (!docsToCheckAndEvents.isEmpty()) {\n+            retentionManager.evalRules(docsToCheckAndEvents);\n+        }\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTYyNzI0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo0ODo0NVrOFc0bAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo0MTo0MVrOFfAYtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2MzMzMQ==", "bodyText": "eventsToCheck  is a Set implementation no need to check the unicity (call to contains method)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365763331", "createdAt": "2020-01-13T11:48:45Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.listeners;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventBundle;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.PostCommitFilteringEventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Listener processing events with a {@link org.nuxeo.ecm.core.event.impl.DocumentEventContext}). If the targeted\n+ * document is a record and has an attached event-based, the rule is then evaluated to check if the retention expiration\n+ * date has to be recomputed.\n+ *\n+ * @since 11.1\n+ */\n+public class RetentionDocumentEventListener implements PostCommitFilteringEventListener {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionDocumentEventListener.class);\n+\n+    @Override\n+    public boolean acceptEvent(Event event) {\n+        EventContext eventCtx = event.getContext();\n+        if (!(eventCtx instanceof DocumentEventContext)) {\n+            return false;\n+        }\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        if (retentionManager == null) {\n+            log.trace(\"RetentionManager not started yet?!\");\n+            return false;\n+        }\n+        return retentionManager.getAcceptedEvents().contains(event.getName());\n+    }\n+\n+    @Override\n+    public void handleEvent(EventBundle events) {\n+\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+\n+        Map<String, Set<String>> docsToCheckAndEvents = new HashMap<String, Set<String>>();\n+\n+        Map<String, Boolean> documentModifiedIgnored = new HashMap<String, Boolean>();\n+        for (Event event : events) {\n+            log.trace(\"Proceeding event \" + event.getName());\n+            EventContext evtCtx = event.getContext();\n+            DocumentEventContext docEventCtx = (DocumentEventContext) evtCtx;\n+            DocumentModel doc = docEventCtx.getSourceDocument();\n+            String docId = doc.getId();\n+            if (docEventCtx.getProperties().containsKey(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE)\n+                    && !documentModifiedIgnored.containsKey(docId)) {\n+                // ignore only once per document per bundle, the rule can be attached and document later modified\n+                // into\n+                // the same transaction\n+                documentModifiedIgnored.put(docId, true);\n+                continue;\n+            }\n+            if (!doc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+                log.trace(\"Document is not a record\", doc::getPathAsString);\n+                continue;\n+            }\n+            Record record = doc.getAdapter(Record.class);\n+            RetentionRule rule = record.getRule(docEventCtx.getCoreSession());\n+            if (rule == null) {\n+                log.trace(\"Record {} does not have rule\", doc::getPathAsString);\n+                continue;\n+            }\n+            if (!rule.isEventBased()) {\n+                log.trace(\"Rule {} is not event-based\", () -> rule.getDocument().getPathAsString());\n+                continue;\n+            }\n+            if (record.isRetentionExpired()) {\n+                log.trace(\"Record already expired\", doc::getPathAsString);\n+                retentionManager.proceedRetentionExpired(record, event.getContext().getCoreSession());\n+                // XXX should we check if the record should be under retention again?\n+                continue;\n+            }\n+            if (docsToCheckAndEvents.containsKey(docId)) {\n+                Set<String> eventsToCheck = docsToCheckAndEvents.get(docId);\n+                if (!eventsToCheck.contains(event.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1NjUwMw==", "bodyText": "Actually I'm replacing the whole block with computeIfAbsent.\ndocsToCheckAndEvents.computeIfAbsent(docId, k -> new HashSet<>()).add(event.getName());", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368056503", "createdAt": "2020-01-17T17:41:41Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionDocumentEventListener.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.listeners;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventBundle;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.PostCommitFilteringEventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Listener processing events with a {@link org.nuxeo.ecm.core.event.impl.DocumentEventContext}). If the targeted\n+ * document is a record and has an attached event-based, the rule is then evaluated to check if the retention expiration\n+ * date has to be recomputed.\n+ *\n+ * @since 11.1\n+ */\n+public class RetentionDocumentEventListener implements PostCommitFilteringEventListener {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionDocumentEventListener.class);\n+\n+    @Override\n+    public boolean acceptEvent(Event event) {\n+        EventContext eventCtx = event.getContext();\n+        if (!(eventCtx instanceof DocumentEventContext)) {\n+            return false;\n+        }\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        if (retentionManager == null) {\n+            log.trace(\"RetentionManager not started yet?!\");\n+            return false;\n+        }\n+        return retentionManager.getAcceptedEvents().contains(event.getName());\n+    }\n+\n+    @Override\n+    public void handleEvent(EventBundle events) {\n+\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+\n+        Map<String, Set<String>> docsToCheckAndEvents = new HashMap<String, Set<String>>();\n+\n+        Map<String, Boolean> documentModifiedIgnored = new HashMap<String, Boolean>();\n+        for (Event event : events) {\n+            log.trace(\"Proceeding event \" + event.getName());\n+            EventContext evtCtx = event.getContext();\n+            DocumentEventContext docEventCtx = (DocumentEventContext) evtCtx;\n+            DocumentModel doc = docEventCtx.getSourceDocument();\n+            String docId = doc.getId();\n+            if (docEventCtx.getProperties().containsKey(RetentionConstants.RETENTION_CHECKER_LISTENER_IGNORE)\n+                    && !documentModifiedIgnored.containsKey(docId)) {\n+                // ignore only once per document per bundle, the rule can be attached and document later modified\n+                // into\n+                // the same transaction\n+                documentModifiedIgnored.put(docId, true);\n+                continue;\n+            }\n+            if (!doc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+                log.trace(\"Document is not a record\", doc::getPathAsString);\n+                continue;\n+            }\n+            Record record = doc.getAdapter(Record.class);\n+            RetentionRule rule = record.getRule(docEventCtx.getCoreSession());\n+            if (rule == null) {\n+                log.trace(\"Record {} does not have rule\", doc::getPathAsString);\n+                continue;\n+            }\n+            if (!rule.isEventBased()) {\n+                log.trace(\"Rule {} is not event-based\", () -> rule.getDocument().getPathAsString());\n+                continue;\n+            }\n+            if (record.isRetentionExpired()) {\n+                log.trace(\"Record already expired\", doc::getPathAsString);\n+                retentionManager.proceedRetentionExpired(record, event.getContext().getCoreSession());\n+                // XXX should we check if the record should be under retention again?\n+                continue;\n+            }\n+            if (docsToCheckAndEvents.containsKey(docId)) {\n+                Set<String> eventsToCheck = docsToCheckAndEvents.get(docId);\n+                if (!eventsToCheck.contains(event.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2MzMzMQ=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTY4MzI0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-web-ui/src/main/resources/web/nuxeo.war/ui/nuxeo-retention/nuxeo-retention-behavior.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjoxMjoyMFrOFc085A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjoxMjoyMFrOFc085A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3MjAwNA==", "bodyText": "Probably this would be an interesting candidate to extract since it is generic and useful in other contexts.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365772004", "createdAt": "2020-01-13T12:12:20Z", "author": {"login": "nmpcunha"}, "path": "addons/nuxeo-retention/nuxeo-retention-web-ui/src/main/resources/web/nuxeo.war/ui/nuxeo-retention/nuxeo-retention-behavior.html", "diffHunk": "@@ -0,0 +1,149 @@\n+<!--\n+@license\n+(C) Copyright Nuxeo Corp. (http://nuxeo.com/)\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+<script>\n+  /* eslint-disable no-var, no-use-before-define */\n+  var Nuxeo = Nuxeo || {};\n+\n+  (() => {\n+    let fetcher;\n+\n+    function _fetchDocTypes() {\n+      let typeFetcher = document.createElement('nuxeo-resource');\n+      document.body.appendChild(typeFetcher);\n+      typeFetcher.path = 'config/types';\n+      return typeFetcher.get().then(async (res) => {\n+        let docTypes;\n+        let dateFields\n+        if (res && res.doctypes) {\n+          const schemas = new Set();\n+          docTypes = [];\n+          for (var type in res.doctypes) {\n+            if (\n+              res.doctypes[type].schemas.indexOf('file') !== -1 &&\n+              res.doctypes[type].facets.indexOf('Folderish') === -1 &&\n+              res.doctypes[type].facets.indexOf('HiddenInNavigation') === -1 &&\n+              res.doctypes[type].facets.indexOf('SystemDocument') === -1\n+            ) {\n+              docTypes.push({\n+                id: type,\n+                text: type,\n+              });\n+              res.doctypes[type].schemas.forEach((schema) => {\n+                schemas.add(schema);\n+              });\n+            }\n+          }\n+          dateFields = await _fetchDateFields(schemas);\n+        }\n+        return {docTypes, dateFields};\n+      }).finally(() => {\n+        document.body.removeChild(typeFetcher);\n+        typeFetcher = null;\n+      });\n+    }\n+\n+    function _fetchDateFields(onlySchemas) {\n+      if (onlySchemas.size > 0) {\n+        let schemaFetcher = document.createElement('nuxeo-resource');\n+        document.body.appendChild(schemaFetcher);\n+        schemaFetcher.path = 'config/schemas';\n+        return schemaFetcher.get().then((res) => {\n+          const dateFields = [];\n+          if (res) {\n+            res.forEach((schema) => {\n+              if (onlySchemas.has(schema.name)) {\n+                for (var fieldName in schema.fields) {\n+                  if (schema.fields[fieldName] === 'date') {\n+                    dateFields.push(schema['@prefix'] + ':' + fieldName);\n+                  }\n+                }\n+              }\n+            });\n+          }\n+          return dateFields;\n+        }).finally(() => {\n+          document.body.removeChild(schemaFetcher);\n+          schemaFetcher = null;\n+        });\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6b458c6bd3cf8cd0f048a073677a91e5ed068e"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTcxMDE0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-web-ui/src/main/resources/web/nuxeo.war/ui/nuxeo-retention/nuxeo-retention-events.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjoyMzowOFrOFc1MmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjoyMzowOFrOFc1MmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3NjAyNA==", "bodyText": "\ud83d\ude05", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365776024", "createdAt": "2020-01-13T12:23:08Z", "author": {"login": "nmpcunha"}, "path": "addons/nuxeo-retention/nuxeo-retention-web-ui/src/main/resources/web/nuxeo.war/ui/nuxeo-retention/nuxeo-retention-events.html", "diffHunk": "@@ -0,0 +1,191 @@\n+<!--\n+@license\n+(C) Copyright Nuxeo Corp. (http://nuxeo.com/)\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+<!--\n+`nuxeo-retention-events`\n+@group Nuxeo UI\n+@element nuxeo-retention-events\n+-->\n+<dom-module id=\"nuxeo-retention-events\">\n+  <template>\n+    <style include=\"nuxeo-styles\">\n+      #heading {\n+        @apply --layout-horizontal;\n+        @apply --layout-end-justified;\n+      }\n+\n+      #table {\n+        height: 50vh;\n+      }\n+\n+      nuxeo-date-picker {\n+        padding: 0 16px;\n+      }\n+    </style>\n+    <nuxeo-page>\n+      <div slot=\"header\">\n+        <span class=\"flex\">[[i18n('retention.events')]]</span>\n+      </div>\n+      <nuxeo-card heading=\"[[i18n('retention.events.fire')]]\">\n+          <nuxeo-operation id=\"op\" op=\"Retention.FireEvent\" loading=\"{{firingEvent}}\">\n+          </nuxeo-operation>\n+          <nuxeo-directory-suggestion name=\"event\"\n+             role=\"widget\"\n+             value=\"{{_event}}\"\n+             label=\"[[i18n('retention.rule.label.startPolicy.eventBased.event.description')]]\"\n+             dbl10n\n+             required\n+             query-results-filter=\"[[_filterEvents]]\"\n+             directory-name=\"RetentionEvent\"\n+             min-chars=\"0\">\n+           </nuxeo-directory-suggestion>\n+           <nuxeo-input name=\"eventInput\" value=\"{{_eventInput}}\" label=\"[[i18n('retention.events.input')]]\">\n+           </nuxeo-input>\n+           <div class=\"buttons\">\n+             <paper-button name=\"fire\" class=\"primary\" on-tap=\"_fire\" disabled$=\"[[!_canFire(_event, firingEvent)]]\">\n+               [[i18n('retention.events.fire')]]\n+             </paper-button>\n+           </div>\n+      </nuxeo-card>\n+\n+      <nuxeo-card heading=\"[[i18n('retention.events.history')]]\">\n+        <nuxeo-audit-page-provider id=\"provider\" page-size=\"40\" params='{\"eventCategory\":\"Retention\"}'></nuxeo-audit-page-provider>\n+        <div id=\"heading\">\n+          <template is=\"dom-if\" if=\"[[visible]]\">\n+            <nuxeo-date-picker role=\"widget\" label=\"[[i18n('documentHistory.filter.after')]]\" value=\"{{startDate}}\">\n+            </nuxeo-date-picker>\n+            <nuxeo-date-picker role=\"widget\" label=\"[[i18n('documentHistory.filter.before')]]\" value=\"{{endDate}}\">\n+            </nuxeo-date-picker>\n+          </template>\n+        </div>\n+\n+        <nuxeo-data-table id=\"table\" paginable nx-provider=\"provider\" empty-label=\"[[i18n('retention.events.empty')]]\">\n+          <nuxeo-data-table-column name=\"[[i18n('retention.rule.label.startPolicy.eventBased.event.description')]]\" sort-by=\"eventId\">\n+            <template>[[item.eventId]]</template>\n+          </nuxeo-data-table-column>\n+          <nuxeo-data-table-column name=\"[[i18n('documentHistory.date')]]\" sort-by=\"eventDate\">\n+            <template><nuxeo-date datetime=\"[[item.eventDate]]\"></nuxeo-date></template>\n+          </nuxeo-data-table-column>\n+          <nuxeo-data-table-column name=\"[[i18n('documentHistory.username')]]\" sort-by=\"principalName\">\n+            <template><nuxeo-user-tag user=\"[[item.principalName]]\"></nuxeo-user-tag></template>\n+          </nuxeo-data-table-column>\n+          <nuxeo-data-table-column name=\"[[i18n('retention.events.input')]]\">\n+            <template>\n+              [[item.comment]]\n+            </template>\n+          </nuxeo-data-table-column>\n+        </nuxeo-data-table>\n+      </nuxeo-card>\n+    </nuxeo-page>\n+  </template>\n+  <script>\n+    Polymer({\n+      is: 'nuxeo-retention-events',\n+      behaviors: [Nuxeo.I18nBehavior],\n+      properties: {\n+        visible: {\n+          type: Boolean,\n+          observer: '_refreshHistory'\n+        },\n+        _event: {\n+          type: String,\n+          value: ''\n+        },\n+        _eventInput: String,\n+        startDate: {\n+          type: String,\n+          notify: true,\n+          observer: '_observeStartDate'\n+        },\n+        endDate: {\n+          type: String,\n+          notify: true,\n+          observer: '_observeEndDate'\n+        }\n+      },\n+\n+      _observeStartDate: function() {\n+        if (this.startDate && this.startDate.length > 0) {\n+          this.$.provider.params.startDate = this.startDate;\n+          if (this.endDate && this.endDate.length > 0) {\n+            var start = Date.parse(this.startDate);\n+            var end = Date.parse(this.endDate);\n+            if (start > end) {\n+              this.endDate = moment(start).add(7, 'day').format('YYYY-MM-DD');\n+            }\n+          }\n+          this._refreshHistory();\n+        } else if(this.$.provider.params.startDate) {\n+          delete this.$.provider.params.startDate;\n+          this._refreshHistory();\n+        }\n+      },\n+\n+      _observeEndDate: function() {\n+        if (this.endDate && this.endDate.length > 0) {\n+          this.$.provider.params.endDate = this.endDate;\n+          if (this.startDate && this.startDate.length > 0) {\n+            var start = Date.parse(this.startDate);\n+            var end = Date.parse(this.endDate);\n+            if (start > end) {\n+              this.startDate = moment(end).subtract(7, 'day').format('YYYY-MM-DD');\n+            }\n+          }\n+          this._refreshHistory();\n+        } else if(this.$.provider.params.endDate) {\n+          delete this.$.provider.params.endDate;\n+          this._refreshHistory();\n+        }\n+      },\n+\n+      _refreshHistory: function(delay) {\n+        if (this.visible) {\n+          this.$.provider.page = 1;\n+          this.$.table.reset();\n+          this.$.table.loading = true;\n+          this.$.table.emptyLabel= this.i18n('label.loading');\n+          window.setTimeout(function() {\n+            this.$.table.fetch().then(function() {\n+              this.$.table.emptyLabel= this.i18n('retention.events.empty');\n+            }.bind(this));\n+          }.bind(this), delay);\n+        }\n+      },\n+\n+      _fire: function() {\n+        this.$.op.params = {name: this._event};\n+        this.$.op.input = this._eventInput;\n+        this.$.op.execute().then(function() {\n+          this.fire('notify', {message: this.i18n('retention.events.fired.success') });\n+          this._event = null;\n+          this._eventInput = null;\n+          // Audit is async, let's give it a little time to index\n+          this._refreshHistory(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6b458c6bd3cf8cd0f048a073677a91e5ed068e"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTg2MTY1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionExpiredListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzoxOTo0NlrOFc2lRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo0NjoyOVrOFfAfmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5ODcyNQ==", "bodyText": "what if we group the different checks at the beginning, perhaps something like:\n EventContext ctx = event.getContext();\n        DocumentEventContext docCxt;\n        if (!event.getName().equals(DocumentEventTypes.RETENTION_EXPIRED) //\n                || !(ctx instanceof DocumentEventContext) //\n                || !(docCxt = (DocumentEventContext) event.getContext()).getSourceDocument().hasFacet(RECORD_FACET)) {\n            return;\n        }\n\n        DocumentModel doc = docCxt.getSourceDocument();\n        log.debug(\"Retention expired on {}\", doc::getPathAsString);\n        Record record = doc.getAdapter(Record.class);\n        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n        CoreSession session = ctx.getCoreSession();\n        record.saveRetainUntil((Calendar) docCxt.getProperty(CoreEventConstants.RETAIN_UNTIL));\n        retentionManager.proceedRetentionExpired(record, session);\n        session.saveDocument(doc);", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365798725", "createdAt": "2020-01-13T13:19:46Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionExpiredListener.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.listeners;\n+\n+import java.util.Calendar;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.event.CoreEventConstants;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.EventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Listens the #{@link org.nuxeo.ecm.core.api.event.DocumentEventTypes#RETENTION_EXPIRED} event on a document to proceed\n+ * potential post-actions.\n+ *\n+ * @since 11.1\n+ */\n+public class RetentionExpiredListener implements EventListener {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionExpiredListener.class);\n+\n+    @Override\n+    public void handleEvent(Event event) {\n+        EventContext ctx = event.getContext();\n+        if (!(ctx instanceof DocumentEventContext)) {\n+            return;\n+        }\n+\n+        final String eventId = event.getName();\n+\n+        final DocumentEventContext docCxt = (DocumentEventContext) event.getContext();\n+\n+        DocumentModel doc = null;\n+        if (eventId.equals(DocumentEventTypes.RETENTION_EXPIRED)) {\n+            doc = docCxt.getSourceDocument();\n+        } else {\n+            return;\n+        }\n+        if (!doc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+            return;\n+        }\n+        log.debug(\"Retention expired on {}\", doc::getPathAsString);\n+        Record record = doc.getAdapter(Record.class);\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        CoreSession session = ctx.getCoreSession();\n+        record.saveRetainUntil((Calendar) docCxt.getProperty(CoreEventConstants.RETAIN_UNTIL));\n+        retentionManager.proceedRetentionExpired(record, session);\n+        session.saveDocument(doc);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1ODI2Nw==", "bodyText": "Rewriting it a bit, but keeping local variables.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368058267", "createdAt": "2020-01-17T17:46:29Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionExpiredListener.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.listeners;\n+\n+import java.util.Calendar;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.event.CoreEventConstants;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.EventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Listens the #{@link org.nuxeo.ecm.core.api.event.DocumentEventTypes#RETENTION_EXPIRED} event on a document to proceed\n+ * potential post-actions.\n+ *\n+ * @since 11.1\n+ */\n+public class RetentionExpiredListener implements EventListener {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionExpiredListener.class);\n+\n+    @Override\n+    public void handleEvent(Event event) {\n+        EventContext ctx = event.getContext();\n+        if (!(ctx instanceof DocumentEventContext)) {\n+            return;\n+        }\n+\n+        final String eventId = event.getName();\n+\n+        final DocumentEventContext docCxt = (DocumentEventContext) event.getContext();\n+\n+        DocumentModel doc = null;\n+        if (eventId.equals(DocumentEventTypes.RETENTION_EXPIRED)) {\n+            doc = docCxt.getSourceDocument();\n+        } else {\n+            return;\n+        }\n+        if (!doc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+            return;\n+        }\n+        log.debug(\"Retention expired on {}\", doc::getPathAsString);\n+        Record record = doc.getAdapter(Record.class);\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        CoreSession session = ctx.getCoreSession();\n+        record.saveRetainUntil((Calendar) docCxt.getProperty(CoreEventConstants.RETAIN_UNTIL));\n+        retentionManager.proceedRetentionExpired(record, session);\n+        session.saveDocument(doc);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5ODcyNQ=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTg3MDk4OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/AttachRetentionRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzoyMjo1OFrOFc2qlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzoyMjo1OFrOFc2qlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwMDA4Nw==", "bodyText": "String.format(... is not needed here, or perhaps you need to passe the rule you process in it", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365800087", "createdAt": "2020-01-13T13:22:58Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/AttachRetentionRule.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.operations;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Operation(id = AttachRetentionRule.ID, category = Constants.CAT_DOCUMENT, label = \"Attach Retation Rule\", description = \"Attach the given retation rule to the input document.\")\n+public class AttachRetentionRule {\n+\n+    public static final String ID = \"Retention.AttachRule\";\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @Context\n+    protected RetentionManager retentionManager;\n+\n+    @Param(name = \"rule\")\n+    protected DocumentModel rule;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentModel document) {\n+        if (!rule.hasFacet(RetentionConstants.RETENTION_RULE_FACET)) {\n+            throw new NuxeoException(String.format(\"Document is not a rule\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTg3NDk1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/FireRetentionEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzoyNDoyMFrOFc2s_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzoyNDoyMFrOFc2s_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwMDcwMw==", "bodyText": "extra space here ;)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365800703", "createdAt": "2020-01-13T13:24:20Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/FireRetentionEvent.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.operations;\n+\n+import java.util.Collections;\n+import java.util.Date;\n+\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventProducer;\n+import org.nuxeo.ecm.platform.audit.api.AuditLogger;\n+import org.nuxeo.ecm.platform.audit.api.LogEntry;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.event.RetentionEventContext;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Operation(id = FireRetentionEvent.ID, category = Constants.CAT_NOTIFICATION, label = \"Fire Retention Event\", description = \"Fire a retention business related event.\")\n+public class FireRetentionEvent {\n+\n+    public static final String ID = \"Retention.FireEvent\";\n+\n+    @Context\n+    protected OperationContext ctx;\n+\n+    @Context\n+    protected EventProducer service;\n+\n+    @Param(name = \"name\")\n+    protected String name;\n+\n+    @Param(name = \"audit\", required = false)\n+    protected boolean audit = true;\n+\n+    @OperationMethod\n+    public void run() {\n+        CoreSession session = ctx.getCoreSession();\n+        Object input = ctx.getInput();\n+        RetentionEventContext evctx = new RetentionEventContext(session.getPrincipal());\n+        if (input != null) {\n+            if (input instanceof String) {\n+                evctx.setInput((String) input);\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTk4NzQ0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/RetainDocument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDowMDoxMVrOFc3wAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo0OToxOVrOFfAjow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxNzg1Ng==", "bodyText": "i am wondering why we set the RETAIN_UNTIL_INDETERMINATE when the provided value is null, because the implementation here lets the null value", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365817856", "createdAt": "2020-01-13T14:00:11Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/RetainDocument.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.operations;\n+\n+import java.util.Calendar;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Operation(id = RetainDocument.ID, category = Constants.CAT_DOCUMENT, label = \"Retain\", description = \"Turn the input document into a record and retain it until the until date. Returns back the retained document.\")\n+public class RetainDocument {\n+\n+    public static final String ID = \"Document.Retain\";\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @Param(name = \"until\", required = false, description = \"If empty, the input document will be retained indeterminately\")\n+    protected Calendar until;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentRef doc) {\n+        session.makeRecord(doc);\n+        session.setRetainUntil(doc, until != null ? until : CoreSession.RETAIN_UNTIL_INDETERMINATE, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1OTI5OQ==", "bodyText": "That's part of the contract for this parameter: If empty, the input document will be retained indeterminately", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368059299", "createdAt": "2020-01-17T17:49:19Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/RetainDocument.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.operations;\n+\n+import java.util.Calendar;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Operation(id = RetainDocument.ID, category = Constants.CAT_DOCUMENT, label = \"Retain\", description = \"Turn the input document into a record and retain it until the until date. Returns back the retained document.\")\n+public class RetainDocument {\n+\n+    public static final String ID = \"Document.Retain\";\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @Param(name = \"until\", required = false, description = \"If empty, the input document will be retained indeterminately\")\n+    protected Calendar until;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentRef doc) {\n+        session.makeRecord(doc);\n+        session.setRetainUntil(doc, until != null ? until : CoreSession.RETAIN_UNTIL_INDETERMINATE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgxNzg1Ng=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDAyOTIwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxMzoxOFrOFc4J3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxMzoxOFrOFc4J3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyNDQ3OA==", "bodyText": "can be replaced by\n log.debug(\"Attaching event-based rule on {} matching  \\\"{}\\\"\", rule::getStartingPointEvent,\n                    () -> rule.getStartingPointExpression());", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365824478", "createdAt": "2020-01-13T14:13:18Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.service;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jboss.el.ExpressionFactoryImpl;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.document.DeleteDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.LockDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.TrashDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.UnlockDocument;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.api.event.CoreEventConstants;\n+import org.nuxeo.ecm.core.api.event.DocumentEventCategories;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.directory.Directory;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.ecm.platform.actions.ELActionContext;\n+import org.nuxeo.ecm.platform.el.ExpressionContext;\n+import org.nuxeo.ecm.platform.usermanager.UserManager;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.workers.RuleEvaluationWorker;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionManagerImpl extends DefaultComponent implements RetentionManager {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionManagerImpl.class);\n+\n+    @Override\n+    public DocumentModel attachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        checkCanAttachRule(document, rule, session);\n+        session.makeRecord(document.getRef());\n+        final Calendar retainUntil;\n+        if (rule.isImmediate()) {\n+            retainUntil = rule.getRetainUntilDateFromNow();\n+            log.debug(\"Attaching immediate rule until {}\",\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else if (rule.isAfterDely()) {\n+            log.debug(\"Attaching after delay rule\");\n+            throw new UnsupportedOperationException(\"After delay not yet implemented\");\n+        } else if (rule.isEventBased()) {\n+            retainUntil = CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+            log.debug(\"Attaching event-based rule on {} matching \\\"{}\\\"\", rule.getStartingPointEvent(),\n+                    rule.getStartingPointExpression());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDA0MjgyOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxNzozMVrOFc4SMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxNzozMVrOFc4SMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyNjYwOQ==", "bodyText": "missing the specific format -> %s", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365826609", "createdAt": "2020-01-13T14:17:31Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.service;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jboss.el.ExpressionFactoryImpl;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.document.DeleteDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.LockDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.TrashDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.UnlockDocument;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.api.event.CoreEventConstants;\n+import org.nuxeo.ecm.core.api.event.DocumentEventCategories;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.directory.Directory;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.ecm.platform.actions.ELActionContext;\n+import org.nuxeo.ecm.platform.el.ExpressionContext;\n+import org.nuxeo.ecm.platform.usermanager.UserManager;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.workers.RuleEvaluationWorker;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionManagerImpl extends DefaultComponent implements RetentionManager {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionManagerImpl.class);\n+\n+    @Override\n+    public DocumentModel attachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        checkCanAttachRule(document, rule, session);\n+        session.makeRecord(document.getRef());\n+        final Calendar retainUntil;\n+        if (rule.isImmediate()) {\n+            retainUntil = rule.getRetainUntilDateFromNow();\n+            log.debug(\"Attaching immediate rule until {}\",\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else if (rule.isAfterDely()) {\n+            log.debug(\"Attaching after delay rule\");\n+            throw new UnsupportedOperationException(\"After delay not yet implemented\");\n+        } else if (rule.isEventBased()) {\n+            retainUntil = CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+            log.debug(\"Attaching event-based rule on {} matching \\\"{}\\\"\", rule.getStartingPointEvent(),\n+                    rule.getStartingPointExpression());\n+        } else if (rule.isMetadataBased()) {\n+            String xpath = rule.getMetadataXpath();\n+            if (StringUtils.isBlank(xpath)) {\n+                throw new NuxeoException(\"Metadata field is null\");\n+            }\n+            Property prop = document.getProperty(xpath);\n+            if (!(prop.getType() instanceof DateType)) {\n+                throw new NuxeoException(\n+                        String.format(\"Field %s of type % is expected to have a DateType\", xpath, prop.getType()));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDA0NjM2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxODozNFrOFc4UTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxODozNFrOFc4UTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyNzE1MQ==", "bodyText": "i am wondering if we can rework this part to reduce the number of the control flow. perhaps separate the control/validation from the processing", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365827151", "createdAt": "2020-01-13T14:18:34Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.service;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jboss.el.ExpressionFactoryImpl;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.document.DeleteDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.LockDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.TrashDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.UnlockDocument;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.api.event.CoreEventConstants;\n+import org.nuxeo.ecm.core.api.event.DocumentEventCategories;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.directory.Directory;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.ecm.platform.actions.ELActionContext;\n+import org.nuxeo.ecm.platform.el.ExpressionContext;\n+import org.nuxeo.ecm.platform.usermanager.UserManager;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.workers.RuleEvaluationWorker;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionManagerImpl extends DefaultComponent implements RetentionManager {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionManagerImpl.class);\n+\n+    @Override\n+    public DocumentModel attachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        checkCanAttachRule(document, rule, session);\n+        session.makeRecord(document.getRef());\n+        final Calendar retainUntil;\n+        if (rule.isImmediate()) {\n+            retainUntil = rule.getRetainUntilDateFromNow();\n+            log.debug(\"Attaching immediate rule until {}\",\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else if (rule.isAfterDely()) {\n+            log.debug(\"Attaching after delay rule\");\n+            throw new UnsupportedOperationException(\"After delay not yet implemented\");\n+        } else if (rule.isEventBased()) {\n+            retainUntil = CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+            log.debug(\"Attaching event-based rule on {} matching \\\"{}\\\"\", rule.getStartingPointEvent(),\n+                    rule.getStartingPointExpression());\n+        } else if (rule.isMetadataBased()) {\n+            String xpath = rule.getMetadataXpath();\n+            if (StringUtils.isBlank(xpath)) {\n+                throw new NuxeoException(\"Metadata field is null\");\n+            }\n+            Property prop = document.getProperty(xpath);\n+            if (!(prop.getType() instanceof DateType)) {\n+                throw new NuxeoException(\n+                        String.format(\"Field %s of type % is expected to have a DateType\", xpath, prop.getType()));\n+            }\n+            Calendar value = (Calendar) prop.getValue();\n+            if (value == null) {\n+                retainUntil = rule.getRetainUntilDateFromNow();\n+            } else {\n+                retainUntil = rule.getRetainUntilDateFrom(value);\n+                Calendar now = Calendar.getInstance();\n+                if (now.after(retainUntil)) {\n+                    log.info(\n+                            \"Metabased-based rule found past date {} as retention expiration date on {} from {} property. Ignoring...\",\n+                            () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()),\n+                            document::getPathAsString, () -> xpath);\n+                    return session.getDocument(document.getRef());\n+                }\n+            }\n+            log.debug(\"Attaching rule base on {} with value {}\", () -> xpath,\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else {\n+            throw new IllegalArgumentException(\"Unknown starting point policy: \" + rule.getStartingPointPolicy());\n+        }\n+        document.addFacet(RetentionConstants.RECORD_FACET);\n+        Record record = document.getAdapter(Record.class);\n+        record.setRule(rule, session);\n+        executeRuleBeginActions(record, session);\n+        session.setRetainUntil(document.getRef(), retainUntil, null);\n+        notifyAttachRule(record, rule, session);\n+        return session.getDocument(document.getRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDA3NDI3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyNjoyNlrOFc4lEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo1MzoyNVrOFfApyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzMTQ0Mg==", "bodyText": "i think you mean / Do not lock document if already locked, and unlock if already unlocked (triggers an err... ->\nDo not lock document if already locked, and lock if already unlocked... or i am wrong", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365831442", "createdAt": "2020-01-13T14:26:26Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.service;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jboss.el.ExpressionFactoryImpl;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.document.DeleteDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.LockDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.TrashDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.UnlockDocument;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.api.event.CoreEventConstants;\n+import org.nuxeo.ecm.core.api.event.DocumentEventCategories;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.directory.Directory;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.ecm.platform.actions.ELActionContext;\n+import org.nuxeo.ecm.platform.el.ExpressionContext;\n+import org.nuxeo.ecm.platform.usermanager.UserManager;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.workers.RuleEvaluationWorker;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionManagerImpl extends DefaultComponent implements RetentionManager {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionManagerImpl.class);\n+\n+    @Override\n+    public DocumentModel attachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        checkCanAttachRule(document, rule, session);\n+        session.makeRecord(document.getRef());\n+        final Calendar retainUntil;\n+        if (rule.isImmediate()) {\n+            retainUntil = rule.getRetainUntilDateFromNow();\n+            log.debug(\"Attaching immediate rule until {}\",\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else if (rule.isAfterDely()) {\n+            log.debug(\"Attaching after delay rule\");\n+            throw new UnsupportedOperationException(\"After delay not yet implemented\");\n+        } else if (rule.isEventBased()) {\n+            retainUntil = CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+            log.debug(\"Attaching event-based rule on {} matching \\\"{}\\\"\", rule.getStartingPointEvent(),\n+                    rule.getStartingPointExpression());\n+        } else if (rule.isMetadataBased()) {\n+            String xpath = rule.getMetadataXpath();\n+            if (StringUtils.isBlank(xpath)) {\n+                throw new NuxeoException(\"Metadata field is null\");\n+            }\n+            Property prop = document.getProperty(xpath);\n+            if (!(prop.getType() instanceof DateType)) {\n+                throw new NuxeoException(\n+                        String.format(\"Field %s of type % is expected to have a DateType\", xpath, prop.getType()));\n+            }\n+            Calendar value = (Calendar) prop.getValue();\n+            if (value == null) {\n+                retainUntil = rule.getRetainUntilDateFromNow();\n+            } else {\n+                retainUntil = rule.getRetainUntilDateFrom(value);\n+                Calendar now = Calendar.getInstance();\n+                if (now.after(retainUntil)) {\n+                    log.info(\n+                            \"Metabased-based rule found past date {} as retention expiration date on {} from {} property. Ignoring...\",\n+                            () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()),\n+                            document::getPathAsString, () -> xpath);\n+                    return session.getDocument(document.getRef());\n+                }\n+            }\n+            log.debug(\"Attaching rule base on {} with value {}\", () -> xpath,\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else {\n+            throw new IllegalArgumentException(\"Unknown starting point policy: \" + rule.getStartingPointPolicy());\n+        }\n+        document.addFacet(RetentionConstants.RECORD_FACET);\n+        Record record = document.getAdapter(Record.class);\n+        record.setRule(rule, session);\n+        executeRuleBeginActions(record, session);\n+        session.setRetainUntil(document.getRef(), retainUntil, null);\n+        notifyAttachRule(record, rule, session);\n+        return session.getDocument(document.getRef());\n+    }\n+\n+    protected void notifyAttachRule(Record record, RetentionRule rule, CoreSession session) {\n+        DocumentModel doc = record.getDocument();\n+        DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+        ctx.setProperty(CoreEventConstants.REPOSITORY_NAME, session.getRepositoryName());\n+        ctx.setProperty(CoreEventConstants.SESSION_ID, session.getSessionId());\n+        ctx.setProperty(DocumentEventContext.CATEGORY_PROPERTY_KEY, DocumentEventCategories.EVENT_DOCUMENT_CATEGORY);\n+        ctx.setProperty(DocumentEventContext.COMMENT_PROPERTY_KEY, rule.getDocument().getPathAsString());\n+        Event event = ctx.newEvent(RetentionConstants.RULE_ATTACHED_EVENT);\n+        Framework.getService(EventService.class).fireEvent(event);\n+    }\n+\n+    protected void checkCanAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        NuxeoPrincipal principal = session.getPrincipal();\n+        if (!principal.isAdministrator() && !principal.isMemberOf(RetentionConstants.RECORD_MANAGER_GROUP_NAME)) {\n+            if (!session.hasPermission(document.getRef(), SecurityConstants.MAKE_RECORD)\n+                    || !session.hasPermission(document.getRef(), SecurityConstants.SET_RETENTION))\n+                throw new NuxeoException(\"User is not authorized to attach retention rule\", SC_FORBIDDEN);\n+        }\n+        if (!rule.isEnabled()) {\n+            throw new NuxeoException(String.format(\"Rule is disabled\"));\n+        }\n+        if (!rule.isDocTypeAccepted(document.getType())) {\n+            throw new NuxeoException(\"Rule does not accept this document type\");\n+        }\n+        if (document.hasFacet(RetentionConstants.RECORD_FACET)) {\n+            throw new NuxeoException(\"Document is already a record\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean canAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        try {\n+            checkCanAttachRule(document, rule, session);\n+            return true;\n+        } catch (NuxeoException e) {\n+            log.info(\"Cannot attach rule {} on document {}\", () -> rule.getDocument().getPathAsString(),\n+                    document::getPathAsString);\n+            return false;\n+        }\n+    }\n+\n+    public void executeRuleBeginActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getBeginActions(), session);\n+        }\n+    }\n+\n+    public void executeRuleEndActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getEndActions(), session);\n+        }\n+    }\n+\n+    protected void executeRuleActions(DocumentModel doc, List<String> actionIds, CoreSession session) {\n+        if (actionIds != null) {\n+            AutomationService automationService = Framework.getService(AutomationService.class);\n+            for (String operationId : actionIds) {\n+                log.debug(\"Executing {} action on {}\", () -> operationId, doc::getPathAsString);\n+                // Do not lock document if already locked, and unlock if already unlocked (triggers an error)\n+                // Also, if it's time to delete, unlock it first, etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MDg3Mg==", "bodyText": "Replaced with clearer Do not lock document if already locked, nor unlock if already unlocked (would trigger an error)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368060872", "createdAt": "2020-01-17T17:53:25Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.service;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jboss.el.ExpressionFactoryImpl;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.document.DeleteDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.LockDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.TrashDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.UnlockDocument;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.api.event.CoreEventConstants;\n+import org.nuxeo.ecm.core.api.event.DocumentEventCategories;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.directory.Directory;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.ecm.platform.actions.ELActionContext;\n+import org.nuxeo.ecm.platform.el.ExpressionContext;\n+import org.nuxeo.ecm.platform.usermanager.UserManager;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.workers.RuleEvaluationWorker;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionManagerImpl extends DefaultComponent implements RetentionManager {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionManagerImpl.class);\n+\n+    @Override\n+    public DocumentModel attachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        checkCanAttachRule(document, rule, session);\n+        session.makeRecord(document.getRef());\n+        final Calendar retainUntil;\n+        if (rule.isImmediate()) {\n+            retainUntil = rule.getRetainUntilDateFromNow();\n+            log.debug(\"Attaching immediate rule until {}\",\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else if (rule.isAfterDely()) {\n+            log.debug(\"Attaching after delay rule\");\n+            throw new UnsupportedOperationException(\"After delay not yet implemented\");\n+        } else if (rule.isEventBased()) {\n+            retainUntil = CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+            log.debug(\"Attaching event-based rule on {} matching \\\"{}\\\"\", rule.getStartingPointEvent(),\n+                    rule.getStartingPointExpression());\n+        } else if (rule.isMetadataBased()) {\n+            String xpath = rule.getMetadataXpath();\n+            if (StringUtils.isBlank(xpath)) {\n+                throw new NuxeoException(\"Metadata field is null\");\n+            }\n+            Property prop = document.getProperty(xpath);\n+            if (!(prop.getType() instanceof DateType)) {\n+                throw new NuxeoException(\n+                        String.format(\"Field %s of type % is expected to have a DateType\", xpath, prop.getType()));\n+            }\n+            Calendar value = (Calendar) prop.getValue();\n+            if (value == null) {\n+                retainUntil = rule.getRetainUntilDateFromNow();\n+            } else {\n+                retainUntil = rule.getRetainUntilDateFrom(value);\n+                Calendar now = Calendar.getInstance();\n+                if (now.after(retainUntil)) {\n+                    log.info(\n+                            \"Metabased-based rule found past date {} as retention expiration date on {} from {} property. Ignoring...\",\n+                            () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()),\n+                            document::getPathAsString, () -> xpath);\n+                    return session.getDocument(document.getRef());\n+                }\n+            }\n+            log.debug(\"Attaching rule base on {} with value {}\", () -> xpath,\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else {\n+            throw new IllegalArgumentException(\"Unknown starting point policy: \" + rule.getStartingPointPolicy());\n+        }\n+        document.addFacet(RetentionConstants.RECORD_FACET);\n+        Record record = document.getAdapter(Record.class);\n+        record.setRule(rule, session);\n+        executeRuleBeginActions(record, session);\n+        session.setRetainUntil(document.getRef(), retainUntil, null);\n+        notifyAttachRule(record, rule, session);\n+        return session.getDocument(document.getRef());\n+    }\n+\n+    protected void notifyAttachRule(Record record, RetentionRule rule, CoreSession session) {\n+        DocumentModel doc = record.getDocument();\n+        DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+        ctx.setProperty(CoreEventConstants.REPOSITORY_NAME, session.getRepositoryName());\n+        ctx.setProperty(CoreEventConstants.SESSION_ID, session.getSessionId());\n+        ctx.setProperty(DocumentEventContext.CATEGORY_PROPERTY_KEY, DocumentEventCategories.EVENT_DOCUMENT_CATEGORY);\n+        ctx.setProperty(DocumentEventContext.COMMENT_PROPERTY_KEY, rule.getDocument().getPathAsString());\n+        Event event = ctx.newEvent(RetentionConstants.RULE_ATTACHED_EVENT);\n+        Framework.getService(EventService.class).fireEvent(event);\n+    }\n+\n+    protected void checkCanAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        NuxeoPrincipal principal = session.getPrincipal();\n+        if (!principal.isAdministrator() && !principal.isMemberOf(RetentionConstants.RECORD_MANAGER_GROUP_NAME)) {\n+            if (!session.hasPermission(document.getRef(), SecurityConstants.MAKE_RECORD)\n+                    || !session.hasPermission(document.getRef(), SecurityConstants.SET_RETENTION))\n+                throw new NuxeoException(\"User is not authorized to attach retention rule\", SC_FORBIDDEN);\n+        }\n+        if (!rule.isEnabled()) {\n+            throw new NuxeoException(String.format(\"Rule is disabled\"));\n+        }\n+        if (!rule.isDocTypeAccepted(document.getType())) {\n+            throw new NuxeoException(\"Rule does not accept this document type\");\n+        }\n+        if (document.hasFacet(RetentionConstants.RECORD_FACET)) {\n+            throw new NuxeoException(\"Document is already a record\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean canAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        try {\n+            checkCanAttachRule(document, rule, session);\n+            return true;\n+        } catch (NuxeoException e) {\n+            log.info(\"Cannot attach rule {} on document {}\", () -> rule.getDocument().getPathAsString(),\n+                    document::getPathAsString);\n+            return false;\n+        }\n+    }\n+\n+    public void executeRuleBeginActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getBeginActions(), session);\n+        }\n+    }\n+\n+    public void executeRuleEndActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getEndActions(), session);\n+        }\n+    }\n+\n+    protected void executeRuleActions(DocumentModel doc, List<String> actionIds, CoreSession session) {\n+        if (actionIds != null) {\n+            AutomationService automationService = Framework.getService(AutomationService.class);\n+            for (String operationId : actionIds) {\n+                log.debug(\"Executing {} action on {}\", () -> operationId, doc::getPathAsString);\n+                // Do not lock document if already locked, and unlock if already unlocked (triggers an error)\n+                // Also, if it's time to delete, unlock it first, etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzMTQ0Mg=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDA4NDYwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyODo1OVrOFc4rCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyODo1OVrOFc4rCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzMjk3MQ==", "bodyText": "the second parameter is missed or the second {} is not needed", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365832971", "createdAt": "2020-01-13T14:28:59Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.service;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jboss.el.ExpressionFactoryImpl;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.document.DeleteDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.LockDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.TrashDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.UnlockDocument;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.api.event.CoreEventConstants;\n+import org.nuxeo.ecm.core.api.event.DocumentEventCategories;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.directory.Directory;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.ecm.platform.actions.ELActionContext;\n+import org.nuxeo.ecm.platform.el.ExpressionContext;\n+import org.nuxeo.ecm.platform.usermanager.UserManager;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.workers.RuleEvaluationWorker;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionManagerImpl extends DefaultComponent implements RetentionManager {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionManagerImpl.class);\n+\n+    @Override\n+    public DocumentModel attachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        checkCanAttachRule(document, rule, session);\n+        session.makeRecord(document.getRef());\n+        final Calendar retainUntil;\n+        if (rule.isImmediate()) {\n+            retainUntil = rule.getRetainUntilDateFromNow();\n+            log.debug(\"Attaching immediate rule until {}\",\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else if (rule.isAfterDely()) {\n+            log.debug(\"Attaching after delay rule\");\n+            throw new UnsupportedOperationException(\"After delay not yet implemented\");\n+        } else if (rule.isEventBased()) {\n+            retainUntil = CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+            log.debug(\"Attaching event-based rule on {} matching \\\"{}\\\"\", rule.getStartingPointEvent(),\n+                    rule.getStartingPointExpression());\n+        } else if (rule.isMetadataBased()) {\n+            String xpath = rule.getMetadataXpath();\n+            if (StringUtils.isBlank(xpath)) {\n+                throw new NuxeoException(\"Metadata field is null\");\n+            }\n+            Property prop = document.getProperty(xpath);\n+            if (!(prop.getType() instanceof DateType)) {\n+                throw new NuxeoException(\n+                        String.format(\"Field %s of type % is expected to have a DateType\", xpath, prop.getType()));\n+            }\n+            Calendar value = (Calendar) prop.getValue();\n+            if (value == null) {\n+                retainUntil = rule.getRetainUntilDateFromNow();\n+            } else {\n+                retainUntil = rule.getRetainUntilDateFrom(value);\n+                Calendar now = Calendar.getInstance();\n+                if (now.after(retainUntil)) {\n+                    log.info(\n+                            \"Metabased-based rule found past date {} as retention expiration date on {} from {} property. Ignoring...\",\n+                            () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()),\n+                            document::getPathAsString, () -> xpath);\n+                    return session.getDocument(document.getRef());\n+                }\n+            }\n+            log.debug(\"Attaching rule base on {} with value {}\", () -> xpath,\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else {\n+            throw new IllegalArgumentException(\"Unknown starting point policy: \" + rule.getStartingPointPolicy());\n+        }\n+        document.addFacet(RetentionConstants.RECORD_FACET);\n+        Record record = document.getAdapter(Record.class);\n+        record.setRule(rule, session);\n+        executeRuleBeginActions(record, session);\n+        session.setRetainUntil(document.getRef(), retainUntil, null);\n+        notifyAttachRule(record, rule, session);\n+        return session.getDocument(document.getRef());\n+    }\n+\n+    protected void notifyAttachRule(Record record, RetentionRule rule, CoreSession session) {\n+        DocumentModel doc = record.getDocument();\n+        DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+        ctx.setProperty(CoreEventConstants.REPOSITORY_NAME, session.getRepositoryName());\n+        ctx.setProperty(CoreEventConstants.SESSION_ID, session.getSessionId());\n+        ctx.setProperty(DocumentEventContext.CATEGORY_PROPERTY_KEY, DocumentEventCategories.EVENT_DOCUMENT_CATEGORY);\n+        ctx.setProperty(DocumentEventContext.COMMENT_PROPERTY_KEY, rule.getDocument().getPathAsString());\n+        Event event = ctx.newEvent(RetentionConstants.RULE_ATTACHED_EVENT);\n+        Framework.getService(EventService.class).fireEvent(event);\n+    }\n+\n+    protected void checkCanAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        NuxeoPrincipal principal = session.getPrincipal();\n+        if (!principal.isAdministrator() && !principal.isMemberOf(RetentionConstants.RECORD_MANAGER_GROUP_NAME)) {\n+            if (!session.hasPermission(document.getRef(), SecurityConstants.MAKE_RECORD)\n+                    || !session.hasPermission(document.getRef(), SecurityConstants.SET_RETENTION))\n+                throw new NuxeoException(\"User is not authorized to attach retention rule\", SC_FORBIDDEN);\n+        }\n+        if (!rule.isEnabled()) {\n+            throw new NuxeoException(String.format(\"Rule is disabled\"));\n+        }\n+        if (!rule.isDocTypeAccepted(document.getType())) {\n+            throw new NuxeoException(\"Rule does not accept this document type\");\n+        }\n+        if (document.hasFacet(RetentionConstants.RECORD_FACET)) {\n+            throw new NuxeoException(\"Document is already a record\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean canAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        try {\n+            checkCanAttachRule(document, rule, session);\n+            return true;\n+        } catch (NuxeoException e) {\n+            log.info(\"Cannot attach rule {} on document {}\", () -> rule.getDocument().getPathAsString(),\n+                    document::getPathAsString);\n+            return false;\n+        }\n+    }\n+\n+    public void executeRuleBeginActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getBeginActions(), session);\n+        }\n+    }\n+\n+    public void executeRuleEndActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getEndActions(), session);\n+        }\n+    }\n+\n+    protected void executeRuleActions(DocumentModel doc, List<String> actionIds, CoreSession session) {\n+        if (actionIds != null) {\n+            AutomationService automationService = Framework.getService(AutomationService.class);\n+            for (String operationId : actionIds) {\n+                log.debug(\"Executing {} action on {}\", () -> operationId, doc::getPathAsString);\n+                // Do not lock document if already locked, and unlock if already unlocked (triggers an error)\n+                // Also, if it's time to delete, unlock it first, etc.\n+                // (more generally, be ready to handle specific operations and context)\n+                switch (operationId) {\n+                case LockDocument.ID:\n+                    if (doc.isLocked()) {\n+                        continue;\n+                    }\n+                    break;\n+\n+                case UnlockDocument.ID:\n+                    if (!doc.isLocked()) {\n+                        continue;\n+                    }\n+                    break;\n+\n+                case DeleteDocument.ID:\n+                case TrashDocument.ID:\n+                    if (doc.isLocked()) {\n+                        session.removeLock(doc.getRef());\n+                        doc = session.getDocument(doc.getRef());\n+                    }\n+                    break;\n+                }\n+                OperationContext context = getExecutionContext(doc, session);\n+                try {\n+                    automationService.run(context, operationId);\n+                } catch (OperationException e) {\n+                    throw new NuxeoException(\"Error running operation: \" + operationId, e);\n+                }\n+            }\n+        }\n+    }\n+\n+    protected OperationContext getExecutionContext(DocumentModel doc, CoreSession session) {\n+        OperationContext context = new OperationContext(session);\n+        context.put(\"document\", doc);\n+        context.setCommit(false); // no session save at end\n+        context.setInput(doc);\n+        return context;\n+    }\n+\n+    @Override\n+    public void evalRules(Map<String, Set<String>> docsToCheckAndEvents) {\n+        if (docsToCheckAndEvents.isEmpty()) {\n+            return;\n+        }\n+        RuleEvaluationWorker work = new RuleEvaluationWorker(docsToCheckAndEvents);\n+        Framework.getService(WorkManager.class).schedule(work, WorkManager.Scheduling.ENQUEUE);\n+    }\n+\n+    protected ELActionContext initActionContext(DocumentModel doc, CoreSession session) {\n+        ELActionContext ctx = new ELActionContext(new ExpressionContext(), new ExpressionFactoryImpl());\n+        ctx.setCurrentPrincipal(session.getPrincipal());\n+        doc.detach(true);\n+        ctx.setCurrentDocument(doc);\n+        return ctx;\n+    }\n+\n+    protected Boolean evaluateConditionExpression(ELActionContext ctx, String expression) {\n+        Calendar now = Calendar.getInstance();\n+        if (StringUtils.isEmpty(expression)) {\n+            return true;\n+        }\n+        ctx.putLocalVariable(\"currentDate\", now);\n+        return ctx.checkCondition(expression);\n+    }\n+\n+    @Override\n+    public void evalExpressionEventBasedRules(Record record, Set<String> events, CoreSession session) {\n+        if (record == null) {\n+            return; // nothing to do\n+        }\n+        RetentionRule rule = record.getRule(session);\n+        if (rule == null) {\n+            return; // nothing to do\n+        }\n+        if (!rule.isEventBased()) {\n+            log.trace(\"Record is not event-based\");\n+            return;\n+        }\n+        log.debug(\"Evaluating event-based rules for record {}\", () -> record.getDocument().getPathAsString());\n+        if (record.isRetentionExpired()) {\n+            // retention expired, nothing to do\n+            log.debug(\"Evaluating event-based found retention expired\");\n+            proceedRetentionExpired(record, session);\n+            return;\n+\n+        }\n+        String startingPointEvent = rule.getStartingPointEvent();\n+        if (StringUtils.isBlank(startingPointEvent)) {\n+            log.warn(\"Evaluating event-based rules  on record {} found no event specified\",\n+                    () -> record.getDocument().getPathAsString());\n+            return;\n+        }\n+        if (events.contains(startingPointEvent)) {\n+            ELActionContext actionContext = initActionContext(record.getDocument(), session);\n+            String expression = rule.getStartingPointExpression();\n+            Boolean startNow = evaluateConditionExpression(actionContext, expression);\n+            if (startNow) {\n+                session.setRetainUntil(record.getDocument().getRef(), rule.getRetainUntilDateFromNow(), null);\n+                log.debug(\"Evaluating event-based rules: expression {} matched on event {}\", startingPointEvent);\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDA4Nzk3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyOTo1NFrOFc4s4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo1Njo0M1rOFfAvDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzMzQ0MQ==", "bodyText": "chaching -> caching or i am wrong :)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365833441", "createdAt": "2020-01-13T14:29:54Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.service;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jboss.el.ExpressionFactoryImpl;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.document.DeleteDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.LockDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.TrashDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.UnlockDocument;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.api.event.CoreEventConstants;\n+import org.nuxeo.ecm.core.api.event.DocumentEventCategories;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.directory.Directory;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.ecm.platform.actions.ELActionContext;\n+import org.nuxeo.ecm.platform.el.ExpressionContext;\n+import org.nuxeo.ecm.platform.usermanager.UserManager;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.workers.RuleEvaluationWorker;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionManagerImpl extends DefaultComponent implements RetentionManager {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionManagerImpl.class);\n+\n+    @Override\n+    public DocumentModel attachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        checkCanAttachRule(document, rule, session);\n+        session.makeRecord(document.getRef());\n+        final Calendar retainUntil;\n+        if (rule.isImmediate()) {\n+            retainUntil = rule.getRetainUntilDateFromNow();\n+            log.debug(\"Attaching immediate rule until {}\",\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else if (rule.isAfterDely()) {\n+            log.debug(\"Attaching after delay rule\");\n+            throw new UnsupportedOperationException(\"After delay not yet implemented\");\n+        } else if (rule.isEventBased()) {\n+            retainUntil = CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+            log.debug(\"Attaching event-based rule on {} matching \\\"{}\\\"\", rule.getStartingPointEvent(),\n+                    rule.getStartingPointExpression());\n+        } else if (rule.isMetadataBased()) {\n+            String xpath = rule.getMetadataXpath();\n+            if (StringUtils.isBlank(xpath)) {\n+                throw new NuxeoException(\"Metadata field is null\");\n+            }\n+            Property prop = document.getProperty(xpath);\n+            if (!(prop.getType() instanceof DateType)) {\n+                throw new NuxeoException(\n+                        String.format(\"Field %s of type % is expected to have a DateType\", xpath, prop.getType()));\n+            }\n+            Calendar value = (Calendar) prop.getValue();\n+            if (value == null) {\n+                retainUntil = rule.getRetainUntilDateFromNow();\n+            } else {\n+                retainUntil = rule.getRetainUntilDateFrom(value);\n+                Calendar now = Calendar.getInstance();\n+                if (now.after(retainUntil)) {\n+                    log.info(\n+                            \"Metabased-based rule found past date {} as retention expiration date on {} from {} property. Ignoring...\",\n+                            () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()),\n+                            document::getPathAsString, () -> xpath);\n+                    return session.getDocument(document.getRef());\n+                }\n+            }\n+            log.debug(\"Attaching rule base on {} with value {}\", () -> xpath,\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else {\n+            throw new IllegalArgumentException(\"Unknown starting point policy: \" + rule.getStartingPointPolicy());\n+        }\n+        document.addFacet(RetentionConstants.RECORD_FACET);\n+        Record record = document.getAdapter(Record.class);\n+        record.setRule(rule, session);\n+        executeRuleBeginActions(record, session);\n+        session.setRetainUntil(document.getRef(), retainUntil, null);\n+        notifyAttachRule(record, rule, session);\n+        return session.getDocument(document.getRef());\n+    }\n+\n+    protected void notifyAttachRule(Record record, RetentionRule rule, CoreSession session) {\n+        DocumentModel doc = record.getDocument();\n+        DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+        ctx.setProperty(CoreEventConstants.REPOSITORY_NAME, session.getRepositoryName());\n+        ctx.setProperty(CoreEventConstants.SESSION_ID, session.getSessionId());\n+        ctx.setProperty(DocumentEventContext.CATEGORY_PROPERTY_KEY, DocumentEventCategories.EVENT_DOCUMENT_CATEGORY);\n+        ctx.setProperty(DocumentEventContext.COMMENT_PROPERTY_KEY, rule.getDocument().getPathAsString());\n+        Event event = ctx.newEvent(RetentionConstants.RULE_ATTACHED_EVENT);\n+        Framework.getService(EventService.class).fireEvent(event);\n+    }\n+\n+    protected void checkCanAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        NuxeoPrincipal principal = session.getPrincipal();\n+        if (!principal.isAdministrator() && !principal.isMemberOf(RetentionConstants.RECORD_MANAGER_GROUP_NAME)) {\n+            if (!session.hasPermission(document.getRef(), SecurityConstants.MAKE_RECORD)\n+                    || !session.hasPermission(document.getRef(), SecurityConstants.SET_RETENTION))\n+                throw new NuxeoException(\"User is not authorized to attach retention rule\", SC_FORBIDDEN);\n+        }\n+        if (!rule.isEnabled()) {\n+            throw new NuxeoException(String.format(\"Rule is disabled\"));\n+        }\n+        if (!rule.isDocTypeAccepted(document.getType())) {\n+            throw new NuxeoException(\"Rule does not accept this document type\");\n+        }\n+        if (document.hasFacet(RetentionConstants.RECORD_FACET)) {\n+            throw new NuxeoException(\"Document is already a record\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean canAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        try {\n+            checkCanAttachRule(document, rule, session);\n+            return true;\n+        } catch (NuxeoException e) {\n+            log.info(\"Cannot attach rule {} on document {}\", () -> rule.getDocument().getPathAsString(),\n+                    document::getPathAsString);\n+            return false;\n+        }\n+    }\n+\n+    public void executeRuleBeginActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getBeginActions(), session);\n+        }\n+    }\n+\n+    public void executeRuleEndActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getEndActions(), session);\n+        }\n+    }\n+\n+    protected void executeRuleActions(DocumentModel doc, List<String> actionIds, CoreSession session) {\n+        if (actionIds != null) {\n+            AutomationService automationService = Framework.getService(AutomationService.class);\n+            for (String operationId : actionIds) {\n+                log.debug(\"Executing {} action on {}\", () -> operationId, doc::getPathAsString);\n+                // Do not lock document if already locked, and unlock if already unlocked (triggers an error)\n+                // Also, if it's time to delete, unlock it first, etc.\n+                // (more generally, be ready to handle specific operations and context)\n+                switch (operationId) {\n+                case LockDocument.ID:\n+                    if (doc.isLocked()) {\n+                        continue;\n+                    }\n+                    break;\n+\n+                case UnlockDocument.ID:\n+                    if (!doc.isLocked()) {\n+                        continue;\n+                    }\n+                    break;\n+\n+                case DeleteDocument.ID:\n+                case TrashDocument.ID:\n+                    if (doc.isLocked()) {\n+                        session.removeLock(doc.getRef());\n+                        doc = session.getDocument(doc.getRef());\n+                    }\n+                    break;\n+                }\n+                OperationContext context = getExecutionContext(doc, session);\n+                try {\n+                    automationService.run(context, operationId);\n+                } catch (OperationException e) {\n+                    throw new NuxeoException(\"Error running operation: \" + operationId, e);\n+                }\n+            }\n+        }\n+    }\n+\n+    protected OperationContext getExecutionContext(DocumentModel doc, CoreSession session) {\n+        OperationContext context = new OperationContext(session);\n+        context.put(\"document\", doc);\n+        context.setCommit(false); // no session save at end\n+        context.setInput(doc);\n+        return context;\n+    }\n+\n+    @Override\n+    public void evalRules(Map<String, Set<String>> docsToCheckAndEvents) {\n+        if (docsToCheckAndEvents.isEmpty()) {\n+            return;\n+        }\n+        RuleEvaluationWorker work = new RuleEvaluationWorker(docsToCheckAndEvents);\n+        Framework.getService(WorkManager.class).schedule(work, WorkManager.Scheduling.ENQUEUE);\n+    }\n+\n+    protected ELActionContext initActionContext(DocumentModel doc, CoreSession session) {\n+        ELActionContext ctx = new ELActionContext(new ExpressionContext(), new ExpressionFactoryImpl());\n+        ctx.setCurrentPrincipal(session.getPrincipal());\n+        doc.detach(true);\n+        ctx.setCurrentDocument(doc);\n+        return ctx;\n+    }\n+\n+    protected Boolean evaluateConditionExpression(ELActionContext ctx, String expression) {\n+        Calendar now = Calendar.getInstance();\n+        if (StringUtils.isEmpty(expression)) {\n+            return true;\n+        }\n+        ctx.putLocalVariable(\"currentDate\", now);\n+        return ctx.checkCondition(expression);\n+    }\n+\n+    @Override\n+    public void evalExpressionEventBasedRules(Record record, Set<String> events, CoreSession session) {\n+        if (record == null) {\n+            return; // nothing to do\n+        }\n+        RetentionRule rule = record.getRule(session);\n+        if (rule == null) {\n+            return; // nothing to do\n+        }\n+        if (!rule.isEventBased()) {\n+            log.trace(\"Record is not event-based\");\n+            return;\n+        }\n+        log.debug(\"Evaluating event-based rules for record {}\", () -> record.getDocument().getPathAsString());\n+        if (record.isRetentionExpired()) {\n+            // retention expired, nothing to do\n+            log.debug(\"Evaluating event-based found retention expired\");\n+            proceedRetentionExpired(record, session);\n+            return;\n+\n+        }\n+        String startingPointEvent = rule.getStartingPointEvent();\n+        if (StringUtils.isBlank(startingPointEvent)) {\n+            log.warn(\"Evaluating event-based rules  on record {} found no event specified\",\n+                    () -> record.getDocument().getPathAsString());\n+            return;\n+        }\n+        if (events.contains(startingPointEvent)) {\n+            ELActionContext actionContext = initActionContext(record.getDocument(), session);\n+            String expression = rule.getStartingPointExpression();\n+            Boolean startNow = evaluateConditionExpression(actionContext, expression);\n+            if (startNow) {\n+                session.setRetainUntil(record.getDocument().getRef(), rule.getRetainUntilDateFromNow(), null);\n+                log.debug(\"Evaluating event-based rules: expression {} matched on event {}\", startingPointEvent);\n+            } else {\n+                log.debug(\"Evaluating event-based rules: expression {} did not match on event {}\", expression,\n+                        startingPointEvent);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void proceedRetentionExpired(Record record, CoreSession session) {\n+        executeRuleEndActions(record, session);\n+    }\n+\n+    protected List<String> acceptedEvents;\n+\n+    @Override\n+    public List<String> getAcceptedEvents() {\n+        if (acceptedEvents == null) {\n+            synchronized (this) {\n+                if (acceptedEvents == null) {\n+                    DirectoryService directoryService = Framework.getService(DirectoryService.class);\n+                    Directory dir = directoryService.getDirectory(RetentionConstants.EVENTS_DIRECTORY_NAME);\n+                    try (Session session = dir.getSession()) {\n+                        Map<String, Serializable> filter = new HashMap<>();\n+                        filter.put(RetentionConstants.OBSOLETE_FIELD_ID, Long.valueOf(0));\n+                        List<String> evts = session.getProjection(filter, session.getIdField());\n+                        if (evts.isEmpty()) {\n+                            log.trace(\"Empty accepted events, not chaching anything\");\n+                            return evts;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MjIyMA==", "bodyText": "catching actually", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368062220", "createdAt": "2020-01-17T17:56:43Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.service;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jboss.el.ExpressionFactoryImpl;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.document.DeleteDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.LockDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.TrashDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.UnlockDocument;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.api.event.CoreEventConstants;\n+import org.nuxeo.ecm.core.api.event.DocumentEventCategories;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.directory.Directory;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.ecm.platform.actions.ELActionContext;\n+import org.nuxeo.ecm.platform.el.ExpressionContext;\n+import org.nuxeo.ecm.platform.usermanager.UserManager;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.workers.RuleEvaluationWorker;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionManagerImpl extends DefaultComponent implements RetentionManager {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionManagerImpl.class);\n+\n+    @Override\n+    public DocumentModel attachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        checkCanAttachRule(document, rule, session);\n+        session.makeRecord(document.getRef());\n+        final Calendar retainUntil;\n+        if (rule.isImmediate()) {\n+            retainUntil = rule.getRetainUntilDateFromNow();\n+            log.debug(\"Attaching immediate rule until {}\",\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else if (rule.isAfterDely()) {\n+            log.debug(\"Attaching after delay rule\");\n+            throw new UnsupportedOperationException(\"After delay not yet implemented\");\n+        } else if (rule.isEventBased()) {\n+            retainUntil = CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+            log.debug(\"Attaching event-based rule on {} matching \\\"{}\\\"\", rule.getStartingPointEvent(),\n+                    rule.getStartingPointExpression());\n+        } else if (rule.isMetadataBased()) {\n+            String xpath = rule.getMetadataXpath();\n+            if (StringUtils.isBlank(xpath)) {\n+                throw new NuxeoException(\"Metadata field is null\");\n+            }\n+            Property prop = document.getProperty(xpath);\n+            if (!(prop.getType() instanceof DateType)) {\n+                throw new NuxeoException(\n+                        String.format(\"Field %s of type % is expected to have a DateType\", xpath, prop.getType()));\n+            }\n+            Calendar value = (Calendar) prop.getValue();\n+            if (value == null) {\n+                retainUntil = rule.getRetainUntilDateFromNow();\n+            } else {\n+                retainUntil = rule.getRetainUntilDateFrom(value);\n+                Calendar now = Calendar.getInstance();\n+                if (now.after(retainUntil)) {\n+                    log.info(\n+                            \"Metabased-based rule found past date {} as retention expiration date on {} from {} property. Ignoring...\",\n+                            () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()),\n+                            document::getPathAsString, () -> xpath);\n+                    return session.getDocument(document.getRef());\n+                }\n+            }\n+            log.debug(\"Attaching rule base on {} with value {}\", () -> xpath,\n+                    () -> RetentionConstants.DEFAULT_DATE_FORMAT.format(retainUntil.getTime()));\n+        } else {\n+            throw new IllegalArgumentException(\"Unknown starting point policy: \" + rule.getStartingPointPolicy());\n+        }\n+        document.addFacet(RetentionConstants.RECORD_FACET);\n+        Record record = document.getAdapter(Record.class);\n+        record.setRule(rule, session);\n+        executeRuleBeginActions(record, session);\n+        session.setRetainUntil(document.getRef(), retainUntil, null);\n+        notifyAttachRule(record, rule, session);\n+        return session.getDocument(document.getRef());\n+    }\n+\n+    protected void notifyAttachRule(Record record, RetentionRule rule, CoreSession session) {\n+        DocumentModel doc = record.getDocument();\n+        DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+        ctx.setProperty(CoreEventConstants.REPOSITORY_NAME, session.getRepositoryName());\n+        ctx.setProperty(CoreEventConstants.SESSION_ID, session.getSessionId());\n+        ctx.setProperty(DocumentEventContext.CATEGORY_PROPERTY_KEY, DocumentEventCategories.EVENT_DOCUMENT_CATEGORY);\n+        ctx.setProperty(DocumentEventContext.COMMENT_PROPERTY_KEY, rule.getDocument().getPathAsString());\n+        Event event = ctx.newEvent(RetentionConstants.RULE_ATTACHED_EVENT);\n+        Framework.getService(EventService.class).fireEvent(event);\n+    }\n+\n+    protected void checkCanAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        NuxeoPrincipal principal = session.getPrincipal();\n+        if (!principal.isAdministrator() && !principal.isMemberOf(RetentionConstants.RECORD_MANAGER_GROUP_NAME)) {\n+            if (!session.hasPermission(document.getRef(), SecurityConstants.MAKE_RECORD)\n+                    || !session.hasPermission(document.getRef(), SecurityConstants.SET_RETENTION))\n+                throw new NuxeoException(\"User is not authorized to attach retention rule\", SC_FORBIDDEN);\n+        }\n+        if (!rule.isEnabled()) {\n+            throw new NuxeoException(String.format(\"Rule is disabled\"));\n+        }\n+        if (!rule.isDocTypeAccepted(document.getType())) {\n+            throw new NuxeoException(\"Rule does not accept this document type\");\n+        }\n+        if (document.hasFacet(RetentionConstants.RECORD_FACET)) {\n+            throw new NuxeoException(\"Document is already a record\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean canAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        try {\n+            checkCanAttachRule(document, rule, session);\n+            return true;\n+        } catch (NuxeoException e) {\n+            log.info(\"Cannot attach rule {} on document {}\", () -> rule.getDocument().getPathAsString(),\n+                    document::getPathAsString);\n+            return false;\n+        }\n+    }\n+\n+    public void executeRuleBeginActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getBeginActions(), session);\n+        }\n+    }\n+\n+    public void executeRuleEndActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getEndActions(), session);\n+        }\n+    }\n+\n+    protected void executeRuleActions(DocumentModel doc, List<String> actionIds, CoreSession session) {\n+        if (actionIds != null) {\n+            AutomationService automationService = Framework.getService(AutomationService.class);\n+            for (String operationId : actionIds) {\n+                log.debug(\"Executing {} action on {}\", () -> operationId, doc::getPathAsString);\n+                // Do not lock document if already locked, and unlock if already unlocked (triggers an error)\n+                // Also, if it's time to delete, unlock it first, etc.\n+                // (more generally, be ready to handle specific operations and context)\n+                switch (operationId) {\n+                case LockDocument.ID:\n+                    if (doc.isLocked()) {\n+                        continue;\n+                    }\n+                    break;\n+\n+                case UnlockDocument.ID:\n+                    if (!doc.isLocked()) {\n+                        continue;\n+                    }\n+                    break;\n+\n+                case DeleteDocument.ID:\n+                case TrashDocument.ID:\n+                    if (doc.isLocked()) {\n+                        session.removeLock(doc.getRef());\n+                        doc = session.getDocument(doc.getRef());\n+                    }\n+                    break;\n+                }\n+                OperationContext context = getExecutionContext(doc, session);\n+                try {\n+                    automationService.run(context, operationId);\n+                } catch (OperationException e) {\n+                    throw new NuxeoException(\"Error running operation: \" + operationId, e);\n+                }\n+            }\n+        }\n+    }\n+\n+    protected OperationContext getExecutionContext(DocumentModel doc, CoreSession session) {\n+        OperationContext context = new OperationContext(session);\n+        context.put(\"document\", doc);\n+        context.setCommit(false); // no session save at end\n+        context.setInput(doc);\n+        return context;\n+    }\n+\n+    @Override\n+    public void evalRules(Map<String, Set<String>> docsToCheckAndEvents) {\n+        if (docsToCheckAndEvents.isEmpty()) {\n+            return;\n+        }\n+        RuleEvaluationWorker work = new RuleEvaluationWorker(docsToCheckAndEvents);\n+        Framework.getService(WorkManager.class).schedule(work, WorkManager.Scheduling.ENQUEUE);\n+    }\n+\n+    protected ELActionContext initActionContext(DocumentModel doc, CoreSession session) {\n+        ELActionContext ctx = new ELActionContext(new ExpressionContext(), new ExpressionFactoryImpl());\n+        ctx.setCurrentPrincipal(session.getPrincipal());\n+        doc.detach(true);\n+        ctx.setCurrentDocument(doc);\n+        return ctx;\n+    }\n+\n+    protected Boolean evaluateConditionExpression(ELActionContext ctx, String expression) {\n+        Calendar now = Calendar.getInstance();\n+        if (StringUtils.isEmpty(expression)) {\n+            return true;\n+        }\n+        ctx.putLocalVariable(\"currentDate\", now);\n+        return ctx.checkCondition(expression);\n+    }\n+\n+    @Override\n+    public void evalExpressionEventBasedRules(Record record, Set<String> events, CoreSession session) {\n+        if (record == null) {\n+            return; // nothing to do\n+        }\n+        RetentionRule rule = record.getRule(session);\n+        if (rule == null) {\n+            return; // nothing to do\n+        }\n+        if (!rule.isEventBased()) {\n+            log.trace(\"Record is not event-based\");\n+            return;\n+        }\n+        log.debug(\"Evaluating event-based rules for record {}\", () -> record.getDocument().getPathAsString());\n+        if (record.isRetentionExpired()) {\n+            // retention expired, nothing to do\n+            log.debug(\"Evaluating event-based found retention expired\");\n+            proceedRetentionExpired(record, session);\n+            return;\n+\n+        }\n+        String startingPointEvent = rule.getStartingPointEvent();\n+        if (StringUtils.isBlank(startingPointEvent)) {\n+            log.warn(\"Evaluating event-based rules  on record {} found no event specified\",\n+                    () -> record.getDocument().getPathAsString());\n+            return;\n+        }\n+        if (events.contains(startingPointEvent)) {\n+            ELActionContext actionContext = initActionContext(record.getDocument(), session);\n+            String expression = rule.getStartingPointExpression();\n+            Boolean startNow = evaluateConditionExpression(actionContext, expression);\n+            if (startNow) {\n+                session.setRetainUntil(record.getDocument().getRef(), rule.getRetainUntilDateFromNow(), null);\n+                log.debug(\"Evaluating event-based rules: expression {} matched on event {}\", startingPointEvent);\n+            } else {\n+                log.debug(\"Evaluating event-based rules: expression {} did not match on event {}\", expression,\n+                        startingPointEvent);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void proceedRetentionExpired(Record record, CoreSession session) {\n+        executeRuleEndActions(record, session);\n+    }\n+\n+    protected List<String> acceptedEvents;\n+\n+    @Override\n+    public List<String> getAcceptedEvents() {\n+        if (acceptedEvents == null) {\n+            synchronized (this) {\n+                if (acceptedEvents == null) {\n+                    DirectoryService directoryService = Framework.getService(DirectoryService.class);\n+                    Directory dir = directoryService.getDirectory(RetentionConstants.EVENTS_DIRECTORY_NAME);\n+                    try (Session session = dir.getSession()) {\n+                        Map<String, Serializable> filter = new HashMap<>();\n+                        filter.put(RetentionConstants.OBSOLETE_FIELD_ID, Long.valueOf(0));\n+                        List<String> evts = session.getProjection(filter, session.getIdField());\n+                        if (evts.isEmpty()) {\n+                            log.trace(\"Empty accepted events, not chaching anything\");\n+                            return evts;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzMzQ0MQ=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 318}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDI3NTQwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNToyMzo1OFrOFc6fVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNToyMzo1OFrOFc6fVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2Mjc0Mw==", "bodyText": "new ArrayList<String>(); -> new ArrayList<>();", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365862743", "createdAt": "2020-01-13T15:23:58Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.workers;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.repository.RepositoryManager;\n+import org.nuxeo.ecm.core.work.AbstractWork;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Worker scheduled to proceed #{link {@link org.nuxeo.retention.service.RetentionManager#evalExpressionEventBasedRules}\n+ * on document ids with events set.\n+ *\n+ * @since 11.1\n+ */\n+public class RuleEvaluationWorker extends AbstractWork {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TITLE = \"Retention Rule Evaluation Work\";\n+\n+    public static final String CATEGORY = \"retentionRuleWork\";\n+\n+    protected Map<String, Set<String>> docsToCheckAndEvents;\n+\n+    protected Date dateToCheck;\n+\n+    public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) {\n+        this.docsToCheckAndEvents = docsToCheckAndEvents;\n+        List<String> docs = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDI4NzI2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNToyNzoxMFrOFc6mdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxOToyNzoxM1rOFfQOBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2NDU2Ng==", "bodyText": "i am wondering if we can find ourself with race condition when populating this map -> perhaps should we use the ConcurrentHashMap", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365864566", "createdAt": "2020-01-13T15:27:10Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.workers;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.repository.RepositoryManager;\n+import org.nuxeo.ecm.core.work.AbstractWork;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Worker scheduled to proceed #{link {@link org.nuxeo.retention.service.RetentionManager#evalExpressionEventBasedRules}\n+ * on document ids with events set.\n+ *\n+ * @since 11.1\n+ */\n+public class RuleEvaluationWorker extends AbstractWork {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TITLE = \"Retention Rule Evaluation Work\";\n+\n+    public static final String CATEGORY = \"retentionRuleWork\";\n+\n+    protected Map<String, Set<String>> docsToCheckAndEvents;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxNTkxMQ==", "bodyText": "No need, Work construction and evaluation is always single-threaded.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368315911", "createdAt": "2020-01-19T19:27:13Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.workers;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.repository.RepositoryManager;\n+import org.nuxeo.ecm.core.work.AbstractWork;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Worker scheduled to proceed #{link {@link org.nuxeo.retention.service.RetentionManager#evalExpressionEventBasedRules}\n+ * on document ids with events set.\n+ *\n+ * @since 11.1\n+ */\n+public class RuleEvaluationWorker extends AbstractWork {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TITLE = \"Retention Rule Evaluation Work\";\n+\n+    public static final String CATEGORY = \"retentionRuleWork\";\n+\n+    protected Map<String, Set<String>> docsToCheckAndEvents;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2NDU2Ng=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDI4OTMwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNToyNzo0OVrOFc6ntg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNToyNzo0OVrOFc6ntg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2NDg4Ng==", "bodyText": "it seems unused", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365864886", "createdAt": "2020-01-13T15:27:49Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.workers;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.repository.RepositoryManager;\n+import org.nuxeo.ecm.core.work.AbstractWork;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Worker scheduled to proceed #{link {@link org.nuxeo.retention.service.RetentionManager#evalExpressionEventBasedRules}\n+ * on document ids with events set.\n+ *\n+ * @since 11.1\n+ */\n+public class RuleEvaluationWorker extends AbstractWork {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TITLE = \"Retention Rule Evaluation Work\";\n+\n+    public static final String CATEGORY = \"retentionRuleWork\";\n+\n+    protected Map<String, Set<String>> docsToCheckAndEvents;\n+\n+    protected Date dateToCheck;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDMwNTIwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozMjoyOVrOFc6x1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozMjoyOVrOFc6x1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2NzQ3OA==", "bodyText": "Framework.getService(RetentionManager.class) can be extract outer the for loop", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365867478", "createdAt": "2020-01-13T15:32:29Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.workers;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.repository.RepositoryManager;\n+import org.nuxeo.ecm.core.work.AbstractWork;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Worker scheduled to proceed #{link {@link org.nuxeo.retention.service.RetentionManager#evalExpressionEventBasedRules}\n+ * on document ids with events set.\n+ *\n+ * @since 11.1\n+ */\n+public class RuleEvaluationWorker extends AbstractWork {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TITLE = \"Retention Rule Evaluation Work\";\n+\n+    public static final String CATEGORY = \"retentionRuleWork\";\n+\n+    protected Map<String, Set<String>> docsToCheckAndEvents;\n+\n+    protected Date dateToCheck;\n+\n+    public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) {\n+        this.docsToCheckAndEvents = docsToCheckAndEvents;\n+        List<String> docs = new ArrayList<String>();\n+        docs.addAll(docsToCheckAndEvents.keySet());\n+        setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs);\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return TITLE;\n+    }\n+\n+    @Override\n+    public String getCategory() {\n+        return CATEGORY;\n+    }\n+\n+    @Override\n+    public void work() {\n+        openSystemSession();\n+        for (String string : docIds) {\n+            DocumentModel doc = null;\n+            try {\n+                doc = session.getDocument(new IdRef(string));\n+            } catch (DocumentNotFoundException e) {\n+                // this is executed post commit so the document could have been modified to start retention and removed\n+                // in the same transaction\n+                log.warn(\"Document impacted by retention no longer exists {}\", string);\n+                continue;\n+\n+            }\n+            Record record = doc.getAdapter(Record.class);\n+            if (record == null) {\n+                log.warn(\"Document should be impacted by retention but is no longer a Record: {}\", string);\n+                continue;\n+            }\n+            Framework.getService(RetentionManager.class)\n+                     .evalExpressionEventBasedRules(record, docsToCheckAndEvents.get(string), session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDMwODMzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozMzoyN1rOFc6z6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxOTozMDozNFrOFfQOqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2ODAxMA==", "bodyText": "can be replaced by session.exists as below\n           if (!session.exists(new IdRef(docId))) {\n                // this is executed post commit so the document could have been modified to start retention and removed\n                // in the same transaction\n                log.warn(\"Document impacted by retention no longer exists {}\", docId);\n                continue;\n            }", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365868010", "createdAt": "2020-01-13T15:33:27Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.workers;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.repository.RepositoryManager;\n+import org.nuxeo.ecm.core.work.AbstractWork;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Worker scheduled to proceed #{link {@link org.nuxeo.retention.service.RetentionManager#evalExpressionEventBasedRules}\n+ * on document ids with events set.\n+ *\n+ * @since 11.1\n+ */\n+public class RuleEvaluationWorker extends AbstractWork {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TITLE = \"Retention Rule Evaluation Work\";\n+\n+    public static final String CATEGORY = \"retentionRuleWork\";\n+\n+    protected Map<String, Set<String>> docsToCheckAndEvents;\n+\n+    protected Date dateToCheck;\n+\n+    public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) {\n+        this.docsToCheckAndEvents = docsToCheckAndEvents;\n+        List<String> docs = new ArrayList<String>();\n+        docs.addAll(docsToCheckAndEvents.keySet());\n+        setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs);\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return TITLE;\n+    }\n+\n+    @Override\n+    public String getCategory() {\n+        return CATEGORY;\n+    }\n+\n+    @Override\n+    public void work() {\n+        openSystemSession();\n+        for (String string : docIds) {\n+            DocumentModel doc = null;\n+            try {\n+                doc = session.getDocument(new IdRef(string));\n+            } catch (DocumentNotFoundException e) {\n+                // this is executed post commit so the document could have been modified to start retention and removed\n+                // in the same transaction\n+                log.warn(\"Document impacted by retention no longer exists {}\", string);\n+                continue;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxNjA3Mw==", "bodyText": "But we need to do session.getDocument just afterwards anyway.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368316073", "createdAt": "2020-01-19T19:30:34Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.workers;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.repository.RepositoryManager;\n+import org.nuxeo.ecm.core.work.AbstractWork;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Worker scheduled to proceed #{link {@link org.nuxeo.retention.service.RetentionManager#evalExpressionEventBasedRules}\n+ * on document ids with events set.\n+ *\n+ * @since 11.1\n+ */\n+public class RuleEvaluationWorker extends AbstractWork {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TITLE = \"Retention Rule Evaluation Work\";\n+\n+    public static final String CATEGORY = \"retentionRuleWork\";\n+\n+    protected Map<String, Set<String>> docsToCheckAndEvents;\n+\n+    protected Date dateToCheck;\n+\n+    public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) {\n+        this.docsToCheckAndEvents = docsToCheckAndEvents;\n+        List<String> docs = new ArrayList<String>();\n+        docs.addAll(docsToCheckAndEvents.keySet());\n+        setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs);\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return TITLE;\n+    }\n+\n+    @Override\n+    public String getCategory() {\n+        return CATEGORY;\n+    }\n+\n+    @Override\n+    public void work() {\n+        openSystemSession();\n+        for (String string : docIds) {\n+            DocumentModel doc = null;\n+            try {\n+                doc = session.getDocument(new IdRef(string));\n+            } catch (DocumentNotFoundException e) {\n+                // this is executed post commit so the document could have been modified to start retention and removed\n+                // in the same transaction\n+                log.warn(\"Document impacted by retention no longer exists {}\", string);\n+                continue;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2ODAxMA=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDMxMzg3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-adapters.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNTowMVrOFc63OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNTowMVrOFc63OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2ODg1Ng==", "bodyText": "missing a break at the end of the file", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365868856", "createdAt": "2020-01-13T15:35:01Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-adapters.xml", "diffHunk": "@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.retention.adapters\">\n+\n+  <extension\n+    target=\"org.nuxeo.ecm.core.api.DocumentAdapterService\"\n+    point=\"adapters\">\n+    <adapter class=\"org.nuxeo.retention.adapters.Record\"\n+      factory=\"org.nuxeo.retention.adapters.RetentionAdapterFactory\" />\n+    <adapter class=\"org.nuxeo.retention.adapters.RetentionRule\"\n+      factory=\"org.nuxeo.retention.adapters.RetentionAdapterFactory\" />\n+  </extension>\n+\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDMxNTEyOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-actions.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNToyMVrOFc639A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNToyMVrOFc639A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2OTA0NA==", "bodyText": "missing a break at the end of the file", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365869044", "createdAt": "2020-01-13T15:35:21Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-actions.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.retention.actions\">\n+\n+  <extension target=\"org.nuxeo.ecm.core.bulk\" point=\"actions\">\n+    <action name=\"holdDocumentsAction\" bucketSize=\"100\"\n+      batchSize=\"20\" />\n+    <action name=\"unholdDocumentsAction\" bucketSize=\"100\"\n+      batchSize=\"20\" />\n+    <action name=\"attachRetentionRule\" bucketSize=\"100\"\n+      batchSize=\"20\" />\n+    <action name=\"evalInputEventBasedRule\" bucketSize=\"100\"\n+      batchSize=\"20\" />\n+    <action name=\"processRetentionEvent\" bucketSize=\"100\"\n+      batchSize=\"20\" />\n+  </extension>\n+\n+  <extension target=\"org.nuxeo.runtime.stream.service\"\n+    point=\"streamProcessor\">\n+    <streamProcessor name=\"holdDocumentsAction\"\n+      class=\"org.nuxeo.retention.actions.HoldDocumentsAction\"\n+      logConfig=\"bulk\" defaultConcurrency=\"2\" defaultPartitions=\"4\">\n+      <policy name=\"default\" maxRetries=\"3\" delay=\"1s\"\n+        maxDelay=\"10s\" continueOnFailure=\"true\" />\n+      <option name=\"produceImmediate\">false</option>\n+    </streamProcessor>\n+      <streamProcessor name=\"unholdDocumentsAction\"\n+      class=\"org.nuxeo.retention.actions.UnholdDocumentsAction\"\n+      logConfig=\"bulk\" defaultConcurrency=\"2\" defaultPartitions=\"4\">\n+      <policy name=\"default\" maxRetries=\"3\" delay=\"1s\"\n+        maxDelay=\"10s\" continueOnFailure=\"true\" />\n+      <option name=\"produceImmediate\">false</option>\n+    </streamProcessor>\n+    <streamProcessor name=\"attachRetentionRule\"\n+      class=\"org.nuxeo.retention.actions.AttachRetentionRuleAction\"\n+      logConfig=\"bulk\" defaultConcurrency=\"2\" defaultPartitions=\"4\">\n+      <policy name=\"default\" maxRetries=\"3\" delay=\"1s\"\n+        maxDelay=\"10s\" continueOnFailure=\"true\" />\n+      <option name=\"produceImmediate\">false</option>\n+    </streamProcessor>\n+    <streamProcessor name=\"evalInputEventBasedRule\"\n+      class=\"org.nuxeo.retention.actions.EvalInputEventBasedRuleAction\"\n+      logConfig=\"bulk\" defaultConcurrency=\"2\" defaultPartitions=\"4\">\n+      <policy name=\"default\" maxRetries=\"3\" delay=\"1s\"\n+        maxDelay=\"10s\" continueOnFailure=\"true\" />\n+      <option name=\"produceImmediate\">false</option>\n+    </streamProcessor>\n+    <streamProcessor name=\"processRetentionEvent\"\n+      class=\"org.nuxeo.retention.actions.ProcessRetentionEventAction\"\n+      logConfig=\"bulk\" defaultConcurrency=\"2\" defaultPartitions=\"4\">\n+      <policy name=\"default\" maxRetries=\"3\" delay=\"1s\"\n+        maxDelay=\"10s\" continueOnFailure=\"true\" />\n+      <option name=\"produceImmediate\">false</option>\n+    </streamProcessor>\n+  </extension>\n+\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDMxNjA0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-audit.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNTozNVrOFc64ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNTozNVrOFc64ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2OTE3OQ==", "bodyText": "missing a break at the end of the file", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365869179", "createdAt": "2020-01-13T15:35:35Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-audit.xml", "diffHunk": "@@ -0,0 +1,5 @@\n+<component name=\"org.nuxeo.retention.audit\" version=\"1.0\">\n+  <extension target=\"org.nuxeo.ecm.platform.audit.service.NXAuditEventsService\" point=\"event\">\n+    <event name=\"retentionRuleAttached\" />\n+  </extension>\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDMxNzYxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-pageproviders.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNjowMVrOFc65bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNjowMVrOFc65bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2OTQyMQ==", "bodyText": "add a break line at the end :)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365869421", "createdAt": "2020-01-13T15:36:01Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-pageproviders.xml", "diffHunk": "@@ -0,0 +1,107 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.retention.pageprovider.contrib\">\n+  <extension\n+    target=\"org.nuxeo.ecm.platform.query.api.PageProviderService\"\n+    point=\"providers\">\n+\n+    <coreQueryPageProvider\n+      name=\"manual_retention_rule_suggestion\">\n+      <whereClause>\n+        <predicate parameter=\"retention_rule:docTypes\" operator=\"=\">\n+          <field name=\"docType\" />\n+        </predicate>\n+        <fixedPart quoteParameters=\"false\" escapeParameters=\"true\"> dc:title ILIKE '?%' AND ecm:mixinType =\n+          'RetentionRule' AND retention_rule:enabled = 1 AND\n+          ecm:isTrashed = 0\n+        </fixedPart>\n+      </whereClause>\n+      <sort column=\"ecm:pos\" ascending=\"true\" />\n+      <pageSize>50</pageSize>\n+    </coreQueryPageProvider>\n+\n+    <coreQueryPageProvider\n+      name=\"active_retention_rule\">\n+      <pattern quoteParameters=\"false\" escapeParameters=\"true\"> SELECT\n+        * FROM Document WHERE ecm:mixinType = 'RetentionRule' AND\n+        retention_rule:enabled = 1 AND ecm:isTrashed = 0\n+      </pattern>\n+      <sort column=\"ecm:pos\" ascending=\"true\" />\n+      <pageSize>50</pageSize>\n+    </coreQueryPageProvider>\n+\n+    <genericPageProvider name=\"retention_search\"\n+      class=\"org.nuxeo.elasticsearch.provider.ElasticSearchNxqlPageProvider\">\n+      <whereClause docType=\"RetentionSearch\">\n+        <fixedPart>\n+          file:content/name IS NOT NULL\n+          AND ecm:mixinType != 'HiddenInNavigation'\n+        </fixedPart>\n+        <predicate parameter=\"ecm:fulltext\" operator=\"FULLTEXT\">\n+          <field schema=\"rendition_search\" name=\"ecm_fulltext\" />\n+        </predicate>\n+        <predicate parameter=\"dc:creator\" operator=\"IN\">\n+          <field schema=\"rendition_search\" name=\"dc_creator\" />\n+        </predicate>\n+      </whereClause>\n+      <aggregates>\n+        <aggregate id=\"doc_type_agg\" type=\"terms\" parameter=\"ecm:primaryType\">\n+          <field schema=\"retention_search\" name=\"doc_type_agg\" />\n+          <properties>\n+            <property name=\"size\">10</property>\n+          </properties>\n+        </aggregate>\n+        <aggregate id=\"rules_agg\" type=\"terms\" parameter=\"record:ruleIds\">\n+          <field schema=\"retention_search\" name=\"rules_agg\" />\n+          <properties>\n+            <property name=\"size\">10</property>\n+          </properties>\n+        </aggregate>\n+        <aggregate id=\"record_retain_agg\" type=\"date_range\" parameter=\"record:retainUntil\">\n+          <field schema=\"retention_search\" name=\"record_retain_agg\" />\n+          <properties>\n+            <property name=\"format\">\"dd-MM-yyyy\"</property>\n+          </properties>\n+          <dateRanges>\n+            <dateRange key=\"last24h\" fromDate=\"now-24H\" toDate=\"now\"/>\n+            <dateRange key=\"lastWeek\" fromDate=\"now-7d\" toDate=\"now-24H\"/>\n+            <dateRange key=\"lastMonth\" fromDate=\"now-1M\" toDate=\"now-7d\"/>\n+            <dateRange key=\"lastYear\" fromDate=\"now-1y\" toDate=\"now-1M\"/>\n+            <dateRange key=\"priorToLastYear\" toDate=\"now-1y\"/>\n+          </dateRanges>\n+        </aggregate>\n+        <aggregate id=\"ecm_retain_agg\" type=\"date_range\" parameter=\"ecm:retainUntil\">\n+          <field schema=\"retention_search\" name=\"ecm_retain_agg\" />\n+          <properties>\n+            <property name=\"format\">\"dd-MM-yyyy\"</property>\n+          </properties>\n+          <dateRanges>\n+            <dateRange key=\"next24Hours\" fromDate=\"now\" toDate=\"now+24H\"/>\n+            <dateRange key=\"beforeAWeek\" fromDate=\"now+24H\" toDate=\"now+7d\"/>\n+            <dateRange key=\"beforeAMonth\" fromDate=\"now+7d\" toDate=\"now+1M\"/>\n+            <dateRange key=\"beforeAYear\" fromDate=\"now+1M\" toDate=\"now+1y\"/>\n+            <dateRange key=\"afterAYear\" fromDate=\"now+1y\" toDate=\"now+1000y\"/>\n+            <dateRange key=\"indeterminate\" fromDate=\"now+1000y\"/>\n+          </dateRanges>\n+        </aggregate>\n+      </aggregates>\n+      <sort column=\"ecm:retainUntil\" ascending=\"true\" />\n+      <quickFilters>\n+        <quickFilter name=\"withoutRule\">\n+          <clause>record:ruleIds IS NULL</clause>\n+          <clause>ecm:retainUntil IS NULL</clause>\n+        </quickFilter>\n+        <quickFilter name=\"hasLegalHold\">\n+          <clause>ecm:hasLegalHold = 1</clause>\n+        </quickFilter>\n+        <quickFilter name=\"hasNotLegalHold\">\n+          <clause>ecm:hasLegalHold = 0</clause>\n+        </quickFilter>\n+        <quickFilter name=\"exceptTrashed\">\n+          <clause>ecm:isTrashed = 0</clause>\n+        </quickFilter>\n+      </quickFilters>\n+      <pageSize>20</pageSize>\n+    </genericPageProvider>\n+\n+  </extension>\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDMxODY0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-properties.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNjoyMFrOFc66FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNjoyMFrOFc66FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2OTU4OA==", "bodyText": "add break line at the end of the file ;)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365869588", "createdAt": "2020-01-13T15:36:20Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-properties.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.retention.properties\">\n+\n+  <require>org.nuxeo.web.ui.properties.contrib</require>\n+\n+  <extension target=\"org.nuxeo.runtime.ConfigurationService\" point=\"configuration\">\n+    <property name=\"org.nuxeo.web.ui.enforceCommentable\">true</property>\n+  </extension>\n+\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDMyMDc1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-vocabularies.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNjo1NVrOFc67Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNjo1NVrOFc67Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2OTkwMg==", "bodyText": "i think there is a missing break line at the end of the three files above ;)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365869902", "createdAt": "2020-01-13T15:36:55Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-vocabularies.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.retention.vocabularies\" version=\"1.0\">\n+  <extension target=\"org.nuxeo.ecm.directory.GenericDirectory\" point=\"directories\">\n+\n+    <directory name=\"template-l10nvocabulary\" template=\"true\" extends=\"template-directory\">\n+      <!-- XXX move to default config on master -->\n+      <schema>l10nvocabulary</schema>\n+      <idField>id</idField>\n+    </directory>\n+\n+    <directory extends=\"template-l10nvocabulary\" name=\"RetentionEnd\">\n+      <dataFile>directories/retention_end.csv</dataFile>\n+    </directory>\n+    <directory extends=\"template-l10nvocabulary\" name=\"RetentionEvent\">\n+      <dataFile>directories/retention_event.csv</dataFile>\n+    </directory>\n+  </extension>\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDMyMjg2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/schemas/retention_rule.xsd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNzozMlrOFc68nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozNzozMlrOFc68nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg3MDIzOQ==", "bodyText": "same as above", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365870239", "createdAt": "2020-01-13T15:37:32Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/schemas/retention_rule.xsd", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\"?>\n+\n+<xs:schema targetNamespace=\"http://www.nuxeo.org/ecm/schemas/common/\"\n+  xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n+  xmlns:nxsv=\"http://www.nuxeo.org/ecm/schemas/core/validation/\"\n+  xmlns:nxs=\"http://www.nuxeo.org/ecm/schemas/common/\">\n+\n+  <xs:include schemaLocation=\"base.xsd\" />\n+\n+  <xs:element name=\"applicationPolicy\" nillable=\"false\" nxsv:nillable=\"false\" default=\"manual\">\n+    <xs:simpleType>\n+      <xs:restriction base=\"xs:string\">\n+        <xs:enumeration value=\"auto\" />\n+        <xs:enumeration value=\"manual\" />\n+      </xs:restriction>\n+    </xs:simpleType>\n+  </xs:element>\n+\n+  <xs:element name=\"enabled\" type=\"xs:boolean\" default=\"true\"/>\n+\n+  <xs:element name=\"docTypes\" type=\"nxs:stringList\"/>\n+\n+</xs:schema>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDMzMDYyOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozOTo1MVrOFc7Bkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTozOTo1MVrOFc7Bkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg3MTUwNw==", "bodyText": "not need for PlatformFeature as its imported by AutomationFeature", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365871507", "createdAt": "2020-01-13T15:39:51Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.security.RetentionExpiredFinderListener;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.test.PlatformFeature;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ PlatformFeature.class, TransactionalFeature.class, AutomationFeature.class })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDM3Mzk1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1MTozMVrOFc7bhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxOTozOTo1N1rOFfQQog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg3ODE0OA==", "bodyText": "i am wondering if we replace the whole method by a Builder to avoid passing 0 values or an empty list ...\n    protected class RetentionRuleBuilder {\n\n        protected DocumentModel documentModel;\n\n        protected RetentionRule rule;\n\n        protected RetentionRuleBuilder() {\n            DocumentModel doc = session.createDocumentModel(\"/RetentionRules\", \"testRule\", \"RetentionRule\");\n            rule = doc.getAdapter(RetentionRule.class);\n        }\n\n        RetentionRuleBuilder durationYears(long years) {\n            rule.setDurationYears(years);\n            return this;\n        }\n\n    }\n....", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365878148", "createdAt": "2020-01-13T15:51:31Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.security.RetentionExpiredFinderListener;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.test.PlatformFeature;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ PlatformFeature.class, TransactionalFeature.class, AutomationFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-core-types.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-adapters.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-vocabularies.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-content-template.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-service-framework.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-listeners.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-operations.xml\")\n+public class RetentionTestCase {\n+\n+    @Inject\n+    protected RetentionManager service;\n+\n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    protected DocumentModel file;\n+\n+    @Before\n+    public void setup() {\n+        file = session.createDocumentModel(\"/\", \"File\", \"File\");\n+        file = session.createDocument(file);\n+        file = session.saveDocument(file);\n+    }\n+\n+    protected void assertStillUnderRetentionAfter(DocumentModel doc, RetentionRule rule, int timeoutMillis)\n+            throws InterruptedException {\n+        doc = service.attachRule(doc, rule, session);\n+        assertTrue(doc.isRecord());\n+\n+        awaitRetentionExpiration(1_000);\n+\n+        doc = session.getDocument(doc.getRef());\n+\n+        // it is still under retention and has a retention date\n+        assertTrue(session.isUnderRetentionOrLegalHold(doc.getRef()));\n+        assertNotNull(session.getRetainUntil(doc.getRef()));\n+    }\n+\n+    protected void awaitRetentionExpiration(long millis) throws InterruptedException {\n+        // wait a bit more than retention period to pass retention expiration date\n+        coreFeature.waitForAsyncCompletion();\n+        Thread.sleep(millis);\n+        // trigger manually instead of waiting for scheduler\n+        new RetentionExpiredFinderListener().handleEvent(null);\n+        assertTrue(\"Bulk action didn't finish\", bulkService.await(Duration.ofSeconds(60)));\n+        coreFeature.waitForAsyncCompletion();\n+    }\n+\n+    protected RetentionRule createRuleWithActions(RetentionRule.ApplicationPolicy policy,\n+            StartingPointPolicy startingPointPolicy, List<String> docTypes, String startingPointEventId,\n+            String startingPointExpression, String matadataXPath, long years, long months, long days,\n+            long durationMillis, List<String> beginActions, List<String> endActions) {\n+        DocumentModel doc = session.createDocumentModel(\"/RetentionRules\", \"testRule\", \"RetentionRule\");\n+        RetentionRule rule = doc.getAdapter(RetentionRule.class);\n+        rule.setDurationYears(years);\n+        rule.setDurationMonths(months);\n+        rule.setDurationDays(days);\n+        rule.setApplicationPolicy(policy);\n+        rule.setStartingPointPolicy(startingPointPolicy);\n+        rule.setDocTypes(docTypes);\n+        rule.setStartingPointEvent(startingPointEventId);\n+        rule.setStartingPointExpression(startingPointExpression);\n+        rule.setMetadataXpath(matadataXPath);\n+        rule.setDurationMillis(durationMillis);\n+        rule.setBeginActions(beginActions);\n+        rule.setEndActions(endActions);\n+        doc = session.createDocument(doc);\n+        return session.saveDocument(rule.getDocument()).getAdapter(RetentionRule.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxNjU3OA==", "bodyText": "It's ok for tests", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368316578", "createdAt": "2020-01-19T19:39:57Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.security.RetentionExpiredFinderListener;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.test.PlatformFeature;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ PlatformFeature.class, TransactionalFeature.class, AutomationFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-core-types.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-adapters.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-vocabularies.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-content-template.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-service-framework.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-listeners.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-operations.xml\")\n+public class RetentionTestCase {\n+\n+    @Inject\n+    protected RetentionManager service;\n+\n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    protected DocumentModel file;\n+\n+    @Before\n+    public void setup() {\n+        file = session.createDocumentModel(\"/\", \"File\", \"File\");\n+        file = session.createDocument(file);\n+        file = session.saveDocument(file);\n+    }\n+\n+    protected void assertStillUnderRetentionAfter(DocumentModel doc, RetentionRule rule, int timeoutMillis)\n+            throws InterruptedException {\n+        doc = service.attachRule(doc, rule, session);\n+        assertTrue(doc.isRecord());\n+\n+        awaitRetentionExpiration(1_000);\n+\n+        doc = session.getDocument(doc.getRef());\n+\n+        // it is still under retention and has a retention date\n+        assertTrue(session.isUnderRetentionOrLegalHold(doc.getRef()));\n+        assertNotNull(session.getRetainUntil(doc.getRef()));\n+    }\n+\n+    protected void awaitRetentionExpiration(long millis) throws InterruptedException {\n+        // wait a bit more than retention period to pass retention expiration date\n+        coreFeature.waitForAsyncCompletion();\n+        Thread.sleep(millis);\n+        // trigger manually instead of waiting for scheduler\n+        new RetentionExpiredFinderListener().handleEvent(null);\n+        assertTrue(\"Bulk action didn't finish\", bulkService.await(Duration.ofSeconds(60)));\n+        coreFeature.waitForAsyncCompletion();\n+    }\n+\n+    protected RetentionRule createRuleWithActions(RetentionRule.ApplicationPolicy policy,\n+            StartingPointPolicy startingPointPolicy, List<String> docTypes, String startingPointEventId,\n+            String startingPointExpression, String matadataXPath, long years, long months, long days,\n+            long durationMillis, List<String> beginActions, List<String> endActions) {\n+        DocumentModel doc = session.createDocumentModel(\"/RetentionRules\", \"testRule\", \"RetentionRule\");\n+        RetentionRule rule = doc.getAdapter(RetentionRule.class);\n+        rule.setDurationYears(years);\n+        rule.setDurationMonths(months);\n+        rule.setDurationDays(days);\n+        rule.setApplicationPolicy(policy);\n+        rule.setStartingPointPolicy(startingPointPolicy);\n+        rule.setDocTypes(docTypes);\n+        rule.setStartingPointEvent(startingPointEventId);\n+        rule.setStartingPointExpression(startingPointExpression);\n+        rule.setMetadataXpath(matadataXPath);\n+        rule.setDurationMillis(durationMillis);\n+        rule.setBeginActions(beginActions);\n+        rule.setEndActions(endActions);\n+        doc = session.createDocument(doc);\n+        return session.saveDocument(rule.getDocument()).getAdapter(RetentionRule.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg3ODE0OA=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDM4MjQ1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionAdapters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1Mzo0NlrOFc7gqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1Mzo0NlrOFc7gqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg3OTQ2Nw==", "bodyText": "wdyt if we add a control / assertion on the message exception", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365879467", "createdAt": "2020-01-13T15:53:46Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionAdapters.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class })\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-core-types.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-adapters.xml\")\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+public class TestRetentionAdapters {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Test\n+    public void testRecordAdapterRetainDate() {\n+        DocumentModel file = session.createDocumentModel(\"/\", \"File\", \"File\");\n+        file = session.createDocument(file);\n+        file.addFacet(RetentionConstants.RECORD_FACET);\n+        file = session.saveDocument(file);\n+\n+        Record record = file.getAdapter(Record.class);\n+        assertFalse(record.isRetainUntilInderterminate());\n+\n+        session.makeRecord(file.getRef());\n+        session.setRetainUntil(file.getRef(), CoreSession.RETAIN_UNTIL_INDETERMINATE, null);\n+        file = session.getDocument(file.getRef());\n+\n+        record = file.getAdapter(Record.class);\n+        assertTrue(record.isRetainUntilInderterminate());\n+        assertFalse(record.isRetentionExpired());\n+\n+        Calendar retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.HOUR, -1);\n+        session.setRetainUntil(file.getRef(), retainUntil, null);\n+        file = session.getDocument(file.getRef());\n+        record = file.getAdapter(Record.class);\n+\n+        assertFalse(record.isRetainUntilInderterminate());\n+        assertTrue(record.isRetentionExpired());\n+\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.HOUR, 2);\n+        session.setRetainUntil(file.getRef(), retainUntil, null);\n+        file = session.getDocument(file.getRef());\n+        record = file.getAdapter(Record.class);\n+\n+        assertFalse(record.isRetainUntilInderterminate());\n+        assertFalse(record.isRetentionExpired());\n+    }\n+\n+    @Test\n+    public void testRecordAdapterPolicy() {\n+        DocumentModel ruleDoc = session.createDocumentModel(\"/\", \"RetentionRule\", \"RetentionRule\");\n+        RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+        rule.setStartingPointPolicy(RetentionRule.StartingPointPolicy.IMMEDIATE);\n+        rule.setApplicationPolicy(RetentionRule.ApplicationPolicy.AUTO);\n+        ruleDoc = session.createDocument(ruleDoc);\n+        ruleDoc = session.saveDocument(ruleDoc);\n+        rule = ruleDoc.getAdapter(RetentionRule.class);\n+\n+        assertTrue(rule.isAuto());\n+        assertFalse(rule.isManual());\n+        rule.setApplicationPolicy(RetentionRule.ApplicationPolicy.MANUAL);\n+        assertFalse(rule.isAuto());\n+        assertTrue(rule.isManual());\n+\n+        assertTrue(rule.isImmediate());\n+        assertFalse(rule.isAfterDely());\n+        assertFalse(rule.isEventBased());\n+        assertFalse(rule.isMetadataBased());\n+\n+        rule.setStartingPointPolicy(RetentionRule.StartingPointPolicy.AFTER_DELAY);\n+        assertFalse(rule.isImmediate());\n+        assertTrue(rule.isAfterDely());\n+        assertFalse(rule.isEventBased());\n+        assertFalse(rule.isMetadataBased());\n+\n+        rule.setStartingPointPolicy(RetentionRule.StartingPointPolicy.EVENT_BASED);\n+        assertFalse(rule.isImmediate());\n+        assertFalse(rule.isAfterDely());\n+        assertTrue(rule.isEventBased());\n+        assertFalse(rule.isMetadataBased());\n+\n+        rule.setStartingPointPolicy(RetentionRule.StartingPointPolicy.METADATA_BASED);\n+        assertFalse(rule.isImmediate());\n+        assertFalse(rule.isAfterDely());\n+        assertFalse(rule.isEventBased());\n+        assertTrue(rule.isMetadataBased());\n+    }\n+\n+    @Test\n+    public void testMetadataXPathValidity() {\n+        DocumentModel ruleDoc = session.createDocumentModel(\"/\", \"RetentionRule\", \"RetentionRule\");\n+        RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+        rule.setStartingPointPolicy(RetentionRule.StartingPointPolicy.IMMEDIATE);\n+        rule.setApplicationPolicy(RetentionRule.ApplicationPolicy.MANUAL);\n+        ruleDoc = session.createDocument(ruleDoc);\n+        ruleDoc = session.saveDocument(ruleDoc);\n+        rule = ruleDoc.getAdapter(RetentionRule.class);\n+\n+        try {\n+            rule.setMetadataXpath(\"dc:title\");\n+            fail(\"Metatada xpath should be of type Date\");\n+        } catch (IllegalArgumentException e) {\n+            // expected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDM5MjU3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1NjoyM1rOFc7myw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxOTo0MjoyOVrOFfQRPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4MTAzNQ==", "bodyText": "can be replaced by 1_000 and i think the L litteral is not needed here (awaitRetentionExpiration takes a primitif type), i used awaitRetentionExpiration(1_000); and the code compile", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365881035", "createdAt": "2020-01-13T15:56:23Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this doc except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Test;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionManager extends RetentionTestCase {\n+\n+    public static Log log = LogFactory.getLog(TestRetentionManager.class);\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    @Test\n+    public void testRuleOnlyFile() throws InterruptedException {\n+        DocumentModel workspace = session.createDocumentModel(\"/\", \"workspace\", \"Workspace\");\n+        workspace = session.createDocument(workspace);\n+        workspace = session.saveDocument(workspace);\n+        try {\n+            service.attachRule(workspace, createManualImmediateRuleMillis(100L), session);\n+            fail(\"Should not accept workspace document\");\n+        } catch (NuxeoException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void test1DayManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 0L, 1L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1MonthManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 1L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1YearManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 1L, 0L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void testManualImmediateRuleWithActions() throws InterruptedException {\n+        RetentionRule testRule = createImmediateRuleMillis(RetentionRule.ApplicationPolicy.MANUAL, 100L,\n+                null, Arrays.asList(\"Document.Trash\"));\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(session.isRecord(file.getRef()));\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(1000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxNjczMw==", "bodyText": "Removing useless L, but 1000 is readable enough as it is.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368316733", "createdAt": "2020-01-19T19:42:29Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this doc except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Test;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionManager extends RetentionTestCase {\n+\n+    public static Log log = LogFactory.getLog(TestRetentionManager.class);\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    @Test\n+    public void testRuleOnlyFile() throws InterruptedException {\n+        DocumentModel workspace = session.createDocumentModel(\"/\", \"workspace\", \"Workspace\");\n+        workspace = session.createDocument(workspace);\n+        workspace = session.saveDocument(workspace);\n+        try {\n+            service.attachRule(workspace, createManualImmediateRuleMillis(100L), session);\n+            fail(\"Should not accept workspace document\");\n+        } catch (NuxeoException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void test1DayManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 0L, 1L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1MonthManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 1L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1YearManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 1L, 0L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void testManualImmediateRuleWithActions() throws InterruptedException {\n+        RetentionRule testRule = createImmediateRuleMillis(RetentionRule.ApplicationPolicy.MANUAL, 100L,\n+                null, Arrays.asList(\"Document.Trash\"));\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(session.isRecord(file.getRef()));\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(1000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4MTAzNQ=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDM5Mzg3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1Njo0NFrOFc7nmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1Njo0NFrOFc7nmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4MTI0Mg==", "bodyText": "same as above ;)", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365881242", "createdAt": "2020-01-13T15:56:44Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this doc except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Test;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionManager extends RetentionTestCase {\n+\n+    public static Log log = LogFactory.getLog(TestRetentionManager.class);\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    @Test\n+    public void testRuleOnlyFile() throws InterruptedException {\n+        DocumentModel workspace = session.createDocumentModel(\"/\", \"workspace\", \"Workspace\");\n+        workspace = session.createDocument(workspace);\n+        workspace = session.saveDocument(workspace);\n+        try {\n+            service.attachRule(workspace, createManualImmediateRuleMillis(100L), session);\n+            fail(\"Should not accept workspace document\");\n+        } catch (NuxeoException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void test1DayManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 0L, 1L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1MonthManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 1L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1YearManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 1L, 0L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void testManualImmediateRuleWithActions() throws InterruptedException {\n+        RetentionRule testRule = createImmediateRuleMillis(RetentionRule.ApplicationPolicy.MANUAL, 100L,\n+                null, Arrays.asList(\"Document.Trash\"));\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(session.isRecord(file.getRef()));\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(1000L);\n+\n+        file = session.getDocument(file.getRef());\n+\n+        // it has no retention anymore and trashed\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertTrue(file.isTrashed());\n+    }\n+\n+    @Test\n+    public void testManualImmediateRule() throws InterruptedException {\n+        RetentionRule testRule = createManualImmediateRuleMillis(100L);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertFalse(file.isLocked());\n+\n+        awaitRetentionExpiration(1000L);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDM5OTU5OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1ODoxNVrOFc7rEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1ODoxNVrOFc7rEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4MjEzMA==", "bodyText": "awaitRetentionExpiration(500L); -> awaitRetentionExpiration(500); for the three last use", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365882130", "createdAt": "2020-01-13T15:58:15Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this doc except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Test;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionManager extends RetentionTestCase {\n+\n+    public static Log log = LogFactory.getLog(TestRetentionManager.class);\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    @Test\n+    public void testRuleOnlyFile() throws InterruptedException {\n+        DocumentModel workspace = session.createDocumentModel(\"/\", \"workspace\", \"Workspace\");\n+        workspace = session.createDocument(workspace);\n+        workspace = session.saveDocument(workspace);\n+        try {\n+            service.attachRule(workspace, createManualImmediateRuleMillis(100L), session);\n+            fail(\"Should not accept workspace document\");\n+        } catch (NuxeoException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void test1DayManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 0L, 1L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1MonthManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 1L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1YearManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 1L, 0L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void testManualImmediateRuleWithActions() throws InterruptedException {\n+        RetentionRule testRule = createImmediateRuleMillis(RetentionRule.ApplicationPolicy.MANUAL, 100L,\n+                null, Arrays.asList(\"Document.Trash\"));\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(session.isRecord(file.getRef()));\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(1000L);\n+\n+        file = session.getDocument(file.getRef());\n+\n+        // it has no retention anymore and trashed\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertTrue(file.isTrashed());\n+    }\n+\n+    @Test\n+    public void testManualImmediateRule() throws InterruptedException {\n+        RetentionRule testRule = createManualImmediateRuleMillis(100L);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertFalse(file.isLocked());\n+\n+        awaitRetentionExpiration(1000L);\n+\n+        file = session.getDocument(file.getRef());\n+\n+        // it has no retention anymore\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+    }\n+\n+    @Test\n+    public void testManualDocumentMovedToFolderRule() throws InterruptedException {\n+\n+        RetentionRule testRule = createManualEventBasedRuleMillis(DocumentEventTypes.DOCUMENT_MOVED,\n+                \"document.getPathAsString().startsWith('/testFolder')\", 1000L);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        Record record = file.getAdapter(Record.class);\n+        assertTrue(record.isRetainUntilInderterminate());\n+\n+        awaitRetentionExpiration(500L);\n+\n+        file = session.getDocument(file.getRef());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        record = file.getAdapter(Record.class);\n+        assertTrue(record.isRetainUntilInderterminate());\n+\n+        DocumentModel folder = session.createDocumentModel(\"/\", \"testFolder\", \"Folder\");\n+        folder = session.createDocument(folder);\n+        folder = session.saveDocument(folder);\n+\n+        file = session.move(file.getRef(), folder.getRef(), null);\n+\n+        awaitRetentionExpiration(500L);\n+\n+        record = file.getAdapter(Record.class);\n+        assertFalse(record.isRetainUntilInderterminate());\n+        assertFalse(record.isRetentionExpired());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(500L);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDQwMDc1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1ODozNVrOFc7r3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1ODozNVrOFc7r3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4MjMzMw==", "bodyText": "awaitRetentionExpiration(1000L); -> awaitRetentionExpiration(1_000);", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365882333", "createdAt": "2020-01-13T15:58:35Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this doc except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Test;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionManager extends RetentionTestCase {\n+\n+    public static Log log = LogFactory.getLog(TestRetentionManager.class);\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    @Test\n+    public void testRuleOnlyFile() throws InterruptedException {\n+        DocumentModel workspace = session.createDocumentModel(\"/\", \"workspace\", \"Workspace\");\n+        workspace = session.createDocument(workspace);\n+        workspace = session.saveDocument(workspace);\n+        try {\n+            service.attachRule(workspace, createManualImmediateRuleMillis(100L), session);\n+            fail(\"Should not accept workspace document\");\n+        } catch (NuxeoException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void test1DayManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 0L, 1L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1MonthManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 1L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1YearManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 1L, 0L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void testManualImmediateRuleWithActions() throws InterruptedException {\n+        RetentionRule testRule = createImmediateRuleMillis(RetentionRule.ApplicationPolicy.MANUAL, 100L,\n+                null, Arrays.asList(\"Document.Trash\"));\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(session.isRecord(file.getRef()));\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(1000L);\n+\n+        file = session.getDocument(file.getRef());\n+\n+        // it has no retention anymore and trashed\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertTrue(file.isTrashed());\n+    }\n+\n+    @Test\n+    public void testManualImmediateRule() throws InterruptedException {\n+        RetentionRule testRule = createManualImmediateRuleMillis(100L);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertFalse(file.isLocked());\n+\n+        awaitRetentionExpiration(1000L);\n+\n+        file = session.getDocument(file.getRef());\n+\n+        // it has no retention anymore\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+    }\n+\n+    @Test\n+    public void testManualDocumentMovedToFolderRule() throws InterruptedException {\n+\n+        RetentionRule testRule = createManualEventBasedRuleMillis(DocumentEventTypes.DOCUMENT_MOVED,\n+                \"document.getPathAsString().startsWith('/testFolder')\", 1000L);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        Record record = file.getAdapter(Record.class);\n+        assertTrue(record.isRetainUntilInderterminate());\n+\n+        awaitRetentionExpiration(500L);\n+\n+        file = session.getDocument(file.getRef());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        record = file.getAdapter(Record.class);\n+        assertTrue(record.isRetainUntilInderterminate());\n+\n+        DocumentModel folder = session.createDocumentModel(\"/\", \"testFolder\", \"Folder\");\n+        folder = session.createDocument(folder);\n+        folder = session.saveDocument(folder);\n+\n+        file = session.move(file.getRef(), folder.getRef(), null);\n+\n+        awaitRetentionExpiration(500L);\n+\n+        record = file.getAdapter(Record.class);\n+        assertFalse(record.isRetainUntilInderterminate());\n+        assertFalse(record.isRetentionExpired());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(500L);\n+\n+        file = session.getDocument(file.getRef());\n+        record = file.getAdapter(Record.class);\n+\n+        // it has no retention anymore\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertTrue(record.isRetentionExpired());\n+    }\n+\n+    @Test\n+    public void testManualMetadataBasedRule() throws InterruptedException {\n+        RetentionRule testRule = createManualMetadataBasedRuleMillis(\"dc:expired\", 1000L);\n+        Calendar haldSecond = Calendar.getInstance();\n+        haldSecond.add(Calendar.MILLISECOND, 500);\n+        file.setPropertyValue(\"dc:expired\", haldSecond);\n+        file = session.saveDocument(file);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(1000L);\n+\n+        Record record = file.getAdapter(Record.class);\n+        assertFalse(record.isRetainUntilInderterminate());\n+        assertFalse(record.isRetentionExpired());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(1000L);\n+\n+        file = session.getDocument(file.getRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDQwMTY3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1ODo1MlrOFc7sdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNTo1ODo1MlrOFc7sdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4MjQ4Ng==", "bodyText": "same as above", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365882486", "createdAt": "2020-01-13T15:58:52Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this doc except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.junit.Test;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionManager extends RetentionTestCase {\n+\n+    public static Log log = LogFactory.getLog(TestRetentionManager.class);\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    @Test\n+    public void testRuleOnlyFile() throws InterruptedException {\n+        DocumentModel workspace = session.createDocumentModel(\"/\", \"workspace\", \"Workspace\");\n+        workspace = session.createDocument(workspace);\n+        workspace = session.saveDocument(workspace);\n+        try {\n+            service.attachRule(workspace, createManualImmediateRuleMillis(100L), session);\n+            fail(\"Should not accept workspace document\");\n+        } catch (NuxeoException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void test1DayManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 0L, 1L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1MonthManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 0L, 1L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void test1YearManualImmediateRuleRunningRetention() throws InterruptedException {\n+        assertStillUnderRetentionAfter(file, createRuleWithActions(RetentionRule.ApplicationPolicy.MANUAL,\n+                RetentionRule.StartingPointPolicy.IMMEDIATE, null, null, null, null, 1L, 0L, 0L, 0L, null, null), 1_000);\n+    }\n+\n+    @Test\n+    public void testManualImmediateRuleWithActions() throws InterruptedException {\n+        RetentionRule testRule = createImmediateRuleMillis(RetentionRule.ApplicationPolicy.MANUAL, 100L,\n+                null, Arrays.asList(\"Document.Trash\"));\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(session.isRecord(file.getRef()));\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(1000L);\n+\n+        file = session.getDocument(file.getRef());\n+\n+        // it has no retention anymore and trashed\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertTrue(file.isTrashed());\n+    }\n+\n+    @Test\n+    public void testManualImmediateRule() throws InterruptedException {\n+        RetentionRule testRule = createManualImmediateRuleMillis(100L);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertFalse(file.isLocked());\n+\n+        awaitRetentionExpiration(1000L);\n+\n+        file = session.getDocument(file.getRef());\n+\n+        // it has no retention anymore\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+    }\n+\n+    @Test\n+    public void testManualDocumentMovedToFolderRule() throws InterruptedException {\n+\n+        RetentionRule testRule = createManualEventBasedRuleMillis(DocumentEventTypes.DOCUMENT_MOVED,\n+                \"document.getPathAsString().startsWith('/testFolder')\", 1000L);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        Record record = file.getAdapter(Record.class);\n+        assertTrue(record.isRetainUntilInderterminate());\n+\n+        awaitRetentionExpiration(500L);\n+\n+        file = session.getDocument(file.getRef());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        record = file.getAdapter(Record.class);\n+        assertTrue(record.isRetainUntilInderterminate());\n+\n+        DocumentModel folder = session.createDocumentModel(\"/\", \"testFolder\", \"Folder\");\n+        folder = session.createDocument(folder);\n+        folder = session.saveDocument(folder);\n+\n+        file = session.move(file.getRef(), folder.getRef(), null);\n+\n+        awaitRetentionExpiration(500L);\n+\n+        record = file.getAdapter(Record.class);\n+        assertFalse(record.isRetainUntilInderterminate());\n+        assertFalse(record.isRetentionExpired());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(500L);\n+\n+        file = session.getDocument(file.getRef());\n+        record = file.getAdapter(Record.class);\n+\n+        // it has no retention anymore\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertTrue(record.isRetentionExpired());\n+    }\n+\n+    @Test\n+    public void testManualMetadataBasedRule() throws InterruptedException {\n+        RetentionRule testRule = createManualMetadataBasedRuleMillis(\"dc:expired\", 1000L);\n+        Calendar haldSecond = Calendar.getInstance();\n+        haldSecond.add(Calendar.MILLISECOND, 500);\n+        file.setPropertyValue(\"dc:expired\", haldSecond);\n+        file = session.saveDocument(file);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(1000L);\n+\n+        Record record = file.getAdapter(Record.class);\n+        assertFalse(record.isRetainUntilInderterminate());\n+        assertFalse(record.isRetentionExpired());\n+        assertTrue(session.isUnderRetentionOrLegalHold(file.getRef()));\n+\n+        awaitRetentionExpiration(1000L);\n+\n+        file = session.getDocument(file.getRef());\n+        record = file.getAdapter(Record.class);\n+\n+        // it has no retention anymore\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+        assertTrue(record.isRetentionExpired());\n+    }\n+\n+    @Test\n+    public void testManualPastMetadataBasedRule() throws InterruptedException {\n+        RetentionRule testRule = createManualMetadataBasedRuleMillis(\"dc:expired\", 500L);\n+        Calendar haldSecond = Calendar.getInstance();\n+        haldSecond.add(Calendar.MILLISECOND, -1000);\n+        file.setPropertyValue(\"dc:expired\", haldSecond);\n+        file = session.saveDocument(file);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+    }\n+\n+    @Test\n+    public void testRetainUntilDateSaved() throws InterruptedException {\n+        RetentionRule testRule = createManualImmediateRuleMillis(100L);\n+        file = service.attachRule(file, testRule, session);\n+        Calendar original = file.getRetainUntil();\n+        awaitRetentionExpiration(1000L);\n+        Record record = session.getDocument(file.getRef()).getAdapter(Record.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDQwNTc2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjowMDowMlrOFc7u_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjowMDowMlrOFc7u_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4MzEzMg==", "bodyText": "throw LoginException is not needed on these three tests methods", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365883132", "createdAt": "2020-01-13T16:00:02Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import javax.security.auth.login.LoginException;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CloseableCoreSession;\n+import org.nuxeo.ecm.core.api.CoreInstance;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.security.ACE;\n+import org.nuxeo.ecm.core.api.security.ACL;\n+import org.nuxeo.ecm.core.api.security.ACP;\n+import org.nuxeo.ecm.core.api.security.impl.ACLImpl;\n+import org.nuxeo.ecm.core.api.security.impl.ACPImpl;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-security.xml\")\n+public class TestRetentionSecurity extends RetentionTestCase {\n+\n+    @Test\n+    public void shouldBeAuthorizedToManageLegalHold() throws LoginException {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100L), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            // Expected\n+            assertEquals(javax.servlet.http.HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotBeAuthorizedToAttachRule() throws LoginException {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100L), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            // Expected\n+            assertEquals(javax.servlet.http.HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+\n+    @Test\n+    public void shouldBeAuthorizedToAttachRule() throws LoginException {\n+        ACP acp = new ACPImpl();\n+        ACE allowAttachRule = new ACE(\"user\", RetentionConstants.MANAGE_RECORD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowAttachRule });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            file = service.attachRule(file, createManualImmediateRuleMillis(5000L), userSession);\n+            assertTrue(userSession.isUnderRetentionOrLegalHold(file.getRef()));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldBeAuthorizedToSetLegalHold() throws LoginException {\n+        ACP acp = new ACPImpl();\n+        ACE allowLegalHold = new ACE(\"user\", RetentionConstants.MANAGE_LEGAL_HOLD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowLegalHold });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            userSession.makeRecord(file.getRef());\n+            userSession.setLegalHold(file.getRef(), true, null);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDQwOTc2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjowMTowN1rOFc7xeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxOTo0NzoxMlrOFfQShg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4Mzc3MA==", "bodyText": "can be replaced by the use of acp.getOrCreateACL()...\n        ACP acp = new ACPImpl();\n        acp.getOrCreateACL().add(new ACE(\"user\", RetentionConstants.MANAGE_RECORD_PERMISSION, true))\n        file.setACP(acp, true);\n        file = session.saveDocument(file);", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365883770", "createdAt": "2020-01-13T16:01:07Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import javax.security.auth.login.LoginException;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CloseableCoreSession;\n+import org.nuxeo.ecm.core.api.CoreInstance;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.security.ACE;\n+import org.nuxeo.ecm.core.api.security.ACL;\n+import org.nuxeo.ecm.core.api.security.ACP;\n+import org.nuxeo.ecm.core.api.security.impl.ACLImpl;\n+import org.nuxeo.ecm.core.api.security.impl.ACPImpl;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-security.xml\")\n+public class TestRetentionSecurity extends RetentionTestCase {\n+\n+    @Test\n+    public void shouldBeAuthorizedToManageLegalHold() throws LoginException {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100L), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            // Expected\n+            assertEquals(javax.servlet.http.HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotBeAuthorizedToAttachRule() throws LoginException {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100L), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            // Expected\n+            assertEquals(javax.servlet.http.HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+\n+    @Test\n+    public void shouldBeAuthorizedToAttachRule() throws LoginException {\n+        ACP acp = new ACPImpl();\n+        ACE allowAttachRule = new ACE(\"user\", RetentionConstants.MANAGE_RECORD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowAttachRule });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            file = service.attachRule(file, createManualImmediateRuleMillis(5000L), userSession);\n+            assertTrue(userSession.isUnderRetentionOrLegalHold(file.getRef()));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldBeAuthorizedToSetLegalHold() throws LoginException {\n+        ACP acp = new ACPImpl();\n+        ACE allowLegalHold = new ACE(\"user\", RetentionConstants.MANAGE_LEGAL_HOLD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowLegalHold });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxNzA2Mg==", "bodyText": "Leaving for later cleanup in the numerous tests having similar code.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368317062", "createdAt": "2020-01-19T19:47:12Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import javax.security.auth.login.LoginException;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CloseableCoreSession;\n+import org.nuxeo.ecm.core.api.CoreInstance;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.security.ACE;\n+import org.nuxeo.ecm.core.api.security.ACL;\n+import org.nuxeo.ecm.core.api.security.ACP;\n+import org.nuxeo.ecm.core.api.security.impl.ACLImpl;\n+import org.nuxeo.ecm.core.api.security.impl.ACPImpl;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-security.xml\")\n+public class TestRetentionSecurity extends RetentionTestCase {\n+\n+    @Test\n+    public void shouldBeAuthorizedToManageLegalHold() throws LoginException {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100L), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            // Expected\n+            assertEquals(javax.servlet.http.HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotBeAuthorizedToAttachRule() throws LoginException {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100L), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            // Expected\n+            assertEquals(javax.servlet.http.HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+\n+    @Test\n+    public void shouldBeAuthorizedToAttachRule() throws LoginException {\n+        ACP acp = new ACPImpl();\n+        ACE allowAttachRule = new ACE(\"user\", RetentionConstants.MANAGE_RECORD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowAttachRule });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            file = service.attachRule(file, createManualImmediateRuleMillis(5000L), userSession);\n+            assertTrue(userSession.isUnderRetentionOrLegalHold(file.getRef()));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldBeAuthorizedToSetLegalHold() throws LoginException {\n+        ACP acp = new ACPImpl();\n+        ACE allowLegalHold = new ACE(\"user\", RetentionConstants.MANAGE_LEGAL_HOLD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowLegalHold });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4Mzc3MA=="}, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDQxMjYzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjowMTo1NFrOFc7zWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjowMTo1NFrOFc7zWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4NDI0OA==", "bodyText": "the literal L is not needed as the method createManualImmediateRuleMillis  takes a primitif type", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365884248", "createdAt": "2020-01-13T16:01:54Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import javax.security.auth.login.LoginException;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CloseableCoreSession;\n+import org.nuxeo.ecm.core.api.CoreInstance;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.security.ACE;\n+import org.nuxeo.ecm.core.api.security.ACL;\n+import org.nuxeo.ecm.core.api.security.ACP;\n+import org.nuxeo.ecm.core.api.security.impl.ACLImpl;\n+import org.nuxeo.ecm.core.api.security.impl.ACPImpl;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-security.xml\")\n+public class TestRetentionSecurity extends RetentionTestCase {\n+\n+    @Test\n+    public void shouldBeAuthorizedToManageLegalHold() throws LoginException {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100L), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            // Expected\n+            assertEquals(javax.servlet.http.HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotBeAuthorizedToAttachRule() throws LoginException {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100L), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            // Expected\n+            assertEquals(javax.servlet.http.HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+\n+    @Test\n+    public void shouldBeAuthorizedToAttachRule() throws LoginException {\n+        ACP acp = new ACPImpl();\n+        ACE allowAttachRule = new ACE(\"user\", RetentionConstants.MANAGE_RECORD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowAttachRule });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            file = service.attachRule(file, createManualImmediateRuleMillis(5000L), userSession);\n+            assertTrue(userSession.isUnderRetentionOrLegalHold(file.getRef()));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldBeAuthorizedToSetLegalHold() throws LoginException {\n+        ACP acp = new ACPImpl();\n+        ACE allowLegalHold = new ACE(\"user\", RetentionConstants.MANAGE_LEGAL_HOLD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowLegalHold });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            userSession.makeRecord(file.getRef());\n+            userSession.setLegalHold(file.getRef(), true, null);\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotBeAllowedToAttachTwoRules() {\n+        RetentionRule rr = createManualImmediateRuleMillis(100L);\n+        file = service.attachRule(file, rr, session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDQxNzEyOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjowMzoxMVrOFc72Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjowMzoxMVrOFc72Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4NDk3MA==", "bodyText": "wdyt if we add an assertion about the message type or the exception status NuxeoException#statusCode", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365884970", "createdAt": "2020-01-13T16:03:11Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import javax.security.auth.login.LoginException;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CloseableCoreSession;\n+import org.nuxeo.ecm.core.api.CoreInstance;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.security.ACE;\n+import org.nuxeo.ecm.core.api.security.ACL;\n+import org.nuxeo.ecm.core.api.security.ACP;\n+import org.nuxeo.ecm.core.api.security.impl.ACLImpl;\n+import org.nuxeo.ecm.core.api.security.impl.ACPImpl;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-security.xml\")\n+public class TestRetentionSecurity extends RetentionTestCase {\n+\n+    @Test\n+    public void shouldBeAuthorizedToManageLegalHold() throws LoginException {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100L), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            // Expected\n+            assertEquals(javax.servlet.http.HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotBeAuthorizedToAttachRule() throws LoginException {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100L), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            // Expected\n+            assertEquals(javax.servlet.http.HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+\n+    @Test\n+    public void shouldBeAuthorizedToAttachRule() throws LoginException {\n+        ACP acp = new ACPImpl();\n+        ACE allowAttachRule = new ACE(\"user\", RetentionConstants.MANAGE_RECORD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowAttachRule });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            file = service.attachRule(file, createManualImmediateRuleMillis(5000L), userSession);\n+            assertTrue(userSession.isUnderRetentionOrLegalHold(file.getRef()));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldBeAuthorizedToSetLegalHold() throws LoginException {\n+        ACP acp = new ACPImpl();\n+        ACE allowLegalHold = new ACE(\"user\", RetentionConstants.MANAGE_LEGAL_HOLD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowLegalHold });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            userSession.makeRecord(file.getRef());\n+            userSession.setLegalHold(file.getRef(), true, null);\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotBeAllowedToAttachTwoRules() {\n+        RetentionRule rr = createManualImmediateRuleMillis(100L);\n+        file = service.attachRule(file, rr, session);\n+        try  {\n+            service.attachRule(file, rr, session);\n+            fail(\"Should not be abe to attach rule twice\");\n+        } catch (NuxeoException e) {\n+            // Expected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791d48515fd8b4c1c9feb5ab4ece3788fcf56fc9"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDQ1NzE5OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjoxNToyMFrOFc8PdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjoxNToyMFrOFc8PdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg5MTQ0NA==", "bodyText": "createManualMetadataBasedRuleMillis(\"dc:expired\", 500L); -> reateManualMetadataBasedRuleMillis(\"dc:expired\", 500); and .... -1000); ->  -1_000);", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365891444", "createdAt": "2020-01-13T16:15:20Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -203,6 +203,18 @@ public void testManualPastMetadataBasedRule() throws InterruptedException {\n         assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n     }\n \n+    @Test\n+    public void testManualNullMetadataBasedRule() throws InterruptedException {\n+        RetentionRule testRule = createManualMetadataBasedRuleMillis(\"dc:expired\", 500L);\n+        Calendar haldSecond = Calendar.getInstance();\n+        haldSecond.add(Calendar.MILLISECOND, -1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36690648b12930c0505c606bf2fc0cdd385bd190"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDQ1ODM4OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjoxNTozOVrOFc8QNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxOTo1MzoxMlrOFfQTzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg5MTYzOQ==", "bodyText": "throw InterruptedException is not needed", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365891639", "createdAt": "2020-01-13T16:15:39Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -203,6 +203,18 @@ public void testManualPastMetadataBasedRule() throws InterruptedException {\n         assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n     }\n \n+    @Test\n+    public void testManualNullMetadataBasedRule() throws InterruptedException {\n+        RetentionRule testRule = createManualMetadataBasedRuleMillis(\"dc:expired\", 500L);\n+        Calendar haldSecond = Calendar.getInstance();\n+        haldSecond.add(Calendar.MILLISECOND, -1000);\n+        file = session.saveDocument(file);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+    }\n+\n     @Test\n     public void testRetainUntilDateSaved() throws InterruptedException {\n         RetentionRule testRule = createManualImmediateRuleMillis(100L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36690648b12930c0505c606bf2fc0cdd385bd190"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxNzM4OA==", "bodyText": "It is actually, due to call to awaitRetentionExpiration that throws it.", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r368317388", "createdAt": "2020-01-19T19:53:12Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -203,6 +203,18 @@ public void testManualPastMetadataBasedRule() throws InterruptedException {\n         assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n     }\n \n+    @Test\n+    public void testManualNullMetadataBasedRule() throws InterruptedException {\n+        RetentionRule testRule = createManualMetadataBasedRuleMillis(\"dc:expired\", 500L);\n+        Calendar haldSecond = Calendar.getInstance();\n+        haldSecond.add(Calendar.MILLISECOND, -1000);\n+        file = session.saveDocument(file);\n+\n+        file = service.attachRule(file, testRule, session);\n+        assertTrue(file.isRecord());\n+        assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+    }\n+\n     @Test\n     public void testRetainUntilDateSaved() throws InterruptedException {\n         RetentionRule testRule = createManualImmediateRuleMillis(100L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg5MTYzOQ=="}, "originalCommit": {"oid": "36690648b12930c0505c606bf2fc0cdd385bd190"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDQ2MDg0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjoxNjoyMlrOFc8Ruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjoxNjoyMlrOFc8Ruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg5MjAyNw==", "bodyText": "throws InterruptedException is not needed", "url": "https://github.com/nuxeo/nuxeo/pull/3655#discussion_r365892027", "createdAt": "2020-01-13T16:16:22Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -203,6 +203,18 @@ public void testManualPastMetadataBasedRule() throws InterruptedException {\n         assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36690648b12930c0505c606bf2fc0cdd385bd190"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4228, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}