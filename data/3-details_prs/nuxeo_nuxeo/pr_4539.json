{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2ODI3MzIy", "number": 4539, "title": "NXP-29580: Runtime Descriptors Migrations", "bodyText": "", "createdAt": "2020-12-11T11:34:58Z", "url": "https://github.com/nuxeo/nuxeo/pull/4539", "merged": true, "mergeCommit": {"oid": "4c42c5a10fa60a63897b733e218b6a01437554b2"}, "closed": true, "closedAt": "2020-12-23T08:34:50Z", "author": {"login": "atchertchian"}, "timelineItems": {"totalCount": 60, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlIdy0gBqjQxMDA1MTYwMTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdovh7QAFqTU1NzMwODg0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ffcca8e2b321d2b1532f4da5f4153375512ff81", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9ffcca8e2b321d2b1532f4da5f4153375512ff81", "committedDate": "2020-12-11T11:34:02Z", "message": "FIXME on warns"}, "afterCommit": {"oid": "5239119119f6e2dbed163bcf7c01ab0bf6734cb6", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5239119119f6e2dbed163bcf7c01ab0bf6734cb6", "committedDate": "2020-12-11T13:09:32Z", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "513104acd62c7aa41fba8be0adb7955f2ae1f206", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/513104acd62c7aa41fba8be0adb7955f2ae1f206", "committedDate": "2020-12-11T16:34:57Z", "message": "syserr errors for debug"}, "afterCommit": {"oid": "5de211459d8d4bd652d52ab911f93c171e155adf", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5de211459d8d4bd652d52ab911f93c171e155adf", "committedDate": "2020-12-11T18:17:43Z", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMTc5NjA3", "url": "https://github.com/nuxeo/nuxeo/pull/4539#pullrequestreview-550179607", "createdAt": "2020-12-11T15:07:31Z", "commit": {"oid": "ae19d77d99ebc4f4eeeb058ed6bb2a3299ce1888"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTowNzozMVrOID8z7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMjo0NTo0MVrOIETMIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxMjk3NA==", "bodyText": "I think xpathy in the Javadoc value() was a typo, and xpath is what's meant.\nNot very important.\n(Same typo in XContent)", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541012974", "createdAt": "2020-12-11T15:07:31Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/annotation/XNode.java", "diffHunk": "@@ -41,6 +41,39 @@\n      */\n     String value() default \"\";\n \n+    /**\n+     * Marker for fallback to be ignored.\n+     *\n+     * @since 11.5\n+     */\n+    public static final String NO_FALLBACK_MARKER = \"__NO_FALLBACK_MARKER__\";\n+\n+    /**\n+     * An xpathy expression specifying the fallback XML node to bind to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae19d77d99ebc4f4eeeb058ed6bb2a3299ce1888"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxOTk2MA==", "bodyText": "logics -> logic (several instances)", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541019960", "createdAt": "2020-12-11T15:17:17Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMember.java", "diffHunk": "@@ -117,13 +117,36 @@ public void toXML(Object instance, Element parent) {\n     }\n \n     public void process(Context ctx, Element element) {\n-        Object value = getValue(ctx, element);\n-        if (value != null) {\n-            setValue(ctx.getObject(), value);\n+        process(ctx, element, null);\n+    }\n+\n+    /**\n+     * Sets the resolved value on the given object, potentially applying merge logics with given existing object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMTgyMw==", "bodyText": "Could be merged while this is being refactored. Even InvocationTargetException could be dealt with the same way by just rethrowing instead of extracting the cause (unless this is needed by some specific caller). This means we can just catch ReflectiveOperationException.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541021823", "createdAt": "2020-12-11T15:19:56Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedObject.java", "diffHunk": "@@ -78,21 +93,38 @@ public Path getPath() {\n         return path;\n     }\n \n+    public Class<?> getKlass() {\n+        return klass;\n+    }\n+\n     public Object newInstance(Context ctx, Element element) {\n-        Object ob;\n-        try {\n-            ob = ctor.newInstance();\n-        } catch (InstantiationException e) {\n-            throw new IllegalArgumentException(e);\n-        } catch (IllegalAccessException e) {\n-            throw new IllegalArgumentException(e);\n-        } catch (InvocationTargetException e) {\n-            if (e.getCause() instanceof RuntimeException) {\n-                throw (RuntimeException) e.getCause();\n+        return newInstance(ctx, element, null);\n+    }\n+\n+    /**\n+     * Returns a new instance for given element, and given existing object, potentially applying merge logics.\n+     *\n+     * @since 11.5\n+     */\n+    public Object newInstance(Context ctx, Element element, Object existing) {\n+        if (existing == null) {\n+            Object ob;\n+            try {\n+                ob = constructor.newInstance();\n+            } catch (InstantiationException e) {\n+                throw new IllegalArgumentException(e);\n+            } catch (IllegalAccessException e) {\n+                throw new IllegalArgumentException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNjM5Mg==", "bodyText": "Remove  = false", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541026392", "createdAt": "2020-12-11T15:26:16Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logics.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected boolean initialized = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyODU4NA==", "bodyText": "This is ok if we don't expect multi-threaded usage. Otherwise more synchronization is needed.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541028584", "createdAt": "2020-12-11T15:29:20Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logics.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected boolean initialized = false;\n+\n+    protected List<RegistryContribution> registrations = new ArrayList<>();\n+\n+    public AbstractRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return false;\n+    }\n+\n+    protected boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    protected void setInitialized(boolean initialized) {\n+        this.initialized = initialized;\n+    }\n+\n+    protected void checkInitialized() {\n+        if (isInitialized()) {\n+            return;\n+        }\n+        initialize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyOTgzNw==", "bodyText": "registrations.removeIf(reg -> marker.equals(reg.getMarker()))", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541029837", "createdAt": "2020-12-11T15:31:07Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Abstract class for {@link Registry} common logics.\n+ *\n+ * @since 11.5\n+ */\n+public abstract class AbstractRegistry implements Registry {\n+\n+    protected boolean initialized = false;\n+\n+    protected List<RegistryContribution> registrations = new ArrayList<>();\n+\n+    public AbstractRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return false;\n+    }\n+\n+    protected boolean isInitialized() {\n+        return initialized;\n+    }\n+\n+    protected void setInitialized(boolean initialized) {\n+        this.initialized = initialized;\n+    }\n+\n+    protected void checkInitialized() {\n+        if (isInitialized()) {\n+            return;\n+        }\n+        initialize();\n+    }\n+\n+    protected void initialize() {\n+        registrations.forEach(rc -> register(rc.getContext(), rc.getObject(), rc.getElement()));\n+        setInitialized(true);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String marker) {\n+        registrations.add(new RegistryContribution(ctx, xObject, element, marker));\n+        setInitialized(false);\n+    }\n+\n+    @Override\n+    public void unregister(String marker) {\n+        if (marker == null) {\n+            return;\n+        }\n+        Iterator<RegistryContribution> it = registrations.iterator();\n+        while (it.hasNext()) {\n+            RegistryContribution reg = it.next();\n+            if (marker.equals(reg.getMarker())) {\n+                it.remove();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMDc5Mw==", "bodyText": "I don't think this is needed, it's automatically done by Java.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541030793", "createdAt": "2020-12-11T15:32:23Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Registry for multiple contributions identified by a unique id.\n+ *\n+ * @since 11.5\n+ */\n+public class MapRegistry extends AbstractRegistry implements Registry {\n+\n+    protected Map<String, Object> contributions = new LinkedHashMap<>();\n+\n+    protected Set<String> disabled = new HashSet<>();\n+\n+    public MapRegistry() {\n+        super();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMjAzMw==", "bodyText": ".map(Map.Entry::getValue)", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541032033", "createdAt": "2020-12-11T15:34:07Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Registry for multiple contributions identified by a unique id.\n+ *\n+ * @since 11.5\n+ */\n+public class MapRegistry extends AbstractRegistry implements Registry {\n+\n+    protected Map<String, Object> contributions = new LinkedHashMap<>();\n+\n+    protected Set<String> disabled = new HashSet<>();\n+\n+    public MapRegistry() {\n+        super();\n+    }\n+\n+    @Override\n+    protected void initialize() {\n+        contributions.clear();\n+        disabled.clear();\n+        super.initialize();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Map<String, T> getContributions() {\n+        checkInitialized();\n+        return (Map<String, T>) contributions.entrySet()\n+                                             .stream()\n+                                             .filter(x -> !disabled.contains(x.getKey()))\n+                                             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n+                                                     (e1, e2) -> e2, LinkedHashMap::new));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> List<T> getContributionValues() {\n+        checkInitialized();\n+        return (List<T>) contributions.entrySet()\n+                                      .stream()\n+                                      .filter(x -> !disabled.contains(x.getKey()))\n+                                      .map(x -> x.getValue())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMzU0OQ==", "bodyText": "(v1, v2) -> v2 maybe, as this merge function is about values?", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541033549", "createdAt": "2020-12-11T15:36:06Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Registry for multiple contributions identified by a unique id.\n+ *\n+ * @since 11.5\n+ */\n+public class MapRegistry extends AbstractRegistry implements Registry {\n+\n+    protected Map<String, Object> contributions = new LinkedHashMap<>();\n+\n+    protected Set<String> disabled = new HashSet<>();\n+\n+    public MapRegistry() {\n+        super();\n+    }\n+\n+    @Override\n+    protected void initialize() {\n+        contributions.clear();\n+        disabled.clear();\n+        super.initialize();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Map<String, T> getContributions() {\n+        checkInitialized();\n+        return (Map<String, T>) contributions.entrySet()\n+                                             .stream()\n+                                             .filter(x -> !disabled.contains(x.getKey()))\n+                                             .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,\n+                                                     (e1, e2) -> e2, LinkedHashMap::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzNjE0MQ==", "bodyText": "Not needed", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541036141", "createdAt": "2020-12-11T15:39:31Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Null registry for backward compatibility management.\n+ * <p>\n+ * Allows setting a non-null registry to avoid repeated lookups, while no registry is defined.\n+ *\n+ * @since 11.5\n+ */\n+public class NullRegistry extends AbstractRegistry implements Registry {\n+\n+    public NullRegistry() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzNjU2Ng==", "bodyText": "Maybe throw UnsupportedOperationException() if it would be a mistake to call this in the null registry?", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541036566", "createdAt": "2020-12-11T15:40:10Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/NullRegistry.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Null registry for backward compatibility management.\n+ * <p>\n+ * Allows setting a non-null registry to avoid repeated lookups, while no registry is defined.\n+ *\n+ * @since 11.5\n+ */\n+public class NullRegistry extends AbstractRegistry implements Registry {\n+\n+    public NullRegistry() {\n+    }\n+\n+    @Override\n+    public boolean isNull() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        // NOOP", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDUyNQ==", "bodyText": "public final not needed (implicit).\n(Also in other @interface annotation classes)", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541040525", "createdAt": "2020-12-11T15:45:30Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/XRegistryId.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+\n+/**\n+ * Annotation representing the id to be retrieved for registry identification.\n+ * <p>\n+ * If annotation is placed on a field annotated by {@link XNode}, this field will be considered as the id for the\n+ * containing {@link XObject}. This annotation value will be ignored and taken on the corresponding XNode instead.\n+ *\n+ * @since 11.5\n+ */\n+@Target({ ElementType.TYPE, ElementType.FIELD, ElementType.METHOD })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface XRegistryId {\n+\n+    public final String ID = \"@id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MjI2Mw==", "bodyText": "It's probably not the style for previous test descriptors, but please let's make all the fields public in test classes.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541042263", "createdAt": "2020-12-11T15:47:58Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/test/java/org/nuxeo/common/xmap/registry/SampleDescriptor.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap.registry;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XNodeList;\n+import org.nuxeo.common.xmap.annotation.XNodeMap;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+\n+/**\n+ * Sample descriptor with default expected registry annotations and list/map various cases.\n+ *\n+ * @since 11.5\n+ */\n+@XObject(\"descriptor\")\n+@XRegistry\n+@XRegistryId(value = \"@name\")\n+public class SampleDescriptor {\n+\n+    @XNode(\"@name\")\n+    String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453fcc85cb63d57c55c6666edfbc2e7bc6903009"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDA5NA==", "bodyText": "Remove  = false", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541044094", "createdAt": "2020-12-11T15:50:34Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime.registry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.common.xmap.registry.SingleRegistry;\n+import org.nuxeo.runtime.model.ComponentInstance;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleComponent extends DefaultComponent {\n+\n+    public static final String SINGLE_POINT = \"single\";\n+\n+    public static final String MAP_POINT = \"map\";\n+\n+    public static final String CUSTOM_POINT = \"custom\";\n+\n+    public static final String LEGACY_POINT = \"legacy\";\n+\n+    protected boolean registryContributionRegistered = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28facc7ba6cdcdbc1e99612d09a532c666316475"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDUzNg==", "bodyText": "Add newline", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541044536", "createdAt": "2020-12-11T15:51:15Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleLegacyDescriptor.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.registry;\n+\n+import org.nuxeo.common.xmap.annotation.XObject;\n+\n+/**\n+ * @since 11.5\n+ */\n+@XObject(\"descriptor\")\n+public class SampleLegacyDescriptor extends SampleDescriptor {\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28facc7ba6cdcdbc1e99612d09a532c666316475"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDc3Mg==", "bodyText": "Not needed I think", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541044772", "createdAt": "2020-12-11T15:51:35Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleRegistry.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.registry;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleRegistry extends MapRegistry {\n+\n+    public SampleRegistry() {\n+        super();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28facc7ba6cdcdbc1e99612d09a532c666316475"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0Njg1OA==", "bodyText": "Possible alternative: %s--%s as this is what's used in explorer URLs? Up to you.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541046858", "createdAt": "2020-12-11T15:54:39Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -182,4 +185,18 @@ protected boolean unregister(String xp, Descriptor descriptor) {\n         return getRegistry().getDescriptors(name, xp);\n     }\n \n+    /**\n+     * Returns the registry for given extension point of this component.\n+     *\n+     * @since 11.5\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T extends Registry> T getExtensionPointRegistry(String point) {\n+        return (T) Framework.getRuntime()\n+                            .getComponentManager()\n+                            .getExtensionPointRegistry(name, point)\n+                            .orElseThrow(() -> new IllegalArgumentException(\n+                                    String.format(\"Unknown registry for extension point '%s:%s'\", name, point)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28facc7ba6cdcdbc1e99612d09a532c666316475"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NzUyNg==", "bodyText": "Could this be made an Optional<String>?", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541047526", "createdAt": "2020-12-11T15:55:35Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/ExtensionPoint.java", "diffHunk": "@@ -65,4 +68,18 @@\n      */\n     String getSuperComponent();\n \n+    /**\n+     * Returns the potential custom registry class for this extension point.\n+     *\n+     * @since 11.5\n+     */\n+    String getRegistryClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28facc7ba6cdcdbc1e99612d09a532c666316475"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0ODgzNw==", "bodyText": "fill up -> fill", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541048837", "createdAt": "2020-12-11T15:57:18Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +474,127 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill up registry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28facc7ba6cdcdbc1e99612d09a532c666316475"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0OTU4MA==", "bodyText": "ConcurrentMap -> Map", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541049580", "createdAt": "2020-12-11T15:58:25Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +474,127 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill up registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n         }\n     }\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        ConcurrentMap<String, Registry> target = registries.get(component);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28facc7ba6cdcdbc1e99612d09a532c666316475"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0OTk2MQ==", "bodyText": "ConcurrentMap -> Map", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541049961", "createdAt": "2020-12-11T15:58:55Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -128,6 +138,15 @@\n      */\n     protected volatile DescriptorRegistry descriptors;\n \n+    /**\n+     * Target Component > Extension Point > Registry\n+     *\n+     * @since 11.5\n+     */\n+    protected final ConcurrentMap<String, ConcurrentMap<String, Registry>> registries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28facc7ba6cdcdbc1e99612d09a532c666316475"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzNTA2NQ==", "bodyText": "You could set it to NULL_REGISTRY directly when the variable is declared, and have .orElse(NULL_REGISTRY). Or even declare the variable just Registry registry; and have\nif (contributions.length == 0) {\n    registry = NULL_REGISTRY;\n} else {\n    ...\n\nThis style of single-assignment is sometimes easier to reason about.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541335065", "createdAt": "2020-12-11T21:55:06Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +474,127 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill up registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n         }\n     }\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        ConcurrentMap<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (stored.isEmpty()) {\n+            Registry registry = null;\n+            String point = xp.getName();\n+            String registryClass = xp.getRegistryClass();\n+            if (registryClass != null) {\n+                try {\n+                    Class<?> clazz = Class.forName(registryClass);\n+                    Constructor<?> constructor = clazz.getConstructor();\n+                    registry = (Registry) constructor.newInstance();\n+                } catch (ReflectiveOperationException e) {\n+                    String msg = String.format(\n+                            \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                            component, point, registryClass, e.toString());\n+                    throw new RuntimeException(msg, e);\n+                }\n+            } else {\n+                Class<?>[] contributions = xp.getContributions();\n+                if (contributions.length != 0) {\n+                    // compute registry from annotations, taking first registry\n+                    XMap xmap = xp.getXMap();\n+                    registry = Arrays.stream(contributions)\n+                                     .map(xmap::getObject)\n+                                     .filter(Objects::nonNull)\n+                                     .map(xmap::getRegistry)\n+                                     .filter(Objects::nonNull)\n+                                     .findFirst()\n+                                     .orElse(null);\n+                }\n+            }\n+            if (registry == null) {\n+                registry = NULL_REGISTRY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28facc7ba6cdcdbc1e99612d09a532c666316475"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzOTIzNw==", "bodyText": "Maybe start with\nif (!stored.isEmpty()) {\n    return stored.get();\n}\n\nand deindent all the rest", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541339237", "createdAt": "2020-12-11T21:59:35Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +474,127 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill up registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n         }\n     }\n \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        ConcurrentMap<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (stored.isEmpty()) {\n+            Registry registry = null;\n+            String point = xp.getName();\n+            String registryClass = xp.getRegistryClass();\n+            if (registryClass != null) {\n+                try {\n+                    Class<?> clazz = Class.forName(registryClass);\n+                    Constructor<?> constructor = clazz.getConstructor();\n+                    registry = (Registry) constructor.newInstance();\n+                } catch (ReflectiveOperationException e) {\n+                    String msg = String.format(\n+                            \"Failed to create registry on component '%s', extension point '%s': error initializing class '%s' (%s).\",\n+                            component, point, registryClass, e.toString());\n+                    throw new RuntimeException(msg, e);\n+                }\n+            } else {\n+                Class<?>[] contributions = xp.getContributions();\n+                if (contributions.length != 0) {\n+                    // compute registry from annotations, taking first registry\n+                    XMap xmap = xp.getXMap();\n+                    registry = Arrays.stream(contributions)\n+                                     .map(xmap::getObject)\n+                                     .filter(Objects::nonNull)\n+                                     .map(xmap::getRegistry)\n+                                     .filter(Objects::nonNull)\n+                                     .findFirst()\n+                                     .orElse(null);\n+                }\n+            }\n+            if (registry == null) {\n+                registry = NULL_REGISTRY;\n+            }\n+            registries.computeIfAbsent(component, k -> new ConcurrentHashMap<>()).put(point, registry);\n+            return registry;\n+        }\n+        return stored.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28facc7ba6cdcdbc1e99612d09a532c666316475"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM0MTM0MQ==", "bodyText": "You don't need i, so use for (Class<?> contrib : contributions) {", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541341341", "createdAt": "2020-12-11T22:01:54Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ExtensionPointImpl.java", "diffHunk": "@@ -76,39 +81,24 @@ public String getSuperComponent() {\n         return superComponent;\n     }\n \n-    public Extension createExtension(Element element) {\n-        return null;\n+    @Override\n+    public String getRegistryClass() {\n+        return registryKlass;\n     }\n \n-    public Object[] loadContributions(RegistrationInfo owner, Extension extension) {\n-        Object[] contribs = extension.getContributions();\n-        if (contribs != null) {\n-            // contributions already computed - this should e an overloaded (extended) extension point\n-            return contribs;\n-        }\n-        // should compute now the contributions\n-        if (contributions != null) {\n-            if (xmap == null) {\n-                xmap = new XMap();\n-                for (Class<?> contrib : contributions) {\n-                    if (contrib != null) {\n-                        xmap.register(contrib);\n-                    } else {\n-                        throw new RuntimeException(\"Unknown implementation class when contributing to \"\n-                                + owner.getComponent().getName());\n-                    }\n-                }\n-            }\n-            try {\n-                contribs = xmap.loadAll(new XMapContext(extension.getContext()), extension.getElement());\n-            } catch (XMapException e) {\n+    @Override\n+    public XMap getXMap() {\n+        XMap xmap = new XMap();\n+        for (int i = 0; i < contributions.length; i++) {\n+            Class<?> contrib = contributions[i];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28facc7ba6cdcdbc1e99612d09a532c666316475"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM0NDMzMw==", "bodyText": "Naming suggestion: tag or label instead of mark.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541344333", "createdAt": "2020-12-11T22:05:14Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java", "diffHunk": "@@ -32,6 +32,21 @@\n      */\n     boolean isNull();\n \n+    /**\n+     * Marks the registry with given identifier.\n+     */\n+    void mark(String id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca3746a526776e7a81dea331446d3276f677a139"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM0NTM5Mw==", "bodyText": "You should mention that a registry can have not just zero or one but also more than one.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541345393", "createdAt": "2020-12-11T22:06:31Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/Registry.java", "diffHunk": "@@ -32,6 +32,21 @@\n      */\n     boolean isNull();\n \n+    /**\n+     * Marks the registry with given identifier.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca3746a526776e7a81dea331446d3276f677a139"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM0ODk1NQ==", "bodyText": "flag -> mark (or whatever new name is chosen)", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541348955", "createdAt": "2020-12-11T22:10:51Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.Optional;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.AbstractRegistry;\n+import org.nuxeo.common.xmap.registry.Registry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class DummyRegistry extends AbstractRegistry {\n+\n+    public Optional<Registry> getTargetRegistry() {\n+        return Framework.getRuntime()\n+                        .getComponentManager()\n+                        .getExtensionPointRegistry(ComponentWithXPoint.NAME.getName(), ComponentWithXPoint.XP);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String flag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42028f6ef22060dfb5a91208821ebc38668e26c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MjgwMQ==", "bodyText": "XAnnotatedMember[] members = Arrays.stream(values)\n                                   .map(value -> new XAnnotatedReference(xmap, String.class, value, null, null))\n                                   .toArray(XAnnotatedMember[]::new);", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541352801", "createdAt": "2020-12-11T22:15:10Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = new XAnnotatedMember[values.length];\n+        for (int i = 0; i < values.length; i++) {\n+            members[i] = new XAnnotatedReference(xmap, String.class, values[i], null, null);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33150a6c94d8597cb3c1099c72ced2ccbfa49fd6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1NDE5Mw==", "bodyText": "return Arrrays.stream(members).anyMatch(member -> member.hasValue(ctx, element));", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541354193", "createdAt": "2020-12-11T22:16:45Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = new XAnnotatedMember[values.length];\n+        for (int i = 0; i < values.length; i++) {\n+            members[i] = new XAnnotatedReference(xmap, String.class, values[i], null, null);\n+        }\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    protected boolean hasValue(Context ctx, Element element) {\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, element)) {\n+                return true;\n+            }\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33150a6c94d8597cb3c1099c72ced2ccbfa49fd6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1NjExMA==", "bodyText": "return String.join(separator, values);", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541356110", "createdAt": "2020-12-11T22:19:02Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = new XAnnotatedMember[values.length];\n+        for (int i = 0; i < values.length; i++) {\n+            members[i] = new XAnnotatedReference(xmap, String.class, values[i], null, null);\n+        }\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    protected boolean hasValue(Context ctx, Element element) {\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, element)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return StringUtils.join(values, separator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33150a6c94d8597cb3c1099c72ced2ccbfa49fd6"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1ODI3NQ==", "bodyText": "Arrays.asList(members).forEach(member -> member.toXML(instance, parent))", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541358275", "createdAt": "2020-12-11T22:21:27Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XAnnotatedMembers.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.common.xmap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.common.xmap.annotation.XNodes;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Handles multiple annotations.\n+ *\n+ * @since 11.5\n+ */\n+public class XAnnotatedMembers extends XAnnotatedMember {\n+\n+    protected XAnnotatedMember[] members;\n+\n+    protected String separator;\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        super(xmap, setter);\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, XNodes anno) {\n+        this(xmap, setter, anno.values(), anno.separator(), anno.defaultAssignment());\n+    }\n+\n+    public XAnnotatedMembers(XMap xmap, XAccessor setter, String[] values, String separator, String defaultValue) {\n+        super(xmap, setter);\n+        XAnnotatedMember[] members = new XAnnotatedMember[values.length];\n+        for (int i = 0; i < values.length; i++) {\n+            members[i] = new XAnnotatedReference(xmap, String.class, values[i], null, null);\n+        }\n+        init(xmap, setter, members, separator, defaultValue);\n+    }\n+\n+    protected void init(XMap xmap, XAccessor setter, XAnnotatedMember[] members, String separator,\n+            String defaultValue) {\n+        this.members = members;\n+        this.separator = separator;\n+        this.defaultValue = defaultValue;\n+        if (setter != null) {\n+            type = setter.getType();\n+        } else {\n+            type = String.class;\n+        }\n+        valueFactory = xmap.getValueFactory(type);\n+        xao = xmap.register(type);\n+    }\n+\n+    @Override\n+    protected boolean hasValue(Context ctx, Element element) {\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, element)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Object getValue(Context ctx, Element base) {\n+        List<String> values = new ArrayList<>();\n+        for (XAnnotatedMember member : members) {\n+            if (member.hasValue(ctx, base)) {\n+                Object mvalue = member.getValue(ctx, base);\n+                values.add(mvalue != null ? String.valueOf(mvalue) : \"\");\n+            }\n+        }\n+        if (values.isEmpty()) {\n+            return getDefaultValue(ctx);\n+        }\n+        return StringUtils.join(values, separator);\n+    }\n+\n+    @Override\n+    public void toXML(Object instance, Element parent) {\n+        for (XAnnotatedMember member : members) {\n+            member.toXML(instance, parent);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33150a6c94d8597cb3c1099c72ced2ccbfa49fd6"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1OTUxNA==", "bodyText": "xregistryId.value() can be put in a local variable", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541359514", "createdAt": "2020-12-11T22:22:46Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/XMap.java", "diffHunk": "@@ -270,8 +271,13 @@ private void scanObjectRegistryAnnotations(XAnnotatedObject xob, Class<?> klass)\n         xob.setHasRegistry(xreg != null);\n         XRegistryId xregistryId = klass.getAnnotation(XRegistryId.class);\n         if (xregistryId != null) {\n-            xob.setRegistryId(\n-                    new XAnnotatedReference(this, String.class, xregistryId.value(), xregistryId.fallback(), null));\n+            if (xregistryId.value().length == 1) {\n+                xob.setRegistryId(new XAnnotatedReference(this, String.class, xregistryId.value()[0],\n+                        xregistryId.fallback(), xregistryId.defaultAssignment()));\n+            } else {\n+                xob.setRegistryId(new XAnnotatedMembers(this, null, xregistryId.value(), xregistryId.separator(),\n+                        xregistryId.defaultAssignment()));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33150a6c94d8597cb3c1099c72ced2ccbfa49fd6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2MzI0NQ==", "bodyText": "**/ -> */", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541363245", "createdAt": "2020-12-11T22:26:32Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/test/java/org/nuxeo/runtime/TestDescriptorRegistry.java", "diffHunk": "@@ -24,9 +24,14 @@\n import java.util.List;\n \n import org.junit.Test;\n+import org.nuxeo.common.xmap.registry.Registry;\n import org.nuxeo.runtime.model.Descriptor;\n import org.nuxeo.runtime.model.DescriptorRegistry;\n \n+/**\n+ * @deprecated since 11.5: use {@link Registry} associated annotations instead.\n+ **/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acaebc5fb220d0586a97bfe890546a98c7f6ac50"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2NzY5OQ==", "bodyText": "Is the cast needed?", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541367699", "createdAt": "2020-12-11T22:31:39Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-cluster/src/main/java/org/nuxeo/runtime/cluster/ClusterServiceImpl.java", "diffHunk": "@@ -67,7 +66,7 @@ public int getApplicationStartedOrder() {\n \n     @Override\n     public void start(ComponentContext context) {\n-        ClusterNodeDescriptor descr = getDescriptor(XP_CONFIG, UNIQUE_DESCRIPTOR_ID);\n+        ClusterNodeDescriptor descr = (ClusterNodeDescriptor) getRegistryContribution(XP_CONFIG).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7408cfdffce48e757a5f04ddb28f08d50a7c100"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM2OTI0NA==", "bodyText": "Cast needed?", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541369244", "createdAt": "2020-12-11T22:33:46Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -194,7 +193,11 @@ protected static KeyValueStore getKeyValueStore() {\n     }\n \n     public Collection<MigrationDescriptor> getMigrationDescriptors() {\n-        return getDescriptors(XP_CONFIG);\n+        return getRegistryContributions(XP_CONFIG);\n+    }\n+\n+    protected MigrationDescriptor getMigrationDescriptor(String id) {\n+        return (MigrationDescriptor) getRegistryContribution(XP_CONFIG, id).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0204118e1b9eaf8bc8d4af5a31a0cd4f5c3cdc24"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3MTk4Mg==", "bodyText": "Do you want to keep this comment?", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541371982", "createdAt": "2020-12-11T22:36:51Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/services/config/TestConfigurationService.java", "diffHunk": "@@ -120,6 +120,7 @@ public void testCompatWarn() throws Exception {\n         assertEquals(0, Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING).size());\n \n         List<String> caughtEvents = logCaptureResult.getCaughtEventMessages();\n+        // FIXME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de211459d8d4bd652d52ab911f93c171e155adf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3MzI2Mg==", "bodyText": "This seems weird. Isn't this simpler?\ndesc.map(value -> value.getValue()).filter(StringUtils::isNotBlank);", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541373262", "createdAt": "2020-12-11T22:38:23Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceImpl.java", "diffHunk": "@@ -191,9 +148,8 @@ protected static boolean startsWithNamespace(String string, String namespace) {\n      */\n     @Override\n     public Optional<String> getString(String key) {\n-        return Optional.ofNullable(getDescriptors().get(key))\n-                       .map(ConfigurationPropertyDescriptor::getValue)\n-                       .filter(StringUtils::isNotBlank);\n+        Optional<ConfigurationPropertyDescriptor> desc = getRegistryContribution(CONFIGURATION_EP, key);\n+        return Optional.ofNullable(desc.map((value) -> value.getValue()).filter(StringUtils::isNotBlank).orElse(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de211459d8d4bd652d52ab911f93c171e155adf"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3NzM1MA==", "bodyText": "@since 11.5", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541377350", "createdAt": "2020-12-11T22:43:07Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.services.config;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Custom registry to accomodate for {@link ConfigurationPropertyDescriptor} merge logics.\n+ *\n+ * @since TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de211459d8d4bd652d52ab911f93c171e155adf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM3OTYxOQ==", "bodyText": "To follow other usage I would have named these SINGLE_XP etc.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r541379619", "createdAt": "2020-12-11T22:45:41Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/registry/SampleComponent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime.registry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.common.xmap.registry.SingleRegistry;\n+import org.nuxeo.runtime.model.ComponentInstance;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class SampleComponent extends DefaultComponent {\n+\n+    public static final String SINGLE_POINT = \"single\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de211459d8d4bd652d52ab911f93c171e155adf"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5de211459d8d4bd652d52ab911f93c171e155adf", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5de211459d8d4bd652d52ab911f93c171e155adf", "committedDate": "2020-12-11T18:17:43Z", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry"}, "afterCommit": {"oid": "4f6e67739894b056390d0495d221e022f3997fd0", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4f6e67739894b056390d0495d221e022f3997fd0", "committedDate": "2020-12-14T12:56:00Z", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMzQzMzIx", "url": "https://github.com/nuxeo/nuxeo/pull/4539#pullrequestreview-551343321", "createdAt": "2020-12-14T13:02:34Z", "commit": {"oid": "4f6e67739894b056390d0495d221e022f3997fd0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzowMjozNVrOIFPYeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzowMjozNVrOIFPYeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM2NTgxNw==", "bodyText": "Note i made the \"initialize\" method public on registry, and explicitly called on component start, so that these deprecation logs can be shown at framework startup", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r542365817", "createdAt": "2020-12-14T13:02:35Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/services/config/ConfigurationServiceRegistry.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime.services.config;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedMember;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.MapRegistry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.logging.DeprecationLogger;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Custom registry to accomodate for {@link ConfigurationPropertyDescriptor} merge logic.\n+ *\n+ * @since 11.5\n+ */\n+public class ConfigurationServiceRegistry extends MapRegistry {\n+\n+    @Override\n+    protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n+        String id = (String) xObject.getRegistryId().getValue(ctx, element);\n+        XAnnotatedMember remove = xObject.getRemove();\n+        if (remove != null && Boolean.TRUE.equals(remove.getValue(ctx, element))) {\n+            contributions.remove(id);\n+            return;\n+        }\n+        ConfigurationPropertyDescriptor contrib = (ConfigurationPropertyDescriptor) xObject.newInstance(ctx, element);\n+        if (Framework.getProperties().containsKey(id)) {\n+            String message = \"Property '\" + id + \"' should now be contributed to extension \"\n+                    + \"point 'org.nuxeo.runtime.ConfigurationService', using target 'configuration'\";\n+            DeprecationLogger.log(message, \"7.4\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f6e67739894b056390d0495d221e022f3997fd0"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f6e67739894b056390d0495d221e022f3997fd0", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4f6e67739894b056390d0495d221e022f3997fd0", "committedDate": "2020-12-14T12:56:00Z", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry"}, "afterCommit": {"oid": "c3f70a5677ef8ebb5c017685e0980ef8cb98c3d7", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c3f70a5677ef8ebb5c017685e0980ef8cb98c3d7", "committedDate": "2020-12-14T13:39:46Z", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3f70a5677ef8ebb5c017685e0980ef8cb98c3d7", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c3f70a5677ef8ebb5c017685e0980ef8cb98c3d7", "committedDate": "2020-12-14T13:39:46Z", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry"}, "afterCommit": {"oid": "b94569e2b5d3b483e17a890e134a26618fdcaa7f", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b94569e2b5d3b483e17a890e134a26618fdcaa7f", "committedDate": "2020-12-14T14:30:04Z", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b94569e2b5d3b483e17a890e134a26618fdcaa7f", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b94569e2b5d3b483e17a890e134a26618fdcaa7f", "committedDate": "2020-12-14T14:30:04Z", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry"}, "afterCommit": {"oid": "f0b8148b62299c1eadeff4281b79d3e9d1f02a70", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f0b8148b62299c1eadeff4281b79d3e9d1f02a70", "committedDate": "2020-12-15T08:09:56Z", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0b8148b62299c1eadeff4281b79d3e9d1f02a70", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f0b8148b62299c1eadeff4281b79d3e9d1f02a70", "committedDate": "2020-12-15T08:09:56Z", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry"}, "afterCommit": {"oid": "796e1be065bb5177fd4e711e23ffdeb244b983c7", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/796e1be065bb5177fd4e711e23ffdeb244b983c7", "committedDate": "2020-12-15T09:30:52Z", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "796e1be065bb5177fd4e711e23ffdeb244b983c7", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/796e1be065bb5177fd4e711e23ffdeb244b983c7", "committedDate": "2020-12-15T09:30:52Z", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry"}, "afterCommit": {"oid": "aca71a3c17de636376617cd00f0407b1cbed5a41", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/aca71a3c17de636376617cd00f0407b1cbed5a41", "committedDate": "2020-12-15T09:31:06Z", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aca71a3c17de636376617cd00f0407b1cbed5a41", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/aca71a3c17de636376617cd00f0407b1cbed5a41", "committedDate": "2020-12-15T09:31:06Z", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry"}, "afterCommit": {"oid": "c2256c24b69bb3aaf0e6dbc11c8e62bc137920fa", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c2256c24b69bb3aaf0e6dbc11c8e62bc137920fa", "committedDate": "2020-12-15T13:17:27Z", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2256c24b69bb3aaf0e6dbc11c8e62bc137920fa", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c2256c24b69bb3aaf0e6dbc11c8e62bc137920fa", "committedDate": "2020-12-15T13:17:27Z", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry"}, "afterCommit": {"oid": "8f532bd6646f41966bae0285af888a10cea80160", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8f532bd6646f41966bae0285af888a10cea80160", "committedDate": "2020-12-15T16:22:12Z", "message": "NXP-29580: cleanup/format"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f532bd6646f41966bae0285af888a10cea80160", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8f532bd6646f41966bae0285af888a10cea80160", "committedDate": "2020-12-15T16:22:12Z", "message": "NXP-29580: cleanup/format"}, "afterCommit": {"oid": "f733cf5f987a183a732a9f73f41986ab75de9059", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f733cf5f987a183a732a9f73f41986ab75de9059", "committedDate": "2020-12-15T17:17:51Z", "message": "NXP-29580: migrate core-io descriptors to use runtime annotation registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f733cf5f987a183a732a9f73f41986ab75de9059", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f733cf5f987a183a732a9f73f41986ab75de9059", "committedDate": "2020-12-15T17:17:51Z", "message": "NXP-29580: migrate core-io descriptors to use runtime annotation registry"}, "afterCommit": {"oid": "c902a619464c40b9ebaf46e176844d85bee8aa30", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c902a619464c40b9ebaf46e176844d85bee8aa30", "committedDate": "2020-12-16T09:15:46Z", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c902a619464c40b9ebaf46e176844d85bee8aa30", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c902a619464c40b9ebaf46e176844d85bee8aa30", "committedDate": "2020-12-16T09:15:46Z", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry"}, "afterCommit": {"oid": "a3bb25104c04e9293e42861ad54eda732adb0bd2", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a3bb25104c04e9293e42861ad54eda732adb0bd2", "committedDate": "2020-12-16T10:36:29Z", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3bb25104c04e9293e42861ad54eda732adb0bd2", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a3bb25104c04e9293e42861ad54eda732adb0bd2", "committedDate": "2020-12-16T10:36:29Z", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry"}, "afterCommit": {"oid": "a5305bef245b357f5d19acc3ed6fb3e0944cbae7", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a5305bef245b357f5d19acc3ed6fb3e0944cbae7", "committedDate": "2020-12-17T08:32:34Z", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5305bef245b357f5d19acc3ed6fb3e0944cbae7", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a5305bef245b357f5d19acc3ed6fb3e0944cbae7", "committedDate": "2020-12-17T08:32:34Z", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry"}, "afterCommit": {"oid": "e2d8c0404ce13081856d8a561db6380672fecada", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e2d8c0404ce13081856d8a561db6380672fecada", "committedDate": "2020-12-17T14:18:28Z", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/354758bb7b4ae03a10ac8a6ff5d5808cc98a2d33", "committedDate": "2020-12-21T16:47:33Z", "message": "NXP-29580: cleanup tests ouput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8647e7c0a71f94b90e3e4ee2829fc90628d4f2e4", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8647e7c0a71f94b90e3e4ee2829fc90628d4f2e4", "committedDate": "2020-12-21T16:47:33Z", "message": "NXP-29580: fix context sharing in xmap unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b81f4f2b875054d22132d29a30678314089fc4", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/24b81f4f2b875054d22132d29a30678314089fc4", "committedDate": "2020-12-21T16:47:34Z", "message": "NXP-29580: add fallback path and default value on xmap node annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91a07c6729d414c1cc81d85545e988189ea3ba4b", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/91a07c6729d414c1cc81d85545e988189ea3ba4b", "committedDate": "2020-12-21T16:47:34Z", "message": "NXP-29580: rename runtime test for clarity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "158456eab21ef0b3159a0795c604c4bc8c5099dd", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/158456eab21ef0b3159a0795c604c4bc8c5099dd", "committedDate": "2020-12-21T16:13:59Z", "message": "NXP-29580: simplify error management on XAnnotatedObject#newInstance"}, "afterCommit": {"oid": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "committedDate": "2020-12-21T16:47:44Z", "message": "NXP-29580: simplify error management on XAnnotatedObject#newInstance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NDk3NjY3", "url": "https://github.com/nuxeo/nuxeo/pull/4539#pullrequestreview-556497667", "createdAt": "2020-12-21T16:18:00Z", "commit": {"oid": "d5b5766451c5f595c3e505b037bf672cb070536b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjoxODowMVrOIJd3dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzowMDoxOFrOIJfQkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NzQzMQ==", "bodyText": "Here you don't need to synchronize, it's the responsibility of the setInitialized method to set the value correctly.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546797431", "createdAt": "2020-12-21T16:18:01Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -66,7 +70,9 @@ protected void checkInitialized() {\n     @Override\n     public void initialize() {\n         registrations.forEach(this::register);\n-        setInitialized(true);\n+        synchronized (this) {\n+            setInitialized(true);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b5766451c5f595c3e505b037bf672cb070536b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5OTA4MA==", "bodyText": "This method must now be:\n    if (!initialized) {\n        synchronized(this) {\n            if (!initialized) {\n                initialize();\n                initialized = true;\n            }\n        }\n    }\n\nBut actually I don't get the use case for this method. Isn't the runtime already guaranteeing that initialize() will have been called for all registries?", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546799080", "createdAt": "2020-12-21T16:21:06Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -49,11 +49,15 @@ public boolean isNull() {\n     }\n \n     protected boolean isInitialized() {\n-        return initialized;\n+        synchronized (this) {\n+            return initialized;\n+        }\n     }\n \n     protected void setInitialized(boolean initialized) {\n-        this.initialized = initialized;\n+        synchronized (this) {\n+            this.initialized = initialized;\n+        }\n     }\n \n     protected void checkInitialized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b5766451c5f595c3e505b037bf672cb070536b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwMDQwNw==", "bodyText": "Add a comment // volatile for double-checked locking", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546800407", "createdAt": "2020-12-21T16:23:37Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/AbstractRegistry.java", "diffHunk": "@@ -34,11 +34,11 @@\n  */\n public abstract class AbstractRegistry implements Registry {\n \n-    protected boolean initialized;\n+    protected volatile boolean initialized;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b5766451c5f595c3e505b037bf672cb070536b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyMDAyOA==", "bodyText": "As you've made enabled a volatile field and it's a direct cheap assignment, there's no need for synchronization.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546820028", "createdAt": "2020-12-21T16:59:54Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java", "diffHunk": "@@ -69,7 +69,9 @@ public void register(Context ctx, XAnnotatedObject xObject, Element element) {\n         if (enable != null) {\n             Object enabled = enable.getValue(ctx, element);\n             if (enabled != null) {\n-                this.enabled = Boolean.TRUE.equals(enabled);\n+                synchronized (this) {\n+                    this.enabled = Boolean.TRUE.equals(enabled);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b18f023dfcd8dfda7e7d0cd42e4f91383f3203"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyMDI0MQ==", "bodyText": "contribution must be volatile too, as it's read by getContribution() which is potentially called from different threads.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r546820241", "createdAt": "2020-12-21T17:00:18Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/SingleRegistry.java", "diffHunk": "@@ -34,7 +34,7 @@\n \n     protected Object contribution;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b18f023dfcd8dfda7e7d0cd42e4f91383f3203"}, "originalPosition": 2}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a9bc54fe1b9e246ddef6cdeeb16a30e10e7d9f6e", "committedDate": "2020-12-21T16:47:44Z", "message": "NXP-29580: simplify error management on XAnnotatedObject#newInstance"}, "afterCommit": {"oid": "6377de286757bd0a8ba9e1d9ec142e4c86341a7c", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6377de286757bd0a8ba9e1d9ec142e4c86341a7c", "committedDate": "2020-12-22T08:15:29Z", "message": "NXP-29580: simplify error management on XAnnotatedObject#newInstance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTk4MTA4", "url": "https://github.com/nuxeo/nuxeo/pull/4539#pullrequestreview-556998108", "createdAt": "2020-12-22T11:05:04Z", "commit": {"oid": "6ff5f64bb010e2175cf017cd274f0785d4fdf8fb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTowNTowNFrOIJ3TvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTowNTowNFrOIJ3TvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxNDI2OQ==", "bodyText": "Ah good point, the concurrent maps disallow null keys...", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547214269", "createdAt": "2020-12-22T11:05:04Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-common/src/main/java/org/nuxeo/common/xmap/registry/MapRegistry.java", "diffHunk": "@@ -81,6 +82,10 @@ public void initialize() {\n     @Override\n     protected void register(Context ctx, XAnnotatedObject xObject, Element element) {\n         String id = (String) xObject.getRegistryId().getValue(ctx, element);\n+        if (id == null) {\n+            // prevent NPE on map key\n+            id = \"null\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff5f64bb010e2175cf017cd274f0785d4fdf8fb"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2OTk4MTgw", "url": "https://github.com/nuxeo/nuxeo/pull/4539#pullrequestreview-556998180", "createdAt": "2020-12-22T11:05:15Z", "commit": {"oid": "6377de286757bd0a8ba9e1d9ec142e4c86341a7c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6377de286757bd0a8ba9e1d9ec142e4c86341a7c", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6377de286757bd0a8ba9e1d9ec142e4c86341a7c", "committedDate": "2020-12-22T08:15:29Z", "message": "NXP-29580: simplify error management on XAnnotatedObject#newInstance"}, "afterCommit": {"oid": "9d925c5df766abe063631a2bd662c2bc5abdeb23", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9d925c5df766abe063631a2bd662c2bc5abdeb23", "committedDate": "2020-12-22T13:56:45Z", "message": "NXP-29580: simplify error management on XAnnotatedObject#newInstance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MDkzMDI1", "url": "https://github.com/nuxeo/nuxeo/pull/4539#pullrequestreview-557093025", "createdAt": "2020-12-22T13:51:54Z", "commit": {"oid": "2a45b69a14519440e8bb0fb2c0bbbbfbce79accd"}, "state": "DISMISSED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1MTo1NFrOIJ729A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNTo1NjozMFrOIKACDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI4ODgyMA==", "bodyText": "Could be:\n        if (stored.isPresent()) {", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547288820", "createdAt": "2020-12-22T13:51:54Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +473,131 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        if (registry.isNull()) {\n+                            // backward compatibility\n+                            if (xt.getContributions() == null) {\n+                                xt.setContributions(xp.getXMap().loadAll(xctx, xt.getElement()));\n+                            }\n+                        } else {\n+                            // fill registry\n+                            xp.getXMap().register(registry, xctx, xt.getElement(), xt.getId());\n+                        }\n+                    }\n+                } catch (XMapException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(e.getMessage() + \" while processing component: \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    protected void unregister(RegistrationInfo ri, Extension xt) {\n+        if (ri.useFormerLifecycleManagement()) {\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    Optional<Registry> registry = getExtensionPointRegistry(ri.getName().getName(), xp.getName());\n+                    if (registry.isPresent() && !registry.get().isNull()) {\n+                        try {\n+                            xp.getXMap().unregister(registry.get(), xt.getId());\n+                        } catch (XMapException e) {\n+                            log.error(e.getMessage() + \" while unprocessing component: \"\n+                                    + xt.getComponent().getName().getName(), e);\n+                        }\n+                    }\n+                } catch (RuntimeException e) {\n+                    ComponentName compName = xt.getComponent().getName();\n+                    handleError(\"Failed to unregister contributions for component \" + compName, compName.getName(), e);\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Registry> Optional<T> getExtensionPointRegistry(String component, String point) {\n+        Map<String, Registry> target = registries.get(component);\n+        if (target != null && target.containsKey(point)) {\n+            Registry registry = target.get(point);\n+            if (!registry.isNull()) {\n+                return Optional.of((T) registry);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Registry getOrCreateRegistry(String component, ExtensionPoint xp) {\n+        Optional<Registry> stored = getExtensionPointRegistry(component, xp.getName());\n+        if (!stored.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a45b69a14519440e8bb0fb2c0bbbbfbce79accd"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5NDIzNA==", "bodyText": "Blank line.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547294234", "createdAt": "2020-12-22T14:02:09Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyContributionWithRegistry.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import org.nuxeo.common.xmap.annotation.XNode;\n+import org.nuxeo.common.xmap.annotation.XObject;\n+import org.nuxeo.common.xmap.registry.XRegistry;\n+import org.nuxeo.common.xmap.registry.XRegistryId;\n+\n+/**\n+ * @since 11.5\n+ */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9af95e0f47f299e229bac9b2e8149ee211519bf0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwNzIxMw==", "bodyText": "Do you want to throw an exception if it is not present? Because this code won't, it will just instantiate the RuntimeException.", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547307213", "createdAt": "2020-12-22T14:26:56Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/DummyRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.Optional;\n+\n+import org.nuxeo.common.xmap.Context;\n+import org.nuxeo.common.xmap.XAnnotatedObject;\n+import org.nuxeo.common.xmap.registry.AbstractRegistry;\n+import org.nuxeo.common.xmap.registry.Registry;\n+import org.nuxeo.runtime.api.Framework;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class DummyRegistry extends AbstractRegistry {\n+\n+    public Optional<Registry> getTargetRegistry() {\n+        return Framework.getRuntime()\n+                        .getComponentManager()\n+                        .getExtensionPointRegistry(ComponentWithXPoint.NAME.getName(), ComponentWithXPoint.XP);\n+    }\n+\n+    @Override\n+    public void register(Context ctx, XAnnotatedObject xObject, Element element, String tag) {\n+        getTargetRegistry().ifPresentOrElse(reg -> {\n+            reg.register(ctx, xObject, element, tag);\n+        }, () -> new RuntimeException());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9af95e0f47f299e229bac9b2e8149ee211519bf0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MDE1OQ==", "bodyText": "It could be:\n        return this.<SerializerDescriptor> getRegistryContribution(EXTENSION_POINT_NAME, id)\n                   .or(() -> getRegistryContribution(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME))\n                   .map(SerializerDescriptor::newInstance)\n                   .orElseThrow(() -> new NuxeoException(\"UnknownSerializer named \" + id));", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547350159", "createdAt": "2020-12-22T15:43:53Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-template-rendering/nuxeo-template-rendering-core/src/main/java/org/nuxeo/template/serializer/service/TemplateSerializerServiceImpl.java", "diffHunk": "@@ -41,16 +43,14 @@\n \n     @Override\n     public TemplateSerializer getSerializer(String id) {\n-        SerializerDescriptor contrib = getDescriptor(EXTENSION_POINT_NAME, id);\n-\n-        if (contrib == null) {\n-            contrib = getDescriptor(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME);\n-            if (contrib == null) {\n+        Optional<SerializerDescriptor> optContrib = getRegistryContribution(EXTENSION_POINT_NAME, id);\n+        if (optContrib.isEmpty()) {\n+            optContrib = getRegistryContribution(EXTENSION_POINT_NAME, DEFAULT_SERIALIZER_NAME);\n+            if (optContrib.isEmpty()) {\n                 throw new NuxeoException(\"UnknownSerializer named \" + id);\n             }\n         }\n-\n-        return contrib.newInstance();\n+        return optContrib.get().newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f762351315410c7abaf1653356e4a3c61f0ff5f0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1MjIzNw==", "bodyText": "Could be:\nthis.<TransientStoreConfig>getRegistryContributions(EP_STORE).forEach(desc -> getStore(desc.getId()));", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547352237", "createdAt": "2020-12-22T15:47:36Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-cache/src/main/java/org/nuxeo/ecm/core/transientstore/TransientStorageComponent.java", "diffHunk": "@@ -81,41 +85,30 @@ public synchronized TransientStore getStore(String name) {\n     }\n \n     protected TransientStoreConfig getDefaultDescriptor() {\n-        TransientStoreConfig descriptor = getDescriptor(EP_STORE, DEFAULT_STORE_NAME);\n-        if (descriptor == null) {\n+        Optional<TransientStoreConfig> descriptor = getRegistryContribution(EP_STORE, DEFAULT_STORE_NAME);\n+        if (descriptor.isEmpty()) {\n             // TODO make this a hard error\n             String message = \"Missing configuration for default transient store, using in-memory\";\n             log.warn(message);\n             addRuntimeMessage(Level.WARNING, message);\n             // use in-memory store\n-            descriptor = new TransientStoreConfig(DEFAULT_STORE_NAME);\n+            return new TransientStoreConfig(DEFAULT_STORE_NAME);\n         }\n-        return descriptor;\n+        return descriptor.get();\n     }\n \n     @Override\n     public void doGC() {\n         stores.values().forEach(TransientStoreProvider::doGC);\n     }\n \n-    @Override\n-    protected boolean unregister(String xp, Descriptor descriptor) {\n-        boolean removed = super.unregister(xp, descriptor);\n-        if (removed) {\n-            TransientStoreProvider store = stores.remove(descriptor.getId());\n-            if (store != null) {\n-                store.shutdown();\n-            }\n-        }\n-        return removed;\n-    }\n-\n     @Override\n     public void start(ComponentContext context) {\n         // make sure we have a default store\n         getStore(DEFAULT_STORE_NAME);\n         // instantiate all registered stores\n-        getDescriptors(EP_STORE).forEach(desc -> getStore(desc.getId()));\n+        List<TransientStoreConfig> stores = getRegistryContributions(EP_STORE);\n+        stores.forEach(desc -> getStore(desc.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb366b1efd544f930d6ded353222661cd14907d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM1NzE5Ng==", "bodyText": "It could be:\nthis.<MarshallerRegistry> getExtensionPointRegistry(XP_MARSHALLER).getContributionValues().forEach(m -> {\n            writers.addAll(m.writers);\n            readers.addAll(m.readers);\n        });", "url": "https://github.com/nuxeo/nuxeo/pull/4539#discussion_r547357196", "createdAt": "2020-12-22T15:56:30Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-server/src/main/java/org/nuxeo/ecm/automation/server/AutomationServerComponent.java", "diffHunk": "@@ -55,7 +55,8 @@\n     @Override\n     public void start(ComponentContext context) {\n         super.start(context);\n-        List<MarshallerDescriptor> marshallers = getDescriptors(XP_MARSHALLER);\n+        List<MarshallerDescriptor> marshallers = ((MarshallerRegistry) getExtensionPointRegistry(\n+                XP_MARSHALLER)).getContributionValues();\n         marshallers.forEach(m -> {\n             writers.addAll(m.writers);\n             readers.addAll(m.readers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee127e0ee667a968ded24ab5f0f1905f7e9634e6"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c6746b41ea6d1e97c0ad42ae77b1fb230deefa20", "committedDate": "2020-12-22T17:27:09Z", "message": "NXP-29580: add xmap registry annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/59eafe16e3bcc28cf3e3f3560aaecb8c878c56b9", "committedDate": "2020-12-22T17:27:10Z", "message": "NXP-29580: plug runtime usage of xmap registries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e1d4b751ae1c6a6a524b25c280c781207325c11", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2e1d4b751ae1c6a6a524b25c280c781207325c11", "committedDate": "2020-12-22T17:27:10Z", "message": "NXP-29580: add tag API on registry: avoids dupe registrations and speeds up unregistration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "701fd9b467b4ad744800deec70bd40eb650bfe98", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/701fd9b467b4ad744800deec70bd40eb650bfe98", "committedDate": "2020-12-22T17:27:11Z", "message": "NXP-29580: adapt and test extension point override use case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e675d86e060cff30eb806aae757cd3acc775c2fb", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e675d86e060cff30eb806aae757cd3acc775c2fb", "committedDate": "2020-12-22T17:27:12Z", "message": "NXP-29580: add xmap annotation to combine elements, for some registry id use cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68660d55bbe75dfc6738d40a36ec78282da6ce51", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/68660d55bbe75dfc6738d40a36ec78282da6ce51", "committedDate": "2020-12-22T17:27:12Z", "message": "NXP-29580: deprecate Descriptor mechanism"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c00abda03ed44b14c561624bb91f6c3d6fc22f47", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c00abda03ed44b14c561624bb91f6c3d6fc22f47", "committedDate": "2020-12-22T17:27:12Z", "message": "NXP-29580: add helper methods to retrieve contributions from runtime annotation registries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0760459cbdcc750832049a80538a818d5435b818", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0760459cbdcc750832049a80538a818d5435b818", "committedDate": "2020-12-22T17:27:13Z", "message": "NXP-29580: migrate LoginAsDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b47d3b9ec533bd80826c0921d33f0eb290c63694", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b47d3b9ec533bd80826c0921d33f0eb290c63694", "committedDate": "2020-12-22T17:27:13Z", "message": "NXP-29580: migrate AWSConfigurationDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "292af1b010bebd79c8596c2bddc7b555a0101182", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/292af1b010bebd79c8596c2bddc7b555a0101182", "committedDate": "2020-12-22T17:27:13Z", "message": "NXP-29580: migrate KeyValueStoreDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d3344698fd23c1f1bd570d97195c59b77dd75ba", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1d3344698fd23c1f1bd570d97195c59b77dd75ba", "committedDate": "2020-12-22T17:27:14Z", "message": "NXP-29580: migrate ClusterNodeDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed777499f7a3a4a197ed4431407450730fca25f4", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ed777499f7a3a4a197ed4431407450730fca25f4", "committedDate": "2020-12-22T17:27:14Z", "message": "NXP-29580: migrate MetricsConfigurationDescriptor and MetricsReporterDescriptor  to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "123fd0893355d6279546b187399da6829fa927d6", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/123fd0893355d6279546b187399da6829fa927d6", "committedDate": "2020-12-22T17:27:15Z", "message": "NXP-29580: migrate MigrationDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c16e7fbd5568ff2462d89ba5a296dbcbfee4d3b7", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c16e7fbd5568ff2462d89ba5a296dbcbfee4d3b7", "committedDate": "2020-12-22T17:27:15Z", "message": "NXP-29580: migrate CodecDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7daa64dd04179cae827a5604fc466040a8a4a8a4", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7daa64dd04179cae827a5604fc466040a8a4a8a4", "committedDate": "2020-12-22T17:27:16Z", "message": "NXP-29580: migrate MongoDBConnectionConfig to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3359625444fceff4ffd313e846a2bc44185ebf8", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a3359625444fceff4ffd313e846a2bc44185ebf8", "committedDate": "2020-12-22T17:27:16Z", "message": "NXP-29580: migrate BulkActionDescriptor and ScrollDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d8df0c12ee3f174c83ada0fc2670d5ff3101eb5", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8d8df0c12ee3f174c83ada0fc2670d5ff3101eb5", "committedDate": "2020-12-22T17:27:16Z", "message": "NXP-29580: migrate ConfigurationPropertyDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "501e1ce2b47678acc53c323f9c153cb4f384e187", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/501e1ce2b47678acc53c323f9c153cb4f384e187", "committedDate": "2020-12-22T17:27:17Z", "message": "NXP-29580: migrate BatchHandlerDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f06c0ac8eb726f765cd0d55432e0a85fd4c32b7", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3f06c0ac8eb726f765cd0d55432e0a85fd4c32b7", "committedDate": "2020-12-22T17:27:17Z", "message": "NXP-29580: migrate PubSubProviderDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a04f39b01b8abedf0e790ce7075987cca05d707", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6a04f39b01b8abedf0e790ce7075987cca05d707", "committedDate": "2020-12-22T17:27:17Z", "message": "NXP-29580: migrate SerializerDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac0ab2ebc9129b9a82df1a01ac921dd1edeb3a7", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/fac0ab2ebc9129b9a82df1a01ac921dd1edeb3a7", "committedDate": "2020-12-22T17:27:18Z", "message": "NXP-29580: migrate RedisPoolDescriptor and RedisSentinelDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a7f31fa31722cf63d14188c748dd9a1cebe5869", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1a7f31fa31722cf63d14188c748dd9a1cebe5869", "committedDate": "2020-12-22T17:27:18Z", "message": "NXP-29580: migrate TransientStoreConfig to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18382d6adbf1a5b6862cdb31622dab6d8d2b4258", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/18382d6adbf1a5b6862cdb31622dab6d8d2b4258", "committedDate": "2020-12-22T17:27:19Z", "message": "NXP-29580: migrate runtime stream descriptors to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4007398ad5cdaebb5caf4db9d769aa857a9972c", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a4007398ad5cdaebb5caf4db9d769aa857a9972c", "committedDate": "2020-12-22T17:27:19Z", "message": "NXP-29580: migrate OpenIDConnectProviderDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73e7075851faac14507710a884dc1905c0a5deb1", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/73e7075851faac14507710a884dc1905c0a5deb1", "committedDate": "2020-12-22T17:27:20Z", "message": "NXP-29580: migrate ESHintQueryBuilderDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10dd375af8e6810fcafddb9f174deecb45d93bb0", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/10dd375af8e6810fcafddb9f174deecb45d93bb0", "committedDate": "2020-12-22T17:27:20Z", "message": "NXP-29580: cleanup/format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "276844d5bf0833ad1423f196d80ecd5f36303a3c", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/276844d5bf0833ad1423f196d80ecd5f36303a3c", "committedDate": "2020-12-22T17:27:20Z", "message": "NXP-29580: migrate core-io descriptors to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cba2ce39942f3cb8a5539bf28f3eea37a21985fd", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cba2ce39942f3cb8a5539bf28f3eea37a21985fd", "committedDate": "2020-12-22T17:27:21Z", "message": "NXP-29580: migrate automation RestBinding and MarshallerDescriptor to use runtime annotation registry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44f80d67ebcfea5a692b5502bc77f9dad10eab56", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/44f80d67ebcfea5a692b5502bc77f9dad10eab56", "committedDate": "2020-12-22T17:27:21Z", "message": "NXP-29580: review multi-threading on registries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d925c5df766abe063631a2bd662c2bc5abdeb23", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9d925c5df766abe063631a2bd662c2bc5abdeb23", "committedDate": "2020-12-22T13:56:45Z", "message": "NXP-29580: simplify error management on XAnnotatedObject#newInstance"}, "afterCommit": {"oid": "44f80d67ebcfea5a692b5502bc77f9dad10eab56", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/44f80d67ebcfea5a692b5502bc77f9dad10eab56", "committedDate": "2020-12-22T17:27:21Z", "message": "NXP-29580: review multi-threading on registries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MjQ4MjQx", "url": "https://github.com/nuxeo/nuxeo/pull/4539#pullrequestreview-557248241", "createdAt": "2020-12-22T17:35:21Z", "commit": {"oid": "44f80d67ebcfea5a692b5502bc77f9dad10eab56"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MzA4ODQ4", "url": "https://github.com/nuxeo/nuxeo/pull/4539#pullrequestreview-557308848", "createdAt": "2020-12-22T19:16:48Z", "commit": {"oid": "44f80d67ebcfea5a692b5502bc77f9dad10eab56"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4914, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}