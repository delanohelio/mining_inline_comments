{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDQ2MTY0", "number": 3908, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo1ODozNFrODxqInA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo1MjowOFrOD2nfBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzk3MTQ4OnYy", "diffSide": "RIGHT", "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/ITLoginLogoutTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo1ODozNFrOGFP-Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoyNzo1NFrOGIR-Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1Nzc3NQ==", "bodyText": "We have stopped testing login page for package tests if this is the only test, we rely on server start errors. Not sure if we want to introduce this one.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408157775", "createdAt": "2020-04-14T13:58:34Z", "author": {"login": "kevinleturc"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/ITLoginLogoutTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (C) Copyright 2014 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ */\n+package org.nuxeo.functionaltests;\n+\n+import static org.nuxeo.functionaltests.Constants.ADMINISTRATOR;\n+\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+\n+/**\n+ * Simple login, logout test.\n+ */\n+public class ITLoginLogoutTest extends AbstractTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MTg0MA==", "bodyText": "more are actually coming (currently working on these tests), and this one ensures that at least the explorer \"home\" page does not crash", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408271840", "createdAt": "2020-04-14T16:28:00Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/ITLoginLogoutTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (C) Copyright 2014 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ */\n+package org.nuxeo.functionaltests;\n+\n+import static org.nuxeo.functionaltests.Constants.ADMINISTRATOR;\n+\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+\n+/**\n+ * Simple login, logout test.\n+ */\n+public class ITLoginLogoutTest extends AbstractTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1Nzc3NQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzNjI2Mg==", "bodyText": "i renamed the test class so that this basic test (which is useful imho) is run in the same class than others, sharing the same browser session", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r411336262", "createdAt": "2020-04-20T12:27:54Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/ITLoginLogoutTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (C) Copyright 2014 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ */\n+package org.nuxeo.functionaltests;\n+\n+import static org.nuxeo.functionaltests.Constants.ADMINISTRATOR;\n+\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+\n+/**\n+ * Simple login, logout test.\n+ */\n+public class ITLoginLogoutTest extends AbstractTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1Nzc3NQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzk3ODY2OnYy", "diffSide": "RIGHT", "path": "ftests/nuxeo-platform-explorer-ftests/src/test/resources/log4j.xml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo1OTo1NlrOGFQCuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTowNTowNlrOGJrtuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1ODkwNQ==", "bodyText": "We now use log4j2, see the one for webdriver tests: https://github.com/nuxeo/nuxeo-jsf-ui/blob/master/ftests/nuxeo-jsf-ui-webdriver-tests/src/test/resources/log4j2-test.xml", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408158905", "createdAt": "2020-04-14T13:59:56Z", "author": {"login": "kevinleturc"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/resources/log4j.xml", "diffHunk": "@@ -0,0 +1,277 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Log4j Configuration - For more configuration information and examples see\n+  the Jakarta Log4j - website: http://jakarta.apache.org/log4j\n+\n+  Duplicated from nuxeo-distribution-tomcat/src/main/resources/common/lib/log4j.xml\n+-->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MjY2OQ==", "bodyText": "ah! i actually copy/pasted other setups... see https://github.com/nuxeo/nuxeo/blob/master/ftests/nuxeo-jsf-to-web-ui-ftests/src/test/resources/log4j.xml for instance.\nbut i'll fix this one", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408272669", "createdAt": "2020-04-14T16:29:09Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/resources/log4j.xml", "diffHunk": "@@ -0,0 +1,277 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Log4j Configuration - For more configuration information and examples see\n+  the Jakarta Log4j - website: http://jakarta.apache.org/log4j\n+\n+  Duplicated from nuxeo-distribution-tomcat/src/main/resources/common/lib/log4j.xml\n+-->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1ODkwNQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NzE0Ng==", "bodyText": "I created NXP-28932.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408787146", "createdAt": "2020-04-15T11:58:46Z", "author": {"login": "kevinleturc"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/resources/log4j.xml", "diffHunk": "@@ -0,0 +1,277 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Log4j Configuration - For more configuration information and examples see\n+  the Jakarta Log4j - website: http://jakarta.apache.org/log4j\n+\n+  Duplicated from nuxeo-distribution-tomcat/src/main/resources/common/lib/log4j.xml\n+-->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1ODkwNQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MzQyNA==", "bodyText": "i cannot actually rename it cleanly without fixing every package because the file is mentioned in the ftests pom.xml, so i left it as is so that it's handled with NXP-28932. I hope it's ok!", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r410343424", "createdAt": "2020-04-17T16:44:24Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/resources/log4j.xml", "diffHunk": "@@ -0,0 +1,277 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Log4j Configuration - For more configuration information and examples see\n+  the Jakarta Log4j - website: http://jakarta.apache.org/log4j\n+\n+  Duplicated from nuxeo-distribution-tomcat/src/main/resources/common/lib/log4j.xml\n+-->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1ODkwNQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwNjU4Nw==", "bodyText": "(done)", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412806587", "createdAt": "2020-04-22T09:05:06Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/resources/log4j.xml", "diffHunk": "@@ -0,0 +1,277 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Log4j Configuration - For more configuration information and examples see\n+  the Jakarta Log4j - website: http://jakarta.apache.org/log4j\n+\n+  Duplicated from nuxeo-distribution-tomcat/src/main/resources/common/lib/log4j.xml\n+-->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1ODkwNQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzk4ODI0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/ReadMe.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDowMjowNVrOGFQI4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0NDo1MFrOGHVY5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2MDQ4MQ==", "bodyText": "Should we move the documentation line to jsf repository?", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408160481", "createdAt": "2020-04-14T14:02:05Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/ReadMe.md", "diffHunk": "@@ -29,11 +29,15 @@ In addition a DocumentationService is provided to be able to :\n ## Parameters\n  - `org.nuxeo.apidoc.site.mode`: Enable the site mode with a more user friendly design\n  - `org.nuxeo.apidoc.hide.current.distribution`: Hide current distribution from the distribution listing\n- - `org.nuxeo.apidoc.hide.seam.components`: Hide Seam components introspection\n+ - `org.nuxeo.apidoc.hide.seam.components`: Hide Seam components introspection (moved to nuxeo-apidoc-jsf since 11.1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MzA0NQ==", "bodyText": "i added another readme in the JSF repository, i can cleanup this README but it seemed useful for compat/upgrade (?)", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408273045", "createdAt": "2020-04-14T16:29:41Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/ReadMe.md", "diffHunk": "@@ -29,11 +29,15 @@ In addition a DocumentationService is provided to be able to :\n ## Parameters\n  - `org.nuxeo.apidoc.site.mode`: Enable the site mode with a more user friendly design\n  - `org.nuxeo.apidoc.hide.current.distribution`: Hide current distribution from the distribution listing\n- - `org.nuxeo.apidoc.hide.seam.components`: Hide Seam components introspection\n+ - `org.nuxeo.apidoc.hide.seam.components`: Hide Seam components introspection (moved to nuxeo-apidoc-jsf since 11.1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2MDQ4MQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0MzY1NA==", "bodyText": "kept the line here too since it does not cause any harm i guess", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r410343654", "createdAt": "2020-04-17T16:44:50Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/ReadMe.md", "diffHunk": "@@ -29,11 +29,15 @@ In addition a DocumentationService is provided to be able to :\n ## Parameters\n  - `org.nuxeo.apidoc.site.mode`: Enable the site mode with a more user friendly design\n  - `org.nuxeo.apidoc.hide.current.distribution`: Hide current distribution from the distribution listing\n- - `org.nuxeo.apidoc.hide.seam.components`: Hide Seam components introspection\n+ - `org.nuxeo.apidoc.hide.seam.components`: Hide Seam components introspection (moved to nuxeo-apidoc-jsf since 11.1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2MDQ4MQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDAxNTI2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDowNzoyM1rOGFQZcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozMTozOFrOGISHhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NDcyMg==", "bodyText": "Won't it be a problem to change the constructor for previous persisted data?", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408164722", "createdAt": "2020-04-14T14:07:23Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -94,26 +95,29 @@\n \n     protected final List<Class<?>> spi = new ArrayList<>();\n \n+    protected boolean pluginSnapshotsInitialized = false;\n+\n+    protected final Map<String, PluginSnapshot<?>> pluginSnapshots = new HashMap<>();\n+\n     public static RuntimeSnapshot build() {\n         return new RuntimeSnapshot();\n     }\n \n     @JsonCreator\n     private RuntimeSnapshot(@JsonProperty(\"serverInfo\") ServerInfo serverInfo,\n-            @JsonProperty(\"creationDate\") Date created,\n-            @JsonProperty(\"seamComponents\") List<SeamComponentInfo> seamComponents,\n-            @JsonProperty(\"operations\") List<OperationInfo> operations) {\n+            @JsonProperty(\"creationDate\") Date created, @JsonProperty(\"operations\") List<OperationInfo> operations,\n+            @JsonProperty(\"pluginSnapshots\") Map<String, PluginSnapshot<?>> pluginSnapshots) {\n         this.serverInfo = serverInfo;\n         this.created = created;\n         index();\n-        this.seamComponents.addAll(seamComponents);\n         this.operations.addAll(operations);\n+        opsInitialized = true;\n+        this.pluginSnapshots.putAll(pluginSnapshots);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3NDIzMA==", "bodyText": "actually the json export is completely buggy and was never exposed publicly, only in tests... i'm working on exposing it, so i will fix it (without compatibility with previous format, then) -- more commits coming about this in the same PR (as i realized the problem when adding more unit tests)", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408274230", "createdAt": "2020-04-14T16:31:26Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -94,26 +95,29 @@\n \n     protected final List<Class<?>> spi = new ArrayList<>();\n \n+    protected boolean pluginSnapshotsInitialized = false;\n+\n+    protected final Map<String, PluginSnapshot<?>> pluginSnapshots = new HashMap<>();\n+\n     public static RuntimeSnapshot build() {\n         return new RuntimeSnapshot();\n     }\n \n     @JsonCreator\n     private RuntimeSnapshot(@JsonProperty(\"serverInfo\") ServerInfo serverInfo,\n-            @JsonProperty(\"creationDate\") Date created,\n-            @JsonProperty(\"seamComponents\") List<SeamComponentInfo> seamComponents,\n-            @JsonProperty(\"operations\") List<OperationInfo> operations) {\n+            @JsonProperty(\"creationDate\") Date created, @JsonProperty(\"operations\") List<OperationInfo> operations,\n+            @JsonProperty(\"pluginSnapshots\") Map<String, PluginSnapshot<?>> pluginSnapshots) {\n         this.serverInfo = serverInfo;\n         this.created = created;\n         index();\n-        this.seamComponents.addAll(seamComponents);\n         this.operations.addAll(operations);\n+        opsInitialized = true;\n+        this.pluginSnapshots.putAll(pluginSnapshots);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NDcyMg=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODYzMA==", "bodyText": "note i modified to the parser so that it's resilient to \"unknown\" fields at read time, and i will attach an old json serialization for history in the jira issue", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r411338630", "createdAt": "2020-04-20T12:31:38Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -94,26 +95,29 @@\n \n     protected final List<Class<?>> spi = new ArrayList<>();\n \n+    protected boolean pluginSnapshotsInitialized = false;\n+\n+    protected final Map<String, PluginSnapshot<?>> pluginSnapshots = new HashMap<>();\n+\n     public static RuntimeSnapshot build() {\n         return new RuntimeSnapshot();\n     }\n \n     @JsonCreator\n     private RuntimeSnapshot(@JsonProperty(\"serverInfo\") ServerInfo serverInfo,\n-            @JsonProperty(\"creationDate\") Date created,\n-            @JsonProperty(\"seamComponents\") List<SeamComponentInfo> seamComponents,\n-            @JsonProperty(\"operations\") List<OperationInfo> operations) {\n+            @JsonProperty(\"creationDate\") Date created, @JsonProperty(\"operations\") List<OperationInfo> operations,\n+            @JsonProperty(\"pluginSnapshots\") Map<String, PluginSnapshot<?>> pluginSnapshots) {\n         this.serverInfo = serverInfo;\n         this.created = created;\n         index();\n-        this.seamComponents.addAll(seamComponents);\n         this.operations.addAll(operations);\n+        opsInitialized = true;\n+        this.pluginSnapshots.putAll(pluginSnapshots);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NDcyMg=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDAyODU4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoxMDoxMVrOGFQhqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1NToxM1rOGHVv1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NjgyNQ==", "bodyText": "It should be elsewhere as it doesn't use anything from current object, in a factory class maybe?", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408166825", "createdAt": "2020-04-14T14:10:11Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -611,4 +564,48 @@ public boolean isLatestLTS() {\n     public boolean isHidden() {\n         return false;\n     }\n-}\n+\n+    protected List<Plugin<?>> getPlugins() {\n+        return Framework.getService(SnapshotManager.class).getPlugins();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5NzgxMg==", "bodyText": "it's just a helper method (protected) to retrieve plugins here", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408297812", "createdAt": "2020-04-14T17:07:35Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -611,4 +564,48 @@ public boolean isLatestLTS() {\n     public boolean isHidden() {\n         return false;\n     }\n-}\n+\n+    protected List<Plugin<?>> getPlugins() {\n+        return Framework.getService(SnapshotManager.class).getPlugins();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NjgyNQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0OTUyNw==", "bodyText": "kept it as used in 2 occurences in this class", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r410349527", "createdAt": "2020-04-17T16:55:13Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -611,4 +564,48 @@ public boolean isLatestLTS() {\n     public boolean isHidden() {\n         return false;\n     }\n-}\n+\n+    protected List<Plugin<?>> getPlugins() {\n+        return Framework.getService(SnapshotManager.class).getPlugins();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2NjgyNQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDA1NDgxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoxNTo1NFrOGFQyXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0Njo0NlrOGHVdPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE3MTEwMg==", "bodyText": "This looks like service and not data and doesn't use anything from the current object.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408171102", "createdAt": "2020-04-14T14:15:54Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -611,4 +564,48 @@ public boolean isLatestLTS() {\n     public boolean isHidden() {\n         return false;\n     }\n-}\n+\n+    protected List<Plugin<?>> getPlugins() {\n+        return Framework.getService(SnapshotManager.class).getPlugins();\n+    }\n+\n+    @Override\n+    public ObjectMapper getJsonMapper() {\n+        ObjectMapper mapper = DistributionSnapshot.jsonMapper();\n+        for (Plugin<?> plugin : getPlugins()) {\n+            mapper = plugin.getJsonMapper(mapper);\n+        }\n+        return mapper;\n+    }\n+\n+    @Override\n+    public ObjectWriter getJsonWriter() {\n+        return getJsonMapper().writerFor(DistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .with(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)\n+                              .without(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n+    }\n+\n+    @Override\n+    public ObjectReader getJsonReader() {\n+        return getJsonMapper().readerFor(DistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)\n+                              .with(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5NjY3MQ==", "bodyText": "it's for plugin extending the parent mapper: they need to contribute to the mapper", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408296671", "createdAt": "2020-04-14T17:05:46Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -611,4 +564,48 @@ public boolean isLatestLTS() {\n     public boolean isHidden() {\n         return false;\n     }\n-}\n+\n+    protected List<Plugin<?>> getPlugins() {\n+        return Framework.getService(SnapshotManager.class).getPlugins();\n+    }\n+\n+    @Override\n+    public ObjectMapper getJsonMapper() {\n+        ObjectMapper mapper = DistributionSnapshot.jsonMapper();\n+        for (Plugin<?> plugin : getPlugins()) {\n+            mapper = plugin.getJsonMapper(mapper);\n+        }\n+        return mapper;\n+    }\n+\n+    @Override\n+    public ObjectWriter getJsonWriter() {\n+        return getJsonMapper().writerFor(DistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .with(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)\n+                              .without(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n+    }\n+\n+    @Override\n+    public ObjectReader getJsonReader() {\n+        return getJsonMapper().readerFor(DistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)\n+                              .with(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE3MTEwMg=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0NDc2Ng==", "bodyText": "i changed the reader and writer api so that they do apply to current object, i hope it's better like this", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r410344766", "createdAt": "2020-04-17T16:46:46Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -611,4 +564,48 @@ public boolean isLatestLTS() {\n     public boolean isHidden() {\n         return false;\n     }\n-}\n+\n+    protected List<Plugin<?>> getPlugins() {\n+        return Framework.getService(SnapshotManager.class).getPlugins();\n+    }\n+\n+    @Override\n+    public ObjectMapper getJsonMapper() {\n+        ObjectMapper mapper = DistributionSnapshot.jsonMapper();\n+        for (Plugin<?> plugin : getPlugins()) {\n+            mapper = plugin.getJsonMapper(mapper);\n+        }\n+        return mapper;\n+    }\n+\n+    @Override\n+    public ObjectWriter getJsonWriter() {\n+        return getJsonMapper().writerFor(DistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .with(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)\n+                              .without(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n+    }\n+\n+    @Override\n+    public ObjectReader getJsonReader() {\n+        return getJsonMapper().readerFor(DistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)\n+                              .with(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE3MTEwMg=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDA3NTcwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/plugin/Plugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyMDozMFrOGFRAAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyMDozMFrOGFRAAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE3NDU5NQ==", "bodyText": "I would suggest renaming the method enrichJsonMapper and provide a default implementation which returns the given ObjectMapper like the abstract does.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408174595", "createdAt": "2020-04-14T14:20:30Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/plugin/Plugin.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.plugin;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.nuxeo.apidoc.api.NuxeoArtifact;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Interface for plugins to the {@link SnapshotManager} service, handling specific runtime introspections and their\n+ * persistence.\n+ *\n+ * @since 11.1\n+ */\n+public interface Plugin<T extends NuxeoArtifact> {\n+\n+    /**\n+     * Returns the plugin unique identifier.\n+     */\n+    String getId();\n+\n+    /**\n+     * Returns the plugin label, to be displayed in the UI (if not hidden).\n+     */\n+    String getLabel();\n+\n+    /**\n+     * Returns the plugin webengine type contributed to the main webengine module ((if not hidden).\n+     * <p>\n+     * The corresponding class should be annotated with @WebObject and given type.\n+     * <p>\n+     * It should extend DefaultObject and implement an #initialize method taking the distribution id as first parameter,\n+     * and an optional boolean specifiying if the distribution is embedded as an options second parameter.\n+     */\n+    String getViewType();\n+\n+    /**\n+     * Returns the home view URL for navigation in the UI (if not hidden).\n+     */\n+    String getHomeView();\n+\n+    /**\n+     * Provides navigation mapping, to handle tab selection in the UI.\n+     */\n+    String getView(String url);\n+\n+    /**\n+     * Returns the style class to be used in the UI menu (if not hidden).\n+     */\n+    String getStyleClass();\n+\n+    /**\n+     * Specifies whether the plugin should be displayed in the UI.\n+     */\n+    boolean isHidden();\n+\n+    /**\n+     * Contributes to the parent object mapper, to handle serialization of local introspection.\n+     */\n+    ObjectMapper getJsonMapper(ObjectMapper parent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDEwODM5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyNzoyM1rOGFRU2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzowOToyMlrOGFYluw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE3OTkyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, PluginSnapshot<?>> res = new HashMap<>();\n          \n          \n            \n                    getPlugins().forEach(plugin -> res.put(plugin.getId(), plugin.getRepositorySnapshot(getDoc())));\n          \n          \n            \n                    return res;\n          \n          \n            \n                    return Framework.getService(SnapshotManager.class)\n          \n          \n            \n                                    .getPlugins()\n          \n          \n            \n                                    .stream()\n          \n          \n            \n                                    .collect(Collectors.toMap(Descriptor::getId, p -> p.getRepositorySnapshot(getDoc())));", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408179929", "createdAt": "2020-04-14T14:27:23Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -464,4 +443,41 @@ public boolean isHidden() {\n     public ServerInfo getServerInfo() {\n         throw new UnsupportedOperationException();\n     }\n-}\n+\n+    protected List<Plugin<?>> getPlugins() {\n+        return Framework.getService(SnapshotManager.class).getPlugins();\n+    }\n+\n+    @Override\n+    public ObjectMapper getJsonMapper() {\n+        ObjectMapper mapper = DistributionSnapshot.jsonMapper();\n+        for (Plugin<?> plugin : getPlugins()) {\n+            mapper = plugin.getJsonMapper(mapper);\n+        }\n+        return mapper;\n+    }\n+\n+    @Override\n+    public ObjectWriter getJsonWriter() {\n+        return getJsonMapper().writerFor(RepositoryDistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .with(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)\n+                              .without(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n+    }\n+\n+    @Override\n+    public ObjectReader getJsonReader() {\n+        return getJsonMapper().readerFor(RepositoryDistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)\n+                              .with(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT);\n+    }\n+\n+    @Override\n+    public Map<String, PluginSnapshot<?>> getPluginSnapshots() {\n+        Map<String, PluginSnapshot<?>> res = new HashMap<>();\n+        getPlugins().forEach(plugin -> res.put(plugin.getId(), plugin.getRepositorySnapshot(getDoc())));\n+        return res;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5ODkzOQ==", "bodyText": "ok \ud83d\udc4d  even if i don't really see what it brings (?)", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408298939", "createdAt": "2020-04-14T17:09:22Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -464,4 +443,41 @@ public boolean isHidden() {\n     public ServerInfo getServerInfo() {\n         throw new UnsupportedOperationException();\n     }\n-}\n+\n+    protected List<Plugin<?>> getPlugins() {\n+        return Framework.getService(SnapshotManager.class).getPlugins();\n+    }\n+\n+    @Override\n+    public ObjectMapper getJsonMapper() {\n+        ObjectMapper mapper = DistributionSnapshot.jsonMapper();\n+        for (Plugin<?> plugin : getPlugins()) {\n+            mapper = plugin.getJsonMapper(mapper);\n+        }\n+        return mapper;\n+    }\n+\n+    @Override\n+    public ObjectWriter getJsonWriter() {\n+        return getJsonMapper().writerFor(RepositoryDistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .with(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)\n+                              .without(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n+    }\n+\n+    @Override\n+    public ObjectReader getJsonReader() {\n+        return getJsonMapper().readerFor(RepositoryDistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)\n+                              .with(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT);\n+    }\n+\n+    @Override\n+    public Map<String, PluginSnapshot<?>> getPluginSnapshots() {\n+        Map<String, PluginSnapshot<?>> res = new HashMap<>();\n+        getPlugins().forEach(plugin -> res.put(plugin.getId(), plugin.getRepositorySnapshot(getDoc())));\n+        return res;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE3OTkyOQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDEwOTM0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyNzozM1rOGFRVfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxMDowMFrOGFYnLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MDA5NQ==", "bodyText": "No new line at the end.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408180095", "createdAt": "2020-04-14T14:27:33Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -464,4 +443,41 @@ public boolean isHidden() {\n     public ServerInfo getServerInfo() {\n         throw new UnsupportedOperationException();\n     }\n-}\n+\n+    protected List<Plugin<?>> getPlugins() {\n+        return Framework.getService(SnapshotManager.class).getPlugins();\n+    }\n+\n+    @Override\n+    public ObjectMapper getJsonMapper() {\n+        ObjectMapper mapper = DistributionSnapshot.jsonMapper();\n+        for (Plugin<?> plugin : getPlugins()) {\n+            mapper = plugin.getJsonMapper(mapper);\n+        }\n+        return mapper;\n+    }\n+\n+    @Override\n+    public ObjectWriter getJsonWriter() {\n+        return getJsonMapper().writerFor(RepositoryDistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .with(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)\n+                              .without(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n+    }\n+\n+    @Override\n+    public ObjectReader getJsonReader() {\n+        return getJsonMapper().readerFor(RepositoryDistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)\n+                              .with(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT);\n+    }\n+\n+    @Override\n+    public Map<String, PluginSnapshot<?>> getPluginSnapshots() {\n+        Map<String, PluginSnapshot<?>> res = new HashMap<>();\n+        getPlugins().forEach(plugin -> res.put(plugin.getId(), plugin.getRepositorySnapshot(getDoc())));\n+        return res;\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5OTMxMQ==", "bodyText": "if only it was my only pb with this module...", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408299311", "createdAt": "2020-04-14T17:10:00Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -464,4 +443,41 @@ public boolean isHidden() {\n     public ServerInfo getServerInfo() {\n         throw new UnsupportedOperationException();\n     }\n-}\n+\n+    protected List<Plugin<?>> getPlugins() {\n+        return Framework.getService(SnapshotManager.class).getPlugins();\n+    }\n+\n+    @Override\n+    public ObjectMapper getJsonMapper() {\n+        ObjectMapper mapper = DistributionSnapshot.jsonMapper();\n+        for (Plugin<?> plugin : getPlugins()) {\n+            mapper = plugin.getJsonMapper(mapper);\n+        }\n+        return mapper;\n+    }\n+\n+    @Override\n+    public ObjectWriter getJsonWriter() {\n+        return getJsonMapper().writerFor(RepositoryDistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .with(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)\n+                              .without(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n+    }\n+\n+    @Override\n+    public ObjectReader getJsonReader() {\n+        return getJsonMapper().readerFor(RepositoryDistributionSnapshot.class)\n+                              .withoutRootName()\n+                              .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)\n+                              .with(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT);\n+    }\n+\n+    @Override\n+    public Map<String, PluginSnapshot<?>> getPluginSnapshots() {\n+        Map<String, PluginSnapshot<?>> res = new HashMap<>();\n+        getPlugins().forEach(plugin -> res.put(plugin.getId(), plugin.getRepositorySnapshot(getDoc())));\n+        return res;\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MDA5NQ=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDEzNTcwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozMjo1OVrOGFRmNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozMjo1OVrOGFRmNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4NDM3Mg==", "bodyText": "You should use ReflectiveOperationException.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408184372", "createdAt": "2020-04-14T14:32:59Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -339,4 +361,38 @@ protected void beforeCreateDocument(DocumentModel doc) {\n         }\n     }\n \n-}\n+    @Override\n+    public List<Plugin<?>> getPlugins() {\n+        return new ArrayList<>(plugins.values());\n+    }\n+\n+    @Override\n+    public Plugin<?> getPlugin(String id) {\n+        return plugins.get(id);\n+    }\n+\n+    @Override\n+    public void start(ComponentContext context) {\n+        super.start(context);\n+        plugins.clear();\n+        List<PluginDescriptor> descriptors = getDescriptors(XP_PLUGINS);\n+        for (PluginDescriptor descriptor : descriptors) {\n+            try {\n+                Class<?> clazz = Class.forName(descriptor.getKlass());\n+                Constructor<?> constructor = clazz.getConstructor(PluginDescriptor.class);\n+                Plugin<?> plugin = (Plugin<?>) constructor.newInstance(descriptor);\n+                plugins.put(descriptor.getId(), plugin);\n+            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | IllegalArgumentException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE0OTYyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozNTo1NFrOGFRu-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozMjowMVrOGFXGog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4NjYxNg==", "bodyText": "Could you add a message stating the culprit plugin id?\nWhat do you think about adding this error to the runtime warning messages in order to block server boot in non lenient mode?", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408186616", "createdAt": "2020-04-14T14:35:54Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -339,4 +361,38 @@ protected void beforeCreateDocument(DocumentModel doc) {\n         }\n     }\n \n-}\n+    @Override\n+    public List<Plugin<?>> getPlugins() {\n+        return new ArrayList<>(plugins.values());\n+    }\n+\n+    @Override\n+    public Plugin<?> getPlugin(String id) {\n+        return plugins.get(id);\n+    }\n+\n+    @Override\n+    public void start(ComponentContext context) {\n+        super.start(context);\n+        plugins.clear();\n+        List<PluginDescriptor> descriptors = getDescriptors(XP_PLUGINS);\n+        for (PluginDescriptor descriptor : descriptors) {\n+            try {\n+                Class<?> clazz = Class.forName(descriptor.getKlass());\n+                Constructor<?> constructor = clazz.getConstructor(PluginDescriptor.class);\n+                Plugin<?> plugin = (Plugin<?>) constructor.newInstance(descriptor);\n+                plugins.put(descriptor.getId(), plugin);\n+            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | IllegalArgumentException\n+                    | InvocationTargetException | NoSuchMethodException | SecurityException e) {\n+                log.error(e, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3NDU5NA==", "bodyText": "why not indeed, will do \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408274594", "createdAt": "2020-04-14T16:32:01Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -339,4 +361,38 @@ protected void beforeCreateDocument(DocumentModel doc) {\n         }\n     }\n \n-}\n+    @Override\n+    public List<Plugin<?>> getPlugins() {\n+        return new ArrayList<>(plugins.values());\n+    }\n+\n+    @Override\n+    public Plugin<?> getPlugin(String id) {\n+        return plugins.get(id);\n+    }\n+\n+    @Override\n+    public void start(ComponentContext context) {\n+        super.start(context);\n+        plugins.clear();\n+        List<PluginDescriptor> descriptors = getDescriptors(XP_PLUGINS);\n+        for (PluginDescriptor descriptor : descriptors) {\n+            try {\n+                Class<?> clazz = Class.forName(descriptor.getKlass());\n+                Constructor<?> constructor = clazz.getConstructor(PluginDescriptor.class);\n+                Plugin<?> plugin = (Plugin<?>) constructor.newInstance(descriptor);\n+                plugins.put(descriptor.getId(), plugin);\n+            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | IllegalArgumentException\n+                    | InvocationTargetException | NoSuchMethodException | SecurityException e) {\n+                log.error(e, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4NjYxNg=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE2MjY5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozODozOVrOGFR3Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozODozOVrOGFR3Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4ODc2Nw==", "bodyText": "Maybe unmodifiableList?", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408188767", "createdAt": "2020-04-14T14:38:39Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -339,4 +361,38 @@ protected void beforeCreateDocument(DocumentModel doc) {\n         }\n     }\n \n-}\n+    @Override\n+    public List<Plugin<?>> getPlugins() {\n+        return new ArrayList<>(plugins.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE3MDEwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/RuntimeSnaphotRepoFeature.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MDowN1rOGFR8DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1NDozMFrOGHVuIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4OTk2NA==", "bodyText": "You can depend on RuntimeSnaphotFeature and remove two deploys.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408189964", "createdAt": "2020-04-14T14:40:07Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/RuntimeSnaphotRepoFeature.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * (C) Copyright 2012-2013 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.nuxeo.apidoc.test;\n+\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.elasticsearch.test.RepositoryElasticSearchFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.RunnerFeature;\n+\n+/**\n+ * @since 8.3\n+ */\n+@Features({ CoreFeature.class, RepositoryElasticSearchFeature.class, AutomationFeature.class })\n+@RepositoryConfig(cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.apidoc.core\")\n+@Deploy(\"org.nuxeo.apidoc.repo\")\n+@Deploy(\"org.nuxeo.apidoc.repo:apidoc-works-test-contrib.xml\")\n+public class RuntimeSnaphotRepoFeature implements RunnerFeature {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3NTU0NA==", "bodyText": "indeed, thx -- and actually: i created the \"non repo\" one since the startup is faster, but there are missing extension points when running it --> do we have any good practices to follow in that kind of cases please?", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408275544", "createdAt": "2020-04-14T16:33:18Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/RuntimeSnaphotRepoFeature.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * (C) Copyright 2012-2013 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.nuxeo.apidoc.test;\n+\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.elasticsearch.test.RepositoryElasticSearchFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.RunnerFeature;\n+\n+/**\n+ * @since 8.3\n+ */\n+@Features({ CoreFeature.class, RepositoryElasticSearchFeature.class, AutomationFeature.class })\n+@RepositoryConfig(cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.apidoc.core\")\n+@Deploy(\"org.nuxeo.apidoc.repo\")\n+@Deploy(\"org.nuxeo.apidoc.repo:apidoc-works-test-contrib.xml\")\n+public class RuntimeSnaphotRepoFeature implements RunnerFeature {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4OTk2NA=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0OTA5MA==", "bodyText": "gave up on this change anyway: i need the repo in all tests", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r410349090", "createdAt": "2020-04-17T16:54:30Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/RuntimeSnaphotRepoFeature.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * (C) Copyright 2012-2013 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package org.nuxeo.apidoc.test;\n+\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.elasticsearch.test.RepositoryElasticSearchFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.RunnerFeature;\n+\n+/**\n+ * @since 8.3\n+ */\n+@Features({ CoreFeature.class, RepositoryElasticSearchFeature.class, AutomationFeature.class })\n+@RepositoryConfig(cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.apidoc.core\")\n+@Deploy(\"org.nuxeo.apidoc.repo\")\n+@Deploy(\"org.nuxeo.apidoc.repo:apidoc-works-test-contrib.xml\")\n+public class RuntimeSnaphotRepoFeature implements RunnerFeature {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4OTk2NA=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDYxNDE1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/ApiBrowserConstants.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxMzoyN1rOGFWUdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo1NjozNVrOGHVysA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MTc0OA==", "bodyText": "Could be ApiBrowsers as there's a method + final + private constructor.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408261748", "createdAt": "2020-04-14T16:13:27Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/ApiBrowserConstants.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class ApiBrowserConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3NjEzMA==", "bodyText": "wdym? changing the class name?", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408276130", "createdAt": "2020-04-14T16:34:05Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/ApiBrowserConstants.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class ApiBrowserConstants {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MTc0OA=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1MDI1Ng==", "bodyText": "this is pure cleanup and i don't find the new name better --> kept it as is, please tell if that's an issue", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r410350256", "createdAt": "2020-04-17T16:56:35Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/ApiBrowserConstants.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class ApiBrowserConstants {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MTc0OA=="}, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDY0MzUyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/test/java/org/nuxeo/apidoc/browse/DistributionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoyMDoyMVrOGFWm4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoyMDoyMVrOGFWm4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NjQ2NQ==", "bodyText": "Missing copyright", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r408266465", "createdAt": "2020-04-14T16:20:21Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/test/java/org/nuxeo/apidoc/browse/DistributionTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.nuxeo.apidoc.browse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b17d39cc8017c94ddb3d78c83fe12e4f3f888b6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTY1NjIyOnYy", "diffSide": "RIGHT", "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODowNjo0NlrOGI4ajA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjowMTo1OFrOGJB_5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NjA5Mg==", "bodyText": "You could rely on @Before for this one.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r411966092", "createdAt": "2020-04-21T08:06:46Z", "author": {"login": "akervern"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * (C) Copyright 2014-2020 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.AbstractTest;\n+import org.nuxeo.functionaltests.Locator;\n+import org.nuxeo.functionaltests.RestHelper;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactHomePage;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactPage;\n+import org.nuxeo.functionaltests.explorer.pages.ExplorerHomePage;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+/**\n+ * Test explorer main webengine pages.\n+ *\n+ * @since 11.1\n+ */\n+public class ITExplorerTest extends AbstractTest {\n+\n+    @Before\n+    public void before() {\n+        RestHelper.createUser(TEST_USERNAME, TEST_PASSWORD, null, null, null, null, \"members\");\n+    }\n+\n+    @After\n+    public void after() {\n+        RestHelper.cleanup();\n+    }\n+\n+    protected void doLogin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwNzY4Mg==", "bodyText": "thanks indeed, although i sometimes log in as admin user instead, so i'll take that option in next PRs (more ftests are coming for admin user for https://jira.nuxeo.com/browse/NXP-20246)", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412007682", "createdAt": "2020-04-21T09:03:28Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * (C) Copyright 2014-2020 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.AbstractTest;\n+import org.nuxeo.functionaltests.Locator;\n+import org.nuxeo.functionaltests.RestHelper;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactHomePage;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactPage;\n+import org.nuxeo.functionaltests.explorer.pages.ExplorerHomePage;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+/**\n+ * Test explorer main webengine pages.\n+ *\n+ * @since 11.1\n+ */\n+public class ITExplorerTest extends AbstractTest {\n+\n+    @Before\n+    public void before() {\n+        RestHelper.createUser(TEST_USERNAME, TEST_PASSWORD, null, null, null, null, \"members\");\n+    }\n+\n+    @After\n+    public void after() {\n+        RestHelper.cleanup();\n+    }\n+\n+    protected void doLogin() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NjA5Mg=="}, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyMzEwOQ==", "bodyText": "Actually i got confused with JSF tests (similar logics, but one additional test checking admin center), will do here \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412123109", "createdAt": "2020-04-21T12:01:58Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * (C) Copyright 2014-2020 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.AbstractTest;\n+import org.nuxeo.functionaltests.Locator;\n+import org.nuxeo.functionaltests.RestHelper;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactHomePage;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactPage;\n+import org.nuxeo.functionaltests.explorer.pages.ExplorerHomePage;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+/**\n+ * Test explorer main webengine pages.\n+ *\n+ * @since 11.1\n+ */\n+public class ITExplorerTest extends AbstractTest {\n+\n+    @Before\n+    public void before() {\n+        RestHelper.createUser(TEST_USERNAME, TEST_PASSWORD, null, null, null, null, \"members\");\n+    }\n+\n+    @After\n+    public void after() {\n+        RestHelper.cleanup();\n+    }\n+\n+    protected void doLogin() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NjA5Mg=="}, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTY1NzUwOnYy", "diffSide": "RIGHT", "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODowNzowMlrOGI4bRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTowNjoxMFrOGJrwxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NjI3OQ==", "bodyText": "and @After for this guy", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r411966279", "createdAt": "2020-04-21T08:07:02Z", "author": {"login": "akervern"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * (C) Copyright 2014-2020 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.AbstractTest;\n+import org.nuxeo.functionaltests.Locator;\n+import org.nuxeo.functionaltests.RestHelper;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactHomePage;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactPage;\n+import org.nuxeo.functionaltests.explorer.pages.ExplorerHomePage;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+/**\n+ * Test explorer main webengine pages.\n+ *\n+ * @since 11.1\n+ */\n+public class ITExplorerTest extends AbstractTest {\n+\n+    @Before\n+    public void before() {\n+        RestHelper.createUser(TEST_USERNAME, TEST_PASSWORD, null, null, null, null, \"members\");\n+    }\n+\n+    @After\n+    public void after() {\n+        RestHelper.cleanup();\n+    }\n+\n+    protected void doLogin() {\n+        getLoginPage().login(TEST_USERNAME, TEST_PASSWORD);\n+    }\n+\n+    protected void doLogout() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwODUxOA==", "bodyText": "will do with https://jira.nuxeo.com/browse/NXP-20246 \ud83d\udc4d (see last test as admin)", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412008518", "createdAt": "2020-04-21T09:04:37Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * (C) Copyright 2014-2020 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.AbstractTest;\n+import org.nuxeo.functionaltests.Locator;\n+import org.nuxeo.functionaltests.RestHelper;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactHomePage;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactPage;\n+import org.nuxeo.functionaltests.explorer.pages.ExplorerHomePage;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+/**\n+ * Test explorer main webengine pages.\n+ *\n+ * @since 11.1\n+ */\n+public class ITExplorerTest extends AbstractTest {\n+\n+    @Before\n+    public void before() {\n+        RestHelper.createUser(TEST_USERNAME, TEST_PASSWORD, null, null, null, null, \"members\");\n+    }\n+\n+    @After\n+    public void after() {\n+        RestHelper.cleanup();\n+    }\n+\n+    protected void doLogin() {\n+        getLoginPage().login(TEST_USERNAME, TEST_PASSWORD);\n+    }\n+\n+    protected void doLogout() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NjI3OQ=="}, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwNzM2NA==", "bodyText": "(done, see previous conversation)", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412807364", "createdAt": "2020-04-22T09:06:10Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * (C) Copyright 2014-2020 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.AbstractTest;\n+import org.nuxeo.functionaltests.Locator;\n+import org.nuxeo.functionaltests.RestHelper;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactHomePage;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactPage;\n+import org.nuxeo.functionaltests.explorer.pages.ExplorerHomePage;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+/**\n+ * Test explorer main webengine pages.\n+ *\n+ * @since 11.1\n+ */\n+public class ITExplorerTest extends AbstractTest {\n+\n+    @Before\n+    public void before() {\n+        RestHelper.createUser(TEST_USERNAME, TEST_PASSWORD, null, null, null, null, \"members\");\n+    }\n+\n+    @After\n+    public void after() {\n+        RestHelper.cleanup();\n+    }\n+\n+    protected void doLogin() {\n+        getLoginPage().login(TEST_USERNAME, TEST_PASSWORD);\n+    }\n+\n+    protected void doLogout() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NjI3OQ=="}, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTY2ODg4OnYy", "diffSide": "RIGHT", "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODowOTozNlrOGI4iDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzowNDoxNlrOGKBMIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODAxMg==", "bodyText": "What comes first in my mind seeing all those tests; you should use some Class (like ArtifactHomePage) and accessors to make it more understandable instead of relying on direct selectors to By.xpath and consosr.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r411968012", "createdAt": "2020-04-21T08:09:36Z", "author": {"login": "akervern"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * (C) Copyright 2014-2020 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.AbstractTest;\n+import org.nuxeo.functionaltests.Locator;\n+import org.nuxeo.functionaltests.RestHelper;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactHomePage;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactPage;\n+import org.nuxeo.functionaltests.explorer.pages.ExplorerHomePage;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+/**\n+ * Test explorer main webengine pages.\n+ *\n+ * @since 11.1\n+ */\n+public class ITExplorerTest extends AbstractTest {\n+\n+    @Before\n+    public void before() {\n+        RestHelper.createUser(TEST_USERNAME, TEST_PASSWORD, null, null, null, null, \"members\");\n+    }\n+\n+    @After\n+    public void after() {\n+        RestHelper.cleanup();\n+    }\n+\n+    protected void doLogin() {\n+        getLoginPage().login(TEST_USERNAME, TEST_PASSWORD);\n+    }\n+\n+    protected void doLogout() {\n+        // logout avoiding JS error check\n+        driver.get(NUXEO_URL + \"/logout\");\n+    }\n+\n+    protected ExplorerHomePage goHome() {\n+        open(ExplorerHomePage.URL);\n+        return asPage(ExplorerHomePage.class);\n+    }\n+\n+    /**\n+     * Simple login, logout test, checking the home page is displayed without errors after login.\n+     */\n+    @Test\n+    public void testLoginLogout() throws UserNotConnectedException {\n+        doLogin();\n+        goHome();\n+        doLogout();\n+    }\n+\n+    @Test\n+    public void testHomePage() throws UserNotConnectedException {\n+        doLogin();\n+        ExplorerHomePage home = goHome();\n+        assertEquals(\"Nuxeo Platform Explorer\", home.getTitle());\n+        assertEquals(\"Running Platform\".toUpperCase(), home.currentPlatform.getText());\n+\n+        ArtifactHomePage ahome = home.navigateTo(home.currentExtensionPoints);\n+        assertEquals(\"All extension points\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentContributions);\n+        assertEquals(\"All contributions\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentExtensionPoints);\n+        assertEquals(\"All extension points\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentOperations);\n+        assertEquals(\"All operations\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentServices);\n+        assertEquals(\"All services\", ahome.getTitle());\n+\n+        doLogout();\n+    }\n+\n+    @Test\n+    public void testExtensionPoints() throws UserNotConnectedException {\n+        doLogin();\n+        ExplorerHomePage home = goHome();\n+        ArtifactHomePage ahome = home.navigateTo(home.currentExtensionPoints);\n+        assertTrue(ahome.isSelected(ahome.extensionPoints));\n+        WebElement elt = ahome.getFirstListingElement();\n+        WebElement link = elt.findElement(By.xpath(\".//a\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxMzEyOQ==", "bodyText": "I agree it is not that consistent: i just wanted to have quick ftests here, because the selectors depend on the page, so i'd rather make ftl files more consistent to ease up test classes maintenance (that's why i kept it kind of hardcoded here).\nAlso note i'll make some visual changes with https://jira.nuxeo.com/browse/NXP-28913, so i can try to work on this at the same time if it makes sense.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412013129", "createdAt": "2020-04-21T09:11:02Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * (C) Copyright 2014-2020 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.AbstractTest;\n+import org.nuxeo.functionaltests.Locator;\n+import org.nuxeo.functionaltests.RestHelper;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactHomePage;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactPage;\n+import org.nuxeo.functionaltests.explorer.pages.ExplorerHomePage;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+/**\n+ * Test explorer main webengine pages.\n+ *\n+ * @since 11.1\n+ */\n+public class ITExplorerTest extends AbstractTest {\n+\n+    @Before\n+    public void before() {\n+        RestHelper.createUser(TEST_USERNAME, TEST_PASSWORD, null, null, null, null, \"members\");\n+    }\n+\n+    @After\n+    public void after() {\n+        RestHelper.cleanup();\n+    }\n+\n+    protected void doLogin() {\n+        getLoginPage().login(TEST_USERNAME, TEST_PASSWORD);\n+    }\n+\n+    protected void doLogout() {\n+        // logout avoiding JS error check\n+        driver.get(NUXEO_URL + \"/logout\");\n+    }\n+\n+    protected ExplorerHomePage goHome() {\n+        open(ExplorerHomePage.URL);\n+        return asPage(ExplorerHomePage.class);\n+    }\n+\n+    /**\n+     * Simple login, logout test, checking the home page is displayed without errors after login.\n+     */\n+    @Test\n+    public void testLoginLogout() throws UserNotConnectedException {\n+        doLogin();\n+        goHome();\n+        doLogout();\n+    }\n+\n+    @Test\n+    public void testHomePage() throws UserNotConnectedException {\n+        doLogin();\n+        ExplorerHomePage home = goHome();\n+        assertEquals(\"Nuxeo Platform Explorer\", home.getTitle());\n+        assertEquals(\"Running Platform\".toUpperCase(), home.currentPlatform.getText());\n+\n+        ArtifactHomePage ahome = home.navigateTo(home.currentExtensionPoints);\n+        assertEquals(\"All extension points\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentContributions);\n+        assertEquals(\"All contributions\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentExtensionPoints);\n+        assertEquals(\"All extension points\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentOperations);\n+        assertEquals(\"All operations\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentServices);\n+        assertEquals(\"All services\", ahome.getTitle());\n+\n+        doLogout();\n+    }\n+\n+    @Test\n+    public void testExtensionPoints() throws UserNotConnectedException {\n+        doLogin();\n+        ExplorerHomePage home = goHome();\n+        ArtifactHomePage ahome = home.navigateTo(home.currentExtensionPoints);\n+        assertTrue(ahome.isSelected(ahome.extensionPoints));\n+        WebElement elt = ahome.getFirstListingElement();\n+        WebElement link = elt.findElement(By.xpath(\".//a\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODAxMg=="}, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyNTg2Nw==", "bodyText": "will do with https://jira.nuxeo.com/browse/NXP-28913", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412125867", "createdAt": "2020-04-21T12:06:27Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * (C) Copyright 2014-2020 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.AbstractTest;\n+import org.nuxeo.functionaltests.Locator;\n+import org.nuxeo.functionaltests.RestHelper;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactHomePage;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactPage;\n+import org.nuxeo.functionaltests.explorer.pages.ExplorerHomePage;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+/**\n+ * Test explorer main webengine pages.\n+ *\n+ * @since 11.1\n+ */\n+public class ITExplorerTest extends AbstractTest {\n+\n+    @Before\n+    public void before() {\n+        RestHelper.createUser(TEST_USERNAME, TEST_PASSWORD, null, null, null, null, \"members\");\n+    }\n+\n+    @After\n+    public void after() {\n+        RestHelper.cleanup();\n+    }\n+\n+    protected void doLogin() {\n+        getLoginPage().login(TEST_USERNAME, TEST_PASSWORD);\n+    }\n+\n+    protected void doLogout() {\n+        // logout avoiding JS error check\n+        driver.get(NUXEO_URL + \"/logout\");\n+    }\n+\n+    protected ExplorerHomePage goHome() {\n+        open(ExplorerHomePage.URL);\n+        return asPage(ExplorerHomePage.class);\n+    }\n+\n+    /**\n+     * Simple login, logout test, checking the home page is displayed without errors after login.\n+     */\n+    @Test\n+    public void testLoginLogout() throws UserNotConnectedException {\n+        doLogin();\n+        goHome();\n+        doLogout();\n+    }\n+\n+    @Test\n+    public void testHomePage() throws UserNotConnectedException {\n+        doLogin();\n+        ExplorerHomePage home = goHome();\n+        assertEquals(\"Nuxeo Platform Explorer\", home.getTitle());\n+        assertEquals(\"Running Platform\".toUpperCase(), home.currentPlatform.getText());\n+\n+        ArtifactHomePage ahome = home.navigateTo(home.currentExtensionPoints);\n+        assertEquals(\"All extension points\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentContributions);\n+        assertEquals(\"All contributions\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentExtensionPoints);\n+        assertEquals(\"All extension points\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentOperations);\n+        assertEquals(\"All operations\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentServices);\n+        assertEquals(\"All services\", ahome.getTitle());\n+\n+        doLogout();\n+    }\n+\n+    @Test\n+    public void testExtensionPoints() throws UserNotConnectedException {\n+        doLogin();\n+        ExplorerHomePage home = goHome();\n+        ArtifactHomePage ahome = home.navigateTo(home.currentExtensionPoints);\n+        assertTrue(ahome.isSelected(ahome.extensionPoints));\n+        WebElement elt = ahome.getFirstListingElement();\n+        WebElement link = elt.findElement(By.xpath(\".//a\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODAxMg=="}, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1ODQzNQ==", "bodyText": "see #3959 (draft PR waiting for this PR merge on master)", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r413158435", "createdAt": "2020-04-22T17:04:16Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * (C) Copyright 2014-2020 Nuxeo SA (http://nuxeo.com/) and contributors.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the GNU Lesser General Public License\n+ * (LGPL) version 2.1 which accompanies this distribution, and is available at\n+ * http://www.gnu.org/licenses/lgpl-2.1.html\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * Contributors:\n+ *     Nuxeo\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.functionaltests.AbstractTest;\n+import org.nuxeo.functionaltests.Locator;\n+import org.nuxeo.functionaltests.RestHelper;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactHomePage;\n+import org.nuxeo.functionaltests.explorer.pages.ArtifactPage;\n+import org.nuxeo.functionaltests.explorer.pages.ExplorerHomePage;\n+import org.nuxeo.functionaltests.pages.DocumentBasePage.UserNotConnectedException;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.WebElement;\n+\n+/**\n+ * Test explorer main webengine pages.\n+ *\n+ * @since 11.1\n+ */\n+public class ITExplorerTest extends AbstractTest {\n+\n+    @Before\n+    public void before() {\n+        RestHelper.createUser(TEST_USERNAME, TEST_PASSWORD, null, null, null, null, \"members\");\n+    }\n+\n+    @After\n+    public void after() {\n+        RestHelper.cleanup();\n+    }\n+\n+    protected void doLogin() {\n+        getLoginPage().login(TEST_USERNAME, TEST_PASSWORD);\n+    }\n+\n+    protected void doLogout() {\n+        // logout avoiding JS error check\n+        driver.get(NUXEO_URL + \"/logout\");\n+    }\n+\n+    protected ExplorerHomePage goHome() {\n+        open(ExplorerHomePage.URL);\n+        return asPage(ExplorerHomePage.class);\n+    }\n+\n+    /**\n+     * Simple login, logout test, checking the home page is displayed without errors after login.\n+     */\n+    @Test\n+    public void testLoginLogout() throws UserNotConnectedException {\n+        doLogin();\n+        goHome();\n+        doLogout();\n+    }\n+\n+    @Test\n+    public void testHomePage() throws UserNotConnectedException {\n+        doLogin();\n+        ExplorerHomePage home = goHome();\n+        assertEquals(\"Nuxeo Platform Explorer\", home.getTitle());\n+        assertEquals(\"Running Platform\".toUpperCase(), home.currentPlatform.getText());\n+\n+        ArtifactHomePage ahome = home.navigateTo(home.currentExtensionPoints);\n+        assertEquals(\"All extension points\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentContributions);\n+        assertEquals(\"All contributions\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentExtensionPoints);\n+        assertEquals(\"All extension points\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentOperations);\n+        assertEquals(\"All operations\", ahome.getTitle());\n+        ahome = goHome().navigateTo(home.currentServices);\n+        assertEquals(\"All services\", ahome.getTitle());\n+\n+        doLogout();\n+    }\n+\n+    @Test\n+    public void testExtensionPoints() throws UserNotConnectedException {\n+        doLogin();\n+        ExplorerHomePage home = goHome();\n+        ArtifactHomePage ahome = home.navigateTo(home.currentExtensionPoints);\n+        assertTrue(ahome.isSelected(ahome.extensionPoints));\n+        WebElement elt = ahome.getFirstListingElement();\n+        WebElement link = elt.findElement(By.xpath(\".//a\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODAxMg=="}, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTcwODAyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/ComponentInfoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxNzo1NlrOGI45Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjowNzowNVrOGJCMKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MzkwNg==", "bodyText": "For the future, instead of having a private constructor for json deserialization; you should consider using libray like Google AutoValue (see: google/auto#138 (comment)) for not having to maintain a constructor with every attribute.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r411973906", "createdAt": "2020-04-21T08:17:56Z", "author": {"login": "akervern"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/ComponentInfoImpl.java", "diffHunk": "@@ -71,8 +74,18 @@\n     public ComponentInfoImpl(BundleInfo bundleInfo, String name) {\n         bundle = bundleInfo;\n         this.name = name;\n-        extensionPoints = new HashMap<>();\n-        extensions = new ArrayList<>();\n+    }\n+\n+    @JsonCreator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyNjI0OA==", "bodyText": "will have a look with https://jira.nuxeo.com/browse/NXP-28838 (which entails more json serializations)", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412126248", "createdAt": "2020-04-21T12:07:05Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/ComponentInfoImpl.java", "diffHunk": "@@ -71,8 +74,18 @@\n     public ComponentInfoImpl(BundleInfo bundleInfo, String name) {\n         bundle = bundleInfo;\n         this.name = name;\n-        extensionPoints = new HashMap<>();\n-        extensions = new ArrayList<>();\n+    }\n+\n+    @JsonCreator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MzkwNg=="}, "originalCommit": {"oid": "627f1a0934df8e48defa817e5b8fbe558da53c3f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjA4ODY1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjowOToxMFrOGJy64w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDowMDozMlrOGJ4D6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyNDY0Mw==", "bodyText": "List#sort(Comparator) is preferred to avoid importing Collections.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412924643", "createdAt": "2020-04-22T12:09:10Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -505,49 +473,22 @@ public void initOperations() {\n             return;\n         }\n         OperationType[] ops = service.getOperations();\n-        for (OperationType op : ops) {\n+        // make sure operations are ordered, as service currently returns any order\n+        List<OperationType> oops = Arrays.asList(ops);\n+        Collections.sort(oops, Comparator.comparing(OperationType::getId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 422}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwNDQxNQ==", "bodyText": "There are lots of calls to Collections#sort for lists in this code (including in this PR), do you mean i should change them all?\nNote also i followed the same advice than at #3882 (comment)", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r413004415", "createdAt": "2020-04-22T13:55:20Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -505,49 +473,22 @@ public void initOperations() {\n             return;\n         }\n         OperationType[] ops = service.getOperations();\n-        for (OperationType op : ops) {\n+        // make sure operations are ordered, as service currently returns any order\n+        List<OperationType> oops = Arrays.asList(ops);\n+        Collections.sort(oops, Comparator.comparing(OperationType::getId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyNDY0Mw=="}, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 422}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwNTc3Nw==", "bodyText": "I think the advice was on comparator no?\nI would suggest doing it on the new code and replace old code if wanted.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r413005777", "createdAt": "2020-04-22T13:56:56Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -505,49 +473,22 @@ public void initOperations() {\n             return;\n         }\n         OperationType[] ops = service.getOperations();\n-        for (OperationType op : ops) {\n+        // make sure operations are ordered, as service currently returns any order\n+        List<OperationType> oops = Arrays.asList(ops);\n+        Collections.sort(oops, Comparator.comparing(OperationType::getId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyNDY0Mw=="}, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 422}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwODg3Mg==", "bodyText": "Well it suggested that Collections.sort was ok for lists, still.\nBut I will do the changes.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r413008872", "createdAt": "2020-04-22T14:00:32Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -505,49 +473,22 @@ public void initOperations() {\n             return;\n         }\n         OperationType[] ops = service.getOperations();\n-        for (OperationType op : ops) {\n+        // make sure operations are ordered, as service currently returns any order\n+        List<OperationType> oops = Arrays.asList(ops);\n+        Collections.sort(oops, Comparator.comparing(OperationType::getId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyNDY0Mw=="}, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 422}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjE2OTA2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjoyNjo1OVrOGJzpMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjoyNjo1OVrOGJzpMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkzNjQ5Ng==", "bodyText": "Missing newline", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412936496", "createdAt": "2020-04-22T12:26:59Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -587,28 +528,82 @@ public void cleanPreviousArtifacts() {\n     }\n \n     @Override\n-    @JsonIgnore\n     public boolean isLatestFT() {\n         return false;\n     }\n \n     @Override\n-    @JsonIgnore\n     public boolean isLatestLTS() {\n         return false;\n     }\n \n-    final List<String> aliases = new LinkedList<>(Collections.singletonList(\"current\"));\n-\n     @Override\n-    @JsonIgnore\n     public List<String> getAliases() {\n         return aliases;\n     }\n \n     @Override\n-    @JsonIgnore\n     public boolean isHidden() {\n         return false;\n     }\n-}\n+\n+    protected List<Plugin<?>> getPlugins() {\n+        return Framework.getService(SnapshotManager.class).getPlugins();\n+    }\n+\n+    @Override\n+    public ObjectMapper getJsonMapper() {\n+        ObjectMapper mapper = DistributionSnapshot.jsonMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        for (Plugin<?> plugin : getPlugins()) {\n+            mapper = plugin.enrishJsonMapper(mapper);\n+        }\n+        return mapper;\n+    }\n+\n+    @Override\n+    public void writeJson(OutputStream out) {\n+        ObjectWriter writer = getJsonMapper().writerFor(DistributionSnapshot.class)\n+                                             .withoutRootName()\n+                                             .with(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)\n+                                             .without(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n+        try {\n+            writer.writeValue(out, this);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public DistributionSnapshot readJson(InputStream in) {\n+        ObjectReader reader = getJsonMapper().readerFor(DistributionSnapshot.class)\n+                                             .withoutRootName()\n+                                             .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)\n+                                             .with(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT);\n+        try {\n+            return reader.readValue(in);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected void initPluginSnapshots() {\n+        if (pluginSnapshotsInitialized) {\n+            return;\n+        }\n+        getPlugins().forEach(plugin -> pluginSnapshots.put(plugin.getId(), plugin.getRuntimeSnapshot(this)));\n+        pluginSnapshotsInitialized = true;\n+    }\n+\n+    @Override\n+    public Map<String, PluginSnapshot<?>> getPluginSnapshots() {\n+        initPluginSnapshots();\n+        return Collections.unmodifiableMap(pluginSnapshots);\n+    }\n+\n+    @Override\n+    public List<BundleInfo> getBundles() {\n+        return Collections.unmodifiableList(new ArrayList<>(bundles.values()));\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 559}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjE3MTU1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/ServerInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjoyNzozOFrOGJzqwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjoyNzozOFrOGJzqwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkzNjg5Nw==", "bodyText": "List#sort usage.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412936897", "createdAt": "2020-04-22T12:27:38Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/ServerInfo.java", "diffHunk": "@@ -163,15 +162,18 @@ public String getVersion() {\n         return version;\n     }\n \n-    public Collection<BundleInfo> getBundles() {\n-        return bundles.values();\n+    public List<BundleInfo> getBundles() {\n+        List<BundleInfo> res = new ArrayList<>(bundles.values());\n+        // order by name for deterministic processing\n+        Collections.sort(res, Comparator.comparing(BundleInfo::getId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjE5ODk4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozMzo0M1rOGJz7Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozMzo0M1rOGJz7Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0MTA5MA==", "bodyText": "extra ,?", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412941090", "createdAt": "2020-04-22T12:33:43Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -339,4 +356,42 @@ protected void beforeCreateDocument(DocumentModel doc) {\n         }\n     }\n \n-}\n+    @Override\n+    public List<Plugin<?>> getPlugins() {\n+        return Collections.unmodifiableList(new ArrayList<>(plugins.values()));\n+    }\n+\n+    @Override\n+    public Plugin<?> getPlugin(String id) {\n+        return plugins.get(id);\n+    }\n+\n+    @Override\n+    public void start(ComponentContext context) {\n+        super.start(context);\n+        plugins.clear();\n+        List<PluginDescriptor> descriptors = getDescriptors(XP_PLUGINS);\n+        for (PluginDescriptor descriptor : descriptors) {\n+            try {\n+                Class<?> clazz = Class.forName(descriptor.getKlass());\n+                Constructor<?> constructor = clazz.getConstructor(PluginDescriptor.class);\n+                Plugin<?> plugin = (Plugin<?>) constructor.newInstance(descriptor);\n+                plugins.put(descriptor.getId(), plugin);\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to register plugin with id '%s' on '%s': error initializing class '%s' (%s).\",\n+                        descriptor.getId(), name, descriptor.getKlass(), e.toString());\n+                ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjIwMDM3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozNDowNFrOGJz79g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozNDowNFrOGJz79g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0MTMwMg==", "bodyText": "No newline", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412941302", "createdAt": "2020-04-22T12:34:04Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -339,4 +356,42 @@ protected void beforeCreateDocument(DocumentModel doc) {\n         }\n     }\n \n-}\n+    @Override\n+    public List<Plugin<?>> getPlugins() {\n+        return Collections.unmodifiableList(new ArrayList<>(plugins.values()));\n+    }\n+\n+    @Override\n+    public Plugin<?> getPlugin(String id) {\n+        return plugins.get(id);\n+    }\n+\n+    @Override\n+    public void start(ComponentContext context) {\n+        super.start(context);\n+        plugins.clear();\n+        List<PluginDescriptor> descriptors = getDescriptors(XP_PLUGINS);\n+        for (PluginDescriptor descriptor : descriptors) {\n+            try {\n+                Class<?> clazz = Class.forName(descriptor.getKlass());\n+                Constructor<?> constructor = clazz.getConstructor(PluginDescriptor.class);\n+                Plugin<?> plugin = (Plugin<?>) constructor.newInstance(descriptor);\n+                plugins.put(descriptor.getId(), plugin);\n+            } catch (ReflectiveOperationException e) {\n+                String msg = String.format(\n+                        \"Failed to register plugin with id '%s' on '%s': error initializing class '%s' (%s).\",\n+                        descriptor.getId(), name, descriptor.getKlass(), e.toString());\n+                ;\n+                log.error(msg, e);\n+                Framework.getRuntime().getMessageHandler().addError(msg);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void stop(ComponentContext context) throws InterruptedException {\n+        super.stop(context);\n+        plugins.clear();\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjIxMzQ5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/resources/apidoc-plugin-test-contrib.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozNjo1MFrOGJ0DiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozNjo1MFrOGJ0DiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0MzI0MQ==", "bodyText": "No newline", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412943241", "createdAt": "2020-04-22T12:36:50Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/resources/apidoc-plugin-test-contrib.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.apidoc.test.plugin\" version=\"1.0\">\n+\n+  <extension target=\"org.nuxeo.apidoc.snapshot.SnapshotManagerComponent\" point=\"plugins\">\n+    <plugin id=\"testPlugin\" class=\"org.nuxeo.apidoc.test.FakePlugin\"\n+      snapshotClass=\"org.nuxeo.apidoc.test.FakePluginRuntimeSnapshot\">\n+      <ui>\n+        <viewType>myType</viewType>\n+        <label>My snapshot plugin</label>\n+        <homeView>listItems</homeView>\n+        <styleClass>myStyleClass</styleClass>\n+      </ui>\n+    </plugin>\n+\n+    <extension target=\"org.nuxeo.apidoc.snapshot.SnapshotManagerComponent\" point=\"plugins\">\n+      <plugin id=\"foo\" class=\"org.nuxeo.apidoc.test.FooPlugin\" />\n+    </extension>\n+\n+    <extension target=\"org.nuxeo.apidoc.snapshot.SnapshotManagerComponent\" point=\"plugins\">\n+      <plugin id=\"bar\" class=\"org.nuxeo.apidoc.test.FakeNuxeoArtifact\" />\n+    </extension>\n+\n+  </extension>\n+\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjIyOTMzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0MDoxOFrOGJ0M5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMToyOFrOGJ2Fsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0NTYzNg==", "bodyText": "Could be:\nString latest = snaps.stream()\n                      .filter(snap -> snap.getName().toLowerCase().startsWith(\"nuxeo platform\"))\n                      .map(DistributionSnapshot::getKey)\n                      .findFirst()\n                      .orElse(\"current\");", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412945636", "createdAt": "2020-04-22T12:40:18Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -0,0 +1,593 @@\n+/*\n+ * (C) Copyright 2006-2015 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+import static org.nuxeo.apidoc.snapshot.DistributionSnapshot.PROP_RELEASED;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.nuxeo.apidoc.documentation.DocumentationService;\n+import org.nuxeo.apidoc.export.ArchiveFile;\n+import org.nuxeo.apidoc.listener.AttributesExtractorStater;\n+import org.nuxeo.apidoc.plugin.Plugin;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshotDesc;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.apidoc.snapshot.SnapshotManagerComponent;\n+import org.nuxeo.apidoc.snapshot.SnapshotResolverHelper;\n+import org.nuxeo.apidoc.worker.ExtractXmlAttributesWorker;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IterableQueryResult;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.query.QueryFilter;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.work.api.Work;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.webengine.forms.FormData;\n+import org.nuxeo.ecm.webengine.model.Resource;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.exceptions.WebResourceNotFoundException;\n+import org.nuxeo.ecm.webengine.model.impl.ModuleRoot;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+@Path(\"/distribution\")\n+// needed for 5.4.1\n+@WebObject(type = \"distribution\")\n+public class Distribution extends ModuleRoot {\n+\n+    public static final String DIST_ID = \"distId\";\n+\n+    protected static final Log log = LogFactory.getLog(Distribution.class);\n+\n+    protected static final Pattern VERSION_REGEX = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+))?(?:\\\\.(\\\\d+))?(?:-.*)?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    // handle errors\n+    @Override\n+    public Object handleError(Throwable t) {\n+        if (t instanceof WebResourceNotFoundException) {\n+            return Response.status(404).entity(getTemplate(\"error/error_404.ftl\")).type(\"text/html\").build();\n+        } else {\n+            return super.handleError(t);\n+        }\n+    }\n+\n+    protected SnapshotManager getSnapshotManager() {\n+        return Framework.getService(SnapshotManager.class);\n+    }\n+\n+    public String getNavigationPoint() {\n+        String url = getContext().getURL();\n+        String point = null;\n+        if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLEGROUPS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLEGROUP)) {\n+            point = ApiBrowserConstants.LIST_BUNDLEGROUPS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLE)) {\n+            point = ApiBrowserConstants.LIST_BUNDLES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_COMPONENTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_COMPONENT)) {\n+            point = ApiBrowserConstants.LIST_COMPONENTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_SERVICES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_SERVICE)) {\n+            point = ApiBrowserConstants.LIST_SERVICES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_EXTENSIONPOINTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_EXTENSIONPOINT)) {\n+            point = ApiBrowserConstants.LIST_EXTENSIONPOINTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_CONTRIBUTIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_CONTRIBUTION)) {\n+            point = ApiBrowserConstants.LIST_CONTRIBUTIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_OPERATIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_OPERATION)) {\n+            point = ApiBrowserConstants.LIST_OPERATIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_DOCUMENTATION)) {\n+            point = ApiBrowserConstants.VIEW_DOCUMENTATION;\n+        }\n+        if (point == null) {\n+            // check plugins\n+            List<Plugin<?>> plugins = getSnapshotManager().getPlugins();\n+            for (Plugin<?> plugin : plugins) {\n+                point = plugin.getView(url);\n+                if (point != null) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return point;\n+    }\n+\n+    @GET\n+    @Produces(\"text/html\")\n+    public Object doGet() {\n+        return getView(\"index\").arg(\"hideNav\", Boolean.TRUE);\n+    }\n+\n+    @Path(\"latest\")\n+    public Resource getLatest() {\n+        List<DistributionSnapshot> snaps = listPersistedDistributions();\n+        Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                           .filter(snap -> snap.getName()\n+                                                                               .toLowerCase()\n+                                                                               .startsWith(\"nuxeo platform\"))\n+                                                           .findFirst();\n+\n+        String latest = \"current\";\n+        if (distribution.isPresent()) {\n+            latest = distribution.get().getKey();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3NjU2Mg==", "bodyText": "indeed but i only moved that code -> i would prefer not modifying it to avoid unforeseen regressions in these logics", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412976562", "createdAt": "2020-04-22T13:21:28Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -0,0 +1,593 @@\n+/*\n+ * (C) Copyright 2006-2015 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+import static org.nuxeo.apidoc.snapshot.DistributionSnapshot.PROP_RELEASED;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.nuxeo.apidoc.documentation.DocumentationService;\n+import org.nuxeo.apidoc.export.ArchiveFile;\n+import org.nuxeo.apidoc.listener.AttributesExtractorStater;\n+import org.nuxeo.apidoc.plugin.Plugin;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshotDesc;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.apidoc.snapshot.SnapshotManagerComponent;\n+import org.nuxeo.apidoc.snapshot.SnapshotResolverHelper;\n+import org.nuxeo.apidoc.worker.ExtractXmlAttributesWorker;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IterableQueryResult;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.query.QueryFilter;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.work.api.Work;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.webengine.forms.FormData;\n+import org.nuxeo.ecm.webengine.model.Resource;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.exceptions.WebResourceNotFoundException;\n+import org.nuxeo.ecm.webengine.model.impl.ModuleRoot;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+@Path(\"/distribution\")\n+// needed for 5.4.1\n+@WebObject(type = \"distribution\")\n+public class Distribution extends ModuleRoot {\n+\n+    public static final String DIST_ID = \"distId\";\n+\n+    protected static final Log log = LogFactory.getLog(Distribution.class);\n+\n+    protected static final Pattern VERSION_REGEX = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+))?(?:\\\\.(\\\\d+))?(?:-.*)?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    // handle errors\n+    @Override\n+    public Object handleError(Throwable t) {\n+        if (t instanceof WebResourceNotFoundException) {\n+            return Response.status(404).entity(getTemplate(\"error/error_404.ftl\")).type(\"text/html\").build();\n+        } else {\n+            return super.handleError(t);\n+        }\n+    }\n+\n+    protected SnapshotManager getSnapshotManager() {\n+        return Framework.getService(SnapshotManager.class);\n+    }\n+\n+    public String getNavigationPoint() {\n+        String url = getContext().getURL();\n+        String point = null;\n+        if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLEGROUPS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLEGROUP)) {\n+            point = ApiBrowserConstants.LIST_BUNDLEGROUPS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLE)) {\n+            point = ApiBrowserConstants.LIST_BUNDLES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_COMPONENTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_COMPONENT)) {\n+            point = ApiBrowserConstants.LIST_COMPONENTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_SERVICES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_SERVICE)) {\n+            point = ApiBrowserConstants.LIST_SERVICES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_EXTENSIONPOINTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_EXTENSIONPOINT)) {\n+            point = ApiBrowserConstants.LIST_EXTENSIONPOINTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_CONTRIBUTIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_CONTRIBUTION)) {\n+            point = ApiBrowserConstants.LIST_CONTRIBUTIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_OPERATIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_OPERATION)) {\n+            point = ApiBrowserConstants.LIST_OPERATIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_DOCUMENTATION)) {\n+            point = ApiBrowserConstants.VIEW_DOCUMENTATION;\n+        }\n+        if (point == null) {\n+            // check plugins\n+            List<Plugin<?>> plugins = getSnapshotManager().getPlugins();\n+            for (Plugin<?> plugin : plugins) {\n+                point = plugin.getView(url);\n+                if (point != null) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return point;\n+    }\n+\n+    @GET\n+    @Produces(\"text/html\")\n+    public Object doGet() {\n+        return getView(\"index\").arg(\"hideNav\", Boolean.TRUE);\n+    }\n+\n+    @Path(\"latest\")\n+    public Resource getLatest() {\n+        List<DistributionSnapshot> snaps = listPersistedDistributions();\n+        Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                           .filter(snap -> snap.getName()\n+                                                                               .toLowerCase()\n+                                                                               .startsWith(\"nuxeo platform\"))\n+                                                           .findFirst();\n+\n+        String latest = \"current\";\n+        if (distribution.isPresent()) {\n+            latest = distribution.get().getKey();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0NTYzNg=="}, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjIzNDc4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0MToyMFrOGJ0P-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMTo0N1rOGJ2GgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0NjQyNw==", "bodyText": "You could use StringUtils#isBlank.", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412946427", "createdAt": "2020-04-22T12:41:20Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -0,0 +1,593 @@\n+/*\n+ * (C) Copyright 2006-2015 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+import static org.nuxeo.apidoc.snapshot.DistributionSnapshot.PROP_RELEASED;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.nuxeo.apidoc.documentation.DocumentationService;\n+import org.nuxeo.apidoc.export.ArchiveFile;\n+import org.nuxeo.apidoc.listener.AttributesExtractorStater;\n+import org.nuxeo.apidoc.plugin.Plugin;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshotDesc;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.apidoc.snapshot.SnapshotManagerComponent;\n+import org.nuxeo.apidoc.snapshot.SnapshotResolverHelper;\n+import org.nuxeo.apidoc.worker.ExtractXmlAttributesWorker;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IterableQueryResult;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.query.QueryFilter;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.work.api.Work;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.webengine.forms.FormData;\n+import org.nuxeo.ecm.webengine.model.Resource;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.exceptions.WebResourceNotFoundException;\n+import org.nuxeo.ecm.webengine.model.impl.ModuleRoot;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+@Path(\"/distribution\")\n+// needed for 5.4.1\n+@WebObject(type = \"distribution\")\n+public class Distribution extends ModuleRoot {\n+\n+    public static final String DIST_ID = \"distId\";\n+\n+    protected static final Log log = LogFactory.getLog(Distribution.class);\n+\n+    protected static final Pattern VERSION_REGEX = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+))?(?:\\\\.(\\\\d+))?(?:-.*)?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    // handle errors\n+    @Override\n+    public Object handleError(Throwable t) {\n+        if (t instanceof WebResourceNotFoundException) {\n+            return Response.status(404).entity(getTemplate(\"error/error_404.ftl\")).type(\"text/html\").build();\n+        } else {\n+            return super.handleError(t);\n+        }\n+    }\n+\n+    protected SnapshotManager getSnapshotManager() {\n+        return Framework.getService(SnapshotManager.class);\n+    }\n+\n+    public String getNavigationPoint() {\n+        String url = getContext().getURL();\n+        String point = null;\n+        if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLEGROUPS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLEGROUP)) {\n+            point = ApiBrowserConstants.LIST_BUNDLEGROUPS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLE)) {\n+            point = ApiBrowserConstants.LIST_BUNDLES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_COMPONENTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_COMPONENT)) {\n+            point = ApiBrowserConstants.LIST_COMPONENTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_SERVICES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_SERVICE)) {\n+            point = ApiBrowserConstants.LIST_SERVICES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_EXTENSIONPOINTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_EXTENSIONPOINT)) {\n+            point = ApiBrowserConstants.LIST_EXTENSIONPOINTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_CONTRIBUTIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_CONTRIBUTION)) {\n+            point = ApiBrowserConstants.LIST_CONTRIBUTIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_OPERATIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_OPERATION)) {\n+            point = ApiBrowserConstants.LIST_OPERATIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_DOCUMENTATION)) {\n+            point = ApiBrowserConstants.VIEW_DOCUMENTATION;\n+        }\n+        if (point == null) {\n+            // check plugins\n+            List<Plugin<?>> plugins = getSnapshotManager().getPlugins();\n+            for (Plugin<?> plugin : plugins) {\n+                point = plugin.getView(url);\n+                if (point != null) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return point;\n+    }\n+\n+    @GET\n+    @Produces(\"text/html\")\n+    public Object doGet() {\n+        return getView(\"index\").arg(\"hideNav\", Boolean.TRUE);\n+    }\n+\n+    @Path(\"latest\")\n+    public Resource getLatest() {\n+        List<DistributionSnapshot> snaps = listPersistedDistributions();\n+        Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                           .filter(snap -> snap.getName()\n+                                                                               .toLowerCase()\n+                                                                               .startsWith(\"nuxeo platform\"))\n+                                                           .findFirst();\n+\n+        String latest = \"current\";\n+        if (distribution.isPresent()) {\n+            latest = distribution.get().getKey();\n+        }\n+        return ctx.newObject(\"redirectWO\", \"latest\", latest);\n+    }\n+\n+    @Path(\"{distributionId}\")\n+    public Resource viewDistribution(@PathParam(\"distributionId\") String distributionId) {\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            return this;\n+        }\n+\n+        List<DistributionSnapshot> snaps = getSnapshotManager().listPersistentSnapshots((ctx.getCoreSession()));\n+        if (distributionId.matches(VERSION_REGEX.toString())) {\n+            String finalDistributionId = distributionId;\n+            String distribution = snaps.stream()\n+                                       .filter(s -> s.getVersion().equals(finalDistributionId))\n+                                       .findFirst()\n+                                       .map(DistributionSnapshot::getKey)\n+                                       .orElse(\"current\");\n+\n+            return ctx.newObject(\"redirectWO\", finalDistributionId, distribution);\n+        }\n+\n+        String orgDistributionId = distributionId;\n+        Boolean embeddedMode = Boolean.FALSE;\n+        if (\"adm\".equals(distributionId)) {\n+            embeddedMode = Boolean.TRUE;\n+        } else {\n+            snaps.add(getSnapshotManager().getRuntimeSnapshot());\n+            distributionId = SnapshotResolverHelper.findBestMatch(snaps, distributionId);\n+        }\n+        if (distributionId == null || \"\".equals(distributionId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3Njc2OQ==", "bodyText": "indeed but i only moved that code -> i would prefer not modifying it to avoid unforeseen regressions in these logics", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412976769", "createdAt": "2020-04-22T13:21:47Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -0,0 +1,593 @@\n+/*\n+ * (C) Copyright 2006-2015 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+import static org.nuxeo.apidoc.snapshot.DistributionSnapshot.PROP_RELEASED;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.nuxeo.apidoc.documentation.DocumentationService;\n+import org.nuxeo.apidoc.export.ArchiveFile;\n+import org.nuxeo.apidoc.listener.AttributesExtractorStater;\n+import org.nuxeo.apidoc.plugin.Plugin;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshotDesc;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.apidoc.snapshot.SnapshotManagerComponent;\n+import org.nuxeo.apidoc.snapshot.SnapshotResolverHelper;\n+import org.nuxeo.apidoc.worker.ExtractXmlAttributesWorker;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IterableQueryResult;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.query.QueryFilter;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.work.api.Work;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.webengine.forms.FormData;\n+import org.nuxeo.ecm.webengine.model.Resource;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.exceptions.WebResourceNotFoundException;\n+import org.nuxeo.ecm.webengine.model.impl.ModuleRoot;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+@Path(\"/distribution\")\n+// needed for 5.4.1\n+@WebObject(type = \"distribution\")\n+public class Distribution extends ModuleRoot {\n+\n+    public static final String DIST_ID = \"distId\";\n+\n+    protected static final Log log = LogFactory.getLog(Distribution.class);\n+\n+    protected static final Pattern VERSION_REGEX = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+))?(?:\\\\.(\\\\d+))?(?:-.*)?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    // handle errors\n+    @Override\n+    public Object handleError(Throwable t) {\n+        if (t instanceof WebResourceNotFoundException) {\n+            return Response.status(404).entity(getTemplate(\"error/error_404.ftl\")).type(\"text/html\").build();\n+        } else {\n+            return super.handleError(t);\n+        }\n+    }\n+\n+    protected SnapshotManager getSnapshotManager() {\n+        return Framework.getService(SnapshotManager.class);\n+    }\n+\n+    public String getNavigationPoint() {\n+        String url = getContext().getURL();\n+        String point = null;\n+        if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLEGROUPS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLEGROUP)) {\n+            point = ApiBrowserConstants.LIST_BUNDLEGROUPS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLE)) {\n+            point = ApiBrowserConstants.LIST_BUNDLES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_COMPONENTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_COMPONENT)) {\n+            point = ApiBrowserConstants.LIST_COMPONENTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_SERVICES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_SERVICE)) {\n+            point = ApiBrowserConstants.LIST_SERVICES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_EXTENSIONPOINTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_EXTENSIONPOINT)) {\n+            point = ApiBrowserConstants.LIST_EXTENSIONPOINTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_CONTRIBUTIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_CONTRIBUTION)) {\n+            point = ApiBrowserConstants.LIST_CONTRIBUTIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_OPERATIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_OPERATION)) {\n+            point = ApiBrowserConstants.LIST_OPERATIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_DOCUMENTATION)) {\n+            point = ApiBrowserConstants.VIEW_DOCUMENTATION;\n+        }\n+        if (point == null) {\n+            // check plugins\n+            List<Plugin<?>> plugins = getSnapshotManager().getPlugins();\n+            for (Plugin<?> plugin : plugins) {\n+                point = plugin.getView(url);\n+                if (point != null) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return point;\n+    }\n+\n+    @GET\n+    @Produces(\"text/html\")\n+    public Object doGet() {\n+        return getView(\"index\").arg(\"hideNav\", Boolean.TRUE);\n+    }\n+\n+    @Path(\"latest\")\n+    public Resource getLatest() {\n+        List<DistributionSnapshot> snaps = listPersistedDistributions();\n+        Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                           .filter(snap -> snap.getName()\n+                                                                               .toLowerCase()\n+                                                                               .startsWith(\"nuxeo platform\"))\n+                                                           .findFirst();\n+\n+        String latest = \"current\";\n+        if (distribution.isPresent()) {\n+            latest = distribution.get().getKey();\n+        }\n+        return ctx.newObject(\"redirectWO\", \"latest\", latest);\n+    }\n+\n+    @Path(\"{distributionId}\")\n+    public Resource viewDistribution(@PathParam(\"distributionId\") String distributionId) {\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            return this;\n+        }\n+\n+        List<DistributionSnapshot> snaps = getSnapshotManager().listPersistentSnapshots((ctx.getCoreSession()));\n+        if (distributionId.matches(VERSION_REGEX.toString())) {\n+            String finalDistributionId = distributionId;\n+            String distribution = snaps.stream()\n+                                       .filter(s -> s.getVersion().equals(finalDistributionId))\n+                                       .findFirst()\n+                                       .map(DistributionSnapshot::getKey)\n+                                       .orElse(\"current\");\n+\n+            return ctx.newObject(\"redirectWO\", finalDistributionId, distribution);\n+        }\n+\n+        String orgDistributionId = distributionId;\n+        Boolean embeddedMode = Boolean.FALSE;\n+        if (\"adm\".equals(distributionId)) {\n+            embeddedMode = Boolean.TRUE;\n+        } else {\n+            snaps.add(getSnapshotManager().getRuntimeSnapshot());\n+            distributionId = SnapshotResolverHelper.findBestMatch(snaps, distributionId);\n+        }\n+        if (distributionId == null || \"\".equals(distributionId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0NjQyNw=="}, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjIzOTA0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0MjoxMFrOGJ0SmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMTo1MVrOGJ2GrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0NzA5Nw==", "bodyText": "With log4j2:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.info(String.format(\"Comparing version using String between %s - %s\", o1.getVersion(), o2.getVersion()));\n          \n          \n            \n                        log.info(\"Comparing version using String between {} - {}\", o1::getVersion, o2::getVersion);", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412947097", "createdAt": "2020-04-22T12:42:10Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -0,0 +1,593 @@\n+/*\n+ * (C) Copyright 2006-2015 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+import static org.nuxeo.apidoc.snapshot.DistributionSnapshot.PROP_RELEASED;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.nuxeo.apidoc.documentation.DocumentationService;\n+import org.nuxeo.apidoc.export.ArchiveFile;\n+import org.nuxeo.apidoc.listener.AttributesExtractorStater;\n+import org.nuxeo.apidoc.plugin.Plugin;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshotDesc;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.apidoc.snapshot.SnapshotManagerComponent;\n+import org.nuxeo.apidoc.snapshot.SnapshotResolverHelper;\n+import org.nuxeo.apidoc.worker.ExtractXmlAttributesWorker;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IterableQueryResult;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.query.QueryFilter;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.work.api.Work;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.webengine.forms.FormData;\n+import org.nuxeo.ecm.webengine.model.Resource;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.exceptions.WebResourceNotFoundException;\n+import org.nuxeo.ecm.webengine.model.impl.ModuleRoot;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+@Path(\"/distribution\")\n+// needed for 5.4.1\n+@WebObject(type = \"distribution\")\n+public class Distribution extends ModuleRoot {\n+\n+    public static final String DIST_ID = \"distId\";\n+\n+    protected static final Log log = LogFactory.getLog(Distribution.class);\n+\n+    protected static final Pattern VERSION_REGEX = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+))?(?:\\\\.(\\\\d+))?(?:-.*)?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    // handle errors\n+    @Override\n+    public Object handleError(Throwable t) {\n+        if (t instanceof WebResourceNotFoundException) {\n+            return Response.status(404).entity(getTemplate(\"error/error_404.ftl\")).type(\"text/html\").build();\n+        } else {\n+            return super.handleError(t);\n+        }\n+    }\n+\n+    protected SnapshotManager getSnapshotManager() {\n+        return Framework.getService(SnapshotManager.class);\n+    }\n+\n+    public String getNavigationPoint() {\n+        String url = getContext().getURL();\n+        String point = null;\n+        if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLEGROUPS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLEGROUP)) {\n+            point = ApiBrowserConstants.LIST_BUNDLEGROUPS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLE)) {\n+            point = ApiBrowserConstants.LIST_BUNDLES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_COMPONENTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_COMPONENT)) {\n+            point = ApiBrowserConstants.LIST_COMPONENTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_SERVICES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_SERVICE)) {\n+            point = ApiBrowserConstants.LIST_SERVICES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_EXTENSIONPOINTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_EXTENSIONPOINT)) {\n+            point = ApiBrowserConstants.LIST_EXTENSIONPOINTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_CONTRIBUTIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_CONTRIBUTION)) {\n+            point = ApiBrowserConstants.LIST_CONTRIBUTIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_OPERATIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_OPERATION)) {\n+            point = ApiBrowserConstants.LIST_OPERATIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_DOCUMENTATION)) {\n+            point = ApiBrowserConstants.VIEW_DOCUMENTATION;\n+        }\n+        if (point == null) {\n+            // check plugins\n+            List<Plugin<?>> plugins = getSnapshotManager().getPlugins();\n+            for (Plugin<?> plugin : plugins) {\n+                point = plugin.getView(url);\n+                if (point != null) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return point;\n+    }\n+\n+    @GET\n+    @Produces(\"text/html\")\n+    public Object doGet() {\n+        return getView(\"index\").arg(\"hideNav\", Boolean.TRUE);\n+    }\n+\n+    @Path(\"latest\")\n+    public Resource getLatest() {\n+        List<DistributionSnapshot> snaps = listPersistedDistributions();\n+        Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                           .filter(snap -> snap.getName()\n+                                                                               .toLowerCase()\n+                                                                               .startsWith(\"nuxeo platform\"))\n+                                                           .findFirst();\n+\n+        String latest = \"current\";\n+        if (distribution.isPresent()) {\n+            latest = distribution.get().getKey();\n+        }\n+        return ctx.newObject(\"redirectWO\", \"latest\", latest);\n+    }\n+\n+    @Path(\"{distributionId}\")\n+    public Resource viewDistribution(@PathParam(\"distributionId\") String distributionId) {\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            return this;\n+        }\n+\n+        List<DistributionSnapshot> snaps = getSnapshotManager().listPersistentSnapshots((ctx.getCoreSession()));\n+        if (distributionId.matches(VERSION_REGEX.toString())) {\n+            String finalDistributionId = distributionId;\n+            String distribution = snaps.stream()\n+                                       .filter(s -> s.getVersion().equals(finalDistributionId))\n+                                       .findFirst()\n+                                       .map(DistributionSnapshot::getKey)\n+                                       .orElse(\"current\");\n+\n+            return ctx.newObject(\"redirectWO\", finalDistributionId, distribution);\n+        }\n+\n+        String orgDistributionId = distributionId;\n+        Boolean embeddedMode = Boolean.FALSE;\n+        if (\"adm\".equals(distributionId)) {\n+            embeddedMode = Boolean.TRUE;\n+        } else {\n+            snaps.add(getSnapshotManager().getRuntimeSnapshot());\n+            distributionId = SnapshotResolverHelper.findBestMatch(snaps, distributionId);\n+        }\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            distributionId = \"current\";\n+        }\n+\n+        if (!orgDistributionId.equals(distributionId)) {\n+            return ctx.newObject(\"redirectWO\", orgDistributionId, distributionId);\n+        }\n+\n+        ctx.setProperty(\"embeddedMode\", embeddedMode);\n+        ctx.setProperty(\"distribution\", getSnapshotManager().getSnapshot(distributionId, ctx.getCoreSession()));\n+        ctx.setProperty(DIST_ID, distributionId);\n+        return ctx.newObject(\"apibrowser\", distributionId, embeddedMode);\n+    }\n+\n+    public List<DistributionSnapshotDesc> getAvailableDistributions() {\n+        return getSnapshotManager().getAvailableDistributions(ctx.getCoreSession());\n+    }\n+\n+    public String getRuntimeDistributionName() {\n+        return SnapshotManagerComponent.RUNTIME;\n+    }\n+\n+    public DistributionSnapshot getRuntimeDistribution() {\n+        return getSnapshotManager().getRuntimeSnapshot();\n+    }\n+\n+    public List<DistributionSnapshot> listPersistedDistributions() {\n+        SnapshotManager sm = getSnapshotManager();\n+        return sm.listPersistentSnapshots(ctx.getCoreSession()).stream().sorted((o1, o2) -> {\n+            Matcher m1 = VERSION_REGEX.matcher(o1.getVersion());\n+            Matcher m2 = VERSION_REGEX.matcher(o2.getVersion());\n+\n+            if (m1.matches() && m2.matches()) {\n+                for (int i = 0; i < 3; i++) {\n+                    String s1 = m1.group(i + 1);\n+                    int c1 = s1 != null ? Integer.parseInt(s1) : 0;\n+                    String s2 = m2.group(i + 1);\n+                    int c2 = s2 != null ? Integer.parseInt(s2) : 0;\n+\n+                    if (c1 != c2 || i == 2) {\n+                        return Integer.compare(c2, c1);\n+                    }\n+                }\n+            }\n+            log.info(String.format(\"Comparing version using String between %s - %s\", o1.getVersion(), o2.getVersion()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3NjgxMg==", "bodyText": "indeed but i only moved that code -> i would prefer not modifying it to avoid unforeseen regressions in these logics", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412976812", "createdAt": "2020-04-22T13:21:51Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -0,0 +1,593 @@\n+/*\n+ * (C) Copyright 2006-2015 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+import static org.nuxeo.apidoc.snapshot.DistributionSnapshot.PROP_RELEASED;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.nuxeo.apidoc.documentation.DocumentationService;\n+import org.nuxeo.apidoc.export.ArchiveFile;\n+import org.nuxeo.apidoc.listener.AttributesExtractorStater;\n+import org.nuxeo.apidoc.plugin.Plugin;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshotDesc;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.apidoc.snapshot.SnapshotManagerComponent;\n+import org.nuxeo.apidoc.snapshot.SnapshotResolverHelper;\n+import org.nuxeo.apidoc.worker.ExtractXmlAttributesWorker;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IterableQueryResult;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.query.QueryFilter;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.work.api.Work;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.webengine.forms.FormData;\n+import org.nuxeo.ecm.webengine.model.Resource;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.exceptions.WebResourceNotFoundException;\n+import org.nuxeo.ecm.webengine.model.impl.ModuleRoot;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+@Path(\"/distribution\")\n+// needed for 5.4.1\n+@WebObject(type = \"distribution\")\n+public class Distribution extends ModuleRoot {\n+\n+    public static final String DIST_ID = \"distId\";\n+\n+    protected static final Log log = LogFactory.getLog(Distribution.class);\n+\n+    protected static final Pattern VERSION_REGEX = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+))?(?:\\\\.(\\\\d+))?(?:-.*)?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    // handle errors\n+    @Override\n+    public Object handleError(Throwable t) {\n+        if (t instanceof WebResourceNotFoundException) {\n+            return Response.status(404).entity(getTemplate(\"error/error_404.ftl\")).type(\"text/html\").build();\n+        } else {\n+            return super.handleError(t);\n+        }\n+    }\n+\n+    protected SnapshotManager getSnapshotManager() {\n+        return Framework.getService(SnapshotManager.class);\n+    }\n+\n+    public String getNavigationPoint() {\n+        String url = getContext().getURL();\n+        String point = null;\n+        if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLEGROUPS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLEGROUP)) {\n+            point = ApiBrowserConstants.LIST_BUNDLEGROUPS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLE)) {\n+            point = ApiBrowserConstants.LIST_BUNDLES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_COMPONENTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_COMPONENT)) {\n+            point = ApiBrowserConstants.LIST_COMPONENTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_SERVICES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_SERVICE)) {\n+            point = ApiBrowserConstants.LIST_SERVICES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_EXTENSIONPOINTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_EXTENSIONPOINT)) {\n+            point = ApiBrowserConstants.LIST_EXTENSIONPOINTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_CONTRIBUTIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_CONTRIBUTION)) {\n+            point = ApiBrowserConstants.LIST_CONTRIBUTIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_OPERATIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_OPERATION)) {\n+            point = ApiBrowserConstants.LIST_OPERATIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_DOCUMENTATION)) {\n+            point = ApiBrowserConstants.VIEW_DOCUMENTATION;\n+        }\n+        if (point == null) {\n+            // check plugins\n+            List<Plugin<?>> plugins = getSnapshotManager().getPlugins();\n+            for (Plugin<?> plugin : plugins) {\n+                point = plugin.getView(url);\n+                if (point != null) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return point;\n+    }\n+\n+    @GET\n+    @Produces(\"text/html\")\n+    public Object doGet() {\n+        return getView(\"index\").arg(\"hideNav\", Boolean.TRUE);\n+    }\n+\n+    @Path(\"latest\")\n+    public Resource getLatest() {\n+        List<DistributionSnapshot> snaps = listPersistedDistributions();\n+        Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                           .filter(snap -> snap.getName()\n+                                                                               .toLowerCase()\n+                                                                               .startsWith(\"nuxeo platform\"))\n+                                                           .findFirst();\n+\n+        String latest = \"current\";\n+        if (distribution.isPresent()) {\n+            latest = distribution.get().getKey();\n+        }\n+        return ctx.newObject(\"redirectWO\", \"latest\", latest);\n+    }\n+\n+    @Path(\"{distributionId}\")\n+    public Resource viewDistribution(@PathParam(\"distributionId\") String distributionId) {\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            return this;\n+        }\n+\n+        List<DistributionSnapshot> snaps = getSnapshotManager().listPersistentSnapshots((ctx.getCoreSession()));\n+        if (distributionId.matches(VERSION_REGEX.toString())) {\n+            String finalDistributionId = distributionId;\n+            String distribution = snaps.stream()\n+                                       .filter(s -> s.getVersion().equals(finalDistributionId))\n+                                       .findFirst()\n+                                       .map(DistributionSnapshot::getKey)\n+                                       .orElse(\"current\");\n+\n+            return ctx.newObject(\"redirectWO\", finalDistributionId, distribution);\n+        }\n+\n+        String orgDistributionId = distributionId;\n+        Boolean embeddedMode = Boolean.FALSE;\n+        if (\"adm\".equals(distributionId)) {\n+            embeddedMode = Boolean.TRUE;\n+        } else {\n+            snaps.add(getSnapshotManager().getRuntimeSnapshot());\n+            distributionId = SnapshotResolverHelper.findBestMatch(snaps, distributionId);\n+        }\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            distributionId = \"current\";\n+        }\n+\n+        if (!orgDistributionId.equals(distributionId)) {\n+            return ctx.newObject(\"redirectWO\", orgDistributionId, distributionId);\n+        }\n+\n+        ctx.setProperty(\"embeddedMode\", embeddedMode);\n+        ctx.setProperty(\"distribution\", getSnapshotManager().getSnapshot(distributionId, ctx.getCoreSession()));\n+        ctx.setProperty(DIST_ID, distributionId);\n+        return ctx.newObject(\"apibrowser\", distributionId, embeddedMode);\n+    }\n+\n+    public List<DistributionSnapshotDesc> getAvailableDistributions() {\n+        return getSnapshotManager().getAvailableDistributions(ctx.getCoreSession());\n+    }\n+\n+    public String getRuntimeDistributionName() {\n+        return SnapshotManagerComponent.RUNTIME;\n+    }\n+\n+    public DistributionSnapshot getRuntimeDistribution() {\n+        return getSnapshotManager().getRuntimeSnapshot();\n+    }\n+\n+    public List<DistributionSnapshot> listPersistedDistributions() {\n+        SnapshotManager sm = getSnapshotManager();\n+        return sm.listPersistentSnapshots(ctx.getCoreSession()).stream().sorted((o1, o2) -> {\n+            Matcher m1 = VERSION_REGEX.matcher(o1.getVersion());\n+            Matcher m2 = VERSION_REGEX.matcher(o2.getVersion());\n+\n+            if (m1.matches() && m2.matches()) {\n+                for (int i = 0; i < 3; i++) {\n+                    String s1 = m1.group(i + 1);\n+                    int c1 = s1 != null ? Integer.parseInt(s1) : 0;\n+                    String s2 = m2.group(i + 1);\n+                    int c2 = s2 != null ? Integer.parseInt(s2) : 0;\n+\n+                    if (c1 != c2 || i == 2) {\n+                        return Integer.compare(c2, c1);\n+                    }\n+                }\n+            }\n+            log.info(String.format(\"Comparing version using String between %s - %s\", o1.getVersion(), o2.getVersion()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0NzA5Nw=="}, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjI0Nzk2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0NDowNlrOGJ0X4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMTo1OFrOGJ2HFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0ODQ0OA==", "bodyText": "The only usage I see is in getLatest which turns back the result to stream, should this method return Stream?", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412948448", "createdAt": "2020-04-22T12:44:06Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -0,0 +1,593 @@\n+/*\n+ * (C) Copyright 2006-2015 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+import static org.nuxeo.apidoc.snapshot.DistributionSnapshot.PROP_RELEASED;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.nuxeo.apidoc.documentation.DocumentationService;\n+import org.nuxeo.apidoc.export.ArchiveFile;\n+import org.nuxeo.apidoc.listener.AttributesExtractorStater;\n+import org.nuxeo.apidoc.plugin.Plugin;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshotDesc;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.apidoc.snapshot.SnapshotManagerComponent;\n+import org.nuxeo.apidoc.snapshot.SnapshotResolverHelper;\n+import org.nuxeo.apidoc.worker.ExtractXmlAttributesWorker;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IterableQueryResult;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.query.QueryFilter;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.work.api.Work;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.webengine.forms.FormData;\n+import org.nuxeo.ecm.webengine.model.Resource;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.exceptions.WebResourceNotFoundException;\n+import org.nuxeo.ecm.webengine.model.impl.ModuleRoot;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+@Path(\"/distribution\")\n+// needed for 5.4.1\n+@WebObject(type = \"distribution\")\n+public class Distribution extends ModuleRoot {\n+\n+    public static final String DIST_ID = \"distId\";\n+\n+    protected static final Log log = LogFactory.getLog(Distribution.class);\n+\n+    protected static final Pattern VERSION_REGEX = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+))?(?:\\\\.(\\\\d+))?(?:-.*)?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    // handle errors\n+    @Override\n+    public Object handleError(Throwable t) {\n+        if (t instanceof WebResourceNotFoundException) {\n+            return Response.status(404).entity(getTemplate(\"error/error_404.ftl\")).type(\"text/html\").build();\n+        } else {\n+            return super.handleError(t);\n+        }\n+    }\n+\n+    protected SnapshotManager getSnapshotManager() {\n+        return Framework.getService(SnapshotManager.class);\n+    }\n+\n+    public String getNavigationPoint() {\n+        String url = getContext().getURL();\n+        String point = null;\n+        if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLEGROUPS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLEGROUP)) {\n+            point = ApiBrowserConstants.LIST_BUNDLEGROUPS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLE)) {\n+            point = ApiBrowserConstants.LIST_BUNDLES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_COMPONENTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_COMPONENT)) {\n+            point = ApiBrowserConstants.LIST_COMPONENTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_SERVICES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_SERVICE)) {\n+            point = ApiBrowserConstants.LIST_SERVICES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_EXTENSIONPOINTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_EXTENSIONPOINT)) {\n+            point = ApiBrowserConstants.LIST_EXTENSIONPOINTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_CONTRIBUTIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_CONTRIBUTION)) {\n+            point = ApiBrowserConstants.LIST_CONTRIBUTIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_OPERATIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_OPERATION)) {\n+            point = ApiBrowserConstants.LIST_OPERATIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_DOCUMENTATION)) {\n+            point = ApiBrowserConstants.VIEW_DOCUMENTATION;\n+        }\n+        if (point == null) {\n+            // check plugins\n+            List<Plugin<?>> plugins = getSnapshotManager().getPlugins();\n+            for (Plugin<?> plugin : plugins) {\n+                point = plugin.getView(url);\n+                if (point != null) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return point;\n+    }\n+\n+    @GET\n+    @Produces(\"text/html\")\n+    public Object doGet() {\n+        return getView(\"index\").arg(\"hideNav\", Boolean.TRUE);\n+    }\n+\n+    @Path(\"latest\")\n+    public Resource getLatest() {\n+        List<DistributionSnapshot> snaps = listPersistedDistributions();\n+        Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                           .filter(snap -> snap.getName()\n+                                                                               .toLowerCase()\n+                                                                               .startsWith(\"nuxeo platform\"))\n+                                                           .findFirst();\n+\n+        String latest = \"current\";\n+        if (distribution.isPresent()) {\n+            latest = distribution.get().getKey();\n+        }\n+        return ctx.newObject(\"redirectWO\", \"latest\", latest);\n+    }\n+\n+    @Path(\"{distributionId}\")\n+    public Resource viewDistribution(@PathParam(\"distributionId\") String distributionId) {\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            return this;\n+        }\n+\n+        List<DistributionSnapshot> snaps = getSnapshotManager().listPersistentSnapshots((ctx.getCoreSession()));\n+        if (distributionId.matches(VERSION_REGEX.toString())) {\n+            String finalDistributionId = distributionId;\n+            String distribution = snaps.stream()\n+                                       .filter(s -> s.getVersion().equals(finalDistributionId))\n+                                       .findFirst()\n+                                       .map(DistributionSnapshot::getKey)\n+                                       .orElse(\"current\");\n+\n+            return ctx.newObject(\"redirectWO\", finalDistributionId, distribution);\n+        }\n+\n+        String orgDistributionId = distributionId;\n+        Boolean embeddedMode = Boolean.FALSE;\n+        if (\"adm\".equals(distributionId)) {\n+            embeddedMode = Boolean.TRUE;\n+        } else {\n+            snaps.add(getSnapshotManager().getRuntimeSnapshot());\n+            distributionId = SnapshotResolverHelper.findBestMatch(snaps, distributionId);\n+        }\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            distributionId = \"current\";\n+        }\n+\n+        if (!orgDistributionId.equals(distributionId)) {\n+            return ctx.newObject(\"redirectWO\", orgDistributionId, distributionId);\n+        }\n+\n+        ctx.setProperty(\"embeddedMode\", embeddedMode);\n+        ctx.setProperty(\"distribution\", getSnapshotManager().getSnapshot(distributionId, ctx.getCoreSession()));\n+        ctx.setProperty(DIST_ID, distributionId);\n+        return ctx.newObject(\"apibrowser\", distributionId, embeddedMode);\n+    }\n+\n+    public List<DistributionSnapshotDesc> getAvailableDistributions() {\n+        return getSnapshotManager().getAvailableDistributions(ctx.getCoreSession());\n+    }\n+\n+    public String getRuntimeDistributionName() {\n+        return SnapshotManagerComponent.RUNTIME;\n+    }\n+\n+    public DistributionSnapshot getRuntimeDistribution() {\n+        return getSnapshotManager().getRuntimeSnapshot();\n+    }\n+\n+    public List<DistributionSnapshot> listPersistedDistributions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3NjkxOA==", "bodyText": "indeed but i only moved that code -> i would prefer not modifying it to avoid unforeseen regressions in these logics", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412976918", "createdAt": "2020-04-22T13:21:58Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -0,0 +1,593 @@\n+/*\n+ * (C) Copyright 2006-2015 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+import static org.nuxeo.apidoc.snapshot.DistributionSnapshot.PROP_RELEASED;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.nuxeo.apidoc.documentation.DocumentationService;\n+import org.nuxeo.apidoc.export.ArchiveFile;\n+import org.nuxeo.apidoc.listener.AttributesExtractorStater;\n+import org.nuxeo.apidoc.plugin.Plugin;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshotDesc;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.apidoc.snapshot.SnapshotManagerComponent;\n+import org.nuxeo.apidoc.snapshot.SnapshotResolverHelper;\n+import org.nuxeo.apidoc.worker.ExtractXmlAttributesWorker;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IterableQueryResult;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.query.QueryFilter;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.work.api.Work;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.webengine.forms.FormData;\n+import org.nuxeo.ecm.webengine.model.Resource;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.exceptions.WebResourceNotFoundException;\n+import org.nuxeo.ecm.webengine.model.impl.ModuleRoot;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+@Path(\"/distribution\")\n+// needed for 5.4.1\n+@WebObject(type = \"distribution\")\n+public class Distribution extends ModuleRoot {\n+\n+    public static final String DIST_ID = \"distId\";\n+\n+    protected static final Log log = LogFactory.getLog(Distribution.class);\n+\n+    protected static final Pattern VERSION_REGEX = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+))?(?:\\\\.(\\\\d+))?(?:-.*)?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    // handle errors\n+    @Override\n+    public Object handleError(Throwable t) {\n+        if (t instanceof WebResourceNotFoundException) {\n+            return Response.status(404).entity(getTemplate(\"error/error_404.ftl\")).type(\"text/html\").build();\n+        } else {\n+            return super.handleError(t);\n+        }\n+    }\n+\n+    protected SnapshotManager getSnapshotManager() {\n+        return Framework.getService(SnapshotManager.class);\n+    }\n+\n+    public String getNavigationPoint() {\n+        String url = getContext().getURL();\n+        String point = null;\n+        if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLEGROUPS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLEGROUP)) {\n+            point = ApiBrowserConstants.LIST_BUNDLEGROUPS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLE)) {\n+            point = ApiBrowserConstants.LIST_BUNDLES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_COMPONENTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_COMPONENT)) {\n+            point = ApiBrowserConstants.LIST_COMPONENTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_SERVICES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_SERVICE)) {\n+            point = ApiBrowserConstants.LIST_SERVICES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_EXTENSIONPOINTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_EXTENSIONPOINT)) {\n+            point = ApiBrowserConstants.LIST_EXTENSIONPOINTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_CONTRIBUTIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_CONTRIBUTION)) {\n+            point = ApiBrowserConstants.LIST_CONTRIBUTIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_OPERATIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_OPERATION)) {\n+            point = ApiBrowserConstants.LIST_OPERATIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_DOCUMENTATION)) {\n+            point = ApiBrowserConstants.VIEW_DOCUMENTATION;\n+        }\n+        if (point == null) {\n+            // check plugins\n+            List<Plugin<?>> plugins = getSnapshotManager().getPlugins();\n+            for (Plugin<?> plugin : plugins) {\n+                point = plugin.getView(url);\n+                if (point != null) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return point;\n+    }\n+\n+    @GET\n+    @Produces(\"text/html\")\n+    public Object doGet() {\n+        return getView(\"index\").arg(\"hideNav\", Boolean.TRUE);\n+    }\n+\n+    @Path(\"latest\")\n+    public Resource getLatest() {\n+        List<DistributionSnapshot> snaps = listPersistedDistributions();\n+        Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                           .filter(snap -> snap.getName()\n+                                                                               .toLowerCase()\n+                                                                               .startsWith(\"nuxeo platform\"))\n+                                                           .findFirst();\n+\n+        String latest = \"current\";\n+        if (distribution.isPresent()) {\n+            latest = distribution.get().getKey();\n+        }\n+        return ctx.newObject(\"redirectWO\", \"latest\", latest);\n+    }\n+\n+    @Path(\"{distributionId}\")\n+    public Resource viewDistribution(@PathParam(\"distributionId\") String distributionId) {\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            return this;\n+        }\n+\n+        List<DistributionSnapshot> snaps = getSnapshotManager().listPersistentSnapshots((ctx.getCoreSession()));\n+        if (distributionId.matches(VERSION_REGEX.toString())) {\n+            String finalDistributionId = distributionId;\n+            String distribution = snaps.stream()\n+                                       .filter(s -> s.getVersion().equals(finalDistributionId))\n+                                       .findFirst()\n+                                       .map(DistributionSnapshot::getKey)\n+                                       .orElse(\"current\");\n+\n+            return ctx.newObject(\"redirectWO\", finalDistributionId, distribution);\n+        }\n+\n+        String orgDistributionId = distributionId;\n+        Boolean embeddedMode = Boolean.FALSE;\n+        if (\"adm\".equals(distributionId)) {\n+            embeddedMode = Boolean.TRUE;\n+        } else {\n+            snaps.add(getSnapshotManager().getRuntimeSnapshot());\n+            distributionId = SnapshotResolverHelper.findBestMatch(snaps, distributionId);\n+        }\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            distributionId = \"current\";\n+        }\n+\n+        if (!orgDistributionId.equals(distributionId)) {\n+            return ctx.newObject(\"redirectWO\", orgDistributionId, distributionId);\n+        }\n+\n+        ctx.setProperty(\"embeddedMode\", embeddedMode);\n+        ctx.setProperty(\"distribution\", getSnapshotManager().getSnapshot(distributionId, ctx.getCoreSession()));\n+        ctx.setProperty(DIST_ID, distributionId);\n+        return ctx.newObject(\"apibrowser\", distributionId, embeddedMode);\n+    }\n+\n+    public List<DistributionSnapshotDesc> getAvailableDistributions() {\n+        return getSnapshotManager().getAvailableDistributions(ctx.getCoreSession());\n+    }\n+\n+    public String getRuntimeDistributionName() {\n+        return SnapshotManagerComponent.RUNTIME;\n+    }\n+\n+    public DistributionSnapshot getRuntimeDistribution() {\n+        return getSnapshotManager().getRuntimeSnapshot();\n+    }\n+\n+    public List<DistributionSnapshot> listPersistedDistributions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0ODQ0OA=="}, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjI2MTc0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0Njo1MFrOGJ0gHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMjowNFrOGJ2HTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MDU1Nw==", "bodyText": "You should use try-with-resources:\ntry (OutputStream out = new FileOutputStream(tmp)) {\n    ds.exportDocumentation(getContext().getCoreSession(), out);\n    out.flush();\n}", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412950557", "createdAt": "2020-04-22T12:46:50Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -0,0 +1,593 @@\n+/*\n+ * (C) Copyright 2006-2015 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+import static org.nuxeo.apidoc.snapshot.DistributionSnapshot.PROP_RELEASED;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.nuxeo.apidoc.documentation.DocumentationService;\n+import org.nuxeo.apidoc.export.ArchiveFile;\n+import org.nuxeo.apidoc.listener.AttributesExtractorStater;\n+import org.nuxeo.apidoc.plugin.Plugin;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshotDesc;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.apidoc.snapshot.SnapshotManagerComponent;\n+import org.nuxeo.apidoc.snapshot.SnapshotResolverHelper;\n+import org.nuxeo.apidoc.worker.ExtractXmlAttributesWorker;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IterableQueryResult;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.query.QueryFilter;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.work.api.Work;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.webengine.forms.FormData;\n+import org.nuxeo.ecm.webengine.model.Resource;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.exceptions.WebResourceNotFoundException;\n+import org.nuxeo.ecm.webengine.model.impl.ModuleRoot;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+@Path(\"/distribution\")\n+// needed for 5.4.1\n+@WebObject(type = \"distribution\")\n+public class Distribution extends ModuleRoot {\n+\n+    public static final String DIST_ID = \"distId\";\n+\n+    protected static final Log log = LogFactory.getLog(Distribution.class);\n+\n+    protected static final Pattern VERSION_REGEX = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+))?(?:\\\\.(\\\\d+))?(?:-.*)?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    // handle errors\n+    @Override\n+    public Object handleError(Throwable t) {\n+        if (t instanceof WebResourceNotFoundException) {\n+            return Response.status(404).entity(getTemplate(\"error/error_404.ftl\")).type(\"text/html\").build();\n+        } else {\n+            return super.handleError(t);\n+        }\n+    }\n+\n+    protected SnapshotManager getSnapshotManager() {\n+        return Framework.getService(SnapshotManager.class);\n+    }\n+\n+    public String getNavigationPoint() {\n+        String url = getContext().getURL();\n+        String point = null;\n+        if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLEGROUPS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLEGROUP)) {\n+            point = ApiBrowserConstants.LIST_BUNDLEGROUPS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLE)) {\n+            point = ApiBrowserConstants.LIST_BUNDLES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_COMPONENTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_COMPONENT)) {\n+            point = ApiBrowserConstants.LIST_COMPONENTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_SERVICES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_SERVICE)) {\n+            point = ApiBrowserConstants.LIST_SERVICES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_EXTENSIONPOINTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_EXTENSIONPOINT)) {\n+            point = ApiBrowserConstants.LIST_EXTENSIONPOINTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_CONTRIBUTIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_CONTRIBUTION)) {\n+            point = ApiBrowserConstants.LIST_CONTRIBUTIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_OPERATIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_OPERATION)) {\n+            point = ApiBrowserConstants.LIST_OPERATIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_DOCUMENTATION)) {\n+            point = ApiBrowserConstants.VIEW_DOCUMENTATION;\n+        }\n+        if (point == null) {\n+            // check plugins\n+            List<Plugin<?>> plugins = getSnapshotManager().getPlugins();\n+            for (Plugin<?> plugin : plugins) {\n+                point = plugin.getView(url);\n+                if (point != null) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return point;\n+    }\n+\n+    @GET\n+    @Produces(\"text/html\")\n+    public Object doGet() {\n+        return getView(\"index\").arg(\"hideNav\", Boolean.TRUE);\n+    }\n+\n+    @Path(\"latest\")\n+    public Resource getLatest() {\n+        List<DistributionSnapshot> snaps = listPersistedDistributions();\n+        Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                           .filter(snap -> snap.getName()\n+                                                                               .toLowerCase()\n+                                                                               .startsWith(\"nuxeo platform\"))\n+                                                           .findFirst();\n+\n+        String latest = \"current\";\n+        if (distribution.isPresent()) {\n+            latest = distribution.get().getKey();\n+        }\n+        return ctx.newObject(\"redirectWO\", \"latest\", latest);\n+    }\n+\n+    @Path(\"{distributionId}\")\n+    public Resource viewDistribution(@PathParam(\"distributionId\") String distributionId) {\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            return this;\n+        }\n+\n+        List<DistributionSnapshot> snaps = getSnapshotManager().listPersistentSnapshots((ctx.getCoreSession()));\n+        if (distributionId.matches(VERSION_REGEX.toString())) {\n+            String finalDistributionId = distributionId;\n+            String distribution = snaps.stream()\n+                                       .filter(s -> s.getVersion().equals(finalDistributionId))\n+                                       .findFirst()\n+                                       .map(DistributionSnapshot::getKey)\n+                                       .orElse(\"current\");\n+\n+            return ctx.newObject(\"redirectWO\", finalDistributionId, distribution);\n+        }\n+\n+        String orgDistributionId = distributionId;\n+        Boolean embeddedMode = Boolean.FALSE;\n+        if (\"adm\".equals(distributionId)) {\n+            embeddedMode = Boolean.TRUE;\n+        } else {\n+            snaps.add(getSnapshotManager().getRuntimeSnapshot());\n+            distributionId = SnapshotResolverHelper.findBestMatch(snaps, distributionId);\n+        }\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            distributionId = \"current\";\n+        }\n+\n+        if (!orgDistributionId.equals(distributionId)) {\n+            return ctx.newObject(\"redirectWO\", orgDistributionId, distributionId);\n+        }\n+\n+        ctx.setProperty(\"embeddedMode\", embeddedMode);\n+        ctx.setProperty(\"distribution\", getSnapshotManager().getSnapshot(distributionId, ctx.getCoreSession()));\n+        ctx.setProperty(DIST_ID, distributionId);\n+        return ctx.newObject(\"apibrowser\", distributionId, embeddedMode);\n+    }\n+\n+    public List<DistributionSnapshotDesc> getAvailableDistributions() {\n+        return getSnapshotManager().getAvailableDistributions(ctx.getCoreSession());\n+    }\n+\n+    public String getRuntimeDistributionName() {\n+        return SnapshotManagerComponent.RUNTIME;\n+    }\n+\n+    public DistributionSnapshot getRuntimeDistribution() {\n+        return getSnapshotManager().getRuntimeSnapshot();\n+    }\n+\n+    public List<DistributionSnapshot> listPersistedDistributions() {\n+        SnapshotManager sm = getSnapshotManager();\n+        return sm.listPersistentSnapshots(ctx.getCoreSession()).stream().sorted((o1, o2) -> {\n+            Matcher m1 = VERSION_REGEX.matcher(o1.getVersion());\n+            Matcher m2 = VERSION_REGEX.matcher(o2.getVersion());\n+\n+            if (m1.matches() && m2.matches()) {\n+                for (int i = 0; i < 3; i++) {\n+                    String s1 = m1.group(i + 1);\n+                    int c1 = s1 != null ? Integer.parseInt(s1) : 0;\n+                    String s2 = m2.group(i + 1);\n+                    int c2 = s2 != null ? Integer.parseInt(s2) : 0;\n+\n+                    if (c1 != c2 || i == 2) {\n+                        return Integer.compare(c2, c1);\n+                    }\n+                }\n+            }\n+            log.info(String.format(\"Comparing version using String between %s - %s\", o1.getVersion(), o2.getVersion()));\n+            return o2.getVersion().compareTo(o1.getVersion());\n+        }).filter(s -> !s.isHidden()).collect(Collectors.toList());\n+    }\n+\n+    public Map<String, DistributionSnapshot> getPersistedDistributions() {\n+        return getSnapshotManager().getPersistentSnapshots(ctx.getCoreSession());\n+    }\n+\n+    public DistributionSnapshot getCurrentDistribution() {\n+        String distId = (String) ctx.getProperty(DIST_ID);\n+        DistributionSnapshot currentDistribution = (DistributionSnapshot) ctx.getProperty(\"currentDistribution\");\n+        if (currentDistribution == null || !currentDistribution.getKey().equals(distId)) {\n+            currentDistribution = getSnapshotManager().getSnapshot(distId, ctx.getCoreSession());\n+            ctx.setProperty(\"currentDistribution\", currentDistribution);\n+        }\n+        return currentDistribution;\n+    }\n+\n+    @POST\n+    @Path(\"save\")\n+    @Produces(\"text/html\")\n+    public Object doSave() throws NamingException, NotSupportedException, SystemException, RollbackException,\n+            HeuristicMixedException, HeuristicRollbackException, ParseException {\n+        if (!canAddDocumentation()) {\n+            return null;\n+        }\n+        FormData formData = getContext().getForm();\n+        String distribLabel = formData.getString(\"name\");\n+\n+        log.info(\"Start Snapshot...\");\n+        boolean startedTx = false;\n+        UserTransaction tx = TransactionHelper.lookupUserTransaction();\n+        if (tx != null && !TransactionHelper.isTransactionActiveOrMarkedRollback()) {\n+            tx.begin();\n+            startedTx = true;\n+        }\n+\n+        Map<String, Serializable> otherProperties = readFormData(formData);\n+        try {\n+            getSnapshotManager().persistRuntimeSnapshot(getContext().getCoreSession(), distribLabel, otherProperties);\n+\n+        } catch (NuxeoException e) {\n+            log.error(\"Error during storage\", e);\n+            if (tx != null) {\n+                tx.rollback();\n+            }\n+            return getView(\"savedKO\").arg(\"message\", e.getMessage());\n+        }\n+        log.info(\"Snapshot saved.\");\n+        if (tx != null && startedTx) {\n+            tx.commit();\n+        }\n+\n+        String redirectUrl = getContext().getBaseURL() + getPath();\n+        log.debug(\"Path => \" + redirectUrl);\n+        return getView(\"saved\");\n+    }\n+\n+    protected Map<String, Serializable> readFormData(FormData formData) {\n+        Map<String, Serializable> properties = new HashMap<>();\n+\n+        // Release date\n+        String released = formData.getString(\"released\");\n+        if (StringUtils.isNotBlank(released)) {\n+            LocalDate date = LocalDate.parse(released);\n+            Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();\n+            properties.put(PROP_RELEASED, java.util.Date.from(instant));\n+        }\n+\n+        return properties;\n+    }\n+\n+    @POST\n+    @Path(\"saveExtended\")\n+    @Produces(\"text/html\")\n+    public Object doSaveExtended() throws NamingException, NotSupportedException, SystemException, SecurityException,\n+            RollbackException, HeuristicMixedException, HeuristicRollbackException {\n+        if (!canAddDocumentation()) {\n+            return null;\n+        }\n+\n+        FormData formData = getContext().getForm();\n+\n+        String distribLabel = formData.getString(\"name\");\n+        String bundleList = formData.getString(\"bundles\");\n+        String pkgList = formData.getString(\"packages\");\n+        SnapshotFilter filter = new SnapshotFilter(distribLabel);\n+\n+        if (bundleList != null) {\n+            String[] bundles = bundleList.split(\"\\n\");\n+            for (String bundleId : bundles) {\n+                filter.addBundlePrefix(bundleId);\n+            }\n+        }\n+\n+        if (pkgList != null) {\n+            String[] packages = pkgList.split(\"\\\\r?\\\\n\");\n+            for (String pkg : packages) {\n+                filter.addPackagesPrefix(pkg);\n+            }\n+        }\n+\n+        Map<String, Serializable> otherProperties = readFormData(formData);\n+\n+        log.info(\"Start Snapshot...\");\n+        boolean startedTx = false;\n+        UserTransaction tx = TransactionHelper.lookupUserTransaction();\n+        if (tx != null && !TransactionHelper.isTransactionActiveOrMarkedRollback()) {\n+            tx.begin();\n+            startedTx = true;\n+        }\n+        try {\n+            getSnapshotManager().persistRuntimeSnapshot(getContext().getCoreSession(), distribLabel, otherProperties,\n+                    filter);\n+        } catch (NuxeoException e) {\n+            log.error(\"Error during storage\", e);\n+            if (tx != null) {\n+                tx.rollback();\n+            }\n+            return getView(\"savedKO\").arg(\"message\", e.getMessage());\n+        }\n+        log.info(\"Snapshot saved.\");\n+        if (tx != null && startedTx) {\n+            tx.commit();\n+        }\n+        return getView(\"saved\");\n+    }\n+\n+    /**\n+     * Returns the runtime snapshot json export.\n+     *\n+     * @since 11.1\n+     */\n+    @GET\n+    @Path(\"json\")\n+    @Produces(\"application/json\")\n+    public Object getJson() throws IOException {\n+        // init potential resources depending on request\n+        getSnapshotManager().initWebContext(getContext().getRequest());\n+        DistributionSnapshot snap = getSnapshotManager().getRuntimeSnapshot();\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        snap.writeJson(out);\n+        return out.toString();\n+    }\n+\n+    public String getDocumentationInfo() {\n+        DocumentationService ds = Framework.getService(DocumentationService.class);\n+        return ds.getDocumentationStats(getContext().getCoreSession());\n+    }\n+\n+    protected File getExportTmpFile() {\n+        File tmpFile = new File(Environment.getDefault().getTemp(), \"export.zip\");\n+        if (tmpFile.exists()) {\n+            tmpFile.delete();\n+        }\n+        tmpFile.deleteOnExit();\n+        return tmpFile;\n+    }\n+\n+    @GET\n+    @Path(\"downloadDoc\")\n+    public Response downloadDoc() throws IOException {\n+        DocumentationService ds = Framework.getService(DocumentationService.class);\n+        File tmp = getExportTmpFile();\n+        tmp.createNewFile();\n+        OutputStream out = new FileOutputStream(tmp);\n+        ds.exportDocumentation(getContext().getCoreSession(), out);\n+        out.flush();\n+        out.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 416}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3Njk3Mw==", "bodyText": "indeed but i only moved that code -> i would prefer not modifying it to avoid unforeseen regressions in these logics", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412976973", "createdAt": "2020-04-22T13:22:04Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -0,0 +1,593 @@\n+/*\n+ * (C) Copyright 2006-2015 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+import static org.nuxeo.apidoc.snapshot.DistributionSnapshot.PROP_RELEASED;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.nuxeo.apidoc.documentation.DocumentationService;\n+import org.nuxeo.apidoc.export.ArchiveFile;\n+import org.nuxeo.apidoc.listener.AttributesExtractorStater;\n+import org.nuxeo.apidoc.plugin.Plugin;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshotDesc;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.apidoc.snapshot.SnapshotManagerComponent;\n+import org.nuxeo.apidoc.snapshot.SnapshotResolverHelper;\n+import org.nuxeo.apidoc.worker.ExtractXmlAttributesWorker;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IterableQueryResult;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.query.QueryFilter;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.work.api.Work;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.webengine.forms.FormData;\n+import org.nuxeo.ecm.webengine.model.Resource;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.exceptions.WebResourceNotFoundException;\n+import org.nuxeo.ecm.webengine.model.impl.ModuleRoot;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+@Path(\"/distribution\")\n+// needed for 5.4.1\n+@WebObject(type = \"distribution\")\n+public class Distribution extends ModuleRoot {\n+\n+    public static final String DIST_ID = \"distId\";\n+\n+    protected static final Log log = LogFactory.getLog(Distribution.class);\n+\n+    protected static final Pattern VERSION_REGEX = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+))?(?:\\\\.(\\\\d+))?(?:-.*)?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    // handle errors\n+    @Override\n+    public Object handleError(Throwable t) {\n+        if (t instanceof WebResourceNotFoundException) {\n+            return Response.status(404).entity(getTemplate(\"error/error_404.ftl\")).type(\"text/html\").build();\n+        } else {\n+            return super.handleError(t);\n+        }\n+    }\n+\n+    protected SnapshotManager getSnapshotManager() {\n+        return Framework.getService(SnapshotManager.class);\n+    }\n+\n+    public String getNavigationPoint() {\n+        String url = getContext().getURL();\n+        String point = null;\n+        if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLEGROUPS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLEGROUP)) {\n+            point = ApiBrowserConstants.LIST_BUNDLEGROUPS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLE)) {\n+            point = ApiBrowserConstants.LIST_BUNDLES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_COMPONENTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_COMPONENT)) {\n+            point = ApiBrowserConstants.LIST_COMPONENTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_SERVICES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_SERVICE)) {\n+            point = ApiBrowserConstants.LIST_SERVICES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_EXTENSIONPOINTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_EXTENSIONPOINT)) {\n+            point = ApiBrowserConstants.LIST_EXTENSIONPOINTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_CONTRIBUTIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_CONTRIBUTION)) {\n+            point = ApiBrowserConstants.LIST_CONTRIBUTIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_OPERATIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_OPERATION)) {\n+            point = ApiBrowserConstants.LIST_OPERATIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_DOCUMENTATION)) {\n+            point = ApiBrowserConstants.VIEW_DOCUMENTATION;\n+        }\n+        if (point == null) {\n+            // check plugins\n+            List<Plugin<?>> plugins = getSnapshotManager().getPlugins();\n+            for (Plugin<?> plugin : plugins) {\n+                point = plugin.getView(url);\n+                if (point != null) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return point;\n+    }\n+\n+    @GET\n+    @Produces(\"text/html\")\n+    public Object doGet() {\n+        return getView(\"index\").arg(\"hideNav\", Boolean.TRUE);\n+    }\n+\n+    @Path(\"latest\")\n+    public Resource getLatest() {\n+        List<DistributionSnapshot> snaps = listPersistedDistributions();\n+        Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                           .filter(snap -> snap.getName()\n+                                                                               .toLowerCase()\n+                                                                               .startsWith(\"nuxeo platform\"))\n+                                                           .findFirst();\n+\n+        String latest = \"current\";\n+        if (distribution.isPresent()) {\n+            latest = distribution.get().getKey();\n+        }\n+        return ctx.newObject(\"redirectWO\", \"latest\", latest);\n+    }\n+\n+    @Path(\"{distributionId}\")\n+    public Resource viewDistribution(@PathParam(\"distributionId\") String distributionId) {\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            return this;\n+        }\n+\n+        List<DistributionSnapshot> snaps = getSnapshotManager().listPersistentSnapshots((ctx.getCoreSession()));\n+        if (distributionId.matches(VERSION_REGEX.toString())) {\n+            String finalDistributionId = distributionId;\n+            String distribution = snaps.stream()\n+                                       .filter(s -> s.getVersion().equals(finalDistributionId))\n+                                       .findFirst()\n+                                       .map(DistributionSnapshot::getKey)\n+                                       .orElse(\"current\");\n+\n+            return ctx.newObject(\"redirectWO\", finalDistributionId, distribution);\n+        }\n+\n+        String orgDistributionId = distributionId;\n+        Boolean embeddedMode = Boolean.FALSE;\n+        if (\"adm\".equals(distributionId)) {\n+            embeddedMode = Boolean.TRUE;\n+        } else {\n+            snaps.add(getSnapshotManager().getRuntimeSnapshot());\n+            distributionId = SnapshotResolverHelper.findBestMatch(snaps, distributionId);\n+        }\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            distributionId = \"current\";\n+        }\n+\n+        if (!orgDistributionId.equals(distributionId)) {\n+            return ctx.newObject(\"redirectWO\", orgDistributionId, distributionId);\n+        }\n+\n+        ctx.setProperty(\"embeddedMode\", embeddedMode);\n+        ctx.setProperty(\"distribution\", getSnapshotManager().getSnapshot(distributionId, ctx.getCoreSession()));\n+        ctx.setProperty(DIST_ID, distributionId);\n+        return ctx.newObject(\"apibrowser\", distributionId, embeddedMode);\n+    }\n+\n+    public List<DistributionSnapshotDesc> getAvailableDistributions() {\n+        return getSnapshotManager().getAvailableDistributions(ctx.getCoreSession());\n+    }\n+\n+    public String getRuntimeDistributionName() {\n+        return SnapshotManagerComponent.RUNTIME;\n+    }\n+\n+    public DistributionSnapshot getRuntimeDistribution() {\n+        return getSnapshotManager().getRuntimeSnapshot();\n+    }\n+\n+    public List<DistributionSnapshot> listPersistedDistributions() {\n+        SnapshotManager sm = getSnapshotManager();\n+        return sm.listPersistentSnapshots(ctx.getCoreSession()).stream().sorted((o1, o2) -> {\n+            Matcher m1 = VERSION_REGEX.matcher(o1.getVersion());\n+            Matcher m2 = VERSION_REGEX.matcher(o2.getVersion());\n+\n+            if (m1.matches() && m2.matches()) {\n+                for (int i = 0; i < 3; i++) {\n+                    String s1 = m1.group(i + 1);\n+                    int c1 = s1 != null ? Integer.parseInt(s1) : 0;\n+                    String s2 = m2.group(i + 1);\n+                    int c2 = s2 != null ? Integer.parseInt(s2) : 0;\n+\n+                    if (c1 != c2 || i == 2) {\n+                        return Integer.compare(c2, c1);\n+                    }\n+                }\n+            }\n+            log.info(String.format(\"Comparing version using String between %s - %s\", o1.getVersion(), o2.getVersion()));\n+            return o2.getVersion().compareTo(o1.getVersion());\n+        }).filter(s -> !s.isHidden()).collect(Collectors.toList());\n+    }\n+\n+    public Map<String, DistributionSnapshot> getPersistedDistributions() {\n+        return getSnapshotManager().getPersistentSnapshots(ctx.getCoreSession());\n+    }\n+\n+    public DistributionSnapshot getCurrentDistribution() {\n+        String distId = (String) ctx.getProperty(DIST_ID);\n+        DistributionSnapshot currentDistribution = (DistributionSnapshot) ctx.getProperty(\"currentDistribution\");\n+        if (currentDistribution == null || !currentDistribution.getKey().equals(distId)) {\n+            currentDistribution = getSnapshotManager().getSnapshot(distId, ctx.getCoreSession());\n+            ctx.setProperty(\"currentDistribution\", currentDistribution);\n+        }\n+        return currentDistribution;\n+    }\n+\n+    @POST\n+    @Path(\"save\")\n+    @Produces(\"text/html\")\n+    public Object doSave() throws NamingException, NotSupportedException, SystemException, RollbackException,\n+            HeuristicMixedException, HeuristicRollbackException, ParseException {\n+        if (!canAddDocumentation()) {\n+            return null;\n+        }\n+        FormData formData = getContext().getForm();\n+        String distribLabel = formData.getString(\"name\");\n+\n+        log.info(\"Start Snapshot...\");\n+        boolean startedTx = false;\n+        UserTransaction tx = TransactionHelper.lookupUserTransaction();\n+        if (tx != null && !TransactionHelper.isTransactionActiveOrMarkedRollback()) {\n+            tx.begin();\n+            startedTx = true;\n+        }\n+\n+        Map<String, Serializable> otherProperties = readFormData(formData);\n+        try {\n+            getSnapshotManager().persistRuntimeSnapshot(getContext().getCoreSession(), distribLabel, otherProperties);\n+\n+        } catch (NuxeoException e) {\n+            log.error(\"Error during storage\", e);\n+            if (tx != null) {\n+                tx.rollback();\n+            }\n+            return getView(\"savedKO\").arg(\"message\", e.getMessage());\n+        }\n+        log.info(\"Snapshot saved.\");\n+        if (tx != null && startedTx) {\n+            tx.commit();\n+        }\n+\n+        String redirectUrl = getContext().getBaseURL() + getPath();\n+        log.debug(\"Path => \" + redirectUrl);\n+        return getView(\"saved\");\n+    }\n+\n+    protected Map<String, Serializable> readFormData(FormData formData) {\n+        Map<String, Serializable> properties = new HashMap<>();\n+\n+        // Release date\n+        String released = formData.getString(\"released\");\n+        if (StringUtils.isNotBlank(released)) {\n+            LocalDate date = LocalDate.parse(released);\n+            Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();\n+            properties.put(PROP_RELEASED, java.util.Date.from(instant));\n+        }\n+\n+        return properties;\n+    }\n+\n+    @POST\n+    @Path(\"saveExtended\")\n+    @Produces(\"text/html\")\n+    public Object doSaveExtended() throws NamingException, NotSupportedException, SystemException, SecurityException,\n+            RollbackException, HeuristicMixedException, HeuristicRollbackException {\n+        if (!canAddDocumentation()) {\n+            return null;\n+        }\n+\n+        FormData formData = getContext().getForm();\n+\n+        String distribLabel = formData.getString(\"name\");\n+        String bundleList = formData.getString(\"bundles\");\n+        String pkgList = formData.getString(\"packages\");\n+        SnapshotFilter filter = new SnapshotFilter(distribLabel);\n+\n+        if (bundleList != null) {\n+            String[] bundles = bundleList.split(\"\\n\");\n+            for (String bundleId : bundles) {\n+                filter.addBundlePrefix(bundleId);\n+            }\n+        }\n+\n+        if (pkgList != null) {\n+            String[] packages = pkgList.split(\"\\\\r?\\\\n\");\n+            for (String pkg : packages) {\n+                filter.addPackagesPrefix(pkg);\n+            }\n+        }\n+\n+        Map<String, Serializable> otherProperties = readFormData(formData);\n+\n+        log.info(\"Start Snapshot...\");\n+        boolean startedTx = false;\n+        UserTransaction tx = TransactionHelper.lookupUserTransaction();\n+        if (tx != null && !TransactionHelper.isTransactionActiveOrMarkedRollback()) {\n+            tx.begin();\n+            startedTx = true;\n+        }\n+        try {\n+            getSnapshotManager().persistRuntimeSnapshot(getContext().getCoreSession(), distribLabel, otherProperties,\n+                    filter);\n+        } catch (NuxeoException e) {\n+            log.error(\"Error during storage\", e);\n+            if (tx != null) {\n+                tx.rollback();\n+            }\n+            return getView(\"savedKO\").arg(\"message\", e.getMessage());\n+        }\n+        log.info(\"Snapshot saved.\");\n+        if (tx != null && startedTx) {\n+            tx.commit();\n+        }\n+        return getView(\"saved\");\n+    }\n+\n+    /**\n+     * Returns the runtime snapshot json export.\n+     *\n+     * @since 11.1\n+     */\n+    @GET\n+    @Path(\"json\")\n+    @Produces(\"application/json\")\n+    public Object getJson() throws IOException {\n+        // init potential resources depending on request\n+        getSnapshotManager().initWebContext(getContext().getRequest());\n+        DistributionSnapshot snap = getSnapshotManager().getRuntimeSnapshot();\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        snap.writeJson(out);\n+        return out.toString();\n+    }\n+\n+    public String getDocumentationInfo() {\n+        DocumentationService ds = Framework.getService(DocumentationService.class);\n+        return ds.getDocumentationStats(getContext().getCoreSession());\n+    }\n+\n+    protected File getExportTmpFile() {\n+        File tmpFile = new File(Environment.getDefault().getTemp(), \"export.zip\");\n+        if (tmpFile.exists()) {\n+            tmpFile.delete();\n+        }\n+        tmpFile.deleteOnExit();\n+        return tmpFile;\n+    }\n+\n+    @GET\n+    @Path(\"downloadDoc\")\n+    public Response downloadDoc() throws IOException {\n+        DocumentationService ds = Framework.getService(DocumentationService.class);\n+        File tmp = getExportTmpFile();\n+        tmp.createNewFile();\n+        OutputStream out = new FileOutputStream(tmp);\n+        ds.exportDocumentation(getContext().getCoreSession(), out);\n+        out.flush();\n+        out.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MDU1Nw=="}, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 416}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjI2NjA3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0Nzo0OFrOGJ0isw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0Nzo0OFrOGJ0isw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MTIxOQ==", "bodyText": "No newline", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r412951219", "createdAt": "2020-04-22T12:47:48Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -0,0 +1,593 @@\n+/*\n+ * (C) Copyright 2006-2015 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.browse;\n+\n+import static org.nuxeo.apidoc.snapshot.DistributionSnapshot.PROP_RELEASED;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.naming.NamingException;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.SystemException;\n+import javax.transaction.UserTransaction;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.nuxeo.apidoc.documentation.DocumentationService;\n+import org.nuxeo.apidoc.export.ArchiveFile;\n+import org.nuxeo.apidoc.listener.AttributesExtractorStater;\n+import org.nuxeo.apidoc.plugin.Plugin;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshotDesc;\n+import org.nuxeo.apidoc.snapshot.SnapshotFilter;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.apidoc.snapshot.SnapshotManagerComponent;\n+import org.nuxeo.apidoc.snapshot.SnapshotResolverHelper;\n+import org.nuxeo.apidoc.worker.ExtractXmlAttributesWorker;\n+import org.nuxeo.common.Environment;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IterableQueryResult;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.query.QueryFilter;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.work.api.Work;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.webengine.forms.FormData;\n+import org.nuxeo.ecm.webengine.model.Resource;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.exceptions.WebResourceNotFoundException;\n+import org.nuxeo.ecm.webengine.model.impl.ModuleRoot;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+@Path(\"/distribution\")\n+// needed for 5.4.1\n+@WebObject(type = \"distribution\")\n+public class Distribution extends ModuleRoot {\n+\n+    public static final String DIST_ID = \"distId\";\n+\n+    protected static final Log log = LogFactory.getLog(Distribution.class);\n+\n+    protected static final Pattern VERSION_REGEX = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+))?(?:\\\\.(\\\\d+))?(?:-.*)?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    // handle errors\n+    @Override\n+    public Object handleError(Throwable t) {\n+        if (t instanceof WebResourceNotFoundException) {\n+            return Response.status(404).entity(getTemplate(\"error/error_404.ftl\")).type(\"text/html\").build();\n+        } else {\n+            return super.handleError(t);\n+        }\n+    }\n+\n+    protected SnapshotManager getSnapshotManager() {\n+        return Framework.getService(SnapshotManager.class);\n+    }\n+\n+    public String getNavigationPoint() {\n+        String url = getContext().getURL();\n+        String point = null;\n+        if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLEGROUPS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLEGROUP)) {\n+            point = ApiBrowserConstants.LIST_BUNDLEGROUPS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_BUNDLES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_BUNDLE)) {\n+            point = ApiBrowserConstants.LIST_BUNDLES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_COMPONENTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_COMPONENT)) {\n+            point = ApiBrowserConstants.LIST_COMPONENTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_SERVICES)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_SERVICE)) {\n+            point = ApiBrowserConstants.LIST_SERVICES;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_EXTENSIONPOINTS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_EXTENSIONPOINT)) {\n+            point = ApiBrowserConstants.LIST_EXTENSIONPOINTS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_CONTRIBUTIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_CONTRIBUTION)) {\n+            point = ApiBrowserConstants.LIST_CONTRIBUTIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.LIST_OPERATIONS)\n+                || ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_OPERATION)) {\n+            point = ApiBrowserConstants.LIST_OPERATIONS;\n+        } else if (ApiBrowserConstants.check(url, ApiBrowserConstants.VIEW_DOCUMENTATION)) {\n+            point = ApiBrowserConstants.VIEW_DOCUMENTATION;\n+        }\n+        if (point == null) {\n+            // check plugins\n+            List<Plugin<?>> plugins = getSnapshotManager().getPlugins();\n+            for (Plugin<?> plugin : plugins) {\n+                point = plugin.getView(url);\n+                if (point != null) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return point;\n+    }\n+\n+    @GET\n+    @Produces(\"text/html\")\n+    public Object doGet() {\n+        return getView(\"index\").arg(\"hideNav\", Boolean.TRUE);\n+    }\n+\n+    @Path(\"latest\")\n+    public Resource getLatest() {\n+        List<DistributionSnapshot> snaps = listPersistedDistributions();\n+        Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                           .filter(snap -> snap.getName()\n+                                                                               .toLowerCase()\n+                                                                               .startsWith(\"nuxeo platform\"))\n+                                                           .findFirst();\n+\n+        String latest = \"current\";\n+        if (distribution.isPresent()) {\n+            latest = distribution.get().getKey();\n+        }\n+        return ctx.newObject(\"redirectWO\", \"latest\", latest);\n+    }\n+\n+    @Path(\"{distributionId}\")\n+    public Resource viewDistribution(@PathParam(\"distributionId\") String distributionId) {\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            return this;\n+        }\n+\n+        List<DistributionSnapshot> snaps = getSnapshotManager().listPersistentSnapshots((ctx.getCoreSession()));\n+        if (distributionId.matches(VERSION_REGEX.toString())) {\n+            String finalDistributionId = distributionId;\n+            String distribution = snaps.stream()\n+                                       .filter(s -> s.getVersion().equals(finalDistributionId))\n+                                       .findFirst()\n+                                       .map(DistributionSnapshot::getKey)\n+                                       .orElse(\"current\");\n+\n+            return ctx.newObject(\"redirectWO\", finalDistributionId, distribution);\n+        }\n+\n+        String orgDistributionId = distributionId;\n+        Boolean embeddedMode = Boolean.FALSE;\n+        if (\"adm\".equals(distributionId)) {\n+            embeddedMode = Boolean.TRUE;\n+        } else {\n+            snaps.add(getSnapshotManager().getRuntimeSnapshot());\n+            distributionId = SnapshotResolverHelper.findBestMatch(snaps, distributionId);\n+        }\n+        if (distributionId == null || \"\".equals(distributionId)) {\n+            distributionId = \"current\";\n+        }\n+\n+        if (!orgDistributionId.equals(distributionId)) {\n+            return ctx.newObject(\"redirectWO\", orgDistributionId, distributionId);\n+        }\n+\n+        ctx.setProperty(\"embeddedMode\", embeddedMode);\n+        ctx.setProperty(\"distribution\", getSnapshotManager().getSnapshot(distributionId, ctx.getCoreSession()));\n+        ctx.setProperty(DIST_ID, distributionId);\n+        return ctx.newObject(\"apibrowser\", distributionId, embeddedMode);\n+    }\n+\n+    public List<DistributionSnapshotDesc> getAvailableDistributions() {\n+        return getSnapshotManager().getAvailableDistributions(ctx.getCoreSession());\n+    }\n+\n+    public String getRuntimeDistributionName() {\n+        return SnapshotManagerComponent.RUNTIME;\n+    }\n+\n+    public DistributionSnapshot getRuntimeDistribution() {\n+        return getSnapshotManager().getRuntimeSnapshot();\n+    }\n+\n+    public List<DistributionSnapshot> listPersistedDistributions() {\n+        SnapshotManager sm = getSnapshotManager();\n+        return sm.listPersistentSnapshots(ctx.getCoreSession()).stream().sorted((o1, o2) -> {\n+            Matcher m1 = VERSION_REGEX.matcher(o1.getVersion());\n+            Matcher m2 = VERSION_REGEX.matcher(o2.getVersion());\n+\n+            if (m1.matches() && m2.matches()) {\n+                for (int i = 0; i < 3; i++) {\n+                    String s1 = m1.group(i + 1);\n+                    int c1 = s1 != null ? Integer.parseInt(s1) : 0;\n+                    String s2 = m2.group(i + 1);\n+                    int c2 = s2 != null ? Integer.parseInt(s2) : 0;\n+\n+                    if (c1 != c2 || i == 2) {\n+                        return Integer.compare(c2, c1);\n+                    }\n+                }\n+            }\n+            log.info(String.format(\"Comparing version using String between %s - %s\", o1.getVersion(), o2.getVersion()));\n+            return o2.getVersion().compareTo(o1.getVersion());\n+        }).filter(s -> !s.isHidden()).collect(Collectors.toList());\n+    }\n+\n+    public Map<String, DistributionSnapshot> getPersistedDistributions() {\n+        return getSnapshotManager().getPersistentSnapshots(ctx.getCoreSession());\n+    }\n+\n+    public DistributionSnapshot getCurrentDistribution() {\n+        String distId = (String) ctx.getProperty(DIST_ID);\n+        DistributionSnapshot currentDistribution = (DistributionSnapshot) ctx.getProperty(\"currentDistribution\");\n+        if (currentDistribution == null || !currentDistribution.getKey().equals(distId)) {\n+            currentDistribution = getSnapshotManager().getSnapshot(distId, ctx.getCoreSession());\n+            ctx.setProperty(\"currentDistribution\", currentDistribution);\n+        }\n+        return currentDistribution;\n+    }\n+\n+    @POST\n+    @Path(\"save\")\n+    @Produces(\"text/html\")\n+    public Object doSave() throws NamingException, NotSupportedException, SystemException, RollbackException,\n+            HeuristicMixedException, HeuristicRollbackException, ParseException {\n+        if (!canAddDocumentation()) {\n+            return null;\n+        }\n+        FormData formData = getContext().getForm();\n+        String distribLabel = formData.getString(\"name\");\n+\n+        log.info(\"Start Snapshot...\");\n+        boolean startedTx = false;\n+        UserTransaction tx = TransactionHelper.lookupUserTransaction();\n+        if (tx != null && !TransactionHelper.isTransactionActiveOrMarkedRollback()) {\n+            tx.begin();\n+            startedTx = true;\n+        }\n+\n+        Map<String, Serializable> otherProperties = readFormData(formData);\n+        try {\n+            getSnapshotManager().persistRuntimeSnapshot(getContext().getCoreSession(), distribLabel, otherProperties);\n+\n+        } catch (NuxeoException e) {\n+            log.error(\"Error during storage\", e);\n+            if (tx != null) {\n+                tx.rollback();\n+            }\n+            return getView(\"savedKO\").arg(\"message\", e.getMessage());\n+        }\n+        log.info(\"Snapshot saved.\");\n+        if (tx != null && startedTx) {\n+            tx.commit();\n+        }\n+\n+        String redirectUrl = getContext().getBaseURL() + getPath();\n+        log.debug(\"Path => \" + redirectUrl);\n+        return getView(\"saved\");\n+    }\n+\n+    protected Map<String, Serializable> readFormData(FormData formData) {\n+        Map<String, Serializable> properties = new HashMap<>();\n+\n+        // Release date\n+        String released = formData.getString(\"released\");\n+        if (StringUtils.isNotBlank(released)) {\n+            LocalDate date = LocalDate.parse(released);\n+            Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();\n+            properties.put(PROP_RELEASED, java.util.Date.from(instant));\n+        }\n+\n+        return properties;\n+    }\n+\n+    @POST\n+    @Path(\"saveExtended\")\n+    @Produces(\"text/html\")\n+    public Object doSaveExtended() throws NamingException, NotSupportedException, SystemException, SecurityException,\n+            RollbackException, HeuristicMixedException, HeuristicRollbackException {\n+        if (!canAddDocumentation()) {\n+            return null;\n+        }\n+\n+        FormData formData = getContext().getForm();\n+\n+        String distribLabel = formData.getString(\"name\");\n+        String bundleList = formData.getString(\"bundles\");\n+        String pkgList = formData.getString(\"packages\");\n+        SnapshotFilter filter = new SnapshotFilter(distribLabel);\n+\n+        if (bundleList != null) {\n+            String[] bundles = bundleList.split(\"\\n\");\n+            for (String bundleId : bundles) {\n+                filter.addBundlePrefix(bundleId);\n+            }\n+        }\n+\n+        if (pkgList != null) {\n+            String[] packages = pkgList.split(\"\\\\r?\\\\n\");\n+            for (String pkg : packages) {\n+                filter.addPackagesPrefix(pkg);\n+            }\n+        }\n+\n+        Map<String, Serializable> otherProperties = readFormData(formData);\n+\n+        log.info(\"Start Snapshot...\");\n+        boolean startedTx = false;\n+        UserTransaction tx = TransactionHelper.lookupUserTransaction();\n+        if (tx != null && !TransactionHelper.isTransactionActiveOrMarkedRollback()) {\n+            tx.begin();\n+            startedTx = true;\n+        }\n+        try {\n+            getSnapshotManager().persistRuntimeSnapshot(getContext().getCoreSession(), distribLabel, otherProperties,\n+                    filter);\n+        } catch (NuxeoException e) {\n+            log.error(\"Error during storage\", e);\n+            if (tx != null) {\n+                tx.rollback();\n+            }\n+            return getView(\"savedKO\").arg(\"message\", e.getMessage());\n+        }\n+        log.info(\"Snapshot saved.\");\n+        if (tx != null && startedTx) {\n+            tx.commit();\n+        }\n+        return getView(\"saved\");\n+    }\n+\n+    /**\n+     * Returns the runtime snapshot json export.\n+     *\n+     * @since 11.1\n+     */\n+    @GET\n+    @Path(\"json\")\n+    @Produces(\"application/json\")\n+    public Object getJson() throws IOException {\n+        // init potential resources depending on request\n+        getSnapshotManager().initWebContext(getContext().getRequest());\n+        DistributionSnapshot snap = getSnapshotManager().getRuntimeSnapshot();\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        snap.writeJson(out);\n+        return out.toString();\n+    }\n+\n+    public String getDocumentationInfo() {\n+        DocumentationService ds = Framework.getService(DocumentationService.class);\n+        return ds.getDocumentationStats(getContext().getCoreSession());\n+    }\n+\n+    protected File getExportTmpFile() {\n+        File tmpFile = new File(Environment.getDefault().getTemp(), \"export.zip\");\n+        if (tmpFile.exists()) {\n+            tmpFile.delete();\n+        }\n+        tmpFile.deleteOnExit();\n+        return tmpFile;\n+    }\n+\n+    @GET\n+    @Path(\"downloadDoc\")\n+    public Response downloadDoc() throws IOException {\n+        DocumentationService ds = Framework.getService(DocumentationService.class);\n+        File tmp = getExportTmpFile();\n+        tmp.createNewFile();\n+        OutputStream out = new FileOutputStream(tmp);\n+        ds.exportDocumentation(getContext().getCoreSession(), out);\n+        out.flush();\n+        out.close();\n+        ArchiveFile aFile = new ArchiveFile(tmp.getAbsolutePath());\n+        return Response.ok(aFile)\n+                       .header(\"Content-Disposition\", \"attachment;filename=\" + \"nuxeo-documentation.zip\")\n+                       .type(\"application/zip\")\n+                       .build();\n+    }\n+\n+    @GET\n+    @Path(\"download/{distributionId}\")\n+    public Response downloadDistrib(@PathParam(\"distributionId\") String distribId) throws IOException {\n+        File tmp = getExportTmpFile();\n+        tmp.createNewFile();\n+        OutputStream out = new FileOutputStream(tmp);\n+        getSnapshotManager().exportSnapshot(getContext().getCoreSession(), distribId, out);\n+        out.close();\n+        String fName = \"nuxeo-distribution-\" + distribId + \".zip\";\n+        fName = fName.replace(\" \", \"_\");\n+        ArchiveFile aFile = new ArchiveFile(tmp.getAbsolutePath());\n+        return Response.ok(aFile)\n+                       .header(\"Content-Disposition\", \"attachment;filename=\" + fName)\n+                       .type(\"application/zip\")\n+                       .build();\n+    }\n+\n+    /**\n+     * Use to allow authorized users to upload distribution even in site mode\n+     *\n+     * @since 8.3\n+     */\n+    @GET\n+    @Path(\"_admin\")\n+    public Object getForms() {\n+        NuxeoPrincipal principal = getContext().getPrincipal();\n+        if (SecurityHelper.canEditDocumentation(principal)) {\n+            return getView(\"forms\").arg(\"hideNav\", Boolean.TRUE);\n+        } else {\n+            return Response.status(401).build();\n+        }\n+    }\n+\n+    @POST\n+    @Path(\"uploadDistrib\")\n+    @Produces(\"text/html\")\n+    public Object uploadDistrib() throws IOException {\n+        if (!canAddDocumentation()) {\n+            return null;\n+        }\n+        Blob blob = getContext().getForm().getFirstBlob();\n+\n+        getSnapshotManager().importSnapshot(getContext().getCoreSession(), blob.getStream());\n+        getSnapshotManager().readPersistentSnapshots(getContext().getCoreSession());\n+\n+        return getView(\"index\");\n+    }\n+\n+    @POST\n+    @Path(\"uploadDistribTmp\")\n+    @Produces(\"text/html\")\n+    public Object uploadDistribTmp() throws IOException {\n+        if (!canAddDocumentation()) {\n+            return null;\n+        }\n+        Blob blob = getContext().getForm().getFirstBlob();\n+        if (blob == null || blob.getLength() == 0) {\n+            return null;\n+        }\n+        DocumentModel snap = getSnapshotManager().importTmpSnapshot(getContext().getCoreSession(), blob.getStream());\n+        if (snap == null) {\n+            log.error(\"Unable to import archive\");\n+            return null;\n+        }\n+        DistributionSnapshot snapObject = snap.getAdapter(DistributionSnapshot.class);\n+        return getView(\"uploadEdit\").arg(\"tmpSnap\", snap).arg(\"snapObject\", snapObject);\n+    }\n+\n+    @POST\n+    @Path(\"uploadDistribTmpValid\")\n+    @Produces(\"text/html\")\n+    public Object uploadDistribTmpValid() {\n+        if (!canAddDocumentation()) {\n+            return null;\n+        }\n+\n+        FormData formData = getContext().getForm();\n+        String name = formData.getString(\"name\");\n+        String version = formData.getString(\"version\");\n+        String pathSegment = formData.getString(\"pathSegment\");\n+        String title = formData.getString(\"title\");\n+\n+        getSnapshotManager().validateImportedSnapshot(getContext().getCoreSession(), name, version, pathSegment, title);\n+        getSnapshotManager().readPersistentSnapshots(getContext().getCoreSession());\n+        return getView(\"importDone\");\n+    }\n+\n+    @POST\n+    @Path(\"uploadDoc\")\n+    @Produces(\"text/html\")\n+    public Object uploadDoc() throws IOException {\n+        if (!canAddDocumentation()) {\n+            return null;\n+        }\n+\n+        Blob blob = getContext().getForm().getFirstBlob();\n+        if (blob == null || blob.getLength() == 0) {\n+            return null;\n+        }\n+\n+        DocumentationService ds = Framework.getService(DocumentationService.class);\n+        ds.importDocumentation(getContext().getCoreSession(), blob.getStream());\n+\n+        log.info(\"Documents imported.\");\n+\n+        return getView(\"docImportDone\");\n+    }\n+\n+    @GET\n+    @Path(\"_reindex\")\n+    @Produces(\"text/plain\")\n+    public Object reindex() {\n+        NuxeoPrincipal nxPrincipal = getContext().getPrincipal();\n+        if (!nxPrincipal.isAdministrator()) {\n+            return Response.status(404).build();\n+        }\n+\n+        CoreSession coreSession = getContext().getCoreSession();\n+        String query = String.format(\n+                \"SELECT ecm:uuid FROM Document WHERE ecm:primaryType in ('%s') AND ecm:isProxy = 0 AND ecm:isTrashed = 0\",\n+                StringUtils.join(AttributesExtractorStater.DOC_TYPES, \"','\"));\n+\n+        try (IterableQueryResult it = coreSession.queryAndFetch(query, NXQL.NXQL, QueryFilter.EMPTY);) {\n+            for (Map<String, Serializable> map : it) {\n+                String id = (String) map.get(NXQL.ECM_UUID);\n+                Work work = new ExtractXmlAttributesWorker(coreSession.getRepositoryName(), nxPrincipal.getName(), id);\n+                Framework.getService(WorkManager.class).schedule(work);\n+            }\n+        }\n+\n+        return Response.ok().build();\n+    }\n+\n+    public boolean isEmbeddedMode() {\n+        Boolean embed = (Boolean) getContext().getProperty(\"embeddedMode\", Boolean.FALSE);\n+        return embed != null && embed;\n+    }\n+\n+    public boolean isEditor() {\n+        if (isEmbeddedMode() || isSiteMode()) {\n+            return false;\n+        }\n+        NuxeoPrincipal principal = getContext().getPrincipal();\n+        return SecurityHelper.canEditDocumentation(principal);\n+    }\n+\n+    public boolean canAddDocumentation() {\n+        NuxeoPrincipal principal = getContext().getPrincipal();\n+        return !isEmbeddedMode() && SecurityHelper.canEditDocumentation(principal);\n+    }\n+\n+    public static boolean showCurrentDistribution() {\n+        return !(Framework.isBooleanPropertyTrue(ApiBrowserConstants.PROPERTY_SITE_MODE) || isSiteMode());\n+    }\n+\n+    public static boolean isSiteMode() {\n+        return Framework.isBooleanPropertyTrue(ApiBrowserConstants.PROPERTY_SITE_MODE);\n+    }\n+\n+    /**\n+     * Generates the list of plugins that should be displayed in the menu.\n+     */\n+    public List<Plugin<?>> getPluginMenu() {\n+        return getSnapshotManager().getPlugins()\n+                                   .stream()\n+                                   .filter(plugin -> !plugin.isHidden())\n+                                   .collect(Collectors.toList());\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd06c038580d3b997713cef71e06bcfa5d1636e"}, "originalPosition": 593}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTk2NjE0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/plugin/AbstractPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo1MjowOFrOGMc-yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo1NToyNlrOGMdGlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMDkyMA==", "bodyText": "For simple UnrestrictedRunner like that; I'd recommend to use: org.nuxeo.ecm.core.api.CoreInstance#doPrivileged(java.lang.String, java.util.function.Function<org.nuxeo.ecm.core.api.CoreSession,R>)", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r415710920", "createdAt": "2020-04-27T10:52:08Z", "author": {"login": "akervern"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/plugin/AbstractPlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.plugin;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.nuxeo.apidoc.api.NuxeoArtifact;\n+import org.nuxeo.apidoc.repository.UnrestrictedRootCreator;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.PathRef;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * @since 11.1\n+ */\n+public abstract class AbstractPlugin<T extends NuxeoArtifact> implements Plugin<T> {\n+\n+    protected final PluginDescriptor descriptor;\n+\n+    public AbstractPlugin(PluginDescriptor descriptor) {\n+        super();\n+        this.descriptor = descriptor;\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return descriptor.getId();\n+    }\n+\n+    @Override\n+    public String getPluginSnapshotClass() {\n+        return descriptor.getSnapshotClass();\n+    }\n+\n+    @Override\n+    public String getLabel() {\n+        return descriptor.getLabel();\n+    }\n+\n+    @Override\n+    public String getViewType() {\n+        return descriptor.getViewType();\n+    }\n+\n+    @Override\n+    public String getHomeView() {\n+        return descriptor.getHomeView();\n+    }\n+\n+    @Override\n+    public String getStyleClass() {\n+        return descriptor.getStyleClass();\n+    }\n+\n+    @Override\n+    public ObjectMapper enrishJsonMapper(ObjectMapper parent) {\n+        // NOOP\n+        return parent;\n+    }\n+\n+    protected DocumentModel getOrCreateSubRoot(CoreSession session, DocumentModel root, String name) {\n+        DocumentRef rootRef = new PathRef(root.getPathAsString() + name);\n+        if (session.exists(rootRef)) {\n+            return session.getDocument(rootRef);\n+        }\n+        UnrestrictedRootCreator creator = new UnrestrictedRootCreator(session, root.getPathAsString(), name, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a32f41f41b34eae88a4eea3ebeddbb8f476623ae"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMjkxNg==", "bodyText": "Thanks indeed, i chose not to update this code that i moved from the inner class for easier reuse in the JSF module, but i will keep that in mind for future work \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/3908#discussion_r415712916", "createdAt": "2020-04-27T10:55:26Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/plugin/AbstractPlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.plugin;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.nuxeo.apidoc.api.NuxeoArtifact;\n+import org.nuxeo.apidoc.repository.UnrestrictedRootCreator;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.PathRef;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * @since 11.1\n+ */\n+public abstract class AbstractPlugin<T extends NuxeoArtifact> implements Plugin<T> {\n+\n+    protected final PluginDescriptor descriptor;\n+\n+    public AbstractPlugin(PluginDescriptor descriptor) {\n+        super();\n+        this.descriptor = descriptor;\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return descriptor.getId();\n+    }\n+\n+    @Override\n+    public String getPluginSnapshotClass() {\n+        return descriptor.getSnapshotClass();\n+    }\n+\n+    @Override\n+    public String getLabel() {\n+        return descriptor.getLabel();\n+    }\n+\n+    @Override\n+    public String getViewType() {\n+        return descriptor.getViewType();\n+    }\n+\n+    @Override\n+    public String getHomeView() {\n+        return descriptor.getHomeView();\n+    }\n+\n+    @Override\n+    public String getStyleClass() {\n+        return descriptor.getStyleClass();\n+    }\n+\n+    @Override\n+    public ObjectMapper enrishJsonMapper(ObjectMapper parent) {\n+        // NOOP\n+        return parent;\n+    }\n+\n+    protected DocumentModel getOrCreateSubRoot(CoreSession session, DocumentModel root, String name) {\n+        DocumentRef rootRef = new PathRef(root.getPathAsString() + name);\n+        if (session.exists(rootRef)) {\n+            return session.getDocument(rootRef);\n+        }\n+        UnrestrictedRootCreator creator = new UnrestrictedRootCreator(session, root.getPathAsString(), name, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMDkyMA=="}, "originalCommit": {"oid": "a32f41f41b34eae88a4eea3ebeddbb8f476623ae"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4207, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}