{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MTc0MjEx", "number": 3932, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDozMTozN1rODzqLZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDoyMTo0OVrOD1zJeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDk1MDE1OnYy", "diffSide": "RIGHT", "path": "nuxeo-jsf/nuxeo-platform-actions-jsf/src/main/java/org/nuxeo/ecm/platform/actions/jsf/JSFActionContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDozMTozN1rOGIN7vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDozNTo1M1rOGIOFJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3MDA3Nw==", "bodyText": "Instead of Boolean.class it should be expectedType, right?", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r411270077", "createdAt": "2020-04-20T10:31:37Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-jsf/nuxeo-platform-actions-jsf/src/main/java/org/nuxeo/ecm/platform/actions/jsf/JSFActionContext.java", "diffHunk": "@@ -58,15 +59,38 @@ public JSFActionContext(ELContext originalContext, ExpressionFactory expressionF\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T> T evalExpression(String expression, Class<T> expectedType) throws ELException {\n+        ValueExpressionDetails veDetails = getValueExpressionDetails(expression, Boolean.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d353d1dd1e3779bcde2993f48d3cdf5e0bc87"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3MTc2Nw==", "bodyText": "thanks for the review :)\nto keep the backward compatibility and avoid any breaking changes I keep it as it was (initially the passed parameter is not used).\nhave a look here", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r411271767", "createdAt": "2020-04-20T10:34:30Z", "author": {"login": "RSalem07"}, "path": "nuxeo-jsf/nuxeo-platform-actions-jsf/src/main/java/org/nuxeo/ecm/platform/actions/jsf/JSFActionContext.java", "diffHunk": "@@ -58,15 +59,38 @@ public JSFActionContext(ELContext originalContext, ExpressionFactory expressionF\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T> T evalExpression(String expression, Class<T> expectedType) throws ELException {\n+        ValueExpressionDetails veDetails = getValueExpressionDetails(expression, Boolean.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3MDA3Nw=="}, "originalCommit": {"oid": "3b8d353d1dd1e3779bcde2993f48d3cdf5e0bc87"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3MjQ4Ng==", "bodyText": "Fair enough \ud83d\ude42\nThanks!", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r411272486", "createdAt": "2020-04-20T10:35:53Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-jsf/nuxeo-platform-actions-jsf/src/main/java/org/nuxeo/ecm/platform/actions/jsf/JSFActionContext.java", "diffHunk": "@@ -58,15 +59,38 @@ public JSFActionContext(ELContext originalContext, ExpressionFactory expressionF\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T> T evalExpression(String expression, Class<T> expectedType) throws ELException {\n+        ValueExpressionDetails veDetails = getValueExpressionDetails(expression, Boolean.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3MDA3Nw=="}, "originalCommit": {"oid": "3b8d353d1dd1e3779bcde2993f48d3cdf5e0bc87"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDczNTMzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionBusinessEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToyMjowMFrOGLCdGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToyMjowMFrOGLCdGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNzczNw==", "bodyText": "As in #3963 I'd suggest using simpler names. Here isExpression is enough.", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r414227737", "createdAt": "2020-04-24T01:22:00Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionBusinessEventListener.java", "diffHunk": "@@ -78,4 +84,20 @@ public void handleEvent(Event event) {\n         }\n     }\n \n+    protected boolean isExpressionLanguage(String expression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d353d1dd1e3779bcde2993f48d3cdf5e0bc87"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDc0MTAxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionBusinessEventListener.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToyNDo1OFrOGLCgRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjoxNzozM1rOGLfM4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyODU0OQ==", "bodyText": "openCoreSessionSystem(null) is enough. Although using the default repository (null) is a sign that something is wrong, what happens if there are several repositories? Something should be passed as argument or found in the context to decide which one to use.", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r414228549", "createdAt": "2020-04-24T01:24:58Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionBusinessEventListener.java", "diffHunk": "@@ -78,4 +84,20 @@ public void handleEvent(Event event) {\n         }\n     }\n \n+    protected boolean isExpressionLanguage(String expression) {\n+        RepositoryService repositoryService = Framework.getService(RepositoryService.class);\n+        UserManager userManager = Framework.getService(UserManager.class);\n+\n+        try (CloseableCoreSession session = CoreInstance.openCoreSession(repositoryService.getRepositoryNames().get(0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d353d1dd1e3779bcde2993f48d3cdf5e0bc87"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0ODcxNQ==", "bodyText": "thx, I have a few questions:\nopenCoreSessionSystem(null) will use the defaut repo. In the case of multi repo, we always have this notion of default ?\n\nis a sign that something is wrong, what happens if there are several repositories? Something should be passed as argument or found in the context to decide which one to use.\n\nYou mean in the EL context ? If I understand correctly, perhaps I am wrong, but the EL will evaluate the document as a regular pojo and will calls the method on the object, Is it rigt ? if it is the case. Where the session will be used ?", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r414448715", "createdAt": "2020-04-24T09:54:42Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionBusinessEventListener.java", "diffHunk": "@@ -78,4 +84,20 @@ public void handleEvent(Event event) {\n         }\n     }\n \n+    protected boolean isExpressionLanguage(String expression) {\n+        RepositoryService repositoryService = Framework.getService(RepositoryService.class);\n+        UserManager userManager = Framework.getService(UserManager.class);\n+\n+        try (CloseableCoreSession session = CoreInstance.openCoreSession(repositoryService.getRepositoryNames().get(0),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyODU0OQ=="}, "originalCommit": {"oid": "3b8d353d1dd1e3779bcde2993f48d3cdf5e0bc87"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYxMjE4Mw==", "bodyText": "There's always a default repo, this is configurable in repo contribs, and defaults to the \"default\" repo.\nBy context I mean whatever context this is being run in, for example operation context, or object context. If you have a session field then use its repository.", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r414612183", "createdAt": "2020-04-24T14:18:35Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionBusinessEventListener.java", "diffHunk": "@@ -78,4 +84,20 @@ public void handleEvent(Event event) {\n         }\n     }\n \n+    protected boolean isExpressionLanguage(String expression) {\n+        RepositoryService repositoryService = Framework.getService(RepositoryService.class);\n+        UserManager userManager = Framework.getService(UserManager.class);\n+\n+        try (CloseableCoreSession session = CoreInstance.openCoreSession(repositoryService.getRepositoryNames().get(0),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyODU0OQ=="}, "originalCommit": {"oid": "3b8d353d1dd1e3779bcde2993f48d3cdf5e0bc87"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5ODcyMA==", "bodyText": "Given a re-reading of the code, the isExpression check depends on the repository, so the query construction must be moved inside the loop over all repositories.", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r414698720", "createdAt": "2020-04-24T16:17:33Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionBusinessEventListener.java", "diffHunk": "@@ -78,4 +84,20 @@ public void handleEvent(Event event) {\n         }\n     }\n \n+    protected boolean isExpressionLanguage(String expression) {\n+        RepositoryService repositoryService = Framework.getService(RepositoryService.class);\n+        UserManager userManager = Framework.getService(UserManager.class);\n+\n+        try (CloseableCoreSession session = CoreInstance.openCoreSession(repositoryService.getRepositoryNames().get(0),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyODU0OQ=="}, "originalCommit": {"oid": "3b8d353d1dd1e3779bcde2993f48d3cdf5e0bc87"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDc1MTE4OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-actions-core/src/main/java/org/nuxeo/ecm/platform/actions/ActionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMTozMDoyMlrOGLCmLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMTozMDoyMlrOGLCmLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzMDA2MA==", "bodyText": "<T> is unused.", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r414230060", "createdAt": "2020-04-24T01:30:22Z", "author": {"login": "efge"}, "path": "nuxeo-services/nuxeo-platform-actions-core/src/main/java/org/nuxeo/ecm/platform/actions/ActionContext.java", "diffHunk": "@@ -112,4 +112,14 @@\n      */\n     boolean disableGlobalCaching();\n \n+    /**\n+     * Validates the given expression before evaluated it, which avoid any errors or exception during the evaluation.\n+     * <p>\n+     * This is designed to be called before {@link #checkCondition(String)}.\n+     * \n+     * @param expression the expression to evaluate\n+     * @return true if the given expression can be evaluated without exceptions\n+     */\n+    <T> boolean isValid(String expression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d353d1dd1e3779bcde2993f48d3cdf5e0bc87"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDc1NTM5OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-actions-core/src/main/java/org/nuxeo/ecm/platform/actions/ELActionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMTozMjoyMFrOGLCogA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMTozMjoyMFrOGLCogA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzMDY1Ng==", "bodyText": "Drop final", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r414230656", "createdAt": "2020-04-24T01:32:20Z", "author": {"login": "efge"}, "path": "nuxeo-services/nuxeo-platform-actions-core/src/main/java/org/nuxeo/ecm/platform/actions/ELActionContext.java", "diffHunk": "@@ -58,15 +59,32 @@ public ELActionContext(ELContext originalContext, ExpressionFactory expressionFa\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T> T evalExpression(String expression, Class<T> expectedType) throws ELException {\n+        ValueExpression valueExpression = getValueExpressionDetails(expression, expectedType);\n+        return (T) valueExpression.getValue(originalContext);\n+    }\n+\n+    @Override\n+    public boolean checkCondition(String expression) throws ELException {\n+        return Boolean.TRUE.equals(evalExpression(expression, Boolean.class));\n+    }\n+\n+    @Override\n+    public <T> boolean isValid(final String expression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d353d1dd1e3779bcde2993f48d3cdf5e0bc87"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDc1ODMyOnYy", "diffSide": "RIGHT", "path": "nuxeo-jsf/nuxeo-platform-actions-jsf/src/main/java/org/nuxeo/ecm/platform/actions/jsf/JSFActionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMTozMzo1M1rOGLCqNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMTozMzo1M1rOGLCqNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzMTA5Mw==", "bodyText": "I would also change ValueExpression -> Expression everywhere (new class and methods)", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r414231093", "createdAt": "2020-04-24T01:33:53Z", "author": {"login": "efge"}, "path": "nuxeo-jsf/nuxeo-platform-actions-jsf/src/main/java/org/nuxeo/ecm/platform/actions/jsf/JSFActionContext.java", "diffHunk": "@@ -91,13 +115,26 @@ public JSFActionContext(ELContext originalContext, ExpressionFactory expressionF\n         putLocalVariable(\"SeamContext\", new SeamContextHelper());\n \n         // evaluate expression\n-        ValueExpression ve = expressionFactory.createValueExpression(finalContext, expr, Boolean.class);\n-        return (T) ve.getValue(finalContext);\n+        ValueExpression valueExpression = expressionFactory.createValueExpression(finalContext, expr, expectedType);\n+        Class<?> type = valueExpression.getType(originalContext);\n+        boolean valid = type != null && ClassUtils.isAssignable(type, expectedType);\n+        return new ValueExpressionDetails(finalContext, valueExpression, valid);\n     }\n \n-    @Override\n-    public boolean checkCondition(String expression) throws ELException {\n-        return Boolean.TRUE.equals(evalExpression(expression, Boolean.class));\n+    protected static class ValueExpressionDetails {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d353d1dd1e3779bcde2993f48d3cdf5e0bc87"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzM4MDU2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionBusinessEventListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDoxOTo0MVrOGLZ90Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDoyMzoxOVrOGLaIXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYxMjk0NQ==", "bodyText": "No, I meant openCoreSessionSystem, not openCoreSession. You want the system user, right?", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r414612945", "createdAt": "2020-04-24T14:19:41Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionBusinessEventListener.java", "diffHunk": "@@ -78,4 +84,17 @@ public void handleEvent(Event event) {\n         }\n     }\n \n+    protected boolean isExpression(String expression) {\n+        UserManager userManager = Framework.getService(UserManager.class);\n+        try (CloseableCoreSession session = CoreInstance.openCoreSession(null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0820f7fc350e95d4658a0f73a5b7c060c65e93"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYxNTY0NA==", "bodyText": "yes, sorry", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r414615644", "createdAt": "2020-04-24T14:23:19Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/listeners/RetentionBusinessEventListener.java", "diffHunk": "@@ -78,4 +84,17 @@ public void handleEvent(Event event) {\n         }\n     }\n \n+    protected boolean isExpression(String expression) {\n+        UserManager userManager = Framework.getService(UserManager.class);\n+        try (CloseableCoreSession session = CoreInstance.openCoreSession(null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYxMjk0NQ=="}, "originalCommit": {"oid": "8f0820f7fc350e95d4658a0f73a5b7c060c65e93"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzM5MTMwOnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-actions-core/src/main/java/org/nuxeo/ecm/platform/actions/ActionContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDoyMTo0OVrOGLaD-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDoyMTo0OVrOGLaD-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYxNDUyMw==", "bodyText": "@since 11.1 and you need a default implementation for backward compatibility.", "url": "https://github.com/nuxeo/nuxeo/pull/3932#discussion_r414614523", "createdAt": "2020-04-24T14:21:49Z", "author": {"login": "efge"}, "path": "nuxeo-services/nuxeo-platform-actions-core/src/main/java/org/nuxeo/ecm/platform/actions/ActionContext.java", "diffHunk": "@@ -112,4 +112,14 @@\n      */\n     boolean disableGlobalCaching();\n \n+    /**\n+     * Validates the given expression before evaluated it, which avoid any errors or exception during the evaluation.\n+     * <p>\n+     * This is designed to be called before {@link #checkCondition(String)}.\n+     * \n+     * @param expression the expression to evaluate\n+     * @return true if the given expression can be evaluated without exceptions\n+     */\n+    boolean isValid(String expression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0820f7fc350e95d4658a0f73a5b7c060c65e93"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4182, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}