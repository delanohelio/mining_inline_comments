{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MTU0Mzkz", "number": 3677, "reviewThreads": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoyNDoxOVrODZKYnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo1OTozOFrODZgDLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzExMTMzOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoyNDoxOVrOFfZsbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoyNDoxOVrOFfZsbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3MTE0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.\n          \n          \n            \n             * Manages the cold storage of the main content of a {@link DocumentModel}.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368471148", "createdAt": "2020-01-20T10:24:19Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzExMjI0OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoyNDo0MFrOFfZs_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoyNDo0MFrOFfZs_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3MTI5Mw==", "bodyText": "Maybe keep it simple with ColdStorageHelper?", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368471293", "createdAt": "2020-01-20T10:24:40Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class DocumentBlobColdStorageHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzEzMjA1OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozMDo1MFrOFfZ4jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozMDo1MFrOFfZ4jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDI1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Moves the blob associated with the document of the given {@link DocumentRef} into a cold storage.\n          \n          \n            \n                 * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368474253", "createdAt": "2020-01-20T10:30:50Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class DocumentBlobColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(DocumentBlobColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the blob associated with the document of the given {@link DocumentRef} into a cold storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzEzMzA5OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozMToxMlrOFfZ5Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozMToxMlrOFfZ5Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDQxNQ==", "bodyText": "I'd remove these as they don't add any value.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368474415", "createdAt": "2020-01-20T10:31:12Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class DocumentBlobColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(DocumentBlobColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the blob associated with the document of the given {@link DocumentRef} into a cold storage.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE0MDcwOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozMzoyNFrOFfZ9mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTo0MjoyOVrOFfbu-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NTU0NQ==", "bodyText": "why not moveToColdStorage? (Blob is an implementation detail I believe)", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368475545", "createdAt": "2020-01-20T10:33:24Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class DocumentBlobColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(DocumentBlobColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the blob associated with the document of the given {@link DocumentRef} into a cold storage.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     */\n+    // FIXME / TODO perhaps return an object that give information, or at least returns the new `file:content` ->\n+    // thumbnail\n+    public static void moveBlob(CoreSession session, DocumentRef documentRef) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MjU5NQ==", "bodyText": "i thought the same thing, but i told my self perhaps it will not be clear enough as we pass only the document ref as parameter, perhaps people will think that we move the document.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368492595", "createdAt": "2020-01-20T11:11:38Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class DocumentBlobColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(DocumentBlobColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the blob associated with the document of the given {@link DocumentRef} into a cold storage.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     */\n+    // FIXME / TODO perhaps return an object that give information, or at least returns the new `file:content` ->\n+    // thumbnail\n+    public static void moveBlob(CoreSession session, DocumentRef documentRef) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NTU0NQ=="}, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUwNDU3MA==", "bodyText": "OK, so moveContentToColdStorage, or moveMainContentToColdStorage?\nWe need to all agree on terminolgy and stick to it.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368504570", "createdAt": "2020-01-20T11:42:29Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class DocumentBlobColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(DocumentBlobColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the blob associated with the document of the given {@link DocumentRef} into a cold storage.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     */\n+    // FIXME / TODO perhaps return an object that give information, or at least returns the new `file:content` ->\n+    // thumbnail\n+    public static void moveBlob(CoreSession session, DocumentRef documentRef) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NTU0NQ=="}, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE0ODA4OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozNTo0OFrOFfaB9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozNTo0OFrOFfaB9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NjY2MQ==", "bodyText": "I think that we should also check if the coldstorage:coldContent field is set.\nUnless we are totally sure that if a document has this facet it means that its main content is in cold storage, but I wouldn't go for it.\nThis is linked to #3666 (comment).", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368476661", "createdAt": "2020-01-20T10:35:48Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class DocumentBlobColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(DocumentBlobColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the blob associated with the document of the given {@link DocumentRef} into a cold storage.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     */\n+    // FIXME / TODO perhaps return an object that give information, or at least returns the new `file:content` ->\n+    // thumbnail\n+    public static void moveBlob(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel document = session.getDocument(documentRef);\n+        if (document.hasFacet(COLD_STORAGE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE1MzY1OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozNzoyOVrOFfaFLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozNzoyOVrOFfaFLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NzQ4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.trace(\"The blob content of document: {} is already on cold storage\", document);\n          \n          \n            \n                        log.trace(\"The main content of document: {} is already in cold storage\", document);\n          \n      \n    \n    \n  \n\nAnd maybe debug? Easier to set without having huge logs, and this case shouldn't happen that often as the UI won't allow to move to cold storage twice.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368477486", "createdAt": "2020-01-20T10:37:29Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class DocumentBlobColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(DocumentBlobColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the blob associated with the document of the given {@link DocumentRef} into a cold storage.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     */\n+    // FIXME / TODO perhaps return an object that give information, or at least returns the new `file:content` ->\n+    // thumbnail\n+    public static void moveBlob(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel document = session.getDocument(documentRef);\n+        if (document.hasFacet(COLD_STORAGE)) {\n+            log.trace(\"The blob content of document: {} is already on cold storage\", document);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE1OTI5OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozOTowOVrOFfaIXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDozOTowOVrOFfaIXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3ODMwMw==", "bodyText": "Or why not a boolean: true if the main content is not null and was not already in cold storage, false otherwise?", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368478303", "createdAt": "2020-01-20T10:39:09Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class DocumentBlobColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(DocumentBlobColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the blob associated with the document of the given {@link DocumentRef} into a cold storage.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     */\n+    // FIXME / TODO perhaps return an object that give information, or at least returns the new `file:content` ->\n+    // thumbnail", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE2MjY2OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo0MDoyMlrOFfaKWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo0MDoyMlrOFfaKWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3ODgwOQ==", "bodyText": "I'd go for mainContent, that's what we usually use.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368478809", "createdAt": "2020-01-20T10:40:22Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the {@link Blob} associated to a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class DocumentBlobColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(DocumentBlobColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the blob associated with the document of the given {@link DocumentRef} into a cold storage.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     */\n+    // FIXME / TODO perhaps return an object that give information, or at least returns the new `file:content` ->\n+    // thumbnail\n+    public static void moveBlob(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel document = session.getDocument(documentRef);\n+        if (document.hasFacet(COLD_STORAGE)) {\n+            log.trace(\"The blob content of document: {} is already on cold storage\", document);\n+            return;\n+        }\n+        document.addFacet(COLD_STORAGE);\n+        Serializable currentContent = document.getPropertyValue(FILE_CONTENT_PROPERTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE4NjU1OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/blob/MoveBlobToColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo0ODowOVrOFfaYdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo0ODowOVrOFfaYdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MjQyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Moves the {@link Blob} associated with the {@link DocumentModel} to the cold storage.\n          \n          \n            \n             * Moves the main content associated with the input {@link DocumentModel} to cold storage.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368482422", "createdAt": "2020-01-20T10:48:09Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/blob/MoveBlobToColdStorage.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.blob;\n+\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.collectors.BlobCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+\n+/**\n+ * Moves the {@link Blob} associated with the {@link DocumentModel} to the cold storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE5MDY1OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/blob/MoveBlobToColdStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo0OTo0NVrOFfabGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDozNjoyOVrOFfgTVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MzA5OA==", "bodyText": "I would rather return the updated document, like the UpdateDocument operation, rather than the main content which is arbitrary.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368483098", "createdAt": "2020-01-20T10:49:45Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/blob/MoveBlobToColdStorage.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.blob;\n+\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.collectors.BlobCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+\n+/**\n+ * Moves the {@link Blob} associated with the {@link DocumentModel} to the cold storage.\n+ * \n+ * @since 11.1\n+ */\n+@Operation(id = MoveBlobToColdStorage.ID, category = Constants.CAT_BLOB, label = \"Move Document Blob To ColdStorage\", description = \"Moves the blob document content to the cold storage.\")\n+public class MoveBlobToColdStorage {\n+\n+    public static final String ID = \"Blob.MoveBlobToColdStorage\";\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @OperationMethod(collector = BlobCollector.class)\n+    public Blob run(DocumentModel doc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMjI1NQ==", "bodyText": "yep, then i will move the moveContentToColdStorage  under the document package instead the blob as the input/output a document.  Are you agree ?", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368532255", "createdAt": "2020-01-20T12:53:19Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/blob/MoveBlobToColdStorage.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.blob;\n+\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.collectors.BlobCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+\n+/**\n+ * Moves the {@link Blob} associated with the {@link DocumentModel} to the cold storage.\n+ * \n+ * @since 11.1\n+ */\n+@Operation(id = MoveBlobToColdStorage.ID, category = Constants.CAT_BLOB, label = \"Move Document Blob To ColdStorage\", description = \"Moves the blob document content to the cold storage.\")\n+public class MoveBlobToColdStorage {\n+\n+    public static final String ID = \"Blob.MoveBlobToColdStorage\";\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @OperationMethod(collector = BlobCollector.class)\n+    public Blob run(DocumentModel doc) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MzA5OA=="}, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3OTQxNQ==", "bodyText": "yes", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368579415", "createdAt": "2020-01-20T14:36:29Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/blob/MoveBlobToColdStorage.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.blob;\n+\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.collectors.BlobCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+\n+/**\n+ * Moves the {@link Blob} associated with the {@link DocumentModel} to the cold storage.\n+ * \n+ * @since 11.1\n+ */\n+@Operation(id = MoveBlobToColdStorage.ID, category = Constants.CAT_BLOB, label = \"Move Document Blob To ColdStorage\", description = \"Moves the blob document content to the cold storage.\")\n+public class MoveBlobToColdStorage {\n+\n+    public static final String ID = \"Blob.MoveBlobToColdStorage\";\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @OperationMethod(collector = BlobCollector.class)\n+    public Blob run(DocumentModel doc) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MzA5OA=="}, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE5NTY2OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/blob/MoveBlobToColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo1MToyNVrOFfaeGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo1MToyNVrOFfaeGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4Mzg2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class MoveBlobToColdStorage {\n          \n          \n            \n            public class MoveToColdStorage {", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368483867", "createdAt": "2020-01-20T10:51:25Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/blob/MoveBlobToColdStorage.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.blob;\n+\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.collectors.BlobCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+\n+/**\n+ * Moves the {@link Blob} associated with the {@link DocumentModel} to the cold storage.\n+ * \n+ * @since 11.1\n+ */\n+@Operation(id = MoveBlobToColdStorage.ID, category = Constants.CAT_BLOB, label = \"Move Document Blob To ColdStorage\", description = \"Moves the blob document content to the cold storage.\")\n+public class MoveBlobToColdStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzE5NjcyOnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo1MTo0OFrOFfaexg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo1MTo0OFrOFfaexg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4NDAzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldMoveBlobDocument() throws OperationException, IOException {\n          \n          \n            \n                public void shouldMoveToColdStorage() throws OperationException, IOException {", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368484038", "createdAt": "2020-01-20T10:51:48Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.FakeThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.blob.MoveBlobToColdStorage;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-document-blob-coldstorage-contribs.xml\")\n+public class MoveToColdStorageTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    @Test\n+    public void shouldMoveBlobDocument() throws OperationException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzIxNDU1OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo1Nzo0OVrOFfapUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo1Nzo0OVrOFfapUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4NjczOA==", "bodyText": "If we agree to return the document itself, then here you can add an assertion on the uid of the returned document (must be equal to documentModel.getId()).", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368486738", "createdAt": "2020-01-20T10:57:49Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.FakeThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.blob.MoveBlobToColdStorage;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-document-blob-coldstorage-contribs.xml\")\n+public class MoveToColdStorageTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    @Test\n+    public void shouldMoveBlobDocument() throws OperationException, IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n+        documentModel.setPropertyValue(FILE_CONTENT_PROPERTY, (Serializable) Blobs.createBlob(\"foo\"));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            Blob fileContent = (Blob) automationService.run(context, MoveBlobToColdStorage.ID, Map.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzIyOTIwOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/test/resources/OSGI-INF/test-blob-provider-inmemory.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTowMjozMVrOFfax3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTowMjozMVrOFfax3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4ODkyNQ==", "bodyText": "Is that used anywhere? Doesn't seem to be.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368488925", "createdAt": "2020-01-20T11:02:31Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/test/resources/OSGI-INF/test-blob-provider-inmemory.xml", "diffHunk": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.blob.in-memory\" version=\"1.0.0\">\n+  <extension target=\"org.nuxeo.ecm.core.blob.BlobManager\" point=\"configuration\">\n+    <blobprovider name=\"test\">\n+      <class>org.nuxeo.ecm.core.blob.InMemoryBlobProvider</class>\n+    </blobprovider>\n+  </extension>\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzI0Mjg4OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-document-blob-coldstorage-contribs.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTowNzo0NVrOFfa6Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTowNzo0NVrOFfa6Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MTA1NQ==", "bodyText": "Since this contribution already exists in test-dummy-blob-provider.xml, maybe we could deploy this contribution in the test to avoid duplication here?\nAnd probably, at some point, we'll have a ColdStorageFeature deploying test-dummy-blob-provider.xml, test-document-blob-coldstorage-contribs.xml, etc.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368491055", "createdAt": "2020-01-20T11:07:45Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-document-blob-coldstorage-contribs.xml", "diffHunk": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.coldstorage.test\">\n+\n+  <extension target=\"org.nuxeo.ecm.core.api.thumbnail.ThumbnailService\"\n+             point=\"thumbnailFactory\">\n+    <thumbnailFactory name=\"fakeThumbnailFactory\"\n+                      factoryClass=\"org.nuxeo.ecm.core.FakeThumbnailFactory\" />\n+  </extension>\n+\n+  <extension target=\"org.nuxeo.ecm.core.blob.BlobManager\" point=\"configuration\">\n+    <blobprovider name=\"coldstorage\">\n+      <class>org.nuxeo.ecm.core.blob.InMemoryBlobProvider</class>\n+    </blobprovider>\n+    <blobprovider name=\"dummy\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzI0NjA1OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-document-blob-coldstorage-contribs.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTowODo1NFrOFfa8EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTowODo1NFrOFfa8EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MTUzNw==", "bodyText": "Again, to simplify, this file could be named test-coldstorage-contrib.xml WDYT?\nAlso for a quicker retrieval when looking for a resource in the IDE :)", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368491537", "createdAt": "2020-01-20T11:08:54Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-document-blob-coldstorage-contribs.xml", "diffHunk": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzI1NDY4OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-document-blob-coldstorage-contribs.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToxMjoxNFrOFfbBRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToxMjoxNFrOFfbBRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5Mjg3MQ==", "bodyText": "Do we really need to define a default one?", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368492871", "createdAt": "2020-01-20T11:12:14Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-document-blob-coldstorage-contribs.xml", "diffHunk": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.coldstorage.test\">\n+\n+  <extension target=\"org.nuxeo.ecm.core.api.thumbnail.ThumbnailService\"\n+             point=\"thumbnailFactory\">\n+    <thumbnailFactory name=\"fakeThumbnailFactory\"\n+                      factoryClass=\"org.nuxeo.ecm.core.FakeThumbnailFactory\" />\n+  </extension>\n+\n+  <extension target=\"org.nuxeo.ecm.core.blob.BlobManager\" point=\"configuration\">\n+    <blobprovider name=\"coldstorage\">\n+      <class>org.nuxeo.ecm.core.blob.InMemoryBlobProvider</class>\n+    </blobprovider>\n+    <blobprovider name=\"dummy\">\n+      <class>org.nuxeo.ecm.core.DummyBlobProvider</class>\n+    </blobprovider>\n+  </extension>\n+  <extension target=\"org.nuxeo.ecm.core.blob.DocumentBlobManager\" point=\"configuration\">\n+    <blobdispatcher>\n+      <class>org.nuxeo.ecm.core.blob.DefaultBlobDispatcher</class>\n+      <property name=\"blob:xpath=coldContent\">coldstorage</property>\n+      <property name=\"blob:xpath=content\">dummy</property>\n+      <property name=\"default\">test</property>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzI1NTU2OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToxMjozNlrOFfbB2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToxMjozNlrOFfbB2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MzAxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class TestDocumentBlobColdStorage {\n          \n          \n            \n            public class TestColdStorage {", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368493018", "createdAt": "2020-01-20T11:12:36Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.FakeThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+import org.nuxeo.runtime.test.runner.LogFeature;\n+import org.nuxeo.runtime.test.runner.LoggerLevel;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, LogFeature.class, LogCaptureFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-document-blob-coldstorage-contribs.xml\")\n+public class TestDocumentBlobColdStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzI2NjYxOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToxNjo1NlrOFfbIgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToxNjo1NlrOFfbIgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5NDcyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static final String BLOB_FILE_CONTENT = \"foo\";\n          \n          \n            \n                protected static final String FILE_CONTENT = \"foo\";", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368494723", "createdAt": "2020-01-20T11:16:56Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.FakeThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+import org.nuxeo.runtime.test.runner.LogFeature;\n+import org.nuxeo.runtime.test.runner.LoggerLevel;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, LogFeature.class, LogCaptureFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-document-blob-coldstorage-contribs.xml\")\n+public class TestDocumentBlobColdStorage {\n+\n+    protected static final String BLOB_FILE_CONTENT = \"foo\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzI3MTI3OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToxODo1NFrOFfbLXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToxODo1NFrOFfbLXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5NTQ1Mw==", "bodyText": "not needed I believe", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368495453", "createdAt": "2020-01-20T11:18:54Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.FakeThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+import org.nuxeo.runtime.test.runner.LogFeature;\n+import org.nuxeo.runtime.test.runner.LoggerLevel;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, LogFeature.class, LogCaptureFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-document-blob-coldstorage-contribs.xml\")\n+public class TestDocumentBlobColdStorage {\n+\n+    protected static final String BLOB_FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    @Test\n+    public void shouldMoveBlobDocument() throws IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"AnyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(BLOB_FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the blob to cold storage\n+        moveBlob(session, documentModel.getRef());\n+        session.saveDocument(documentModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzI3MzAwOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToxOTo0MlrOFfbMfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo1MToxOVrOFfgxLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5NTc0MA==", "bodyText": "Florent recently suggested to use DocumentModel#refresh instead.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368495740", "createdAt": "2020-01-20T11:19:42Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.FakeThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+import org.nuxeo.runtime.test.runner.LogFeature;\n+import org.nuxeo.runtime.test.runner.LoggerLevel;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, LogFeature.class, LogCaptureFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-document-blob-coldstorage-contribs.xml\")\n+public class TestDocumentBlobColdStorage {\n+\n+    protected static final String BLOB_FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    @Test\n+    public void shouldMoveBlobDocument() throws IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"AnyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(BLOB_FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the blob to cold storage\n+        moveBlob(session, documentModel.getRef());\n+        session.saveDocument(documentModel);\n+        transactionalFeature.nextTransaction();\n+\n+        documentModel = session.getDocument(documentModel.getRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMTM0Nw==", "bodyText": "for the first test shouldMoveBlobDocument i will do it but the second when i replace the get document but the refresh then my test fail on:\n  assertEquals(String.format(\"The main content of document: %s is already in cold storage\", documentModel),\n                caughtEvents.get(0));\n\nbecause the the expected one had in his title the value of Doc Ref", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368511347", "createdAt": "2020-01-20T11:59:48Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.FakeThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+import org.nuxeo.runtime.test.runner.LogFeature;\n+import org.nuxeo.runtime.test.runner.LoggerLevel;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, LogFeature.class, LogCaptureFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-document-blob-coldstorage-contribs.xml\")\n+public class TestDocumentBlobColdStorage {\n+\n+    protected static final String BLOB_FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    @Test\n+    public void shouldMoveBlobDocument() throws IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"AnyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(BLOB_FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the blob to cold storage\n+        moveBlob(session, documentModel.getRef());\n+        session.saveDocument(documentModel);\n+        transactionalFeature.nextTransaction();\n+\n+        documentModel = session.getDocument(documentModel.getRef());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5NTc0MA=="}, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NzA1Mw==", "bodyText": "OK so if it's not working as expected maybe not use at all here to be consistent between the 2 tests, WDYT?", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368587053", "createdAt": "2020-01-20T14:51:19Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.FakeThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+import org.nuxeo.runtime.test.runner.LogFeature;\n+import org.nuxeo.runtime.test.runner.LoggerLevel;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, LogFeature.class, LogCaptureFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-document-blob-coldstorage-contribs.xml\")\n+public class TestDocumentBlobColdStorage {\n+\n+    protected static final String BLOB_FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    @Test\n+    public void shouldMoveBlobDocument() throws IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"AnyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(BLOB_FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the blob to cold storage\n+        moveBlob(session, documentModel.getRef());\n+        session.saveDocument(documentModel);\n+        transactionalFeature.nextTransaction();\n+\n+        documentModel = session.getDocument(documentModel.getRef());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5NTc0MA=="}, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzI4NjUwOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToyNTowNlrOFfbU3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToyNTowNlrOFfbU3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5Nzg4Ng==", "bodyText": "You can simply use ((Blob) documentModel.getPropertyValue(xpath)).getString(), directly in the test.\nIn fact, to enforce the check, maybe:\nBlob blob content = (Blob) documentModel.getPropertyValue(xpath);\nassertNotNull(content);\nassertEquals(\"XYZ\", content.getString())\n\nBut I would still keep these assertions inside the test, for readability.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368497886", "createdAt": "2020-01-20T11:25:06Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.FakeThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+import org.nuxeo.runtime.test.runner.LogFeature;\n+import org.nuxeo.runtime.test.runner.LoggerLevel;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, LogFeature.class, LogCaptureFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-document-blob-coldstorage-contribs.xml\")\n+public class TestDocumentBlobColdStorage {\n+\n+    protected static final String BLOB_FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    @Test\n+    public void shouldMoveBlobDocument() throws IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"AnyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(BLOB_FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the blob to cold storage\n+        moveBlob(session, documentModel.getRef());\n+        session.saveDocument(documentModel);\n+        transactionalFeature.nextTransaction();\n+\n+        documentModel = session.getDocument(documentModel.getRef());\n+        assertTrue(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // check if the `file:content` contains the thumbnail blob\n+        checkBlobContent(documentModel, FILE_CONTENT_PROPERTY, FAKE_THUMBNAIL_CONTENT);\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, COLD_STORAGE_CONTENT_PROPERTY, BLOB_FILE_CONTENT);\n+    }\n+\n+    @Test\n+    @LogCaptureFeature.FilterOn(loggerClass = DocumentBlobColdStorageHelper.class, logLevel = \"TRACE\")\n+    @LoggerLevel(klass = DocumentBlobColdStorageHelper.class, level = \"TRACE\")\n+    public void shouldLogMessageWhenMovingDocumentBlobAlreadyOnColdStorage() {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(BLOB_FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the first time\n+        moveBlob(session, documentModel.getRef());\n+        session.saveDocument(documentModel);\n+        transactionalFeature.nextTransaction();\n+        documentModel = session.getDocument(documentModel.getRef());\n+        assertTrue(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // make another move\n+        moveBlob(session, documentModel.getRef());\n+        List<String> caughtEvents = logCaptureResult.getCaughtEventMessages();\n+        assertEquals(1, caughtEvents.size());\n+        assertEquals(String.format(\"The blob content of document: %s is already on cold storage\", documentModel),\n+                caughtEvents.get(0));\n+    }\n+\n+    protected void checkBlobContent(DocumentModel documentModel, String xpath, String expectedContent)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzI4ODY5OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToyNTo1M1rOFfbWMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToyNTo1M1rOFfbWMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5ODIyNg==", "bodyText": "not needed", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368498226", "createdAt": "2020-01-20T11:25:53Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestDocumentBlobColdStorage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.FakeThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper.moveBlob;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.DocumentBlobColdStorageHelper;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+import org.nuxeo.runtime.test.runner.LogFeature;\n+import org.nuxeo.runtime.test.runner.LoggerLevel;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, LogFeature.class, LogCaptureFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-document-blob-coldstorage-contribs.xml\")\n+public class TestDocumentBlobColdStorage {\n+\n+    protected static final String BLOB_FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    @Test\n+    public void shouldMoveBlobDocument() throws IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"AnyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(BLOB_FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the blob to cold storage\n+        moveBlob(session, documentModel.getRef());\n+        session.saveDocument(documentModel);\n+        transactionalFeature.nextTransaction();\n+\n+        documentModel = session.getDocument(documentModel.getRef());\n+        assertTrue(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // check if the `file:content` contains the thumbnail blob\n+        checkBlobContent(documentModel, FILE_CONTENT_PROPERTY, FAKE_THUMBNAIL_CONTENT);\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, COLD_STORAGE_CONTENT_PROPERTY, BLOB_FILE_CONTENT);\n+    }\n+\n+    @Test\n+    @LogCaptureFeature.FilterOn(loggerClass = DocumentBlobColdStorageHelper.class, logLevel = \"TRACE\")\n+    @LoggerLevel(klass = DocumentBlobColdStorageHelper.class, level = \"TRACE\")\n+    public void shouldLogMessageWhenMovingDocumentBlobAlreadyOnColdStorage() {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(BLOB_FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the first time\n+        moveBlob(session, documentModel.getRef());\n+        session.saveDocument(documentModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzMxNzE1OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/FakeThumbnailFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTozNzoyNFrOFfbnOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTozNzoyNFrOFfbnOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUwMjU4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class FakeThumbnailFactory implements ThumbnailFactory {\n          \n          \n            \n            public class DummyThumbnailFactory implements ThumbnailFactory {", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368502586", "createdAt": "2020-01-20T11:37:24Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/FakeThumbnailFactory.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailFactory;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class FakeThumbnailFactory implements ThumbnailFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6766410047e5b029685b67bcf8b20fb745686f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Nzc4NTIyOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDoyNTo1MlrOFff-WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo0NTo1N1rOFfgmQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3NDA0MA==", "bodyText": "I think the logic is not correct.\nWe should have:\nif (document.hasFacet(COLD_STORAGE) && document.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) != null) {\n    log.debug(\"The main content of document: {} is already in cold storage\", document);\n    return false;", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368574040", "createdAt": "2020-01-20T14:25:52Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     */\n+    public static boolean moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel document = session.getDocument(documentRef);\n+        if (document.hasFacet(COLD_STORAGE)) {\n+            log.debug(\"The main content of document: {} is already in cold storage\", document);\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b4a4ed24756657767a9c5b108661e6a1f73324"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MjY4NQ==", "bodyText": "yes,  i was just waiting for #3666 (comment) before making the changes its why i didn't include the second part of the check", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368582685", "createdAt": "2020-01-20T14:42:51Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     */\n+    public static boolean moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel document = session.getDocument(documentRef);\n+        if (document.hasFacet(COLD_STORAGE)) {\n+            log.debug(\"The main content of document: {} is already in cold storage\", document);\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3NDA0MA=="}, "originalCommit": {"oid": "01b4a4ed24756657767a9c5b108661e6a1f73324"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NDI1OQ==", "bodyText": "i have my answer i will include it on my next push after your final review ;)", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368584259", "createdAt": "2020-01-20T14:45:57Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     */\n+    public static boolean moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel document = session.getDocument(documentRef);\n+        if (document.hasFacet(COLD_STORAGE)) {\n+            log.debug(\"The main content of document: {} is already in cold storage\", document);\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3NDA0MA=="}, "originalCommit": {"oid": "01b4a4ed24756657767a9c5b108661e6a1f73324"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzgzMzU2OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo0MDoxNlrOFfga4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo0MDoxNlrOFfga4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MTM0NA==", "bodyText": "I think this is not needed since we are in the same transaction (no REST call for instance), in fact, you are retrieving fileContent before this call and the assertion that happens after is working...", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368581344", "createdAt": "2020-01-20T14:40:16Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.DummyThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public class MoveToColdStorageTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    @Test\n+    public void shouldMoveToColdStorage() throws OperationException, IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n+        documentModel.setPropertyValue(FILE_CONTENT_PROPERTY, (Serializable) Blobs.createBlob(\"foo\"));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID,\n+                    Map.of());\n+            Blob fileContent = (Blob) documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n+            txFeature.nextTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b4a4ed24756657767a9c5b108661e6a1f73324"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzgzNTc5OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo0MDo1MlrOFfgcLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo0MDo1MlrOFfgcLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MTY3Ng==", "bodyText": "Maybe you could add an assertion on the cold storage content as well?", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368581676", "createdAt": "2020-01-20T14:40:52Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.DummyThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.api.impl.blob.AbstractBlob.UTF_8;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public class MoveToColdStorageTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    @Test\n+    public void shouldMoveToColdStorage() throws OperationException, IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n+        documentModel.setPropertyValue(FILE_CONTENT_PROPERTY, (Serializable) Blobs.createBlob(\"foo\"));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID,\n+                    Map.of());\n+            Blob fileContent = (Blob) documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n+            txFeature.nextTransaction();\n+            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n+            assertTrue(updatedDocModel.hasFacet(COLD_STORAGE));\n+            assertEquals(FAKE_THUMBNAIL_CONTENT, new String(fileContent.getByteArray(), UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b4a4ed24756657767a9c5b108661e6a1f73324"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Nzg1MDI2OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-coldstorage-contrib.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo0NToyMVrOFfglIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoxMjowMVrOFf5atQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4Mzk3MQ==", "bodyText": "I thought you would keep the coldstorage one and remove the dummy one, relying test-dummy-blob-provider.xml to be deployed in the tests.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368583971", "createdAt": "2020-01-20T14:45:21Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.coldstorage.test\">\n+\n+  <extension target=\"org.nuxeo.ecm.core.api.thumbnail.ThumbnailService\"\n+             point=\"thumbnailFactory\">\n+    <thumbnailFactory name=\"fakeThumbnailFactory\"\n+                      factoryClass=\"org.nuxeo.ecm.core.DummyThumbnailFactory\" />\n+  </extension>\n+\n+  <extension target=\"org.nuxeo.ecm.core.blob.BlobManager\" point=\"configuration\">\n+    <blobprovider name=\"dummy\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b4a4ed24756657767a9c5b108661e6a1f73324"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5MTU3NQ==", "bodyText": "OK, I see that you're using the \"other\" blobProvider for coldContent, so you could not define any blobprovider at all here I guess, and rely on both contributions:\n\ntest-blob-provider-inmemory.xml ->  <blobprovider name=\"other\">\ntest-dummy-blob-provider.xml -> <blobprovider name=\"dummy\">\n\nOr I'm missing something.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368591575", "createdAt": "2020-01-20T15:00:23Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.coldstorage.test\">\n+\n+  <extension target=\"org.nuxeo.ecm.core.api.thumbnail.ThumbnailService\"\n+             point=\"thumbnailFactory\">\n+    <thumbnailFactory name=\"fakeThumbnailFactory\"\n+                      factoryClass=\"org.nuxeo.ecm.core.DummyThumbnailFactory\" />\n+  </extension>\n+\n+  <extension target=\"org.nuxeo.ecm.core.blob.BlobManager\" point=\"configuration\">\n+    <blobprovider name=\"dummy\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4Mzk3MQ=="}, "originalCommit": {"oid": "01b4a4ed24756657767a9c5b108661e6a1f73324"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5MDkwMQ==", "bodyText": "as we discussed i rollback/revert this part of using a dispatcher i did it to prepare some stuff on the nexts development when we will have the low implementation on S3 Glacier. But  i agree we don't need it right now", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368990901", "createdAt": "2020-01-21T13:12:01Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.coldstorage.test\">\n+\n+  <extension target=\"org.nuxeo.ecm.core.api.thumbnail.ThumbnailService\"\n+             point=\"thumbnailFactory\">\n+    <thumbnailFactory name=\"fakeThumbnailFactory\"\n+                      factoryClass=\"org.nuxeo.ecm.core.DummyThumbnailFactory\" />\n+  </extension>\n+\n+  <extension target=\"org.nuxeo.ecm.core.blob.BlobManager\" point=\"configuration\">\n+    <blobprovider name=\"dummy\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4Mzk3MQ=="}, "originalCommit": {"oid": "01b4a4ed24756657767a9c5b108661e6a1f73324"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Nzg2MzMyOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo0OToxNlrOFfgs_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo0OToxNlrOFfgs_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NTk4Mw==", "bodyText": "I guess this isn't needed since we're in the same transaction.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368585983", "createdAt": "2020-01-20T14:49:16Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.DummyThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.moveContentToColdStorage;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+import org.nuxeo.runtime.test.runner.LogFeature;\n+import org.nuxeo.runtime.test.runner.LoggerLevel;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, LogFeature.class, LogCaptureFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+@Deploy(\"org.nuxeo.ecm.core.api.tests:OSGI-INF/test-blob-provider-inmemory.xml\")\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    @Test\n+    public void shouldMoveBlobDocument() throws IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"AnyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the blob to cold storage\n+        moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b4a4ed24756657767a9c5b108661e6a1f73324"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Nzg2NzQ1OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo1MDoyN1rOFfgvaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoxNDo1OFrOFf5gOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NjYwMQ==", "bodyText": "Not needed I believe.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368586601", "createdAt": "2020-01-20T14:50:27Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.DummyThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.moveContentToColdStorage;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+import org.nuxeo.runtime.test.runner.LogFeature;\n+import org.nuxeo.runtime.test.runner.LoggerLevel;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, LogFeature.class, LogCaptureFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+@Deploy(\"org.nuxeo.ecm.core.api.tests:OSGI-INF/test-blob-provider-inmemory.xml\")\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    @Test\n+    public void shouldMoveBlobDocument() throws IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"AnyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the blob to cold storage\n+        moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();\n+\n+        documentModel.refresh();\n+        assertTrue(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // check if the `file:content` contains the thumbnail blob\n+        checkBlobContent(documentModel, FILE_CONTENT_PROPERTY, FAKE_THUMBNAIL_CONTENT);\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);\n+    }\n+\n+    @Test\n+    @LogCaptureFeature.FilterOn(loggerClass = ColdStorageHelper.class, logLevel = \"DEBUG\")\n+    @LoggerLevel(klass = ColdStorageHelper.class, level = \"DEBUG\")\n+    public void shouldLogMessageWhenMovingDocumentBlobAlreadyOnColdStorage() {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the first time\n+        moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b4a4ed24756657767a9c5b108661e6a1f73324"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5MjMxMg==", "bodyText": "as above i removed it, mainly our move method will returns the updated document no need for waiting a next transaction :)", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r368992312", "createdAt": "2020-01-21T13:14:58Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.DummyThumbnailFactory.FAKE_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.moveContentToColdStorage;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.LogCaptureFeature;\n+import org.nuxeo.runtime.test.runner.LogFeature;\n+import org.nuxeo.runtime.test.runner.LoggerLevel;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, LogFeature.class, LogCaptureFeature.class })\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+@Deploy(\"org.nuxeo.ecm.core.api.tests:OSGI-INF/test-blob-provider-inmemory.xml\")\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected LogCaptureFeature.Result logCaptureResult;\n+\n+    @Test\n+    public void shouldMoveBlobDocument() throws IOException {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"AnyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the blob to cold storage\n+        moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();\n+\n+        documentModel.refresh();\n+        assertTrue(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // check if the `file:content` contains the thumbnail blob\n+        checkBlobContent(documentModel, FILE_CONTENT_PROPERTY, FAKE_THUMBNAIL_CONTENT);\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);\n+    }\n+\n+    @Test\n+    @LogCaptureFeature.FilterOn(loggerClass = ColdStorageHelper.class, logLevel = \"DEBUG\")\n+    @LoggerLevel(klass = ColdStorageHelper.class, level = \"DEBUG\")\n+    public void shouldLogMessageWhenMovingDocumentBlobAlreadyOnColdStorage() {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n+        documentModel.setPropertyValue(\"file:content\", (Serializable) Blobs.createBlob(FILE_CONTENT));\n+        documentModel = session.createDocument(documentModel);\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // move the first time\n+        moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NjYwMQ=="}, "originalCommit": {"oid": "01b4a4ed24756657767a9c5b108661e6a1f73324"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDU4NDk1OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzozNzoyMVrOFf6MUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzozNzoyMVrOFf6MUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwMzYwMA==", "bodyText": "\"if the move has succeeded\" or (better I think) \"if the move succeeds\"", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369003600", "createdAt": "2020-01-21T13:37:21Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * \n+     * @return the updated document model if the move has succeed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDU5NzIxOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo0MTowNVrOFf6Tig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo0MTowNVrOFf6Tig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNTQ1MA==", "bodyText": "maybe just \"for document\"", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369005450", "createdAt": "2020-01-21T13:41:05Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * \n+     * @return the updated document model if the move has succeed\n+     * @throws NuxeoException if there is no main content associated with the given document, or if the main content is\n+     *             already in the cold storage\n+     */\n+    public static DocumentModel moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+\n+        Serializable mainContent = documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n+        if (mainContent == null) {\n+            throw new NuxeoException(\n+                    String.format(\"There is no main content for the documentModel: %s.\", documentModel), SC_NOT_FOUND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDU5ODkyOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo0MTozM1rOFf6UhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo0Mjo1M1rOFf6W_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNTcwMQ==", "bodyText": "\"of document\"", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369005701", "createdAt": "2020-01-21T13:41:33Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * \n+     * @return the updated document model if the move has succeed\n+     * @throws NuxeoException if there is no main content associated with the given document, or if the main content is\n+     *             already in the cold storage\n+     */\n+    public static DocumentModel moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+\n+        Serializable mainContent = documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n+        if (mainContent == null) {\n+            throw new NuxeoException(\n+                    String.format(\"There is no main content for the documentModel: %s.\", documentModel), SC_NOT_FOUND);\n+        }\n+\n+        if (documentModel.hasFacet(COLD_STORAGE)) {\n+            Blob coldStorageContent = (Blob) documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY);\n+            if (coldStorageContent != null) {\n+                throw new NuxeoException(\n+                        String.format(\"The main content of documentModel: %s is already in cold storage.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNjMzNA==", "bodyText": "yes :) i saw it when i started the new ticket, sorry about it", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369006334", "createdAt": "2020-01-21T13:42:53Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * \n+     * @return the updated document model if the move has succeed\n+     * @throws NuxeoException if there is no main content associated with the given document, or if the main content is\n+     *             already in the cold storage\n+     */\n+    public static DocumentModel moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+\n+        Serializable mainContent = documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n+        if (mainContent == null) {\n+            throw new NuxeoException(\n+                    String.format(\"There is no main content for the documentModel: %s.\", documentModel), SC_NOT_FOUND);\n+        }\n+\n+        if (documentModel.hasFacet(COLD_STORAGE)) {\n+            Blob coldStorageContent = (Blob) documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY);\n+            if (coldStorageContent != null) {\n+                throw new NuxeoException(\n+                        String.format(\"The main content of documentModel: %s is already in cold storage.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNTcwMQ=="}, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDYwMzc0OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo0MzowOFrOFf6Xeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo0NzozN1rOFf6gRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNjQ1OA==", "bodyText": "maybe go for\nif (documentModel.hasFacet(COLD_STORAGE) && documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) != null) {\n    ...\n}\n\nas you're not using coldStorageContent, and it will avoid a cast.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369006458", "createdAt": "2020-01-21T13:43:08Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * \n+     * @return the updated document model if the move has succeed\n+     * @throws NuxeoException if there is no main content associated with the given document, or if the main content is\n+     *             already in the cold storage\n+     */\n+    public static DocumentModel moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+\n+        Serializable mainContent = documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n+        if (mainContent == null) {\n+            throw new NuxeoException(\n+                    String.format(\"There is no main content for the documentModel: %s.\", documentModel), SC_NOT_FOUND);\n+        }\n+\n+        if (documentModel.hasFacet(COLD_STORAGE)) {\n+            Blob coldStorageContent = (Blob) documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY);\n+            if (coldStorageContent != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwODcxMQ==", "bodyText": "i agree its what i started to do on the new ticket ;)", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369008711", "createdAt": "2020-01-21T13:47:37Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * \n+     * @return the updated document model if the move has succeed\n+     * @throws NuxeoException if there is no main content associated with the given document, or if the main content is\n+     *             already in the cold storage\n+     */\n+    public static DocumentModel moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+\n+        Serializable mainContent = documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n+        if (mainContent == null) {\n+            throw new NuxeoException(\n+                    String.format(\"There is no main content for the documentModel: %s.\", documentModel), SC_NOT_FOUND);\n+        }\n+\n+        if (documentModel.hasFacet(COLD_STORAGE)) {\n+            Blob coldStorageContent = (Blob) documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY);\n+            if (coldStorageContent != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNjQ1OA=="}, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDYwOTUyOnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo0NTowM1rOFf6bIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo0NTowM1rOFf6bIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNzM5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Operation(id = MoveToColdStorage.ID, category = Constants.CAT_BLOB, label = \"Move To ColdStorage\", description = \"Move the main document content to the cold storage.\")\n          \n          \n            \n            @Operation(id = MoveToColdStorage.ID, category = Constants.CAT_BLOB, label = \"Move to Cold Storage\", description = \"Move the main document content to the cold storage.\")", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369007392", "createdAt": "2020-01-21T13:45:03Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorage.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.moveContentToColdStorage;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+\n+/**\n+ * Moves the main content associated with the input {@link DocumentModel} to the cold storage.\n+ * \n+ * @since 11.1\n+ */\n+@Operation(id = MoveToColdStorage.ID, category = Constants.CAT_BLOB, label = \"Move To ColdStorage\", description = \"Move the main document content to the cold storage.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDYxODc0OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo0Nzo1N1rOFf6g6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo0Nzo1N1rOFf6g6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwODg3Mg==", "bodyText": "return session.createDocument(documentModel);", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369008872", "createdAt": "2020-01-21T13:47:57Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.nuxeo.ecm.core.DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public class MoveToColdStorageTest {\n+\n+    protected static final String FILE_CONTENT = \"foo and boo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Test\n+    public void shouldMoveToColdStorage() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(true);\n+        moveContentToColdStorage(documentModel);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingDocumentBlobAlreadyInColdStorage() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(true);\n+        // make a move\n+        moveContentToColdStorage(documentModel);\n+        try {\n+            // try to make a second move\n+            moveContentToColdStorage(documentModel);\n+            fail(\"Should fail because the content is already in cold storage\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_CONFLICT, ne.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(false);\n+        try {\n+            moveContentToColdStorage(documentModel);\n+            fail(\"Should fail because there is no main content associated with the document\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_NOT_FOUND, ne.getStatusCode());\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(DocumentModel documentModel) throws OperationException, IOException {\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID,\n+                    Map.of());\n+            Blob fileContent = (Blob) updatedDocModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n+            Blob coldStorageContent = (Blob) updatedDocModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY);\n+            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n+            assertTrue(updatedDocModel.hasFacet(COLD_STORAGE));\n+            assertEquals(DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n+            assertEquals(FILE_CONTENT, coldStorageContent.getString());\n+        }\n+    }\n+\n+    protected DocumentModel createDocument(boolean withBlobContent) {\n+        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n+        if (withBlobContent) {\n+            documentModel.setPropertyValue(FILE_CONTENT_PROPERTY, (Serializable) Blobs.createBlob(FILE_CONTENT));\n+        }\n+        documentModel = session.createDocument(documentModel);\n+\n+        return documentModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDYzMjIwOnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo1MTo1MlrOFf6pXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo1MTo1MlrOFf6pXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMTAzOA==", "bodyText": "I think you can use the 2-parameter method instead of passing an empty Map.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369011038", "createdAt": "2020-01-21T13:51:52Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.nuxeo.ecm.core.DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public class MoveToColdStorageTest {\n+\n+    protected static final String FILE_CONTENT = \"foo and boo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Test\n+    public void shouldMoveToColdStorage() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(true);\n+        moveContentToColdStorage(documentModel);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingDocumentBlobAlreadyInColdStorage() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(true);\n+        // make a move\n+        moveContentToColdStorage(documentModel);\n+        try {\n+            // try to make a second move\n+            moveContentToColdStorage(documentModel);\n+            fail(\"Should fail because the content is already in cold storage\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_CONFLICT, ne.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(false);\n+        try {\n+            moveContentToColdStorage(documentModel);\n+            fail(\"Should fail because there is no main content associated with the document\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_NOT_FOUND, ne.getStatusCode());\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(DocumentModel documentModel) throws OperationException, IOException {\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDYzNDM3OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo1MjozOVrOFf6q8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo1MjozOVrOFf6q8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMTQ0Mw==", "bodyText": "useless", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369011443", "createdAt": "2020-01-21T13:52:39Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.nuxeo.ecm.core.DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.moveContentToColdStorage;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        documentModel = moveContentToColdStorage(session, documentModel.getRef());\n+        documentModel = session.getDocument(documentModel.getRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDY0ODU1OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo1NjoyNlrOFf6zbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo1NjoyNlrOFf6zbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMzYxNQ==", "bodyText": "useless", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369013615", "createdAt": "2020-01-21T13:56:26Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.nuxeo.ecm.core.DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.moveContentToColdStorage;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        documentModel = moveContentToColdStorage(session, documentModel.getRef());\n+        documentModel = session.getDocument(documentModel.getRef());\n+        assertTrue(documentModel.hasFacet(COLD_STORAGE));\n+\n+        // check if the `file:content` contains the thumbnail blob\n+        checkBlobContent(documentModel, FILE_CONTENT_PROPERTY, DUMMY_THUMBNAIL_CONTENT);\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingDocumentBlobAlreadyInColdStorage() {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move for the first time\n+        documentModel = moveContentToColdStorage(session, documentModel.getRef());\n+        documentModel = session.getDocument(documentModel.getRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDY2MDk1OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo1OTozOFrOFf661Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDowMjo0N1rOFf7Bvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNTUwOQ==", "bodyText": "I think you should remove this, because shouldFailWhenMovingDocumentBlobAlreadyInColdStorage will fail not for the expected reason.", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369015509", "createdAt": "2020-01-21T13:59:38Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.nuxeo.ecm.core.DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public class MoveToColdStorageTest {\n+\n+    protected static final String FILE_CONTENT = \"foo and boo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Test\n+    public void shouldMoveToColdStorage() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(true);\n+        moveContentToColdStorage(documentModel);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingDocumentBlobAlreadyInColdStorage() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(true);\n+        // make a move\n+        moveContentToColdStorage(documentModel);\n+        try {\n+            // try to make a second move\n+            moveContentToColdStorage(documentModel);\n+            fail(\"Should fail because the content is already in cold storage\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_CONFLICT, ne.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(false);\n+        try {\n+            moveContentToColdStorage(documentModel);\n+            fail(\"Should fail because there is no main content associated with the document\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_NOT_FOUND, ne.getStatusCode());\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(DocumentModel documentModel) throws OperationException, IOException {\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNzI3OA==", "bodyText": "i agree i did it on TestColdStorage but i forgot it on operation test :)", "url": "https://github.com/nuxeo/nuxeo/pull/3677#discussion_r369017278", "createdAt": "2020-01-21T14:02:47Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/MoveToColdStorageTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.nuxeo.ecm.core.DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.blob.ColdStorageHelper.FILE_CONTENT_PROPERTY;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COLD_STORAGE;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public class MoveToColdStorageTest {\n+\n+    protected static final String FILE_CONTENT = \"foo and boo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Test\n+    public void shouldMoveToColdStorage() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(true);\n+        moveContentToColdStorage(documentModel);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingDocumentBlobAlreadyInColdStorage() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(true);\n+        // make a move\n+        moveContentToColdStorage(documentModel);\n+        try {\n+            // try to make a second move\n+            moveContentToColdStorage(documentModel);\n+            fail(\"Should fail because the content is already in cold storage\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_CONFLICT, ne.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() throws OperationException, IOException {\n+        DocumentModel documentModel = createDocument(false);\n+        try {\n+            moveContentToColdStorage(documentModel);\n+            fail(\"Should fail because there is no main content associated with the document\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_NOT_FOUND, ne.getStatusCode());\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(DocumentModel documentModel) throws OperationException, IOException {\n+        assertFalse(documentModel.hasFacet(COLD_STORAGE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNTUwOQ=="}, "originalCommit": {"oid": "3fc9f436abafcadd7e2224ac5b4c283254c7c616"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4272, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}