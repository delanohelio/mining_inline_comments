{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTA4Njc5", "number": 3998, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyNzo1NlrOD5CmHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowMzo1NFrOD54w_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTM3OTUwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyNzo1NlrOGQFl6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzowMzo1MFrOGQzEPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ==", "bodyText": "I am wondering if we should add the author and text to toString method in the case where we log a sensitive data I mean. what each person says :)", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419522025", "createdAt": "2020-05-04T15:27:56Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "diffHunk": "@@ -270,6 +270,9 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return new ToStringBuilder(this).append(\"id\", getId()).toString();\n+        return new ToStringBuilder(this).append(\"id\", getId())\n+                                        .append(\"author\", getAuthor())\n+                                        .append(\"text\", getText())\n+                                        .toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMjQ1MA==", "bodyText": "Good interrogation, I don't have any clue on this. Maybe the @nuxeo/platform team?", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420012450", "createdAt": "2020-05-05T10:34:10Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "diffHunk": "@@ -270,6 +270,9 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return new ToStringBuilder(this).append(\"id\", getId()).toString();\n+        return new ToStringBuilder(this).append(\"id\", getId())\n+                                        .append(\"author\", getAuthor())\n+                                        .append(\"text\", getText())\n+                                        .toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ=="}, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxNzY3Mg==", "bodyText": "Interesting question... is it more or less secure than logging document titles (DocumentModelImpl#toString implementation)?", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420217672", "createdAt": "2020-05-05T15:53:51Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "diffHunk": "@@ -270,6 +270,9 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return new ToStringBuilder(this).append(\"id\", getId()).toString();\n+        return new ToStringBuilder(this).append(\"id\", getId())\n+                                        .append(\"author\", getAuthor())\n+                                        .append(\"text\", getText())\n+                                        .toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ=="}, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2MDU0MQ==", "bodyText": "Agreed, the id is enough imho.", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420260541", "createdAt": "2020-05-05T16:53:52Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "diffHunk": "@@ -270,6 +270,9 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return new ToStringBuilder(this).append(\"id\", getId()).toString();\n+        return new ToStringBuilder(this).append(\"id\", getId())\n+                                        .append(\"author\", getAuthor())\n+                                        .append(\"text\", getText())\n+                                        .toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ=="}, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2NzA3MQ==", "bodyText": "Agree with you @troger, that's I didn't have any clue...\nIn the end, I rollbacked.", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420267071", "createdAt": "2020-05-05T17:03:50Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "diffHunk": "@@ -270,6 +270,9 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return new ToStringBuilder(this).append(\"id\", getId()).toString();\n+        return new ToStringBuilder(this).append(\"id\", getId())\n+                                        .append(\"author\", getAuthor())\n+                                        .append(\"text\", getText())\n+                                        .toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ=="}, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTUxOTA5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1ODo1M1rOGQG72g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjowNzo0NlrOGQHTeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NDAyNg==", "bodyText": "I am wondering in the case of migrating the comment from property to tree as the same implementation has the COMMENT_PARENT_ID_PROPERTY. perhaps we replace it by:\n    @Override\n    public Comment updateComment(CoreSession session, String commentId, Comment comment)\n            throws CommentNotFoundException, CommentSecurityException {\n        DocumentRef commentRef = new IdRef(commentId);\n        return execute(session, commentRef, cm -> cm.updateComment(session, commentId, comment));\n    }\n\nwdyt and I did the change on my local machine it compile... :) but i didn't run the test", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419544026", "createdAt": "2020-05-04T15:58:53Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -160,28 +168,34 @@ public Comment getComment(CoreSession session, String commentId)\n     public Comment updateComment(CoreSession session, String commentId, Comment comment)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            return second.updateComment(session, commentId, comment);\n-        } else {\n-            return first.updateComment(session, commentId, comment);\n-        }\n+        return CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                return second.updateComment(session, commentId, comment);\n+            } else {\n+                return first.updateComment(session, commentId, comment);\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MDA3NA==", "bodyText": "I don't want to change the implementation there, If this has worked until there I would rather keep it. I just added a doPriviledge because only administrator case was tested before.", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419550074", "createdAt": "2020-05-04T16:07:46Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -160,28 +168,34 @@ public Comment getComment(CoreSession session, String commentId)\n     public Comment updateComment(CoreSession session, String commentId, Comment comment)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            return second.updateComment(session, commentId, comment);\n-        } else {\n-            return first.updateComment(session, commentId, comment);\n-        }\n+        return CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                return second.updateComment(session, commentId, comment);\n+            } else {\n+                return first.updateComment(session, commentId, comment);\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NDAyNg=="}, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTUyODY1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjowMTowN1rOGQHB3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjowNzo1OVrOGQHUFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NTU2NA==", "bodyText": "same as above where we can replace with:\n @Override\n    public void deleteComment(CoreSession session, String commentId)\n            throws CommentNotFoundException, CommentSecurityException {\n        DocumentRef commentRef = new IdRef(commentId);\n        execute(session, commentRef, cm -> {\n            cm.deleteComment(session, commentId);\n            return true;\n        });\n    }\n\nhere I just wrap the deletion to return a boolean because the execute function param is function Type", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419545564", "createdAt": "2020-05-04T16:01:07Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -160,28 +168,34 @@ public Comment getComment(CoreSession session, String commentId)\n     public Comment updateComment(CoreSession session, String commentId, Comment comment)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            return second.updateComment(session, commentId, comment);\n-        } else {\n-            return first.updateComment(session, commentId, comment);\n-        }\n+        return CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                return second.updateComment(session, commentId, comment);\n+            } else {\n+                return first.updateComment(session, commentId, comment);\n+            }\n+        });\n     }\n \n     @Override\n     public void deleteComment(CoreSession session, String commentId)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            second.deleteComment(session, commentId);\n-        } else {\n-            first.deleteComment(session, commentId);\n-        }\n+        CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                second.deleteComment(session, commentId);\n+            } else {\n+                first.deleteComment(session, commentId);\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MDIyOA==", "bodyText": "Same as other.", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419550228", "createdAt": "2020-05-04T16:07:59Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -160,28 +168,34 @@ public Comment getComment(CoreSession session, String commentId)\n     public Comment updateComment(CoreSession session, String commentId, Comment comment)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            return second.updateComment(session, commentId, comment);\n-        } else {\n-            return first.updateComment(session, commentId, comment);\n-        }\n+        return CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                return second.updateComment(session, commentId, comment);\n+            } else {\n+                return first.updateComment(session, commentId, comment);\n+            }\n+        });\n     }\n \n     @Override\n     public void deleteComment(CoreSession session, String commentId)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            second.deleteComment(session, commentId);\n-        } else {\n-            first.deleteComment(session, commentId);\n-        }\n+        CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                second.deleteComment(session, commentId);\n+            } else {\n+                first.deleteComment(session, commentId);\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NTU2NA=="}, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTg2NzgyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1NzoxMFrOGQwNIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1NzoxMFrOGQwNIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDE5Mg==", "bodyText": "Worth adding a @since here?", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420220192", "createdAt": "2020-05-05T15:57:10Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -70,7 +71,7 @@\n \n     private static final Logger log = LogManager.getLogger(AbstractCommentManager.class);\n \n-    protected static final String COMMENTS_DIRECTORY = \"Comments\";\n+    public static final String COMMENTS_DIRECTORY = \"Comments\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTg3MzY5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1ODoyN1rOGQwQ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1ODoyN1rOGQwQ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMTE2Nw==", "bodyText": "@since?", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420221167", "createdAt": "2020-05-05T15:58:27Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -53,6 +53,14 @@ public BridgeCommentManager(CommentManager first, CommentManager second) {\n         this.second = second;\n     }\n \n+    public CommentManager getFirst() {\n+        return first;\n+    }\n+\n+    public CommentManager getSecond() {\n+        return second;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODU3NjYxOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/event/test/CapturingEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo1NjozOVrOGRJ12A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo1NjozOVrOGRJ12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0MDIxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return findFirstCapturedEvent(event).orElseThrow(() -> new AssertionError(\"Unable to find first Event\"));\n          \n          \n            \n                    return findFirstCapturedEvent(event).orElseThrow(() -> new AssertionError(\"Unable to find first Event for event: \" + event));", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420640216", "createdAt": "2020-05-06T08:56:39Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/event/test/CapturingEventListener.java", "diffHunk": "@@ -97,8 +105,165 @@ public CapturingEventListener(String... events) {\n         return streamCapturedEventContexts().filter(clazz::isInstance).map(clazz::cast);\n     }\n \n+    /**\n+     * @since 11.1\n+     */\n+    public Optional<Event> findFirstCapturedEvent() {\n+        return streamCapturedEvents().findFirst();\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    public Event findFirstCapturedEventOrElseThrow() {\n+        return findFirstCapturedEvent().orElseThrow(() -> new AssertionError(\"Unable to find first Event\"));\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    public Optional<Event> findFirstCapturedEvent(String event) {\n+        return streamCapturedEvents(event).findFirst();\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    public Event findFirstCapturedEventOrElseThrow(String event) {\n+        return findFirstCapturedEvent(event).orElseThrow(() -> new AssertionError(\"Unable to find first Event\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708fb0507cf5771b789bda96f049d6cd9882e4f8"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDE1OTI1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/listener/CheckedInCommentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTo0Mjo1MVrOGRZVOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTo0Mjo1MVrOGRZVOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NDAwOQ==", "bodyText": "You could maybe move that just before the if using it?", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420894009", "createdAt": "2020-05-06T15:42:51Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/listener/CheckedInCommentListener.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  \n+ *  Contributors:\n+ *      Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.comment.listener;\n+\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_ANCESTOR_IDS_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_PARENT_ID_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.impl.AbstractCommentManager.COMMENTS_DIRECTORY;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.EventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+\n+/**\n+ * Listener that updates {@code comment:parentId} and {@code comment:ancestorIds} on version's comments after the\n+ * check-in event.\n+ *\n+ * @since 11.1\n+ */\n+public class CheckedInCommentListener implements EventListener {\n+\n+    @Override\n+    public void handleEvent(Event event) {\n+        EventContext ctx = event.getContext();\n+        if (ctx instanceof DocumentEventContext) {\n+            DocumentEventContext docCtx = (DocumentEventContext) ctx;\n+            CoreSession session = docCtx.getCoreSession();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccfd4ee88f67022b60b22945ec762345d6774df9"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDI1NDY4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestCommentManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowMzo1NFrOGRaRyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowMzo1NFrOGRaRyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwOTUxMw==", "bodyText": "Empty line.", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420909513", "createdAt": "2020-05-06T16:03:54Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestCommentManagerImpl.java", "diffHunk": "@@ -55,105 +47,223 @@\n @Features(RelationCommentFeature.class)\n public class TestCommentManagerImpl extends AbstractTestCommentManager {\n \n-    public static final String QUERY_COMMENTS_AS_DOCUMENTS = \"SELECT * FROM \" + COMMENT_DOC_TYPE;\n+    public TestCommentManagerImpl() {\n+        super(CommentManagerImpl.class);\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testCreateReply() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testGetCommentPermissions() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testGetReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - ordering not supported\")\n+    public void testGetCommentsOrdering() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - ordering not supported\")\n+    public void testGetCommentsPaginationOrdering() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this test/case - permissions check different\")\n+    public void testGetCommentsWithReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateComment() {\n+        super.testUpdateComment(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateCommentByItsAuthor() {\n+        super.testUpdateCommentByItsAuthor(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateCommentByPowerfulUser() {\n+        super.testUpdateCommentByPowerfulUser(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateCommentWithModificationDate() {\n+        super.testUpdateCommentWithModificationDate(); // if implemented one day\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this test/case - permissions check different\")\n+    public void testUpdateReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testDeleteCommentByItsAuthor() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testDeleteReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testGetExternalComment() {\n+        super.testGetExternalComment(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testGetExternalCommentPermissions() {\n+        super.testGetExternalCommentPermissions(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateExternalComment() {\n+        super.testUpdateExternalComment(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateExternalCommentByItsAuthor() {\n+        super.testUpdateExternalCommentByItsAuthor(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateExternalCommentByPowerfulUser() {\n+        super.testUpdateExternalCommentByPowerfulUser(); // if implemented one day\n+    }\n \n-    public static final String USERNAME = \"Foo\";\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testDeleteExternalComment() {\n+        super.testDeleteExternalComment(); // if implemented one day\n+    }\n \n-    public static final String COMMENT_CONTENT = \"This is my comment\";\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testDeleteExternalCommentByItsAuthor() {\n+        super.testDeleteExternalCommentByItsAuthor(); // if implemented one day\n+    }\n \n-    @Inject\n-    protected CoreFeature coreFeature;\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testDeleteExternalCommentByPowerfulUser() {\n+        super.testDeleteExternalCommentByPowerfulUser(); // if implemented one day\n+    }\n \n-    @Inject\n-    protected UserManager userManager;\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testExternalCommentOnVersion() {\n+        super.testExternalCommentOnVersion(); // if implemented one day\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - deprecated implementation\")\n+    public void testCommentsAncestorIds() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccfd4ee88f67022b60b22945ec762345d6774df9"}, "originalPosition": 186}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4208, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}