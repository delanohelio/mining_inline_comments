{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MTI2OTIy", "number": 4328, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjozNToyNFrOEm5M9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowNzowN1rOE-3FYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjE4NTUwOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNjozNToyNFrOHXLpDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjowNDo0MVrOHXXNPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3MDAyOA==", "bodyText": "There's a second 2.10.3 mention in the same pom, see d60f1ec", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r494070028", "createdAt": "2020-09-24T06:35:24Z", "author": {"login": "atchertchian"}, "path": "pom.xml", "diffHunk": "@@ -5402,7 +5402,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>2.10.3</version>\n+          <version>3.2.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64e0609d6f7d8c0bb6e10a8f82421497a079b3c7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1NTEzOQ==", "bodyText": "This one https://github.com/nuxeo/nuxeo/pull/4328/files#diff-600376dffeb79835ede4a0b285078036L6461?", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r494255139", "createdAt": "2020-09-24T11:56:52Z", "author": {"login": "kevinleturc"}, "path": "pom.xml", "diffHunk": "@@ -5402,7 +5402,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>2.10.3</version>\n+          <version>3.2.0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3MDAyOA=="}, "originalCommit": {"oid": "64e0609d6f7d8c0bb6e10a8f82421497a079b3c7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1OTUxOA==", "bodyText": "Indeed, i missed the change \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r494259518", "createdAt": "2020-09-24T12:04:41Z", "author": {"login": "atchertchian"}, "path": "pom.xml", "diffHunk": "@@ -5402,7 +5402,7 @@\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>2.10.3</version>\n+          <version>3.2.0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3MDAyOA=="}, "originalCommit": {"oid": "64e0609d6f7d8c0bb6e10a8f82421497a079b3c7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTk1MTIwOnYy", "diffSide": "RIGHT", "path": "ci/Jenkinsfiles/javadoc.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo0NDowMVrOH8BC9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo0NDowMVrOH8BC9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5Mzc1MA==", "bodyText": "seem unneeded", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r532693750", "createdAt": "2020-11-30T15:44:01Z", "author": {"login": "ataillefer"}, "path": "ci/Jenkinsfiles/javadoc.groovy", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Antoine Taillefer <ataillefer@nuxeo.com>\n+ *     Thomas Roger <troger@nuxeo.com>\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+repositoryUrl = 'https://github.com/nuxeo/nuxeo'\n+\n+properties([\n+  [$class: 'GithubProjectProperty', projectUrlStr: repositoryUrl],\n+  [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', daysToKeepStr: '60', numToKeepStr: '60', artifactNumToKeepStr: '5']],\n+  disableConcurrentBuilds(),\n+])\n+\n+void setGitHubBuildStatus(String context, String message, String state) {\n+  if (env.DRY_RUN != \"true\") {\n+    step([\n+      $class: 'GitHubCommitStatusSetter',\n+      reposSource: [$class: 'ManuallyEnteredRepositorySource', url: repositoryUrl],\n+      contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: context],\n+      statusResultSource: [$class: 'ConditionalStatusResultSource', results: [[$class: 'AnyBuildResult', message: message, state: state]]],\n+    ])\n+  }\n+}\n+\n+String getMavenArgs() {\n+  def args = '-B -nsu -Dnuxeo.skip.enforcer=true'\n+  if (!isPullRequest()) {\n+    args += ' -Prelease'\n+  }\n+  return args\n+}\n+\n+def isPullRequest() {\n+  return BRANCH_NAME =~ /PR-.*/\n+}\n+\n+String getVersion() {\n+  return isPullRequest() ? getPullRequestVersion() : getReleaseVersion()\n+}\n+\n+String getReleaseVersion() {\n+  String nuxeoVersion = readMavenPom().getVersion()\n+  String noSnapshot = nuxeoVersion.replace('-SNAPSHOT', '')\n+  String version = noSnapshot + '.0' // first version ever\n+\n+  // find the latest tag if any\n+  sh \"git fetch origin 'refs/tags/v${noSnapshot}*:refs/tags/v${noSnapshot}*'\"\n+  def tag = sh(returnStdout: true, script: \"git tag --sort=taggerdate --list 'v${noSnapshot}*' | tail -1 | tr -d '\\n'\")\n+  if (tag) {\n+    container('maven') {\n+      version = sh(returnStdout: true, script: \"semver bump patch ${tag} | tr -d '\\n'\")\n+    }\n+  }\n+  return version\n+}\n+\n+String getPullRequestVersion() {\n+  return \"${BRANCH_NAME}-\" + readMavenPom().getVersion()\n+}\n+\n+pipeline {\n+  agent {\n+    label 'jenkins-nuxeo-package-11'\n+  }\n+  options {\n+    timeout(time: 1, unit: 'HOURS')\n+  }\n+  environment {\n+    // force ${HOME}=/root - for an unexplained reason, ${HOME} is resolved as /home/jenkins though sh 'env' shows HOME=/root\n+    HOME = '/root'\n+    HELM_CHART_REPOSITORY_NAME = 'local-jenkins-x'\n+    HELM_CHART_REPOSITORY_URL = 'http://jenkins-x-chartmuseum:8080'\n+    HELM_CHART_NUXEO = 'nuxeo'\n+    NUXEO_JAVADOC_IMAGE_NAME = 'nuxeo-javadoc'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba618721687ff7ba406308f188dc8b156992a407"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTk1MTkwOnYy", "diffSide": "RIGHT", "path": "ci/Jenkinsfiles/javadoc.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo0NDowOVrOH8BDWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo0NDowOVrOH8BDWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5Mzg1MA==", "bodyText": "seem unneeded", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r532693850", "createdAt": "2020-11-30T15:44:09Z", "author": {"login": "ataillefer"}, "path": "ci/Jenkinsfiles/javadoc.groovy", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Antoine Taillefer <ataillefer@nuxeo.com>\n+ *     Thomas Roger <troger@nuxeo.com>\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+repositoryUrl = 'https://github.com/nuxeo/nuxeo'\n+\n+properties([\n+  [$class: 'GithubProjectProperty', projectUrlStr: repositoryUrl],\n+  [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', daysToKeepStr: '60', numToKeepStr: '60', artifactNumToKeepStr: '5']],\n+  disableConcurrentBuilds(),\n+])\n+\n+void setGitHubBuildStatus(String context, String message, String state) {\n+  if (env.DRY_RUN != \"true\") {\n+    step([\n+      $class: 'GitHubCommitStatusSetter',\n+      reposSource: [$class: 'ManuallyEnteredRepositorySource', url: repositoryUrl],\n+      contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: context],\n+      statusResultSource: [$class: 'ConditionalStatusResultSource', results: [[$class: 'AnyBuildResult', message: message, state: state]]],\n+    ])\n+  }\n+}\n+\n+String getMavenArgs() {\n+  def args = '-B -nsu -Dnuxeo.skip.enforcer=true'\n+  if (!isPullRequest()) {\n+    args += ' -Prelease'\n+  }\n+  return args\n+}\n+\n+def isPullRequest() {\n+  return BRANCH_NAME =~ /PR-.*/\n+}\n+\n+String getVersion() {\n+  return isPullRequest() ? getPullRequestVersion() : getReleaseVersion()\n+}\n+\n+String getReleaseVersion() {\n+  String nuxeoVersion = readMavenPom().getVersion()\n+  String noSnapshot = nuxeoVersion.replace('-SNAPSHOT', '')\n+  String version = noSnapshot + '.0' // first version ever\n+\n+  // find the latest tag if any\n+  sh \"git fetch origin 'refs/tags/v${noSnapshot}*:refs/tags/v${noSnapshot}*'\"\n+  def tag = sh(returnStdout: true, script: \"git tag --sort=taggerdate --list 'v${noSnapshot}*' | tail -1 | tr -d '\\n'\")\n+  if (tag) {\n+    container('maven') {\n+      version = sh(returnStdout: true, script: \"semver bump patch ${tag} | tr -d '\\n'\")\n+    }\n+  }\n+  return version\n+}\n+\n+String getPullRequestVersion() {\n+  return \"${BRANCH_NAME}-\" + readMavenPom().getVersion()\n+}\n+\n+pipeline {\n+  agent {\n+    label 'jenkins-nuxeo-package-11'\n+  }\n+  options {\n+    timeout(time: 1, unit: 'HOURS')\n+  }\n+  environment {\n+    // force ${HOME}=/root - for an unexplained reason, ${HOME} is resolved as /home/jenkins though sh 'env' shows HOME=/root\n+    HOME = '/root'\n+    HELM_CHART_REPOSITORY_NAME = 'local-jenkins-x'\n+    HELM_CHART_REPOSITORY_URL = 'http://jenkins-x-chartmuseum:8080'\n+    HELM_CHART_NUXEO = 'nuxeo'\n+    NUXEO_JAVADOC_IMAGE_NAME = 'nuxeo-javadoc'\n+    MAVEN_OPTS = \"$MAVEN_OPTS -Xms2g -Xmx3g -XX:+TieredCompilation -XX:TieredStopAtLevel=1\"\n+    MAVEN_ARGS = getMavenArgs()\n+    VERSION = getVersion()\n+    CHANGE_BRANCH = \"${env.CHANGE_BRANCH != null ? env.CHANGE_BRANCH : BRANCH_NAME}\"\n+    CHANGE_TARGET = \"${env.CHANGE_TARGET != null ? env.CHANGE_TARGET : BRANCH_NAME}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba618721687ff7ba406308f188dc8b156992a407"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTk2MzQxOnYy", "diffSide": "RIGHT", "path": "ci/docker/javadoc/Dockerfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo0NjoyMFrOH8BKDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo1MzozMVrOH87KLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5NTU2Nw==", "bodyText": "is this comment relevant here?", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r532695567", "createdAt": "2020-11-30T15:46:20Z", "author": {"login": "ataillefer"}, "path": "ci/docker/javadoc/Dockerfile", "diffHunk": "@@ -0,0 +1,9 @@\n+FROM nginx:1.18-alpine\n+\n+WORKDIR /usr/share/nginx/html/\n+\n+# Clean the default public folder\n+RUN rm -fr * .??*\n+\n+# finally, the \"public\" folder generated by Hugo in the previous stage is copied into the public fold of nginx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba618721687ff7ba406308f188dc8b156992a407"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NTg2OA==", "bodyText": "Not really, a bad copy/paste from report, thanks.", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r533645868", "createdAt": "2020-12-01T18:53:31Z", "author": {"login": "kevinleturc"}, "path": "ci/docker/javadoc/Dockerfile", "diffHunk": "@@ -0,0 +1,9 @@\n+FROM nginx:1.18-alpine\n+\n+WORKDIR /usr/share/nginx/html/\n+\n+# Clean the default public folder\n+RUN rm -fr * .??*\n+\n+# finally, the \"public\" folder generated by Hugo in the previous stage is copied into the public fold of nginx", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5NTU2Nw=="}, "originalCommit": {"oid": "ba618721687ff7ba406308f188dc8b156992a407"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTk2OTg3OnYy", "diffSide": "RIGHT", "path": "ci/helm/javadoc/values.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo0NzozNVrOH8BN1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo0NzozNVrOH8BN1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5NjUzNQ==", "bodyText": "\"$BRANCH_NAME\"?", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r532696535", "createdAt": "2020-11-30T15:47:35Z", "author": {"login": "ataillefer"}, "path": "ci/helm/javadoc/values.yaml", "diffHunk": "@@ -0,0 +1,55 @@\n+expose:\n+  Annotations:\n+    helm.sh/hook: post-install,post-upgrade\n+    helm.sh/hook-delete-policy: hook-succeeded\n+  config:\n+    # add tls configuration\n+    domain: platform.dev.nuxeo.com\n+    exposer: Ingress\n+    http: true\n+    tlsacme: true\n+    tlsSecretName: platform-cluster-tls\n+    urltemplate: '{{.Namespace}}-{{.Service}}.{{.Domain}}' # ie: nuxeo-preview-master-javadoc\n+\n+cleanup:\n+  Args:\n+    - --cleanup\n+  Annotations:\n+    helm.sh/hook: pre-delete\n+    helm.sh/hook-delete-policy: hook-succeeded\n+\n+javadoc:\n+  podLabels:\n+    branch: \"master\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba618721687ff7ba406308f188dc8b156992a407"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQ4MzcyOnYy", "diffSide": "RIGHT", "path": "ci/Jenkinsfiles/javadoc.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowMjo1OFrOH8Pocg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjo1OTo1OVrOH9k5Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzMjcyMg==", "bodyText": "no need of JX \ud83d\udc4c", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r532932722", "createdAt": "2020-11-30T22:02:58Z", "author": {"login": "ataillefer"}, "path": "ci/Jenkinsfiles/javadoc.groovy", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Antoine Taillefer <ataillefer@nuxeo.com>\n+ *     Thomas Roger <troger@nuxeo.com>\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+repositoryUrl = 'https://github.com/nuxeo/nuxeo'\n+\n+properties([\n+  [$class: 'GithubProjectProperty', projectUrlStr: repositoryUrl],\n+  [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', daysToKeepStr: '60', numToKeepStr: '60', artifactNumToKeepStr: '5']],\n+  disableConcurrentBuilds(),\n+])\n+\n+void setGitHubBuildStatus(String context, String message, String state) {\n+  if (env.DRY_RUN != \"true\") {\n+    step([\n+      $class: 'GitHubCommitStatusSetter',\n+      reposSource: [$class: 'ManuallyEnteredRepositorySource', url: repositoryUrl],\n+      contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: context],\n+      statusResultSource: [$class: 'ConditionalStatusResultSource', results: [[$class: 'AnyBuildResult', message: message, state: state]]],\n+    ])\n+  }\n+}\n+\n+String getMavenArgs() {\n+  def args = '-B -nsu -Dnuxeo.skip.enforcer=true'\n+  if (!isPullRequest()) {\n+    args += ' -Prelease'\n+  }\n+  return args\n+}\n+\n+def isPullRequest() {\n+  return BRANCH_NAME =~ /PR-.*/\n+}\n+\n+String getVersion() {\n+  return isPullRequest() ? getPullRequestVersion() : getReleaseVersion()\n+}\n+\n+String getReleaseVersion() {\n+  String nuxeoVersion = readMavenPom().getVersion()\n+  String noSnapshot = nuxeoVersion.replace('-SNAPSHOT', '')\n+  String version = noSnapshot + '.0' // first version ever\n+\n+  // find the latest tag if any\n+  sh \"git fetch origin 'refs/tags/v${noSnapshot}*:refs/tags/v${noSnapshot}*'\"\n+  def tag = sh(returnStdout: true, script: \"git tag --sort=taggerdate --list 'v${noSnapshot}*' | tail -1 | tr -d '\\n'\")\n+  if (tag) {\n+    container('maven') {\n+      version = sh(returnStdout: true, script: \"semver bump patch ${tag} | tr -d '\\n'\")\n+    }\n+  }\n+  return version\n+}\n+\n+String getPullRequestVersion() {\n+  return \"${BRANCH_NAME}-\" + readMavenPom().getVersion()\n+}\n+\n+pipeline {\n+  agent {\n+    label 'jenkins-nuxeo-package-11'\n+  }\n+  options {\n+    timeout(time: 1, unit: 'HOURS')\n+  }\n+  environment {\n+    // force ${HOME}=/root - for an unexplained reason, ${HOME} is resolved as /home/jenkins though sh 'env' shows HOME=/root\n+    HOME = '/root'\n+    HELM_CHART_REPOSITORY_NAME = 'local-jenkins-x'\n+    HELM_CHART_REPOSITORY_URL = 'http://jenkins-x-chartmuseum:8080'\n+    HELM_CHART_NUXEO = 'nuxeo'\n+    NUXEO_JAVADOC_IMAGE_NAME = 'nuxeo-javadoc'\n+    MAVEN_OPTS = \"$MAVEN_OPTS -Xms2g -Xmx3g -XX:+TieredCompilation -XX:TieredStopAtLevel=1\"\n+    MAVEN_ARGS = getMavenArgs()\n+    VERSION = getVersion()\n+    CHANGE_BRANCH = \"${env.CHANGE_BRANCH != null ? env.CHANGE_BRANCH : BRANCH_NAME}\"\n+    CHANGE_TARGET = \"${env.CHANGE_TARGET != null ? env.CHANGE_TARGET : BRANCH_NAME}\"\n+    // jx step helm install's --name and --namespace options require alphabetic chars to be lowercase\n+    PREVIEW_NAMESPACE = \"nuxeo-preview-${BRANCH_NAME.toLowerCase()}\"\n+  }\n+\n+  stages {\n+    stage('Set labels') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Set Kubernetes resource labels\n+          ----------------------------------------\n+          \"\"\"\n+          echo \"Set label 'branch: ${BRANCH_NAME}' on pod ${NODE_NAME}\"\n+          sh \"\"\"\n+            kubectl label pods ${NODE_NAME} branch=${BRANCH_NAME}\n+          \"\"\"\n+          // set branch name in Helm chart values used for the unit tests\n+          sh \"\"\"\n+            for valuesFile in ci/helm/*.yaml; do\n+              envsubst < \\$valuesFile > \\$valuesFile~gen\n+            done\n+          \"\"\"\n+          // output pod description\n+          echo \"Describe pod ${NODE_NAME}\"\n+          sh \"\"\"\n+            kubectl describe pod ${NODE_NAME}\n+          \"\"\"\n+        }\n+      }\n+    }\n+\n+    stage('Update version') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Update version\n+          ----------------------------------------\n+          New version: ${VERSION}\n+          \"\"\"\n+          sh \"\"\"\n+            # root POM\n+            mvn ${MAVEN_ARGS} -Pdistrib,docker versions:set -DnewVersion=${VERSION} -DgenerateBackupPoms=false\n+            perl -i -pe 's|<nuxeo.platform.version>.*?</nuxeo.platform.version>|<nuxeo.platform.version>${VERSION}</nuxeo.platform.version>|' pom.xml\n+            perl -i -pe 's|org.nuxeo.ecm.product.version=.*|org.nuxeo.ecm.product.version=${VERSION}|' server/nuxeo-nxr-server/src/main/resources/templates/nuxeo.defaults\n+          \"\"\"\n+        }\n+      }\n+    }\n+\n+    stage('Build Javadoc') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        setGitHubBuildStatus('javadoc/build', 'Build Javadoc', 'PENDING')\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Build Javadoc\n+          ----------------------------------------\"\"\"\n+          echo \"MAVEN_OPTS=$MAVEN_OPTS\"\n+          sh \"mvn ${MAVEN_ARGS} -V -T4C -Pjavadoc -DskipTests install\"\n+          sh \"mvn ${MAVEN_ARGS} -f server/pom.xml -Pjavadoc -DskipTests install\"\n+        }\n+      }\n+      post {\n+        success {\n+          setGitHubBuildStatus('javadoc/build', 'Build Javadoc', 'SUCCESS')\n+        }\n+        unsuccessful {\n+          setGitHubBuildStatus('javadoc/build', 'Build Javadoc', 'FAILURE')\n+        }\n+      }\n+    }\n+\n+    stage('Generate Nuxeo ECM Javadoc') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        setGitHubBuildStatus('javadoc/site', 'Generate Javadoc site', 'PENDING')\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Generate Nuxeo ECM Javadoc\n+          ----------------------------------------\"\"\"\n+          sh \"mvn ${MAVEN_ARGS} -Pjavadoc site\"\n+        }\n+      }\n+      post {\n+        success {\n+          setGitHubBuildStatus('javadoc/site', 'Generate Javadoc site', 'SUCCESS')\n+        }\n+        unsuccessful {\n+          setGitHubBuildStatus('javadoc/site', 'Generate Javadoc site', 'FAILURE')\n+        }\n+      }\n+    }\n+\n+    stage('Deploy Nuxeo ECM Javadoc') {\n+      when {\n+        branch 'PR-*'\n+        expression {\n+          return pullRequest.labels.contains('preview-javadoc')\n+        }\n+        not {\n+          environment name: 'DRY_RUN', value: 'true'\n+        }\n+      }\n+      steps {\n+        setGitHubBuildStatus('javadoc/preview', 'Deploy Javadoc environment', 'PENDING')\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Build Nuxeo ECM Javadoc Docker Image ${VERSION}\n+          ----------------------------------------\n+          Image tag: ${VERSION}\"\"\"\n+          sh \"mv target/site/apidocs ci/docker/javadoc/apidocs\"\n+          dir('ci/docker/javadoc') {\n+            sh \"skaffold build -f skaffold.yaml\"\n+          }\n+\n+          echo \"\"\"\n+          ----------------------------------------\n+          Deploy Nuxeo ECM Javadoc Environment\n+          ----------------------------------------\n+          Image tag: ${VERSION}\n+          Namespace: ${PREVIEW_NAMESPACE}\"\"\"\n+          dir('ci/helm/javadoc') {\n+            script {\n+              // first substitute environment variables in chart values\n+              sh \"\"\"\n+                mv values.yaml values.yaml.tosubst\n+                envsubst < values.yaml.tosubst > values.yaml\n+              \"\"\"\n+              // second create target namespace (if doesn't exist) and copy secrets to target namespace\n+              boolean nsExists = sh(returnStatus: true, script: \"kubectl get namespace ${PREVIEW_NAMESPACE}\") == 0\n+              if (!nsExists) {\n+                sh \"kubectl create namespace ${PREVIEW_NAMESPACE}\"\n+              }\n+              sh \"kubectl --namespace platform get secret kubernetes-docker-cfg -ojsonpath='{.data.\\\\.dockerconfigjson}' | base64 --decode > /tmp/config.json\"\n+              sh \"\"\"kubectl create secret generic kubernetes-docker-cfg \\\n+                  --namespace=${PREVIEW_NAMESPACE} \\\n+                  --from-file=.dockerconfigjson=/tmp/config.json \\\n+                  --type=kubernetes.io/dockerconfigjson --dry-run -o yaml | kubectl apply -f -\"\"\"\n+              // third build and deploy the chart\n+              sh \"\"\"\n+                jx step helm build --verbose\n+                jx step helm install --namespace ${PREVIEW_NAMESPACE} --name javadoc --verbose .\n+              \"\"\"\n+              host = sh(returnStdout: true, script: \"kubectl get ingress --namespace=${PREVIEW_NAMESPACE} javadoc -ojsonpath='{.items[*].spec.rules[*].host}'\")\n+              echo \"\"\"\n+              ----------------------------------------\n+              Javadoc Environment available at: https://${host}\n+              ----------------------------------------\"\"\"\n+              // comment the PR if it is the first time\n+              if (isPullRequest() && !nsExists) {\n+                pullRequest.comment(\"Preview Javadoc environment available [here](https://${url}).\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba618721687ff7ba406308f188dc8b156992a407"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY2MDUxMQ==", "bodyText": "Indeed \ud83d\ude42, you make me think that I don't handle the namespace cleanup. I'll have a look to do it without the jx command.", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r533660511", "createdAt": "2020-12-01T19:18:11Z", "author": {"login": "kevinleturc"}, "path": "ci/Jenkinsfiles/javadoc.groovy", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Antoine Taillefer <ataillefer@nuxeo.com>\n+ *     Thomas Roger <troger@nuxeo.com>\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+repositoryUrl = 'https://github.com/nuxeo/nuxeo'\n+\n+properties([\n+  [$class: 'GithubProjectProperty', projectUrlStr: repositoryUrl],\n+  [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', daysToKeepStr: '60', numToKeepStr: '60', artifactNumToKeepStr: '5']],\n+  disableConcurrentBuilds(),\n+])\n+\n+void setGitHubBuildStatus(String context, String message, String state) {\n+  if (env.DRY_RUN != \"true\") {\n+    step([\n+      $class: 'GitHubCommitStatusSetter',\n+      reposSource: [$class: 'ManuallyEnteredRepositorySource', url: repositoryUrl],\n+      contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: context],\n+      statusResultSource: [$class: 'ConditionalStatusResultSource', results: [[$class: 'AnyBuildResult', message: message, state: state]]],\n+    ])\n+  }\n+}\n+\n+String getMavenArgs() {\n+  def args = '-B -nsu -Dnuxeo.skip.enforcer=true'\n+  if (!isPullRequest()) {\n+    args += ' -Prelease'\n+  }\n+  return args\n+}\n+\n+def isPullRequest() {\n+  return BRANCH_NAME =~ /PR-.*/\n+}\n+\n+String getVersion() {\n+  return isPullRequest() ? getPullRequestVersion() : getReleaseVersion()\n+}\n+\n+String getReleaseVersion() {\n+  String nuxeoVersion = readMavenPom().getVersion()\n+  String noSnapshot = nuxeoVersion.replace('-SNAPSHOT', '')\n+  String version = noSnapshot + '.0' // first version ever\n+\n+  // find the latest tag if any\n+  sh \"git fetch origin 'refs/tags/v${noSnapshot}*:refs/tags/v${noSnapshot}*'\"\n+  def tag = sh(returnStdout: true, script: \"git tag --sort=taggerdate --list 'v${noSnapshot}*' | tail -1 | tr -d '\\n'\")\n+  if (tag) {\n+    container('maven') {\n+      version = sh(returnStdout: true, script: \"semver bump patch ${tag} | tr -d '\\n'\")\n+    }\n+  }\n+  return version\n+}\n+\n+String getPullRequestVersion() {\n+  return \"${BRANCH_NAME}-\" + readMavenPom().getVersion()\n+}\n+\n+pipeline {\n+  agent {\n+    label 'jenkins-nuxeo-package-11'\n+  }\n+  options {\n+    timeout(time: 1, unit: 'HOURS')\n+  }\n+  environment {\n+    // force ${HOME}=/root - for an unexplained reason, ${HOME} is resolved as /home/jenkins though sh 'env' shows HOME=/root\n+    HOME = '/root'\n+    HELM_CHART_REPOSITORY_NAME = 'local-jenkins-x'\n+    HELM_CHART_REPOSITORY_URL = 'http://jenkins-x-chartmuseum:8080'\n+    HELM_CHART_NUXEO = 'nuxeo'\n+    NUXEO_JAVADOC_IMAGE_NAME = 'nuxeo-javadoc'\n+    MAVEN_OPTS = \"$MAVEN_OPTS -Xms2g -Xmx3g -XX:+TieredCompilation -XX:TieredStopAtLevel=1\"\n+    MAVEN_ARGS = getMavenArgs()\n+    VERSION = getVersion()\n+    CHANGE_BRANCH = \"${env.CHANGE_BRANCH != null ? env.CHANGE_BRANCH : BRANCH_NAME}\"\n+    CHANGE_TARGET = \"${env.CHANGE_TARGET != null ? env.CHANGE_TARGET : BRANCH_NAME}\"\n+    // jx step helm install's --name and --namespace options require alphabetic chars to be lowercase\n+    PREVIEW_NAMESPACE = \"nuxeo-preview-${BRANCH_NAME.toLowerCase()}\"\n+  }\n+\n+  stages {\n+    stage('Set labels') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Set Kubernetes resource labels\n+          ----------------------------------------\n+          \"\"\"\n+          echo \"Set label 'branch: ${BRANCH_NAME}' on pod ${NODE_NAME}\"\n+          sh \"\"\"\n+            kubectl label pods ${NODE_NAME} branch=${BRANCH_NAME}\n+          \"\"\"\n+          // set branch name in Helm chart values used for the unit tests\n+          sh \"\"\"\n+            for valuesFile in ci/helm/*.yaml; do\n+              envsubst < \\$valuesFile > \\$valuesFile~gen\n+            done\n+          \"\"\"\n+          // output pod description\n+          echo \"Describe pod ${NODE_NAME}\"\n+          sh \"\"\"\n+            kubectl describe pod ${NODE_NAME}\n+          \"\"\"\n+        }\n+      }\n+    }\n+\n+    stage('Update version') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Update version\n+          ----------------------------------------\n+          New version: ${VERSION}\n+          \"\"\"\n+          sh \"\"\"\n+            # root POM\n+            mvn ${MAVEN_ARGS} -Pdistrib,docker versions:set -DnewVersion=${VERSION} -DgenerateBackupPoms=false\n+            perl -i -pe 's|<nuxeo.platform.version>.*?</nuxeo.platform.version>|<nuxeo.platform.version>${VERSION}</nuxeo.platform.version>|' pom.xml\n+            perl -i -pe 's|org.nuxeo.ecm.product.version=.*|org.nuxeo.ecm.product.version=${VERSION}|' server/nuxeo-nxr-server/src/main/resources/templates/nuxeo.defaults\n+          \"\"\"\n+        }\n+      }\n+    }\n+\n+    stage('Build Javadoc') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        setGitHubBuildStatus('javadoc/build', 'Build Javadoc', 'PENDING')\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Build Javadoc\n+          ----------------------------------------\"\"\"\n+          echo \"MAVEN_OPTS=$MAVEN_OPTS\"\n+          sh \"mvn ${MAVEN_ARGS} -V -T4C -Pjavadoc -DskipTests install\"\n+          sh \"mvn ${MAVEN_ARGS} -f server/pom.xml -Pjavadoc -DskipTests install\"\n+        }\n+      }\n+      post {\n+        success {\n+          setGitHubBuildStatus('javadoc/build', 'Build Javadoc', 'SUCCESS')\n+        }\n+        unsuccessful {\n+          setGitHubBuildStatus('javadoc/build', 'Build Javadoc', 'FAILURE')\n+        }\n+      }\n+    }\n+\n+    stage('Generate Nuxeo ECM Javadoc') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        setGitHubBuildStatus('javadoc/site', 'Generate Javadoc site', 'PENDING')\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Generate Nuxeo ECM Javadoc\n+          ----------------------------------------\"\"\"\n+          sh \"mvn ${MAVEN_ARGS} -Pjavadoc site\"\n+        }\n+      }\n+      post {\n+        success {\n+          setGitHubBuildStatus('javadoc/site', 'Generate Javadoc site', 'SUCCESS')\n+        }\n+        unsuccessful {\n+          setGitHubBuildStatus('javadoc/site', 'Generate Javadoc site', 'FAILURE')\n+        }\n+      }\n+    }\n+\n+    stage('Deploy Nuxeo ECM Javadoc') {\n+      when {\n+        branch 'PR-*'\n+        expression {\n+          return pullRequest.labels.contains('preview-javadoc')\n+        }\n+        not {\n+          environment name: 'DRY_RUN', value: 'true'\n+        }\n+      }\n+      steps {\n+        setGitHubBuildStatus('javadoc/preview', 'Deploy Javadoc environment', 'PENDING')\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Build Nuxeo ECM Javadoc Docker Image ${VERSION}\n+          ----------------------------------------\n+          Image tag: ${VERSION}\"\"\"\n+          sh \"mv target/site/apidocs ci/docker/javadoc/apidocs\"\n+          dir('ci/docker/javadoc') {\n+            sh \"skaffold build -f skaffold.yaml\"\n+          }\n+\n+          echo \"\"\"\n+          ----------------------------------------\n+          Deploy Nuxeo ECM Javadoc Environment\n+          ----------------------------------------\n+          Image tag: ${VERSION}\n+          Namespace: ${PREVIEW_NAMESPACE}\"\"\"\n+          dir('ci/helm/javadoc') {\n+            script {\n+              // first substitute environment variables in chart values\n+              sh \"\"\"\n+                mv values.yaml values.yaml.tosubst\n+                envsubst < values.yaml.tosubst > values.yaml\n+              \"\"\"\n+              // second create target namespace (if doesn't exist) and copy secrets to target namespace\n+              boolean nsExists = sh(returnStatus: true, script: \"kubectl get namespace ${PREVIEW_NAMESPACE}\") == 0\n+              if (!nsExists) {\n+                sh \"kubectl create namespace ${PREVIEW_NAMESPACE}\"\n+              }\n+              sh \"kubectl --namespace platform get secret kubernetes-docker-cfg -ojsonpath='{.data.\\\\.dockerconfigjson}' | base64 --decode > /tmp/config.json\"\n+              sh \"\"\"kubectl create secret generic kubernetes-docker-cfg \\\n+                  --namespace=${PREVIEW_NAMESPACE} \\\n+                  --from-file=.dockerconfigjson=/tmp/config.json \\\n+                  --type=kubernetes.io/dockerconfigjson --dry-run -o yaml | kubectl apply -f -\"\"\"\n+              // third build and deploy the chart\n+              sh \"\"\"\n+                jx step helm build --verbose\n+                jx step helm install --namespace ${PREVIEW_NAMESPACE} --name javadoc --verbose .\n+              \"\"\"\n+              host = sh(returnStdout: true, script: \"kubectl get ingress --namespace=${PREVIEW_NAMESPACE} javadoc -ojsonpath='{.items[*].spec.rules[*].host}'\")\n+              echo \"\"\"\n+              ----------------------------------------\n+              Javadoc Environment available at: https://${host}\n+              ----------------------------------------\"\"\"\n+              // comment the PR if it is the first time\n+              if (isPullRequest() && !nsExists) {\n+                pullRequest.comment(\"Preview Javadoc environment available [here](https://${url}).\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzMjcyMg=="}, "originalCommit": {"oid": "ba618721687ff7ba406308f188dc8b156992a407"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMyOTYwNw==", "bodyText": "In the end we're gonna need the jx preview command, but I will keep this block and disable comment on jx command.", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r534329607", "createdAt": "2020-12-02T16:59:59Z", "author": {"login": "kevinleturc"}, "path": "ci/Jenkinsfiles/javadoc.groovy", "diffHunk": "@@ -0,0 +1,278 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Antoine Taillefer <ataillefer@nuxeo.com>\n+ *     Thomas Roger <troger@nuxeo.com>\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+repositoryUrl = 'https://github.com/nuxeo/nuxeo'\n+\n+properties([\n+  [$class: 'GithubProjectProperty', projectUrlStr: repositoryUrl],\n+  [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', daysToKeepStr: '60', numToKeepStr: '60', artifactNumToKeepStr: '5']],\n+  disableConcurrentBuilds(),\n+])\n+\n+void setGitHubBuildStatus(String context, String message, String state) {\n+  if (env.DRY_RUN != \"true\") {\n+    step([\n+      $class: 'GitHubCommitStatusSetter',\n+      reposSource: [$class: 'ManuallyEnteredRepositorySource', url: repositoryUrl],\n+      contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: context],\n+      statusResultSource: [$class: 'ConditionalStatusResultSource', results: [[$class: 'AnyBuildResult', message: message, state: state]]],\n+    ])\n+  }\n+}\n+\n+String getMavenArgs() {\n+  def args = '-B -nsu -Dnuxeo.skip.enforcer=true'\n+  if (!isPullRequest()) {\n+    args += ' -Prelease'\n+  }\n+  return args\n+}\n+\n+def isPullRequest() {\n+  return BRANCH_NAME =~ /PR-.*/\n+}\n+\n+String getVersion() {\n+  return isPullRequest() ? getPullRequestVersion() : getReleaseVersion()\n+}\n+\n+String getReleaseVersion() {\n+  String nuxeoVersion = readMavenPom().getVersion()\n+  String noSnapshot = nuxeoVersion.replace('-SNAPSHOT', '')\n+  String version = noSnapshot + '.0' // first version ever\n+\n+  // find the latest tag if any\n+  sh \"git fetch origin 'refs/tags/v${noSnapshot}*:refs/tags/v${noSnapshot}*'\"\n+  def tag = sh(returnStdout: true, script: \"git tag --sort=taggerdate --list 'v${noSnapshot}*' | tail -1 | tr -d '\\n'\")\n+  if (tag) {\n+    container('maven') {\n+      version = sh(returnStdout: true, script: \"semver bump patch ${tag} | tr -d '\\n'\")\n+    }\n+  }\n+  return version\n+}\n+\n+String getPullRequestVersion() {\n+  return \"${BRANCH_NAME}-\" + readMavenPom().getVersion()\n+}\n+\n+pipeline {\n+  agent {\n+    label 'jenkins-nuxeo-package-11'\n+  }\n+  options {\n+    timeout(time: 1, unit: 'HOURS')\n+  }\n+  environment {\n+    // force ${HOME}=/root - for an unexplained reason, ${HOME} is resolved as /home/jenkins though sh 'env' shows HOME=/root\n+    HOME = '/root'\n+    HELM_CHART_REPOSITORY_NAME = 'local-jenkins-x'\n+    HELM_CHART_REPOSITORY_URL = 'http://jenkins-x-chartmuseum:8080'\n+    HELM_CHART_NUXEO = 'nuxeo'\n+    NUXEO_JAVADOC_IMAGE_NAME = 'nuxeo-javadoc'\n+    MAVEN_OPTS = \"$MAVEN_OPTS -Xms2g -Xmx3g -XX:+TieredCompilation -XX:TieredStopAtLevel=1\"\n+    MAVEN_ARGS = getMavenArgs()\n+    VERSION = getVersion()\n+    CHANGE_BRANCH = \"${env.CHANGE_BRANCH != null ? env.CHANGE_BRANCH : BRANCH_NAME}\"\n+    CHANGE_TARGET = \"${env.CHANGE_TARGET != null ? env.CHANGE_TARGET : BRANCH_NAME}\"\n+    // jx step helm install's --name and --namespace options require alphabetic chars to be lowercase\n+    PREVIEW_NAMESPACE = \"nuxeo-preview-${BRANCH_NAME.toLowerCase()}\"\n+  }\n+\n+  stages {\n+    stage('Set labels') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Set Kubernetes resource labels\n+          ----------------------------------------\n+          \"\"\"\n+          echo \"Set label 'branch: ${BRANCH_NAME}' on pod ${NODE_NAME}\"\n+          sh \"\"\"\n+            kubectl label pods ${NODE_NAME} branch=${BRANCH_NAME}\n+          \"\"\"\n+          // set branch name in Helm chart values used for the unit tests\n+          sh \"\"\"\n+            for valuesFile in ci/helm/*.yaml; do\n+              envsubst < \\$valuesFile > \\$valuesFile~gen\n+            done\n+          \"\"\"\n+          // output pod description\n+          echo \"Describe pod ${NODE_NAME}\"\n+          sh \"\"\"\n+            kubectl describe pod ${NODE_NAME}\n+          \"\"\"\n+        }\n+      }\n+    }\n+\n+    stage('Update version') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Update version\n+          ----------------------------------------\n+          New version: ${VERSION}\n+          \"\"\"\n+          sh \"\"\"\n+            # root POM\n+            mvn ${MAVEN_ARGS} -Pdistrib,docker versions:set -DnewVersion=${VERSION} -DgenerateBackupPoms=false\n+            perl -i -pe 's|<nuxeo.platform.version>.*?</nuxeo.platform.version>|<nuxeo.platform.version>${VERSION}</nuxeo.platform.version>|' pom.xml\n+            perl -i -pe 's|org.nuxeo.ecm.product.version=.*|org.nuxeo.ecm.product.version=${VERSION}|' server/nuxeo-nxr-server/src/main/resources/templates/nuxeo.defaults\n+          \"\"\"\n+        }\n+      }\n+    }\n+\n+    stage('Build Javadoc') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        setGitHubBuildStatus('javadoc/build', 'Build Javadoc', 'PENDING')\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Build Javadoc\n+          ----------------------------------------\"\"\"\n+          echo \"MAVEN_OPTS=$MAVEN_OPTS\"\n+          sh \"mvn ${MAVEN_ARGS} -V -T4C -Pjavadoc -DskipTests install\"\n+          sh \"mvn ${MAVEN_ARGS} -f server/pom.xml -Pjavadoc -DskipTests install\"\n+        }\n+      }\n+      post {\n+        success {\n+          setGitHubBuildStatus('javadoc/build', 'Build Javadoc', 'SUCCESS')\n+        }\n+        unsuccessful {\n+          setGitHubBuildStatus('javadoc/build', 'Build Javadoc', 'FAILURE')\n+        }\n+      }\n+    }\n+\n+    stage('Generate Nuxeo ECM Javadoc') {\n+      when {\n+        branch 'PR-*'\n+      }\n+      steps {\n+        setGitHubBuildStatus('javadoc/site', 'Generate Javadoc site', 'PENDING')\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Generate Nuxeo ECM Javadoc\n+          ----------------------------------------\"\"\"\n+          sh \"mvn ${MAVEN_ARGS} -Pjavadoc site\"\n+        }\n+      }\n+      post {\n+        success {\n+          setGitHubBuildStatus('javadoc/site', 'Generate Javadoc site', 'SUCCESS')\n+        }\n+        unsuccessful {\n+          setGitHubBuildStatus('javadoc/site', 'Generate Javadoc site', 'FAILURE')\n+        }\n+      }\n+    }\n+\n+    stage('Deploy Nuxeo ECM Javadoc') {\n+      when {\n+        branch 'PR-*'\n+        expression {\n+          return pullRequest.labels.contains('preview-javadoc')\n+        }\n+        not {\n+          environment name: 'DRY_RUN', value: 'true'\n+        }\n+      }\n+      steps {\n+        setGitHubBuildStatus('javadoc/preview', 'Deploy Javadoc environment', 'PENDING')\n+        container('maven') {\n+          echo \"\"\"\n+          ----------------------------------------\n+          Build Nuxeo ECM Javadoc Docker Image ${VERSION}\n+          ----------------------------------------\n+          Image tag: ${VERSION}\"\"\"\n+          sh \"mv target/site/apidocs ci/docker/javadoc/apidocs\"\n+          dir('ci/docker/javadoc') {\n+            sh \"skaffold build -f skaffold.yaml\"\n+          }\n+\n+          echo \"\"\"\n+          ----------------------------------------\n+          Deploy Nuxeo ECM Javadoc Environment\n+          ----------------------------------------\n+          Image tag: ${VERSION}\n+          Namespace: ${PREVIEW_NAMESPACE}\"\"\"\n+          dir('ci/helm/javadoc') {\n+            script {\n+              // first substitute environment variables in chart values\n+              sh \"\"\"\n+                mv values.yaml values.yaml.tosubst\n+                envsubst < values.yaml.tosubst > values.yaml\n+              \"\"\"\n+              // second create target namespace (if doesn't exist) and copy secrets to target namespace\n+              boolean nsExists = sh(returnStatus: true, script: \"kubectl get namespace ${PREVIEW_NAMESPACE}\") == 0\n+              if (!nsExists) {\n+                sh \"kubectl create namespace ${PREVIEW_NAMESPACE}\"\n+              }\n+              sh \"kubectl --namespace platform get secret kubernetes-docker-cfg -ojsonpath='{.data.\\\\.dockerconfigjson}' | base64 --decode > /tmp/config.json\"\n+              sh \"\"\"kubectl create secret generic kubernetes-docker-cfg \\\n+                  --namespace=${PREVIEW_NAMESPACE} \\\n+                  --from-file=.dockerconfigjson=/tmp/config.json \\\n+                  --type=kubernetes.io/dockerconfigjson --dry-run -o yaml | kubectl apply -f -\"\"\"\n+              // third build and deploy the chart\n+              sh \"\"\"\n+                jx step helm build --verbose\n+                jx step helm install --namespace ${PREVIEW_NAMESPACE} --name javadoc --verbose .\n+              \"\"\"\n+              host = sh(returnStdout: true, script: \"kubectl get ingress --namespace=${PREVIEW_NAMESPACE} javadoc -ojsonpath='{.items[*].spec.rules[*].host}'\")\n+              echo \"\"\"\n+              ----------------------------------------\n+              Javadoc Environment available at: https://${host}\n+              ----------------------------------------\"\"\"\n+              // comment the PR if it is the first time\n+              if (isPullRequest() && !nsExists) {\n+                pullRequest.comment(\"Preview Javadoc environment available [here](https://${url}).\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzMjcyMg=="}, "originalCommit": {"oid": "ba618721687ff7ba406308f188dc8b156992a407"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQ5NjE4OnYy", "diffSide": "RIGHT", "path": "ci/helm/javadoc/requirements.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowNjo1NlrOH8PwDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowNjo1NlrOH8PwDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNDY3MA==", "bodyText": "maybe use explicitly ~2.3.118 since it's the latest version", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r532934670", "createdAt": "2020-11-30T22:06:56Z", "author": {"login": "ataillefer"}, "path": "ci/helm/javadoc/requirements.yaml", "diffHunk": "@@ -0,0 +1,9 @@\n+dependencies:\n+  - alias: expose\n+    name: exposecontroller\n+    repository: http://chartmuseum.jenkins-x.io\n+    version: ~2.3.111", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba618721687ff7ba406308f188dc8b156992a407"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQ5NjY1OnYy", "diffSide": "RIGHT", "path": "ci/helm/javadoc/requirements.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowNzowN1rOH8PwXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowNzowN1rOH8PwXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNDc0OQ==", "bodyText": "same remark as above", "url": "https://github.com/nuxeo/nuxeo/pull/4328#discussion_r532934749", "createdAt": "2020-11-30T22:07:07Z", "author": {"login": "ataillefer"}, "path": "ci/helm/javadoc/requirements.yaml", "diffHunk": "@@ -0,0 +1,9 @@\n+dependencies:\n+  - alias: expose\n+    name: exposecontroller\n+    repository: http://chartmuseum.jenkins-x.io\n+    version: ~2.3.111\n+  - alias: cleanup\n+    name: exposecontroller\n+    repository: http://chartmuseum.jenkins-x.io\n+    version: ~2.3.111", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba618721687ff7ba406308f188dc8b156992a407"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4321, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}