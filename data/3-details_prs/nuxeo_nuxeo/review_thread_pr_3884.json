{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjQzMzg0", "number": 3884, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODowODoyMVrODt15yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMjowOVrODuctyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzk1NjU4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODowODoyMVrOF_f4vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo1MDoxM1rOF_haXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNzAzNw==", "bodyText": "This behaves differently from moveContent when save is true. In moveContent you are returning the saved document while here the documents in result are not the ones returned by CoreSession#saveDocument.\nLooking at the saveDocuments implementation, you could do your own iteration/stream :)\nBTW, why not letting moveContent save the document? This would avoid multiple if(save).", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402127037", "createdAt": "2020-04-02T08:08:21Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,8 +55,28 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(moveContent(documentModel, false));\n+            } catch (Exception e) {\n+                log.error(\"Unable to move document: {} to cold storage\", documentModel.getId(), e);\n+            }\n+        }\n+        if (save) {\n+            session.saveDocuments(result.toArray(new DocumentModel[0]));\n+        }\n+        return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1MjAzMA==", "bodyText": "This behaves differently from moveContent when save is true. In moveContent you are returning the saved document while here the documents in result are not the ones returned by CoreSession#saveDocument.\n\ngood point thanks\n\nLooking at the saveDocuments implementation, you could do your own iteration/stream :)\n\nI agree and I thought my self same thing, but after a short reflection I told myself i prefers use the existing one to mainly if in future we re-write the CoreSession one to be for example more performante ... I will benefit\n\nBTW, why not letting moveContent save the document? This would avoid multiple if(save).\n\nyou mean save doc by doc, instead of save them ?", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402152030", "createdAt": "2020-04-02T08:50:13Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,8 +55,28 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(moveContent(documentModel, false));\n+            } catch (Exception e) {\n+                log.error(\"Unable to move document: {} to cold storage\", documentModel.getId(), e);\n+            }\n+        }\n+        if (save) {\n+            session.saveDocuments(result.toArray(new DocumentModel[0]));\n+        }\n+        return result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNzAzNw=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzk2MzIyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxMDowOVrOF_f8ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMDoxNFrOGAPcKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyODA2Nw==", "bodyText": "Why catching Exception here? Do not forget https://doc.nuxeo.com/corg/catching-exceptions/#never-catch-exception :)", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402128067", "createdAt": "2020-04-02T08:10:09Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,8 +55,28 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(moveContent(documentModel, false));\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1MzMyOA==", "bodyText": "I completely agree and i am not in favour of catch Exception level, I was going to cache NuxeoException but the move of documents can be see as a batch process (i asked on slack channel) and the idea is to be able to continue the move even one document fails this is the reason why i ended by catching Exception", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402153328", "createdAt": "2020-04-02T08:52:22Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,8 +55,28 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(moveContent(documentModel, false));\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyODA2Nw=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5MjkxMw==", "bodyText": "@troger , what is usually the approach for this kind of use cases?\nI can see that we have a some operations that just loop the desired method which means that it will stop at the first failure. Should be this the pattern we want?", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402192913", "createdAt": "2020-04-02T09:56:26Z", "author": {"login": "nmpcunha"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,8 +55,28 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(moveContent(documentModel, false));\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyODA2Nw=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MTk5MA==", "bodyText": "If you have to deal with catching Exception then follow the documentation to deal with InterruptedException: https://doc.nuxeo.com/corg/catching-exceptions/#methods-that-want-to-keep-running-after-an-exception", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402281990", "createdAt": "2020-04-02T12:42:00Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,8 +55,28 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(moveContent(documentModel, false));\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyODA2Nw=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4Mzc2OA==", "bodyText": "Anyway, I still think that you need to just catch NuxeoException, so you continue if there is an issue in Nuxeo related code. Other runtime exceptions should just break the code anyway... wdyt @efge?", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402283768", "createdAt": "2020-04-02T12:44:53Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,8 +55,28 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(moveContent(documentModel, false));\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyODA2Nw=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4ODYwNg==", "bodyText": "yes i had a look at the document, InterruptedException is type of Exception and not a runtime one, with catch it will make an error compilation. Which means i should add the InterruptedException into the public DocumentModel run(DocumentModel document) throws InterruptedException if we agree i do the modification.", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402288606", "createdAt": "2020-04-02T12:52:53Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,8 +55,28 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(moveContent(documentModel, false));\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyODA2Nw=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4OTk3NQ==", "bodyText": "catching NuxeoException is another solution why not, my wondering was about any other affect to avoid blocking the whole move. but if we all agree let add the NuxeoException only.", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402289975", "createdAt": "2020-04-02T12:54:57Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,8 +55,28 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(moveContent(documentModel, false));\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyODA2Nw=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNTcyOQ==", "bodyText": "I would go for NuxeoException only, other runtime exceptions must break.", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402905729", "createdAt": "2020-04-03T10:19:26Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,8 +55,28 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(moveContent(documentModel, false));\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyODA2Nw=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNjE1Mg==", "bodyText": "ok I agree it is what i did yesterday", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402906152", "createdAt": "2020-04-03T10:20:14Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,8 +55,28 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(moveContent(documentModel, false));\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyODA2Nw=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzk3MDYzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxMjoyNlrOF_gBkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxMjoyNlrOF_gBkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyOTI5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void checkMoveContent(List<DocumentModel> expectedDocs, List<DocumentModel> foundedDocs)\n          \n          \n            \n                protected void checkMoveContent(List<DocumentModel> expectedDocs, List<DocumentModel> actualDocs)\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402129299", "createdAt": "2020-04-02T08:12:26Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -66,18 +68,52 @@ protected void moveContentToColdStorage(CoreSession session, DocumentModel docum\n         try (OperationContext context = new OperationContext(session)) {\n             context.setInput(documentModel);\n             DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID);\n+            checkMoveContent(List.of(documentModel), List.of(updatedDocModel));\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(CoreSession session, List<DocumentModel> documents)\n+            throws OperationException, IOException {\n+        List<String> documentIds = documents.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documents);\n+            checkMoveContent(documents, (DocumentModelList) automationService.run(context, MoveToColdStorage.ID));\n+        }\n+    }\n+\n+    protected void checkMoveContent(List<DocumentModel> expectedDocs, List<DocumentModel> foundedDocs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzk3MjY3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxMjo1OFrOF_gC0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxMjo1OFrOF_gC0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyOTYxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (DocumentModel updatedDocModel : foundedDocs) {\n          \n          \n            \n                    for (DocumentModel updatedDoc : foundedDocs) {", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402129618", "createdAt": "2020-04-02T08:12:58Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -66,18 +68,52 @@ protected void moveContentToColdStorage(CoreSession session, DocumentModel docum\n         try (OperationContext context = new OperationContext(session)) {\n             context.setInput(documentModel);\n             DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID);\n+            checkMoveContent(List.of(documentModel), List.of(updatedDocModel));\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(CoreSession session, List<DocumentModel> documents)\n+            throws OperationException, IOException {\n+        List<String> documentIds = documents.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documents);\n+            checkMoveContent(documents, (DocumentModelList) automationService.run(context, MoveToColdStorage.ID));\n+        }\n+    }\n+\n+    protected void checkMoveContent(List<DocumentModel> expectedDocs, List<DocumentModel> foundedDocs)\n+            throws IOException {\n+        assertEquals(expectedDocs.size(), foundedDocs.size());\n+        List<String> expectedDocIds = expectedDocs.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        for (DocumentModel updatedDocModel : foundedDocs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAwODIxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyMzoxN1rOF_gZFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMzowOVrOGAPh6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNTMxOA==", "bodyText": "The assertEquals messages are not really needed, and it makes the code/test hardly understandable IMO.", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402135318", "createdAt": "2020-04-02T08:23:17Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -66,18 +68,52 @@ protected void moveContentToColdStorage(CoreSession session, DocumentModel docum\n         try (OperationContext context = new OperationContext(session)) {\n             context.setInput(documentModel);\n             DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID);\n+            checkMoveContent(List.of(documentModel), List.of(updatedDocModel));\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(CoreSession session, List<DocumentModel> documents)\n+            throws OperationException, IOException {\n+        List<String> documentIds = documents.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documents);\n+            checkMoveContent(documents, (DocumentModelList) automationService.run(context, MoveToColdStorage.ID));\n+        }\n+    }\n+\n+    protected void checkMoveContent(List<DocumentModel> expectedDocs, List<DocumentModel> foundedDocs)\n+            throws IOException {\n+        assertEquals(expectedDocs.size(), foundedDocs.size());\n+        List<String> expectedDocIds = expectedDocs.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        for (DocumentModel updatedDocModel : foundedDocs) {\n             Blob fileContent = (Blob) updatedDocModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY);\n             Blob coldStorageContent = (Blob) updatedDocModel.getPropertyValue(\n                     ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n-            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n-            assertTrue(updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n-            assertEquals(DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n-            assertEquals(FILE_CONTENT, coldStorageContent.getString());\n+\n+            // check document\n+            assertTrue(String.format(\"Doc: %s must one of %s\", updatedDocModel, expectedDocs),\n+                    expectedDocIds.contains(updatedDocModel.getId()));\n+            assertTrue(String.format(\"Doc: %s must have the %s Facet\", updatedDocModel, FacetNames.COLD_STORAGE),\n+                    updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+            // check blobs\n+            assertEquals(String.format(\"Doc: %s must have %s in 'file:content'\", //\n+                    updatedDocModel, DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT), //\n+                    DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n+            assertEquals(String.format(\"Doc: %s must have %s in 'coldstorage:coldContent'\", //\n+                    updatedDocModel, FILE_CONTENT), //\n+                    FILE_CONTENT, coldStorageContent.getString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1NTAyNg==", "bodyText": "yes, ;) it is mainly what I did in the past, but since I had a discussion wiht Florent on the assertion in theses cases (loop) he advised me to add a message to make easier the comprehension of things when the test failed. but no pbs if we all agree i can remove them :)", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402155026", "createdAt": "2020-04-02T08:55:01Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -66,18 +68,52 @@ protected void moveContentToColdStorage(CoreSession session, DocumentModel docum\n         try (OperationContext context = new OperationContext(session)) {\n             context.setInput(documentModel);\n             DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID);\n+            checkMoveContent(List.of(documentModel), List.of(updatedDocModel));\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(CoreSession session, List<DocumentModel> documents)\n+            throws OperationException, IOException {\n+        List<String> documentIds = documents.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documents);\n+            checkMoveContent(documents, (DocumentModelList) automationService.run(context, MoveToColdStorage.ID));\n+        }\n+    }\n+\n+    protected void checkMoveContent(List<DocumentModel> expectedDocs, List<DocumentModel> foundedDocs)\n+            throws IOException {\n+        assertEquals(expectedDocs.size(), foundedDocs.size());\n+        List<String> expectedDocIds = expectedDocs.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        for (DocumentModel updatedDocModel : foundedDocs) {\n             Blob fileContent = (Blob) updatedDocModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY);\n             Blob coldStorageContent = (Blob) updatedDocModel.getPropertyValue(\n                     ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n-            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n-            assertTrue(updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n-            assertEquals(DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n-            assertEquals(FILE_CONTENT, coldStorageContent.getString());\n+\n+            // check document\n+            assertTrue(String.format(\"Doc: %s must one of %s\", updatedDocModel, expectedDocs),\n+                    expectedDocIds.contains(updatedDocModel.getId()));\n+            assertTrue(String.format(\"Doc: %s must have the %s Facet\", updatedDocModel, FacetNames.COLD_STORAGE),\n+                    updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+            // check blobs\n+            assertEquals(String.format(\"Doc: %s must have %s in 'file:content'\", //\n+                    updatedDocModel, DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT), //\n+                    DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n+            assertEquals(String.format(\"Doc: %s must have %s in 'coldstorage:coldContent'\", //\n+                    updatedDocModel, FILE_CONTENT), //\n+                    FILE_CONTENT, coldStorageContent.getString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNTMxOA=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3NjY5NQ==", "bodyText": "I took into account your suggestion :), I let the conversation open to get more feedbacks", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402176695", "createdAt": "2020-04-02T09:29:41Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -66,18 +68,52 @@ protected void moveContentToColdStorage(CoreSession session, DocumentModel docum\n         try (OperationContext context = new OperationContext(session)) {\n             context.setInput(documentModel);\n             DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID);\n+            checkMoveContent(List.of(documentModel), List.of(updatedDocModel));\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(CoreSession session, List<DocumentModel> documents)\n+            throws OperationException, IOException {\n+        List<String> documentIds = documents.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documents);\n+            checkMoveContent(documents, (DocumentModelList) automationService.run(context, MoveToColdStorage.ID));\n+        }\n+    }\n+\n+    protected void checkMoveContent(List<DocumentModel> expectedDocs, List<DocumentModel> foundedDocs)\n+            throws IOException {\n+        assertEquals(expectedDocs.size(), foundedDocs.size());\n+        List<String> expectedDocIds = expectedDocs.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        for (DocumentModel updatedDocModel : foundedDocs) {\n             Blob fileContent = (Blob) updatedDocModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY);\n             Blob coldStorageContent = (Blob) updatedDocModel.getPropertyValue(\n                     ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n-            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n-            assertTrue(updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n-            assertEquals(DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n-            assertEquals(FILE_CONTENT, coldStorageContent.getString());\n+\n+            // check document\n+            assertTrue(String.format(\"Doc: %s must one of %s\", updatedDocModel, expectedDocs),\n+                    expectedDocIds.contains(updatedDocModel.getId()));\n+            assertTrue(String.format(\"Doc: %s must have the %s Facet\", updatedDocModel, FacetNames.COLD_STORAGE),\n+                    updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+            // check blobs\n+            assertEquals(String.format(\"Doc: %s must have %s in 'file:content'\", //\n+                    updatedDocModel, DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT), //\n+                    DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n+            assertEquals(String.format(\"Doc: %s must have %s in 'coldstorage:coldContent'\", //\n+                    updatedDocModel, FILE_CONTENT), //\n+                    FILE_CONTENT, coldStorageContent.getString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNTMxOA=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzYyNw==", "bodyText": "I mark the conversation as resolved, I made the modification to suit your suggestions. I thinks these kind of interrogation; static import, message in assertion will be more global and I think will be part of the guideline that you are going to do :)", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402907627", "createdAt": "2020-04-03T10:23:09Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -66,18 +68,52 @@ protected void moveContentToColdStorage(CoreSession session, DocumentModel docum\n         try (OperationContext context = new OperationContext(session)) {\n             context.setInput(documentModel);\n             DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID);\n+            checkMoveContent(List.of(documentModel), List.of(updatedDocModel));\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(CoreSession session, List<DocumentModel> documents)\n+            throws OperationException, IOException {\n+        List<String> documentIds = documents.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documents);\n+            checkMoveContent(documents, (DocumentModelList) automationService.run(context, MoveToColdStorage.ID));\n+        }\n+    }\n+\n+    protected void checkMoveContent(List<DocumentModel> expectedDocs, List<DocumentModel> foundedDocs)\n+            throws IOException {\n+        assertEquals(expectedDocs.size(), foundedDocs.size());\n+        List<String> expectedDocIds = expectedDocs.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        for (DocumentModel updatedDocModel : foundedDocs) {\n             Blob fileContent = (Blob) updatedDocModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY);\n             Blob coldStorageContent = (Blob) updatedDocModel.getPropertyValue(\n                     ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n-            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n-            assertTrue(updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n-            assertEquals(DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n-            assertEquals(FILE_CONTENT, coldStorageContent.getString());\n+\n+            // check document\n+            assertTrue(String.format(\"Doc: %s must one of %s\", updatedDocModel, expectedDocs),\n+                    expectedDocIds.contains(updatedDocModel.getId()));\n+            assertTrue(String.format(\"Doc: %s must have the %s Facet\", updatedDocModel, FacetNames.COLD_STORAGE),\n+                    updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+            // check blobs\n+            assertEquals(String.format(\"Doc: %s must have %s in 'file:content'\", //\n+                    updatedDocModel, DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT), //\n+                    DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n+            assertEquals(String.format(\"Doc: %s must have %s in 'coldstorage:coldContent'\", //\n+                    updatedDocModel, FILE_CONTENT), //\n+                    FILE_CONTENT, coldStorageContent.getString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNTMxOA=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAxNDIzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyNDo0OFrOF_gc3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTozMDozNVrOF_i9OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNjI4Nw==", "bodyText": "What about just removing this method used 2 times, and give a doc name to both calls?", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402136287", "createdAt": "2020-04-02T08:24:48Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -66,18 +68,52 @@ protected void moveContentToColdStorage(CoreSession session, DocumentModel docum\n         try (OperationContext context = new OperationContext(session)) {\n             context.setInput(documentModel);\n             DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID);\n+            checkMoveContent(List.of(documentModel), List.of(updatedDocModel));\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(CoreSession session, List<DocumentModel> documents)\n+            throws OperationException, IOException {\n+        List<String> documentIds = documents.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documents);\n+            checkMoveContent(documents, (DocumentModelList) automationService.run(context, MoveToColdStorage.ID));\n+        }\n+    }\n+\n+    protected void checkMoveContent(List<DocumentModel> expectedDocs, List<DocumentModel> foundedDocs)\n+            throws IOException {\n+        assertEquals(expectedDocs.size(), foundedDocs.size());\n+        List<String> expectedDocIds = expectedDocs.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        for (DocumentModel updatedDocModel : foundedDocs) {\n             Blob fileContent = (Blob) updatedDocModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY);\n             Blob coldStorageContent = (Blob) updatedDocModel.getPropertyValue(\n                     ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n-            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n-            assertTrue(updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n-            assertEquals(DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n-            assertEquals(FILE_CONTENT, coldStorageContent.getString());\n+\n+            // check document\n+            assertTrue(String.format(\"Doc: %s must one of %s\", updatedDocModel, expectedDocs),\n+                    expectedDocIds.contains(updatedDocModel.getId()));\n+            assertTrue(String.format(\"Doc: %s must have the %s Facet\", updatedDocModel, FacetNames.COLD_STORAGE),\n+                    updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+            // check blobs\n+            assertEquals(String.format(\"Doc: %s must have %s in 'file:content'\", //\n+                    updatedDocModel, DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT), //\n+                    DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n+            assertEquals(String.format(\"Doc: %s must have %s in 'coldstorage:coldContent'\", //\n+                    updatedDocModel, FILE_CONTENT), //\n+                    FILE_CONTENT, coldStorageContent.getString());\n         }\n+\n     }\n \n     protected DocumentModel createFileDocument(CoreSession session, boolean withBlobContent, ACE... aces) {\n-        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n+        return createFileDocument(session, withBlobContent, \"MyFile\", aces);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1NzE5MA==", "bodyText": "you mean just give the same name to all callers ? or mainly your idea is to keep only the method that take a name and i will do a little refactoring :)", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402157190", "createdAt": "2020-04-02T08:58:19Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -66,18 +68,52 @@ protected void moveContentToColdStorage(CoreSession session, DocumentModel docum\n         try (OperationContext context = new OperationContext(session)) {\n             context.setInput(documentModel);\n             DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID);\n+            checkMoveContent(List.of(documentModel), List.of(updatedDocModel));\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(CoreSession session, List<DocumentModel> documents)\n+            throws OperationException, IOException {\n+        List<String> documentIds = documents.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documents);\n+            checkMoveContent(documents, (DocumentModelList) automationService.run(context, MoveToColdStorage.ID));\n+        }\n+    }\n+\n+    protected void checkMoveContent(List<DocumentModel> expectedDocs, List<DocumentModel> foundedDocs)\n+            throws IOException {\n+        assertEquals(expectedDocs.size(), foundedDocs.size());\n+        List<String> expectedDocIds = expectedDocs.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        for (DocumentModel updatedDocModel : foundedDocs) {\n             Blob fileContent = (Blob) updatedDocModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY);\n             Blob coldStorageContent = (Blob) updatedDocModel.getPropertyValue(\n                     ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n-            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n-            assertTrue(updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n-            assertEquals(DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n-            assertEquals(FILE_CONTENT, coldStorageContent.getString());\n+\n+            // check document\n+            assertTrue(String.format(\"Doc: %s must one of %s\", updatedDocModel, expectedDocs),\n+                    expectedDocIds.contains(updatedDocModel.getId()));\n+            assertTrue(String.format(\"Doc: %s must have the %s Facet\", updatedDocModel, FacetNames.COLD_STORAGE),\n+                    updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+            // check blobs\n+            assertEquals(String.format(\"Doc: %s must have %s in 'file:content'\", //\n+                    updatedDocModel, DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT), //\n+                    DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n+            assertEquals(String.format(\"Doc: %s must have %s in 'coldstorage:coldContent'\", //\n+                    updatedDocModel, FILE_CONTENT), //\n+                    FILE_CONTENT, coldStorageContent.getString());\n         }\n+\n     }\n \n     protected DocumentModel createFileDocument(CoreSession session, boolean withBlobContent, ACE... aces) {\n-        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n+        return createFileDocument(session, withBlobContent, \"MyFile\", aces);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNjI4Nw=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3NzMzNw==", "bodyText": "I remove the new method and i use the same name and the listener responsible of renaming will take it into account.", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402177337", "createdAt": "2020-04-02T09:30:35Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -66,18 +68,52 @@ protected void moveContentToColdStorage(CoreSession session, DocumentModel docum\n         try (OperationContext context = new OperationContext(session)) {\n             context.setInput(documentModel);\n             DocumentModel updatedDocModel = (DocumentModel) automationService.run(context, MoveToColdStorage.ID);\n+            checkMoveContent(List.of(documentModel), List.of(updatedDocModel));\n+        }\n+    }\n+\n+    protected void moveContentToColdStorage(CoreSession session, List<DocumentModel> documents)\n+            throws OperationException, IOException {\n+        List<String> documentIds = documents.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documents);\n+            checkMoveContent(documents, (DocumentModelList) automationService.run(context, MoveToColdStorage.ID));\n+        }\n+    }\n+\n+    protected void checkMoveContent(List<DocumentModel> expectedDocs, List<DocumentModel> foundedDocs)\n+            throws IOException {\n+        assertEquals(expectedDocs.size(), foundedDocs.size());\n+        List<String> expectedDocIds = expectedDocs.stream().map(DocumentModel::getId).collect(Collectors.toList());\n+        for (DocumentModel updatedDocModel : foundedDocs) {\n             Blob fileContent = (Blob) updatedDocModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY);\n             Blob coldStorageContent = (Blob) updatedDocModel.getPropertyValue(\n                     ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n-            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n-            assertTrue(updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n-            assertEquals(DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n-            assertEquals(FILE_CONTENT, coldStorageContent.getString());\n+\n+            // check document\n+            assertTrue(String.format(\"Doc: %s must one of %s\", updatedDocModel, expectedDocs),\n+                    expectedDocIds.contains(updatedDocModel.getId()));\n+            assertTrue(String.format(\"Doc: %s must have the %s Facet\", updatedDocModel, FacetNames.COLD_STORAGE),\n+                    updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+            // check blobs\n+            assertEquals(String.format(\"Doc: %s must have %s in 'file:content'\", //\n+                    updatedDocModel, DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT), //\n+                    DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n+            assertEquals(String.format(\"Doc: %s must have %s in 'coldstorage:coldContent'\", //\n+                    updatedDocModel, FILE_CONTENT), //\n+                    FILE_CONTENT, coldStorageContent.getString());\n         }\n+\n     }\n \n     protected DocumentModel createFileDocument(CoreSession session, boolean withBlobContent, ACE... aces) {\n-        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n+        return createFileDocument(session, withBlobContent, \"MyFile\", aces);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNjI4Nw=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDAyNjU0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoyODoxMFrOF_gkZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo1OTozMFrOF_hxdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzODIxNQ==", "bodyText": "Is this expected to create the documents with \"linda\" aces?", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402138215", "createdAt": "2020-04-02T08:28:10Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "diffHunk": "@@ -80,6 +81,29 @@ public void shouldMoveToColdStorage() throws OperationException, IOException {\n         moveContentToColdStorage(session, documentModel);\n     }\n \n+    @Test\n+    public void shouldMoveDocsToColdStorage() throws OperationException, IOException {\n+        // with regular user with \"WriteColdStorage\" permission\n+        ACE[] aces = { new ACE(\"linda\", SecurityConstants.READ, true), //\n+                new ACE(\"linda\", SecurityConstants.WRITE, true), //\n+                new ACE(\"linda\", SecurityConstants.WRITE_COLD_STORAGE, true) };\n+\n+        List<DocumentModel> documents = List.of(createFileDocument(session, true, \"MyFile1\", aces), //\n+                createFileDocument(session, true, \"MyFile2\", aces), //\n+                createFileDocument(session, true, \"MyFile3\", aces));\n+\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"linda\")) {\n+            moveContentToColdStorage(userSession, documents);\n+        }\n+\n+        // with Administrator\n+        documents = List.of(createFileDocument(session, true, \"MyFile4\", aces), //\n+                createFileDocument(session, true, \"MyFile5\", aces), //\n+                createFileDocument(session, true, \"MyFile6\", aces));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1Nzk0MQ==", "bodyText": "good point thanks, wrong copy / past", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402157941", "createdAt": "2020-04-02T08:59:30Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "diffHunk": "@@ -80,6 +81,29 @@ public void shouldMoveToColdStorage() throws OperationException, IOException {\n         moveContentToColdStorage(session, documentModel);\n     }\n \n+    @Test\n+    public void shouldMoveDocsToColdStorage() throws OperationException, IOException {\n+        // with regular user with \"WriteColdStorage\" permission\n+        ACE[] aces = { new ACE(\"linda\", SecurityConstants.READ, true), //\n+                new ACE(\"linda\", SecurityConstants.WRITE, true), //\n+                new ACE(\"linda\", SecurityConstants.WRITE_COLD_STORAGE, true) };\n+\n+        List<DocumentModel> documents = List.of(createFileDocument(session, true, \"MyFile1\", aces), //\n+                createFileDocument(session, true, \"MyFile2\", aces), //\n+                createFileDocument(session, true, \"MyFile3\", aces));\n+\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"linda\")) {\n+            moveContentToColdStorage(userSession, documents);\n+        }\n+\n+        // with Administrator\n+        documents = List.of(createFileDocument(session, true, \"MyFile4\", aces), //\n+                createFileDocument(session, true, \"MyFile5\", aces), //\n+                createFileDocument(session, true, \"MyFile6\", aces));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzODIxNQ=="}, "originalCommit": {"oid": "8c4fa36cc607f8d47934a3b2dd04e37f5af151a3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDM4Njg3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDowMjoyNlrOF_kIOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDowMjoyNlrOF_kIOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5NjUzNw==", "bodyText": "If we confirm that we want this kind of pattern, should we also add a test for it? i.e. for the exception situation", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r402196537", "createdAt": "2020-04-02T10:02:26Z", "author": {"login": "nmpcunha"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -67,4 +73,17 @@ public DocumentModel run(DocumentModel doc) {\n         return documentModel;\n     }\n \n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {\n+            try {\n+                result.add(run(documentModel));\n+            } catch (Exception e) {\n+                log.error(\"Unable to move document: {} to cold storage\", documentModel.getId(), e);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6626ad3214588c8222bdb1c09f1519b8731532f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDMxMzM0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMTo0MlrOGAcstQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMTo0MlrOGAcstQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzM4MQ==", "bodyText": "We use doc in lots of places to refer to DocumentModel instances, not sure why it's worth changing here.", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r403123381", "createdAt": "2020-04-03T16:21:42Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -50,13 +57,13 @@\n     @Param(name = \"save\", required = false, values = \"true\")\n     protected boolean save = true;\n \n-    @OperationMethod(collector = DocumentModelCollector.class)\n-    public DocumentModel run(DocumentModel doc) {\n+    @OperationMethod\n+    public DocumentModel run(DocumentModel document) {\n         // retrieve the thumbnail which will be used to replace the content, once the move done\n-        Blob thumbnail = Framework.getService(ThumbnailService.class).getThumbnail(doc, session);\n+        Blob thumbnail = Framework.getService(ThumbnailService.class).getThumbnail(document, session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e313a181470cdcdd4bb751bcaf343d2db3c2373"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDMxNTYwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMjowOVrOGAcuNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMjowOVrOGAcuNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzc2Ng==", "bodyText": "doc would be fine here too", "url": "https://github.com/nuxeo/nuxeo/pull/3884#discussion_r403123766", "createdAt": "2020-04-03T16:22:09Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -67,4 +74,17 @@ public DocumentModel run(DocumentModel doc) {\n         return documentModel;\n     }\n \n+    @OperationMethod\n+    public DocumentModelList run(DocumentModelList documents) {\n+        DocumentModelList result = new DocumentModelListImpl();\n+        for (DocumentModel documentModel : documents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e313a181470cdcdd4bb751bcaf343d2db3c2373"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4232, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}