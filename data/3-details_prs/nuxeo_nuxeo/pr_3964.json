{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MDkzNzAz", "number": 3964, "title": "Improve blob dispatcher", "bodyText": "", "createdAt": "2020-04-23T18:14:07Z", "url": "https://github.com/nuxeo/nuxeo/pull/3964", "merged": true, "mergeCommit": {"oid": "556b5745f32c2996f7b9188d30b997832e8e5dfb"}, "closed": true, "closedAt": "2020-04-27T13:36:11Z", "author": {"login": "efge"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcag6AZAH2gAyNDA4MDkzNzAzOjA5MDMwZDVkZjE2OTZkYzc3YmE4ZGRkNjFkZDIxMTFmYWEwYjI1Mjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbvScJgFqTQwMDk1MDI0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "09030d5df1696dc77ba8ddd61dd2111faa0b2528", "author": {"user": {"login": "efge", "name": "Florent Guillaume"}}, "url": "https://github.com/nuxeo/nuxeo/commit/09030d5df1696dc77ba8ddd61dd2111faa0b2528", "committedDate": "2020-04-23T18:08:26Z", "message": "NXP-28975: fix default blob dispatcher != operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f44e92ac7a454376fa793c589c3ecacf19862f1", "author": {"user": {"login": "efge", "name": "Florent Guillaume"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7f44e92ac7a454376fa793c589c3ecacf19862f1", "committedDate": "2020-04-23T18:10:25Z", "message": "NXP-28986: allow >= and <= operators in default blob dispatcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a8f2e96f0e8edbe480724a11e5a924aaf9a3619", "author": {"user": {"login": "efge", "name": "Florent Guillaume"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2a8f2e96f0e8edbe480724a11e5a924aaf9a3619", "committedDate": "2020-04-23T18:11:48Z", "message": "NXP-28987: allow float values in default blob dispatcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ea92fb65c09eb4ac6ffb9ced0e4927317b94b7", "author": {"user": {"login": "efge", "name": "Florent Guillaume"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d2ea92fb65c09eb4ac6ffb9ced0e4927317b94b7", "committedDate": "2020-04-23T18:12:53Z", "message": "NXP-28987: allow date values in default blob dispatcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ebf6fca702674121650ebf6c55e44115f4d689", "author": {"user": {"login": "efge", "name": "Florent Guillaume"}}, "url": "https://github.com/nuxeo/nuxeo/commit/97ebf6fca702674121650ebf6c55e44115f4d689", "committedDate": "2020-04-23T21:09:45Z", "message": "NXP-28989: make default blob dispatcher easier to subclass"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODQ0MzQx", "url": "https://github.com/nuxeo/nuxeo/pull/3964#pullrequestreview-400844341", "createdAt": "2020-04-27T11:00:22Z", "commit": {"oid": "97ebf6fca702674121650ebf6c55e44115f4d689"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODE3MTk5", "url": "https://github.com/nuxeo/nuxeo/pull/3964#pullrequestreview-400817199", "createdAt": "2020-04-27T10:19:47Z", "commit": {"oid": "97ebf6fca702674121650ebf6c55e44115f4d689"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDoxOTo0N1rOGMbvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDoxOTo0N1rOGMbvAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5MDQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new AssertionError(\"notreached\");\n          \n          \n            \n                        throw new AssertionError(\"not reached\");", "url": "https://github.com/nuxeo/nuxeo/pull/3964#discussion_r415690498", "createdAt": "2020-04-27T10:19:47Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DefaultBlobDispatcher.java", "diffHunk": "@@ -254,90 +277,146 @@ protected String getProviderId(Document doc, Blob blob, String blobXPath) {\n         if (useRepositoryName) {\n             return doc.getRepositoryName();\n         }\n+        NEXT_RULE: //\n         for (Rule rule : rules) {\n-            boolean allClausesMatch = true;\n             for (Clause clause : rule.clauses) {\n-                String xpath = clause.xpath;\n                 Object value;\n-                if (xpath.equals(REPOSITORY_NAME)) {\n-                    value = doc.getRepositoryName();\n-                } else if (xpath.equals(PATH)) {\n-                    value = doc.getPath();\n-                } else if (xpath.equals(IS_RECORD)) {\n-                    value = Boolean.valueOf(doc.isRecord());\n-                } else if (xpath.startsWith(BLOB_PREFIX)) {\n-                    switch (xpath.substring(BLOB_PREFIX.length())) {\n-                    case BLOB_NAME:\n-                        value = blob.getFilename();\n-                        break;\n-                    case BLOB_MIME_TYPE:\n-                        value = blob.getMimeType();\n-                        break;\n-                    case BLOB_ENCODING:\n-                        value = blob.getEncoding();\n-                        break;\n-                    case BLOB_DIGEST:\n-                        value = blob.getDigest();\n-                        break;\n-                    case BLOB_LENGTH:\n-                        value = Long.valueOf(blob.getLength());\n-                        break;\n-                    case BLOB_XPATH:\n-                        value = blobXPath;\n-                        break;\n-                    default:\n-                        log.error(\"Invalid dispatcher configuration property name: \" + xpath);\n-                        continue;\n-                    }\n-                } else {\n+                try {\n+                    value = getValue(doc, blob, blobXPath, clause);\n+                } catch (PropertyNotFoundException e) {\n+                    continue NEXT_RULE;\n+                }\n+                value = convert(value);\n+                if (!match(value, clause)) {\n+                    continue NEXT_RULE;\n+                }\n+            }\n+            return rule.providerId;\n+        }\n+        return defaultProviderId;\n+    }\n+\n+    protected Object getValue(Document doc, Blob blob, String blobXPath, Clause clause) {\n+        String xpath = clause.xpath;\n+        if (xpath.equals(REPOSITORY_NAME)) {\n+            return doc.getRepositoryName();\n+        }\n+        if (xpath.equals(PATH)) {\n+            return doc.getPath();\n+        }\n+        if (xpath.equals(IS_RECORD)) {\n+            return doc.isRecord();\n+        }\n+        if (xpath.startsWith(BLOB_PREFIX)) {\n+            switch (xpath.substring(BLOB_PREFIX.length())) {\n+            case BLOB_NAME:\n+                return blob.getFilename();\n+            case BLOB_MIME_TYPE:\n+                return blob.getMimeType();\n+            case BLOB_ENCODING:\n+                return blob.getEncoding();\n+            case BLOB_DIGEST:\n+                return blob.getDigest();\n+            case BLOB_LENGTH:\n+                return blob.getLength();\n+            case BLOB_XPATH:\n+                return blobXPath;\n+            default:\n+                log.error(\"Invalid dispatcher configuration property name: \" + xpath);\n+                throw new PropertyNotFoundException(xpath);\n+            }\n+        }\n+        try {\n+            return doc.getValue(xpath);\n+        } catch (PropertyNotFoundException e) {\n+            return doc.getPropertyValue(xpath); // may still throw PropertyNotFoundException\n+        }\n+    }\n+\n+    protected Object convert(Object value) {\n+        if (value instanceof Calendar) {\n+            value = ((Calendar) value).toInstant();\n+        }\n+        return value;\n+    }\n+\n+    protected boolean match(Object value, Clause clause) {\n+        switch (clause.op) {\n+        case EQ:\n+            return compare(value, clause, true, cmp -> cmp == 0);\n+        case NEQ:\n+            return compare(value, clause, true, cmp -> cmp != 0);\n+        case LT:\n+            return compare(value, clause, false, cmp -> cmp < 0);\n+        case LTE:\n+            return compare(value, clause, false, cmp -> cmp <= 0);\n+        case GT:\n+            return compare(value, clause, false, cmp -> cmp > 0);\n+        case GTE:\n+            return compare(value, clause, false, cmp -> cmp >= 0);\n+        case GLOB:\n+        case RE:\n+            return ((Pattern) clause.value).matcher(String.valueOf(value)).matches();\n+        default:\n+            throw new AssertionError(\"notreached\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ebf6fca702674121650ebf6c55e44115f4d689"}, "originalPosition": 291}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwOTUwMjQw", "url": "https://github.com/nuxeo/nuxeo/pull/3964#pullrequestreview-400950240", "createdAt": "2020-04-27T13:27:43Z", "commit": {"oid": "97ebf6fca702674121650ebf6c55e44115f4d689"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4779, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}