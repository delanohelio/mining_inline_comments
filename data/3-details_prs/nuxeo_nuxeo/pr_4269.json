{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwODg5MzU1", "number": 4269, "title": "Feature nxp 22843 checkers es kafka", "bodyText": "", "createdAt": "2020-08-20T12:55:25Z", "url": "https://github.com/nuxeo/nuxeo/pull/4269", "merged": true, "mergeCommit": {"oid": "6198b8b67876b115f015244fd3e2c8e1d15575ac"}, "closed": true, "closedAt": "2020-08-27T18:45:59Z", "author": {"login": "bdelbosc"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAv7p-AFqTQ3MTU3MzI0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDAhIoAFqTQ3NjcyNjExMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTczMjQ3", "url": "https://github.com/nuxeo/nuxeo/pull/4269#pullrequestreview-471573247", "createdAt": "2020-08-20T13:04:28Z", "commit": {"oid": "5c302822fbebc5587839f7e3a764920d319f3b57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowNDoyOFrOHD_ytg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowNDoyOFrOHD_ytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1Mjk1MA==", "bodyText": "What about replacing current logger by the Log4j2 one and using the lambda feature?", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r473952950", "createdAt": "2020-08-20T13:04:28Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java", "diffHunk": "@@ -132,31 +132,45 @@ protected RetryPolicy buildRetryPolicy() {\n \n         if (checkers == null) {\n             checkers = new HashSet<>();\n-\n-            for (String template : configurationGenerator.getTemplateList()) {\n+            List<String> items = configurationGenerator.getTemplateList();\n+            // Add backing without template\n+            items.add(\"elasticsearch\");\n+            items.add(\"kafka\");\n+            for (String item : items) {\n                 try {\n-                    File templateDir = configurationGenerator.getTemplateDirectory(template);\n-                    String classPath = getClasspathForTemplate(template);\n+                    log.debug(\"checker: \" + item);\n+                    File templateDir = getTemplateDir(item);\n+                    String classPath = getClasspathForTemplate(item);\n                     String checkClass = configurationGenerator.getUserConfig()\n-                                                              .getProperty(template + PARAM_CHECK_SUFFIX);\n-\n+                                                              .getProperty(item + PARAM_CHECK_SUFFIX);\n                     Optional<URLClassLoader> ucl = getClassLoaderForTemplate(templateDir, classPath);\n                     if (ucl.isPresent()) {\n                         Class<?> klass = Class.forName(checkClass, true, ucl.get());\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Adding checker \" + item + \" with class path: \"\n+                                    + Arrays.toString(ucl.get().getURLs()));\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c302822fbebc5587839f7e3a764920d319f3b57"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMjg4MzU4", "url": "https://github.com/nuxeo/nuxeo/pull/4269#pullrequestreview-472288358", "createdAt": "2020-08-21T08:06:57Z", "commit": {"oid": "ec4231c4b830f1ff78077285f4e5ed7bea637d23"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDQ1Nzkz", "url": "https://github.com/nuxeo/nuxeo/pull/4269#pullrequestreview-474445793", "createdAt": "2020-08-25T12:49:27Z", "commit": {"oid": "faf79d2c8cd306649700c43e9e9589926ea7b64f"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo0OToyN1rOHGWd0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzozMToyNVrOHGYMtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMTU4NA==", "bodyText": "missing newline", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476421584", "createdAt": "2020-08-25T12:49:27Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faf79d2c8cd306649700c43e9e9589926ea7b64f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyNTY5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {\n          \n          \n            \n                    if (!Boolean.valueOf(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476425692", "createdAt": "2020-08-25T12:55:24Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+\n+    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+\n+    protected static final String ADDRESS_LIST_OPT = \"addressList\";\n+\n+    protected static final String CONFIG_NAME = \"elasticsearch-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faf79d2c8cd306649700c43e9e9589926ea7b64f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyNjUzMw==", "bodyText": "ELASTIC_ENABLED_PROPERTY or ELASTIC_ENABLED_PROP?", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476426533", "createdAt": "2020-08-25T12:56:11Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faf79d2c8cd306649700c43e9e9589926ea7b64f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyODU3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (addressList == null || addressList.isEmpty()) {\n          \n          \n            \n                    if (StringUtils.isEmpty(addressList)) {\n          \n      \n    \n    \n  \n\ncommons-lang3 is in the module's dependencies", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476428578", "createdAt": "2020-08-25T12:59:11Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+\n+    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+\n+    protected static final String ADDRESS_LIST_OPT = \"addressList\";\n+\n+    protected static final String CONFIG_NAME = \"elasticsearch-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {\n+            log.debug(\"Checker skipped because elasticsearch is disabled\");\n+            return false;\n+        }\n+        if (!\"RestClient\".equals(cg.getUserConfig().getProperty(ELASTIC_REST_CLIENT_OPT))) {\n+            log.debug(\"Checker skipped because not using a rest client\");\n+            return false;\n+        }\n+        log.debug(\"Checker accepted\");\n+        return true;\n+    }\n+\n+    @Override\n+    public void check(ConfigurationGenerator cg) throws ConfigurationException {\n+        ElasticSearchClientConfig config = getConfig(cg);\n+        String addressList = config.getOption(ADDRESS_LIST_OPT);\n+        if (addressList == null || addressList.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faf79d2c8cd306649700c43e9e9589926ea7b64f"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyOTMwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"Check elastic config skipped on embedded configuration\");\n          \n          \n            \n                        log.debug(\"Elasticsearch config check skipped on embedded configuration\");", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476429303", "createdAt": "2020-08-25T13:00:18Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+\n+    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+\n+    protected static final String ADDRESS_LIST_OPT = \"addressList\";\n+\n+    protected static final String CONFIG_NAME = \"elasticsearch-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {\n+            log.debug(\"Checker skipped because elasticsearch is disabled\");\n+            return false;\n+        }\n+        if (!\"RestClient\".equals(cg.getUserConfig().getProperty(ELASTIC_REST_CLIENT_OPT))) {\n+            log.debug(\"Checker skipped because not using a rest client\");\n+            return false;\n+        }\n+        log.debug(\"Checker accepted\");\n+        return true;\n+    }\n+\n+    @Override\n+    public void check(ConfigurationGenerator cg) throws ConfigurationException {\n+        ElasticSearchClientConfig config = getConfig(cg);\n+        String addressList = config.getOption(ADDRESS_LIST_OPT);\n+        if (addressList == null || addressList.isEmpty()) {\n+            log.debug(\"Check elastic config skipped on embedded configuration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faf79d2c8cd306649700c43e9e9589926ea7b64f"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMzg0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ConfigurationException(\"Unable to connect to Elasticsearch \" + config.getOption(ADDRESS_LIST_OPT),\n          \n          \n            \n                        throw new ConfigurationException(\"Unable to connect to Elasticsearch: \" + config.getOption(ADDRESS_LIST_OPT),", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476433848", "createdAt": "2020-08-25T13:07:38Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+\n+    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+\n+    protected static final String ADDRESS_LIST_OPT = \"addressList\";\n+\n+    protected static final String CONFIG_NAME = \"elasticsearch-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {\n+            log.debug(\"Checker skipped because elasticsearch is disabled\");\n+            return false;\n+        }\n+        if (!\"RestClient\".equals(cg.getUserConfig().getProperty(ELASTIC_REST_CLIENT_OPT))) {\n+            log.debug(\"Checker skipped because not using a rest client\");\n+            return false;\n+        }\n+        log.debug(\"Checker accepted\");\n+        return true;\n+    }\n+\n+    @Override\n+    public void check(ConfigurationGenerator cg) throws ConfigurationException {\n+        ElasticSearchClientConfig config = getConfig(cg);\n+        String addressList = config.getOption(ADDRESS_LIST_OPT);\n+        if (addressList == null || addressList.isEmpty()) {\n+            log.debug(\"Check elastic config skipped on embedded configuration\");\n+            return;\n+        }\n+        log.debug(\"Check elastic config: {}\", config);\n+        ClusterHealthStatus status = getHealthStatus(config);\n+        switch (status) {\n+        case GREEN:\n+        case YELLOW:\n+            log.debug(\"check is ok, cluster health is {}\", status);\n+            return;\n+        default:\n+            throw new ConfigurationException(\"Elasticsearch cluster is not healthy: \" + status);\n+        }\n+    }\n+\n+    protected ClusterHealthStatus getHealthStatus(ElasticSearchClientConfig config) throws ConfigurationException {\n+        try {\n+            ESClient client = getClient(config);\n+            return client.getHealthStatus(null);\n+        } catch (Exception e) {\n+            throw new ConfigurationException(\"Unable to connect to Elasticsearch \" + config.getOption(ADDRESS_LIST_OPT),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faf79d2c8cd306649700c43e9e9589926ea7b64f"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzNzQ4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ConfigurationException(\"Fail to load ElasticSearchClientConfig from \" + file.getAbsolutePath(),\n          \n          \n            \n                        throw new ConfigurationException(\"Failed to load ElasticSearchClientConfig from \" + file.getAbsolutePath(),", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476437488", "createdAt": "2020-08-25T13:13:03Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/ElasticSearchChecker.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.elasticsearch;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.cluster.health.ClusterHealthStatus;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.elasticsearch.api.ESClient;\n+import org.nuxeo.elasticsearch.api.ESClientFactory;\n+import org.nuxeo.elasticsearch.client.ESRestClientFactory;\n+import org.nuxeo.elasticsearch.config.ElasticSearchClientConfig;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class ElasticSearchChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(ElasticSearchChecker.class);\n+\n+    protected static final String ELASTIC_ENABLED_OPT = \"elasticsearch.enabled\";\n+\n+    protected static final String ELASTIC_REST_CLIENT_OPT = \"elasticsearch.client\";\n+\n+    protected static final String ADDRESS_LIST_OPT = \"addressList\";\n+\n+    protected static final String CONFIG_NAME = \"elasticsearch-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(ELASTIC_ENABLED_OPT))) {\n+            log.debug(\"Checker skipped because elasticsearch is disabled\");\n+            return false;\n+        }\n+        if (!\"RestClient\".equals(cg.getUserConfig().getProperty(ELASTIC_REST_CLIENT_OPT))) {\n+            log.debug(\"Checker skipped because not using a rest client\");\n+            return false;\n+        }\n+        log.debug(\"Checker accepted\");\n+        return true;\n+    }\n+\n+    @Override\n+    public void check(ConfigurationGenerator cg) throws ConfigurationException {\n+        ElasticSearchClientConfig config = getConfig(cg);\n+        String addressList = config.getOption(ADDRESS_LIST_OPT);\n+        if (addressList == null || addressList.isEmpty()) {\n+            log.debug(\"Check elastic config skipped on embedded configuration\");\n+            return;\n+        }\n+        log.debug(\"Check elastic config: {}\", config);\n+        ClusterHealthStatus status = getHealthStatus(config);\n+        switch (status) {\n+        case GREEN:\n+        case YELLOW:\n+            log.debug(\"check is ok, cluster health is {}\", status);\n+            return;\n+        default:\n+            throw new ConfigurationException(\"Elasticsearch cluster is not healthy: \" + status);\n+        }\n+    }\n+\n+    protected ClusterHealthStatus getHealthStatus(ElasticSearchClientConfig config) throws ConfigurationException {\n+        try {\n+            ESClient client = getClient(config);\n+            return client.getHealthStatus(null);\n+        } catch (Exception e) {\n+            throw new ConfigurationException(\"Unable to connect to Elasticsearch \" + config.getOption(ADDRESS_LIST_OPT),\n+                    e);\n+        }\n+    }\n+\n+    protected ESClient getClient(ElasticSearchClientConfig config) {\n+        ESClientFactory clientFactory = new ESRestClientFactory();\n+        return clientFactory.create(null, config);\n+    }\n+\n+    protected ElasticSearchClientConfig getConfig(ConfigurationGenerator cg) throws ConfigurationException {\n+        File configFile = new File(cg.getConfigDir(), CONFIG_NAME);\n+        if (!configFile.exists()) {\n+            throw new ConfigurationException(\"Cannot find Elasticsearch configuration: \" + CONFIG_NAME);\n+        }\n+        return getDescriptor(configFile);\n+    }\n+\n+    protected ElasticSearchClientConfig getDescriptor(File file) throws ConfigurationException {\n+        XMap xmap = new XMap();\n+        xmap.register(ElasticSearchClientConfig.class);\n+        try {\n+            // avoid XMap to fail when trying to load class value by removing class attribute\n+            String content = Files.readString(file.toPath(), StandardCharsets.UTF_8);\n+            content = content.replace(\"class=\", \"ignore=\");\n+            InputStream inStream = new ByteArrayInputStream(content.getBytes());\n+            Object[] nodes = xmap.loadAll(inStream);\n+            for (Object node : nodes) {\n+                if (node != null) {\n+                    return (ElasticSearchClientConfig) node;\n+                }\n+            }\n+            throw new ConfigurationException(\"No ElasticSearchClientConfig found in \" + file.getAbsolutePath());\n+        } catch (IOException e) {\n+            throw new ConfigurationException(\"Fail to load ElasticSearchClientConfig from \" + file.getAbsolutePath(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faf79d2c8cd306649700c43e9e9589926ea7b64f"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MDk5Mg==", "bodyText": "missing newline", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476440992", "createdAt": "2020-08-25T13:18:23Z", "author": {"login": "ataillefer"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.kafka;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class KafkaChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(KafkaChecker.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c302822fbebc5587839f7e3a764920d319f3b57"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTYxMw==", "bodyText": "KAFKA_ENABLED_PROPERTY or KAFKA_ENABLED_PROP?", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476441613", "createdAt": "2020-08-25T13:19:21Z", "author": {"login": "ataillefer"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.kafka;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class KafkaChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(KafkaChecker.class);\n+\n+    private static final String KAFKA_ENABLED_OPT = \"kafka.enabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c302822fbebc5587839f7e3a764920d319f3b57"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0MTc5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {\n          \n          \n            \n                    if (!Boolean.valueOf(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476441792", "createdAt": "2020-08-25T13:19:37Z", "author": {"login": "ataillefer"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.kafka;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class KafkaChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(KafkaChecker.class);\n+\n+    private static final String KAFKA_ENABLED_OPT = \"kafka.enabled\";\n+\n+    private static final String CONFIG_NAME = \"kafka-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c302822fbebc5587839f7e3a764920d319f3b57"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NTExNQ==", "bodyText": "Maybe align with Elasticsearch?\nFailed to load KafkaConfigDescriptor from \" + configFile.getAbsolutePath()", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476445115", "createdAt": "2020-08-25T13:24:32Z", "author": {"login": "ataillefer"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaChecker.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.kafka;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.xmap.XMap;\n+import org.nuxeo.launcher.config.ConfigurationException;\n+import org.nuxeo.launcher.config.ConfigurationGenerator;\n+import org.nuxeo.launcher.config.backingservices.BackingChecker;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.kafka.KafkaLogManager;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class KafkaChecker implements BackingChecker {\n+    private static final Logger log = LogManager.getLogger(KafkaChecker.class);\n+\n+    private static final String KAFKA_ENABLED_OPT = \"kafka.enabled\";\n+\n+    private static final String CONFIG_NAME = \"kafka-config.xml\";\n+\n+    @Override\n+    public boolean accepts(ConfigurationGenerator cg) {\n+        if (!\"true\".equals(cg.getUserConfig().getProperty(KAFKA_ENABLED_OPT))) {\n+            log.debug(\"Checker skipped because Kafka is disabled\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public void check(ConfigurationGenerator cg) throws ConfigurationException {\n+        KafkaConfigDescriptor config = getConfig(cg);\n+        try (KafkaLogManager manager = new KafkaLogManager(config.topicPrefix, config.producerProperties.properties,\n+                config.consumerProperties.properties)) {\n+            manager.exists(Name.ofUrn(\"input/null\"));\n+        } catch (Exception e) {\n+            throw new ConfigurationException(\"Unable to reach Kafka using: \" + config.producerProperties.properties, e);\n+        }\n+    }\n+\n+    protected KafkaConfigDescriptor getConfig(ConfigurationGenerator cg) throws ConfigurationException {\n+        File configFile = new File(cg.getConfigDir(), CONFIG_NAME);\n+        if (!configFile.exists()) {\n+            throw new ConfigurationException(\"Cannot find Kafka configuration: \" + CONFIG_NAME);\n+        }\n+        XMap xmap = new XMap();\n+        xmap.register(KafkaConfigDescriptor.class);\n+        try (InputStream inStream = new FileInputStream(configFile)) {\n+            Object[] nodes = xmap.loadAll(inStream);\n+            for (Object node : nodes) {\n+                if (node != null) {\n+                    return (KafkaConfigDescriptor) node;\n+                }\n+            }\n+            throw new ConfigurationException(\"No KafkaConfigDescriptor found in \" + configFile.getAbsolutePath());\n+        } catch (IOException e) {\n+            throw new ConfigurationException(\"Unable to load the configuration for KafkaConfigDescriptor\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c302822fbebc5587839f7e3a764920d319f3b57"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NjEwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    log.debug(\"Adding checker {} with class path: {}\", () -> item,\n          \n          \n            \n                                    log.debug(\"Adding checker: {} with class path: {}\", () -> item,", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476446103", "createdAt": "2020-08-25T13:25:59Z", "author": {"login": "ataillefer"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java", "diffHunk": "@@ -138,22 +138,20 @@ protected RetryPolicy buildRetryPolicy() {\n             items.add(\"kafka\");\n             for (String item : items) {\n                 try {\n-                    log.debug(\"checker: \" + item);\n+                    log.debug(\"checker: {}\", item);\n                     File templateDir = getTemplateDir(item);\n                     String classPath = getClasspathForTemplate(item);\n                     String checkClass = configurationGenerator.getUserConfig()\n                                                               .getProperty(item + PARAM_CHECK_SUFFIX);\n                     Optional<URLClassLoader> ucl = getClassLoaderForTemplate(templateDir, classPath);\n                     if (ucl.isPresent()) {\n                         Class<?> klass = Class.forName(checkClass, true, ucl.get());\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(\"Adding checker \" + item + \" with class path: \"\n-                                    + Arrays.toString(ucl.get().getURLs()));\n-                        }\n+                        log.debug(\"Adding checker {} with class path: {}\", () -> item,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4231c4b830f1ff78077285f4e5ed7bea637d23"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0OTk3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.debug(\"adding url: {}\", file.getPath());\n          \n          \n            \n                                log.debug(\"Adding url: {}\", file.getPath());", "url": "https://github.com/nuxeo/nuxeo/pull/4269#discussion_r476449974", "createdAt": "2020-08-25T13:31:25Z", "author": {"login": "ataillefer"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/BackingServiceConfigurator.java", "diffHunk": "@@ -209,7 +207,7 @@ String getClasspathForTemplate(String template) {\n             for (File file : files) {\n                 try {\n                     urlsList.add(new URL(\"jar:file:\" + file.getPath() + \"!/\"));\n-                    log.debug(\"Added \" + file.getPath());\n+                    log.debug(\"adding url: {}\", file.getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec4231c4b830f1ff78077285f4e5ed7bea637d23"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec4231c4b830f1ff78077285f4e5ed7bea637d23", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ec4231c4b830f1ff78077285f4e5ed7bea637d23", "committedDate": "2020-08-21T08:01:17Z", "message": "NXP-22843: Use Log4j2"}, "afterCommit": {"oid": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "committedDate": "2020-08-26T08:55:45Z", "message": "NXP-22843: Use Log4j2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzExNDc2", "url": "https://github.com/nuxeo/nuxeo/pull/4269#pullrequestreview-475311476", "createdAt": "2020-08-26T09:24:29Z", "commit": {"oid": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzM0ODY1", "url": "https://github.com/nuxeo/nuxeo/pull/4269#pullrequestreview-475334865", "createdAt": "2020-08-26T09:55:41Z", "commit": {"oid": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NTIzMDI1", "url": "https://github.com/nuxeo/nuxeo/pull/4269#pullrequestreview-475523025", "createdAt": "2020-08-26T14:04:23Z", "commit": {"oid": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67246ce8f7b96d3a50cf7ef796f10c7525f4812f", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/67246ce8f7b96d3a50cf7ef796f10c7525f4812f", "committedDate": "2020-08-27T12:55:48Z", "message": "NXP-22843: Add an Elasticsearch checker\n\nOnly the RestClient mode is supported"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3255448e77098e4de232a1b341cf30e1e8e0bab", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a3255448e77098e4de232a1b341cf30e1e8e0bab", "committedDate": "2020-08-27T12:55:48Z", "message": "NXP-22844: Add a Kafka checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d469decc163216ef9ec537d0e37d47c0f8ac2dd", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2d469decc163216ef9ec537d0e37d47c0f8ac2dd", "committedDate": "2020-08-27T12:55:48Z", "message": "NXP-22843: Use Log4j2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bd2ea8cda33d8872d91621c32dfeafc7b669bb66", "committedDate": "2020-08-26T08:55:45Z", "message": "NXP-22843: Use Log4j2"}, "afterCommit": {"oid": "2d469decc163216ef9ec537d0e37d47c0f8ac2dd", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2d469decc163216ef9ec537d0e37d47c0f8ac2dd", "committedDate": "2020-08-27T12:55:48Z", "message": "NXP-22843: Use Log4j2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Njk0NTM2", "url": "https://github.com/nuxeo/nuxeo/pull/4269#pullrequestreview-476694536", "createdAt": "2020-08-27T12:59:46Z", "commit": {"oid": "2d469decc163216ef9ec537d0e37d47c0f8ac2dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NzE4NDIz", "url": "https://github.com/nuxeo/nuxeo/pull/4269#pullrequestreview-476718423", "createdAt": "2020-08-27T13:26:53Z", "commit": {"oid": "2d469decc163216ef9ec537d0e37d47c0f8ac2dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NzI2MTEx", "url": "https://github.com/nuxeo/nuxeo/pull/4269#pullrequestreview-476726111", "createdAt": "2020-08-27T13:35:12Z", "commit": {"oid": "2d469decc163216ef9ec537d0e37d47c0f8ac2dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4959, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}