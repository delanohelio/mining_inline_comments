{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwOTQ0NDI4", "number": 3900, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoxNDoxM1rODx9oqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyMjo0NVrODx_Nqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzE2NjQ5OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/AbstractBlobStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoxNDoxM1rOGFur_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoxNDoxM1rOGFur_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MDk4OQ==", "bodyText": "Is putting the key in the log message could help debugging?", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408660989", "createdAt": "2020-04-15T08:14:13Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/AbstractBlobStore.java", "diffHunk": "@@ -126,6 +134,28 @@ protected String stripBlobKeyPrefix(String key) {\n         return key;\n     }\n \n+    public static String setByteRangeInKey(String key, ByteRange byteRange) {\n+        return key + String.valueOf(BYTE_RANGE_SEP) + byteRange.getStart() + String.valueOf(BYTE_RANGE_SEP)\n+                + byteRange.getEnd();\n+    }\n+\n+    public static ByteRange getByteRangeFromKey(MutableObject<String> keyHolder) {\n+        String key = keyHolder.getValue();\n+        int j = key.lastIndexOf(BYTE_RANGE_SEP);\n+        int i = key.lastIndexOf(BYTE_RANGE_SEP, j - 1);\n+        if (j > 0) {\n+            try {\n+                long start = Long.parseLong(key.substring(i + 1, j));\n+                long end = Long.parseLong(key.substring(j + 1));\n+                keyHolder.setValue(key.substring(0, i));\n+                return ByteRange.inclusive(start, end);\n+            } catch (NumberFormatException e) {\n+                log.debug(e, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzE3MDExOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoxNToxNVrOGFuuZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTozODo0M1rOGF1u7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MTYwNg==", "bodyText": "The deprecation is for the internal API? Is BlobProvide#getStream the replacement of this one?", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408661606", "createdAt": "2020-04-15T08:15:15Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java", "diffHunk": "@@ -95,22 +95,28 @@ default BlobProvider getBlobProviderWithNamespace(String id) {\n     BlobProvider getBlobProvider(Blob blob);\n \n     /**\n-     * INTERNAL - Gets an {@link InputStream} for the data of a managed blob. Used by internal implementations, regular\n-     * callers should call {@link Blob#getStream}.\n+     * Gets an {@link InputStream} for the data of a managed blob.\n+     * <p>\n+     * If the blob is managed this is equivalent to {@link ManagedBlob#getStream()}, otherwise returns {@code null}.\n      *\n      * @param blob the blob\n-     * @return the stream\n+     * @return the stream, or {@code null} if the blob is not managed\n+     * @deprecated since 11.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NjQzMA==", "bodyText": "Doing Blob#getStream directly is the replacement. I'll add details.", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408776430", "createdAt": "2020-04-15T11:38:43Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java", "diffHunk": "@@ -95,22 +95,28 @@ default BlobProvider getBlobProviderWithNamespace(String id) {\n     BlobProvider getBlobProvider(Blob blob);\n \n     /**\n-     * INTERNAL - Gets an {@link InputStream} for the data of a managed blob. Used by internal implementations, regular\n-     * callers should call {@link Blob#getStream}.\n+     * Gets an {@link InputStream} for the data of a managed blob.\n+     * <p>\n+     * If the blob is managed this is equivalent to {@link ManagedBlob#getStream()}, otherwise returns {@code null}.\n      *\n      * @param blob the blob\n-     * @return the stream\n+     * @return the stream, or {@code null} if the blob is not managed\n+     * @deprecated since 11.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MTYwNg=="}, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzIzMTEwOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozMTo0MVrOGFvUyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTozMjozNlrOGF1i8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTQzMg==", "bodyText": "Is there any replacement to mention?", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408671432", "createdAt": "2020-04-15T08:31:41Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java", "diffHunk": "@@ -95,22 +95,28 @@ default BlobProvider getBlobProviderWithNamespace(String id) {\n     BlobProvider getBlobProvider(Blob blob);\n \n     /**\n-     * INTERNAL - Gets an {@link InputStream} for the data of a managed blob. Used by internal implementations, regular\n-     * callers should call {@link Blob#getStream}.\n+     * Gets an {@link InputStream} for the data of a managed blob.\n+     * <p>\n+     * If the blob is managed this is equivalent to {@link ManagedBlob#getStream()}, otherwise returns {@code null}.\n      *\n      * @param blob the blob\n-     * @return the stream\n+     * @return the stream, or {@code null} if the blob is not managed\n+     * @deprecated since 11.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3Mjc2Nw==", "bodyText": "The Javadoc says If the blob is managed this is equivalent to {@link ManagedBlob#getStream()}, otherwise returns {@code null} so I think it's enough?", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408772767", "createdAt": "2020-04-15T11:31:25Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java", "diffHunk": "@@ -95,22 +95,28 @@ default BlobProvider getBlobProviderWithNamespace(String id) {\n     BlobProvider getBlobProvider(Blob blob);\n \n     /**\n-     * INTERNAL - Gets an {@link InputStream} for the data of a managed blob. Used by internal implementations, regular\n-     * callers should call {@link Blob#getStream}.\n+     * Gets an {@link InputStream} for the data of a managed blob.\n+     * <p>\n+     * If the blob is managed this is equivalent to {@link ManagedBlob#getStream()}, otherwise returns {@code null}.\n      *\n      * @param blob the blob\n-     * @return the stream\n+     * @return the stream, or {@code null} if the blob is not managed\n+     * @deprecated since 11.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTQzMg=="}, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3MzM2Mw==", "bodyText": "But I'll add something anyway ok.", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408773363", "createdAt": "2020-04-15T11:32:36Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobManager.java", "diffHunk": "@@ -95,22 +95,28 @@ default BlobProvider getBlobProviderWithNamespace(String id) {\n     BlobProvider getBlobProvider(Blob blob);\n \n     /**\n-     * INTERNAL - Gets an {@link InputStream} for the data of a managed blob. Used by internal implementations, regular\n-     * callers should call {@link Blob#getStream}.\n+     * Gets an {@link InputStream} for the data of a managed blob.\n+     * <p>\n+     * If the blob is managed this is equivalent to {@link ManagedBlob#getStream()}, otherwise returns {@code null}.\n      *\n      * @param blob the blob\n-     * @return the stream\n+     * @return the stream, or {@code null} if the blob is not managed\n+     * @deprecated since 11.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTQzMg=="}, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM0NzgwOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-api/src/test/resources/OSGI-INF/dummy-blob-provider.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMjowNFrOGFwc_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTozOTozOFrOGF1w6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4OTkxOQ==", "bodyText": "Should we configure it as allowing byte range?", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408689919", "createdAt": "2020-04-15T09:02:04Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-api/src/test/resources/OSGI-INF/dummy-blob-provider.xml", "diffHunk": "@@ -12,5 +12,15 @@\n     <blobprovider name=\"dummy\">\n       <class>org.nuxeo.ecm.core.blob.DummyBlobProvider</class>\n     </blobprovider>\n+    <blobprovider name=\"fromdoc\">\n+      <class>org.nuxeo.ecm.core.blob.DummyBlobProvider</class>\n+    </blobprovider>\n+    <blobprovider name=\"fromdoc2\">\n+      <class>org.nuxeo.ecm.core.blob.DummyBlobProvider</class>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NjkzOQ==", "bodyText": "No this one is just a \"virtual\" blob provider, it doesn't need byte ranges. It's the one the virtual implementation is actually using that needs byte ranges.", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408776939", "createdAt": "2020-04-15T11:39:38Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-api/src/test/resources/OSGI-INF/dummy-blob-provider.xml", "diffHunk": "@@ -12,5 +12,15 @@\n     <blobprovider name=\"dummy\">\n       <class>org.nuxeo.ecm.core.blob.DummyBlobProvider</class>\n     </blobprovider>\n+    <blobprovider name=\"fromdoc\">\n+      <class>org.nuxeo.ecm.core.blob.DummyBlobProvider</class>\n+    </blobprovider>\n+    <blobprovider name=\"fromdoc2\">\n+      <class>org.nuxeo.ecm.core.blob.DummyBlobProvider</class>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4OTkxOQ=="}, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM3MTMzOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowODoxOVrOGFwrrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1Mzo0NlrOGF2OGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MzY3Nw==", "bodyText": "What do you think about introducing an object for key which does all the needed parsing (byte range and version) and holds methods such as containsRange.", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408693677", "createdAt": "2020-04-15T09:08:19Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java", "diffHunk": "@@ -367,15 +373,23 @@ protected void clearBucket() {\n \n     @Override\n     public boolean readBlob(String key, Path dest) throws IOException {\n+        ByteRange byteRange;\n+        if (allowByteRange) {\n+            MutableObject<String> keyHolder = new MutableObject<>(key);\n+            byteRange = getByteRangeFromKey(keyHolder);\n+            key = keyHolder.getValue();\n+        } else {\n+            byteRange = null;\n+        }\n         String objectKey;\n         String versionId;\n-        int seppos = key.indexOf(VER_SEP);\n-        if (seppos < 0) {\n-            objectKey = key;\n-            versionId = null;\n-        } else {\n+        int seppos;\n+        if (useVersion && (seppos = key.indexOf(VER_SEP)) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3Nzk4Mg==", "bodyText": "You mean a helper? In the vast majority of cases the key is just a string without structure. It's only for S3 versions and byte ranges that we need additional semantics but I don't want to overhaul the whole BlobStore API to add an abstraction here, which is why I did this string parsing.", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408777982", "createdAt": "2020-04-15T11:41:32Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java", "diffHunk": "@@ -367,15 +373,23 @@ protected void clearBucket() {\n \n     @Override\n     public boolean readBlob(String key, Path dest) throws IOException {\n+        ByteRange byteRange;\n+        if (allowByteRange) {\n+            MutableObject<String> keyHolder = new MutableObject<>(key);\n+            byteRange = getByteRangeFromKey(keyHolder);\n+            key = keyHolder.getValue();\n+        } else {\n+            byteRange = null;\n+        }\n         String objectKey;\n         String versionId;\n-        int seppos = key.indexOf(VER_SEP);\n-        if (seppos < 0) {\n-            objectKey = key;\n-            versionId = null;\n-        } else {\n+        int seppos;\n+        if (useVersion && (seppos = key.indexOf(VER_SEP)) > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MzY3Nw=="}, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NDQxMQ==", "bodyText": "I meant a helper, more a data object with convenient methods and a static parse method (for instance). We would use only here and where we need to read range and not to use in a method signature as the change would be very big and not relevant in all cases (as you said).\nVER_SEP could be a blocker for such helper as it is only for S3 and we don't want it in a \"generic\" thing.", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408784411", "createdAt": "2020-04-15T11:53:46Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java", "diffHunk": "@@ -367,15 +373,23 @@ protected void clearBucket() {\n \n     @Override\n     public boolean readBlob(String key, Path dest) throws IOException {\n+        ByteRange byteRange;\n+        if (allowByteRange) {\n+            MutableObject<String> keyHolder = new MutableObject<>(key);\n+            byteRange = getByteRangeFromKey(keyHolder);\n+            key = keyHolder.getValue();\n+        } else {\n+            byteRange = null;\n+        }\n         String objectKey;\n         String versionId;\n-        int seppos = key.indexOf(VER_SEP);\n-        if (seppos < 0) {\n-            objectKey = key;\n-            versionId = null;\n-        } else {\n+        int seppos;\n+        if (useVersion && (seppos = key.indexOf(VER_SEP)) > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MzY3Nw=="}, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQwNjM2OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/SessionImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxNzo0N1rOGFxBYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo0MzoyOVrOGF15DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5OTIzMg==", "bodyText": "It can happen if fulltext is not stored in blob, no?", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408699232", "createdAt": "2020-04-15T09:17:47Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/SessionImpl.java", "diffHunk": "@@ -1491,26 +1493,32 @@ public boolean isFulltextStoredInBlob() {\n     }\n \n     @Override\n-    public Map<String, String> getBinaryFulltext(Serializable id) {\n+    public Map<String, String> getBinaryFulltext(Serializable id, Document doc) {\n         if (fulltextDescriptor.getFulltextDisabled()) {\n             return null;\n         }\n         RowId rowId = new RowId(Model.FULLTEXT_TABLE_NAME, id);\n         Map<String, String> map = mapper.getBinaryFulltext(rowId);\n         String fulltext = map.get(BINARY_FULLTEXT_MAIN_KEY);\n         if (fulltextDescriptor.getFulltextStoredInBlob() && fulltext != null) {\n-            // fulltext is actually the blob  key\n-            // now retrieve the actual fulltext from the blob content\n-            DocumentBlobManager blobManager = Framework.getService(DocumentBlobManager.class);\n-            try {\n-                BlobInfo blobInfo = new BlobInfo();\n-                blobInfo.key = fulltext;\n-                Blob blob = blobManager.readBlob(blobInfo, getRepositoryName());\n-                fulltext = blob.getString();\n-                map.put(BINARY_FULLTEXT_MAIN_KEY, fulltext);\n-            } catch (IOException e) {\n-                throw new PropertyException(\"Cannot read fulltext blob for doc: \" + id, e);\n+            if (doc == null) {\n+                // could not find doc (shouldn't happen)\n+                fulltext = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTAyMA==", "bodyText": "No, there's a if (fulltextDescriptor.getFulltextStoredInBlob() just before.", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408779020", "createdAt": "2020-04-15T11:43:29Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/SessionImpl.java", "diffHunk": "@@ -1491,26 +1493,32 @@ public boolean isFulltextStoredInBlob() {\n     }\n \n     @Override\n-    public Map<String, String> getBinaryFulltext(Serializable id) {\n+    public Map<String, String> getBinaryFulltext(Serializable id, Document doc) {\n         if (fulltextDescriptor.getFulltextDisabled()) {\n             return null;\n         }\n         RowId rowId = new RowId(Model.FULLTEXT_TABLE_NAME, id);\n         Map<String, String> map = mapper.getBinaryFulltext(rowId);\n         String fulltext = map.get(BINARY_FULLTEXT_MAIN_KEY);\n         if (fulltextDescriptor.getFulltextStoredInBlob() && fulltext != null) {\n-            // fulltext is actually the blob  key\n-            // now retrieve the actual fulltext from the blob content\n-            DocumentBlobManager blobManager = Framework.getService(DocumentBlobManager.class);\n-            try {\n-                BlobInfo blobInfo = new BlobInfo();\n-                blobInfo.key = fulltext;\n-                Blob blob = blobManager.readBlob(blobInfo, getRepositoryName());\n-                fulltext = blob.getString();\n-                map.put(BINARY_FULLTEXT_MAIN_KEY, fulltext);\n-            } catch (IOException e) {\n-                throw new PropertyException(\"Cannot read fulltext blob for doc: \" + id, e);\n+            if (doc == null) {\n+                // could not find doc (shouldn't happen)\n+                fulltext = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5OTIzMg=="}, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzQyNTA3OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyMjo0NVrOGFxM_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo0ODozNFrOGF2DfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMjIwNg==", "bodyText": "Why not using BlobInfoContext for the signature?", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408702206", "createdAt": "2020-04-15T09:22:45Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobManager.java", "diffHunk": "@@ -35,14 +35,27 @@\n  */\n public interface DocumentBlobManager {\n \n+    /**\n+     * Reads a {@link Blob} from storage.\n+     *\n+     * @param blobInfo the blob information\n+     * @param doc the document to which this blob belongs\n+     * @param xpath the xpath of the blob in the document\n+     * @return a managed blob\n+     * @since 11.1\n+     */\n+    Blob readBlob(BlobInfo blobInfo, Document doc, String xpath) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4MTY5Mg==", "bodyText": "For the DocumentBlobManager I kept simple explicit APIs. BlobInfoContext is currently used at lower level in BlobProvider to pass info around, but here I kept something symmetric with the existing writeBlob(Blob blob, Document doc, String xpath). We could refactor this to use BlobInfoContext / BlobContext yes (although BlobContext doesn't currently keep the full doc, just its id). I'll keep that for later.", "url": "https://github.com/nuxeo/nuxeo/pull/3900#discussion_r408781692", "createdAt": "2020-04-15T11:48:34Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/DocumentBlobManager.java", "diffHunk": "@@ -35,14 +35,27 @@\n  */\n public interface DocumentBlobManager {\n \n+    /**\n+     * Reads a {@link Blob} from storage.\n+     *\n+     * @param blobInfo the blob information\n+     * @param doc the document to which this blob belongs\n+     * @param xpath the xpath of the blob in the document\n+     * @return a managed blob\n+     * @since 11.1\n+     */\n+    Blob readBlob(BlobInfo blobInfo, Document doc, String xpath) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMjIwNg=="}, "originalCommit": {"oid": "1a524ee3c57f11ba2e0134e0b6a972b7a66604ab"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4199, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}