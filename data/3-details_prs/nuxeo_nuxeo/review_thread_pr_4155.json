{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NzM3NDUy", "number": 4155, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoxOToxM1rOEGa_xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTozNDo0MlrOEHf3gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTY5MjIzOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoxOToxM1rOGlNRoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTozMTo0M1rOGm5AdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2ODAwMA==", "bodyText": "Can we use e::getMessage instead?", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r441668000", "createdAt": "2020-06-17T16:19:13Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "diffHunk": "@@ -199,14 +205,17 @@ private Object getScalarPropertyValue(Property property, JsonNode jn, Type type)\n                         return blob.getString();\n                     }\n                 }\n-                log.info(\"Unable to parse the property {}\", property::getXPath);\n-                return null;\n+                throw new MarshallingException(\"Unable to parse the property \" +  property.getXPath());\n             }\n             Object object = null;\n             for (Class<?> clazz : resolver.getManagedClasses()) {\n-                object = readEntity(clazz, clazz, jn);\n-                if (object != null) {\n-                    break;\n+                try {\n+                    object = readEntity(clazz, clazz, jn);\n+                    if (object != null) {\n+                        break;\n+                    }\n+                } catch (Exception e) {\n+                    log.info(\"Unable to read the entity - {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNjI3NA==", "bodyText": "AFAIK there's no API allowing to mix Supplier and throwable. Regarding the Javadoc Supplier seems to be for parameters only.\nOtherwise, the following is correct:\nlog.info(() -> String.format(\"Unable to read the entity - %s\", e.getMessage()), e);\nDon't really know if it's beneficial regarding verbosity and code reading, wdyt?", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r442836274", "createdAt": "2020-06-19T13:20:26Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "diffHunk": "@@ -199,14 +205,17 @@ private Object getScalarPropertyValue(Property property, JsonNode jn, Type type)\n                         return blob.getString();\n                     }\n                 }\n-                log.info(\"Unable to parse the property {}\", property::getXPath);\n-                return null;\n+                throw new MarshallingException(\"Unable to parse the property \" +  property.getXPath());\n             }\n             Object object = null;\n             for (Class<?> clazz : resolver.getManagedClasses()) {\n-                object = readEntity(clazz, clazz, jn);\n-                if (object != null) {\n-                    break;\n+                try {\n+                    object = readEntity(clazz, clazz, jn);\n+                    if (object != null) {\n+                        break;\n+                    }\n+                } catch (Exception e) {\n+                    log.info(\"Unable to read the entity - {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2ODAwMA=="}, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2NjE2MA==", "bodyText": "Ah yes I always forget if it's valid or not. No then keep your old code, it doesn't matter for an INFO message that will have to be generated to go to Datadog anyway.", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r442866160", "createdAt": "2020-06-19T14:16:25Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "diffHunk": "@@ -199,14 +205,17 @@ private Object getScalarPropertyValue(Property property, JsonNode jn, Type type)\n                         return blob.getString();\n                     }\n                 }\n-                log.info(\"Unable to parse the property {}\", property::getXPath);\n-                return null;\n+                throw new MarshallingException(\"Unable to parse the property \" +  property.getXPath());\n             }\n             Object object = null;\n             for (Class<?> clazz : resolver.getManagedClasses()) {\n-                object = readEntity(clazz, clazz, jn);\n-                if (object != null) {\n-                    break;\n+                try {\n+                    object = readEntity(clazz, clazz, jn);\n+                    if (object != null) {\n+                        break;\n+                    }\n+                } catch (Exception e) {\n+                    log.info(\"Unable to read the entity - {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2ODAwMA=="}, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMDg1Ng==", "bodyText": "We could also do the following, we have some occurrences in the code:\nlog.info(\"Unable to read the entity - {}\", e::getMessage, () -> e);", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r443430856", "createdAt": "2020-06-22T09:27:47Z", "author": {"login": "ataillefer"}, "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "diffHunk": "@@ -199,14 +205,17 @@ private Object getScalarPropertyValue(Property property, JsonNode jn, Type type)\n                         return blob.getString();\n                     }\n                 }\n-                log.info(\"Unable to parse the property {}\", property::getXPath);\n-                return null;\n+                throw new MarshallingException(\"Unable to parse the property \" +  property.getXPath());\n             }\n             Object object = null;\n             for (Class<?> clazz : resolver.getManagedClasses()) {\n-                object = readEntity(clazz, clazz, jn);\n-                if (object != null) {\n-                    break;\n+                try {\n+                    object = readEntity(clazz, clazz, jn);\n+                    if (object != null) {\n+                        break;\n+                    }\n+                } catch (Exception e) {\n+                    log.info(\"Unable to read the entity - {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2ODAwMA=="}, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMzA3Nw==", "bodyText": "Didn't know that, many thanks. Let's do that!", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r443433077", "createdAt": "2020-06-22T09:31:43Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "diffHunk": "@@ -199,14 +205,17 @@ private Object getScalarPropertyValue(Property property, JsonNode jn, Type type)\n                         return blob.getString();\n                     }\n                 }\n-                log.info(\"Unable to parse the property {}\", property::getXPath);\n-                return null;\n+                throw new MarshallingException(\"Unable to parse the property \" +  property.getXPath());\n             }\n             Object object = null;\n             for (Class<?> clazz : resolver.getManagedClasses()) {\n-                object = readEntity(clazz, clazz, jn);\n-                if (object != null) {\n-                    break;\n+                try {\n+                    object = readEntity(clazz, clazz, jn);\n+                    if (object != null) {\n+                        break;\n+                    }\n+                } catch (Exception e) {\n+                    log.info(\"Unable to read the entity - {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2ODAwMA=="}, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkwOTUzOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxOToyMlrOGlPfZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDowNDozM1rOGmWBrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNDI5NQ==", "bodyText": "Shouldn't we want to handle InterruptedException and so on here? @efge?\nBut what about just catching IOException in fact?", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r441704295", "createdAt": "2020-06-17T17:19:22Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "diffHunk": "@@ -200,14 +205,17 @@ private Object getScalarPropertyValue(Property property, JsonNode jn, Type type)\n                         return blob.getString();\n                     }\n                 }\n-                log.info(\"Unable to parse the property {}\", property::getXPath);\n-                return null;\n+                throw new MarshallingException(\"Unable to parse the property \" +  property.getXPath());\n             }\n             Object object = null;\n             for (Class<?> clazz : resolver.getManagedClasses()) {\n-                object = readEntity(clazz, clazz, jn);\n-                if (object != null) {\n-                    break;\n+                try {\n+                    object = readEntity(clazz, clazz, jn);\n+                    if (object != null) {\n+                        break;\n+                    }\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MDQzMQ==", "bodyText": "Yes I made a comment about this in the 10.10 PR as I was wondering if throwing instead of returning null was really backportable and if this was related too this catch. Any more specific exception than Exception would be better.", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r441750431", "createdAt": "2020-06-17T18:38:42Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "diffHunk": "@@ -200,14 +205,17 @@ private Object getScalarPropertyValue(Property property, JsonNode jn, Type type)\n                         return blob.getString();\n                     }\n                 }\n-                log.info(\"Unable to parse the property {}\", property::getXPath);\n-                return null;\n+                throw new MarshallingException(\"Unable to parse the property \" +  property.getXPath());\n             }\n             Object object = null;\n             for (Class<?> clazz : resolver.getManagedClasses()) {\n-                object = readEntity(clazz, clazz, jn);\n-                if (object != null) {\n-                    break;\n+                try {\n+                    object = readEntity(clazz, clazz, jn);\n+                    if (object != null) {\n+                        break;\n+                    }\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNDI5NQ=="}, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1OTk0OQ==", "bodyText": "We've changed the Exception type to catch to MarshallingException as it's all that we want..", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r442859949", "createdAt": "2020-06-19T14:04:33Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "diffHunk": "@@ -200,14 +205,17 @@ private Object getScalarPropertyValue(Property property, JsonNode jn, Type type)\n                         return blob.getString();\n                     }\n                 }\n-                log.info(\"Unable to parse the property {}\", property::getXPath);\n-                return null;\n+                throw new MarshallingException(\"Unable to parse the property \" +  property.getXPath());\n             }\n             Object object = null;\n             for (Class<?> clazz : resolver.getManagedClasses()) {\n-                object = readEntity(clazz, clazz, jn);\n-                if (object != null) {\n-                    break;\n+                try {\n+                    object = readEntity(clazz, clazz, jn);\n+                    if (object != null) {\n+                        break;\n+                    }\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNDI5NQ=="}, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkxMDgxOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxOTo0NlrOGlPgTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoxOTo0NlrOGlPgTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNDUyNA==", "bodyText": "@since.", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r441704524", "createdAt": "2020-06-17T17:19:46Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/document/DocumentPropertiesJsonReader.java", "diffHunk": "@@ -93,6 +92,8 @@\n \n     public static final String DEFAULT_SCHEMA_NAME = \"DEFAULT_SCHEMA_NAME\";\n \n+    public static final String FALLBACK_RESOLVER = \"resolver.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkxODI2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-directory/nuxeo-platform-directory-types-contrib/src/main/resources/directoryschema/xvocabulary.xsd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyMTo1NlrOGlPlEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoyODowMlrOGmU0Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNTc0NQ==", "bodyText": "Is this needed?", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r441705745", "createdAt": "2020-06-17T17:21:56Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-directory/nuxeo-platform-directory-types-contrib/src/main/resources/directoryschema/xvocabulary.xsd", "diffHunk": "@@ -3,6 +3,7 @@\n <xs:schema\n     targetNamespace=\"http://www.nuxeo.org/ecm/schemas/xvocabulary\"\n     xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n+    xmlns:ref=\"http://www.nuxeo.org/ecm/schemas/core/external-references/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDE1MQ==", "bodyText": "Noop", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r442840151", "createdAt": "2020-06-19T13:28:02Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-directory/nuxeo-platform-directory-types-contrib/src/main/resources/directoryschema/xvocabulary.xsd", "diffHunk": "@@ -3,6 +3,7 @@\n <xs:schema\n     targetNamespace=\"http://www.nuxeo.org/ecm/schemas/xvocabulary\"\n     xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n+    xmlns:ref=\"http://www.nuxeo.org/ecm/schemas/core/external-references/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNTc0NQ=="}, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTkzMjk5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-document-routing/nuxeo-routing-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/WorkflowEndpointTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzoyNTo1OVrOGlPukA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoyODozNFrOGmU1Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwODE3Ng==", "bodyText": "Is there any check we can add to validate that the assignees is administrators?", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r441708176", "createdAt": "2020-06-17T17:25:59Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-document-routing/nuxeo-routing-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/WorkflowEndpointTest.java", "diffHunk": "@@ -1396,6 +1404,45 @@ public void testRejectTaskInSubWorkflow() throws IOException {\n \n     }\n \n+    /*\n+     * NXP-29171\n+     */\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.restapi.server.routing.test:test-specific-task-request-unmarshalling.xml\")\n+    public void testSpecificTaskRequestWithFetchedGroup() throws IOException {\n+        DocumentModel note = RestServerInit.getNote(0, session);\n+\n+        // create workflow as Administrator\n+        String workflowInstanceId;\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/workflow\",\n+                getCreateAndStartWorkflowBodyContent(\"confirm\", singletonList(note.getId())))) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            workflowInstanceId = node.get(\"id\").textValue();\n+        }\n+\n+        // get tasks for child WF\n+        String taskId;\n+        try (CloseableClientResponse response = getResponse(RequestType.GET,\n+                \"/id/\" + note.getId() + \"/@\" + WorkflowAdapter.NAME + \"/\" + workflowInstanceId + \"/task\")) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(1, node.get(\"entries\").size());\n+            taskId = node.get(\"entries\").get(0).get(\"id\").textValue();\n+        }\n+\n+        NuxeoGroup group = userManager.getGroup(\"administrators\");\n+\n+        String groupJson = MarshallerHelper.objectToJson(group, RenderingContext.CtxBuilder.get());\n+        String body = String.format(\"{\\\"entity-type\\\":\\\"task\\\", \\\"id\\\":\\\"%s\\\", \\\"variables\\\":{\\\"assignees\\\":[%s]}}\",\n+                taskId, groupJson);\n+        // assign it with a fetched entity\n+        try (CloseableClientResponse response = getResponse(RequestType.PUT, \"/task/\" + taskId + \"/confirm\", body)) {\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDM4Nw==", "bodyText": "Of course, good idea \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r442840387", "createdAt": "2020-06-19T13:28:34Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-document-routing/nuxeo-routing-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/WorkflowEndpointTest.java", "diffHunk": "@@ -1396,6 +1404,45 @@ public void testRejectTaskInSubWorkflow() throws IOException {\n \n     }\n \n+    /*\n+     * NXP-29171\n+     */\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.restapi.server.routing.test:test-specific-task-request-unmarshalling.xml\")\n+    public void testSpecificTaskRequestWithFetchedGroup() throws IOException {\n+        DocumentModel note = RestServerInit.getNote(0, session);\n+\n+        // create workflow as Administrator\n+        String workflowInstanceId;\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/workflow\",\n+                getCreateAndStartWorkflowBodyContent(\"confirm\", singletonList(note.getId())))) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            workflowInstanceId = node.get(\"id\").textValue();\n+        }\n+\n+        // get tasks for child WF\n+        String taskId;\n+        try (CloseableClientResponse response = getResponse(RequestType.GET,\n+                \"/id/\" + note.getId() + \"/@\" + WorkflowAdapter.NAME + \"/\" + workflowInstanceId + \"/task\")) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(1, node.get(\"entries\").size());\n+            taskId = node.get(\"entries\").get(0).get(\"id\").textValue();\n+        }\n+\n+        NuxeoGroup group = userManager.getGroup(\"administrators\");\n+\n+        String groupJson = MarshallerHelper.objectToJson(group, RenderingContext.CtxBuilder.get());\n+        String body = String.format(\"{\\\"entity-type\\\":\\\"task\\\", \\\"id\\\":\\\"%s\\\", \\\"variables\\\":{\\\"assignees\\\":[%s]}}\",\n+                taskId, groupJson);\n+        // assign it with a fetched entity\n+        try (CloseableClientResponse response = getResponse(RequestType.PUT, \"/task/\" + taskId + \"/confirm\", body)) {\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwODE3Ng=="}, "originalCommit": {"oid": "398fa04bf3558f1d6f81d7919e116def1b4a28f5"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mjk3NDAzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-document-routing/nuxeo-routing-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/WorkflowEndpointTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTozNDowOVrOGm5GCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTozNDowOVrOGm5GCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzNDUwNA==", "bodyText": "Format commit?", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r443434504", "createdAt": "2020-06-22T09:34:09Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-document-routing/nuxeo-routing-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/WorkflowEndpointTest.java", "diffHunk": "@@ -425,7 +432,7 @@ public void testTerminateTaskPermissions()  throws IOException {\n         try (CloseableClientResponse response = getResponse(RequestType.GET, \"/id/\" + note.getId(), headers)) {\n             JsonNode node = mapper.readTree(response.getEntityInputStream());\n             ArrayNode runnableWorkflowModels = (ArrayNode) node.get(RestConstants.CONTRIBUTOR_CTX_PARAMETERS)\n-                    .get(RunnableWorkflowJsonEnricher.NAME);\n+                                                               .get(RunnableWorkflowJsonEnricher.NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511b80a6276d800ccfaba516af29989b1ea25035"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mjk3NDYzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-document-routing/nuxeo-routing-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/WorkflowEndpointTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTozNDoyMFrOGm5GcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTozNDoyMFrOGm5GcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzNDYwOA==", "bodyText": "Format commit?", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r443434608", "createdAt": "2020-06-22T09:34:20Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-document-routing/nuxeo-routing-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/WorkflowEndpointTest.java", "diffHunk": "@@ -1099,8 +1106,8 @@ public void testWorkflowCleanUp() throws Exception {\n      */\n     @Test\n     public void testWorkflowCleanUpDisabling() throws Exception {\n-        Framework.getProperties().put(DocumentRoutingWorkflowInstancesCleanup.CLEANUP_WORKFLOW_INSTANCES_PROPERTY,\n-                \"true\");\n+        Framework.getProperties()\n+                 .put(DocumentRoutingWorkflowInstancesCleanup.CLEANUP_WORKFLOW_INSTANCES_PROPERTY, \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511b80a6276d800ccfaba516af29989b1ea25035"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mjk3NjAyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-document-routing/nuxeo-routing-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/WorkflowEndpointTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTozNDo0MlrOGm5HTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwOTozNDo0MlrOGm5HTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzNDgzMQ==", "bodyText": "Format commit?", "url": "https://github.com/nuxeo/nuxeo/pull/4155#discussion_r443434831", "createdAt": "2020-06-22T09:34:42Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-document-routing/nuxeo-routing-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/WorkflowEndpointTest.java", "diffHunk": "@@ -1151,9 +1158,10 @@ public void testTaskWithoutWorkflowInstance() throws IOException {\n         DocumentModel note = RestServerInit.getNote(0, session);\n \n         // Create a task not related to a workflow instance\n-        List<Task> tasks = Framework.getService(TaskService.class).createTask(session,\n-                session.getPrincipal(), note, \"testNoWorkflowTask\",\n-                singletonList(\"user:Administrator\"), false, null, null, null, Collections.emptyMap(), null);\n+        List<Task> tasks = Framework.getService(TaskService.class)\n+                                    .createTask(session, session.getPrincipal(), note, \"testNoWorkflowTask\",\n+                                            singletonList(\"user:Administrator\"), false, null, null, null,\n+                                            Collections.emptyMap(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511b80a6276d800ccfaba516af29989b1ea25035"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4113, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}