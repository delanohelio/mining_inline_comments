{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NzU4NjU3", "number": 3642, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo1MzowNVrODVojGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTowMDozMlrODVoofQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDExMDM0OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DocumentBrowsingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo1MzowNVrOFZ9uwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMjo1NzozMVrOFa4oZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3MDExMw==", "bodyText": "i don't remember if we privilege the using of doc.setProperty() instead of doc.setPropertyValue() i asked this question because i think we can replace with:\n        doc.setPropertyValue(\"dv:complexWithoutDefault/foo\", \"val1\");\n        doc.setPropertyValue(\"dv:complexWithoutDefault/bar\", \"val2\");\n\nas they did on the existing tests instead of the creation Map...", "url": "https://github.com/nuxeo/nuxeo/pull/3642#discussion_r362770113", "createdAt": "2020-01-03T10:53:05Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DocumentBrowsingTest.java", "diffHunk": "@@ -487,10 +489,85 @@ public void itCanSetArrayPropertyToNull() throws IOException {\n             // Then the document is updated\n             fetchInvalidations();\n             doc = session.getDocument(doc.getRef());\n+            // ArrayProperty returns null whenever is empty or null\n             assertNull(doc.getPropertyValue(\"dc:subjects\"));\n         }\n     }\n \n+    /*\n+     * NXP-28433\n+     */\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.restapi.server:test-defaultvalue-docTypes.xml\")\n+    public void itCanSetArrayPropertyOfComplexToEmpty() throws IOException {\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"myDocument\", \"DocDefaultValue\");\n+        Map<String, String> complex = new HashMap<>();\n+        complex.put(\"foo\", \"val1\");\n+        complex.put(\"bar\", \"val2\");\n+        doc.setProperty(\"defaultvalue\", \"multiComplexWithoutDefault\", Collections.singletonList(complex));\n+        doc = session.createDocument(doc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzczNTE0Mw==", "bodyText": "This is not the same type than the example you pasted. Here we have a list of complex, I use the setProperty method because other one needs a Serializable which force us to cast the thing, I don't like that.", "url": "https://github.com/nuxeo/nuxeo/pull/3642#discussion_r363735143", "createdAt": "2020-01-07T12:57:31Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DocumentBrowsingTest.java", "diffHunk": "@@ -487,10 +489,85 @@ public void itCanSetArrayPropertyToNull() throws IOException {\n             // Then the document is updated\n             fetchInvalidations();\n             doc = session.getDocument(doc.getRef());\n+            // ArrayProperty returns null whenever is empty or null\n             assertNull(doc.getPropertyValue(\"dc:subjects\"));\n         }\n     }\n \n+    /*\n+     * NXP-28433\n+     */\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.restapi.server:test-defaultvalue-docTypes.xml\")\n+    public void itCanSetArrayPropertyOfComplexToEmpty() throws IOException {\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"myDocument\", \"DocDefaultValue\");\n+        Map<String, String> complex = new HashMap<>();\n+        complex.put(\"foo\", \"val1\");\n+        complex.put(\"bar\", \"val2\");\n+        doc.setProperty(\"defaultvalue\", \"multiComplexWithoutDefault\", Collections.singletonList(complex));\n+        doc = session.createDocument(doc);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3MDExMw=="}, "originalCommit": {"oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDExNTAzOnYy", "diffSide": "RIGHT", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DocumentBrowsingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo1NTozMVrOFZ9xcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMzowMDoyN1rOFa4s0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3MDgwMQ==", "bodyText": "i am wondering what if we extract the main treatment of the two test as they check the same things the main difference is in a case we pass a null and an other [] but at the end we have an empty array.", "url": "https://github.com/nuxeo/nuxeo/pull/3642#discussion_r362770801", "createdAt": "2020-01-03T10:55:31Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DocumentBrowsingTest.java", "diffHunk": "@@ -487,10 +489,85 @@ public void itCanSetArrayPropertyToNull() throws IOException {\n             // Then the document is updated\n             fetchInvalidations();\n             doc = session.getDocument(doc.getRef());\n+            // ArrayProperty returns null whenever is empty or null\n             assertNull(doc.getPropertyValue(\"dc:subjects\"));\n         }\n     }\n \n+    /*\n+     * NXP-28433\n+     */\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.restapi.server:test-defaultvalue-docTypes.xml\")\n+    public void itCanSetArrayPropertyOfComplexToEmpty() throws IOException {\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"myDocument\", \"DocDefaultValue\");\n+        Map<String, String> complex = new HashMap<>();\n+        complex.put(\"foo\", \"val1\");\n+        complex.put(\"bar\", \"val2\");\n+        doc.setProperty(\"defaultvalue\", \"multiComplexWithoutDefault\", Collections.singletonList(complex));\n+        doc = session.createDocument(doc);\n+        fetchInvalidations();\n+\n+        try (CloseableClientResponse response = getResponse(RequestType.PUT, \"id/\" + doc.getId(),\n+                \"{\\\"entity-type\\\":\\\"document\\\",\\\"properties\\\":{\\\"dv:multiComplexWithoutDefault\\\":[]}}\",\n+                Collections.singletonMap(\"X-NXDocumentProperties\", \"defaultvalue\"))) {\n+\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            JsonNode jsonProperties = node.get(\"properties\");\n+            assertNotNull(jsonProperties);\n+            JsonNode jsonMultiComplex = jsonProperties.get(\"dv:multiComplexWithoutDefault\");\n+            assertNotNull(jsonMultiComplex);\n+            assertTrue(jsonMultiComplex.isArray());\n+            assertEquals(0, jsonMultiComplex.size());\n+\n+            // Then the document is updated\n+            fetchInvalidations();\n+            doc = session.getDocument(doc.getRef());\n+            // ListProperty returns an empty List whenever is empty or null\n+            Serializable multiComplex = doc.getPropertyValue(\"dv:multiComplexWithoutDefault\");\n+            assertTrue(multiComplex instanceof List);\n+            assertTrue(((List<?>) multiComplex).isEmpty());\n+        }\n+    }\n+\n+    /*\n+     * NXP-28433\n+     */\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.restapi.server:test-defaultvalue-docTypes.xml\")\n+    public void itCanSetArrayPropertyOfComplexToNull() throws IOException {\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"myDocument\", \"DocDefaultValue\");\n+        Map<String, String> complex = new HashMap<>();\n+        complex.put(\"foo\", \"val1\");\n+        complex.put(\"bar\", \"val2\");\n+        doc.setProperty(\"defaultvalue\", \"multiComplexWithoutDefault\", Collections.singletonList(complex));\n+        doc = session.createDocument(doc);\n+        fetchInvalidations();\n+\n+        try (CloseableClientResponse response = getResponse(RequestType.PUT, \"id/\" + doc.getId(),\n+                \"{\\\"entity-type\\\":\\\"document\\\",\\\"properties\\\":{\\\"dv:multiComplexWithoutDefault\\\":null}}\",\n+                Collections.singletonMap(\"X-NXDocumentProperties\", \"defaultvalue\"))) {\n+\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            JsonNode jsonProperties = node.get(\"properties\");\n+            assertNotNull(jsonProperties);\n+            JsonNode jsonMultiComplex = jsonProperties.get(\"dv:multiComplexWithoutDefault\");\n+            assertNotNull(jsonMultiComplex);\n+            assertTrue(jsonMultiComplex.isArray());\n+            assertEquals(0, jsonMultiComplex.size());\n+\n+            // Then the document is updated\n+            fetchInvalidations();\n+            doc = session.getDocument(doc.getRef());\n+            // ListProperty returns an empty List whenever is empty or null\n+            Serializable multiComplex = doc.getPropertyValue(\"dv:multiComplexWithoutDefault\");\n+            assertTrue(multiComplex instanceof List);\n+            assertTrue(((List<?>) multiComplex).isEmpty());\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzczNjI3Mw==", "bodyText": "here we end with a list and not an array regarding the other test which is array. I don't see the point to have a method for that, I think it increases complexity with no real advantage and, in such case, I prefer to have the complet test in front of me when reading than having to navigate in the test code to find what it does.", "url": "https://github.com/nuxeo/nuxeo/pull/3642#discussion_r363736273", "createdAt": "2020-01-07T13:00:27Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DocumentBrowsingTest.java", "diffHunk": "@@ -487,10 +489,85 @@ public void itCanSetArrayPropertyToNull() throws IOException {\n             // Then the document is updated\n             fetchInvalidations();\n             doc = session.getDocument(doc.getRef());\n+            // ArrayProperty returns null whenever is empty or null\n             assertNull(doc.getPropertyValue(\"dc:subjects\"));\n         }\n     }\n \n+    /*\n+     * NXP-28433\n+     */\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.restapi.server:test-defaultvalue-docTypes.xml\")\n+    public void itCanSetArrayPropertyOfComplexToEmpty() throws IOException {\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"myDocument\", \"DocDefaultValue\");\n+        Map<String, String> complex = new HashMap<>();\n+        complex.put(\"foo\", \"val1\");\n+        complex.put(\"bar\", \"val2\");\n+        doc.setProperty(\"defaultvalue\", \"multiComplexWithoutDefault\", Collections.singletonList(complex));\n+        doc = session.createDocument(doc);\n+        fetchInvalidations();\n+\n+        try (CloseableClientResponse response = getResponse(RequestType.PUT, \"id/\" + doc.getId(),\n+                \"{\\\"entity-type\\\":\\\"document\\\",\\\"properties\\\":{\\\"dv:multiComplexWithoutDefault\\\":[]}}\",\n+                Collections.singletonMap(\"X-NXDocumentProperties\", \"defaultvalue\"))) {\n+\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            JsonNode jsonProperties = node.get(\"properties\");\n+            assertNotNull(jsonProperties);\n+            JsonNode jsonMultiComplex = jsonProperties.get(\"dv:multiComplexWithoutDefault\");\n+            assertNotNull(jsonMultiComplex);\n+            assertTrue(jsonMultiComplex.isArray());\n+            assertEquals(0, jsonMultiComplex.size());\n+\n+            // Then the document is updated\n+            fetchInvalidations();\n+            doc = session.getDocument(doc.getRef());\n+            // ListProperty returns an empty List whenever is empty or null\n+            Serializable multiComplex = doc.getPropertyValue(\"dv:multiComplexWithoutDefault\");\n+            assertTrue(multiComplex instanceof List);\n+            assertTrue(((List<?>) multiComplex).isEmpty());\n+        }\n+    }\n+\n+    /*\n+     * NXP-28433\n+     */\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.restapi.server:test-defaultvalue-docTypes.xml\")\n+    public void itCanSetArrayPropertyOfComplexToNull() throws IOException {\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"myDocument\", \"DocDefaultValue\");\n+        Map<String, String> complex = new HashMap<>();\n+        complex.put(\"foo\", \"val1\");\n+        complex.put(\"bar\", \"val2\");\n+        doc.setProperty(\"defaultvalue\", \"multiComplexWithoutDefault\", Collections.singletonList(complex));\n+        doc = session.createDocument(doc);\n+        fetchInvalidations();\n+\n+        try (CloseableClientResponse response = getResponse(RequestType.PUT, \"id/\" + doc.getId(),\n+                \"{\\\"entity-type\\\":\\\"document\\\",\\\"properties\\\":{\\\"dv:multiComplexWithoutDefault\\\":null}}\",\n+                Collections.singletonMap(\"X-NXDocumentProperties\", \"defaultvalue\"))) {\n+\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            JsonNode jsonProperties = node.get(\"properties\");\n+            assertNotNull(jsonProperties);\n+            JsonNode jsonMultiComplex = jsonProperties.get(\"dv:multiComplexWithoutDefault\");\n+            assertNotNull(jsonMultiComplex);\n+            assertTrue(jsonMultiComplex.isArray());\n+            assertEquals(0, jsonMultiComplex.size());\n+\n+            // Then the document is updated\n+            fetchInvalidations();\n+            doc = session.getDocument(doc.getRef());\n+            // ListProperty returns an empty List whenever is empty or null\n+            Serializable multiComplex = doc.getPropertyValue(\"dv:multiComplexWithoutDefault\");\n+            assertTrue(multiComplex instanceof List);\n+            assertTrue(((List<?>) multiComplex).isEmpty());\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3MDgwMQ=="}, "originalCommit": {"oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDEyNDEzOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/model/impl/ListProperty.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTowMDozMlrOFZ92wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDoyNjoyMVrOFbSnRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3MjE2Mg==", "bodyText": "i am wondering about the comment  call #remove(Property) which set isModified flag you want to call remove(p); or some thing else. and it can be replaced  temp.forEach(this::remove); but i think this is a cleanup purpose :) and we don't want it on backport", "url": "https://github.com/nuxeo/nuxeo/pull/3642#discussion_r362772162", "createdAt": "2020-01-03T11:00:32Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/model/impl/ListProperty.java", "diffHunk": "@@ -243,7 +243,11 @@ public void setValue(Object value) throws PropertyException {\n         if (value == null) {\n             List<Property> temp = new ArrayList<Property>(children);\n             for (Property p : temp) { // remove all children\n-                p.remove();\n+                p.remove(); // call #remove(Property) which set isModified flag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE2MDgzNw==", "bodyText": "This is because under the hood this will call org.nuxeo.ecm.core.api.model.impl.AbstractProperty.remove()\nThis method will call the parent of the prop (the list, and make a call to remove(Property) on line 138", "url": "https://github.com/nuxeo/nuxeo/pull/3642#discussion_r364160837", "createdAt": "2020-01-08T10:26:21Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/model/impl/ListProperty.java", "diffHunk": "@@ -243,7 +243,11 @@ public void setValue(Object value) throws PropertyException {\n         if (value == null) {\n             List<Property> temp = new ArrayList<Property>(children);\n             for (Property p : temp) { // remove all children\n-                p.remove();\n+                p.remove(); // call #remove(Property) which set isModified flag", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3MjE2Mg=="}, "originalCommit": {"oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4305, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}