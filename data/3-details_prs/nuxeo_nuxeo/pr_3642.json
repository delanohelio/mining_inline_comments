{
  "data": {
    "repository": {
      "pullRequest": {
        "id": "MDExOlB1bGxSZXF1ZXN0MzU4NzU4NjU3",
        "number": 3642,
        "title": "10.10-HF/fix-NXP-28433-multi-complex-nullifying",
        "bodyText": "PR created from https://qa2.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-kleturc-10.10/52/",
        "createdAt": "2020-01-02T18:59:38Z",
        "url": "https://github.com/nuxeo/nuxeo/pull/3642",
        "merged": true,
        "mergeCommit": {
          "oid": "a58263abea542ba60012e505ba50d1b9dcdf03f6"
        },
        "closed": true,
        "closedAt": "2020-01-08T15:37:43Z",
        "author": {
          "login": "nuxeojenkins"
        },
        "timelineItems": {
          "totalCount": 8,
          "pageInfo": {
            "startCursor": "Y3Vyc29yOnYyOpPPAAABb2br4CAH2gAyMzU4NzU4NjU3OjRmMGM3YzFiZGFlOWE3YzNjOGE2ZjQ1NTI3Yjk1ZDI0MzE2YTAzM2M=",
            "endCursor": "Y3Vyc29yOnYyOpPPAAABb4Sw__AFqTMzOTc3MTMxMQ==",
            "hasNextPage": false,
            "hasPreviousPage": false
          },
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c",
                "author": {
                  "user": {
                    "login": "kevinleturc",
                    "name": "Kevin Leturc"
                  }
                },
                "url": "https://github.com/nuxeo/nuxeo/commit/4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c",
                "committedDate": "2020-01-02T15:42:12Z",
                "message": "NXP-28433: Fix multi complex nullifying through REST"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MDMwNDQ1",
              "url": "https://github.com/nuxeo/nuxeo/pull/3642#pullrequestreview-338030445",
              "createdAt": "2020-01-03T10:53:05Z",
              "commit": {
                "oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"
              },
              "state": "COMMENTED",
              "comments": {
                "totalCount": 1,
                "pageInfo": {
                  "startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo1MzowNVrOFZ9uwQ==",
                  "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo1MzowNVrOFZ9uwQ==",
                  "hasNextPage": false,
                  "hasPreviousPage": false
                },
                "nodes": [
                  {
                    "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3MDExMw==",
                    "bodyText": "i don't remember if we privilege the using of doc.setProperty() instead of doc.setPropertyValue() i asked this question because i think we can replace with:\n        doc.setPropertyValue(\"dv:complexWithoutDefault/foo\", \"val1\");\n        doc.setPropertyValue(\"dv:complexWithoutDefault/bar\", \"val2\");\n\nas they did on the existing tests instead of the creation Map...",
                    "url": "https://github.com/nuxeo/nuxeo/pull/3642#discussion_r362770113",
                    "createdAt": "2020-01-03T10:53:05Z",
                    "author": {
                      "login": "RSalem07"
                    },
                    "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DocumentBrowsingTest.java",
                    "diffHunk": "@@ -487,10 +489,85 @@ public void itCanSetArrayPropertyToNull() throws IOException {\n             // Then the document is updated\n             fetchInvalidations();\n             doc = session.getDocument(doc.getRef());\n+            // ArrayProperty returns null whenever is empty or null\n             assertNull(doc.getPropertyValue(\"dc:subjects\"));\n         }\n     }\n \n+    /*\n+     * NXP-28433\n+     */\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.restapi.server:test-defaultvalue-docTypes.xml\")\n+    public void itCanSetArrayPropertyOfComplexToEmpty() throws IOException {\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"myDocument\", \"DocDefaultValue\");\n+        Map<String, String> complex = new HashMap<>();\n+        complex.put(\"foo\", \"val1\");\n+        complex.put(\"bar\", \"val2\");\n+        doc.setProperty(\"defaultvalue\", \"multiComplexWithoutDefault\", Collections.singletonList(complex));\n+        doc = session.createDocument(doc);",
                    "state": "SUBMITTED",
                    "replyTo": null,
                    "originalCommit": {
                      "oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"
                    },
                    "originalPosition": 36
                  }
                ]
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MDMxMjk3",
              "url": "https://github.com/nuxeo/nuxeo/pull/3642#pullrequestreview-338031297",
              "createdAt": "2020-01-03T10:55:31Z",
              "commit": {
                "oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"
              },
              "state": "COMMENTED",
              "comments": {
                "totalCount": 1,
                "pageInfo": {
                  "startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo1NTozMVrOFZ9xcQ==",
                  "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo1NTozMVrOFZ9xcQ==",
                  "hasNextPage": false,
                  "hasPreviousPage": false
                },
                "nodes": [
                  {
                    "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3MDgwMQ==",
                    "bodyText": "i am wondering what if we extract the main treatment of the two test as they check the same things the main difference is in a case we pass a null and an other [] but at the end we have an empty array.",
                    "url": "https://github.com/nuxeo/nuxeo/pull/3642#discussion_r362770801",
                    "createdAt": "2020-01-03T10:55:31Z",
                    "author": {
                      "login": "RSalem07"
                    },
                    "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/DocumentBrowsingTest.java",
                    "diffHunk": "@@ -487,10 +489,85 @@ public void itCanSetArrayPropertyToNull() throws IOException {\n             // Then the document is updated\n             fetchInvalidations();\n             doc = session.getDocument(doc.getRef());\n+            // ArrayProperty returns null whenever is empty or null\n             assertNull(doc.getPropertyValue(\"dc:subjects\"));\n         }\n     }\n \n+    /*\n+     * NXP-28433\n+     */\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.restapi.server:test-defaultvalue-docTypes.xml\")\n+    public void itCanSetArrayPropertyOfComplexToEmpty() throws IOException {\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"myDocument\", \"DocDefaultValue\");\n+        Map<String, String> complex = new HashMap<>();\n+        complex.put(\"foo\", \"val1\");\n+        complex.put(\"bar\", \"val2\");\n+        doc.setProperty(\"defaultvalue\", \"multiComplexWithoutDefault\", Collections.singletonList(complex));\n+        doc = session.createDocument(doc);\n+        fetchInvalidations();\n+\n+        try (CloseableClientResponse response = getResponse(RequestType.PUT, \"id/\" + doc.getId(),\n+                \"{\\\"entity-type\\\":\\\"document\\\",\\\"properties\\\":{\\\"dv:multiComplexWithoutDefault\\\":[]}}\",\n+                Collections.singletonMap(\"X-NXDocumentProperties\", \"defaultvalue\"))) {\n+\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            JsonNode jsonProperties = node.get(\"properties\");\n+            assertNotNull(jsonProperties);\n+            JsonNode jsonMultiComplex = jsonProperties.get(\"dv:multiComplexWithoutDefault\");\n+            assertNotNull(jsonMultiComplex);\n+            assertTrue(jsonMultiComplex.isArray());\n+            assertEquals(0, jsonMultiComplex.size());\n+\n+            // Then the document is updated\n+            fetchInvalidations();\n+            doc = session.getDocument(doc.getRef());\n+            // ListProperty returns an empty List whenever is empty or null\n+            Serializable multiComplex = doc.getPropertyValue(\"dv:multiComplexWithoutDefault\");\n+            assertTrue(multiComplex instanceof List);\n+            assertTrue(((List<?>) multiComplex).isEmpty());\n+        }\n+    }\n+\n+    /*\n+     * NXP-28433\n+     */\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.restapi.server:test-defaultvalue-docTypes.xml\")\n+    public void itCanSetArrayPropertyOfComplexToNull() throws IOException {\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"myDocument\", \"DocDefaultValue\");\n+        Map<String, String> complex = new HashMap<>();\n+        complex.put(\"foo\", \"val1\");\n+        complex.put(\"bar\", \"val2\");\n+        doc.setProperty(\"defaultvalue\", \"multiComplexWithoutDefault\", Collections.singletonList(complex));\n+        doc = session.createDocument(doc);\n+        fetchInvalidations();\n+\n+        try (CloseableClientResponse response = getResponse(RequestType.PUT, \"id/\" + doc.getId(),\n+                \"{\\\"entity-type\\\":\\\"document\\\",\\\"properties\\\":{\\\"dv:multiComplexWithoutDefault\\\":null}}\",\n+                Collections.singletonMap(\"X-NXDocumentProperties\", \"defaultvalue\"))) {\n+\n+            assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            JsonNode jsonProperties = node.get(\"properties\");\n+            assertNotNull(jsonProperties);\n+            JsonNode jsonMultiComplex = jsonProperties.get(\"dv:multiComplexWithoutDefault\");\n+            assertNotNull(jsonMultiComplex);\n+            assertTrue(jsonMultiComplex.isArray());\n+            assertEquals(0, jsonMultiComplex.size());\n+\n+            // Then the document is updated\n+            fetchInvalidations();\n+            doc = session.getDocument(doc.getRef());\n+            // ListProperty returns an empty List whenever is empty or null\n+            Serializable multiComplex = doc.getPropertyValue(\"dv:multiComplexWithoutDefault\");\n+            assertTrue(multiComplex instanceof List);\n+            assertTrue(((List<?>) multiComplex).isEmpty());\n+        }\n+    }\n+",
                    "state": "SUBMITTED",
                    "replyTo": null,
                    "originalCommit": {
                      "oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"
                    },
                    "originalPosition": 98
                  }
                ]
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MDMzMDUz",
              "url": "https://github.com/nuxeo/nuxeo/pull/3642#pullrequestreview-338033053",
              "createdAt": "2020-01-03T11:00:31Z",
              "commit": {
                "oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"
              },
              "state": "COMMENTED",
              "comments": {
                "totalCount": 1,
                "pageInfo": {
                  "startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTowMDozMlrOFZ92wg==",
                  "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTowMDozMlrOFZ92wg==",
                  "hasNextPage": false,
                  "hasPreviousPage": false
                },
                "nodes": [
                  {
                    "id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3MjE2Mg==",
                    "bodyText": "i am wondering about the comment  call #remove(Property) which set isModified flag you want to call remove(p); or some thing else. and it can be replaced  temp.forEach(this::remove); but i think this is a cleanup purpose :) and we don't want it on backport",
                    "url": "https://github.com/nuxeo/nuxeo/pull/3642#discussion_r362772162",
                    "createdAt": "2020-01-03T11:00:32Z",
                    "author": {
                      "login": "RSalem07"
                    },
                    "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/model/impl/ListProperty.java",
                    "diffHunk": "@@ -243,7 +243,11 @@ public void setValue(Object value) throws PropertyException {\n         if (value == null) {\n             List<Property> temp = new ArrayList<Property>(children);\n             for (Property p : temp) { // remove all children\n-                p.remove();\n+                p.remove(); // call #remove(Property) which set isModified flag",
                    "state": "SUBMITTED",
                    "replyTo": null,
                    "originalCommit": {
                      "oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"
                    },
                    "originalPosition": 5
                  }
                ]
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MDM0ODE1",
              "url": "https://github.com/nuxeo/nuxeo/pull/3642#pullrequestreview-338034815",
              "createdAt": "2020-01-03T11:06:01Z",
              "commit": {
                "oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"
              },
              "state": "COMMENTED",
              "comments": {
                "totalCount": 0,
                "pageInfo": {
                  "startCursor": null,
                  "endCursor": null,
                  "hasNextPage": false,
                  "hasPreviousPage": false
                },
                "nodes": []
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NzU2MzQ1",
              "url": "https://github.com/nuxeo/nuxeo/pull/3642#pullrequestreview-339756345",
              "createdAt": "2020-01-08T10:00:09Z",
              "commit": {
                "oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"
              },
              "state": "APPROVED",
              "comments": {
                "totalCount": 0,
                "pageInfo": {
                  "startCursor": null,
                  "endCursor": null,
                  "hasNextPage": false,
                  "hasPreviousPage": false
                },
                "nodes": []
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NzY3MzEw",
              "url": "https://github.com/nuxeo/nuxeo/pull/3642#pullrequestreview-339767310",
              "createdAt": "2020-01-08T10:19:24Z",
              "commit": {
                "oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"
              },
              "state": "APPROVED",
              "comments": {
                "totalCount": 0,
                "pageInfo": {
                  "startCursor": null,
                  "endCursor": null,
                  "hasNextPage": false,
                  "hasPreviousPage": false
                },
                "nodes": []
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NzcxMzEx",
              "url": "https://github.com/nuxeo/nuxeo/pull/3642#pullrequestreview-339771311",
              "createdAt": "2020-01-08T10:26:30Z",
              "commit": {
                "oid": "4f0c7c1bdae9a7c3c8a6f45527b95d24316a033c"
              },
              "state": "APPROVED",
              "comments": {
                "totalCount": 0,
                "pageInfo": {
                  "startCursor": null,
                  "endCursor": null,
                  "hasNextPage": false,
                  "hasPreviousPage": false
                },
                "nodes": []
              }
            }
          ]
        }
      }
    },
    "rateLimit": {
      "limit": 5000,
      "remaining": 4869,
      "cost": 1,
      "resetAt": "2021-11-03T18:41:40Z"
    }
  }
}