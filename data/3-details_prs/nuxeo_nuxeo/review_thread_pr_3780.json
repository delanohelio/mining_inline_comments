{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MDA4OTY5", "number": 3780, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxODo1OVrODiV4nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTowNTo0MFrODiXASA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM2NzMzOnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxODo1OVrOFtiKNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoxODo1OVrOFtiKNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4OTkwOA==", "bodyText": "Putting this in a cleanup commit would help reading your changes better", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383289908", "createdAt": "2020-02-24T14:18:59Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -116,29 +121,32 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                 Map<String, Integer> header = csvParser.getHeaderMap();\n                 for (CSVRecord csvRecord : csvParser) {\n                     String type = null;\n-                    String id = null;\n+                    String name = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM3OTg1OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyMjoxM1rOFtiRaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjowODoxOVrOFtmVsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MTc1NQ==", "bodyText": "we do use org.apache.commons.lang3.StringUtils#isBlank(name) to make those checks", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383291755", "createdAt": "2020-02-24T14:22:13Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -116,29 +121,32 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                 Map<String, Integer> header = csvParser.getHeaderMap();\n                 for (CSVRecord csvRecord : csvParser) {\n                     String type = null;\n-                    String id = null;\n+                    String name = null;\n                     Map<String, String> stringValues = new HashMap<>();\n                     for (String headerValue : header.keySet()) {\n                         String lineValue = csvRecord.get(headerValue);\n                         if (\"type\".equalsIgnoreCase(headerValue)) {\n                             type = lineValue;\n-                        } else if (\"id\".equalsIgnoreCase(headerValue)) {\n-                            id = lineValue;\n+                        } else if (\"name\".equalsIgnoreCase(headerValue)) {\n+                            name = lineValue;\n                         } else {\n                             stringValues.put(headerValue, lineValue);\n                         }\n                     }\n \n+                    if (name == null || name.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1ODM4NA==", "bodyText": "switched to StringUtils, thank you", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383358384", "createdAt": "2020-02-24T16:08:19Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -116,29 +121,32 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                 Map<String, Integer> header = csvParser.getHeaderMap();\n                 for (CSVRecord csvRecord : csvParser) {\n                     String type = null;\n-                    String id = null;\n+                    String name = null;\n                     Map<String, String> stringValues = new HashMap<>();\n                     for (String headerValue : header.keySet()) {\n                         String lineValue = csvRecord.get(headerValue);\n                         if (\"type\".equalsIgnoreCase(headerValue)) {\n                             type = lineValue;\n-                        } else if (\"id\".equalsIgnoreCase(headerValue)) {\n-                            id = lineValue;\n+                        } else if (\"name\".equalsIgnoreCase(headerValue)) {\n+                            name = lineValue;\n                         } else {\n                             stringValues.put(headerValue, lineValue);\n                         }\n                     }\n \n+                    if (name == null || name.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MTc1NQ=="}, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM4MjI3OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyMjo1N1rOFtiS7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjowNzo1OVrOFtmVAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MjE0Mw==", "bodyText": "You may want to comment a bit on those new cases ?", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383292143", "createdAt": "2020-02-24T14:22:57Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -164,7 +168,11 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                         String schemaName = null;\n                         String fieldName = null;\n \n-                        if (fname.contains(\":\")) {\n+                        if (fname.equals(ECM_LIFECYCLESTATE)) {\n+                            targetDoc.putContextData(INITIAL_LIFECYCLE_STATE_OPTION_NAME, stringValue);\n+                        } else if (fname.equalsIgnoreCase(\"nxtag:tags\")) {\n+                           targetDoc = addTags(session, targetDoc, stringValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1ODIwOQ==", "bodyText": "added a couple of comments", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383358209", "createdAt": "2020-02-24T16:07:59Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -164,7 +168,11 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                         String schemaName = null;\n                         String fieldName = null;\n \n-                        if (fname.contains(\":\")) {\n+                        if (fname.equals(ECM_LIFECYCLESTATE)) {\n+                            targetDoc.putContextData(INITIAL_LIFECYCLE_STATE_OPTION_NAME, stringValue);\n+                        } else if (fname.equalsIgnoreCase(\"nxtag:tags\")) {\n+                           targetDoc = addTags(session, targetDoc, stringValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MjE0Mw=="}, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM4OTE4OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyNDo0NlrOFtiXJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjowNzo0MFrOFtmUYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MzIyMw==", "bodyText": "Maybe approaching it with an early return mindset could simplify the complexity ? Couldn't find a way to break an if statement so I added a boolean:", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383293223", "createdAt": "2020-02-24T14:24:46Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -241,21 +249,47 @@ protected Serializable getFieldValue(Field field, String stringValue, ZipFile zi\n                 log.warn(String.format(\"Unsupported field type '%s'\", type));\n                 return null;\n             }\n-        } else if (type.isComplexType() && TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n-            ZipEntry blobIndex = zip.getEntry(stringValue);\n-            if (blobIndex != null) {\n-                Blob blob;\n-                try {\n-                    blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n-                } catch (IOException e) {\n-                    throw new NuxeoException(e);\n+        } else if (type.isComplexType()) {\n+            if (TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n+                ZipEntry blobIndex = zip.getEntry(stringValue);\n+                if (blobIndex != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5OTczMg==", "bodyText": "} else if (type.isComplexType()) {\n            boolean returnEarly = true;\n            if (TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n                returnEarly = false;\n            }\n            ZipEntry blobIndex = zip.getEntry(stringValue);\n            if (!returnEarly) {\n                returnEarly = blobIndex == null;\n            }\n            if (!returnEarly) {\n                Blob blob;\n                try {\n                    blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n                } catch (IOException e) {\n                    throw new NuxeoException(e);\n                }\n                blob.setFilename(stringValue);\n                fieldValue = (Serializable) blob;\n            }\n}", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383299732", "createdAt": "2020-02-24T14:35:36Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -241,21 +249,47 @@ protected Serializable getFieldValue(Field field, String stringValue, ZipFile zi\n                 log.warn(String.format(\"Unsupported field type '%s'\", type));\n                 return null;\n             }\n-        } else if (type.isComplexType() && TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n-            ZipEntry blobIndex = zip.getEntry(stringValue);\n-            if (blobIndex != null) {\n-                Blob blob;\n-                try {\n-                    blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n-                } catch (IOException e) {\n-                    throw new NuxeoException(e);\n+        } else if (type.isComplexType()) {\n+            if (TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n+                ZipEntry blobIndex = zip.getEntry(stringValue);\n+                if (blobIndex != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MzIyMw=="}, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1ODA0OQ==", "bodyText": "thanks for the suggestion, added", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383358049", "createdAt": "2020-02-24T16:07:40Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -241,21 +249,47 @@ protected Serializable getFieldValue(Field field, String stringValue, ZipFile zi\n                 log.warn(String.format(\"Unsupported field type '%s'\", type));\n                 return null;\n             }\n-        } else if (type.isComplexType() && TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n-            ZipEntry blobIndex = zip.getEntry(stringValue);\n-            if (blobIndex != null) {\n-                Blob blob;\n-                try {\n-                    blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n-                } catch (IOException e) {\n-                    throw new NuxeoException(e);\n+        } else if (type.isComplexType()) {\n+            if (TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n+                ZipEntry blobIndex = zip.getEntry(stringValue);\n+                if (blobIndex != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MzIyMw=="}, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzUwMTY4OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDo1MzozMFrOFtjbjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjowNzoyN1rOFtmT3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMDczMw==", "bodyText": "we do protected at most", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383310733", "createdAt": "2020-02-24T14:53:30Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -241,21 +249,47 @@ protected Serializable getFieldValue(Field field, String stringValue, ZipFile zi\n                 log.warn(String.format(\"Unsupported field type '%s'\", type));\n                 return null;\n             }\n-        } else if (type.isComplexType() && TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n-            ZipEntry blobIndex = zip.getEntry(stringValue);\n-            if (blobIndex != null) {\n-                Blob blob;\n-                try {\n-                    blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n-                } catch (IOException e) {\n-                    throw new NuxeoException(e);\n+        } else if (type.isComplexType()) {\n+            if (TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n+                ZipEntry blobIndex = zip.getEntry(stringValue);\n+                if (blobIndex != null) {\n+                    Blob blob;\n+                    try {\n+                        blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n+                    } catch (IOException e) {\n+                        throw new NuxeoException(e);\n+                    }\n+                    blob.setFilename(stringValue);\n+                    fieldValue = (Serializable) blob;\n                 }\n-                blob.setFilename(stringValue);\n-                fieldValue = (Serializable) blob;\n             }\n+            /*\n+             * TODO: Account for other complex fields\n+             */\n+        } else if (type.isListType()) {\n+            Type listFieldType = ((ListType) type).getFieldType();\n+            if (listFieldType.isSimpleType()) {\n+                fieldValue = stringValue.split(\"\\\\|\");\n+            }\n+            /*\n+             * TODO: Complex list.\n+             */\n         }\n \n         return fieldValue;\n     }\n \n+    private DocumentModel addTags(CoreSession session, DocumentModel targetDoc, String tagString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1NzkxNg==", "bodyText": "updated to protected", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383357916", "createdAt": "2020-02-24T16:07:27Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -241,21 +249,47 @@ protected Serializable getFieldValue(Field field, String stringValue, ZipFile zi\n                 log.warn(String.format(\"Unsupported field type '%s'\", type));\n                 return null;\n             }\n-        } else if (type.isComplexType() && TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n-            ZipEntry blobIndex = zip.getEntry(stringValue);\n-            if (blobIndex != null) {\n-                Blob blob;\n-                try {\n-                    blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n-                } catch (IOException e) {\n-                    throw new NuxeoException(e);\n+        } else if (type.isComplexType()) {\n+            if (TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n+                ZipEntry blobIndex = zip.getEntry(stringValue);\n+                if (blobIndex != null) {\n+                    Blob blob;\n+                    try {\n+                        blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n+                    } catch (IOException e) {\n+                        throw new NuxeoException(e);\n+                    }\n+                    blob.setFilename(stringValue);\n+                    fieldValue = (Serializable) blob;\n                 }\n-                blob.setFilename(stringValue);\n-                fieldValue = (Serializable) blob;\n             }\n+            /*\n+             * TODO: Account for other complex fields\n+             */\n+        } else if (type.isListType()) {\n+            Type listFieldType = ((ListType) type).getFieldType();\n+            if (listFieldType.isSimpleType()) {\n+                fieldValue = stringValue.split(\"\\\\|\");\n+            }\n+            /*\n+             * TODO: Complex list.\n+             */\n         }\n \n         return fieldValue;\n     }\n \n+    private DocumentModel addTags(CoreSession session, DocumentModel targetDoc, String tagString) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMDczMw=="}, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzUwMjQ1OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDo1Mzo0MFrOFtjcBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjowNzoxN1rOFtmTcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMDg1NQ==", "bodyText": "Could be (please retest it for yourself if you go with it \ud83d\ude04 )\nprotected DocumentModel addTags(CoreSession session, DocumentModel targetDoc, String tagString) {\n        String[] tagList = tagString.split(\"\\\\|\");\n        String userName = session.getPrincipal().getName();\n        var tags = Arrays.stream(tagList)\n                         .map(s -> Map.of(\"label\", s, \"username\", userName))\n                         .collect(Collectors.toList());\n        targetDoc.setPropertyValue(\"nxtag:tags\", (Serializable) tags);\n        return targetDoc;\n    }", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383310855", "createdAt": "2020-02-24T14:53:40Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -241,21 +249,47 @@ protected Serializable getFieldValue(Field field, String stringValue, ZipFile zi\n                 log.warn(String.format(\"Unsupported field type '%s'\", type));\n                 return null;\n             }\n-        } else if (type.isComplexType() && TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n-            ZipEntry blobIndex = zip.getEntry(stringValue);\n-            if (blobIndex != null) {\n-                Blob blob;\n-                try {\n-                    blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n-                } catch (IOException e) {\n-                    throw new NuxeoException(e);\n+        } else if (type.isComplexType()) {\n+            if (TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n+                ZipEntry blobIndex = zip.getEntry(stringValue);\n+                if (blobIndex != null) {\n+                    Blob blob;\n+                    try {\n+                        blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n+                    } catch (IOException e) {\n+                        throw new NuxeoException(e);\n+                    }\n+                    blob.setFilename(stringValue);\n+                    fieldValue = (Serializable) blob;\n                 }\n-                blob.setFilename(stringValue);\n-                fieldValue = (Serializable) blob;\n             }\n+            /*\n+             * TODO: Account for other complex fields\n+             */\n+        } else if (type.isListType()) {\n+            Type listFieldType = ((ListType) type).getFieldType();\n+            if (listFieldType.isSimpleType()) {\n+                fieldValue = stringValue.split(\"\\\\|\");\n+            }\n+            /*\n+             * TODO: Complex list.\n+             */\n         }\n \n         return fieldValue;\n     }\n \n+    private DocumentModel addTags(CoreSession session, DocumentModel targetDoc, String tagString) {\n+        String[] tagList = tagString.split(\"\\\\|\");\n+        List<Map<String, Serializable>> tags = new ArrayList<>();\n+        for (String tag : tagList) {\n+            Map<String, Serializable> tagMap = new HashMap<>();\n+            tagMap.put(\"label\", tag);\n+            tagMap.put(\"username\", session.getPrincipal().getName());\n+            tags.add(tagMap);\n+        }\n+\n+        targetDoc.setPropertyValue(\"nxtag:tags\", (Serializable) tags);\n+        return targetDoc;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1NzgwOA==", "bodyText": "tested and added this, thank you", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383357808", "createdAt": "2020-02-24T16:07:17Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -241,21 +249,47 @@ protected Serializable getFieldValue(Field field, String stringValue, ZipFile zi\n                 log.warn(String.format(\"Unsupported field type '%s'\", type));\n                 return null;\n             }\n-        } else if (type.isComplexType() && TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n-            ZipEntry blobIndex = zip.getEntry(stringValue);\n-            if (blobIndex != null) {\n-                Blob blob;\n-                try {\n-                    blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n-                } catch (IOException e) {\n-                    throw new NuxeoException(e);\n+        } else if (type.isComplexType()) {\n+            if (TypeConstants.CONTENT.equals(field.getName().getLocalName())) {\n+                ZipEntry blobIndex = zip.getEntry(stringValue);\n+                if (blobIndex != null) {\n+                    Blob blob;\n+                    try {\n+                        blob = Blobs.createBlob(zip.getInputStream(blobIndex));\n+                    } catch (IOException e) {\n+                        throw new NuxeoException(e);\n+                    }\n+                    blob.setFilename(stringValue);\n+                    fieldValue = (Serializable) blob;\n                 }\n-                blob.setFilename(stringValue);\n-                fieldValue = (Serializable) blob;\n             }\n+            /*\n+             * TODO: Account for other complex fields\n+             */\n+        } else if (type.isListType()) {\n+            Type listFieldType = ((ListType) type).getFieldType();\n+            if (listFieldType.isSimpleType()) {\n+                fieldValue = stringValue.split(\"\\\\|\");\n+            }\n+            /*\n+             * TODO: Complex list.\n+             */\n         }\n \n         return fieldValue;\n     }\n \n+    private DocumentModel addTags(CoreSession session, DocumentModel targetDoc, String tagString) {\n+        String[] tagList = tagString.split(\"\\\\|\");\n+        List<Map<String, Serializable>> tags = new ArrayList<>();\n+        for (String tag : tagList) {\n+            Map<String, Serializable> tagMap = new HashMap<>();\n+            tagMap.put(\"label\", tag);\n+            tagMap.put(\"username\", session.getPrincipal().getName());\n+            tags.add(tagMap);\n+        }\n+\n+        targetDoc.setPropertyValue(\"nxtag:tags\", (Serializable) tags);\n+        return targetDoc;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMDg1NQ=="}, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzU1MDgwOnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTowNTo0MFrOFtj5Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTowNTo0MFrOFtj5Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxODM1OQ==", "bodyText": "I couldn't launch the tests because of deploy errors.\nit seems you are introducing a cyclic reference so I couldn't use maven", "url": "https://github.com/nuxeo/nuxeo/pull/3780#discussion_r383318359", "createdAt": "2020-02-24T15:05:40Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/pom.xml", "diffHunk": "@@ -68,6 +68,11 @@\n       <artifactId>nuxeo-platform-dublincore</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.nuxeo.ecm.platform</groupId>\n+      <artifactId>nuxeo-platform-tag-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "261fe043cb591acbc27dd30eb092a6ebec7d98b4"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4273, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}