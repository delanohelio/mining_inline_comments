{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDkxMjU2", "number": 3693, "title": "NXP-28502: Fix permanent deletion of folder containing a large number\u2026", "bodyText": "Need also to make a test with large number of documents to purge", "createdAt": "2020-01-23T17:59:27Z", "url": "https://github.com/nuxeo/nuxeo/pull/3693", "merged": true, "mergeCommit": {"oid": "74f4bd0a878304e3627b199b84ee8dc8dd078af9"}, "closed": true, "closedAt": "2020-02-24T14:50:47Z", "author": {"login": "ThierryCasanova"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9bN62gFqTM0NzgyMDcxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHd3ktAFqTM2MzQwMTI4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODIwNzE1", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347820715", "createdAt": "2020-01-24T09:06:56Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTowNjo1N1rOFhXaMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTowNjo1N1rOFhXaMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzMDg2Ng==", "bodyText": "Checks if child document for a given document are  \"purgeable/untrashable\".\nfor the second line Documents need to be i....you can link the second method directly {@link #canPurgeOrUntrash(DocumentModel, NuxeoPrincipal)}", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370530866", "createdAt": "2020-01-24T09:06:57Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java", "diffHunk": "@@ -84,6 +84,17 @@ default boolean canPurgeOrUntrash(DocumentModel doc, NuxeoPrincipal principal) {\n         return canPurgeOrUntrash(Collections.singletonList(doc), principal);\n     }\n \n+    /**\n+     * Check if trashed child documents from a given parent document are \"purgeable/untrashable\".\n+     * Documents need to be in the trash for this to be true, in addition to the standard permission checks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODIxNDkw", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347821490", "createdAt": "2020-01-24T09:08:35Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTowODozNlrOFhXcaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTowODozNlrOFhXcaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzMTQzMg==", "bodyText": "don't add dot at the end of @param\nfor the return tag you can use:\n @return {@code true} if .......\n<code>true</code> -> {@code}", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370531432", "createdAt": "2020-01-24T09:08:36Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java", "diffHunk": "@@ -84,6 +84,17 @@ default boolean canPurgeOrUntrash(DocumentModel doc, NuxeoPrincipal principal) {\n         return canPurgeOrUntrash(Collections.singletonList(doc), principal);\n     }\n \n+    /**\n+     * Check if trashed child documents from a given parent document are \"purgeable/untrashable\".\n+     * Documents need to be in the trash for this to be true, in addition to the standard permission checks.\n+     * @param parent the parent document.\n+     * @param principal the user.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODI0Mjg0", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347824284", "createdAt": "2020-01-24T09:14:25Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToxNDoyNVrOFhXk8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToxNDoyNVrOFhXk8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzMzYxNg==", "bodyText": "here you don't give enough informations, which method will replace the deprecated once,  CoreSession#query(String) with a limit its not enough because perhaps the called want the total document without using limit. Perhaps just @deprecated since 11.1, not scalable or not used anymore or at least you can propose to replace it by BAF", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370533616", "createdAt": "2020-01-24T09:14:25Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java", "diffHunk": "@@ -167,7 +178,9 @@ default void untrashDocument(DocumentModel doc) {\n      * @param parent The parent document of trash document.\n      * @return All documents in the trash of the current document.\n      * @since 7.1\n+     * @deprecated since 11.1 not scalable (prefer to use directly {@link CoreSession#query(String)} with a limit\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODI0NTk2", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347824596", "createdAt": "2020-01-24T09:15:00Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToxNTowMFrOFhXlxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToxNTowMFrOFhXlxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzMzgyOQ==", "bodyText": "you can replace it @Deprecated(since = \"11.1\", forRemoval = true)", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370533829", "createdAt": "2020-01-24T09:15:00Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/trash/TrashService.java", "diffHunk": "@@ -167,7 +178,9 @@ default void untrashDocument(DocumentModel doc) {\n      * @param parent The parent document of trash document.\n      * @return All documents in the trash of the current document.\n      * @since 7.1\n+     * @deprecated since 11.1 not scalable (prefer to use directly {@link CoreSession#query(String)} with a limit\n      */\n+    @Deprecated(since = \"11.1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODI4OTM0", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347828934", "createdAt": "2020-01-24T09:23:19Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToyMzoxOVrOFhXy8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToyMzoxOVrOFhXy8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNzIwMQ==", "bodyText": "do we need Document and Relation ? as there is no joins, i am not sure how this query will be interpreted.\nfurthermore  can you please give a name field with more context GET_DOCUMENTS_BY_UUID_QUERY or something else", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370537201", "createdAt": "2020-01-24T09:23:19Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java", "diffHunk": "@@ -41,6 +44,8 @@\n  */\n public class RepositoryScroll implements Scroll {\n \n+    public static final String SELECT_DOCUMENTS_IN = \"SELECT * FROM Document, Relation WHERE ecm:uuid IN ('%s')\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODMyMzkz", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347832393", "createdAt": "2020-01-24T09:29:52Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToyOTo1MlrOFhX9hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToyOTo1MlrOFhX9hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzOTkxMA==", "bodyText": "see my comment on 48c62d0#r370538308\nfurthermore i think you can use StaticScroll as you have the list of ids .... you can ask Benoit for more context\nand for more context, you can rewrite this method as below:\n  String inClause = documentIds.stream().collect(Collectors.joining(\"', '\", \"'\", \"'\"))\n        String query = String.format(SELECT_DOCUMENTS_IN, NXQL.ECM_UUID, inClause);\n        return session.query(query);\n\nwhere  SELECT_DOCUMENTS_IN = \"SELECT * FROM Document, Relation WHERE %s IN (%s)\";", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370539910", "createdAt": "2020-01-24T09:29:52Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/RepositoryScroll.java", "diffHunk": "@@ -117,6 +122,19 @@ public void close() {\n         }\n     }\n \n+    /**\n+     * Helper to load a list of documents. Documents without read access or that does not exist are not returned.\n+     * @param session the Core session\n+     * @param documentIds the document Ids' list.\n+     * @return the corresponding DocumentModelList.\n+     */\n+    public static DocumentModelList loadDocuments(CoreSession session, List<String> documentIds) {\n+        if (documentIds == null || documentIds.isEmpty()) {\n+            return new DocumentModelListImpl(0);\n+        }\n+        return session.query(String.format(SELECT_DOCUMENTS_IN, String.join(\"', '\", documentIds)));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODM2MTE5", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347836119", "createdAt": "2020-01-24T09:36:49Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTozNjo0OVrOFhYIrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTozNjo0OVrOFhYIrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0Mjc2NA==", "bodyText": "what do you want to test here:\n\nthat you can purge the folder children\nor purge folder and children\n\ni ask this question depending on you answer the java doc should be update / reworked on getCanEmptyTrash method ...", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370542764", "createdAt": "2020-01-24T09:36:49Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/trash/test/AbstractTestTrashService.java", "diffHunk": "@@ -417,4 +418,18 @@ public void testFollowTransitionBackwardCompatibility() {\n \n     }\n \n+    @Test\n+    public void getCanEmptyTrash() {\n+        createDocuments();\n+        trashService.trashDocument(doc1);\n+        transactionalFeature.nextTransaction();\n+\n+        assertTrue(trashService.getCanEmptyTrash(fold, principal));\n+\n+        trashService.trashDocument(fold);\n+        transactionalFeature.nextTransaction();\n+\n+        assertTrue(trashService.getCanEmptyTrash(fold, principal));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODU1NDE0", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347855414", "createdAt": "2020-01-24T10:11:21Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxMToyMlrOFhZEYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxMToyMlrOFhZEYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1ODA0OA==", "bodyText": "here  calling RespositoryScroll#loadDocuments,  you will not scroll a second time ? is it right\njust make query on the CoreSession#query or extract a method in the TrashService but we should care about what scroll.next() returns i means how the size of the documents list will be, because in some SQL DB there is some limitation when you make IN for example Oracle don't accepts more then 1000 with IN clause , Florent / Benoit can give more feedbacks", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370558048", "createdAt": "2020-01-24T10:11:22Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -112,19 +117,60 @@ public boolean canPurgeOrUntrash(List<DocumentModel> docs, NuxeoPrincipal princi\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true);\n+        TrashInfo info = getInfo(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n+        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+    }\n+\n+    @Override\n+    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n+        String nxql = String.format(TRASHED_QUERY, parent.getId());\n+        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n+                                                     .username(principal.getName())\n+                                                     .repository(parent.getRepositoryName())\n+                                                     .build();\n+        ScrollService service = Framework.getService(ScrollService.class);\n+        boolean canPurge = true;\n+        try (Scroll scroll = service.scroll(request)) {\n+            if (!scroll.hasNext()) {\n+                return false;\n+            }\n+            while (scroll.hasNext() && canPurge) {\n+                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n+                canPurge = canPurgeOrUntrash(documents, principal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODU3OTYw", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347857960", "createdAt": "2020-01-24T10:15:38Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxNTozOFrOFhZMwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxNTozOFrOFhZMwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MDE5NA==", "bodyText": "Return -> replace it by Gets  and\nfor the javadoc on protected method  we can ask the team because i am not sure about the rule, from my point of view it will help us to have the javadoc on protected for nuxeo usage....", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370560194", "createdAt": "2020-01-24T10:15:38Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -112,19 +117,60 @@ public boolean canPurgeOrUntrash(List<DocumentModel> docs, NuxeoPrincipal princi\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true);\n+        TrashInfo info = getInfo(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n+        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+    }\n+\n+    @Override\n+    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n+        String nxql = String.format(TRASHED_QUERY, parent.getId());\n+        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n+                                                     .username(principal.getName())\n+                                                     .repository(parent.getRepositoryName())\n+                                                     .build();\n+        ScrollService service = Framework.getService(ScrollService.class);\n+        boolean canPurge = true;\n+        try (Scroll scroll = service.scroll(request)) {\n+            if (!scroll.hasNext()) {\n+                return false;\n+            }\n+            while (scroll.hasNext() && canPurge) {\n+                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n+                canPurge = canPurgeOrUntrash(documents, principal);\n+            }\n+        }\n+        return canPurge;\n+    }\n+\n+    /**\n+     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n+     * (forbidden, locked ...)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODU5MDk5", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347859099", "createdAt": "2020-01-24T10:17:43Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxNzo0M1rOFhZQXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxNzo0M1rOFhZQXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MTExNw==", "bodyText": "we dont change the protected/public methods signature for backward compatibility just create a new once and call it from the exiting once", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370561117", "createdAt": "2020-01-24T10:17:43Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -112,19 +117,60 @@ public boolean canPurgeOrUntrash(List<DocumentModel> docs, NuxeoPrincipal princi\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true);\n+        TrashInfo info = getInfo(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n+        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+    }\n+\n+    @Override\n+    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n+        String nxql = String.format(TRASHED_QUERY, parent.getId());\n+        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n+                                                     .username(principal.getName())\n+                                                     .repository(parent.getRepositoryName())\n+                                                     .build();\n+        ScrollService service = Framework.getService(ScrollService.class);\n+        boolean canPurge = true;\n+        try (Scroll scroll = service.scroll(request)) {\n+            if (!scroll.hasNext()) {\n+                return false;\n+            }\n+            while (scroll.hasNext() && canPurge) {\n+                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n+                canPurge = canPurgeOrUntrash(documents, principal);\n+            }\n+        }\n+        return canPurge;\n+    }\n+\n+    /**\n+     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n+     * (forbidden, locked ...)\n+     *\n+     * @param docs the documents List to trash\n+     * @param principal the user principal\n+     * @param checkProxies <code>true</code> to check proxies.\n+     * @param checkDeleted <code>true</code> to check if doc is trashed.\n+     * @param exitOnFirstDelta <code>true</code> to avoid looping in the whole documents List and exist on first\n+     *            document with TrashInfo \"forbidden\", \"proxies\" or \"locked\".\n+     * @return the TrashInfo for the documents List.\n+     */\n+    protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n+            boolean checkDeleted, boolean exitOnFirstDelta) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODYwMDUx", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347860051", "createdAt": "2020-01-24T10:19:29Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxOToyOVrOFhZTaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoxOToyOVrOFhZTaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MTg5Nw==", "bodyText": "need to be formatted, extra space needed on the", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370561897", "createdAt": "2020-01-24T10:19:29Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -112,19 +117,60 @@ public boolean canPurgeOrUntrash(List<DocumentModel> docs, NuxeoPrincipal princi\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true);\n+        TrashInfo info = getInfo(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n+        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+    }\n+\n+    @Override\n+    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n+        String nxql = String.format(TRASHED_QUERY, parent.getId());\n+        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n+                                                     .username(principal.getName())\n+                                                     .repository(parent.getRepositoryName())\n+                                                     .build();\n+        ScrollService service = Framework.getService(ScrollService.class);\n+        boolean canPurge = true;\n+        try (Scroll scroll = service.scroll(request)) {\n+            if (!scroll.hasNext()) {\n+                return false;\n+            }\n+            while (scroll.hasNext() && canPurge) {\n+                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n+                canPurge = canPurgeOrUntrash(documents, principal);\n+            }\n+        }\n+        return canPurge;\n+    }\n+\n+    /**\n+     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n+     * (forbidden, locked ...)\n+     *\n+     * @param docs the documents List to trash\n+     * @param principal the user principal\n+     * @param checkProxies <code>true</code> to check proxies.\n+     * @param checkDeleted <code>true</code> to check if doc is trashed.\n+     * @param exitOnFirstDelta <code>true</code> to avoid looping in the whole documents List and exist on first\n+     *            document with TrashInfo \"forbidden\", \"proxies\" or \"locked\".\n+     * @return the TrashInfo for the documents List.\n+     */\n+    protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n+            boolean checkDeleted, boolean exitOnFirstDelta) {\n         TrashInfo info = new TrashInfo();\n         info.docs = new ArrayList<>(docs.size());\n         if (docs.isEmpty()) {\n             return info;\n         }\n         CoreSession session = docs.get(0).getCoreSession();\n         for (DocumentModel doc : docs) {\n+            if (exitOnFirstDelta && (info.forbidden > 0 || info.locked >0 || info.proxies >0)){\n+                return info;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODYxODI1", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347861825", "createdAt": "2020-01-24T10:22:32Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoyMjozMlrOFhZZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoyMjozMlrOFhZZCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzMzOQ==", "bodyText": "With this premature exit you change/break the exiting behaviour of this method as before you changed it, it main purpose was to give more informations about the trash state, and now you exit the method if your check is true  i think we should rework it depending on the need", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370563339", "createdAt": "2020-01-24T10:22:32Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -112,19 +117,60 @@ public boolean canPurgeOrUntrash(List<DocumentModel> docs, NuxeoPrincipal princi\n             return false;\n         }\n         // used to do only check on parent perm\n-        TrashInfo info = getInfo(docs, principal, false, true);\n+        TrashInfo info = getInfo(docs, principal, false, true, true);\n         return info.docs.size() == docs.size();\n     }\n \n     protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n             boolean checkDeleted) {\n+        return getInfo(docs, principal, checkProxies, checkDeleted, false);\n+    }\n+\n+    @Override\n+    public boolean getCanEmptyTrash(DocumentModel parent, NuxeoPrincipal principal) {\n+        String nxql = String.format(TRASHED_QUERY, parent.getId());\n+        ScrollRequest request = DocumentScrollRequest.builder(nxql)\n+                                                     .username(principal.getName())\n+                                                     .repository(parent.getRepositoryName())\n+                                                     .build();\n+        ScrollService service = Framework.getService(ScrollService.class);\n+        boolean canPurge = true;\n+        try (Scroll scroll = service.scroll(request)) {\n+            if (!scroll.hasNext()) {\n+                return false;\n+            }\n+            while (scroll.hasNext() && canPurge) {\n+                DocumentModelList documents = RepositoryScroll.loadDocuments(parent.getCoreSession(), scroll.next());\n+                canPurge = canPurgeOrUntrash(documents, principal);\n+            }\n+        }\n+        return canPurge;\n+    }\n+\n+    /**\n+     * Return the {@link TrashInfo} of a document list with potentially some documents not ok for 'purge' or unTrash\n+     * (forbidden, locked ...)\n+     *\n+     * @param docs the documents List to trash\n+     * @param principal the user principal\n+     * @param checkProxies <code>true</code> to check proxies.\n+     * @param checkDeleted <code>true</code> to check if doc is trashed.\n+     * @param exitOnFirstDelta <code>true</code> to avoid looping in the whole documents List and exist on first\n+     *            document with TrashInfo \"forbidden\", \"proxies\" or \"locked\".\n+     * @return the TrashInfo for the documents List.\n+     */\n+    protected TrashInfo getInfo(List<DocumentModel> docs, NuxeoPrincipal principal, boolean checkProxies,\n+            boolean checkDeleted, boolean exitOnFirstDelta) {\n         TrashInfo info = new TrashInfo();\n         info.docs = new ArrayList<>(docs.size());\n         if (docs.isEmpty()) {\n             return info;\n         }\n         CoreSession session = docs.get(0).getCoreSession();\n         for (DocumentModel doc : docs) {\n+            if (exitOnFirstDelta && (info.forbidden > 0 || info.locked >0 || info.proxies >0)){\n+                return info;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODYyMjg1", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347862285", "createdAt": "2020-01-24T10:23:24Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoyMzoyNVrOFhZaSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoyMzoyNVrOFhZaSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2MzY1OQ==", "bodyText": "no need for deprecated on Override method as you did it on the interface one", "url": "https://github.com/nuxeo/nuxeo/pull/3693#discussion_r370563659", "createdAt": "2020-01-24T10:23:25Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/trash/AbstractTrashService.java", "diffHunk": "@@ -299,6 +345,7 @@ protected void notifyEvent(CoreSession session, String eventId, DocumentModel do\n         eventService.fireEvent(event);\n     }\n \n+    @Deprecated(since = \"11.1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODYyOTc5", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-347862979", "createdAt": "2020-01-24T10:24:45Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NjA0MTUw", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-348604150", "createdAt": "2020-01-27T11:45:18Z", "commit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48c62d0e6e904561781b271ae17ba1c68f67712e", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/48c62d0e6e904561781b271ae17ba1c68f67712e", "committedDate": "2020-01-23T15:21:05Z", "message": "NXP-28502: Fix permanent deletion of folder containing a large number of documents"}, "afterCommit": {"oid": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/d61fa8ff5b9e46aa598002900f0e794c635bc76b", "committedDate": "2020-01-27T17:16:44Z", "message": "NXP-28502: Fix permanent deletion of folder containing a large number of documents"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d61fa8ff5b9e46aa598002900f0e794c635bc76b", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/d61fa8ff5b9e46aa598002900f0e794c635bc76b", "committedDate": "2020-01-27T17:16:44Z", "message": "NXP-28502: Fix permanent deletion of folder containing a large number of documents"}, "afterCommit": {"oid": "7594cec14f2498b850c841eaca8188d59cc367cb", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/7594cec14f2498b850c841eaca8188d59cc367cb", "committedDate": "2020-01-30T15:47:09Z", "message": "NXP-28502: Fix permanent deletion of folder containing a large number of documents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzAwNzkw", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-352300790", "createdAt": "2020-02-03T14:39:39Z", "commit": {"oid": "7594cec14f2498b850c841eaca8188d59cc367cb"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7594cec14f2498b850c841eaca8188d59cc367cb", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/7594cec14f2498b850c841eaca8188d59cc367cb", "committedDate": "2020-01-30T15:47:09Z", "message": "NXP-28502: Fix permanent deletion of folder containing a large number of documents"}, "afterCommit": {"oid": "532c2aec7f03e00434eef1563ce021fa5b83ded4", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/532c2aec7f03e00434eef1563ce021fa5b83ded4", "committedDate": "2020-02-14T16:33:20Z", "message": "NXP-28502: deprecate TrashService#getDocuments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50316b45539a2bbb0f2a443f55134b157c0f6c11", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/50316b45539a2bbb0f2a443f55134b157c0f6c11", "committedDate": "2020-02-17T11:16:56Z", "message": "NXP-28502: deprecate TrashService#getDocuments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "532c2aec7f03e00434eef1563ce021fa5b83ded4", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/532c2aec7f03e00434eef1563ce021fa5b83ded4", "committedDate": "2020-02-14T16:33:20Z", "message": "NXP-28502: deprecate TrashService#getDocuments"}, "afterCommit": {"oid": "50316b45539a2bbb0f2a443f55134b157c0f6c11", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/50316b45539a2bbb0f2a443f55134b157c0f6c11", "committedDate": "2020-02-17T11:16:56Z", "message": "NXP-28502: deprecate TrashService#getDocuments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMDU2MzU4", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-362056358", "createdAt": "2020-02-20T16:38:22Z", "commit": {"oid": "50316b45539a2bbb0f2a443f55134b157c0f6c11"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMzgyMTI0", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-363382124", "createdAt": "2020-02-24T13:20:37Z", "commit": {"oid": "50316b45539a2bbb0f2a443f55134b157c0f6c11"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDAxMjgx", "url": "https://github.com/nuxeo/nuxeo/pull/3693#pullrequestreview-363401281", "createdAt": "2020-02-24T13:51:30Z", "commit": {"oid": "50316b45539a2bbb0f2a443f55134b157c0f6c11"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4887, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}