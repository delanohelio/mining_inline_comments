{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzkyOTU1", "number": 4203, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0NTo0MlrOEL9jig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozMToxM1rOETLGbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTc4MzE0OnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNzo0NTo0MlrOGty2GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzo1MToyMVrOGuJYmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MjE1Mg==", "bodyText": "is this required for the fix?", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r450672152", "createdAt": "2020-07-07T07:45:42Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -232,7 +232,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n         // TODO NXP-18247: should be set to the actual number of bytes uploaded instead of relying on the Content-Length\n         // header which is not necessarily set\n         long uploadedSize = getUploadedSize(request);\n-        boolean isMultipart = contentType != null && contentType.contains(\"multipart\");\n+        boolean isMultipart = contentType != null && contentType.contains(\"multipart/form-data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3124739a3bf6bb319aefa39f6ef9066724587958"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MDEwOA==", "bodyText": "Yes. This is half the fix actually.\nOtherwise multipart/related will evaluate to true true and the FormData#getMultiPartItems will be called and fail", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r450680108", "createdAt": "2020-07-07T08:00:53Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -232,7 +232,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n         // TODO NXP-18247: should be set to the actual number of bytes uploaded instead of relying on the Content-Length\n         // header which is not necessarily set\n         long uploadedSize = getUploadedSize(request);\n-        boolean isMultipart = contentType != null && contentType.contains(\"multipart\");\n+        boolean isMultipart = contentType != null && contentType.contains(\"multipart/form-data\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MjE1Mg=="}, "originalCommit": {"oid": "3124739a3bf6bb319aefa39f6ef9066724587958"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MTQzMg==", "bodyText": "We changed the approach. Now multipart is completely unsupported on master.\nIt still fails on 10 and 9 but is disablable", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r451041432", "createdAt": "2020-07-07T17:51:21Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -232,7 +232,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n         // TODO NXP-18247: should be set to the actual number of bytes uploaded instead of relying on the Content-Length\n         // header which is not necessarily set\n         long uploadedSize = getUploadedSize(request);\n-        boolean isMultipart = contentType != null && contentType.contains(\"multipart\");\n+        boolean isMultipart = contentType != null && contentType.contains(\"multipart/form-data\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3MjE1Mg=="}, "originalCommit": {"oid": "3124739a3bf6bb319aefa39f6ef9066724587958"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjExNDk0OnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzo1NzozNFrOGuJnAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODowNTowMVrOGuJ3mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NTEyMw==", "bodyText": "these are still used. So I keep them.", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r451045123", "createdAt": "2020-07-07T17:57:34Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -234,24 +234,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n         long uploadedSize = getUploadedSize(request);\n         boolean isMultipart = contentType != null && contentType.contains(\"multipart\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eea115fccb318dadaabb54a514bb84d36eb771e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0OTM2OA==", "bodyText": "I think it can be removed, and just give false to the buildResponse method, as there is no more multipart?", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r451049368", "createdAt": "2020-07-07T18:05:01Z", "author": {"login": "troger"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -234,24 +234,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n         long uploadedSize = getUploadedSize(request);\n         boolean isMultipart = contentType != null && contentType.contains(\"multipart\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NTEyMw=="}, "originalCommit": {"oid": "1eea115fccb318dadaabb54a514bb84d36eb771e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjEzMTkwOnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODowMjoxMVrOGuJx0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODowMjoxMVrOGuJx0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0Nzg4OQ==", "bodyText": "comment removed in next push", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r451047889", "createdAt": "2020-07-07T18:02:11Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -1053,6 +1053,21 @@ public void testErrorOnRefreshedTokenError() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testUploadMHTML() throws Exception {\n+        String batchId = initializeNewBatch();\n+        // typed via mime-type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1eea115fccb318dadaabb54a514bb84d36eb771e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODU4NTY0OnYy", "diffSide": "LEFT", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0NzoxOFrOGvHr8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0NzoxOFrOGvHr8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MjE5NA==", "bodyText": "restored in next push. Test works in local", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r452062194", "createdAt": "2020-07-09T08:47:18Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -224,11 +211,6 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n         assertEquals(\"Fichier accentu\u00e9 1.txt\", blob.getFilename());\n         assertEquals(\"text/plain\", blob.getMimeType());\n         assertEquals(data1, blob.getString());\n-        blob = (Blob) doc.getPropertyValue(\"mb:blobs/1/content\");\n-        assertNotNull(blob);\n-        assertEquals(\"Fichier accentu\u00e9 2.txt\", blob.getFilename());\n-        assertEquals(mimeType, blob.getMimeType());\n-        assertEquals(data2, blob.getString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de5f3503e9eb7ba05b405aaea2da1b3b804c6323"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODY4ODU4OnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxNDozNlrOGvIrsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxNDozNlrOGvIrsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3ODUxNQ==", "bodyText": "to be removed in next push", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r452078515", "createdAt": "2020-07-09T09:14:36Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -232,26 +230,8 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n         // TODO NXP-18247: should be set to the actual number of bytes uploaded instead of relying on the Content-Length\n         // header which is not necessarily set\n         long uploadedSize = getUploadedSize(request);\n-        boolean isMultipart = contentType != null && contentType.contains(\"multipart\");\n-\n-        // Handle multipart case: mainly MSIE with jQueryFileupload\n-        if (isMultipart) {\n-            FormData formData = new FormData(request);\n-            Blob blob = formData.getFirstBlob();\n-            if (blob == null) {\n-                throw new NuxeoException(\"Cannot upload in multipart with no blobs\");\n-            }\n-            if (!UPLOAD_TYPE_CHUNKED.equals(uploadType)) {\n-                fileName = blob.getFilename();\n-            }\n-            // Don't change the mime-type if it was forced via the X-File-Type header\n-            if (StringUtils.isBlank(mimeType)) {\n-                mimeType = blob.getMimeType();\n-            }\n-            uploadedSize = blob.getLength();\n-            addBlob(uploadType, batchId, fileIdx, blob, fileName, mimeType, uploadedSize, chunkCount, uploadChunkIndex,\n-                    fileSize);\n-        } else if (Framework.isBooleanPropertyTrue(NginxConstants.X_ACCEL_ENABLED)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c70054a517a20394d577361f1bdf31a3efa62c4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODk4MTYwOnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo0OToyMVrOGyEbHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo0OToyMVrOGyEbHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1NDQ2Mw==", "bodyText": "Javadoc always above the annotations.\nNote sure the JIRA title is needed as the test method explicitly state that it tests a MHTLM upload.", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r455154463", "createdAt": "2020-07-15T15:49:21Z", "author": {"login": "troger"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -1053,6 +1023,21 @@ public void testErrorOnRefreshedTokenError() throws Exception {\n         }\n     }\n \n+    @Test\n+    /** NXP-29246: Fix import of MHTML file using Chrome */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5cc9b3e1a35680fb05e600a8c2f4a52113af3f7"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzMyODA0OnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyMDo1NFrOG1ktgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoyMzo1OFrOG60Q7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyOTE4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return buildResponse(status, result, false);\n          \n          \n            \n                    return buildResponse(status, result);\n          \n      \n    \n    \n  \n\nWe may probably. want to deprecate buildResponse(StatusType, Object, boolean) and buildHTMLResponse(StatusType, String) as they won't be used anymore.", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r458829184", "createdAt": "2020-07-22T14:20:54Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -294,7 +273,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n                 }\n             }\n         }\n-        return buildResponse(status, result, isMultipart);\n+        return buildResponse(status, result, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMDUzMg==", "bodyText": "Deprecated with the annotation only as these methods are protected.", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r458900532", "createdAt": "2020-07-22T15:57:06Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -294,7 +273,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n                 }\n             }\n         }\n-        return buildResponse(status, result, isMultipart);\n+        return buildResponse(status, result, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyOTE4NA=="}, "originalCommit": {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NTk4Nw==", "bodyText": "Deprecated with the annotation only as these methods are protected.\n\nThis change doesn't appear currently in the branch, maybe not pushed yet?", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r462155987", "createdAt": "2020-07-29T09:13:15Z", "author": {"login": "ataillefer"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -294,7 +273,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n                 }\n             }\n         }\n-        return buildResponse(status, result, isMultipart);\n+        return buildResponse(status, result, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyOTE4NA=="}, "originalCommit": {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNjg5Mg==", "bodyText": "Yes will be updated in next push", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r464326892", "createdAt": "2020-08-03T10:23:58Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/BatchUploadObject.java", "diffHunk": "@@ -294,7 +273,7 @@ protected Response uploadNoTransaction(@Context HttpServletRequest request,\n                 }\n             }\n         }\n-        return buildResponse(status, result, isMultipart);\n+        return buildResponse(status, result, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyOTE4NA=="}, "originalCommit": {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTM2MzE0OnYy", "diffSide": "LEFT", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyMTowNVrOG4wDGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoyMzoyN1rOG60QIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MDY2Nw==", "bodyText": "I think we can keep this comment.\nIt's interesting to know that the uploaded size could be checked if implemented.", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r462160667", "createdAt": "2020-07-29T09:21:05Z", "author": {"login": "ataillefer"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -132,34 +128,25 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n             assertEquals(batchId, node.get(\"batchId\").asText());\n             assertEquals(\"0\", node.get(\"fileIdx\").asText());\n             assertEquals(\"normal\", node.get(\"uploadType\").asText());\n-            // TODO NXP-18247 when the actual uploaded size is returned\n-            // assertEquals(fileSize1, node.get(\"uploadedSize\").asText());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNjY5MA==", "bodyText": "I got it wrong and thought uploadedSize was only filled when isMultipart was true.", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r464326690", "createdAt": "2020-08-03T10:23:27Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -132,34 +128,25 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n             assertEquals(batchId, node.get(\"batchId\").asText());\n             assertEquals(\"0\", node.get(\"fileIdx\").asText());\n             assertEquals(\"normal\", node.get(\"uploadType\").asText());\n-            // TODO NXP-18247 when the actual uploaded size is returned\n-            // assertEquals(fileSize1, node.get(\"uploadedSize\").asText());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MDY2Nw=="}, "originalCommit": {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTM5NTkwOnYy", "diffSide": "LEFT", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyOToyOFrOG4wW9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoyOTowNVrOG60aGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NTc0OQ==", "bodyText": "Why not passing the file size header anymore?", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r462165749", "createdAt": "2020-07-29T09:29:28Z", "author": {"login": "ataillefer"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -240,42 +227,32 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n      */\n     @Test\n     public void testObeyFileTypeHeader() throws IOException {\n-        Map<String, String> headers;\n-\n         // Get batch id, used as a session id\n         String batchId = initializeDeprecatedNewBatch();\n \n-        // Upload a file in multipart, first without the X-File-Type header, the second with\n-        String fileName1 = \"No header.txt\";\n+        // Upload a file without the X-File-Type header\n         String data1 = \"File without explicit file type\";\n-        String fileSize1 = String.valueOf(getUTF8Bytes(data1).length);\n-        headers = new HashMap<>();\n-        headers.put(\"X-File-Size\", fileSize1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNTk5NQ==", "bodyText": "Because it's not checked or mandatory.\nIf I didn't miss anything the only assertion made on the response is:\ncfca839#diff-a0e2882aaae16530623a620986daadc3L260", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r464325995", "createdAt": "2020-08-03T10:21:48Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -240,42 +227,32 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n      */\n     @Test\n     public void testObeyFileTypeHeader() throws IOException {\n-        Map<String, String> headers;\n-\n         // Get batch id, used as a session id\n         String batchId = initializeDeprecatedNewBatch();\n \n-        // Upload a file in multipart, first without the X-File-Type header, the second with\n-        String fileName1 = \"No header.txt\";\n+        // Upload a file without the X-File-Type header\n         String data1 = \"File without explicit file type\";\n-        String fileSize1 = String.valueOf(getUTF8Bytes(data1).length);\n-        headers = new HashMap<>();\n-        headers.put(\"X-File-Size\", fileSize1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NTc0OQ=="}, "originalCommit": {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyOTI0MQ==", "bodyText": "Fair enough \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r464329241", "createdAt": "2020-08-03T10:29:05Z", "author": {"login": "ataillefer"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -240,42 +227,32 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n      */\n     @Test\n     public void testObeyFileTypeHeader() throws IOException {\n-        Map<String, String> headers;\n-\n         // Get batch id, used as a session id\n         String batchId = initializeDeprecatedNewBatch();\n \n-        // Upload a file in multipart, first without the X-File-Type header, the second with\n-        String fileName1 = \"No header.txt\";\n+        // Upload a file without the X-File-Type header\n         String data1 = \"File without explicit file type\";\n-        String fileSize1 = String.valueOf(getUTF8Bytes(data1).length);\n-        headers = new HashMap<>();\n-        headers.put(\"X-File-Size\", fileSize1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NTc0OQ=="}, "originalCommit": {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTQwMjcxOnYy", "diffSide": "LEFT", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozMToxM1rOG4wbMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoyMjoxN1rOG60OGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NjgzMg==", "bodyText": "Why not passing the file size header anymore?", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r462166832", "createdAt": "2020-07-29T09:31:13Z", "author": {"login": "ataillefer"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -240,42 +227,32 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n      */\n     @Test\n     public void testObeyFileTypeHeader() throws IOException {\n-        Map<String, String> headers;\n-\n         // Get batch id, used as a session id\n         String batchId = initializeDeprecatedNewBatch();\n \n-        // Upload a file in multipart, first without the X-File-Type header, the second with\n-        String fileName1 = \"No header.txt\";\n+        // Upload a file without the X-File-Type header\n         String data1 = \"File without explicit file type\";\n-        String fileSize1 = String.valueOf(getUTF8Bytes(data1).length);\n-        headers = new HashMap<>();\n-        headers.put(\"X-File-Size\", fileSize1);\n-\n-        try (FormDataMultiPart form = new FormDataMultiPart()) {\n-            BodyPart fdp = new StreamDataBodyPart(fileName1, new ByteArrayInputStream(getUTF8Bytes(data1)));\n-            form.bodyPart(fdp);\n-            try (CloseableClientResponse response = getResponse(RequestType.POST, \"upload/\" + batchId + \"/0\", form,\n-                    headers)) {\n-                assertEquals(Status.CREATED.getStatusCode(), response.getStatus());\n-            }\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"upload/\" + batchId + \"/0\", data1,\n+                Map.of(\"X-File-Name\", \"No header.txt\"))) {\n+            assertEquals(Status.CREATED.getStatusCode(), response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(\"true\", node.get(\"uploaded\").asText());\n+            assertEquals(batchId, node.get(\"batchId\").asText());\n+            assertEquals(\"0\", node.get(\"fileIdx\").asText());\n+            assertEquals(\"normal\", node.get(\"uploadType\").asText());\n         }\n \n-        String mimeType = \"text/plain\";\n-        String fileName2 = \"With header.txt\";\n+        // Upload a file with the X-File-Type header\n         String data2 = \"File with explicit X-File-Type header\";\n-        String fileSize2 = String.valueOf(getUTF8Bytes(data2).length);\n-        headers = new HashMap<>();\n-        headers.put(\"X-File-Size\", fileSize2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyNjE3MQ==", "bodyText": "Because it's not checked or mandatory.\nIf I didn't miss anything the only assertion made on the response is:\ncfca839#diff-a0e2882aaae16530623a620986daadc3L277", "url": "https://github.com/nuxeo/nuxeo/pull/4203#discussion_r464326171", "createdAt": "2020-08-03T10:22:17Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/BatchUploadFixture.java", "diffHunk": "@@ -240,42 +227,32 @@ private void itCanUseBatchUpload(boolean noDrop) throws IOException {\n      */\n     @Test\n     public void testObeyFileTypeHeader() throws IOException {\n-        Map<String, String> headers;\n-\n         // Get batch id, used as a session id\n         String batchId = initializeDeprecatedNewBatch();\n \n-        // Upload a file in multipart, first without the X-File-Type header, the second with\n-        String fileName1 = \"No header.txt\";\n+        // Upload a file without the X-File-Type header\n         String data1 = \"File without explicit file type\";\n-        String fileSize1 = String.valueOf(getUTF8Bytes(data1).length);\n-        headers = new HashMap<>();\n-        headers.put(\"X-File-Size\", fileSize1);\n-\n-        try (FormDataMultiPart form = new FormDataMultiPart()) {\n-            BodyPart fdp = new StreamDataBodyPart(fileName1, new ByteArrayInputStream(getUTF8Bytes(data1)));\n-            form.bodyPart(fdp);\n-            try (CloseableClientResponse response = getResponse(RequestType.POST, \"upload/\" + batchId + \"/0\", form,\n-                    headers)) {\n-                assertEquals(Status.CREATED.getStatusCode(), response.getStatus());\n-            }\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"upload/\" + batchId + \"/0\", data1,\n+                Map.of(\"X-File-Name\", \"No header.txt\"))) {\n+            assertEquals(Status.CREATED.getStatusCode(), response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(\"true\", node.get(\"uploaded\").asText());\n+            assertEquals(batchId, node.get(\"batchId\").asText());\n+            assertEquals(\"0\", node.get(\"fileIdx\").asText());\n+            assertEquals(\"normal\", node.get(\"uploadType\").asText());\n         }\n \n-        String mimeType = \"text/plain\";\n-        String fileName2 = \"With header.txt\";\n+        // Upload a file with the X-File-Type header\n         String data2 = \"File with explicit X-File-Type header\";\n-        String fileSize2 = String.valueOf(getUTF8Bytes(data2).length);\n-        headers = new HashMap<>();\n-        headers.put(\"X-File-Size\", fileSize2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NjgzMg=="}, "originalCommit": {"oid": "cfca8399bb2c4f85a0f320a8dc8e15aed984fbf8"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4102, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}