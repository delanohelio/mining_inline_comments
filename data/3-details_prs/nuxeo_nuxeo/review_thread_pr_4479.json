{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzOTAyMjUx", "number": 4479, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1NjowMlrOE9WyrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMDowMVrOE9XCVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzcyMDEyOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1NjowMlrOH6AS-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1NjowMlrOH6AS-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4NDMxNQ==", "bodyText": "Can you use <= 0 to be stylistically consistent with other checks of this limit?", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530584315", "createdAt": "2020-11-25T18:56:02Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java", "diffHunk": "@@ -199,6 +218,14 @@ protected void processRecord(ComputationContext context, Record record) {\n         context.askForCheckpoint();\n     }\n \n+    private long getQueryLimit(BulkCommand command) {\n+        Long limit = command.getQueryLimit();\n+        if (limit == null || limit < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzcyMTQ5OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1NjozMVrOH6ATyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1NjozMVrOH6ATyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4NDUyMw==", "bodyText": "Maybe log the value in the exception message too?", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530584523", "createdAt": "2020-11-25T18:56:31Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java", "diffHunk": "@@ -254,6 +274,29 @@ public Builder repository(String name) {\n             return this;\n         }\n \n+        /**\n+         * Limits the query result.\n+         *\n+         * @since 11.4\n+         */\n+        public Builder queryLimit(long limit) {\n+            if (limit <= 0) {\n+                throw new IllegalArgumentException(\"Limit must be > 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzc0ODg0OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkStatus.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTowNjowMlrOH6AlMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo1MDo0MVrOH6YKbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4ODk3OA==", "bodyText": "It's not clear to me what his means when it's true. Is it that there was a limit passed when doing the query? Or that the query is incomplete in its results returned.\nA useful flag would be more about \"limitReached\", which I would call \"resultsTruncated\" or \"resultsIncomplete\", or \"moreResults\".", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530588978", "createdAt": "2020-11-25T19:06:02Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkStatus.java", "diffHunk": "@@ -111,6 +112,9 @@\n     @Nullable\n     protected Long processingDurationMillis;\n \n+    @AvroDefault(\"false\")\n+    protected boolean limitedQuery;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1NTc4Mw==", "bodyText": "limitedQuery is true if the query has a limit and it has been reached which makes sense in the context of the status, the query itself and its attributes (like the limit) are part of the command. limitReached or queryLimitReached could be an alternative.", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530955783", "createdAt": "2020-11-26T11:15:47Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkStatus.java", "diffHunk": "@@ -111,6 +112,9 @@\n     @Nullable\n     protected Long processingDurationMillis;\n \n+    @AvroDefault(\"false\")\n+    protected boolean limitedQuery;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4ODk3OA=="}, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3NTM0Mg==", "bodyText": "will use queryLimitReached", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530975342", "createdAt": "2020-11-26T11:50:41Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkStatus.java", "diffHunk": "@@ -111,6 +112,9 @@\n     @Nullable\n     protected Long processingDurationMillis;\n \n+    @AvroDefault(\"false\")\n+    protected boolean limitedQuery;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4ODk3OA=="}, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzc1MjM2OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTowNzoxMVrOH6AnNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMToyMToyOFrOH6XKlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4OTQ5NQ==", "bodyText": "What about if we get exactly to the queryLimit value? Then we flag limitReached=true but there's no additional documents. The use of this for paging is not clear.", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530589495", "createdAt": "2020-11-25T19:07:11Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java", "diffHunk": "@@ -169,21 +176,33 @@ protected void processRecord(ComputationContext context, Record record) {\n                         return;\n                     }\n                     List<String> docIds = scroll.next();\n-                    documentIds.addAll(docIds);\n+                    int scrollCount = docIds.size();\n+                    if (documentCount + scrollCount < queryLimit) {\n+                        documentIds.addAll(docIds);\n+                    } else {\n+                        scrollCount = Math.toIntExact(queryLimit - documentCount);\n+                        documentIds.addAll(docIds.subList(0, scrollCount));\n+                        limitReached = true;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk1ODk5OA==", "bodyText": "the limit should be taken as LIMIT in SQL, the bulk service is not done for paging and we don't have to go into an off-by-one problem here.", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530958998", "createdAt": "2020-11-26T11:21:28Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java", "diffHunk": "@@ -169,21 +176,33 @@ protected void processRecord(ComputationContext context, Record record) {\n                         return;\n                     }\n                     List<String> docIds = scroll.next();\n-                    documentIds.addAll(docIds);\n+                    int scrollCount = docIds.size();\n+                    if (documentCount + scrollCount < queryLimit) {\n+                        documentIds.addAll(docIds);\n+                    } else {\n+                        scrollCount = Math.toIntExact(queryLimit - documentCount);\n+                        documentIds.addAll(docIds.subList(0, scrollCount));\n+                        limitReached = true;\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4OTQ5NQ=="}, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzc2MDIyOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/TestWordCountAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMDowMVrOH6Ar_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMDowMVrOH6Ar_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDcxOA==", "bodyText": "Please add tests for the behavior where the .queryLimit() is wordCount-1, exactly wordCount, and wordCount+1 to test edge cases.", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530590718", "createdAt": "2020-11-25T19:10:01Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/TestWordCountAction.java", "diffHunk": "@@ -70,9 +71,57 @@ public void testWordCount() throws Exception {\n         assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n         BulkStatus status = bulkService.getStatus(commandId);\n         assertEquals(COMPLETED, status.getState());\n+        assertFalse(status.isLimitedQuery());\n         assertEquals(wordCount, status.getResult().get(\"wordCount\"));\n     }\n \n+    @Test\n+    public void testWordCountWithLimitedQery() throws Exception {\n+        int wordCount = 2732;\n+        String myFile = createFile(wordCount);\n+        // Use an action limited by default to the first 100 first lines\n+        BulkCommand command = new BulkCommand.Builder(\"testWordCountLimited\", myFile, \"system\")\n+                .useGenericScroller()\n+                .build();\n+        String commandId = bulkService.submit(command);\n+        assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n+        BulkStatus status = bulkService.getStatus(commandId);\n+        assertEquals(COMPLETED, status.getState());\n+        assertTrue(status.isLimitedQuery());\n+        int result100 = (Integer) status.getResult().get(\"wordCount\");\n+        assertTrue(result100 > 0);\n+        // the number of word for the first 100 lines is inferior to the total number of words in the file\n+        assertTrue(wordCount > result100);\n+\n+        // Now set an explicit limit to a lower number of lines\n+        command = new BulkCommand.Builder(\"testWordCountLimited\",  myFile, \"system\")\n+                .useGenericScroller()\n+                .queryLimit(10)\n+                .build();\n+        commandId = bulkService.submit(command);\n+        assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n+        status = bulkService.getStatus(commandId);\n+        assertTrue(status.isLimitedQuery());\n+        assertEquals(COMPLETED, status.getState());\n+        int result10 = (Integer) status.getResult().get(\"wordCount\");\n+        assertTrue(result10 > 0);\n+        // there is less words in 10 lines than 100\n+        assertTrue(result100 > result10);\n+\n+        // Now request explicit unlimited number of lines\n+        command = new BulkCommand.Builder(\"testWordCountLimited\",  myFile, \"system\")\n+                .useGenericScroller()\n+                .queryUnlimited()\n+                .build();\n+        commandId = bulkService.submit(command);\n+        assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n+        status = bulkService.getStatus(commandId);\n+        assertEquals(COMPLETED, status.getState());\n+        assertFalse(status.isLimitedQuery());\n+        long resultUnlimited = (Integer) status.getResult().get(\"wordCount\");\n+        assertEquals(wordCount, resultUnlimited);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4314, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}