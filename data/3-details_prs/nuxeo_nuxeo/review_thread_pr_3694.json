{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTEyOTU2", "number": 3694, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTowMjo1N1rODaR2pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODoxNjowMVrODaaTBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODgyMDg1OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/preview/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTowMjo1N1rOFhJRiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoyNjoxOFrOFhZeyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5OTI3Mw==", "bodyText": "Why is a document needed?", "url": "https://github.com/nuxeo/nuxeo/pull/3694#discussion_r370299273", "createdAt": "2020-01-23T19:02:57Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/preview/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "diffHunk": "@@ -152,4 +156,18 @@ public void testFolderishDocument() throws Exception {\n         assertNotNull(adapter);\n     }\n \n+    @Test\n+    public void testConvertTextToHtml() throws IOException {\n+        Blob blob = new StringBlob(\"thisismytest\", \"text/plain\");\n+        DocumentModel doc = session.createDocumentModel(\"File\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d307846cdee0deece09e2bdb723fd303857aebb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NDgwOQ==", "bodyText": "Indeed it's not, thanks.", "url": "https://github.com/nuxeo/nuxeo/pull/3694#discussion_r370564809", "createdAt": "2020-01-24T10:26:18Z", "author": {"login": "efge"}, "path": "nuxeo-features/preview/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "diffHunk": "@@ -152,4 +156,18 @@ public void testFolderishDocument() throws Exception {\n         assertNotNull(adapter);\n     }\n \n+    @Test\n+    public void testConvertTextToHtml() throws IOException {\n+        Blob blob = new StringBlob(\"thisismytest\", \"text/plain\");\n+        DocumentModel doc = session.createDocumentModel(\"File\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5OTI3Mw=="}, "originalCommit": {"oid": "9d307846cdee0deece09e2bdb723fd303857aebb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODgzMDY5OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/blobholder/SimpleBlobHolder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTowNjoyMVrOFhJXrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDozNDoxMlrOFhZr3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMDg0NA==", "bodyText": "Why not init(List.of(blob) since this is master?\nOr do we need a mutable list?", "url": "https://github.com/nuxeo/nuxeo/pull/3694#discussion_r370300844", "createdAt": "2020-01-23T19:06:21Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/blobholder/SimpleBlobHolder.java", "diffHunk": "@@ -58,6 +59,11 @@ protected void init(List<Blob> blobs) {\n         creationDate = Calendar.getInstance();\n     }\n \n+    @Override\n+    public void setBlob(Blob blob) {\n+        init(new ArrayList<>(Arrays.asList(blob)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d307846cdee0deece09e2bdb723fd303857aebb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NTM5Nw==", "bodyText": "I'm not certain if we do but for anything that requires backports I'm using Java 8 syntax and being conservative with semantics (the existing constructor uses a mutable list).", "url": "https://github.com/nuxeo/nuxeo/pull/3694#discussion_r370565397", "createdAt": "2020-01-24T10:27:42Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/blobholder/SimpleBlobHolder.java", "diffHunk": "@@ -58,6 +59,11 @@ protected void init(List<Blob> blobs) {\n         creationDate = Calendar.getInstance();\n     }\n \n+    @Override\n+    public void setBlob(Blob blob) {\n+        init(new ArrayList<>(Arrays.asList(blob)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMDg0NA=="}, "originalCommit": {"oid": "9d307846cdee0deece09e2bdb723fd303857aebb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2ODE1Nw==", "bodyText": "OK, right about keeping semantics.\nThough, I think we could have a wider discussion about using or not Java 11 features/syntax on master for issues that require backports. I think that in some cases we should allow us to use different code, to improve master. But this case is not a good example for sure.", "url": "https://github.com/nuxeo/nuxeo/pull/3694#discussion_r370568157", "createdAt": "2020-01-24T10:34:12Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/blobholder/SimpleBlobHolder.java", "diffHunk": "@@ -58,6 +59,11 @@ protected void init(List<Blob> blobs) {\n         creationDate = Calendar.getInstance();\n     }\n \n+    @Override\n+    public void setBlob(Blob blob) {\n+        init(new ArrayList<>(Arrays.asList(blob)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMDg0NA=="}, "originalCommit": {"oid": "9d307846cdee0deece09e2bdb723fd303857aebb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDE5ODU2OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/preview/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODoxMzoxNFrOFhWS2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoyODozMlrOFhZiYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMjYwMw==", "bodyText": "can we pass an empty map (Map.of, Collections.emptyMap()) instead of null on the map parameter", "url": "https://github.com/nuxeo/nuxeo/pull/3694#discussion_r370512603", "createdAt": "2020-01-24T08:13:14Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/preview/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "diffHunk": "@@ -152,4 +156,18 @@ public void testFolderishDocument() throws Exception {\n         assertNotNull(adapter);\n     }\n \n+    @Test\n+    public void testConvertTextToHtml() throws IOException {\n+        Blob blob = new StringBlob(\"thisismytest\", \"text/plain\");\n+        DocumentModel doc = session.createDocumentModel(\"File\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        // convert using SimpleBlobHolder (like ConvertAdapter)\n+        BlobHolder blobHolder = new SimpleBlobHolder(blob);\n+        BlobHolder res = conversionService.convertToMimeType(\"text/html\", blobHolder , null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d307846cdee0deece09e2bdb723fd303857aebb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NTczMA==", "bodyText": "null is accepted and turned into an empty map later on in the call stack.", "url": "https://github.com/nuxeo/nuxeo/pull/3694#discussion_r370565730", "createdAt": "2020-01-24T10:28:32Z", "author": {"login": "efge"}, "path": "nuxeo-features/preview/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "diffHunk": "@@ -152,4 +156,18 @@ public void testFolderishDocument() throws Exception {\n         assertNotNull(adapter);\n     }\n \n+    @Test\n+    public void testConvertTextToHtml() throws IOException {\n+        Blob blob = new StringBlob(\"thisismytest\", \"text/plain\");\n+        DocumentModel doc = session.createDocumentModel(\"File\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        // convert using SimpleBlobHolder (like ConvertAdapter)\n+        BlobHolder blobHolder = new SimpleBlobHolder(blob);\n+        BlobHolder res = conversionService.convertToMimeType(\"text/html\", blobHolder , null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMjYwMw=="}, "originalCommit": {"oid": "9d307846cdee0deece09e2bdb723fd303857aebb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDIwNDIyOnYy", "diffSide": "RIGHT", "path": "nuxeo-features/preview/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODoxNjowMVrOFhWWMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMDoyOToyMFrOFhZjuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMzQ1Nw==", "bodyText": "we can use the constructor with single parameter (which use text/plain mime type internally):\nBlob blob = new StringBlob(\"thisismytest\", \"text/plain\"); ->  Blob blob = new StringBlob(\"thisismytest\");", "url": "https://github.com/nuxeo/nuxeo/pull/3694#discussion_r370513457", "createdAt": "2020-01-24T08:16:01Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/preview/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "diffHunk": "@@ -152,4 +156,18 @@ public void testFolderishDocument() throws Exception {\n         assertNotNull(adapter);\n     }\n \n+    @Test\n+    public void testConvertTextToHtml() throws IOException {\n+        Blob blob = new StringBlob(\"thisismytest\", \"text/plain\");\n+        DocumentModel doc = session.createDocumentModel(\"File\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d307846cdee0deece09e2bdb723fd303857aebb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU2NjA3Mg==", "bodyText": "We could but I want to be explicit about the MIME type here given that it's what the test is about.", "url": "https://github.com/nuxeo/nuxeo/pull/3694#discussion_r370566072", "createdAt": "2020-01-24T10:29:20Z", "author": {"login": "efge"}, "path": "nuxeo-features/preview/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "diffHunk": "@@ -152,4 +156,18 @@ public void testFolderishDocument() throws Exception {\n         assertNotNull(adapter);\n     }\n \n+    @Test\n+    public void testConvertTextToHtml() throws IOException {\n+        Blob blob = new StringBlob(\"thisismytest\", \"text/plain\");\n+        DocumentModel doc = session.createDocumentModel(\"File\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxMzQ1Nw=="}, "originalCommit": {"oid": "9d307846cdee0deece09e2bdb723fd303857aebb"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4284, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}