{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MDY5OTYx", "number": 4537, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODowODo1N1rOFD3VGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODowODo1N1rOFD3VGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTk2NTcwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODowODo1N1rOIDtd9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDowNToyMVrOID6Lpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc2MTU4OQ==", "bodyText": "I'm actually not sure if we should skip the component registerContribution method when a registry exists (which will be the case if contributions are not resolved at this step): some components need to issue deprecation warnings for instance...", "url": "https://github.com/nuxeo/nuxeo/pull/4537#discussion_r540761589", "createdAt": "2020-12-11T08:08:57Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +473,120 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        String marker = xt.getId();\n+                        if (registry.isNull()) {\n+                            // backward compatibility", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0368c109476c4c9d15856f46f48710e4a39786e3"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk2OTg5NA==", "bodyText": "Moved the checks that ConfigurationService does in the start method, for instance ==> will see if this needs refinements later", "url": "https://github.com/nuxeo/nuxeo/pull/4537#discussion_r540969894", "createdAt": "2020-12-11T14:05:21Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -453,26 +473,120 @@ public synchronized void unregisterExtension(Extension extension) {\n                 ((ComponentInstanceImpl) extension.getComponent()).ri, extension));\n     }\n \n-    public static void loadContributions(RegistrationInfo ri, Extension xt) {\n+    /**\n+     * Registers the given extension on target extension point held by given registration info.\n+     *\n+     * @since 11.5\n+     */\n+    public void register(RegistrationInfo ri, Extension xt) {\n         // in new java based system contributions don't need to be loaded, this is a XML specificity reflected by\n         // ExtensionPointImpl coming from XML deserialization\n         if (ri.useFormerLifecycleManagement()) {\n             // Extension point needing to load contribution are ExtensionPointImpl\n-            ri.getExtensionPoint(xt.getExtensionPoint())\n-              .filter(xp -> xp.getContributions() != null)\n-              .map(ExtensionPointImpl.class::cast)\n-              .ifPresent(xp -> {\n-                  try {\n-                      Object[] contribs = xp.loadContributions(ri, xt);\n-                      xt.setContributions(contribs);\n-                  } catch (RuntimeException e) {\n-                      ComponentName compName = xt.getComponent().getName();\n-                      handleError(\"Failed to load contributions for component \" + compName, compName.getName(), e);\n-                  }\n-              });\n+            ri.getExtensionPoint(xt.getExtensionPoint()).filter(xp -> xp.getContributions() != null).ifPresent(xp -> {\n+                try {\n+                    // should compute now the contributions\n+                    Class<?>[] contributions = xp.getContributions();\n+                    if (contributions != null) {\n+                        Context xctx = new XMapContext(xt.getContext());\n+                        Registry registry = getOrCreateRegistry(ri.getName().getName(), xp);\n+                        String marker = xt.getId();\n+                        if (registry.isNull()) {\n+                            // backward compatibility", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc2MTU4OQ=="}, "originalCommit": {"oid": "0368c109476c4c9d15856f46f48710e4a39786e3"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4282, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}