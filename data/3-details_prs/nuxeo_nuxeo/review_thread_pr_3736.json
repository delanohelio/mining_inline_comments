{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMTQyOTQ4", "number": 3736, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0MTozOVrODkRUVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyODowOFrODkVW7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzU5MDYyOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/RetentionConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0MTozOVrOFwf4Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0MTozOVrOFwf4Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5ODIzOA==", "bodyText": "RULES_CONTAINER_TYPE  -> seems unused", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386398238", "createdAt": "2020-03-02T13:41:39Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/RetentionConstants.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention;\n+\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionConstants {\n+\n+    public static final String RULES_CONTAINER_TYPE = \"RetentionRules\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzYxMTcxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/HoldDocumentsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0ODoxMlrOFwgE2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0ODoxMlrOFwgE2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMTQ5OQ==", "bodyText": "can be replaced by the use of List.of", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386401499", "createdAt": "2020-03-02T13:48:12Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/HoldDocumentsAction.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to set legal hold.\n+ *\n+ * @since 11.1\n+ */\n+public class HoldDocumentsAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"holdDocumentsAction\";\n+\n+    public static final String PARAM_DESC = \"description\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(SetLegalHoldComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzYxNTM4OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/AttachRetentionRuleAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0OToxN1rOFwgHAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0OToxN1rOFwgHAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMjA1MA==", "bodyText": "can be replaced by List.of", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386402050", "createdAt": "2020-03-02T13:49:17Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/AttachRetentionRuleAction.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to attach a retention rule.\n+ *\n+ * @since 11.1\n+ */\n+public class AttachRetentionRuleAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"attachRetentionRule\";\n+\n+    public static final String PARAM_RULE_ID = \"ruleId\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(EvaluateRuleComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzYyNDE3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo1MTo1NVrOFwgMYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo1MTo1NVrOFwgMYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMzQyNw==", "bodyText": "a event-based -> an event-based", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386403427", "createdAt": "2020-03-02T13:51:55Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to evaluate expression on record documents with an attached event-based retention rule. Depending on the\n+ * expression evaluation outcome, a determinate retention period is computed and set on the record document.\n+ *\n+ * @since 11.1\n+ */\n+public class EvalInputEventBasedRuleAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"evalInputEventBasedRule\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(EvalInputEventBasedRuleComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class EvalInputEventBasedRuleComputation extends AbstractBulkComputation {\n+\n+        private static final Logger log = LogManager.getLogger(EvalInputEventBasedRuleComputation.class);\n+\n+        protected boolean disableAudit;\n+\n+        protected RetentionManager retentionManager;\n+\n+        public EvalInputEventBasedRuleComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER);\n+            disableAudit = auditParam != null && Boolean.parseBoolean(auditParam.toString());\n+            retentionManager = Framework.getService(RetentionManager.class);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            for (DocumentModel recordDoc : loadDocuments(session, ids)) {\n+                if (!recordDoc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+                    log.debug(\"Document {} is not a record, ignoring ...\", recordDoc::getPathAsString);\n+                    continue;\n+                }\n+                Record record = recordDoc.getAdapter(Record.class);\n+                if (!record.isRetentionIndeterminate()) {\n+                    log.debug(\"Record {} has already a determinate retention date {}, ignoring ...\",\n+                            recordDoc::getPathAsString,\n+                            () -> (recordDoc.getRetainUntil() == null ? null : recordDoc.getRetainUntil().toInstant()));\n+                    continue;\n+                }\n+                RetentionRule rule = record.getRule(session);\n+                if (!rule.isEventBased()) {\n+                    log.debug(\"Record {} does not have a event-based rule, ignoring ...\", recordDoc::getPathAsString);\n+                    continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzY0MzAwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/ProcessRetentionEventAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo1NzoyM1rOFwgX_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo1NzoyM1rOFwgX_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNjM5OA==", "bodyText": "org.nuxeo.ecm.core.bulk.message.BulkCommand.Builder#Builder(java.lang.String, java.lang.String) is a deprecated constructor, we can replace it by:\nBulkCommand command = new BulkCommand.Builder(EvalInputEventBasedRuleAction.ACTION_NAME,\n                        query.toString(), SecurityConstants.SYSTEM_USERNAME).repository(repositoryName).build();", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386406398", "createdAt": "2020-03-02T13:57:23Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/ProcessRetentionEventAction.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.actions;\n+\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.repository.RepositoryService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * Bulk action to retrieve event-based retention rules. For each rule, a\n+ * {@link org.nuxeo.retention.actions.EvalInputEventBasedRuleAction} is scheduled.\n+ *\n+ * @since 11.1\n+ */\n+public class ProcessRetentionEventAction implements StreamProcessorTopology {\n+\n+    public static final String ACTION_NAME = \"processRetentionEvent\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(ProcessRetentionEventComputation::new,\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class ProcessRetentionEventComputation extends AbstractBulkComputation {\n+\n+        private static final Logger log = LogManager.getLogger(ProcessRetentionEventComputation.class);\n+\n+        protected boolean disableAudit;\n+\n+        protected RetentionManager retentionManager;\n+\n+        public ProcessRetentionEventComputation() {\n+            super(ACTION_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            Serializable auditParam = command.getParam(NXAuditEventsService.DISABLE_AUDIT_LOGGER);\n+            disableAudit = auditParam != null && Boolean.parseBoolean(auditParam.toString());\n+            retentionManager = Framework.getService(RetentionManager.class);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            for (DocumentModel ruleDoc : loadDocuments(session, ids)) {\n+                if (!ruleDoc.hasFacet(RetentionConstants.RETENTION_RULE_FACET)) {\n+                    log.debug(\"Document {} is not a retention rule, ignoring ...\", ruleDoc::getPathAsString);\n+                    continue;\n+                }\n+                RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+                scheduleInputEventBasedRule(rule);\n+            }\n+        }\n+\n+        protected void scheduleInputEventBasedRule(RetentionRule rule) {\n+            if (!rule.isEnabled() || !rule.isEventBased()) {\n+                throw new IllegalArgumentException(\"Rule is disabled or not event-based\");\n+            }\n+            BulkService bulkService = Framework.getService(BulkService.class);\n+            RepositoryService repositoryService = Framework.getService(RepositoryService.class);\n+            StringBuilder query = new StringBuilder(RetentionConstants.RULE_RECORD_DOCUMENT_QUERY);\n+            query.append(\" AND \") //\n+                 .append(RetentionConstants.RECORD_RULE_IDS_PROP) //\n+                 .append(\" = '\" + rule.getDocument().getId() + \"'\");\n+            for (String repositoryName : repositoryService.getRepositoryNames()) {\n+                BulkCommand command = new BulkCommand.Builder(EvalInputEventBasedRuleAction.ACTION_NAME,\n+                        query.toString()).user(SecurityConstants.SYSTEM_USERNAME).repository(repositoryName).build();\n+                bulkService.submit(command);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzY3MjQwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowNTo1M1rOFwgpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowNTo1M1rOFwgpvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxMDk0MQ==", "bodyText": "can be replaced by the shorted version:\n public Calendar getSavedRetainUntil() {\n        return (Calendar) document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n    }", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386410941", "createdAt": "2020-03-02T14:05:53Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzY5MjUwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxMToyNVrOFwg10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxNzoyOVrOFwhDCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNDAzNQ==", "bodyText": "perhaps the shorted version:\n return getDocument().isUnderRetentionOrLegalHold()\n                && CoreSession.RETAIN_UNTIL_INDETERMINATE.compareTo(getDocument().getRetainUntil()) == 0;", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386414035", "createdAt": "2020-03-02T14:11:25Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetentionIndeterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        if (retainUntil == null) {\n+            return false;\n+        }\n+        return retainUntil.compareTo(CoreSession.RETAIN_UNTIL_INDETERMINATE) == 0;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNTY1MA==", "bodyText": "No, we want to do the fast path getDocument().getRetainUntil() == null first, because Calendar.compareTo is much more expensive.", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386415650", "createdAt": "2020-03-02T14:14:30Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetentionIndeterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        if (retainUntil == null) {\n+            return false;\n+        }\n+        return retainUntil.compareTo(CoreSession.RETAIN_UNTIL_INDETERMINATE) == 0;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNDAzNQ=="}, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNjY0NA==", "bodyText": "And anyway Calendar.compareTo(null) throws a NPE.", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386416644", "createdAt": "2020-03-02T14:16:09Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetentionIndeterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        if (retainUntil == null) {\n+            return false;\n+        }\n+        return retainUntil.compareTo(CoreSession.RETAIN_UNTIL_INDETERMINATE) == 0;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNDAzNQ=="}, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNzQxOQ==", "bodyText": "you are right, initially i was going to use equals and just copy past the wrong proposition.\nthx", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386417419", "createdAt": "2020-03-02T14:17:29Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetentionIndeterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        if (retainUntil == null) {\n+            return false;\n+        }\n+        return retainUntil.compareTo(CoreSession.RETAIN_UNTIL_INDETERMINATE) == 0;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNDAzNQ=="}, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzcwMDUyOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxMzo0N1rOFwg61g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxNzo1NFrOFwhD5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNTMxOA==", "bodyText": "wdyt about:\n Calendar retainUntil = getDocument().getRetainUntil();\n        return (retainUntil == null || !Calendar.getInstance().before(retainUntil));", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386415318", "createdAt": "2020-03-02T14:13:47Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetentionIndeterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        if (retainUntil == null) {\n+            return false;\n+        }\n+        return retainUntil.compareTo(CoreSession.RETAIN_UNTIL_INDETERMINATE) == 0;\n+    }\n+\n+    public boolean isRetentionExpired() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return true;\n+        }\n+        Calendar retainUntil;\n+        return (retainUntil = getDocument().getRetainUntil()) == null || !Calendar.getInstance().before(retainUntil);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNzYzNw==", "bodyText": "Why not. OTOH all this is a forward-port of something already in 10.10 so it's best not to have gratuitous changes between the branches.", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386417637", "createdAt": "2020-03-02T14:17:54Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/Record.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.versioning.VersioningService;\n+import org.nuxeo.ecm.platform.audit.service.NXAuditEventsService;\n+import org.nuxeo.ecm.platform.dublincore.listener.DublinCoreListener;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Record {\n+\n+    private static final Logger log = LogManager.getLogger(Record.class);\n+\n+    protected DocumentModel document;\n+\n+    public Record(final DocumentModel doc) {\n+        document = doc;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public RetentionRule getRule(CoreSession session) {\n+        List<String> ruleIds = getRuleIds();\n+        if (ruleIds == null) {\n+            return null;\n+        }\n+        for (String ruleId : ruleIds) {\n+            IdRef ruleRef = new IdRef(ruleId);\n+            if (!session.exists(ruleRef)) {\n+                log.trace(\"Rule {} does not exist\", ruleRef);\n+                continue;\n+            }\n+            DocumentModel ruleDoc = session.getDocument(ruleRef);\n+            RetentionRule rule = ruleDoc.getAdapter(RetentionRule.class);\n+            if (!rule.isEnabled()) {\n+                log.debug(\"Rule {} id disabled\", ruleDoc::getPathAsString);\n+                continue;\n+            }\n+            return rule;\n+        }\n+        log.debug(\"No active rules found for {}\", document::getPathAsString);\n+        return null;\n+\n+    }\n+\n+    protected List<String> getRuleIds() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.RECORD_RULE_IDS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public Calendar getSavedRetainUntil() {\n+        Serializable savedRetainUntil = document.getPropertyValue(RetentionConstants.RETAIN_UNTIL_PROP);\n+        if (savedRetainUntil != null) {\n+            return (Calendar) savedRetainUntil;\n+        }\n+        return null;\n+    }\n+\n+    public boolean isRetentionIndeterminate() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return false;\n+        }\n+        Calendar retainUntil = getDocument().getRetainUntil();\n+        if (retainUntil == null) {\n+            return false;\n+        }\n+        return retainUntil.compareTo(CoreSession.RETAIN_UNTIL_INDETERMINATE) == 0;\n+    }\n+\n+    public boolean isRetentionExpired() {\n+        if (!getDocument().isUnderRetentionOrLegalHold()) {\n+            return true;\n+        }\n+        Calendar retainUntil;\n+        return (retainUntil = getDocument().getRetainUntil()) == null || !Calendar.getInstance().before(retainUntil);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNTMxOA=="}, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzcyMjEzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionAdapterFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxOToyNFrOFwhHWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNToxMDo1N1rOFwjCiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODUyMQ==", "bodyText": "can be replaced by:\n        if (doc.hasFacet(RetentionConstants.RETENTION_RULE_FACET)) {\n            return new RetentionRule(doc);\n        } else if (doc.hasFacet(RetentionConstants.RECORD_FACET)) {\n            return new Record(doc);\n        }\n        return null;\n\nto avoid the third branch", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386418521", "createdAt": "2020-03-02T14:19:24Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionAdapterFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.adapter.DocumentAdapterFactory;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionAdapterFactory implements DocumentAdapterFactory {\n+\n+    @Override\n+    public Object getAdapter(DocumentModel doc, Class<?> itf) {\n+        if (doc.hasFacet(RetentionConstants.RETENTION_RULE_FACET)) {\n+            return new RetentionRule(doc);\n+        } else if (doc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+            return new Record(doc);\n+        } else {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1MDA1Nw==", "bodyText": "This is 100% equivalent and generates the same bytecode, I'm not sure in what way it's better. It's just style.", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386450057", "createdAt": "2020-03-02T15:10:57Z", "author": {"login": "efge"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionAdapterFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.adapter.DocumentAdapterFactory;\n+import org.nuxeo.retention.RetentionConstants;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionAdapterFactory implements DocumentAdapterFactory {\n+\n+    @Override\n+    public Object getAdapter(DocumentModel doc, Class<?> itf) {\n+        if (doc.hasFacet(RetentionConstants.RETENTION_RULE_FACET)) {\n+            return new RetentionRule(doc);\n+        } else if (doc.hasFacet(RetentionConstants.RECORD_FACET)) {\n+            return new Record(doc);\n+        } else {\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxODUyMQ=="}, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzczODUzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMzoyMFrOFwhQvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyMzoyMFrOFwhQvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyMDkyNw==", "bodyText": "can be replaced by return ApplicationPolicy.MANUAL.name().equalsIgnoreCase(getApplicationPolicy());", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386420927", "createdAt": "2020-03-02T14:23:20Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionRule {\n+\n+    public enum ApplicationPolicy {\n+        AUTO, MANUAL\n+    }\n+\n+    public enum StartingPointPolicy {\n+        IMMEDIATE, AFTER_DELAY, EVENT_BASED, METADATA_BASED;\n+    }\n+\n+    protected DocumentModel document;\n+\n+    public RetentionRule(DocumentModel doc) {\n+        this.document = doc;\n+    }\n+\n+    public void disable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, false);\n+    }\n+\n+    public void enable() {\n+        document.setPropertyValue(RetentionConstants.ENABLED_PROP, true);\n+    }\n+\n+    public String getApplicationPolicy() {\n+        return (String) document.getPropertyValue(RetentionConstants.APPLICATION_POLICY_PROP);\n+    }\n+\n+    public List<String> getBeginActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.BEGIN_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public List<String> getDocTypes() {\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> propertyValue = (List<String>) document.getPropertyValue(RetentionConstants.DOC_TYPES_PROP);\n+        return propertyValue;\n+    }\n+\n+    public DocumentModel getDocument() {\n+        return document;\n+    }\n+\n+    public long getDurationDays() {\n+        Long days = (Long) document.getPropertyValue(RetentionConstants.DURATION_DAYS_PROP);\n+        return days == null ? 0 : days;\n+    }\n+\n+    public long getDurationMillis() {\n+        Long millis = (Long) document.getPropertyValue(RetentionConstants.DURATION_MILLIS_PROP);\n+        return millis == null ? 0 : millis;\n+    }\n+\n+    public long getDurationMonths() {\n+        Long months = (Long) document.getPropertyValue(RetentionConstants.DURATION_MONTHS_PROP);\n+        return months == null ? 0 : months;\n+    }\n+\n+    public long getDurationYears() {\n+        Long years = (Long) document.getPropertyValue(RetentionConstants.DURATION_YEARS_PROP);\n+        return years == null ? 0 : years;\n+    }\n+\n+    public List<String> getEndActions() {\n+        Serializable propertyValue = document.getPropertyValue(RetentionConstants.END_ACTIONS_PROP);\n+        if (propertyValue == null) {\n+            return Collections.emptyList();\n+        }\n+        return Arrays.asList((String[]) propertyValue);\n+    }\n+\n+    public String getExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.EXPRESSION_PROP);\n+    }\n+\n+    public String getMetadataXpath() {\n+        return (String) document.getPropertyValue(RetentionConstants.METADATA_XPATH_PROP);\n+    }\n+\n+    public Calendar getRetainUntilDateFrom(Calendar calendar) {\n+        LocalDateTime datetime = LocalDateTime.ofInstant(calendar.getTime().toInstant(), ZoneId.systemDefault());\n+        return getRetainUntilDateFrom(datetime);\n+    }\n+\n+    protected Calendar getRetainUntilDateFrom(LocalDateTime datetime) {\n+        LocalDateTime localDateTime = datetime.plusYears(getDurationYears())\n+                                              .plusMonths(getDurationMonths())\n+                                              .plusDays(getDurationDays())\n+                                              .plus(getDurationMillis(), ChronoUnit.MILLIS);\n+        return GregorianCalendar.from(localDateTime.atZone(ZoneId.systemDefault()));\n+    }\n+\n+    public Calendar getRetainUntilDateFromNow() {\n+        return getRetainUntilDateFrom(LocalDateTime.now());\n+    }\n+\n+    public String getStartingPointEvent() {\n+        return (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_EVENT_PROP);\n+    }\n+\n+    public String getStartingPointExpression() {\n+        return (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_EXPRESSION_PROP);\n+    }\n+\n+    public StartingPointPolicy getStartingPointPolicy() {\n+        String value = (String) document.getPropertyValue(RetentionConstants.STARTING_POINT_POLICY_PROP);\n+        if (value != null) {\n+            return StartingPointPolicy.valueOf(value.toUpperCase());\n+        }\n+        return null;\n+\n+    }\n+\n+    public boolean isAfterDelay() {\n+        return StartingPointPolicy.AFTER_DELAY.equals(getStartingPointPolicy());\n+    }\n+\n+    public boolean isAuto() {\n+        return ApplicationPolicy.AUTO.name().toLowerCase().equals(getApplicationPolicy());\n+    }\n+\n+    public boolean isDocTypeAccepted(String docType) {\n+        List<String> types = getDocTypes();\n+        return types == null || types.isEmpty() || types.contains(docType);\n+    }\n+\n+    public boolean isEnabled() {\n+        Boolean enabled = (Boolean) document.getPropertyValue(RetentionConstants.ENABLED_PROP);\n+        return Boolean.TRUE.equals(enabled);\n+    }\n+\n+    public boolean isEventBased() {\n+        return getStartingPointPolicy() == StartingPointPolicy.EVENT_BASED;\n+    }\n+\n+    public boolean isImmediate() {\n+        return getStartingPointPolicy() == StartingPointPolicy.IMMEDIATE;\n+    }\n+\n+    public boolean isManual() {\n+        return ApplicationPolicy.MANUAL.name().toLowerCase().equals(getApplicationPolicy());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mzc0NDcwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyNDo1NlrOFwhUeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoyNDo1NlrOFwhUeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyMTg4MA==", "bodyText": "the semicolon is not required when there is no members in the enum", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386421880", "createdAt": "2020-03-02T14:24:56Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/adapters/RetentionRule.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.adapters;\n+\n+import java.io.Serializable;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.GregorianCalendar;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionRule {\n+\n+    public enum ApplicationPolicy {\n+        AUTO, MANUAL\n+    }\n+\n+    public enum StartingPointPolicy {\n+        IMMEDIATE, AFTER_DELAY, EVENT_BASED, METADATA_BASED;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mzc4NjYzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/AttachRetentionRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDozNTo0OVrOFwhtpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0NDo0MVrOFyOq2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyODMyNQ==", "bodyText": "I am wondering if we need these checks in org.nuxeo.retention.service.RetentionManagerImpl#checkCanAttachRule ?", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386428325", "createdAt": "2020-03-02T14:35:49Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/AttachRetentionRule.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.operations;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Operation(id = AttachRetentionRule.ID, category = Constants.CAT_DOCUMENT, label = \"Attach Retation Rule\", description = \"Attach the given retetention rule to the input document.\")\n+public class AttachRetentionRule {\n+\n+    public static final String ID = \"Retention.AttachRule\";\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @Context\n+    protected RetentionManager retentionManager;\n+\n+    @Param(name = \"rule\")\n+    protected DocumentModel rule;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentModel document) {\n+        if (!rule.hasFacet(RetentionConstants.RETENTION_RULE_FACET)) {\n+            throw new NuxeoException(\"Document is not a rule: \" + document);\n+        }\n+        RetentionRule rr = rule.getAdapter(RetentionRule.class);\n+        if (!rr.isManual()) {\n+            throw new IllegalArgumentException(\"Only manual rule can be manually attached\");\n+        }\n+        document = retentionManager.attachRule(document, rr, session);\n+        return document;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMzQ2Nw==", "bodyText": "We'll probably see that when we'll be implementing auto attachment later on.", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r388213467", "createdAt": "2020-03-05T10:44:41Z", "author": {"login": "guirenard"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/AttachRetentionRule.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.operations;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.service.RetentionManager;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Operation(id = AttachRetentionRule.ID, category = Constants.CAT_DOCUMENT, label = \"Attach Retation Rule\", description = \"Attach the given retetention rule to the input document.\")\n+public class AttachRetentionRule {\n+\n+    public static final String ID = \"Retention.AttachRule\";\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @Context\n+    protected RetentionManager retentionManager;\n+\n+    @Param(name = \"rule\")\n+    protected DocumentModel rule;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentModel document) {\n+        if (!rule.hasFacet(RetentionConstants.RETENTION_RULE_FACET)) {\n+            throw new NuxeoException(\"Document is not a rule: \" + document);\n+        }\n+        RetentionRule rr = rule.getAdapter(RetentionRule.class);\n+        if (!rr.isManual()) {\n+            throw new IllegalArgumentException(\"Only manual rule can be manually attached\");\n+        }\n+        document = retentionManager.attachRule(document, rr, session);\n+        return document;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyODMyNQ=="}, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzgwNjE1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/UnholdDocument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo0MDo1MVrOFwh5dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1NzozOVrOFyPFXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzMTM1MA==", "bodyText": "I am wondering about these different operations, if we need to add the management of the save or not. I had the remark on my operations for Glacier PRs, it's why I ask :):\n@Param(name = \"save\", required = false, values = \"false\")", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386431350", "createdAt": "2020-03-02T14:40:51Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/UnholdDocument.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.operations;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Operation(id = UnholdDocument.ID, category = Constants.CAT_DOCUMENT, label = \"Unhold\", description = \"Remove a legal hold on the input document. Returns back the unhold document.\")\n+public class UnholdDocument {\n+\n+    public static final String ID = \"Document.Unhold\";\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentRef doc) {\n+        session.setLegalHold(doc, false, null);\n+        return session.getDocument(doc);\n+    }\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentModel doc) {\n+        return run(doc.getRef());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMDI1NQ==", "bodyText": "Let's keep the same API than on 10.10 for now. If we identify use cases where it will needed, we'll change on both 10.10 and master with a dedicated JIRA ticket", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r388220255", "createdAt": "2020-03-05T10:57:39Z", "author": {"login": "guirenard"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/operations/UnholdDocument.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.operations;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Operation(id = UnholdDocument.ID, category = Constants.CAT_DOCUMENT, label = \"Unhold\", description = \"Remove a legal hold on the input document. Returns back the unhold document.\")\n+public class UnholdDocument {\n+\n+    public static final String ID = \"Document.Unhold\";\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentRef doc) {\n+        session.setLegalHold(doc, false, null);\n+        return session.getDocument(doc);\n+    }\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentModel doc) {\n+        return run(doc.getRef());\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzMTM1MA=="}, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzgyNTEwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo0NTo0NlrOFwiE8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTowNzo1MFrOFyPZ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzNDI5MA==", "bodyText": "currently the invalidate method seems unused", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386434290", "createdAt": "2020-03-02T14:45:46Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManager.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.service;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * Retention service.\n+ *\n+ * @since 11.1\n+ */\n+public interface RetentionManager {\n+\n+    /**\n+     * Attaches a retention rule on a document. Only\n+     * {@link org.nuxeo.retention.adapters.RetentionRule.ApplicationPolicy#MANUAL} rules can be attached through this\n+     * method. Depending on the {@link org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy}. The document is\n+     * turned into a record and a retention date is computed according to the rule's\n+     * {@link org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy} and settings.\n+     *\n+     * @param document the document\n+     * @param rule the retention rule\n+     * @param session the core session\n+     * @return the record document with a retention expiration date\n+     * @since 11.1\n+     */\n+    DocumentModel attachRule(DocumentModel document, RetentionRule rule, CoreSession session);\n+\n+    /**\n+     * Checks that the session has sufficient permission to attach the rule to the document.\n+     *\n+     * @param document the document\n+     * @param rule the rule\n+     * @param session the session\n+     * @return\n+     * @since 11.1\n+     */\n+    boolean canAttachRule(DocumentModel document, RetentionRule rule, CoreSession session);\n+\n+    /**\n+     * Triggers the evaluation of event-based retention rules that may be attached to the document ids.\n+     *\n+     * @param docsToCheckAndEvents map of document ids and set of events\n+     * @since 11.1\n+     */\n+    void evalRules(Map<String, Set<String>> docsToCheckAndEvents);\n+\n+    /**\n+     * Evaluates the event-based retention rules that may be attached to the given record document.\n+     *\n+     * @param record the record document\n+     * @param events the set of events\n+     * @param session the session\n+     * @since 11.1\n+     */\n+    void evalExpressionEventBasedRules(Record record, Set<String> events, CoreSession session);\n+\n+    /**\n+     * Returns the list of accepted platform core events for event-based retention rules.\n+     *\n+     * @return the list of accepted events.\n+     * @since 11.1\n+     */\n+    List<String> getAcceptedEvents();\n+\n+    /**\n+     * Invalidate service (useful in a test context).\n+     *\n+     * @since 11.1\n+     */\n+    void invalidate();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNTQ5Ng==", "bodyText": "True, but it may be useful for some custom developments", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r388225496", "createdAt": "2020-03-05T11:07:50Z", "author": {"login": "guirenard"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManager.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.service;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * Retention service.\n+ *\n+ * @since 11.1\n+ */\n+public interface RetentionManager {\n+\n+    /**\n+     * Attaches a retention rule on a document. Only\n+     * {@link org.nuxeo.retention.adapters.RetentionRule.ApplicationPolicy#MANUAL} rules can be attached through this\n+     * method. Depending on the {@link org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy}. The document is\n+     * turned into a record and a retention date is computed according to the rule's\n+     * {@link org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy} and settings.\n+     *\n+     * @param document the document\n+     * @param rule the retention rule\n+     * @param session the core session\n+     * @return the record document with a retention expiration date\n+     * @since 11.1\n+     */\n+    DocumentModel attachRule(DocumentModel document, RetentionRule rule, CoreSession session);\n+\n+    /**\n+     * Checks that the session has sufficient permission to attach the rule to the document.\n+     *\n+     * @param document the document\n+     * @param rule the rule\n+     * @param session the session\n+     * @return\n+     * @since 11.1\n+     */\n+    boolean canAttachRule(DocumentModel document, RetentionRule rule, CoreSession session);\n+\n+    /**\n+     * Triggers the evaluation of event-based retention rules that may be attached to the document ids.\n+     *\n+     * @param docsToCheckAndEvents map of document ids and set of events\n+     * @since 11.1\n+     */\n+    void evalRules(Map<String, Set<String>> docsToCheckAndEvents);\n+\n+    /**\n+     * Evaluates the event-based retention rules that may be attached to the given record document.\n+     *\n+     * @param record the record document\n+     * @param events the set of events\n+     * @param session the session\n+     * @since 11.1\n+     */\n+    void evalExpressionEventBasedRules(Record record, Set<String> events, CoreSession session);\n+\n+    /**\n+     * Returns the list of accepted platform core events for event-based retention rules.\n+     *\n+     * @return the list of accepted events.\n+     * @since 11.1\n+     */\n+    List<String> getAcceptedEvents();\n+\n+    /**\n+     * Invalidate service (useful in a test context).\n+     *\n+     * @since 11.1\n+     */\n+    void invalidate();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzNDI5MA=="}, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mzg2OTUxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo1Njo0MlrOFwigNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo1Njo0MlrOFwigNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0MTI3MQ==", "bodyText": "redundant declaration here: DocumentModel groupModel = userManager.getBareGroupModel();   and groupModel = userManager.getBareGroupModel();", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386441271", "createdAt": "2020-03-02T14:56:42Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/service/RetentionManagerImpl.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.service;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jboss.el.ExpressionFactoryImpl;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.document.DeleteDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.LockDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.TrashDocument;\n+import org.nuxeo.ecm.automation.core.operations.document.UnlockDocument;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.api.event.CoreEventConstants;\n+import org.nuxeo.ecm.core.api.event.DocumentEventCategories;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.security.SecurityConstants;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.schema.types.primitives.DateType;\n+import org.nuxeo.ecm.core.work.api.WorkManager;\n+import org.nuxeo.ecm.directory.Directory;\n+import org.nuxeo.ecm.directory.Session;\n+import org.nuxeo.ecm.directory.api.DirectoryService;\n+import org.nuxeo.ecm.platform.actions.ELActionContext;\n+import org.nuxeo.ecm.platform.el.ExpressionContext;\n+import org.nuxeo.ecm.platform.usermanager.UserManager;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.workers.RuleEvaluationWorker;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RetentionManagerImpl extends DefaultComponent implements RetentionManager {\n+\n+    private static final Logger log = LogManager.getLogger(RetentionManagerImpl.class);\n+\n+    @Override\n+    public DocumentModel attachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        checkCanAttachRule(document, rule, session);\n+        session.makeRecord(document.getRef());\n+        final Calendar retainUntil;\n+        if (rule.isImmediate()) {\n+            retainUntil = rule.getRetainUntilDateFromNow();\n+            log.debug(\"Attaching immediate rule until {}\", retainUntil::toInstant);\n+        } else if (rule.isAfterDelay()) {\n+            log.debug(\"Attaching after delay rule\");\n+            throw new UnsupportedOperationException(\"After delay not yet implemented\");\n+        } else if (rule.isEventBased()) {\n+            retainUntil = CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+            log.debug(\"Attaching event-based rule on {} matching \\\"{}\\\"\", rule::getStartingPointEvent,\n+                    rule::getStartingPointExpression);\n+        } else if (rule.isMetadataBased()) {\n+            String xpath = rule.getMetadataXpath();\n+            if (StringUtils.isBlank(xpath)) {\n+                throw new NuxeoException(\"Metadata field is null\");\n+            }\n+            Property prop = document.getProperty(xpath);\n+            if (!(prop.getType() instanceof DateType)) {\n+                throw new NuxeoException(\n+                        String.format(\"Field %s of type %s is expected to have a DateType\", xpath, prop.getType()));\n+            }\n+            Calendar value = (Calendar) prop.getValue();\n+            if (value != null) {\n+                Calendar retainUntilCandidate = rule.getRetainUntilDateFrom(value);\n+                Calendar now = Calendar.getInstance();\n+                if (now.after(retainUntilCandidate)) {\n+                    log.info(\n+                            \"Metabased-based rule found past date {} as retention expiration date on {} from {} property. Ignoring...\",\n+                            retainUntilCandidate::toInstant,\n+                            document::getPathAsString, () -> xpath);\n+                    retainUntil = null;\n+                } else {\n+                    retainUntil = retainUntilCandidate;\n+                    log.debug(\"Attaching rule based on {} with value {}\", () -> xpath, retainUntil::toInstant);\n+                }\n+            } else {\n+                retainUntil = null;\n+                log.info(\"Attaching rule based on {}: empty value\", xpath);\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Unknown starting point policy: \" + rule.getStartingPointPolicy());\n+        }\n+        document.addFacet(RetentionConstants.RECORD_FACET);\n+        Record record = document.getAdapter(Record.class);\n+        record.setRule(rule, session);\n+        executeRuleBeginActions(record, session);\n+        if (retainUntil != null) {\n+            session.setRetainUntil(document.getRef(), retainUntil, null);\n+        }\n+        notifyAttachRule(record, rule, session);\n+        return session.getDocument(document.getRef());\n+    }\n+\n+    protected void notifyAttachRule(Record record, RetentionRule rule, CoreSession session) {\n+        DocumentModel doc = record.getDocument();\n+        DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+        ctx.setProperty(CoreEventConstants.REPOSITORY_NAME, session.getRepositoryName());\n+        ctx.setProperty(CoreEventConstants.SESSION_ID, session.getSessionId());\n+        ctx.setProperty(DocumentEventContext.CATEGORY_PROPERTY_KEY, DocumentEventCategories.EVENT_DOCUMENT_CATEGORY);\n+        ctx.setProperty(DocumentEventContext.COMMENT_PROPERTY_KEY, rule.getDocument().getPathAsString());\n+        Event event = ctx.newEvent(RetentionConstants.RULE_ATTACHED_EVENT);\n+        Framework.getService(EventService.class).fireEvent(event);\n+    }\n+\n+    protected void checkCanAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        NuxeoPrincipal principal = session.getPrincipal();\n+        if (!principal.isAdministrator() && !principal.isMemberOf(RetentionConstants.RECORD_MANAGER_GROUP_NAME)) {\n+            if (!session.hasPermission(document.getRef(), SecurityConstants.MAKE_RECORD)\n+                    || !session.hasPermission(document.getRef(), SecurityConstants.SET_RETENTION))\n+                throw new NuxeoException(\"User is not authorized to attach retention rule\", SC_FORBIDDEN);\n+        }\n+        if (!rule.isEnabled()) {\n+            throw new NuxeoException(\"Rule is disabled\");\n+        }\n+        if (!rule.isDocTypeAccepted(document.getType())) {\n+            throw new NuxeoException(\"Rule does not accept this document type\");\n+        }\n+        if (rule.isMetadataBased()) {\n+            document.getProperty(rule.getMetadataXpath());\n+            // above throw an exception if property not found\n+        }\n+        if (document.hasFacet(RetentionConstants.RECORD_FACET)) {\n+            throw new NuxeoException(\"Document is already a record\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean canAttachRule(DocumentModel document, RetentionRule rule, CoreSession session) {\n+        try {\n+            checkCanAttachRule(document, rule, session);\n+            return true;\n+        } catch (NuxeoException e) {\n+            log.info(\"Cannot attach rule {} on document {}\", () -> rule.getDocument().getPathAsString(),\n+                    document::getPathAsString);\n+            return false;\n+        }\n+    }\n+\n+    public void executeRuleBeginActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getBeginActions(), session);\n+        }\n+    }\n+\n+    public void executeRuleEndActions(Record record, CoreSession session) {\n+        RetentionRule rule = record.getRule(session);\n+        if (rule != null) {\n+            executeRuleActions(record.getDocument(), rule.getEndActions(), session);\n+        }\n+    }\n+\n+    protected void executeRuleActions(DocumentModel doc, List<String> actionIds, CoreSession session) {\n+        if (actionIds != null) {\n+            AutomationService automationService = Framework.getService(AutomationService.class);\n+            for (String operationId : actionIds) {\n+                log.debug(\"Executing {} action on {}\", () -> operationId, doc::getPathAsString);\n+                // Do not lock document if already locked, nor unlock if already unlocked (would trigger an error)\n+                // Also, if it's time to delete, unlock it first, etc.\n+                // (more generally, be ready to handle specific operations and context)\n+                switch (operationId) {\n+                case LockDocument.ID:\n+                    if (doc.isLocked()) {\n+                        continue;\n+                    }\n+                    break;\n+                case UnlockDocument.ID:\n+                    if (!doc.isLocked()) {\n+                        continue;\n+                    }\n+                    break;\n+                case DeleteDocument.ID:\n+                case TrashDocument.ID:\n+                    if (doc.isLocked()) {\n+                        session.removeLock(doc.getRef());\n+                        doc = session.getDocument(doc.getRef());\n+                    }\n+                    break;\n+                default:\n+                    throw new NuxeoException(\"Invalid operation: \" + operationId);\n+                }\n+                OperationContext context = getExecutionContext(doc, session);\n+                try {\n+                    automationService.run(context, operationId);\n+                } catch (OperationException e) {\n+                    throw new NuxeoException(\"Error running operation: \" + operationId, e);\n+                }\n+            }\n+        }\n+    }\n+\n+    protected OperationContext getExecutionContext(DocumentModel doc, CoreSession session) {\n+        OperationContext context = new OperationContext(session);\n+        context.put(\"document\", doc);\n+        context.setCommit(false); // no session save at end\n+        context.setInput(doc);\n+        return context;\n+    }\n+\n+    @Override\n+    public void evalRules(Map<String, Set<String>> docsToCheckAndEvents) {\n+        if (docsToCheckAndEvents.isEmpty()) {\n+            return;\n+        }\n+        RuleEvaluationWorker work = new RuleEvaluationWorker(docsToCheckAndEvents);\n+        Framework.getService(WorkManager.class).schedule(work, WorkManager.Scheduling.ENQUEUE);\n+    }\n+\n+    protected ELActionContext initActionContext(DocumentModel doc, CoreSession session) {\n+        ELActionContext ctx = new ELActionContext(new ExpressionContext(), new ExpressionFactoryImpl());\n+        ctx.setCurrentPrincipal(session.getPrincipal());\n+        doc.detach(true);\n+        ctx.setCurrentDocument(doc);\n+        return ctx;\n+    }\n+\n+    protected boolean evaluateConditionExpression(ELActionContext ctx, String expression) {\n+        Calendar now = Calendar.getInstance();\n+        if (StringUtils.isEmpty(expression)) {\n+            return true;\n+        }\n+        ctx.putLocalVariable(\"currentDate\", now);\n+        return ctx.checkCondition(expression);\n+    }\n+\n+    @Override\n+    public void evalExpressionEventBasedRules(Record record, Set<String> events, CoreSession session) {\n+        if (record == null) {\n+            return; // nothing to do\n+        }\n+        RetentionRule rule = record.getRule(session);\n+        if (rule == null) {\n+            return; // nothing to do\n+        }\n+        if (!rule.isEventBased()) {\n+            log.trace(\"Record is not event-based\");\n+            return;\n+        }\n+        log.debug(\"Evaluating event-based rules for record {}\", () -> record.getDocument().getPathAsString());\n+        if (record.isRetentionExpired()) {\n+            // retention expired, nothing to do\n+            log.debug(\"Evaluating event-based found retention expired\");\n+            proceedRetentionExpired(record, session);\n+            return;\n+\n+        }\n+        String startingPointEvent = rule.getStartingPointEvent();\n+        if (StringUtils.isBlank(startingPointEvent)) {\n+            log.warn(\"Evaluating event-based rules  on record {} found no event specified\",\n+                    () -> record.getDocument().getPathAsString());\n+            return;\n+        }\n+        if (events.contains(startingPointEvent)) {\n+            ELActionContext actionContext = initActionContext(record.getDocument(), session);\n+            String expression = rule.getStartingPointExpression();\n+            boolean startNow = evaluateConditionExpression(actionContext, expression);\n+            if (startNow) {\n+                session.setRetainUntil(record.getDocument().getRef(), rule.getRetainUntilDateFromNow(), null);\n+                log.debug(\"Evaluating event-based rules: expression {} matched on event {}\", expression,\n+                        startingPointEvent);\n+            } else {\n+                log.debug(\"Evaluating event-based rules: expression {} did not match on event {}\", expression,\n+                        startingPointEvent);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void proceedRetentionExpired(Record record, CoreSession session) {\n+        executeRuleEndActions(record, session);\n+    }\n+\n+    protected volatile List<String> acceptedEvents; // NOSONAR double-checked locking\n+\n+    @Override\n+    public List<String> getAcceptedEvents() {\n+        if (acceptedEvents == null) {\n+            synchronized (this) {\n+                if (acceptedEvents == null) {\n+                    DirectoryService directoryService = Framework.getService(DirectoryService.class);\n+                    Directory dir = directoryService.getDirectory(RetentionConstants.EVENTS_DIRECTORY_NAME);\n+                    try (Session session = dir.getSession()) {\n+                        Map<String, Serializable> filter = new HashMap<>();\n+                        filter.put(RetentionConstants.OBSOLETE_FIELD_ID, Long.valueOf(0));\n+                        List<String> evts = session.getProjection(filter, session.getIdField());\n+                        if (evts.isEmpty()) {\n+                            log.trace(\"Empty accepted events, not catching anything\");\n+                            return evts;\n+                        }\n+                        acceptedEvents = evts;\n+                        log.debug(\"Accepted events {}\", acceptedEvents::toString);\n+                    }\n+                }\n+\n+            }\n+        }\n+        return acceptedEvents;\n+    }\n+\n+    @Override\n+    public void invalidate() {\n+        synchronized (this) {\n+            acceptedEvents = null;\n+        }\n+    }\n+\n+    @Override\n+    public void start(ComponentContext context) {\n+        Framework.doPrivileged(() -> {\n+            UserManager userManager = Framework.getService(UserManager.class);\n+            if (userManager.getGroup(RetentionConstants.RECORD_MANAGER_GROUP_NAME) == null) {\n+                DocumentModel groupModel = userManager.getBareGroupModel();\n+                String groupSchemaName = userManager.getGroupSchemaName();\n+                groupModel = userManager.getBareGroupModel();\n+                groupModel.setPropertyValue(userManager.getGroupIdField(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 353}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA0MzQ0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTozOToyNFrOFwkK8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTozOToyNFrOFwkK8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2ODU5Mw==", "bodyText": "can we rename the string -> docId for more clarity", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386468593", "createdAt": "2020-03-02T15:39:24Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.workers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.repository.RepositoryManager;\n+import org.nuxeo.ecm.core.work.AbstractWork;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Worker scheduled to proceed {@link org.nuxeo.retention.service.RetentionManager#evalExpressionEventBasedRules}\n+ * on document ids with events set.\n+ *\n+ * @since 11.1\n+ */\n+public class RuleEvaluationWorker extends AbstractWork {\n+\n+    private static final Logger log = LogManager.getLogger(RuleEvaluationWorker.class);\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TITLE = \"Retention Rule Evaluation Work\";\n+\n+    public static final String CATEGORY = \"retentionRuleWork\";\n+\n+    protected final Map<String, Set<String>> docsToCheckAndEvents;\n+\n+    public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) {\n+        this.docsToCheckAndEvents = docsToCheckAndEvents;\n+        List<String> docs = new ArrayList<>();\n+        docs.addAll(docsToCheckAndEvents.keySet());\n+        setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs);\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return TITLE;\n+    }\n+\n+    @Override\n+    public String getCategory() {\n+        return CATEGORY;\n+    }\n+\n+    @Override\n+    public void work() {\n+        openSystemSession();\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        for (String string : docIds) {\n+            DocumentModel doc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA1OTYxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0MzoxOFrOFwkU_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0OToyMlrOFyO0fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MTE2Ng==", "bodyText": "Perhaps I asked the question when I reviewed the 10.10 version,  what if we use session.exists(...):\n           if(!session.exists(new IdRef(string))) {\n                log.warn(\"Document impacted by retention no longer exists {}\", string);\n                continue;\n            }", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386471166", "createdAt": "2020-03-02T15:43:18Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.workers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.repository.RepositoryManager;\n+import org.nuxeo.ecm.core.work.AbstractWork;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Worker scheduled to proceed {@link org.nuxeo.retention.service.RetentionManager#evalExpressionEventBasedRules}\n+ * on document ids with events set.\n+ *\n+ * @since 11.1\n+ */\n+public class RuleEvaluationWorker extends AbstractWork {\n+\n+    private static final Logger log = LogManager.getLogger(RuleEvaluationWorker.class);\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TITLE = \"Retention Rule Evaluation Work\";\n+\n+    public static final String CATEGORY = \"retentionRuleWork\";\n+\n+    protected final Map<String, Set<String>> docsToCheckAndEvents;\n+\n+    public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) {\n+        this.docsToCheckAndEvents = docsToCheckAndEvents;\n+        List<String> docs = new ArrayList<>();\n+        docs.addAll(docsToCheckAndEvents.keySet());\n+        setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs);\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return TITLE;\n+    }\n+\n+    @Override\n+    public String getCategory() {\n+        return CATEGORY;\n+    }\n+\n+    @Override\n+    public void work() {\n+        openSystemSession();\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        for (String string : docIds) {\n+            DocumentModel doc;\n+            try {\n+                doc = session.getDocument(new IdRef(string));\n+            } catch (DocumentNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNTkzMw==", "bodyText": "It would probably be equivalent but as mentioned let's try to keep the forward port as much similar as 10.10", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r388215933", "createdAt": "2020-03-05T10:49:22Z", "author": {"login": "guirenard"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/java/org/nuxeo/retention/workers/RuleEvaluationWorker.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.workers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.repository.RepositoryManager;\n+import org.nuxeo.ecm.core.work.AbstractWork;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Worker scheduled to proceed {@link org.nuxeo.retention.service.RetentionManager#evalExpressionEventBasedRules}\n+ * on document ids with events set.\n+ *\n+ * @since 11.1\n+ */\n+public class RuleEvaluationWorker extends AbstractWork {\n+\n+    private static final Logger log = LogManager.getLogger(RuleEvaluationWorker.class);\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TITLE = \"Retention Rule Evaluation Work\";\n+\n+    public static final String CATEGORY = \"retentionRuleWork\";\n+\n+    protected final Map<String, Set<String>> docsToCheckAndEvents;\n+\n+    public RuleEvaluationWorker(Map<String, Set<String>> docsToCheckAndEvents) {\n+        this.docsToCheckAndEvents = docsToCheckAndEvents;\n+        List<String> docs = new ArrayList<>();\n+        docs.addAll(docsToCheckAndEvents.keySet());\n+        setDocuments(Framework.getService(RepositoryManager.class).getDefaultRepositoryName(), docs);\n+    }\n+\n+    @Override\n+    public String getTitle() {\n+        return TITLE;\n+    }\n+\n+    @Override\n+    public String getCategory() {\n+        return CATEGORY;\n+    }\n+\n+    @Override\n+    public void work() {\n+        openSystemSession();\n+        RetentionManager retentionManager = Framework.getService(RetentionManager.class);\n+        for (String string : docIds) {\n+            DocumentModel doc;\n+            try {\n+                doc = session.getDocument(new IdRef(string));\n+            } catch (DocumentNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MTE2Ng=="}, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA2NDY2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-security.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NDozMFrOFwkYFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NDozMFrOFwkYFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MTk1OA==", "bodyText": "missing a break line at the end.", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386471958", "createdAt": "2020-03-02T15:44:30Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-security.xml", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.retention.security\">\n+\n+  <require>org.nuxeo.ecm.core.security.defaultPermissions</require>\n+\n+  <extension target=\"org.nuxeo.ecm.core.security.SecurityService\"\n+    point=\"permissions\">\n+\n+    <permission name=\"ManageRecord\">\n+      <include>ReadWrite</include>\n+      <include>MakeRecord</include>\n+      <include>SetRetention</include>\n+    </permission>\n+\n+    <permission name=\"ManageLegalHold\">\n+      <include>ReadWrite</include>\n+      <include>MakeRecord</include>\n+      <include>ManageLegalHold</include>\n+    </permission>\n+\n+  </extension>\n+\n+  <extension target=\"org.nuxeo.ecm.core.security.SecurityService\"\n+    point=\"permissionsVisibility\">\n+\n+    <visibility>\n+      <item show=\"true\" order=\"70\">ManageRecord</item>\n+      <item show=\"true\" order=\"71\">ManageLegalHold</item>\n+    </visibility>\n+\n+  </extension>\n+\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA2NTk4OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-service-framework.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NDo0NlrOFwkY3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NDo0NlrOFwkY3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjE1Nw==", "bodyText": "same as above", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386472157", "createdAt": "2020-03-02T15:44:46Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-service-framework.xml", "diffHunk": "@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.retention.RetentionService\">\n+  <require>org.nuxeo.ecm.platform.usermanager.UserService</require>\n+  <require>org.nuxeo.ecm.platform.usermanager.UserManagerImpl</require>\n+  <require>org.nuxeo.retention.vocabularies</require>\n+\n+  <implementation\n+    class=\"org.nuxeo.retention.service.RetentionManagerImpl\" />\n+  <service>\n+    <provide\n+      interface=\"org.nuxeo.retention.service.RetentionManager\" />\n+  </service>\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA2ODUzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/schemas/record.xsd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NToyMlrOFwkafg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NToyMlrOFwkafg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjU3NA==", "bodyText": "missing break line at the end.", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386472574", "createdAt": "2020-03-02T15:45:22Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/schemas/record.xsd", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\"?>\n+<xs:schema\n+  targetNamespace=\"http://www.nuxeo.org/ecm/schemas/common/\"\n+  xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n+  xmlns:nxs=\"http://www.nuxeo.org/ecm/schemas/common/\"\n+  xmlns:nxsv=\"http://www.nuxeo.org/ecm/schemas/core/validation/\"\n+  xmlns:ref=\"http://www.nuxeo.org/ecm/schemas/core/external-references/\">\n+  <xs:include schemaLocation=\"base.xsd\" />\n+  <xs:element name=\"ruleIds\">\n+    <xs:simpleType>\n+      <xs:list>\n+        <xs:simpleType>\n+          <xs:restriction base=\"xs:string\"\n+            ref:resolver=\"documentResolver\" ref:store=\"idOnly\" />\n+        </xs:simpleType>\n+      </xs:list>\n+    </xs:simpleType>\n+  </xs:element>\n+  <xs:element name=\"retainUntil\" type=\"xs:date\" />\n+</xs:schema>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA2OTU4OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/schemas/retention_definition.xsd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NTozNlrOFwkbHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NTozNlrOFwkbHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjczNQ==", "bodyText": "same as above", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386472735", "createdAt": "2020-03-02T15:45:36Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/schemas/retention_definition.xsd", "diffHunk": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\"?>\n+\n+<xs:schema targetNamespace=\"http://www.nuxeo.org/ecm/schemas/common/\"\n+  xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n+  xmlns:nxs=\"http://www.nuxeo.org/ecm/schemas/common/\"\n+  xmlns:nxsv=\"http://www.nuxeo.org/ecm/schemas/core/validation/\"\n+  xmlns:ref=\"http://www.nuxeo.org/ecm/schemas/core/external-references/\">\n+\n+  <xs:include schemaLocation=\"base.xsd\" />\n+\n+  <xs:element name=\"durationDays\" type=\"xs:long\" default=\"0\"/>\n+  <xs:element name=\"durationMonths\" type=\"xs:long\" default=\"0\"/>\n+  <xs:element name=\"durationYears\" type=\"xs:long\" default=\"0\"/>\n+  <xs:element name=\"durationMillis\" type=\"xs:long\" default=\"0\"/>\n+\n+  <xs:element name=\"expression\" type=\"xs:string\" />\n+\n+  <xs:element name=\"startingPointPolicy\" nillable=\"false\" nxsv:nillable=\"false\">\n+    <xs:simpleType>\n+      <xs:restriction base=\"xs:string\">\n+        <xs:enumeration value=\"immediate\" />\n+        <xs:enumeration value=\"after_delay\" />\n+        <xs:enumeration value=\"event_based\" />\n+        <xs:enumeration value=\"metadata_based\" />\n+      </xs:restriction>\n+    </xs:simpleType>\n+  </xs:element>\n+\n+  <xs:element name=\"startingPointEvent\">\n+    <xs:simpleType>\n+      <xs:restriction base=\"xs:string\" ref:resolver=\"directoryResolver\" ref:directory=\"RetentionEvent\" />\n+    </xs:simpleType>\n+  </xs:element>\n+  <xs:element name=\"startingPointExpression\" type=\"xs:string\" />\n+\n+  <xs:element name=\"metadataXPath\" type=\"xs:string\" />\n+\n+  <xs:simpleType name=\"beginActionList\">\n+    <xs:list>\n+      <xs:simpleType>\n+        <xs:restriction base=\"xs:string\" ref:resolver=\"directoryResolver\" ref:directory=\"RetentionBegin\" />\n+      </xs:simpleType>\n+    </xs:list>\n+  </xs:simpleType>\n+\n+  <xs:simpleType name=\"endActionList\">\n+    <xs:list>\n+      <xs:simpleType>\n+        <xs:restriction base=\"xs:string\" ref:resolver=\"directoryResolver\" ref:directory=\"RetentionEnd\" />\n+      </xs:simpleType>\n+    </xs:list>\n+  </xs:simpleType>\n+\n+  <xs:element name=\"beginActions\" type=\"nxs:beginActionList\" />\n+  <xs:element name=\"endActions\" type=\"nxs:endActionList\" />\n+\n+</xs:schema>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDE2NDk2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjowNjo1MlrOFwlVEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo0ODowNVrOFyQi5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4NzU2OQ==", "bodyText": "TransactionalFeature is not needed as it will be deployed by  AutomationFeature -> PlatformFeature -> CoreFeature -> TransactionalFeature", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386487569", "createdAt": "2020-03-02T16:06:52Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.security.RetentionExpiredFinderListener;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ TransactionalFeature.class, AutomationFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NDE5Nw==", "bodyText": "\ud83d\udc4d thanks, if you can remove @Features({ AutomationFeature.class }) -> @Features(AutomationFeature.class) the unneeded curly brackets", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r388244197", "createdAt": "2020-03-05T11:48:05Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.security.RetentionExpiredFinderListener;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ TransactionalFeature.class, AutomationFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4NzU2OQ=="}, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDIwNTE3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoxNjozNFrOFwlt7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoxNjozNFrOFwlt7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5MzkzMw==", "bodyText": "I am wondering if we can use transactionalFeature.nextTransaction(); instead of coreFeature.waitForAsyncCompletion(); my idea is mainly about the consistency as mainly I used transactionalFeature.nextTransaction() when I wait for asynchronous things.", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386493933", "createdAt": "2020-03-02T16:16:34Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.security.RetentionExpiredFinderListener;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ TransactionalFeature.class, AutomationFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-core-types.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-adapters.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-vocabularies.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-content-template.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-service-framework.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-listeners.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-operations.xml\")\n+public abstract class RetentionTestCase {\n+\n+    @Inject\n+    protected RetentionManager service;\n+\n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    protected DocumentModel file;\n+\n+    @Before\n+    public void setup() {\n+        file = session.createDocumentModel(\"/\", \"File\", \"File\");\n+        file = session.createDocument(file);\n+        file = session.saveDocument(file);\n+    }\n+\n+    protected void assertStillUnderRetentionAfter(DocumentModel doc, RetentionRule rule, int timeoutMillis)\n+            throws InterruptedException {\n+        doc = service.attachRule(doc, rule, session);\n+        assertTrue(doc.isRecord());\n+\n+        awaitRetentionExpiration(timeoutMillis);\n+\n+        doc = session.getDocument(doc.getRef());\n+\n+        // it is still under retention and has a retention date\n+        assertTrue(session.isUnderRetentionOrLegalHold(doc.getRef()));\n+        assertNotNull(session.getRetainUntil(doc.getRef()));\n+    }\n+\n+    protected void awaitRetentionExpiration(long millis) throws InterruptedException {\n+        // wait a bit more than retention period to pass retention expiration date\n+        coreFeature.waitForAsyncCompletion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDIxMDE2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoxNzo0MlrOFwlw6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoxNzo0MlrOFwlw6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5NDY5OQ==", "bodyText": "On master we can replace if you want :) by the use of the awaitility library you can have look at org.nuxeo.ecm.platform.comment.TestCommentsMigrator#runMigrationStep for an example", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386494699", "createdAt": "2020-03-02T16:17:42Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.security.RetentionExpiredFinderListener;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ TransactionalFeature.class, AutomationFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-core-types.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-adapters.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-vocabularies.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-content-template.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-service-framework.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-listeners.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-operations.xml\")\n+public abstract class RetentionTestCase {\n+\n+    @Inject\n+    protected RetentionManager service;\n+\n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    protected DocumentModel file;\n+\n+    @Before\n+    public void setup() {\n+        file = session.createDocumentModel(\"/\", \"File\", \"File\");\n+        file = session.createDocument(file);\n+        file = session.saveDocument(file);\n+    }\n+\n+    protected void assertStillUnderRetentionAfter(DocumentModel doc, RetentionRule rule, int timeoutMillis)\n+            throws InterruptedException {\n+        doc = service.attachRule(doc, rule, session);\n+        assertTrue(doc.isRecord());\n+\n+        awaitRetentionExpiration(timeoutMillis);\n+\n+        doc = session.getDocument(doc.getRef());\n+\n+        // it is still under retention and has a retention date\n+        assertTrue(session.isUnderRetentionOrLegalHold(doc.getRef()));\n+        assertNotNull(session.getRetainUntil(doc.getRef()));\n+    }\n+\n+    protected void awaitRetentionExpiration(long millis) throws InterruptedException {\n+        // wait a bit more than retention period to pass retention expiration date\n+        coreFeature.waitForAsyncCompletion();\n+        Thread.sleep(millis);\n+        // trigger manually instead of waiting for scheduler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDIxMzkzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoxODozOFrOFwlzXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoxODozOFrOFwlzXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5NTMyNw==", "bodyText": "matadataXPath -> metadataXPath", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386495327", "createdAt": "2020-03-02T16:18:38Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.security.RetentionExpiredFinderListener;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ TransactionalFeature.class, AutomationFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-core-types.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-adapters.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-vocabularies.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-content-template.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-service-framework.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-listeners.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-operations.xml\")\n+public abstract class RetentionTestCase {\n+\n+    @Inject\n+    protected RetentionManager service;\n+\n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    protected DocumentModel file;\n+\n+    @Before\n+    public void setup() {\n+        file = session.createDocumentModel(\"/\", \"File\", \"File\");\n+        file = session.createDocument(file);\n+        file = session.saveDocument(file);\n+    }\n+\n+    protected void assertStillUnderRetentionAfter(DocumentModel doc, RetentionRule rule, int timeoutMillis)\n+            throws InterruptedException {\n+        doc = service.attachRule(doc, rule, session);\n+        assertTrue(doc.isRecord());\n+\n+        awaitRetentionExpiration(timeoutMillis);\n+\n+        doc = session.getDocument(doc.getRef());\n+\n+        // it is still under retention and has a retention date\n+        assertTrue(session.isUnderRetentionOrLegalHold(doc.getRef()));\n+        assertNotNull(session.getRetainUntil(doc.getRef()));\n+    }\n+\n+    protected void awaitRetentionExpiration(long millis) throws InterruptedException {\n+        // wait a bit more than retention period to pass retention expiration date\n+        coreFeature.waitForAsyncCompletion();\n+        Thread.sleep(millis);\n+        // trigger manually instead of waiting for scheduler\n+        new RetentionExpiredFinderListener().handleEvent(null);\n+        assertTrue(\"Bulk action didn't finish\", bulkService.await(Duration.ofSeconds(60)));\n+        coreFeature.waitForAsyncCompletion();\n+    }\n+\n+    protected RetentionRule createRuleWithActions(RetentionRule.ApplicationPolicy policy,\n+            StartingPointPolicy startingPointPolicy, List<String> docTypes, String startingPointEventId,\n+            String startingPointExpression, String matadataXPath, long years, long months, long days,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDIyMTI5OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyMDoyNlrOFwl39Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyMDoyNlrOFwl39Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5NjUwMQ==", "bodyText": "as the createRuleWithActions method take a long primitif type, you can just pass 0 instead of 0L   but if you want to keep the same things as the 10.10 we avoid this modification", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386496501", "createdAt": "2020-03-02T16:20:26Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/RetentionTestCase.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.test.AutomationFeature;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.security.RetentionExpiredFinderListener;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.retention.adapters.RetentionRule.StartingPointPolicy;\n+import org.nuxeo.retention.service.RetentionManager;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ TransactionalFeature.class, AutomationFeature.class })\n+@RepositoryConfig(init = DefaultRepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-core-types.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-adapters.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-vocabularies.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-content-template.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-service-framework.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-listeners.xml\")\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-operations.xml\")\n+public abstract class RetentionTestCase {\n+\n+    @Inject\n+    protected RetentionManager service;\n+\n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected BulkService bulkService;\n+\n+    protected DocumentModel file;\n+\n+    @Before\n+    public void setup() {\n+        file = session.createDocumentModel(\"/\", \"File\", \"File\");\n+        file = session.createDocument(file);\n+        file = session.saveDocument(file);\n+    }\n+\n+    protected void assertStillUnderRetentionAfter(DocumentModel doc, RetentionRule rule, int timeoutMillis)\n+            throws InterruptedException {\n+        doc = service.attachRule(doc, rule, session);\n+        assertTrue(doc.isRecord());\n+\n+        awaitRetentionExpiration(timeoutMillis);\n+\n+        doc = session.getDocument(doc.getRef());\n+\n+        // it is still under retention and has a retention date\n+        assertTrue(session.isUnderRetentionOrLegalHold(doc.getRef()));\n+        assertNotNull(session.getRetainUntil(doc.getRef()));\n+    }\n+\n+    protected void awaitRetentionExpiration(long millis) throws InterruptedException {\n+        // wait a bit more than retention period to pass retention expiration date\n+        coreFeature.waitForAsyncCompletion();\n+        Thread.sleep(millis);\n+        // trigger manually instead of waiting for scheduler\n+        new RetentionExpiredFinderListener().handleEvent(null);\n+        assertTrue(\"Bulk action didn't finish\", bulkService.await(Duration.ofSeconds(60)));\n+        coreFeature.waitForAsyncCompletion();\n+    }\n+\n+    protected RetentionRule createRuleWithActions(RetentionRule.ApplicationPolicy policy,\n+            StartingPointPolicy startingPointPolicy, List<String> docTypes, String startingPointEventId,\n+            String startingPointExpression, String matadataXPath, long years, long months, long days,\n+            long durationMillis, List<String> beginActions, List<String> endActions) {\n+        DocumentModel doc = session.createDocumentModel(\"/RetentionRules\", \"testRule\", \"RetentionRule\");\n+        RetentionRule rule = doc.getAdapter(RetentionRule.class);\n+        rule.setDurationYears(years);\n+        rule.setDurationMonths(months);\n+        rule.setDurationDays(days);\n+        rule.setDurationMillis(durationMillis);\n+        rule.setApplicationPolicy(policy);\n+        rule.setStartingPointPolicy(startingPointPolicy);\n+        rule.setDocTypes(docTypes);\n+        rule.setStartingPointEvent(startingPointEventId);\n+        rule.setStartingPointExpression(startingPointExpression);\n+        rule.setMetadataXpath(matadataXPath);\n+        rule.setBeginActions(beginActions);\n+        rule.setEndActions(endActions);\n+        session.createDocument(doc);\n+        return session.saveDocument(rule.getDocument()).getAdapter(RetentionRule.class);\n+    }\n+\n+    protected RetentionRule createImmediateRuleMillis(RetentionRule.ApplicationPolicy policy, long durationMillis,\n+            List<String> beginActions, List<String> endActions) {\n+        return createRuleWithActions(policy, RetentionRule.StartingPointPolicy.IMMEDIATE, Arrays.asList(\"File\"), null,\n+                null, null, 0L, 0L, 0L, durationMillis, beginActions, endActions);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDIyMzE1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionAdapters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyMDo1NFrOFwl5Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyMDo1NFrOFwl5Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5Njc4Ng==", "bodyText": "curly bracket on @Features({ CoreFeature.class }) are not needed", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386496786", "createdAt": "2020-03-02T16:20:54Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionAdapters.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.DefaultRepositoryInit;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class })\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-core-types.xml\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDIyOTU3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyMjoyOFrOFwl9SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyMjoyOFrOFwl9SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ5Nzg2NA==", "bodyText": "automationService  seems unused.", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386497864", "createdAt": "2020-03-02T16:22:28Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionManager.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this doc except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.retention.adapters.Record;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionManager extends RetentionTestCase {\n+\n+    @Inject\n+    protected AutomationService automationService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDI0ODgzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyNzoxMlrOFwmJRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyNzoxMlrOFwmJRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMDkzNQ==", "bodyText": "can be replaced by (the use of acp.getOrCreateACL()...):\n        ACP acp = new ACPImpl();\n        acp.getOrCreateACL().add( new ACE(\"user\", RetentionConstants.MANAGE_RECORD_PERMISSION, true));\n        file.setACP(acp, true);\n        file = session.saveDocument(file);", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386500935", "createdAt": "2020-03-02T16:27:12Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CloseableCoreSession;\n+import org.nuxeo.ecm.core.api.CoreInstance;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.security.ACE;\n+import org.nuxeo.ecm.core.api.security.ACL;\n+import org.nuxeo.ecm.core.api.security.ACP;\n+import org.nuxeo.ecm.core.api.security.impl.ACLImpl;\n+import org.nuxeo.ecm.core.api.security.impl.ACPImpl;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-security.xml\")\n+public class TestRetentionSecurity extends RetentionTestCase {\n+\n+    @Test\n+    public void shouldBeAuthorizedToManageLegalHold() {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            assertEquals(\"User is not authorized to attach retention rule\", e.getMessage());\n+            assertEquals(SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotBeAuthorizedToAttachRule() {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            assertEquals(\"User is not authorized to attach retention rule\", e.getMessage());\n+            assertEquals(SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+\n+    @Test\n+    public void shouldBeAuthorizedToAttachRule() {\n+        ACP acp = new ACPImpl();\n+        ACE allowAttachRule = new ACE(\"user\", RetentionConstants.MANAGE_RECORD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowAttachRule });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDI1MjYwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyODowOFrOFwmLhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjoyODowOFrOFwmLhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwMTUxMQ==", "bodyText": "same suggestion as above; the use of acp.getOrCreateACL()", "url": "https://github.com/nuxeo/nuxeo/pull/3736#discussion_r386501511", "createdAt": "2020-03-02T16:28:08Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionSecurity.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2019 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Guillaume RENARD\n+ */\n+package org.nuxeo.retention.test;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.CloseableCoreSession;\n+import org.nuxeo.ecm.core.api.CoreInstance;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.security.ACE;\n+import org.nuxeo.ecm.core.api.security.ACL;\n+import org.nuxeo.ecm.core.api.security.ACP;\n+import org.nuxeo.ecm.core.api.security.impl.ACLImpl;\n+import org.nuxeo.ecm.core.api.security.impl.ACPImpl;\n+import org.nuxeo.retention.RetentionConstants;\n+import org.nuxeo.retention.adapters.RetentionRule;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+\n+/**\n+ * @since 11.1\n+ */\n+@Deploy(\"org.nuxeo.retention.core:OSGI-INF/retention-security.xml\")\n+public class TestRetentionSecurity extends RetentionTestCase {\n+\n+    @Test\n+    public void shouldBeAuthorizedToManageLegalHold() {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            assertEquals(\"User is not authorized to attach retention rule\", e.getMessage());\n+            assertEquals(SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotBeAuthorizedToAttachRule() {\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            service.attachRule(file, createManualImmediateRuleMillis(100), userSession);\n+            fail(\"Sould not be abe to attach rule\");\n+        } catch (NuxeoException e) {\n+            assertEquals(\"User is not authorized to attach retention rule\", e.getMessage());\n+            assertEquals(SC_FORBIDDEN, e.getStatusCode());\n+            assertFalse(session.isRecord(file.getRef()));\n+            assertFalse(session.isUnderRetentionOrLegalHold(file.getRef()));\n+            assertFalse(session.getDocument(file.getRef()).hasFacet(RetentionConstants.RECORD_FACET));\n+        }\n+    }\n+\n+\n+    @Test\n+    public void shouldBeAuthorizedToAttachRule() {\n+        ACP acp = new ACPImpl();\n+        ACE allowAttachRule = new ACE(\"user\", RetentionConstants.MANAGE_RECORD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowAttachRule });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(session.getRepositoryName(), \"user\")) {\n+            file = service.attachRule(file, createManualImmediateRuleMillis(5000), userSession);\n+            assertTrue(userSession.isUnderRetentionOrLegalHold(file.getRef()));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldBeAuthorizedToSetLegalHold() {\n+        ACP acp = new ACPImpl();\n+        ACE allowLegalHold = new ACE(\"user\", RetentionConstants.MANAGE_LEGAL_HOLD_PERMISSION, true);\n+        ACL acl = new ACLImpl();\n+        acl.setACEs(new ACE[] { allowLegalHold });\n+        acp.addACL(acl);\n+        file.setACP(acp, true);\n+        file = session.saveDocument(file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aac3d5b6773c0bfde6a1287e4605d056476545f"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4249, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}