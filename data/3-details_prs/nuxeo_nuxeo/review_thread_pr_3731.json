{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTg0NDAx", "number": 3731, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjo1NzowOFrODeh9YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzowMDozMFrODeiCeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQwMjU3OnYy", "diffSide": "LEFT", "path": "nuxeo-features/nuxeo-platform-notification/nuxeo-platform-notification-core/src/test/java/org/nuxeo/ecm/platform/ec/notification/operations/SubscribeAndUnsubscribeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjo1NzowOFrOFnt2Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjo1NzowOFrOFnt2Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE4OTk3MQ==", "bodyText": "I tend to keep this when there is also an empty line separating the class declaration from the first field.", "url": "https://github.com/nuxeo/nuxeo/pull/3731#discussion_r377189971", "createdAt": "2020-02-10T16:57:08Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-features/nuxeo-platform-notification/nuxeo-platform-notification-core/src/test/java/org/nuxeo/ecm/platform/ec/notification/operations/SubscribeAndUnsubscribeTest.java", "diffHunk": "@@ -87,92 +78,85 @@ public void setUp() {\n             listDocs.add(testFile);\n         }\n         listDocModel = new DocumentModelListImpl(listDocs);\n-        ctx = new OperationContext(coreSession);\n-    }\n-\n-    @After\n-    public void closeOperationContext() {\n-        ctx.close();\n     }\n \n     @Test\n     public void testSubscribeAndUnsubscribeOperations() throws OperationException {\n-        OperationChain chain = new OperationChain(\"test-chain\");\n-        chain.add(SubscribeOperation.ID);\n-        ctx.setInput(listDocModel);\n-        String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n-        }\n-\n-        // subscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertEquals(4, docSubscriptions.size());\n-            assertTrue(docSubscriptions.contains(\"Creation\"));\n-            assertTrue(docSubscriptions.contains(\"Modification\"));\n-            assertTrue(docSubscriptions.contains(\"Workflow Change\"));\n-            assertTrue(docSubscriptions.contains(\"Approbation review started\"));\n-        }\n-\n-        chain = new OperationChain(\"test-chain\");\n-        chain.add(UnsubscribeOperation.ID);\n-        ctx.clear();\n-        ctx.setInput(listDocModel);\n-        username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        // unsubscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n+        try (OperationContext ctx = new OperationContext(coreSession)) {\n+            OperationChain chain = new OperationChain(\"test-chain\");\n+            chain.add(SubscribeOperation.ID);\n+            ctx.setInput(listDocModel);\n+            String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n+\n+            // subscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertEquals(4, docSubscriptions.size());\n+                assertTrue(docSubscriptions.contains(\"Creation\"));\n+                assertTrue(docSubscriptions.contains(\"Modification\"));\n+                assertTrue(docSubscriptions.contains(\"Workflow Change\"));\n+                assertTrue(docSubscriptions.contains(\"Approbation review started\"));\n+            }\n+\n+            chain = new OperationChain(\"test-chain\");\n+            chain.add(UnsubscribeOperation.ID);\n+            ctx.clear();\n+            ctx.setInput(listDocModel);\n+            username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            // unsubscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n         }\n     }\n \n     @Test\n     public void testSelectiveSubscribeAndUnsubscribeOperations() throws OperationException {\n-        Map<String, Object> params = new HashMap<>();\n-        params.put(\"notifications\", new StringList(new ArrayList<String>() {private static final long serialVersionUID = 1L;\n-\n-        { add(\"Creation\"); }}));\n-\n-        OperationChain chain = new OperationChain(\"test-chain\");\n-        chain.add(SubscribeOperation.ID).from(params);\n-        ctx.setInput(listDocModel);\n-        String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n-        }\n-\n-        // subscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertEquals(1, docSubscriptions.size());\n-            assertTrue(docSubscriptions.contains(\"Creation\"));\n-        }\n-\n-        chain = new OperationChain(\"test-chain\");\n-        chain.add(UnsubscribeOperation.ID).from(params);\n-        ctx.clear();\n-        ctx.setInput(listDocModel);\n-        username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        // unsubscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n+        try (OperationContext ctx = new OperationContext(coreSession)) {\n+            Map<String, Object> params = Map.of(\"notifications\", List.of(\"Creation\"));\n+            OperationChain chain = new OperationChain(\"test-chain\");\n+            chain.add(SubscribeOperation.ID).from(params);\n+            ctx.setInput(listDocModel);\n+            String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n+\n+            // subscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertEquals(1, docSubscriptions.size());\n+                assertTrue(docSubscriptions.contains(\"Creation\"));\n+            }\n+\n+            chain = new OperationChain(\"test-chain\");\n+            chain.add(UnsubscribeOperation.ID).from(params);\n+            ctx.clear();\n+            ctx.setInput(listDocModel);\n+            username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            // unsubscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n         }\n     }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac7fa65802cbef1e85ddda9960d3af1bb57c99c"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQxNTYwOnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/resources/OSGI-INF/operations-contrib.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzowMDozMFrOFnt-bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzowMDozMFrOFnt-bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5MjA0NQ==", "bodyText": "I get a different result when I format this (one liner)", "url": "https://github.com/nuxeo/nuxeo/pull/3731#discussion_r377192045", "createdAt": "2020-02-10T17:00:30Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/resources/OSGI-INF/operations-contrib.xml", "diffHunk": "@@ -6,7 +6,7 @@\n   <documentation>@author Bogdan Stefanescu (bs@nuxeo.com)</documentation>\n \n   <extension target=\"org.nuxeo.ecm.core.operation.OperationServiceComponent\"\n-    point=\"operations\">\n+             point=\"operations\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac7fa65802cbef1e85ddda9960d3af1bb57c99c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4238, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}