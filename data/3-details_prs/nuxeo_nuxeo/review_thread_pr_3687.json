{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1OTk3OTky", "number": 3687, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTozMzoyOVrODZ83OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjowMToxOVrODZ_ZZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTM4MTY4OnYy", "diffSide": "RIGHT", "path": "nuxeo-common/src/test/java/org/nuxeo/common/codec/CryptoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTozMzoyOVrOFgoaLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTozMzoyOVrOFgoaLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MDgxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // bad badding\n          \n          \n            \n                    // bad padding", "url": "https://github.com/nuxeo/nuxeo/pull/3687#discussion_r369760813", "createdAt": "2020-01-22T19:33:29Z", "author": {"login": "ataillefer"}, "path": "nuxeo-common/src/test/java/org/nuxeo/common/codec/CryptoTest.java", "diffHunk": "@@ -98,18 +98,22 @@ public void testDecryptionFailSilently() throws Exception {\n         assertFalse(Crypto.isEncrypted(\"\"));\n         assertFalse(Crypto.isEncrypted(\"{$$}\"));\n \n+        // bad padding\n         String encryptedString = \"{$$xoWODkBtRXnsdzIBdosUFA==}\";\n         String decryptedString = new String(crypto.decrypt(encryptedString));\n         assertEquals(\"Decryption must fail silently\", decryptedString, encryptedString);\n \n+        // last block FB== is not valid (B is not a possible value)\n         encryptedString = \"{$$xoWODkCtRXnSuqIBdosUFB==}\";\n         decryptedString = new String(crypto.decrypt(encryptedString));\n         assertEquals(\"Decryption must fail silently\", decryptedString, encryptedString);\n \n+        // illegal block size\n         encryptedString = \"{$REVTL0VDQi9QS0NTNVBhZGRpbmc=$w/wCDLXoGsasskNaEpMt0wg==}\";\n         decryptedString = new String(crypto.decrypt(encryptedString));\n         assertEquals(\"Decryption must fail silently\", decryptedString, encryptedString);\n \n+        // bad badding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df975063024e49cadbd45202264031a192b33e10"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTM4OTQ5OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/impl/AbstractDocumentModelWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTozNjoyNVrOFgofQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTo1OToxMVrOFgpKhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MjExNA==", "bodyText": "What's the point of logging the beginning of the content?", "url": "https://github.com/nuxeo/nuxeo/pull/3687#discussion_r369762114", "createdAt": "2020-01-22T19:36:25Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/impl/AbstractDocumentModelWriter.java", "diffHunk": "@@ -382,7 +383,18 @@ private static Object getElementData(ExportedDocument xdoc, Element element, Typ\n                 }\n                 if (blob == null) { // maybe the blob is embedded in Base64\n                     // encoded data\n-                    byte[] bytes = Base64.decodeBase64(content);\n+                    byte[] bytes;\n+                    try {\n+                        bytes = Base64.decodeBase64(content);\n+                    } catch (IllegalArgumentException e) {\n+                        // example invalid base64: fd7b9e4.blob\n+                        if (log.isDebugEnabled()) {\n+                            log.warn(\"Invalid blob base64 in document: \" + xdoc.getId() + \": \" + StringUtils.abbreviate(content, 50));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df975063024e49cadbd45202264031a192b33e10"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3MzE5MA==", "bodyText": "It allows for better debugging, to find out where the invalid content comes from.", "url": "https://github.com/nuxeo/nuxeo/pull/3687#discussion_r369773190", "createdAt": "2020-01-22T19:59:11Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/impl/AbstractDocumentModelWriter.java", "diffHunk": "@@ -382,7 +383,18 @@ private static Object getElementData(ExportedDocument xdoc, Element element, Typ\n                 }\n                 if (blob == null) { // maybe the blob is embedded in Base64\n                     // encoded data\n-                    byte[] bytes = Base64.decodeBase64(content);\n+                    byte[] bytes;\n+                    try {\n+                        bytes = Base64.decodeBase64(content);\n+                    } catch (IllegalArgumentException e) {\n+                        // example invalid base64: fd7b9e4.blob\n+                        if (log.isDebugEnabled()) {\n+                            log.warn(\"Invalid blob base64 in document: \" + xdoc.getId() + \": \" + StringUtils.abbreviate(content, 50));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MjExNA=="}, "originalCommit": {"oid": "df975063024e49cadbd45202264031a192b33e10"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTM5Mzk5OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/transform/BaseExport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTozODowMlrOFgoiMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDowNDo0MlrOFgpT1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2Mjg2Nw==", "bodyText": "Isn't false the default value?\nAnd why this change? Maybe add a comment to explain the semantics.", "url": "https://github.com/nuxeo/nuxeo/pull/3687#discussion_r369762867", "createdAt": "2020-01-22T19:38:02Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/transform/BaseExport.java", "diffHunk": "@@ -36,7 +36,7 @@\n \n     String uuid;\n \n-    protected boolean skipBlobs = true;\n+    protected boolean skipBlobs = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df975063024e49cadbd45202264031a192b33e10"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3NTU3Mg==", "bodyText": "I'm leaving the false for emphasis, although nothing ever changes it in the rest of the tests (maybe some code was removed at some point). Adding the following comment to explain:\n // don't skip blobs because otherwise when reimporting documents the\n // \"data\" field is interpreted as (invalid) base64 instead of a filename", "url": "https://github.com/nuxeo/nuxeo/pull/3687#discussion_r369775572", "createdAt": "2020-01-22T20:04:42Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/transform/BaseExport.java", "diffHunk": "@@ -36,7 +36,7 @@\n \n     String uuid;\n \n-    protected boolean skipBlobs = true;\n+    protected boolean skipBlobs = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2Mjg2Nw=="}, "originalCommit": {"oid": "df975063024e49cadbd45202264031a192b33e10"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTc5Njg0OnYy", "diffSide": "RIGHT", "path": "nuxeo-common/src/test/java/org/nuxeo/common/codec/CryptoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjowMToxOVrOFgsgfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMjowOToxN1rOFgst_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNzk2Ng==", "bodyText": "Why doing several bad padding cases ? Maybe the answer should be in the comments ?\nHow about extracting the error message in a local variable ?", "url": "https://github.com/nuxeo/nuxeo/pull/3687#discussion_r369827966", "createdAt": "2020-01-22T22:01:19Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-common/src/test/java/org/nuxeo/common/codec/CryptoTest.java", "diffHunk": "@@ -98,18 +98,22 @@ public void testDecryptionFailSilently() throws Exception {\n         assertFalse(Crypto.isEncrypted(\"\"));\n         assertFalse(Crypto.isEncrypted(\"{$$}\"));\n \n+        // bad padding\n         String encryptedString = \"{$$xoWODkBtRXnsdzIBdosUFA==}\";\n         String decryptedString = new String(crypto.decrypt(encryptedString));\n         assertEquals(\"Decryption must fail silently\", decryptedString, encryptedString);\n \n+        // last block FB== is not valid (B is not a possible value)\n         encryptedString = \"{$$xoWODkCtRXnSuqIBdosUFB==}\";\n         decryptedString = new String(crypto.decrypt(encryptedString));\n         assertEquals(\"Decryption must fail silently\", decryptedString, encryptedString);\n \n+        // illegal block size\n         encryptedString = \"{$REVTL0VDQi9QS0NTNVBhZGRpbmc=$w/wCDLXoGsasskNaEpMt0wg==}\";\n         decryptedString = new String(crypto.decrypt(encryptedString));\n         assertEquals(\"Decryption must fail silently\", decryptedString, encryptedString);\n \n+        // bad padding\n         encryptedString = \"{$REVTL0VDQi9QS0NTNVBhZGRpbmc=$w/wCDLXoG5VFkNbEpMt0wg==}\";\n         decryptedString = new String(crypto.decrypt(encryptedString));\n         assertEquals(\"Decryption must fail silently\", decryptedString, encryptedString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f57f666a95722fb259906d635190bd1841af476"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzMTQyMA==", "bodyText": "These are not my tests, I just added a small bit of doc about the error cases while resolving a related issue.\nAlso this is a test, putting common error messages in variables or constants doesn't bring anything. In tests it's ok to repeat things sometimes.", "url": "https://github.com/nuxeo/nuxeo/pull/3687#discussion_r369831420", "createdAt": "2020-01-22T22:09:17Z", "author": {"login": "efge"}, "path": "nuxeo-common/src/test/java/org/nuxeo/common/codec/CryptoTest.java", "diffHunk": "@@ -98,18 +98,22 @@ public void testDecryptionFailSilently() throws Exception {\n         assertFalse(Crypto.isEncrypted(\"\"));\n         assertFalse(Crypto.isEncrypted(\"{$$}\"));\n \n+        // bad padding\n         String encryptedString = \"{$$xoWODkBtRXnsdzIBdosUFA==}\";\n         String decryptedString = new String(crypto.decrypt(encryptedString));\n         assertEquals(\"Decryption must fail silently\", decryptedString, encryptedString);\n \n+        // last block FB== is not valid (B is not a possible value)\n         encryptedString = \"{$$xoWODkCtRXnSuqIBdosUFB==}\";\n         decryptedString = new String(crypto.decrypt(encryptedString));\n         assertEquals(\"Decryption must fail silently\", decryptedString, encryptedString);\n \n+        // illegal block size\n         encryptedString = \"{$REVTL0VDQi9QS0NTNVBhZGRpbmc=$w/wCDLXoGsasskNaEpMt0wg==}\";\n         decryptedString = new String(crypto.decrypt(encryptedString));\n         assertEquals(\"Decryption must fail silently\", decryptedString, encryptedString);\n \n+        // bad padding\n         encryptedString = \"{$REVTL0VDQi9QS0NTNVBhZGRpbmc=$w/wCDLXoG5VFkNbEpMt0wg==}\";\n         decryptedString = new String(crypto.decrypt(encryptedString));\n         assertEquals(\"Decryption must fail silently\", decryptedString, encryptedString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyNzk2Ng=="}, "originalCommit": {"oid": "5f57f666a95722fb259906d635190bd1841af476"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4275, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}