{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjkzMDAx", "number": 3869, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjo1OTo0MFrODrvfoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoxOTowNVrODrwAoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTkzNTA0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjo1OTo0MVrOF8Q6aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjo1OTo0MVrOF8Q6aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczNTk3Ng==", "bodyText": "Formatting issue?", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398735976", "createdAt": "2020-03-26T16:59:41Z", "author": {"login": "kevinleturc"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setLegalHold(file.getRef(), hold, comment);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            listener.streamCapturedEvents()\n+                    .forEach(ev -> assertEquals(\"Event: \" + ev.getName(), //\n+                            comment, ev.getContext().getProperties().get(\"comment\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTk1NjY1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzowNDo0MlrOF8RIlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzowNDo0MlrOF8RIlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODczOTYwNA==", "bodyText": "retainUntil doesn't seem to be null which can simplify this expression.", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398739604", "createdAt": "2020-03-26T17:04:42Z", "author": {"login": "kevinleturc"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setLegalHold(file.getRef(), hold, comment);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            listener.streamCapturedEvents()\n+                    .forEach(ev -> assertEquals(\"Event: \" + ev.getName(), //\n+                            comment, ev.getContext().getProperties().get(\"comment\")));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyRetention() {\n+        session.makeRecord(file.getRef());\n+        Calendar retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 5);\n+\n+        // current retention is null\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+\n+        // extend the retention\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 25);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // current retention is indeterminate\n+        checkRetentionEvents(RETAIN_UNTIL_INDETERMINATE, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // modify an indeterminate once\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 10);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+    }\n+\n+    protected void checkRetentionEvents(Calendar retainUntil, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setRetainUntil(file.getRef(), retainUntil, null);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            boolean retainUntilIndeterminate = retainUntil == null\n+                    || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTk2MDQ2OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzowNTozNlrOF8RLDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzowNTozNlrOF8RLDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0MDIzOQ==", "bodyText": "I would go for setRetentionAndCheckEvents because this method doesn't just check events.", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398740239", "createdAt": "2020-03-26T17:05:36Z", "author": {"login": "kevinleturc"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {\n+        try (CapturingEventListener listener = new CapturingEventListener(expectedEvents)) {\n+            session.setLegalHold(file.getRef(), hold, comment);\n+            transactionalFeature.nextTransaction();\n+\n+            String[] eventsNames = listener.streamCapturedEvents().map(Event::getName).toArray(String[]::new);\n+            assertArrayEquals(expectedEvents, eventsNames);\n+            listener.streamCapturedEvents()\n+                    .forEach(ev -> assertEquals(\"Event: \" + ev.getName(), //\n+                            comment, ev.getContext().getProperties().get(\"comment\")));\n+        }\n+    }\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyRetention() {\n+        session.makeRecord(file.getRef());\n+        Calendar retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 5);\n+\n+        // current retention is null\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+\n+        // extend the retention\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 25);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // current retention is indeterminate\n+        checkRetentionEvents(RETAIN_UNTIL_INDETERMINATE, DocumentEventTypes.BEFORE_EXTEND_RETENTION,\n+                DocumentEventTypes.AFTER_EXTEND_RETENTION);\n+\n+        // modify an indeterminate once\n+        retainUntil = Calendar.getInstance();\n+        retainUntil.add(Calendar.DAY_OF_MONTH, 10);\n+        checkRetentionEvents(retainUntil, DocumentEventTypes.BEFORE_SET_RETENTION,\n+                DocumentEventTypes.AFTER_SET_RETENTION);\n+    }\n+\n+    protected void checkRetentionEvents(Calendar retainUntil, String... expectedEvents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTk2MzAzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzowNjoyMlrOF8RM9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzowNjoyMlrOF8RM9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0MDcyNA==", "bodyText": "I would go for setLegalHoldAndCheckEvents because this method doesn't just check events.", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398740724", "createdAt": "2020-03-26T17:06:22Z", "author": {"login": "kevinleturc"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/test/java/org/nuxeo/retention/test/TestRetentionEvents.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.retention.test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.nuxeo.ecm.core.api.CoreSession.RETAIN_UNTIL_INDETERMINATE;\n+\n+import java.util.Calendar;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.event.DocumentEventTypes;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestRetentionEvents extends RetentionTestCase {\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldNotifyEventsWhenModifyLegalHold() {\n+        session.makeRecord(file.getRef());\n+\n+        checkLegalHoldEvents(true, \"I put the legal hold\", DocumentEventTypes.BEFORE_SET_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_SET_LEGAL_HOLD);\n+\n+        checkLegalHoldEvents(false, \"I remove the legal hold\", DocumentEventTypes.BEFORE_REMOVE_LEGAL_HOLD,\n+                DocumentEventTypes.AFTER_REMOVE_LEGAL_HOLD);\n+\n+    }\n+\n+    protected void checkLegalHoldEvents(boolean hold, String comment, String... expectedEvents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTk4NzM2OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoxMTo0OVrOF8RcjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDoyNTo1NVrOF8rODg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg==", "bodyText": "Shouldn't we do the same thing than above in the code (ie: using Objects.equals)?", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398744716", "createdAt": "2020-03-26T17:11:49Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java", "diffHunk": "@@ -2077,18 +2078,19 @@ public void setRetainUntil(DocumentRef docRef, Calendar retainUntil, String comm\n         checkPermission(doc, SET_RETENTION);\n         Map<String, Serializable> options = new HashMap<>();\n         options.put(CoreEventConstants.RETAIN_UNTIL, retainUntil);\n-        String commentStart = retainUntil == null ? null : retainUntil.toInstant().toString();\n-        if (comment == null) {\n-            comment = commentStart;\n-        } else if (commentStart != null) {\n-            comment = commentStart + \" \" + comment;\n-        }\n-        options.put(\"comment\", comment);\n+        boolean retainUntilIndeterminate = retainUntil == null\n+                || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1OTMyNQ==", "bodyText": "I used compareTo instead of equals (Calendar.equals or Object.equals) because this last one (equals) uses the time zone to check equality: have look at java.util.Calendar#equals -> from my test  the declared  RETAIN_UNTIL_INDETERMINATE will have the UTC Time zone and the retrieved Calendar from Calendar current = doc.getRetainUntil(); current will have \"Europe/Paris\" and the equality fails. I think before my fix and the adding test it's wasn't a problem because even the:\n if (Objects.equals(current, retainUntil)) {\n            // unchanged, don't do anything\n            return;\n        }\n\nwill return false and the date are set for a second time even if the calendars are the same.\nfor more informations have a look at the exiting check: org.nuxeo.ecm.core.storage.BaseDocument#allowNewRetention\nand I don\"t know how we deal with time zone in Nuxeo for Date type\n@efge", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399159325", "createdAt": "2020-03-27T10:12:16Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java", "diffHunk": "@@ -2077,18 +2078,19 @@ public void setRetainUntil(DocumentRef docRef, Calendar retainUntil, String comm\n         checkPermission(doc, SET_RETENTION);\n         Map<String, Serializable> options = new HashMap<>();\n         options.put(CoreEventConstants.RETAIN_UNTIL, retainUntil);\n-        String commentStart = retainUntil == null ? null : retainUntil.toInstant().toString();\n-        if (comment == null) {\n-            comment = commentStart;\n-        } else if (commentStart != null) {\n-            comment = commentStart + \" \" + comment;\n-        }\n-        options.put(\"comment\", comment);\n+        boolean retainUntilIndeterminate = retainUntil == null\n+                || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1OTc0Ng==", "bodyText": "Ok,\nShouldn't we use compare in the equals then?", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399159746", "createdAt": "2020-03-27T10:13:02Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java", "diffHunk": "@@ -2077,18 +2078,19 @@ public void setRetainUntil(DocumentRef docRef, Calendar retainUntil, String comm\n         checkPermission(doc, SET_RETENTION);\n         Map<String, Serializable> options = new HashMap<>();\n         options.put(CoreEventConstants.RETAIN_UNTIL, retainUntil);\n-        String commentStart = retainUntil == null ? null : retainUntil.toInstant().toString();\n-        if (comment == null) {\n-            comment = commentStart;\n-        } else if (commentStart != null) {\n-            comment = commentStart + \" \" + comment;\n-        }\n-        options.put(\"comment\", comment);\n+        boolean retainUntilIndeterminate = retainUntil == null\n+                || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTE2NA==", "bodyText": "Perhaps yes, I should confess that I didn't to want to change the  exiting code not related directly to this ticket", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399161164", "createdAt": "2020-03-27T10:15:34Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java", "diffHunk": "@@ -2077,18 +2078,19 @@ public void setRetainUntil(DocumentRef docRef, Calendar retainUntil, String comm\n         checkPermission(doc, SET_RETENTION);\n         Map<String, Serializable> options = new HashMap<>();\n         options.put(CoreEventConstants.RETAIN_UNTIL, retainUntil);\n-        String commentStart = retainUntil == null ? null : retainUntil.toInstant().toString();\n-        if (comment == null) {\n-            comment = commentStart;\n-        } else if (commentStart != null) {\n-            comment = commentStart + \" \" + comment;\n-        }\n-        options.put(\"comment\", comment);\n+        boolean retainUntilIndeterminate = retainUntil == null\n+                || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjQwNA==", "bodyText": "Hum, I would say more or less because you don't use the same way to compare the dates. I would say we should use the same way to compare them or if there's a reason, let's put it in a comment, wdyt?", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399162404", "createdAt": "2020-03-27T10:17:45Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java", "diffHunk": "@@ -2077,18 +2078,19 @@ public void setRetainUntil(DocumentRef docRef, Calendar retainUntil, String comm\n         checkPermission(doc, SET_RETENTION);\n         Map<String, Serializable> options = new HashMap<>();\n         options.put(CoreEventConstants.RETAIN_UNTIL, retainUntil);\n-        String commentStart = retainUntil == null ? null : retainUntil.toInstant().toString();\n-        if (comment == null) {\n-            comment = commentStart;\n-        } else if (commentStart != null) {\n-            comment = commentStart + \" \" + comment;\n-        }\n-        options.put(\"comment\", comment);\n+        boolean retainUntilIndeterminate = retainUntil == null\n+                || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2NTQ1Mg==", "bodyText": "to do the correct thing, let aligne the equals to use the compare like i did and like it's done on low level. I think i will use the same commit, i mean it's really a minor change to separate it into a specific commit wdyt ?", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399165452", "createdAt": "2020-03-27T10:23:13Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java", "diffHunk": "@@ -2077,18 +2078,19 @@ public void setRetainUntil(DocumentRef docRef, Calendar retainUntil, String comm\n         checkPermission(doc, SET_RETENTION);\n         Map<String, Serializable> options = new HashMap<>();\n         options.put(CoreEventConstants.RETAIN_UNTIL, retainUntil);\n-        String commentStart = retainUntil == null ? null : retainUntil.toInstant().toString();\n-        if (comment == null) {\n-            comment = commentStart;\n-        } else if (commentStart != null) {\n-            comment = commentStart + \" \" + comment;\n-        }\n-        options.put(\"comment\", comment);\n+        boolean retainUntilIndeterminate = retainUntil == null\n+                || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2Njk5MA==", "bodyText": "I think you can use the same commit, it would make sense to have it next to compare introduction you're doing \ud83d\udc4d.", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399166990", "createdAt": "2020-03-27T10:25:55Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/api/AbstractSession.java", "diffHunk": "@@ -2077,18 +2078,19 @@ public void setRetainUntil(DocumentRef docRef, Calendar retainUntil, String comm\n         checkPermission(doc, SET_RETENTION);\n         Map<String, Serializable> options = new HashMap<>();\n         options.put(CoreEventConstants.RETAIN_UNTIL, retainUntil);\n-        String commentStart = retainUntil == null ? null : retainUntil.toInstant().toString();\n-        if (comment == null) {\n-            comment = commentStart;\n-        } else if (commentStart != null) {\n-            comment = commentStart + \" \" + comment;\n-        }\n-        options.put(\"comment\", comment);\n+        boolean retainUntilIndeterminate = retainUntil == null\n+                || RETAIN_UNTIL_INDETERMINATE.compareTo(retainUntil) == 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDcxNg=="}, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjAxOTUzOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-audit.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoxOTowNVrOF8Rw_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDoxMzo0OFrOF8qzVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0OTk1MQ==", "bodyText": "Should we have the same thing for the before events?", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r398749951", "createdAt": "2020-03-26T17:19:05Z", "author": {"login": "kevinleturc"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-audit.xml", "diffHunk": "@@ -1,5 +1,15 @@\n <component name=\"org.nuxeo.retention.audit\" version=\"1.0\">\n   <extension target=\"org.nuxeo.ecm.platform.audit.service.NXAuditEventsService\" point=\"event\">\n     <event name=\"retentionRuleAttached\" />\n+    <event name=\"afterSetRetention\">\n+      <extendedInfos>\n+        <extendedInfo expression=\"${message.properties.retainUntil}\" key=\"retainUntil\" />\n+      </extendedInfos>\n+    </event>\n+    <event name=\"afterExtendRetention\">\n+      <extendedInfos>\n+        <extendedInfo expression=\"${message.properties.retainUntil}\" key=\"retainUntil\" />\n+      </extendedInfos>\n+    </event>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MDE0OA==", "bodyText": "No, currently I split into the the before event but in the audit we need only the after onces. and this contribution will be used to add information to the extend property in the audit object.", "url": "https://github.com/nuxeo/nuxeo/pull/3869#discussion_r399160148", "createdAt": "2020-03-27T10:13:48Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-retention/nuxeo-retention-core/src/main/resources/OSGI-INF/retention-audit.xml", "diffHunk": "@@ -1,5 +1,15 @@\n <component name=\"org.nuxeo.retention.audit\" version=\"1.0\">\n   <extension target=\"org.nuxeo.ecm.platform.audit.service.NXAuditEventsService\" point=\"event\">\n     <event name=\"retentionRuleAttached\" />\n+    <event name=\"afterSetRetention\">\n+      <extendedInfos>\n+        <extendedInfo expression=\"${message.properties.retainUntil}\" key=\"retainUntil\" />\n+      </extendedInfos>\n+    </event>\n+    <event name=\"afterExtendRetention\">\n+      <extendedInfos>\n+        <extendedInfo expression=\"${message.properties.retainUntil}\" key=\"retainUntil\" />\n+      </extendedInfos>\n+    </event>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0OTk1MQ=="}, "originalCommit": {"oid": "2edbcfe0ed7181c3572124f1261f302a38a909db"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4218, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}