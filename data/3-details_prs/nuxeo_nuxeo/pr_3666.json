{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjE4Mjk1", "number": 3666, "title": "feature-NXP-28424-Define-the-ColdStorage-facet", "bodyText": "T&P In Progress  -> https://qa.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-saouana/210/", "createdAt": "2020-01-14T12:51:27Z", "url": "https://github.com/nuxeo/nuxeo/pull/3666", "merged": true, "mergeCommit": {"oid": "1b3b6935aaf32ebfac19bfb711fb2b5635568e27"}, "closed": true, "closedAt": "2020-03-12T16:23:00Z", "author": {"login": "nuxeojenkins"}, "timelineItems": {"totalCount": 151, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDp5OWABqjMwMzE3NzQzMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMiZ4ggFqTM3MjUzNjU3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "add93de8af35168cd8f3fabaf071038d7db44891", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/add93de8af35168cd8f3fabaf071038d7db44891", "committedDate": "2020-02-12T16:45:52Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "2d4a4762b11e0f2aa23371f3bfd279b70978bd5e", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2d4a4762b11e0f2aa23371f3bfd279b70978bd5e", "committedDate": "2020-02-12T17:24:29Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NjY5MDIz", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-357669023", "createdAt": "2020-02-12T18:02:51Z", "commit": {"oid": "2d4a4762b11e0f2aa23371f3bfd279b70978bd5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODowMjo1MVrOFo47Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODowMjo1MVrOFo47Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxOTk5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // auto-subscribe the user, this way he will receive the mail notification when the content is available\n          \n          \n            \n                    // auto-subscribe the user, this way they will receive the mail notification when the content is available", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r378419998", "createdAt": "2020-02-12T18:02:51Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/document/RequestRetrievalFromColdStorage.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.platform.ec.notification.NotificationConstants;\n+import org.nuxeo.ecm.platform.notification.api.NotificationManager;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Requests a retrieval from the cold storage content associated with the input {@link DocumentModel}. This operation\n+ * will initiate a restoration request, calling the {@link Blob#getStream()} during this process doesn't mean you will\n+ * get the blob's content.\n+ * \n+ * @since 11.1\n+ */\n+@Operation(id = RequestRetrievalFromColdStorage.ID, category = Constants.CAT_BLOB, label = \"Request retrieval from cold storage\", description = \"Request a retrieval of the cold storage content associated with the document.\")\n+public class RequestRetrievalFromColdStorage {\n+\n+    public static final String ID = \"Document.RequestRetrievalFromColdStorage\";\n+\n+    @Param(name = \"numberOfDaysOfAvailability\", description = \"The number of days that you want your cold storage content to be accessible.\")\n+    protected int numberOfDaysOfAvailability;\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentModel doc) {\n+        // auto-subscribe the user, this way he will receive the mail notification when the content is available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d4a4762b11e0f2aa23371f3bfd279b70978bd5e"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NjcwNjEx", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-357670611", "createdAt": "2020-02-12T18:05:22Z", "commit": {"oid": "2d4a4762b11e0f2aa23371f3bfd279b70978bd5e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzAyNTkw", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-357702590", "createdAt": "2020-02-12T18:53:41Z", "commit": {"oid": "2d4a4762b11e0f2aa23371f3bfd279b70978bd5e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d4a4762b11e0f2aa23371f3bfd279b70978bd5e", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2d4a4762b11e0f2aa23371f3bfd279b70978bd5e", "committedDate": "2020-02-12T17:24:29Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "d45704561a863e82dd784759acffd93cc29c0297", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d45704561a863e82dd784759acffd93cc29c0297", "committedDate": "2020-02-13T12:11:07Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTgxMDg4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-358181088", "createdAt": "2020-02-13T12:35:33Z", "commit": {"oid": "d45704561a863e82dd784759acffd93cc29c0297"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d45704561a863e82dd784759acffd93cc29c0297", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d45704561a863e82dd784759acffd93cc29c0297", "committedDate": "2020-02-13T12:11:07Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "38f8aea272f782bad3391f557f53efea9c3b5e0f", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/38f8aea272f782bad3391f557f53efea9c3b5e0f", "committedDate": "2020-02-20T16:53:58Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38f8aea272f782bad3391f557f53efea9c3b5e0f", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/38f8aea272f782bad3391f557f53efea9c3b5e0f", "committedDate": "2020-02-20T16:53:58Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "590344f14c7c362984cde2a7308edab994972aea", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/590344f14c7c362984cde2a7308edab994972aea", "committedDate": "2020-02-21T08:13:55Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "590344f14c7c362984cde2a7308edab994972aea", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/590344f14c7c362984cde2a7308edab994972aea", "committedDate": "2020-02-21T08:13:55Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "6eef336b384a9c7fa912abb0041ca08c0b57d68e", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6eef336b384a9c7fa912abb0041ca08c0b57d68e", "committedDate": "2020-02-21T08:53:30Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6eef336b384a9c7fa912abb0041ca08c0b57d68e", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6eef336b384a9c7fa912abb0041ca08c0b57d68e", "committedDate": "2020-02-21T08:53:30Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "e79e79cf3b52c7ae075339c8e07e3812e6b75910", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e79e79cf3b52c7ae075339c8e07e3812e6b75910", "committedDate": "2020-02-21T09:15:32Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e79e79cf3b52c7ae075339c8e07e3812e6b75910", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e79e79cf3b52c7ae075339c8e07e3812e6b75910", "committedDate": "2020-02-21T09:15:32Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "434ed557ac5ddc81e3493bd67148941167b1fded", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/434ed557ac5ddc81e3493bd67148941167b1fded", "committedDate": "2020-02-21T12:13:17Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "434ed557ac5ddc81e3493bd67148941167b1fded", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/434ed557ac5ddc81e3493bd67148941167b1fded", "committedDate": "2020-02-21T12:13:17Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "9ac7ea1e5868af4a7e30fd8d9364910f6c8908fd", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9ac7ea1e5868af4a7e30fd8d9364910f6c8908fd", "committedDate": "2020-02-21T12:21:10Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ac7ea1e5868af4a7e30fd8d9364910f6c8908fd", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9ac7ea1e5868af4a7e30fd8d9364910f6c8908fd", "committedDate": "2020-02-21T12:21:10Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "c0830954071c339167cbed7919140c1aa4023295", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c0830954071c339167cbed7919140c1aa4023295", "committedDate": "2020-02-21T13:42:33Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0830954071c339167cbed7919140c1aa4023295", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c0830954071c339167cbed7919140c1aa4023295", "committedDate": "2020-02-21T13:42:33Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "b0b40d92306ff9957c532129a54e69d2f296f085", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b0b40d92306ff9957c532129a54e69d2f296f085", "committedDate": "2020-02-21T13:45:39Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0b40d92306ff9957c532129a54e69d2f296f085", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b0b40d92306ff9957c532129a54e69d2f296f085", "committedDate": "2020-02-21T13:45:39Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "d080e48aa5cc3668bb1de3aeae016936c1889026", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d080e48aa5cc3668bb1de3aeae016936c1889026", "committedDate": "2020-02-21T17:10:06Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d080e48aa5cc3668bb1de3aeae016936c1889026", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d080e48aa5cc3668bb1de3aeae016936c1889026", "committedDate": "2020-02-21T17:10:06Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "d613271a20d8ceb00720556d8559c6996e39b57a", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d613271a20d8ceb00720556d8559c6996e39b57a", "committedDate": "2020-02-21T17:21:12Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d613271a20d8ceb00720556d8559c6996e39b57a", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d613271a20d8ceb00720556d8559c6996e39b57a", "committedDate": "2020-02-21T17:21:12Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "5b84ba761215c2c54994be451173e134d1bc83b6", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5b84ba761215c2c54994be451173e134d1bc83b6", "committedDate": "2020-02-21T17:26:36Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b84ba761215c2c54994be451173e134d1bc83b6", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5b84ba761215c2c54994be451173e134d1bc83b6", "committedDate": "2020-02-21T17:26:36Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "960e6c655858499f414887fda04e08d3262c19ee", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/960e6c655858499f414887fda04e08d3262c19ee", "committedDate": "2020-02-25T10:51:07Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "960e6c655858499f414887fda04e08d3262c19ee", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/960e6c655858499f414887fda04e08d3262c19ee", "committedDate": "2020-02-25T10:51:07Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "baa94a4d093c1b512badb4ab68339f26e89ff3e5", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/baa94a4d093c1b512badb4ab68339f26e89ff3e5", "committedDate": "2020-02-25T17:28:10Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MDIwMzg5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365020389", "createdAt": "2020-02-26T15:56:06Z", "commit": {"oid": "e585ff0fcd1caa2611225c18438671da15e6695e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NjowNlrOFuxVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NjowNlrOFuxVgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NzEzNg==", "bodyText": "\"check if coldstorage:coldContent\"\nor\n\"check if the coldstorage:coldContent property\"", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384587136", "createdAt": "2020-02-26T15:56:06Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.*;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.ColdStorageFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(ColdStorageFeature.class)\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+\n+        // check if the `coldstorage:coldContent` contains the original file content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e585ff0fcd1caa2611225c18438671da15e6695e"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTc4MDE2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365178016", "createdAt": "2020-02-26T19:27:26Z", "commit": {"oid": "e585ff0fcd1caa2611225c18438671da15e6695e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyNzoyNlrOFu4_0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyNzoyNlrOFu4_0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMjY1Ng==", "bodyText": "You could probably use DummyBlobProvider here, maybe a bit cheaper than the in-memory one and we probably don't care about having 2 different implementations.\nIn fact, if I'm not mistaken, in the real case, we'll have 2 instances of S3BlobProvider with a different bucket property.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384712656", "createdAt": "2020-02-26T19:27:26Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.coldstorage.test\">\n+\n+  <extension target=\"org.nuxeo.ecm.core.blob.BlobManager\" point=\"configuration\">\n+    <blobprovider name=\"inMemory\">\n+      <class>org.nuxeo.ecm.core.blob.InMemoryBlobProvider</class>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e585ff0fcd1caa2611225c18438671da15e6695e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTgwOTA0", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365180904", "createdAt": "2020-02-26T19:31:39Z", "commit": {"oid": "e585ff0fcd1caa2611225c18438671da15e6695e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozMTozOVrOFu5IwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozMTozOVrOFu5IwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxNDk0NA==", "bodyText": "Since we have a test contribution to dispatch a blob given it's xpath, could we add assertions to verify their blob provider?\nSomething based ont the blob keys, similar to what is done in TestBlobDispatcher.\nfile:content => default, coldstorage:coldContent => dummy", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384714944", "createdAt": "2020-02-26T19:31:39Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.*;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.ColdStorageFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(ColdStorageFeature.class)\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e585ff0fcd1caa2611225c18438671da15e6695e"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjA4NjU1", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365208655", "createdAt": "2020-02-26T20:12:47Z", "commit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxMjo0N1rOFu6laQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxMjo0N1rOFu6laQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczODY2NQ==", "bodyText": "Maybe use a simpler name for readability as we know we're in the TestColdStorage class: \"shouldRequestRetrieval\"?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384738665", "createdAt": "2020-02-26T20:12:47Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -100,6 +111,61 @@ public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n         }\n     }\n \n+    @Test\n+    public void shouldRequestRetrievalDocumentBlobFromColdStorage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjA5Njc4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365209678", "createdAt": "2020-02-26T20:14:28Z", "commit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNDoyOFrOFu6ofw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNDoyOFrOFu6ofw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczOTQ1NQ==", "bodyText": "\"shouldFailRequestRetrievalBeingRetrieved\"?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384739455", "createdAt": "2020-02-26T20:14:28Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -100,6 +111,61 @@ public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n         }\n     }\n \n+    @Test\n+    public void shouldRequestRetrievalDocumentBlobFromColdStorage() {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // request a retrieval from the cold storage content\n+        documentModel = ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(Boolean.TRUE.equals(\n+                documentModel.getPropertyValue(ColdStorageHelper.COLD_STORAGE_BEING_RETRIEVED_PROPERTY)));\n+    }\n+\n+    @Test\n+    public void shouldFailWhenRequestRetrievalDocumentBlobFromColdStorageBeingRetrieved() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjA5ODUy", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365209852", "createdAt": "2020-02-26T20:14:45Z", "commit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNDo0NVrOFu6o_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNDo0NVrOFu6o_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczOTU4MQ==", "bodyText": "\"shouldFailRequestRetrievalNoContent\"?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384739581", "createdAt": "2020-02-26T20:14:45Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -100,6 +111,61 @@ public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n         }\n     }\n \n+    @Test\n+    public void shouldRequestRetrievalDocumentBlobFromColdStorage() {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // request a retrieval from the cold storage content\n+        documentModel = ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(Boolean.TRUE.equals(\n+                documentModel.getPropertyValue(ColdStorageHelper.COLD_STORAGE_BEING_RETRIEVED_PROPERTY)));\n+    }\n+\n+    @Test\n+    public void shouldFailWhenRequestRetrievalDocumentBlobFromColdStorageBeingRetrieved() {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // request a retrieval from the cold storage content\n+        documentModel = ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+\n+        // try to request a retrieval for a second time\n+        try {\n+            ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                    NUMBER_OF_DAYS_OF_AVAILABILITY);\n+            fail(\"Should fail because the cold storage content is being retrieved.\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_FORBIDDEN, ne.getStatusCode());\n+            assertEquals(String.format(\"The cold storage content associated with the document: %s is being retrieved.\",\n+                    documentModel), ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailWheRequestRetrievalDocumentBlobWithoutColdStorageContent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjEwMjA2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365210206", "createdAt": "2020-02-26T20:15:20Z", "commit": {"oid": "e585ff0fcd1caa2611225c18438671da15e6695e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNToyMVrOFu6qCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNToyMVrOFu6qCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczOTg1MQ==", "bodyText": "shorter: \"shouldMoveToColdStorage\"", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384739851", "createdAt": "2020-02-26T20:15:21Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.*;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.ColdStorageFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(ColdStorageFeature.class)\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e585ff0fcd1caa2611225c18438671da15e6695e"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjExMzUy", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365211352", "createdAt": "2020-02-26T20:17:14Z", "commit": {"oid": "baa94a4d093c1b512badb4ab68339f26e89ff3e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNzoxNVrOFu6tow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNzoxNVrOFu6tow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0MDc3MQ==", "bodyText": "\"shouldFailMoveAlreadyInColdStorage\"?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384740771", "createdAt": "2020-02-26T20:17:15Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.blob.BlobManager;\n+import org.nuxeo.ecm.core.blob.BlobStatus;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.blob.ManagedBlob;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.ecm.core.io.download.DownloadService;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.ColdStorageFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(ColdStorageFeature.class)\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    protected static final int NUMBER_OF_DAYS_OF_AVAILABILITY = 5;\n+\n+    protected static final String DEFAULT_DOC_NAME = \"anyFile\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected BlobManager blobManager;\n+\n+    @Inject\n+    protected DownloadService downloadService;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move the blob to cold storage\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingDocumentBlobAlreadyInColdStorage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa94a4d093c1b512badb4ab68339f26e89ff3e5"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjExNjg4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365211688", "createdAt": "2020-02-26T20:17:49Z", "commit": {"oid": "baa94a4d093c1b512badb4ab68339f26e89ff3e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNzo1MFrOFu6umw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxNzo1MFrOFu6umw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0MTAxOQ==", "bodyText": "\"shouldFailMoveToColdStorageNoContent\"?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384741019", "createdAt": "2020-02-26T20:17:50Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.blob.BlobManager;\n+import org.nuxeo.ecm.core.blob.BlobStatus;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.blob.ManagedBlob;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.ecm.core.io.download.DownloadService;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.ColdStorageFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(ColdStorageFeature.class)\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    protected static final int NUMBER_OF_DAYS_OF_AVAILABILITY = 5;\n+\n+    protected static final String DEFAULT_DOC_NAME = \"anyFile\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected BlobManager blobManager;\n+\n+    @Inject\n+    protected DownloadService downloadService;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move the blob to cold storage\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingDocumentBlobAlreadyInColdStorage() {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move for the first time\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // try to make another move\n+        try {\n+            ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+            fail(\"Should fail because the content is already in cold storage\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_CONFLICT, ne.getStatusCode());\n+            assertEquals(String.format(\"The main content for document: %s is already in cold storage.\", documentModel),\n+                    ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa94a4d093c1b512badb4ab68339f26e89ff3e5"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjExOTkx", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365211991", "createdAt": "2020-02-26T20:18:19Z", "commit": {"oid": "baa94a4d093c1b512badb4ab68339f26e89ff3e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxODoyMFrOFu6vjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoxODoyMFrOFu6vjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0MTI2MQ==", "bodyText": "\"shouldCheckAvailability\"?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384741261", "createdAt": "2020-02-26T20:18:20Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.blob.BlobManager;\n+import org.nuxeo.ecm.core.blob.BlobStatus;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.blob.ManagedBlob;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.ecm.core.io.download.DownloadService;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.ColdStorageFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(ColdStorageFeature.class)\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    protected static final int NUMBER_OF_DAYS_OF_AVAILABILITY = 5;\n+\n+    protected static final String DEFAULT_DOC_NAME = \"anyFile\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Inject\n+    protected BlobManager blobManager;\n+\n+    @Inject\n+    protected DownloadService downloadService;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move the blob to cold storage\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingDocumentBlobAlreadyInColdStorage() {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move for the first time\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // try to make another move\n+        try {\n+            ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+            fail(\"Should fail because the content is already in cold storage\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_CONFLICT, ne.getStatusCode());\n+            assertEquals(String.format(\"The main content for document: %s is already in cold storage.\", documentModel),\n+                    ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, false);\n+        try {\n+            ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+            fail(\"Should fail because there is no main content associated with the document\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_NOT_FOUND, ne.getStatusCode());\n+            assertEquals(String.format(\"There is no main content for document: %s.\", documentModel), ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldRequestRetrievalDocumentBlobFromColdStorage() {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // request a retrieval from the cold storage content\n+        documentModel = ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(Boolean.TRUE.equals(\n+                documentModel.getPropertyValue(ColdStorageHelper.COLD_STORAGE_BEING_RETRIEVED_PROPERTY)));\n+    }\n+\n+    @Test\n+    public void shouldFailWhenRequestRetrievalDocumentBlobFromColdStorageBeingRetrieved() {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // request a retrieval from the cold storage content\n+        documentModel = ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+\n+        // try to request a retrieval for a second time\n+        try {\n+            ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                    NUMBER_OF_DAYS_OF_AVAILABILITY);\n+            fail(\"Should fail because the cold storage content is being retrieved.\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_FORBIDDEN, ne.getStatusCode());\n+            assertEquals(String.format(\"The cold storage content associated with the document: %s is being retrieved.\",\n+                    documentModel), ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailWheRequestRetrievalDocumentBlobWithoutColdStorageContent() {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+        try {\n+            // try a request retrieval from the cold storage content where the blob is not stored in it\n+            ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                    NUMBER_OF_DAYS_OF_AVAILABILITY);\n+            fail(\"Should fail because there no cold storage content associated to this document.\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_NOT_FOUND, ne.getStatusCode());\n+            assertEquals(String.format(\"No cold storage content defined for document: %s.\", documentModel),\n+                    ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldCheckAvailabilityOfColdStorageContent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa94a4d093c1b512badb4ab68339f26e89ff3e5"}, "originalPosition": 193}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjEzMzQ5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365213349", "createdAt": "2020-02-26T20:20:36Z", "commit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoyMDozNlrOFu6zvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoyMDozNlrOFu6zvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0MjMzNA==", "bodyText": "\"request a retrieval from the cold storage\"\nor\n\"request cold storage content retrieval\"", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384742334", "createdAt": "2020-02-26T20:20:36Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -100,6 +111,61 @@ public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n         }\n     }\n \n+    @Test\n+    public void shouldRequestRetrievalDocumentBlobFromColdStorage() {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // request a retrieval from the cold storage content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjE5NTA2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365219506", "createdAt": "2020-02-26T20:30:31Z", "commit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDozMDozMVrOFu7GUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDozMDozMVrOFu7GUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0NzA5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *            restoring\n          \n          \n            \n                 *            restoring it", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384747091", "createdAt": "2020-02-26T20:30:31Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -75,6 +83,61 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Requests a retrieval of the cold storage content associated with the document of the given {@link DocumentRef}.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjI1NTc1", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365225575", "createdAt": "2020-02-26T20:40:48Z", "commit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDo0MDo0OVrOFu7akA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDo0MDo0OVrOFu7akA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MjI3Mg==", "bodyText": "\"Requests a retrieval from cold storage of the content\"", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384752272", "createdAt": "2020-02-26T20:40:49Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/RequestRetrievalFromColdStorage.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.coldstorage;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+\n+/**\n+ * Requests a retrieval from the cold storage content associated with the input {@link DocumentModel}. This operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjI2MjY3", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365226267", "createdAt": "2020-02-26T20:41:57Z", "commit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDo0MTo1N1rOFu7c7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDo0MTo1N1rOFu7c7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1Mjg3OQ==", "bodyText": "probably useless", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r384752879", "createdAt": "2020-02-26T20:41:57Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/RequestRetrievalFromColdStorage.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.coldstorage;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+\n+/**\n+ * Requests a retrieval from the cold storage content associated with the input {@link DocumentModel}. This operation\n+ * will initiate a restoration request, calling the {@link Blob#getStream()} during this process doesn't mean you will\n+ * get the blob's content.\n+ *\n+ * @since 11.1\n+ */\n+@Operation(id = RequestRetrievalFromColdStorage.ID, category = Constants.CAT_BLOB, label = \"Request retrieval from cold storage\", description = \"Request a retrieval of the cold storage content associated with the document.\")\n+public class RequestRetrievalFromColdStorage {\n+\n+    public static final String ID = \"Document.RequestRetrievalFromColdStorage\";\n+\n+    @Param(name = \"numberOfDaysOfAvailability\", description = \"The number of days that you want your cold storage content to be accessible.\")\n+    protected int numberOfDaysOfAvailability;\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentModel doc) {\n+        // request a retrieval", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3145ae2f7137d40730102cca07e5e13b48fd72b7"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "baa94a4d093c1b512badb4ab68339f26e89ff3e5", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/baa94a4d093c1b512badb4ab68339f26e89ff3e5", "committedDate": "2020-02-25T17:28:10Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "dda56369d6828f247071862ca23a34e0e29df79f", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/dda56369d6828f247071862ca23a34e0e29df79f", "committedDate": "2020-02-27T08:50:51Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NTQ5NjY2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365549666", "createdAt": "2020-02-27T10:00:33Z", "commit": {"oid": "2be78d0e1338ae9924a5b41f9ebf363c43d3afb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDowMDozM1rOFvL9yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDowMDozM1rOFvL9yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAyMzQzMg==", "bodyText": "expectedAvailableDocIds.size() can be extracted to a var", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385023432", "createdAt": "2020-02-27T10:00:33Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -180,4 +238,50 @@ protected void checkBlobContent(DocumentModel documentModel, String xpath, Strin\n         assertNotNull(content);\n         assertEquals(expectedContent, content.getString());\n     }\n+\n+    protected void checkAvailabilityOfDocuments(List<String> expectedAvailableDocIds, Instant downloadableUntil,\n+            int totalBeingRetrieved) {\n+        try (CapturingEventListener listener = new CapturingEventListener(\n+                ColdStorageHelper.COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME)) {\n+            ColdStorageHelper.ColdStorageContentStatus coldStorageContentStatus = ColdStorageHelper.checkColdStorageContentAvailability(\n+                    session);\n+\n+            assertEquals(totalBeingRetrieved, coldStorageContentStatus.getTotalBeingRetrieved());\n+            assertEquals(expectedAvailableDocIds.size(), coldStorageContentStatus.getTotalAvailable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be78d0e1338ae9924a5b41f9ebf363c43d3afb1"}, "originalPosition": 160}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NTU1OTg5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365555989", "createdAt": "2020-02-27T10:09:40Z", "commit": {"oid": "2be78d0e1338ae9924a5b41f9ebf363c43d3afb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDowOTo0MFrOFvMRPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDowOTo0MFrOFvMRPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAyODQxMg==", "bodyText": "I would remove \"for a given repository\" since the session is actually handled by checkColdStorageContentAvailability.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385028412", "createdAt": "2020-02-27T10:09:40Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -138,6 +204,29 @@ protected static String getContentBlobKey(Blob coldContent) {\n         return key;\n     }\n \n+    /**\n+     * Status about the cold storage content being retrieved or available for a given repository.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be78d0e1338ae9924a5b41f9ebf363c43d3afb1"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NTY0MDE0", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365564014", "createdAt": "2020-02-27T10:21:24Z", "commit": {"oid": "dda56369d6828f247071862ca23a34e0e29df79f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyMToyNFrOFvMprg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyMToyNFrOFvMprg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzNDY3MA==", "bodyText": "Unused", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385034670", "createdAt": "2020-02-27T10:21:24Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/RequestRetrievalFromColdStorageTest.java", "diffHunk": "@@ -52,6 +58,12 @@\n     @Inject\n     protected AutomationService automationService;\n \n+    @Inject\n+    protected NotificationManager notificationManager;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda56369d6828f247071862ca23a34e0e29df79f"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NTY0OTAy", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365564902", "createdAt": "2020-02-27T10:22:40Z", "commit": {"oid": "dda56369d6828f247071862ca23a34e0e29df79f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyMjo0MVrOFvMskQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyMjo0MVrOFvMskQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzNTQwOQ==", "bodyText": "Unused, should be removed along with 938191c", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385035409", "createdAt": "2020-02-27T10:22:41Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/RequestRetrievalFromColdStorageTest.java", "diffHunk": "@@ -52,6 +58,12 @@\n     @Inject\n     protected AutomationService automationService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda56369d6828f247071862ca23a34e0e29df79f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NTY4OTU2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365568956", "createdAt": "2020-02-27T10:28:33Z", "commit": {"oid": "6098a8e97c6a60722259b6eea505d6e2ac1aa1ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyODozNFrOFvM5HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDoyODozNFrOFvM5HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzODYyMQ==", "bodyText": "Is concurrency needed? If yes, maybe a comment to explain why.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385038621", "createdAt": "2020-02-27T10:28:34Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/DummyBlobProvider.java", "diffHunk": "@@ -42,12 +44,16 @@\n \n     protected Map<String, byte[]> blobs;\n \n+    /** @since 11.1 **/\n+    protected Map<String, BlobStatus> blobsStatus;\n+\n     protected AtomicLong counter;\n \n     @Override\n     public void initialize(String blobProviderId, Map<String, String> properties) throws IOException {\n         super.initialize(blobProviderId, properties);\n         blobs = new HashMap<>();\n+        blobsStatus = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6098a8e97c6a60722259b6eea505d6e2ac1aa1ad"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODUxODM5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-365851839", "createdAt": "2020-02-27T17:25:07Z", "commit": {"oid": "0439203e669a8dfefa79745d262534c891993641"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoyOTowMFrOFvabLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1NTozN1rOFvbSXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MDMzMw==", "bodyText": "The main content will have a blob provider id default in theory (or test I'm not sure if it takes the repo name)", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385260333", "createdAt": "2020-02-27T17:29:00Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.*;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.ColdStorageFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(ColdStorageFeature.class)\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxNDk0NA=="}, "originalCommit": {"oid": "e585ff0fcd1caa2611225c18438671da15e6695e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MDk0OQ==", "bodyText": "Juste call the exception the traditional e if there's no chance of confusion (in several methods).", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385260949", "createdAt": "2020-02-27T17:30:14Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.*;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.ColdStorageFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(ColdStorageFeature.class)\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingDocumentBlobAlreadyInColdStorage() {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move for the first time\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // try to make another move\n+        try {\n+            ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+            fail(\"Should fail because the content is already in cold storage\");\n+        } catch (NuxeoException ne) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0439203e669a8dfefa79745d262534c891993641"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MjQ3Mw==", "bodyText": "InMemory is really cheap, I think we have too many dummy classes where the inmemory ones suffice.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385262473", "createdAt": "2020-02-27T17:32:51Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.coldstorage.test\">\n+\n+  <extension target=\"org.nuxeo.ecm.core.blob.BlobManager\" point=\"configuration\">\n+    <blobprovider name=\"inMemory\">\n+      <class>org.nuxeo.ecm.core.blob.InMemoryBlobProvider</class>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMjY1Ng=="}, "originalCommit": {"oid": "e585ff0fcd1caa2611225c18438671da15e6695e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NDUzOA==", "bodyText": "It must be possible to skip the saveDocument step if the right param is set (as it helps having faster chained operations). Please see all the other operation classes that have @Param(name = \"save\", required = false, values = \"true\")", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385264538", "createdAt": "2020-02-27T17:36:58Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorage.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.coldstorage;\n+\n+import java.io.Serializable;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Moves the main content associated with the input {@link DocumentModel} to the cold storage.\n+ * \n+ * @since 11.1\n+ */\n+@Operation(id = MoveToColdStorage.ID, category = Constants.CAT_BLOB, label = \"Move to Cold Storage\", description = \"Move the main document content to the cold storage.\")\n+public class MoveToColdStorage {\n+\n+    public static final String ID = \"Document.MoveToColdStorage\";\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentModel doc) {\n+        // retrieve the thumbnail which will be used to replace the content, once the move done\n+        Blob thumbnail = Framework.getService(ThumbnailService.class).getThumbnail(doc, session);\n+\n+        // make the move\n+        DocumentModel documentModel = ColdStorageHelper.moveContentToColdStorage(session, doc.getRef());\n+\n+        // replace the file content document by the thumbnail\n+        documentModel.setPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY, (Serializable) thumbnail);\n+        return session.saveDocument(documentModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0439203e669a8dfefa79745d262534c891993641"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NjA3NA==", "bodyText": "Let's make numberOfDaysOfAvailability a Duration directly in the signature instead of an int, and use durations everywhere we can.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385266074", "createdAt": "2020-02-27T17:39:52Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -75,6 +83,61 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Requests a retrieval of the cold storage content associated with the document of the given {@link DocumentRef}.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a restoration request, calling the {@link Blob#getStream()} during this\n+     *          process doesn't mean you will get the blob's content.\n+     * @return the updated document model if the retrieve succeeds\n+     * @throws NuxeoException if there is no cold storage content associated with the given document, or if it is being\n+     *             retrieved\n+     */\n+    public static DocumentModel requestRetrievalFromColdStorage(CoreSession session, DocumentRef documentRef,\n+            int numberOfDaysOfAvailability) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "938191c373574825b97c76659cc5c57026ab8865"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NzA1MA==", "bodyText": "RESTORE_DURATION = Duration.ofDays(5)", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385267050", "createdAt": "2020-02-27T17:41:33Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -47,6 +56,8 @@\n \n     protected static final String FILE_CONTENT = \"foo\";\n \n+    protected static final int NUMBER_OF_DAYS_OF_AVAILABILITY = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "938191c373574825b97c76659cc5c57026ab8865"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NzY4MA==", "bodyText": "{} days will change if we use durations everywhere. {} of a duration should be enough for debug.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385267680", "createdAt": "2020-02-27T17:42:48Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -75,6 +83,61 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Requests a retrieval of the cold storage content associated with the document of the given {@link DocumentRef}.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a restoration request, calling the {@link Blob#getStream()} during this\n+     *          process doesn't mean you will get the blob's content.\n+     * @return the updated document model if the retrieve succeeds\n+     * @throws NuxeoException if there is no cold storage content associated with the given document, or if it is being\n+     *             retrieved\n+     */\n+    public static DocumentModel requestRetrievalFromColdStorage(CoreSession session, DocumentRef documentRef,\n+            int numberOfDaysOfAvailability) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+        log.debug(\"Retrieve from cold storage the content of document: {} for: {} days\", documentModel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "938191c373574825b97c76659cc5c57026ab8865"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2Nzg3MA==", "bodyText": "ioe -> e", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385267870", "createdAt": "2020-02-27T17:43:11Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -75,6 +83,61 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Requests a retrieval of the cold storage content associated with the document of the given {@link DocumentRef}.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a restoration request, calling the {@link Blob#getStream()} during this\n+     *          process doesn't mean you will get the blob's content.\n+     * @return the updated document model if the retrieve succeeds\n+     * @throws NuxeoException if there is no cold storage content associated with the given document, or if it is being\n+     *             retrieved\n+     */\n+    public static DocumentModel requestRetrievalFromColdStorage(CoreSession session, DocumentRef documentRef,\n+            int numberOfDaysOfAvailability) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+        log.debug(\"Retrieve from cold storage the content of document: {} for: {} days\", documentModel,\n+                numberOfDaysOfAvailability);\n+\n+        if (!documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+                || documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) == null) {\n+            throw new NuxeoException(String.format(\"No cold storage content defined for document: %s.\", documentModel),\n+                    SC_NOT_FOUND);\n+        }\n+\n+        Serializable beingRetrieved = documentModel.getPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY);\n+        if (Boolean.TRUE.equals(beingRetrieved)) {\n+            throw new NuxeoException(\n+                    String.format(\"The cold storage content associated with the document: %s is being retrieved.\",\n+                            documentModel),\n+                    SC_FORBIDDEN);\n+        }\n+\n+        try {\n+            Blob coldContent = (Blob) documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY);\n+            String coldContentKey = getContentBlobKey(coldContent);\n+            Duration duration = Duration.of(numberOfDaysOfAvailability, ChronoUnit.DAYS);\n+            BlobUpdateContext updateContext = new BlobUpdateContext(coldContentKey).withRestoreForDuration(duration);\n+            Framework.getService(BlobManager.class).getBlobProvider(coldContent).updateBlob(updateContext);\n+        } catch (IOException ioe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "938191c373574825b97c76659cc5c57026ab8865"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3MDA1Ng==", "bodyText": "There's something we probably have to refactor a bit to make this easier on the caller here. Later.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385270056", "createdAt": "2020-02-27T17:47:31Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -75,6 +83,61 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Requests a retrieval of the cold storage content associated with the document of the given {@link DocumentRef}.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a restoration request, calling the {@link Blob#getStream()} during this\n+     *          process doesn't mean you will get the blob's content.\n+     * @return the updated document model if the retrieve succeeds\n+     * @throws NuxeoException if there is no cold storage content associated with the given document, or if it is being\n+     *             retrieved\n+     */\n+    public static DocumentModel requestRetrievalFromColdStorage(CoreSession session, DocumentRef documentRef,\n+            int numberOfDaysOfAvailability) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+        log.debug(\"Retrieve from cold storage the content of document: {} for: {} days\", documentModel,\n+                numberOfDaysOfAvailability);\n+\n+        if (!documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+                || documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) == null) {\n+            throw new NuxeoException(String.format(\"No cold storage content defined for document: %s.\", documentModel),\n+                    SC_NOT_FOUND);\n+        }\n+\n+        Serializable beingRetrieved = documentModel.getPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY);\n+        if (Boolean.TRUE.equals(beingRetrieved)) {\n+            throw new NuxeoException(\n+                    String.format(\"The cold storage content associated with the document: %s is being retrieved.\",\n+                            documentModel),\n+                    SC_FORBIDDEN);\n+        }\n+\n+        try {\n+            Blob coldContent = (Blob) documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY);\n+            String coldContentKey = getContentBlobKey(coldContent);\n+            Duration duration = Duration.of(numberOfDaysOfAvailability, ChronoUnit.DAYS);\n+            BlobUpdateContext updateContext = new BlobUpdateContext(coldContentKey).withRestoreForDuration(duration);\n+            Framework.getService(BlobManager.class).getBlobProvider(coldContent).updateBlob(updateContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "938191c373574825b97c76659cc5c57026ab8865"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3MDk3Mg==", "bodyText": "Not sure we want to call saveDocument here, that probably should be an option in the operation too. Again, to avoid doing redundant saves.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385270972", "createdAt": "2020-02-27T17:49:12Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -75,6 +83,61 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Requests a retrieval of the cold storage content associated with the document of the given {@link DocumentRef}.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a restoration request, calling the {@link Blob#getStream()} during this\n+     *          process doesn't mean you will get the blob's content.\n+     * @return the updated document model if the retrieve succeeds\n+     * @throws NuxeoException if there is no cold storage content associated with the given document, or if it is being\n+     *             retrieved\n+     */\n+    public static DocumentModel requestRetrievalFromColdStorage(CoreSession session, DocumentRef documentRef,\n+            int numberOfDaysOfAvailability) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+        log.debug(\"Retrieve from cold storage the content of document: {} for: {} days\", documentModel,\n+                numberOfDaysOfAvailability);\n+\n+        if (!documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+                || documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) == null) {\n+            throw new NuxeoException(String.format(\"No cold storage content defined for document: %s.\", documentModel),\n+                    SC_NOT_FOUND);\n+        }\n+\n+        Serializable beingRetrieved = documentModel.getPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY);\n+        if (Boolean.TRUE.equals(beingRetrieved)) {\n+            throw new NuxeoException(\n+                    String.format(\"The cold storage content associated with the document: %s is being retrieved.\",\n+                            documentModel),\n+                    SC_FORBIDDEN);\n+        }\n+\n+        try {\n+            Blob coldContent = (Blob) documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY);\n+            String coldContentKey = getContentBlobKey(coldContent);\n+            Duration duration = Duration.of(numberOfDaysOfAvailability, ChronoUnit.DAYS);\n+            BlobUpdateContext updateContext = new BlobUpdateContext(coldContentKey).withRestoreForDuration(duration);\n+            Framework.getService(BlobManager.class).getBlobProvider(coldContent).updateBlob(updateContext);\n+        } catch (IOException ioe) {\n+            throw new NuxeoException(ioe);\n+        }\n+        documentModel.setPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY, true);\n+        return session.saveDocument(documentModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "938191c373574825b97c76659cc5c57026ab8865"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3MTU5Mg==", "bodyText": "assertEquals(Boolean.TRUE, ...)", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385271592", "createdAt": "2020-02-27T17:50:15Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -100,6 +111,61 @@ public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n         }\n     }\n \n+    @Test\n+    public void shouldRequestRetrievalDocumentBlobFromColdStorage() {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // request a retrieval from the cold storage content\n+        documentModel = ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(Boolean.TRUE.equals(\n+                documentModel.getPropertyValue(ColdStorageHelper.COLD_STORAGE_BEING_RETRIEVED_PROPERTY)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "938191c373574825b97c76659cc5c57026ab8865"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3MTcwNw==", "bodyText": "ne -> e", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385271707", "createdAt": "2020-02-27T17:50:29Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -100,6 +111,61 @@ public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n         }\n     }\n \n+    @Test\n+    public void shouldRequestRetrievalDocumentBlobFromColdStorage() {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // request a retrieval from the cold storage content\n+        documentModel = ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+        transactionalFeature.nextTransaction();\n+        documentModel.refresh();\n+\n+        assertTrue(Boolean.TRUE.equals(\n+                documentModel.getPropertyValue(ColdStorageHelper.COLD_STORAGE_BEING_RETRIEVED_PROPERTY)));\n+    }\n+\n+    @Test\n+    public void shouldFailWhenRequestRetrievalDocumentBlobFromColdStorageBeingRetrieved() {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // request a retrieval from the cold storage content\n+        documentModel = ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+\n+        // try to request a retrieval for a second time\n+        try {\n+            ColdStorageHelper.requestRetrievalFromColdStorage(session, documentModel.getRef(),\n+                    NUMBER_OF_DAYS_OF_AVAILABILITY);\n+            fail(\"Should fail because the cold storage content is being retrieved.\");\n+        } catch (NuxeoException ne) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "938191c373574825b97c76659cc5c57026ab8865"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3MjUxNg==", "bodyText": "Add optional saveDocument here too (and not in helper)", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385272516", "createdAt": "2020-02-27T17:51:57Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/coldstorage/RequestRetrievalFromColdStorage.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.coldstorage;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+\n+/**\n+ * Requests a retrieval from the cold storage content associated with the input {@link DocumentModel}. This operation\n+ * will initiate a restoration request, calling the {@link Blob#getStream()} during this process doesn't mean you will\n+ * get the blob's content.\n+ *\n+ * @since 11.1\n+ */\n+@Operation(id = RequestRetrievalFromColdStorage.ID, category = Constants.CAT_BLOB, label = \"Request retrieval from cold storage\", description = \"Request a retrieval of the cold storage content associated with the document.\")\n+public class RequestRetrievalFromColdStorage {\n+\n+    public static final String ID = \"Document.RequestRetrievalFromColdStorage\";\n+\n+    @Param(name = \"numberOfDaysOfAvailability\", description = \"The number of days that you want your cold storage content to be accessible.\")\n+    protected int numberOfDaysOfAvailability;\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentModel doc) {\n+        // request a retrieval\n+        return ColdStorageHelper.requestRetrievalFromColdStorage(session, doc.getRef(), numberOfDaysOfAvailability);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "938191c373574825b97c76659cc5c57026ab8865"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3MzA1NA==", "bodyText": "ne -> e", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385273054", "createdAt": "2020-02-27T17:52:57Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/RequestRetrievalFromColdStorageTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.coldstorage;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class RequestRetrievalFromColdStorageTest extends AbstractTestColdStorageOperation {\n+\n+    protected static final int NUMBER_OF_DAYS_OF_AVAILABILITY = 5;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService automationService;\n+\n+    @Test\n+    public void shouldRequestRetrievalFromColdStorage() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);\n+        // first make the move to cold storage\n+        moveContentToColdStorage(session, documentModel);\n+        // request a retrieval from the cold storage content\n+        requestRetrievalContentFromColdStorage(documentModel);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenRequestRetrievalDocumentBlobFromColdStorageBeingRetrieved()\n+            throws IOException, OperationException {\n+        DocumentModel documentModel = createFileDocument(session, true);\n+\n+        // move the blob to cold storage\n+        moveContentToColdStorage(session, documentModel);\n+\n+        // request a retrieval from the cold storage content\n+        requestRetrievalContentFromColdStorage(documentModel);\n+\n+        // request a retrieval for a second time\n+        try {\n+            requestRetrievalContentFromColdStorage(documentModel);\n+            fail(\"Should fail because the cold storage content is being retrieved.\");\n+        } catch (NuxeoException ne) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "938191c373574825b97c76659cc5c57026ab8865"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NDQ2MA==", "bodyText": "ioe -> e", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r385274460", "createdAt": "2020-02-27T17:55:37Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -129,6 +140,61 @@ public static DocumentModel requestRetrievalFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage contents are available for download.\n+     *\n+     * @implSpec: Queries all documents with a cold storage content which are being retrieved, meaning\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY} is {@code true}, and it checks if it is available for\n+     *            download. In which case its fires a {@value COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME} event.\n+     * @see #requestRetrievalFromColdStorage(CoreSession, DocumentRef, int)\n+     */\n+    public static ColdStorageContentStatus checkColdStorageContentAvailability(CoreSession session) {\n+        log.debug(\"Start checking the available cold storage content for repository: {}\", session::getRepositoryName);\n+\n+        // as the volume of result will be small, we don't use BAF\n+        DocumentModelList documents = session.query(GET_DOCUMENTS_TO_CHECK_QUERY);\n+\n+        // for every available content we will fire an event\n+        int beingRetrieved = documents.size();\n+        int available = 0;\n+        EventService eventService = Framework.getService(EventService.class);\n+        for (DocumentModel doc : documents) {\n+            Blob coldContent = (Blob) doc.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY);\n+            BlobStatus blobStatus;\n+            try {\n+                blobStatus = Framework.getService(BlobManager.class)\n+                                      .getBlobProvider(coldContent)\n+                                      .getStatus((ManagedBlob) coldContent);\n+            } catch (IOException ioe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be78d0e1338ae9924a5b41f9ebf363c43d3afb1"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dda56369d6828f247071862ca23a34e0e29df79f", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/dda56369d6828f247071862ca23a34e0e29df79f", "committedDate": "2020-02-27T08:50:51Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "3921c544589eed9e16b666e57822f4e562ce5cca", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3921c544589eed9e16b666e57822f4e562ce5cca", "committedDate": "2020-03-02T11:41:54Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94fc5de9abd337fa96bb19956d2dcf13678df6c3", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/94fc5de9abd337fa96bb19956d2dcf13678df6c3", "committedDate": "2020-03-02T11:47:24Z", "message": "NXP-28424: Cleanup / Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2a5f21ebd983a892f776bbdbb1d19f0cc4a2db6", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e2a5f21ebd983a892f776bbdbb1d19f0cc4a2db6", "committedDate": "2020-03-02T11:47:24Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3921c544589eed9e16b666e57822f4e562ce5cca", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3921c544589eed9e16b666e57822f4e562ce5cca", "committedDate": "2020-03-02T11:41:54Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "7f6187645f29f572048e25b83e3146b439371aab", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7f6187645f29f572048e25b83e3146b439371aab", "committedDate": "2020-03-02T11:47:24Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e8922cc4602dcb71f119c038d59ab16144f9511", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4e8922cc4602dcb71f119c038d59ab16144f9511", "committedDate": "2020-03-02T12:55:24Z", "message": "NXP-28425: Add MoveToColdStorage operation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95b3ec31ae835f55bb5530d4983c4d105f7e05cc", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/95b3ec31ae835f55bb5530d4983c4d105f7e05cc", "committedDate": "2020-03-02T12:57:03Z", "message": "NXP-28427: Add RetrieveBlobFromColdStorage operation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dad01caec1995a3ab7f20f998088cf6a74473643", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/dad01caec1995a3ab7f20f998088cf6a74473643", "committedDate": "2020-03-02T12:57:03Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8494220b6af92225c79f9691f8fce5f49af7dded", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8494220b6af92225c79f9691f8fce5f49af7dded", "committedDate": "2020-03-02T12:57:03Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f6187645f29f572048e25b83e3146b439371aab", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7f6187645f29f572048e25b83e3146b439371aab", "committedDate": "2020-03-02T11:47:24Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}, "afterCommit": {"oid": "8494220b6af92225c79f9691f8fce5f49af7dded", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8494220b6af92225c79f9691f8fce5f49af7dded", "committedDate": "2020-03-02T12:57:03Z", "message": "NXP-28429: Add a listener to send mail when cold storage content becomes available"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDAzNTgy", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-371403582", "createdAt": "2020-03-09T17:54:49Z", "commit": {"oid": "8494220b6af92225c79f9691f8fce5f49af7dded"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNTM2NTc5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-372536579", "createdAt": "2020-03-11T07:58:13Z", "commit": {"oid": "8494220b6af92225c79f9691f8fce5f49af7dded"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNTIwMjEy", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-342520212", "createdAt": "2020-01-14T13:13:21Z", "commit": {"oid": "acced913d575ce620b911db066247e83a226de53"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoxMzoyMVrOFdW-ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzoxOTowMlrOFdXI5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMyOTUzOQ==", "bodyText": "The document content will be stored in a cold (cool) storage, this is the case when the content represents:", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r366329539", "createdAt": "2020-01-14T13:13:21Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-core/nuxeo-core-schema/src/main/java/org/nuxeo/ecm/core/schema/FacetNames.java", "diffHunk": "@@ -105,6 +105,14 @@\n      */\n     public static final String HAS_RELATED_TEXT = \"HasRelatedText\";\n \n+    /**\n+     * The document content will be stored as a cold (cool) storage, this is the case where the content represents:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acced913d575ce620b911db066247e83a226de53"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMDgzNQ==", "bodyText": "missing new line", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r366330835", "createdAt": "2020-01-14T13:16:16Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-core/nuxeo-core/src/main/resources/schema/coldstorage.xsd", "diffHunk": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\"?>\n+<xs:schema targetNamespace=\"http://www.nuxeo.org/ecm/schemas/coldstorage/\"\n+           xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n+           xmlns:nxs=\"http://www.nuxeo.org/ecm/schemas/coldstorage/\">\n+\n+  <xs:include schemaLocation=\"core-types.xsd\" />\n+\n+  <xs:element name=\"content\" type=\"nxs:content\" />\n+  <xs:element name=\"beingRetrieved\" type=\"xs:boolean\" />\n+\n+</xs:schema>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acced913d575ce620b911db066247e83a226de53"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMjEzMg==", "bodyText": "Aren't we also adding elements to say for how long the blob will be available ?\nAnd how about adding the infos of the user who requested the blob at the same place ?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r366332132", "createdAt": "2020-01-14T13:19:02Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-core/nuxeo-core/src/main/resources/schema/coldstorage.xsd", "diffHunk": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\"?>\n+<xs:schema targetNamespace=\"http://www.nuxeo.org/ecm/schemas/coldstorage/\"\n+           xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n+           xmlns:nxs=\"http://www.nuxeo.org/ecm/schemas/coldstorage/\">\n+\n+  <xs:include schemaLocation=\"core-types.xsd\" />\n+\n+  <xs:element name=\"content\" type=\"nxs:content\" />\n+  <xs:element name=\"beingRetrieved\" type=\"xs:boolean\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acced913d575ce620b911db066247e83a226de53"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNTM2NDg2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-342536486", "createdAt": "2020-01-14T13:39:49Z", "commit": {"oid": "fca5bdd2dbff63f4f69f500c8a4c9dd4b35f33cd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzozOTo1MFrOFdXv2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMzo0NToxM1rOFdX61A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0MjEwNA==", "bodyText": "What is the purpose of this test class?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r366342104", "createdAt": "2020-01-14T13:39:50Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestFacet.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.nuxeo.ecm.core.schema.FacetNames.COMMENTABLE;\n+import static org.nuxeo.ecm.core.schema.FacetNames.DOWNLOADABLE;\n+import static org.nuxeo.ecm.core.schema.FacetNames.FOLDERISH;\n+import static org.nuxeo.ecm.core.schema.FacetNames.HAS_RELATED_TEXT;\n+import static org.nuxeo.ecm.core.schema.FacetNames.HIDDEN_IN_NAVIGATION;\n+import static org.nuxeo.ecm.core.schema.FacetNames.MASTER_PUBLISH_SPACE;\n+import static org.nuxeo.ecm.core.schema.FacetNames.NOT_FULLTEXT_INDEXABLE;\n+import static org.nuxeo.ecm.core.schema.FacetNames.ORDERABLE;\n+import static org.nuxeo.ecm.core.schema.FacetNames.PUBLISHABLE;\n+import static org.nuxeo.ecm.core.schema.FacetNames.PUBLISH_SPACE;\n+import static org.nuxeo.ecm.core.schema.FacetNames.SUPER_SPACE;\n+import static org.nuxeo.ecm.core.schema.FacetNames.SYSTEM_DOCUMENT;\n+import static org.nuxeo.ecm.core.schema.FacetNames.VERSIONABLE;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.schema.SchemaManager;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+public class TestFacet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca5bdd2dbff63f4f69f500c8a4c9dd4b35f33cd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0MzcyNg==", "bodyText": "Not sure about this test, I think it tests that we can write a facet but not a specific one. I'm in favor of reverting change to not make this test more complex.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r366343726", "createdAt": "2020-01-14T13:42:47Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/io/marshallers/json/types/FacetJsonWriterTest.java", "diffHunk": "@@ -53,14 +56,17 @@ public void testFacetWithoutSchema() throws Exception {\n \n     @Test\n     public void testFacetWithSchema() throws Exception {\n-        CompositeType type = schemaManager.getFacet(HAS_RELATED_TEXT);\n-        JsonAssert json = jsonAssert(type);\n-        json.properties(3);\n-        json.has(\"entity-type\").isEquals(\"facet\");\n-        json.has(\"name\").isEquals(HAS_RELATED_TEXT);\n-        json = json.has(\"schemas\").length(1).has(0);\n-        json.has(\"entity-type\").isEquals(\"schema\");\n-        json.has(\"name\").isEquals(\"relatedtext\");\n+        var schemaByFacetName = Map.of(HAS_RELATED_TEXT, \"relatedtext\", COLD_STORAGE, \"coldstorage\");\n+        for (Map.Entry<String, String> entry : schemaByFacetName.entrySet()) {\n+            CompositeType type = schemaManager.getFacet(entry.getKey());\n+            JsonAssert json = jsonAssert(type);\n+            json.properties(3);\n+            json.has(\"entity-type\").isEquals(\"facet\");\n+            json.has(\"name\").isEquals(entry.getKey());\n+            json = json.has(\"schemas\").length(1).has(0);\n+            json.has(\"entity-type\").isEquals(\"schema\");\n+            json.has(\"name\").isEquals(entry.getValue());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acced913d575ce620b911db066247e83a226de53"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM0NDkxNg==", "bodyText": "This is not the responsibility of this test to assert that, otherwise this means we need to have this kind of assertion for all facets which is a lot of assertions + difficult to maintain for no real gain (I assume reading facet from json is tested elsewhere). I'm in favor of reverting it.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r366344916", "createdAt": "2020-01-14T13:45:13Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-features/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/test/java/org/nuxeo/elasticsearch/test/io/TestDocumentModelReader.java", "diffHunk": "@@ -102,6 +103,7 @@ public void ICanReadADocModelFromJson() {\n         assertFalse(doc.isFolder());\n         assertFalse(doc.isVersion());\n         assertFalse(doc.isLocked());\n+        assertTrue(doc.hasFacet(COLD_STORAGE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acced913d575ce620b911db066247e83a226de53"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "acced913d575ce620b911db066247e83a226de53", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/acced913d575ce620b911db066247e83a226de53", "committedDate": "2020-01-14T08:13:46Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "c84580918340ba6ffb229600e46542bdd7bf04d0", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c84580918340ba6ffb229600e46542bdd7bf04d0", "committedDate": "2020-01-15T10:29:34Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c84580918340ba6ffb229600e46542bdd7bf04d0", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c84580918340ba6ffb229600e46542bdd7bf04d0", "committedDate": "2020-01-15T10:29:34Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "a1cbfd09ce7899245c1427255a41c5fe88e8e538", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a1cbfd09ce7899245c1427255a41c5fe88e8e538", "committedDate": "2020-01-15T11:09:00Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1cbfd09ce7899245c1427255a41c5fe88e8e538", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a1cbfd09ce7899245c1427255a41c5fe88e8e538", "committedDate": "2020-01-15T11:09:00Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "e1f601c61ae164cd43eab546ac66d7e381501213", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e1f601c61ae164cd43eab546ac66d7e381501213", "committedDate": "2020-01-16T13:49:01Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1f601c61ae164cd43eab546ac66d7e381501213", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e1f601c61ae164cd43eab546ac66d7e381501213", "committedDate": "2020-01-16T13:49:01Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "a293c470efb3426f0a126f15e7cda8e048ccd0f9", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a293c470efb3426f0a126f15e7cda8e048ccd0f9", "committedDate": "2020-01-17T13:18:28Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a293c470efb3426f0a126f15e7cda8e048ccd0f9", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a293c470efb3426f0a126f15e7cda8e048ccd0f9", "committedDate": "2020-01-17T13:18:28Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "a778e76c9dc7b3067b63aaa65a713d4f1822876e", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a778e76c9dc7b3067b63aaa65a713d4f1822876e", "committedDate": "2020-01-17T13:24:37Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a778e76c9dc7b3067b63aaa65a713d4f1822876e", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a778e76c9dc7b3067b63aaa65a713d4f1822876e", "committedDate": "2020-01-17T13:24:37Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "39d2703c7d8c2f1c51ce4c5c7b7e89c53cff8481", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/39d2703c7d8c2f1c51ce4c5c7b7e89c53cff8481", "committedDate": "2020-01-17T13:27:31Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MTgzOTc3", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-345183977", "createdAt": "2020-01-20T09:44:58Z", "commit": {"oid": "39d2703c7d8c2f1c51ce4c5c7b7e89c53cff8481"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo0NDo1OFrOFfYeSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo0NDo1OFrOFfYeSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1MTE0NA==", "bodyText": "(cool) seems unneeded here, cold is enough no?\nAlso, I'd go for a sentence explaining that the document can have its content stored as cold storage, because if a document has this facet, it doesn't necessarily mean that its content is stored as cold storage.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r368451144", "createdAt": "2020-01-20T09:44:58Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-schema/src/main/java/org/nuxeo/ecm/core/schema/FacetNames.java", "diffHunk": "@@ -105,6 +105,14 @@\n      */\n     public static final String HAS_RELATED_TEXT = \"HasRelatedText\";\n \n+    /**\n+     * The document content will be stored as a cold (cool) storage, this is the case where the content represents:\n+     * archiving, compliance...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d2703c7d8c2f1c51ce4c5c7b7e89c53cff8481"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MTg5Mjcz", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-345189273", "createdAt": "2020-01-20T09:53:05Z", "commit": {"oid": "39d2703c7d8c2f1c51ce4c5c7b7e89c53cff8481"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1MzowNVrOFfYuXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1MzowNVrOFfYuXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1NTI2MQ==", "bodyText": "As you're testing SchemaManager#getFacet, maybe you only need to add one facet and schema in CoreTestExtensions.xml and don't need to iterate?\nOr would you like to test SchemaManager#getFacets?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r368455261", "createdAt": "2020-01-20T09:53:05Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-schema/src/test/java/org/nuxeo/ecm/core/schema/TestSchemaManager.java", "diffHunk": "@@ -445,4 +446,18 @@ public void testExtendsAppendTypes() {\n         assertEquals(t.getAllowedSubtypes(), Set.of(\"myDoc2\", \"myDoc3\", \"myDoc4\"));\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.core.schema.tests:OSGI-INF/CoreTestExtensions.xml\")\n+    public void shouldGetFacets() {\n+        var facets = Map.of( //\n+                \"fakeFacet1\", \"facetSchema1\", //\n+                \"fakeFacet2\", \"facetSchema2\");\n+        for (var entry : facets.entrySet()) {\n+            CompositeType component = schemaManager.getFacet(entry.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d2703c7d8c2f1c51ce4c5c7b7e89c53cff8481"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MTkxNDYy", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-345191462", "createdAt": "2020-01-20T09:56:24Z", "commit": {"oid": "39d2703c7d8c2f1c51ce4c5c7b7e89c53cff8481"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1NjoyNFrOFfY09w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1NjoyNFrOFfY09w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1Njk1MQ==", "bodyText": "This whole file might not be needed, see 39d2703#r368455261.\nBut, event if you want to declare a second facet, why such a complicated field/type?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r368456951", "createdAt": "2020-01-20T09:56:24Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-schema/src/test/resources/schema/facetSchema2.xsd", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\"?>\n+\n+<xs:schema targetNamespace=\"http://www.nuxeo.org/ecm/schemas/relatedtext/\"\n+           xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:nxs=\"http://www.nuxeo.org/ecm/schemas/relatedtext/\">\n+\n+  <xs:simpleType name=\"clob\">\n+    <xs:restriction base=\"xs:string\">\n+      <xs:maxLength value=\"999999999\" />\n+    </xs:restriction>\n+  </xs:simpleType>\n+\n+\n+  <xs:element name=\"relatedtextresources\" type=\"nxs:relatedtextresources\" />\n+\n+  <xs:complexType name=\"relatedtextresources\">\n+    <xs:sequence>\n+      <xs:element name=\"item\" type=\"nxs:relatedtextresource\" minOccurs=\"0\"\n+                  maxOccurs=\"unbounded\" />\n+    </xs:sequence>\n+  </xs:complexType>\n+\n+  <xs:complexType name=\"relatedtextresource\">\n+    <xs:sequence>\n+      <xs:element name=\"relatedtextid\" type=\"xs:string\" minOccurs=\"0\" />\n+      <xs:element name=\"relatedtext\" type=\"nxs:clob\" minOccurs=\"0\" />\n+    </xs:sequence>\n+  </xs:complexType>\n+\n+</xs:schema>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d2703c7d8c2f1c51ce4c5c7b7e89c53cff8481"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "39d2703c7d8c2f1c51ce4c5c7b7e89c53cff8481", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/39d2703c7d8c2f1c51ce4c5c7b7e89c53cff8481", "committedDate": "2020-01-17T13:27:31Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "c8a3652e46edefddce177f605689914c07f02ade", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c8a3652e46edefddce177f605689914c07f02ade", "committedDate": "2020-01-20T10:41:44Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8a3652e46edefddce177f605689914c07f02ade", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c8a3652e46edefddce177f605689914c07f02ade", "committedDate": "2020-01-20T10:41:44Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "614b9662c1bf374393758e6d43be7f925ec24bec", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/614b9662c1bf374393758e6d43be7f925ec24bec", "committedDate": "2020-01-20T10:47:17Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MjM5ODA3", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-345239807", "createdAt": "2020-01-20T11:18:35Z", "commit": {"oid": "614b9662c1bf374393758e6d43be7f925ec24bec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToxODozNlrOFfbK3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToxODozNlrOFfbK3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5NTMyNg==", "bodyText": "Maybe testGetFacet, to comply with the other tests in this class.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r368495326", "createdAt": "2020-01-20T11:18:36Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-schema/src/test/java/org/nuxeo/ecm/core/schema/TestSchemaManager.java", "diffHunk": "@@ -445,4 +445,13 @@ public void testExtendsAppendTypes() {\n         assertEquals(t.getAllowedSubtypes(), Set.of(\"myDoc2\", \"myDoc3\", \"myDoc4\"));\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.core.schema.tests:OSGI-INF/CoreTestExtensions.xml\")\n+    public void shouldGetFacet() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614b9662c1bf374393758e6d43be7f925ec24bec"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "614b9662c1bf374393758e6d43be7f925ec24bec", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/614b9662c1bf374393758e6d43be7f925ec24bec", "committedDate": "2020-01-20T10:47:17Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "3f1814f7ff20c279176ef29548ec7b5807fc9b8e", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3f1814f7ff20c279176ef29548ec7b5807fc9b8e", "committedDate": "2020-01-20T13:09:56Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MzM0NjM3", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-345334637", "createdAt": "2020-01-20T14:13:32Z", "commit": {"oid": "3f1814f7ff20c279176ef29548ec7b5807fc9b8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDoxMzozMlrOFffmzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDoxMzozMlrOFffmzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2ODAxMw==", "bodyText": "Why not keep the pattern used for the other facets?\nSomething like: \"The document can have its main content stored as cold storage. This can be needed for archiving, compliance, etc.\"", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r368568013", "createdAt": "2020-01-20T14:13:32Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-schema/src/main/java/org/nuxeo/ecm/core/schema/FacetNames.java", "diffHunk": "@@ -105,6 +105,14 @@\n      */\n     public static final String HAS_RELATED_TEXT = \"HasRelatedText\";\n \n+    /**\n+     * Facet used to indicate that a given document can have his content stored as a cold storage, this is the case for\n+     * example where the content represents: archiving, compliance...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1814f7ff20c279176ef29548ec7b5807fc9b8e"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f1814f7ff20c279176ef29548ec7b5807fc9b8e", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3f1814f7ff20c279176ef29548ec7b5807fc9b8e", "committedDate": "2020-01-20T13:09:56Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "b0014376c49dafa4bd70c33031fe8c2e2a37c349", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b0014376c49dafa4bd70c33031fe8c2e2a37c349", "committedDate": "2020-01-20T15:13:42Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0014376c49dafa4bd70c33031fe8c2e2a37c349", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b0014376c49dafa4bd70c33031fe8c2e2a37c349", "committedDate": "2020-01-20T15:13:42Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "ca0c3232400e13d4b232578370027418b685dae1", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ca0c3232400e13d4b232578370027418b685dae1", "committedDate": "2020-01-20T15:18:32Z", "message": "NXP-28424: Define the ColdStorage facet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NzA4OTU2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-345708956", "createdAt": "2020-01-21T08:46:01Z", "commit": {"oid": "ca0c3232400e13d4b232578370027418b685dae1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca0c3232400e13d4b232578370027418b685dae1", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ca0c3232400e13d4b232578370027418b685dae1", "committedDate": "2020-01-20T15:18:32Z", "message": "NXP-28424: Define the ColdStorage facet"}, "afterCommit": {"oid": "927be78223982257ea41f588a67fd2cc23937362", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/927be78223982257ea41f588a67fd2cc23937362", "committedDate": "2020-01-23T09:18:47Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "927be78223982257ea41f588a67fd2cc23937362", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/927be78223982257ea41f588a67fd2cc23937362", "committedDate": "2020-01-23T09:18:47Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}, "afterCommit": {"oid": "1ecc3c6ec4f211c0f60138be0219cf8a25f40664", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1ecc3c6ec4f211c0f60138be0219cf8a25f40664", "committedDate": "2020-01-23T09:48:19Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ecc3c6ec4f211c0f60138be0219cf8a25f40664", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1ecc3c6ec4f211c0f60138be0219cf8a25f40664", "committedDate": "2020-01-23T09:48:19Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}, "afterCommit": {"oid": "fb11aba9ca4e199bd1a78a1d65023e0d84815d74", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/fb11aba9ca4e199bd1a78a1d65023e0d84815d74", "committedDate": "2020-01-23T12:39:33Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb11aba9ca4e199bd1a78a1d65023e0d84815d74", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/fb11aba9ca4e199bd1a78a1d65023e0d84815d74", "committedDate": "2020-01-23T12:39:33Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}, "afterCommit": {"oid": "51372af9522532b5963051d756213b3ccb437a4c", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/51372af9522532b5963051d756213b3ccb437a4c", "committedDate": "2020-01-23T12:46:02Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51372af9522532b5963051d756213b3ccb437a4c", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/51372af9522532b5963051d756213b3ccb437a4c", "committedDate": "2020-01-23T12:46:02Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}, "afterCommit": {"oid": "bfe4923f4de9f824ea340db9f96ef8169c2321a7", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bfe4923f4de9f824ea340db9f96ef8169c2321a7", "committedDate": "2020-01-23T12:51:57Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfe4923f4de9f824ea340db9f96ef8169c2321a7", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bfe4923f4de9f824ea340db9f96ef8169c2321a7", "committedDate": "2020-01-23T12:51:57Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}, "afterCommit": {"oid": "ec4fee6aa944b95b4dfa99ae23a33ebd3eda99e9", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ec4fee6aa944b95b4dfa99ae23a33ebd3eda99e9", "committedDate": "2020-01-23T12:57:56Z", "message": "NXP-28428: Add a scheduled job to check if cold storage content are available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b38b2f3a8ef374af067cd4d89477b093ec94578", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2b38b2f3a8ef374af067cd4d89477b093ec94578", "committedDate": "2020-01-23T16:40:19Z", "message": "[WIP]NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "a3c8309705b38716e2357e3df345116e82fc2c07", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a3c8309705b38716e2357e3df345116e82fc2c07", "committedDate": "2020-01-27T10:19:29Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3c8309705b38716e2357e3df345116e82fc2c07", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a3c8309705b38716e2357e3df345116e82fc2c07", "committedDate": "2020-01-27T10:19:29Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "f8c54244dba4c62e91e2a0c95711b498395e757a", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f8c54244dba4c62e91e2a0c95711b498395e757a", "committedDate": "2020-01-28T14:36:14Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NTAxNDc4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-349501478", "createdAt": "2020-01-28T16:08:43Z", "commit": {"oid": "01cca943458550a611b66a8bcb4b6123cbdc09b8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjowODo0M1rOFiq9fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjoxOTo1N1rOFiraHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg5OTc3NA==", "bodyText": "I don't think it should be the helper's role to decide that the replacement content comes from a thumbnail. I'm convinced we'll have other use cases where we want replacements computed differently. Could you move this to the caller, in the operation?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r371899774", "createdAt": "2020-01-28T16:08:43Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.api.thumbnail.ThumbnailService;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * \n+     * @return the updated document model if the move succeeds\n+     * @throws NuxeoException if there is no main content associated with the given document, or if the main content is\n+     *             already in the cold storage\n+     */\n+    public static DocumentModel moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+        log.debug(\"Move to cold storage the main content of document: {}\", documentModel);\n+\n+        Serializable mainContent = documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n+        if (mainContent == null) {\n+            throw new NuxeoException(String.format(\"There is no main content for document: %s.\", documentModel),\n+                    SC_NOT_FOUND);\n+        }\n+\n+        if (documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+                && documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) != null) {\n+            throw new NuxeoException(\n+                    String.format(\"The main content for document: %s is already in cold storage.\", documentModel),\n+                    SC_CONFLICT);\n+        }\n+\n+        documentModel.addFacet(FacetNames.COLD_STORAGE);\n+        documentModel.setPropertyValue(COLD_STORAGE_CONTENT_PROPERTY, mainContent);\n+        Blob thumbnail = Framework.getService(ThumbnailService.class).getThumbnail(documentModel, session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01cca943458550a611b66a8bcb4b6123cbdc09b8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkwMDk2NQ==", "bodyText": "You shouldn't reformat this file. Or do it in a cleanup commit.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r371900965", "createdAt": "2020-01-28T16:10:42Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/resources/OSGI-INF/operations-contrib.xml", "diffHunk": "@@ -7,77 +7,77 @@\n              point=\"operations\">\n \n     <!-- register built-in operations -->\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.FetchContextDocument\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.FetchContextBlob\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.SetVar\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.stack.PushDocument\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.stack.PushDocumentList\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.stack.PopDocument\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.stack.PopDocumentList\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.SetInputAsVar\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.RestoreDocumentInput\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.RestoreDocumentsInput\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.RestoreBlobInput\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.RestoreBlobsInput\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.RunScript\"/>\n-    <operation class=\"org.nuxeo.ecm.automation.core.operations.RestoreDocumentInputFromScript\"/>\n+    <operation class=\"org.nuxeo.ecm.automation.core.operations.FetchContextDocument\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e69a0a55c1df3254c4092da32bfe30af9b91f6a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkwMjE3Nw==", "bodyText": "You should make this an abstract class that the tests inherit from, instead of a static helper. Then methods don't need to be static, and call me called directly without a static invocation.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r371902177", "createdAt": "2020-01-28T16:12:38Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/util/ColdStorageOperationTestUtils.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.util;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.automation.core.operations.document.MoveToColdStorage;\n+import org.nuxeo.ecm.automation.core.operations.document.RetrieveFromColdStorage;\n+import org.nuxeo.ecm.core.DummyThumbnailFactory;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class ColdStorageOperationTestUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e69a0a55c1df3254c4092da32bfe30af9b91f6a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkwMjk5Mg==", "bodyText": "This should be expanded to explain what \"retrieve\" means: that's it's a request for retrieval, and is not immediate.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r371902992", "createdAt": "2020-01-28T16:13:50Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/document/RetrieveFromColdStorage.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+\n+/**\n+ * Retrieve the cold storage content associated with the input {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+@Operation(id = RetrieveFromColdStorage.ID, category = Constants.CAT_BLOB, label = \"Retrieve from Cold Storage\", description = \"Retrieve the cold storage content associated with the document.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e69a0a55c1df3254c4092da32bfe30af9b91f6a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkwNDMzMQ==", "bodyText": "You'll probably want to add an index for this in MongoDBRepository (until the day where we have a more configurable way to do this).", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r371904331", "createdAt": "2020-01-28T16:15:46Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -50,6 +54,10 @@\n \n     public static final String COLD_STORAGE_BEING_RETRIEVED_PROPERTY = \"coldstorage:beingRetrieved\";\n \n+    public static final String GET_DOCUMENTS_TO_CHECK_QUERY = \"SELECT * FROM Document WHERE coldstorage:beingRetrieved = 1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee19c37a9bfc69a19dad7a7a93ca4f6adcbeb3a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkwNDUzOQ==", "bodyText": "Become -> Became, but just coldStorageContentAvailable is probably enough.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r371904539", "createdAt": "2020-01-28T16:16:04Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -50,6 +54,10 @@\n \n     public static final String COLD_STORAGE_BEING_RETRIEVED_PROPERTY = \"coldstorage:beingRetrieved\";\n \n+    public static final String GET_DOCUMENTS_TO_CHECK_QUERY = \"SELECT * FROM Document WHERE coldstorage:beingRetrieved = 1\";\n+\n+    public static final String COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME = \"coldStorageContentBecomeAvailable\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee19c37a9bfc69a19dad7a7a93ca4f6adcbeb3a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkwNzEwMA==", "bodyText": "You shouldn't do it at minute 0 because there's lots of schedules doing stuff at minute 0 of the hour and this causes contention. Use a random minute, like 7, instead.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r371907100", "createdAt": "2020-01-28T16:19:57Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/resources/OSGI-INF/coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.event.coldstorage.contribution\">\n+\n+  <!-- define the event that will be fired by the scheduler -->\n+  <extension target=\"org.nuxeo.ecm.core.scheduler.SchedulerService\" point=\"schedule\">\n+    <schedule id=\"checkAvailabilityOfBlobsBeingRetrieved\">\n+      <!-- every hour -->\n+      <cronExpression>0 0 * ? * * *</cronExpression>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee19c37a9bfc69a19dad7a7a93ca4f6adcbeb3a"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8c54244dba4c62e91e2a0c95711b498395e757a", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f8c54244dba4c62e91e2a0c95711b498395e757a", "committedDate": "2020-01-28T14:36:14Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "43b8c60a94f68a5f54c507036315370c6e7e7623", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/43b8c60a94f68a5f54c507036315370c6e7e7623", "committedDate": "2020-01-30T15:50:26Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43b8c60a94f68a5f54c507036315370c6e7e7623", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/43b8c60a94f68a5f54c507036315370c6e7e7623", "committedDate": "2020-01-30T15:50:26Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "daea2067c5fc41afcdcbe6f93a3b181b3de4bdae", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/daea2067c5fc41afcdcbe6f93a3b181b3de4bdae", "committedDate": "2020-01-30T15:51:40Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "daea2067c5fc41afcdcbe6f93a3b181b3de4bdae", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/daea2067c5fc41afcdcbe6f93a3b181b3de4bdae", "committedDate": "2020-01-30T15:51:40Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "a0177d8443163f8db77eec605f9f5fa55dd083e0", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a0177d8443163f8db77eec605f9f5fa55dd083e0", "committedDate": "2020-01-31T09:14:54Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0177d8443163f8db77eec605f9f5fa55dd083e0", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a0177d8443163f8db77eec605f9f5fa55dd083e0", "committedDate": "2020-01-31T09:14:54Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "52c037cdde2d781876aa7f406792a201f0f25631", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/52c037cdde2d781876aa7f406792a201f0f25631", "committedDate": "2020-01-31T14:58:58Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52c037cdde2d781876aa7f406792a201f0f25631", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/52c037cdde2d781876aa7f406792a201f0f25631", "committedDate": "2020-01-31T14:58:58Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "4581752a41feed5984e802623a26fc746c7886ae", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4581752a41feed5984e802623a26fc746c7886ae", "committedDate": "2020-01-31T17:29:04Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4581752a41feed5984e802623a26fc746c7886ae", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4581752a41feed5984e802623a26fc746c7886ae", "committedDate": "2020-01-31T17:29:04Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "6d1ba3deabbaaa26f956c09916894788a69013f2", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6d1ba3deabbaaa26f956c09916894788a69013f2", "committedDate": "2020-01-31T17:48:56Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d1ba3deabbaaa26f956c09916894788a69013f2", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6d1ba3deabbaaa26f956c09916894788a69013f2", "committedDate": "2020-01-31T17:48:56Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "84492a629809ce548300151bda7f1a4394d13137", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/84492a629809ce548300151bda7f1a4394d13137", "committedDate": "2020-01-31T17:55:06Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84492a629809ce548300151bda7f1a4394d13137", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/84492a629809ce548300151bda7f1a4394d13137", "committedDate": "2020-01-31T17:55:06Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2", "committedDate": "2020-02-03T08:35:21Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzYzMjkz", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352363293", "createdAt": "2020-02-03T15:58:06Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1ODowN1rOFk2eqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1ODowN1rOFk2eqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTY0Mg==", "bodyText": "Seing that there is nothing else than the dummy thumbnail factory contribution here, I would rename the file to test-dummy-thumbnail-factory-contrib.xml and the component name as well to org.nuxeo.ecm.core.dummy.thumbnail.factory.test.\nThen, the contribution could be used elsewhere, independently from cold storage testing.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374185642", "createdAt": "2020-02-03T15:58:07Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.coldstorage.test\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzY2NDEx", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352366411", "createdAt": "2020-02-03T16:01:57Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowMTo1N1rOFk2nzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowMTo1N1rOFk2nzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4Nzk4Mg==", "bodyText": "You could inject AutomationService.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374187982", "createdAt": "2020-02-03T16:01:57Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.DummyThumbnailFactory;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public abstract class AbstractTestColdStorageOperation {\n+\n+    public static final String FILE_CONTENT = \"foo and boo\";\n+\n+    public static final int NUMBER_OF_DAYS_OF_AVAILABILITY = 5;\n+\n+    protected void moveContentToColdStorage(CoreSession session, DocumentModel documentModel)\n+            throws OperationException, IOException {\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            DocumentModel updatedDocModel = (DocumentModel) Framework.getService(AutomationService.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzY2NTcw", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352366570", "createdAt": "2020-02-03T16:02:10Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowMjoxMFrOFk2oVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowMjoxMFrOFk2oVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4ODExOQ==", "bodyText": "Same remark as above.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374188119", "createdAt": "2020-02-03T16:02:10Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.DummyThumbnailFactory;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public abstract class AbstractTestColdStorageOperation {\n+\n+    public static final String FILE_CONTENT = \"foo and boo\";\n+\n+    public static final int NUMBER_OF_DAYS_OF_AVAILABILITY = 5;\n+\n+    protected void moveContentToColdStorage(CoreSession session, DocumentModel documentModel)\n+            throws OperationException, IOException {\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            DocumentModel updatedDocModel = (DocumentModel) Framework.getService(AutomationService.class)\n+                                                                     .run(context, MoveToColdStorage.ID);\n+            Blob fileContent = (Blob) updatedDocModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY);\n+            Blob coldStorageContent = (Blob) updatedDocModel.getPropertyValue(\n+                    ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n+            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n+            assertTrue(updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n+            assertEquals(DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n+            assertEquals(FILE_CONTENT, coldStorageContent.getString());\n+        }\n+    }\n+\n+    protected void retrieveContentFromColdStorage(CoreSession session, DocumentModel documentModel)\n+            throws OperationException {\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            context.setInput(documentModel);\n+            AutomationService automationService = Framework.getService(AutomationService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyODc0NjQw", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352874640", "createdAt": "2020-02-04T10:37:42Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDozNzo0M1rOFlPZTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDozNzo0M1rOFlPZTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU5Mzg3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Retrieve the cold storage content associated with the input {@link DocumentModel}. This operation will initiate a\n          \n          \n            \n             * Retrieves the cold storage content associated with the input {@link DocumentModel}. This operation will initiate a", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374593870", "createdAt": "2020-02-04T10:37:43Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/document/RetrieveFromColdStorage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+\n+/**\n+ * Retrieve the cold storage content associated with the input {@link DocumentModel}. This operation will initiate a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyODc1MTY3", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352875167", "createdAt": "2020-02-04T10:38:33Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDozODozM1rOFlPa3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDozODozM1rOFlPa3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU5NDI2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * request restore, calling the {@link Blob#getStream()} during this process doesn't mean you will get the blob content\n          \n          \n            \n             * restore request, calling the {@link Blob#getStream()} during this process doesn't mean you will get the blob's content.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374594269", "createdAt": "2020-02-04T10:38:33Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/document/RetrieveFromColdStorage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+\n+/**\n+ * Retrieve the cold storage content associated with the input {@link DocumentModel}. This operation will initiate a\n+ * request restore, calling the {@link Blob#getStream()} during this process doesn't mean you will get the blob content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyODg2ODc1", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352886875", "createdAt": "2020-02-04T10:57:15Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDo1NzoxNVrOFlP-Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMDo1NzoxNVrOFlP-Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYwMzMxOQ==", "bodyText": "maybe just org.nuxeo.ecm.core.coldstorage.contrib as it's not only event related, and we often use \"contrib\"", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374603319", "createdAt": "2020-02-04T10:57:15Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/resources/OSGI-INF/coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,41 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.event.coldstorage.contribution\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyODk0MDMx", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352894031", "createdAt": "2020-02-04T11:09:16Z", "commit": {"oid": "96efca371fa4143e9aa1d42e0e04aedc36e0956f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTowOToxNlrOFlQTxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTowOToxNlrOFlQTxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYwODgzNg==", "bodyText": "As said in #3666 (comment) (maybe drowned in the resolved comment):\nThe moveContentToColdStorage doesn't perform a move but a copy.\nShouldn't we set the \"file:content\" property to null to perform an actual move? Then let the caller eventually put something else in \"file:content\"...", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374608836", "createdAt": "2020-02-04T11:09:16Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import java.io.Serializable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * \n+     * @return the updated document model if the move succeeds\n+     * @throws NuxeoException if there is no main content associated with the given document, or if the main content is\n+     *             already in the cold storage\n+     */\n+    public static DocumentModel moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+        log.debug(\"Move to cold storage the main content of document: {}\", documentModel);\n+\n+        Serializable mainContent = documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n+        if (mainContent == null) {\n+            throw new NuxeoException(String.format(\"There is no main content for document: %s.\", documentModel),\n+                    SC_NOT_FOUND);\n+        }\n+\n+        if (documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+                && documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) != null) {\n+            throw new NuxeoException(\n+                    String.format(\"The main content for document: %s is already in cold storage.\", documentModel),\n+                    SC_CONFLICT);\n+        }\n+\n+        documentModel.addFacet(FacetNames.COLD_STORAGE);\n+        documentModel.setPropertyValue(COLD_STORAGE_CONTENT_PROPERTY, mainContent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96efca371fa4143e9aa1d42e0e04aedc36e0956f"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTA0MDA5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352904009", "createdAt": "2020-02-04T11:27:10Z", "commit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMToyNzoxMFrOFlQxSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMToyNzoxMFrOFlQxSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxNjM5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @apiNote This method will initiate a request restore, calling the {@link Blob#getStream()} during this process\n          \n          \n            \n                 * @apiNote This method will initiate a restore request, calling the {@link Blob#getStream()} during this process", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374616395", "createdAt": "2020-02-04T11:27:10Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -74,6 +77,43 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Retrieves the cold storage content associated with the document of the given {@link DocumentRef}.\n+     * \n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a request restore, calling the {@link Blob#getStream()} during this process", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTA2ODk4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352906898", "createdAt": "2020-02-04T11:32:43Z", "commit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTozMjo0NFrOFlQ5lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTozMjo0NFrOFlQ5lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxODUxOQ==", "bodyText": "I would remove these 2 assertions since the retrieval only updates the boolean field.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374618519", "createdAt": "2020-02-04T11:32:44Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -108,6 +110,66 @@ public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n         }\n     }\n \n+    @Test\n+    public void shouldRetrieveDocumentBlobFromColdStorage() throws IOException {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // retrieve, which means initiate a request to restore the blob from cold storage\n+        documentModel = ColdStorageHelper.retrieveContentFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+        transactionalFeature.nextTransaction();\n+        documentModel = session.getDocument(documentModel.getRef());\n+\n+        assertTrue((Boolean) documentModel.getPropertyValue(ColdStorageHelper.COLD_STORAGE_BEING_RETRIEVED_PROPERTY));\n+\n+        // check that `file:content` still contains the main content blob\n+        checkBlobContent(documentModel, ColdStorageHelper.FILE_CONTENT_PROPERTY, FILE_CONTENT);\n+\n+        // check that `coldstorage:coldContent` still contains the original file content\n+        checkBlobContent(documentModel, ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTA3NTk2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352907596", "createdAt": "2020-02-04T11:34:07Z", "commit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTozNDowN1rOFlQ7vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTozNDowN1rOFlQ7vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxOTA2OQ==", "bodyText": "Maybe add a TODO here to explain that for now it only sets a boolean property but later on it will actually trigger the restore request to the cold storage?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374619069", "createdAt": "2020-02-04T11:34:07Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -74,6 +77,43 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Retrieves the cold storage content associated with the document of the given {@link DocumentRef}.\n+     * \n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a request restore, calling the {@link Blob#getStream()} during this process\n+     *          doesn't mean you will get the blob content immediately.\n+     * @return the updated document model if the retrieve succeeds\n+     * @throws NuxeoException if there is no cold storage content associated with the given document, or if it is being\n+     *             retrieved\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTA5Mjk5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352909299", "createdAt": "2020-02-04T11:37:26Z", "commit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTozNzoyNlrOFlRApA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTozNzoyNlrOFlRApA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyMDMyNA==", "bodyText": "I would replace these 2 lines by documentModel = session.save() since we are not waiting for any asynchronous work, the retrieval is indeed a synchronous process.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374620324", "createdAt": "2020-02-04T11:37:26Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -108,6 +110,66 @@ public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n         }\n     }\n \n+    @Test\n+    public void shouldRetrieveDocumentBlobFromColdStorage() throws IOException {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // retrieve, which means initiate a request to restore the blob from cold storage\n+        documentModel = ColdStorageHelper.retrieveContentFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+        transactionalFeature.nextTransaction();\n+        documentModel = session.getDocument(documentModel.getRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTExMzY2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352911366", "createdAt": "2020-02-04T11:41:20Z", "commit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo0MToyMFrOFlRG6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo0MToyMFrOFlRG6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyMTkzMQ==", "bodyText": "I think you don't need the lambdas here.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374621931", "createdAt": "2020-02-04T11:41:20Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -74,6 +77,43 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Retrieves the cold storage content associated with the document of the given {@link DocumentRef}.\n+     * \n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a request restore, calling the {@link Blob#getStream()} during this process\n+     *          doesn't mean you will get the blob content immediately.\n+     * @return the updated document model if the retrieve succeeds\n+     * @throws NuxeoException if there is no cold storage content associated with the given document, or if it is being\n+     *             retrieved\n+     */\n+    public static DocumentModel retrieveContentFromColdStorage(CoreSession session, DocumentRef documentRef,\n+            int numberOfDaysOfAvailability) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+        log.debug(\"Retrieve from cold storage the content of document: {} for: {} days\", () -> documentModel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTEzMjI3", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352913227", "createdAt": "2020-02-04T11:44:49Z", "commit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo0NDo1MFrOFlRMZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo0NDo1MFrOFlRMZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyMzMzMw==", "bodyText": "We should try to be consistent: if we consider that the \"retrieve\" operation/helper performs a restore (restoration?) request, let's always use these terms.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374623333", "createdAt": "2020-02-04T11:44:50Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/document/RetrieveFromColdStorage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+\n+/**\n+ * Retrieve the cold storage content associated with the input {@link DocumentModel}. This operation will initiate a\n+ * request restore, calling the {@link Blob#getStream()} during this process doesn't mean you will get the blob content\n+ * immediately.\n+ * \n+ * @since 11.1\n+ */\n+@Operation(id = RetrieveFromColdStorage.ID, category = Constants.CAT_BLOB, label = \"Request a retrieve from Cold Storage\", description = \"Request a cold storage content retrieval associated with the document. \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTE0NTcw", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352914570", "createdAt": "2020-02-04T11:47:14Z", "commit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo0NzoxNFrOFlRQIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo0NzoxNFrOFlRQIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyNDI5MA==", "bodyText": "duplicate :)", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374624290", "createdAt": "2020-02-04T11:47:14Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.DummyThumbnailFactory;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public abstract class AbstractTestColdStorageOperation {\n+\n+    public static final String FILE_CONTENT = \"foo and boo\";\n+\n+    public static final int NUMBER_OF_DAYS_OF_AVAILABILITY = 5;\n+\n+    protected void moveContentToColdStorage(CoreSession session, DocumentModel documentModel)\n+            throws OperationException, IOException {\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            DocumentModel updatedDocModel = (DocumentModel) Framework.getService(AutomationService.class)\n+                                                                     .run(context, MoveToColdStorage.ID);\n+            Blob fileContent = (Blob) updatedDocModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY);\n+            Blob coldStorageContent = (Blob) updatedDocModel.getPropertyValue(\n+                    ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n+            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n+            assertTrue(updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n+            assertEquals(DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n+            assertEquals(FILE_CONTENT, coldStorageContent.getString());\n+        }\n+    }\n+\n+    protected void retrieveContentFromColdStorage(CoreSession session, DocumentModel documentModel)\n+            throws OperationException {\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            context.setInput(documentModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTE1Njc4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352915678", "createdAt": "2020-02-04T11:49:21Z", "commit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo0OToyMlrOFlRTRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo0OToyMlrOFlRTRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyNTA5NQ==", "bodyText": "why not check the returned doc:\nassertEquals(documentModel.getRef(), updatedDocModel.getRef())", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374625095", "createdAt": "2020-02-04T11:49:22Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/test/java/org/nuxeo/ecm/automation/core/operations/document/AbstractTestColdStorageOperation.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.DummyThumbnailFactory;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.core.test.tests:OSGI-INF/test-coldstorage-contrib.xml\")\n+public abstract class AbstractTestColdStorageOperation {\n+\n+    public static final String FILE_CONTENT = \"foo and boo\";\n+\n+    public static final int NUMBER_OF_DAYS_OF_AVAILABILITY = 5;\n+\n+    protected void moveContentToColdStorage(CoreSession session, DocumentModel documentModel)\n+            throws OperationException, IOException {\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            DocumentModel updatedDocModel = (DocumentModel) Framework.getService(AutomationService.class)\n+                                                                     .run(context, MoveToColdStorage.ID);\n+            Blob fileContent = (Blob) updatedDocModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY);\n+            Blob coldStorageContent = (Blob) updatedDocModel.getPropertyValue(\n+                    ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n+            assertEquals(documentModel.getRef(), updatedDocModel.getRef());\n+            assertTrue(updatedDocModel.hasFacet(FacetNames.COLD_STORAGE));\n+            assertEquals(DummyThumbnailFactory.DUMMY_THUMBNAIL_CONTENT, fileContent.getString());\n+            assertEquals(FILE_CONTENT, coldStorageContent.getString());\n+        }\n+    }\n+\n+    protected void retrieveContentFromColdStorage(CoreSession session, DocumentModel documentModel)\n+            throws OperationException {\n+        try (OperationContext context = new OperationContext(session)) {\n+            context.setInput(documentModel);\n+            context.setInput(documentModel);\n+            AutomationService automationService = Framework.getService(AutomationService.class);\n+            Map<String, Integer> params = Map.of(\"numberOfDaysOfAvailability\", NUMBER_OF_DAYS_OF_AVAILABILITY);\n+            DocumentModel updatedDocument = (DocumentModel) automationService.run(context, RetrieveFromColdStorage.ID,\n+                    params);\n+            assertTrue((boolean) updatedDocument.getPropertyValue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTE5MjMz", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352919233", "createdAt": "2020-02-04T11:55:49Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1NTo0OVrOFlRdhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1NTo0OVrOFlRdhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyNzcxOA==", "bodyText": "Id rather see:\n        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n        return ColdStorageHelper.retrieveContentFromColdStorage(session, documentModel.getRef(),\n                NUMBER_OF_DAYS_OF_AVAILABILITY);\n\nSince the methods return the DocumentModel we may as well use it.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374627718", "createdAt": "2020-02-04T11:55:49Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -170,8 +178,49 @@ public void shouldFailWhenRetrievingDocumentBlobWithoutColdStorageContent() {\n         }\n     }\n \n-    protected DocumentModel createDocument(boolean addBlobContent) {\n-        DocumentModel documentModel = session.createDocumentModel(\"/\", \"anyFile\", \"File\");\n+    @Test\n+    public void shouldCheckAvailabilityOfColdStorageContent() {\n+        List<String> documents = Arrays.asList( //\n+                moveAndRetrieveColdStorageContent(DEFAULT_DOC_NAME).getId(),\n+                moveAndRetrieveColdStorageContent(\"anyFile2\").getId(), //\n+                moveAndRetrieveColdStorageContent(\"anyFile3\").getId());\n+        transactionalFeature.nextTransaction();\n+        try (CapturingEventListener listener = new CapturingEventListener(\n+                ColdStorageHelper.COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME)) {\n+            ColdStorageHelper.ColdStorageContentStatus coldStorageContentStatus = ColdStorageHelper.checkAvailabilityOfColdStorageContent(\n+                    session);\n+            assertEquals(session.getRepositoryName(), coldStorageContentStatus.getRepositoryName());\n+\n+            // all cold storage contents being retrieved are now available\n+            assertEquals(documents.size(), coldStorageContentStatus.getTotalBeingRetrieved());\n+            assertEquals(documents.size(), coldStorageContentStatus.getTotalContentAvailable());\n+\n+            assertTrue(listener.hasBeenFired(ColdStorageHelper.COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME));\n+            assertEquals(3, listener.streamCapturedEvents().count());\n+\n+            List<String> docEvents = listener.streamCapturedEvents() //\n+                                             .map(event -> {\n+                                                 DocumentEventContext docCtx = (DocumentEventContext) event.getContext();\n+                                                 return docCtx.getSourceDocument().getId();\n+                                             }) //\n+                                             .sorted() //\n+                                             .collect(Collectors.toList());\n+\n+            documents.sort(Comparator.naturalOrder());\n+            assertEquals(documents, docEvents);\n+        }\n+    }\n+\n+    protected DocumentModel moveAndRetrieveColdStorageContent(String documentName) {\n+        DocumentModel documentModel = createDocument(documentName, true);\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+        ColdStorageHelper.retrieveContentFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+        return documentModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTE5Nzky", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352919792", "createdAt": "2020-02-04T11:56:44Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1Njo0NVrOFlRfHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1Njo0NVrOFlRfHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyODEyNQ==", "bodyText": "Isn't this a use case for List.of()?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374628125", "createdAt": "2020-02-04T11:56:45Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -170,8 +178,49 @@ public void shouldFailWhenRetrievingDocumentBlobWithoutColdStorageContent() {\n         }\n     }\n \n-    protected DocumentModel createDocument(boolean addBlobContent) {\n-        DocumentModel documentModel = session.createDocumentModel(\"/\", \"anyFile\", \"File\");\n+    @Test\n+    public void shouldCheckAvailabilityOfColdStorageContent() {\n+        List<String> documents = Arrays.asList( //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTIwMDE5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352920019", "createdAt": "2020-02-04T11:57:07Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1NzowN1rOFlRfrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1NzowN1rOFlRfrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyODI3MQ==", "bodyText": "not strictly needed", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374628271", "createdAt": "2020-02-04T11:57:07Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -170,8 +178,49 @@ public void shouldFailWhenRetrievingDocumentBlobWithoutColdStorageContent() {\n         }\n     }\n \n-    protected DocumentModel createDocument(boolean addBlobContent) {\n-        DocumentModel documentModel = session.createDocumentModel(\"/\", \"anyFile\", \"File\");\n+    @Test\n+    public void shouldCheckAvailabilityOfColdStorageContent() {\n+        List<String> documents = Arrays.asList( //\n+                moveAndRetrieveColdStorageContent(DEFAULT_DOC_NAME).getId(),\n+                moveAndRetrieveColdStorageContent(\"anyFile2\").getId(), //\n+                moveAndRetrieveColdStorageContent(\"anyFile3\").getId());\n+        transactionalFeature.nextTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTIwNTM1", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352920535", "createdAt": "2020-02-04T11:58:04Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1ODowNVrOFlRhGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1ODowNVrOFlRhGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyODYzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ColdStorageContentStatus checkAvailabilityOfColdStorageContent(CoreSession session) {\n          \n          \n            \n                public static ColdStorageContentStatus checkColdStorageContentAvailability(CoreSession session) {\n          \n      \n    \n    \n  \n\ntiny less verbose", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374628632", "createdAt": "2020-02-04T11:58:05Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -114,6 +126,83 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage content are available for downloading.\n+     *\n+     * @implSpec: This method will query all documents with a cold storage content which are being retrieved\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY},\n+     *            {@link #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)} and it checks if it is\n+     *            available for downloading. In which case then it will fire an event with name\n+     *            {@value COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME}\n+     */\n+    public static ColdStorageContentStatus checkAvailabilityOfColdStorageContent(CoreSession session) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTIzMTMx", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352923131", "createdAt": "2020-02-04T12:02:44Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjowMjo0NFrOFlRong==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjowMjo0NFrOFlRong==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzMDU1OA==", "bodyText": "Do we need these for now? What's their purpose?\nI understand it's for testing, in which case I find it confusing since there's no real usage..", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374630558", "createdAt": "2020-02-04T12:02:44Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -114,6 +126,83 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage content are available for downloading.\n+     *\n+     * @implSpec: This method will query all documents with a cold storage content which are being retrieved\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY},\n+     *            {@link #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)} and it checks if it is\n+     *            available for downloading. In which case then it will fire an event with name\n+     *            {@value COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME}\n+     */\n+    public static ColdStorageContentStatus checkAvailabilityOfColdStorageContent(CoreSession session) {\n+        log.debug(\"Start checking the available cold storage content which are being retrieved for repository: {}\",\n+                session::getRepositoryName);\n+\n+        // as the volume of result will be small, we don't use BAF\n+        DocumentModelList documents = session.query(GET_DOCUMENTS_TO_CHECK_QUERY);\n+\n+        // for every available content we will fire an event\n+        int available = 0;\n+        EventService eventService = Framework.getService(EventService.class);\n+        for (DocumentModel doc : documents) {\n+            if (isColdStorageContentAvailable(doc)) {\n+                available++;\n+                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+                Event event = ctx.newEvent(COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME);\n+                eventService.fireEvent(event);\n+            }\n+        }\n+\n+        int total = documents.size();\n+        log.debug(\"End checking the available cold storage content for repository: {}, found: {}/{}\",\n+                session.getRepositoryName(), available, total);\n+\n+        return new ColdStorageContentStatus(session.getRepositoryName(), total, available);\n+    }\n+\n+    /**\n+     * Checks if the retrieved cold storage content associated with the given document is available for downloading.\n+     * {@link #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)}\n+     * {@link #checkAvailabilityOfColdStorageContent(CoreSession)}\n+     */\n+    public static boolean isColdStorageContentAvailable(DocumentModel documentModel) {\n+        // FIXME to be reworked depending on how we will check the availability on low level\n+        return documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) != null\n+                && documentModel.hasFacet(FacetNames.COLD_STORAGE);\n+    }\n+\n+    /**\n+     * Gives status about the cold storage content being retrieved or are available for a given repository.\n+     */\n+    public static class ColdStorageContentStatus {\n+\n+        protected final String repositoryName;\n+\n+        protected final int totalBeingRetrieved;\n+\n+        protected final int totalContentAvailable;\n+\n+        public ColdStorageContentStatus(final String repositoryName, final int totalBeingRetrieved,\n+                final int totalContentAvailable) {\n+            this.repositoryName = repositoryName;\n+            this.totalBeingRetrieved = totalBeingRetrieved;\n+            this.totalContentAvailable = totalContentAvailable;\n+        }\n+\n+        public String getRepositoryName() {\n+            return repositoryName;\n+        }\n+\n+        public int getTotalBeingRetrieved() {\n+            return totalBeingRetrieved;\n+        }\n+\n+        public int getTotalContentAvailable() {\n+            return totalContentAvailable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTI4NDU5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352928459", "createdAt": "2020-02-04T12:12:26Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoxMjoyNlrOFlR4BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoxMjoyNlrOFlR4BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNDUwMA==", "bodyText": "If we want to keep getTotalBeingRetrieved (see aa516a7#r374630558), I would expect the future retrieval process to set the \"beingRetrieved\" boolean to false, right?\nWaiting for this, maybe we could decrement the beingRetrived counter in checkAvailabilityOfColdStorageContent along with available++, WDYT?\nJust feels funny here to have as many documents available as the ones being retrieved.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374634500", "createdAt": "2020-02-04T12:12:26Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -170,8 +178,49 @@ public void shouldFailWhenRetrievingDocumentBlobWithoutColdStorageContent() {\n         }\n     }\n \n-    protected DocumentModel createDocument(boolean addBlobContent) {\n-        DocumentModel documentModel = session.createDocumentModel(\"/\", \"anyFile\", \"File\");\n+    @Test\n+    public void shouldCheckAvailabilityOfColdStorageContent() {\n+        List<String> documents = Arrays.asList( //\n+                moveAndRetrieveColdStorageContent(DEFAULT_DOC_NAME).getId(),\n+                moveAndRetrieveColdStorageContent(\"anyFile2\").getId(), //\n+                moveAndRetrieveColdStorageContent(\"anyFile3\").getId());\n+        transactionalFeature.nextTransaction();\n+        try (CapturingEventListener listener = new CapturingEventListener(\n+                ColdStorageHelper.COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME)) {\n+            ColdStorageHelper.ColdStorageContentStatus coldStorageContentStatus = ColdStorageHelper.checkAvailabilityOfColdStorageContent(\n+                    session);\n+            assertEquals(session.getRepositoryName(), coldStorageContentStatus.getRepositoryName());\n+\n+            // all cold storage contents being retrieved are now available\n+            assertEquals(documents.size(), coldStorageContentStatus.getTotalBeingRetrieved());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTI5NDQy", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352929442", "createdAt": "2020-02-04T12:14:09Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoxNDowOVrOFlR6_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoxNDowOVrOFlR6_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzNTI2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<String> docEvents = listener.streamCapturedEvents() //\n          \n          \n            \n                        List<String> docEventIds = listener.streamCapturedEvents() //", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374635263", "createdAt": "2020-02-04T12:14:09Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -170,8 +178,49 @@ public void shouldFailWhenRetrievingDocumentBlobWithoutColdStorageContent() {\n         }\n     }\n \n-    protected DocumentModel createDocument(boolean addBlobContent) {\n-        DocumentModel documentModel = session.createDocumentModel(\"/\", \"anyFile\", \"File\");\n+    @Test\n+    public void shouldCheckAvailabilityOfColdStorageContent() {\n+        List<String> documents = Arrays.asList( //\n+                moveAndRetrieveColdStorageContent(DEFAULT_DOC_NAME).getId(),\n+                moveAndRetrieveColdStorageContent(\"anyFile2\").getId(), //\n+                moveAndRetrieveColdStorageContent(\"anyFile3\").getId());\n+        transactionalFeature.nextTransaction();\n+        try (CapturingEventListener listener = new CapturingEventListener(\n+                ColdStorageHelper.COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME)) {\n+            ColdStorageHelper.ColdStorageContentStatus coldStorageContentStatus = ColdStorageHelper.checkAvailabilityOfColdStorageContent(\n+                    session);\n+            assertEquals(session.getRepositoryName(), coldStorageContentStatus.getRepositoryName());\n+\n+            // all cold storage contents being retrieved are now available\n+            assertEquals(documents.size(), coldStorageContentStatus.getTotalBeingRetrieved());\n+            assertEquals(documents.size(), coldStorageContentStatus.getTotalContentAvailable());\n+\n+            assertTrue(listener.hasBeenFired(ColdStorageHelper.COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME));\n+            assertEquals(3, listener.streamCapturedEvents().count());\n+\n+            List<String> docEvents = listener.streamCapturedEvents() //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTM2MzA4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352936308", "createdAt": "2020-02-04T12:26:38Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyNjozOVrOFlSQPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyNjozOVrOFlSQPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0MDcwMg==", "bodyText": "\"content is\" or \"contents are\"", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374640702", "createdAt": "2020-02-04T12:26:39Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -114,6 +126,83 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage content are available for downloading.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTM2NTc0", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352936574", "createdAt": "2020-02-04T12:27:07Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyNzowN1rOFlSRGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyNzowN1rOFlSRGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0MDkyMA==", "bodyText": "Do we also want to filter versions?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374640920", "createdAt": "2020-02-04T12:27:07Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -48,6 +54,12 @@\n \n     public static final String COLD_STORAGE_BEING_RETRIEVED_PROPERTY = \"coldstorage:beingRetrieved\";\n \n+    public static final String GET_DOCUMENTS_TO_CHECK_QUERY = String.format(\n+            \"SELECT * FROM Document WHERE %s = 1 and %s = 0\", COLD_STORAGE_BEING_RETRIEVED_PROPERTY,\n+            NXQL.ECM_ISTRASHED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTM3NTU2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352937556", "createdAt": "2020-02-04T12:28:55Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyODo1NVrOFlSUEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyODo1NVrOFlSUEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0MTY4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @implSpec: This method will query all documents with a cold storage content which are being retrieved\n          \n          \n            \n                 * @implSpec: Queries all documents with a cold storage content being retrieved,", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374641682", "createdAt": "2020-02-04T12:28:55Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -114,6 +126,83 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage content are available for downloading.\n+     *\n+     * @implSpec: This method will query all documents with a cold storage content which are being retrieved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTM4NjU2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352938656", "createdAt": "2020-02-04T12:30:50Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozMDo1MFrOFlSXWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozMDo1MFrOFlSXWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0MjUyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY},\n          \n          \n            \n                 *            meaning {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY} is {@code true},", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374642522", "createdAt": "2020-02-04T12:30:50Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -114,6 +126,83 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage content are available for downloading.\n+     *\n+     * @implSpec: This method will query all documents with a cold storage content which are being retrieved\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTM5MTI4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352939128", "createdAt": "2020-02-04T12:31:42Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozMTo0MlrOFlSY1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozMTo0MlrOFlSY1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0MjkwMA==", "bodyText": "Maybe remove the reference to retrieveContentFromColdStorage and put in in a @see? It's not clear within the sentence.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374642900", "createdAt": "2020-02-04T12:31:42Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -114,6 +126,83 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage content are available for downloading.\n+     *\n+     * @implSpec: This method will query all documents with a cold storage content which are being retrieved\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY},\n+     *            {@link #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)} and it checks if it is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTM5NjUz", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352939653", "createdAt": "2020-02-04T12:32:41Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozMjo0MVrOFlSaYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozMjo0MVrOFlSaYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0MzI5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *            available for downloading. In which case then it will fire an event with name\n          \n          \n            \n                 *            available for download. In which case then it fires a {@value COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME} event.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374643299", "createdAt": "2020-02-04T12:32:41Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -114,6 +126,83 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage content are available for downloading.\n+     *\n+     * @implSpec: This method will query all documents with a cold storage content which are being retrieved\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY},\n+     *            {@link #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)} and it checks if it is\n+     *            available for downloading. In which case then it will fire an event with name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTQxNDIw", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352941420", "createdAt": "2020-02-04T12:35:48Z", "commit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozNTo0OFrOFlSfww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozNTo0OFrOFlSfww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0NDY3NQ==", "bodyText": "I wonder if we want/need to store the numberOfDaysOfAvailability, or if this information will come from the cold storage when checking for availability, see aa516a7#diff-ead64399e0b98c4a84e7b8cef49b5444R169, in which case it can then be passed dynamically to the fired event.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374644675", "createdAt": "2020-02-04T12:35:48Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -74,6 +77,43 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Retrieves the cold storage content associated with the document of the given {@link DocumentRef}.\n+     * \n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a request restore, calling the {@link Blob#getStream()} during this process\n+     *          doesn't mean you will get the blob content immediately.\n+     * @return the updated document model if the retrieve succeeds\n+     * @throws NuxeoException if there is no cold storage content associated with the given document, or if it is being\n+     *             retrieved\n+     */\n+    public static DocumentModel retrieveContentFromColdStorage(CoreSession session, DocumentRef documentRef,\n+            int numberOfDaysOfAvailability) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+        log.debug(\"Retrieve from cold storage the content of document: {} for: {} days\", () -> documentModel,\n+                () -> numberOfDaysOfAvailability);\n+\n+        if (!documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+                || documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) == null) {\n+            throw new NuxeoException(String.format(\"No cold storage content defined for document: %s.\", documentModel),\n+                    SC_NOT_FOUND);\n+        }\n+\n+        Serializable beingRetrieved = documentModel.getPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY);\n+        if (Boolean.TRUE.equals(beingRetrieved)) {\n+            throw new NuxeoException(\n+                    String.format(\"The cold storage content associated with the document: %s is being retrieved.\",\n+                            documentModel),\n+                    SC_CONFLICT);\n+        }\n+\n+        documentModel.setPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY, true);\n+        return session.saveDocument(documentModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "254d274d5d6fd2bc9e70780eb02ec1e6210fc35e"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTQyMTUz", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352942153", "createdAt": "2020-02-04T12:37:08Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozNzowOFrOFlSiEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozNzowOFrOFlSiEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0NTI2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Checks if the retrieved cold storage content associated with the given document is available for downloading.\n          \n          \n            \n                 * Checks if the retrieved cold storage content associated with the given document is available for download.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374645267", "createdAt": "2020-02-04T12:37:08Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -114,6 +126,83 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage content are available for downloading.\n+     *\n+     * @implSpec: This method will query all documents with a cold storage content which are being retrieved\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY},\n+     *            {@link #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)} and it checks if it is\n+     *            available for downloading. In which case then it will fire an event with name\n+     *            {@value COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME}\n+     */\n+    public static ColdStorageContentStatus checkAvailabilityOfColdStorageContent(CoreSession session) {\n+        log.debug(\"Start checking the available cold storage content which are being retrieved for repository: {}\",\n+                session::getRepositoryName);\n+\n+        // as the volume of result will be small, we don't use BAF\n+        DocumentModelList documents = session.query(GET_DOCUMENTS_TO_CHECK_QUERY);\n+\n+        // for every available content we will fire an event\n+        int available = 0;\n+        EventService eventService = Framework.getService(EventService.class);\n+        for (DocumentModel doc : documents) {\n+            if (isColdStorageContentAvailable(doc)) {\n+                available++;\n+                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+                Event event = ctx.newEvent(COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME);\n+                eventService.fireEvent(event);\n+            }\n+        }\n+\n+        int total = documents.size();\n+        log.debug(\"End checking the available cold storage content for repository: {}, found: {}/{}\",\n+                session.getRepositoryName(), available, total);\n+\n+        return new ColdStorageContentStatus(session.getRepositoryName(), total, available);\n+    }\n+\n+    /**\n+     * Checks if the retrieved cold storage content associated with the given document is available for downloading.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTQyNDAw", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352942400", "createdAt": "2020-02-04T12:37:36Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozNzozNlrOFlSi4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozNzozNlrOFlSi4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0NTQ3Mw==", "bodyText": "@see maybe?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374645473", "createdAt": "2020-02-04T12:37:36Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -114,6 +126,83 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage content are available for downloading.\n+     *\n+     * @implSpec: This method will query all documents with a cold storage content which are being retrieved\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY},\n+     *            {@link #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)} and it checks if it is\n+     *            available for downloading. In which case then it will fire an event with name\n+     *            {@value COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME}\n+     */\n+    public static ColdStorageContentStatus checkAvailabilityOfColdStorageContent(CoreSession session) {\n+        log.debug(\"Start checking the available cold storage content which are being retrieved for repository: {}\",\n+                session::getRepositoryName);\n+\n+        // as the volume of result will be small, we don't use BAF\n+        DocumentModelList documents = session.query(GET_DOCUMENTS_TO_CHECK_QUERY);\n+\n+        // for every available content we will fire an event\n+        int available = 0;\n+        EventService eventService = Framework.getService(EventService.class);\n+        for (DocumentModel doc : documents) {\n+            if (isColdStorageContentAvailable(doc)) {\n+                available++;\n+                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+                Event event = ctx.newEvent(COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME);\n+                eventService.fireEvent(event);\n+            }\n+        }\n+\n+        int total = documents.size();\n+        log.debug(\"End checking the available cold storage content for repository: {}, found: {}/{}\",\n+                session.getRepositoryName(), available, total);\n+\n+        return new ColdStorageContentStatus(session.getRepositoryName(), total, available);\n+    }\n+\n+    /**\n+     * Checks if the retrieved cold storage content associated with the given document is available for downloading.\n+     * {@link #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)}\n+     * {@link #checkAvailabilityOfColdStorageContent(CoreSession)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTQyODA5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352942809", "createdAt": "2020-02-04T12:38:24Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozODoyNFrOFlSkJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozODoyNFrOFlSkJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0NTc5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gives status about the cold storage content being retrieved or are available for a given repository.\n          \n          \n            \n                 * Status about the cold storage content being retrieved or available for a given repository.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374645796", "createdAt": "2020-02-04T12:38:24Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -114,6 +126,83 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage content are available for downloading.\n+     *\n+     * @implSpec: This method will query all documents with a cold storage content which are being retrieved\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY},\n+     *            {@link #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)} and it checks if it is\n+     *            available for downloading. In which case then it will fire an event with name\n+     *            {@value COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME}\n+     */\n+    public static ColdStorageContentStatus checkAvailabilityOfColdStorageContent(CoreSession session) {\n+        log.debug(\"Start checking the available cold storage content which are being retrieved for repository: {}\",\n+                session::getRepositoryName);\n+\n+        // as the volume of result will be small, we don't use BAF\n+        DocumentModelList documents = session.query(GET_DOCUMENTS_TO_CHECK_QUERY);\n+\n+        // for every available content we will fire an event\n+        int available = 0;\n+        EventService eventService = Framework.getService(EventService.class);\n+        for (DocumentModel doc : documents) {\n+            if (isColdStorageContentAvailable(doc)) {\n+                available++;\n+                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+                Event event = ctx.newEvent(COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME);\n+                eventService.fireEvent(event);\n+            }\n+        }\n+\n+        int total = documents.size();\n+        log.debug(\"End checking the available cold storage content for repository: {}, found: {}/{}\",\n+                session.getRepositoryName(), available, total);\n+\n+        return new ColdStorageContentStatus(session.getRepositoryName(), total, available);\n+    }\n+\n+    /**\n+     * Checks if the retrieved cold storage content associated with the given document is available for downloading.\n+     * {@link #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)}\n+     * {@link #checkAvailabilityOfColdStorageContent(CoreSession)}\n+     */\n+    public static boolean isColdStorageContentAvailable(DocumentModel documentModel) {\n+        // FIXME to be reworked depending on how we will check the availability on low level\n+        return documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) != null\n+                && documentModel.hasFacet(FacetNames.COLD_STORAGE);\n+    }\n+\n+    /**\n+     * Gives status about the cold storage content being retrieved or are available for a given repository.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTQzMzQ3", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352943347", "createdAt": "2020-02-04T12:39:26Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozOToyNlrOFlSmNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjozOToyNlrOFlSmNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0NjMyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"Start checking the available cold storage content which are being retrieved\");\n          \n          \n            \n                    log.debug(\"Start checking the available cold storage content\");", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374646325", "createdAt": "2020-02-04T12:39:26Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/coldstorage/CheckAvailabilityOfColdStorageContentListener.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.coldstorage;\n+\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CloseableCoreSession;\n+import org.nuxeo.ecm.core.api.CoreInstance;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventListener;\n+import org.nuxeo.ecm.core.repository.RepositoryService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * An asynchronous listener that checks if the contents being retrieved form cold storage are available.\n+ *\n+ * @apiNote: This listener is designed to be called from a scheduler.\n+ * @since 11.1\n+ */\n+public class CheckAvailabilityOfColdStorageContentListener implements EventListener {\n+\n+    private static final Logger log = LogManager.getLogger(CheckAvailabilityOfColdStorageContentListener.class);\n+\n+    @Override\n+    public void handleEvent(final Event event) {\n+        log.debug(\"Start checking the available cold storage content which are being retrieved\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTQ0NzI0", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352944724", "createdAt": "2020-02-04T12:42:03Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo0MjowNFrOFlSr6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo0MjowNFrOFlSr6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0Nzc4Ng==", "bodyText": "Not clear, you're actually defining the scheduler itself along with the event it's firing, I would just remove the comment.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374647786", "createdAt": "2020-02-04T12:42:04Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/resources/OSGI-INF/coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.event.coldstorage.contribution\">\n+\n+  <!-- define the event that will be fired by the scheduler -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTQ1MDU3", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352945057", "createdAt": "2020-02-04T12:42:37Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo0MjozN1rOFlStag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo0MjozN1rOFlStag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0ODE3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  <event>checkAvailabilityOfColdStorageContentBeingRetrieved</event>\n          \n          \n            \n                  <event>checkColdStorageContentAvailability</event>\n          \n      \n    \n    \n  \n\nshorter...", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374648170", "createdAt": "2020-02-04T12:42:37Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/resources/OSGI-INF/coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.event.coldstorage.contribution\">\n+\n+  <!-- define the event that will be fired by the scheduler -->\n+  <extension target=\"org.nuxeo.ecm.core.scheduler.SchedulerService\" point=\"schedule\">\n+    <schedule id=\"checkAvailabilityOfBlobsBeingRetrieved\">\n+      <!-- every hour and 7 minutes -->\n+      <cronExpression>0 7 * ? * * *</cronExpression>\n+      <event>checkAvailabilityOfColdStorageContentBeingRetrieved</event>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTQ3MDMw", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352947030", "createdAt": "2020-02-04T12:46:15Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo0NjoxNVrOFlSzzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo0NjoxNVrOFlSzzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0OTgwNw==", "bodyText": "I believe you want a synchronous listener right? Since it's triggered by a scheduler that is already asynchronous.\n@efge can you please confirm?\nIn fact, since it's implementing EventListener, it is synchronous, no matter what attributes you put in the listener's contribution.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374649807", "createdAt": "2020-02-04T12:46:15Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/coldstorage/CheckAvailabilityOfColdStorageContentListener.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.coldstorage;\n+\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.CloseableCoreSession;\n+import org.nuxeo.ecm.core.api.CoreInstance;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventListener;\n+import org.nuxeo.ecm.core.repository.RepositoryService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * An asynchronous listener that checks if the contents being retrieved form cold storage are available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTQ3ODY4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352947868", "createdAt": "2020-02-04T12:47:47Z", "commit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo0Nzo0N1rOFlS2Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo0Nzo0N1rOFlS2Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1MDQ0Ng==", "bodyText": "Since the listener is implementing EventListener, it is registered as synchronous (this is historical and unclear code...).\nSo you should remove async=\"true\" (it's false by default).", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374650446", "createdAt": "2020-02-04T12:47:47Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/resources/OSGI-INF/coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.event.coldstorage.contribution\">\n+\n+  <!-- define the event that will be fired by the scheduler -->\n+  <extension target=\"org.nuxeo.ecm.core.scheduler.SchedulerService\" point=\"schedule\">\n+    <schedule id=\"checkAvailabilityOfBlobsBeingRetrieved\">\n+      <!-- every hour and 7 minutes -->\n+      <cronExpression>0 7 * ? * * *</cronExpression>\n+      <event>checkAvailabilityOfColdStorageContentBeingRetrieved</event>\n+    </schedule>\n+  </extension>\n+\n+  <!-- define the listener that will handle the scheduler event -->\n+  <extension target=\"org.nuxeo.ecm.core.event.EventServiceComponent\" point=\"listener\">\n+    <listener name=\"checkAvailabilityOfBlobsBeingRetrieved\" async=\"true\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTUxMTQw", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352951140", "createdAt": "2020-02-04T12:53:33Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1MzozM1rOFlS_mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1MzozM1rOFlS_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1MjgyNQ==", "bodyText": "Probaly want to decrement the beingRetrieved counter.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374652825", "createdAt": "2020-02-04T12:53:33Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -148,7 +154,17 @@ public static ColdStorageContentStatus checkAvailabilityOfColdStorageContent(Cor\n         for (DocumentModel doc : documents) {\n             if (isColdStorageContentAvailable(doc)) {\n                 available++;\n+                // mark the cold storage content of document as retrieved\n+                doc.setPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTUyODE4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352952818", "createdAt": "2020-02-04T12:56:30Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1NjozMFrOFlTEjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1NjozMFrOFlTEjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1NDA5NA==", "bodyText": "We might need a session.save() here, though the transactional context might be enough (we're in a synchronous listener called by a scheduled event), not sure.\n@efge WDYT?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374654094", "createdAt": "2020-02-04T12:56:30Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -148,7 +154,17 @@ public static ColdStorageContentStatus checkAvailabilityOfColdStorageContent(Cor\n         for (DocumentModel doc : documents) {\n             if (isColdStorageContentAvailable(doc)) {\n                 available++;\n+                // mark the cold storage content of document as retrieved\n+                doc.setPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY, false);\n+                session.saveDocument(doc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTUzNDY0", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352953464", "createdAt": "2020-02-04T12:57:39Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1NzozOVrOFlTGig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1NzozOVrOFlTGig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1NDYwMg==", "bodyText": "Is this a use case for var?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374654602", "createdAt": "2020-02-04T12:57:39Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -148,7 +154,17 @@ public static ColdStorageContentStatus checkAvailabilityOfColdStorageContent(Cor\n         for (DocumentModel doc : documents) {\n             if (isColdStorageContentAvailable(doc)) {\n                 available++;\n+                // mark the cold storage content of document as retrieved\n+                doc.setPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY, false);\n+                session.saveDocument(doc);\n+\n+                // create and fire the event\n                 DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+                Map<String, Serializable> properties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTUzNzY5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352953769", "createdAt": "2020-02-04T12:58:11Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1ODoxMVrOFlTHdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1ODoxMVrOFlTHdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1NDgzOQ==", "bodyText": "Maybe something generic like \"TO_DEFINE\" as well?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374654839", "createdAt": "2020-02-04T12:58:11Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -148,7 +154,17 @@ public static ColdStorageContentStatus checkAvailabilityOfColdStorageContent(Cor\n         for (DocumentModel doc : documents) {\n             if (isColdStorageContentAvailable(doc)) {\n                 available++;\n+                // mark the cold storage content of document as retrieved\n+                doc.setPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY, false);\n+                session.saveDocument(doc);\n+\n+                // create and fire the event\n                 DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+                Map<String, Serializable> properties = new HashMap<>();\n+                // FIXME: wait for NXP-28417\n+                properties.put(NUMBER_OF_DAYS_OF_AVAILABILITY_KEY, \"TO DEFINE\");\n+                properties.put(ARCHIVE_LOCATION_KEY, \"https://www.nuxeo.com/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTUzOTU3", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352953957", "createdAt": "2020-02-04T12:58:30Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1ODozMVrOFlTH_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1ODozMVrOFlTH_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1NDk3NQ==", "bodyText": "extra blank ine", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374654975", "createdAt": "2020-02-04T12:58:31Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/resources/OSGI-INF/coldstorage-contrib.xml", "diffHunk": "@@ -18,4 +18,24 @@\n     </listener>\n   </extension>\n \n+  <!-- define the notification that will be responsible for sending the mails -->\n+  <extension\n+    target=\"org.nuxeo.ecm.platform.ec.notification.service.NotificationService\"\n+    point=\"notifications\">\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTU0NDUy", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352954452", "createdAt": "2020-02-04T12:59:25Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1OToyNVrOFlTJYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjo1OToyNVrOFlTJYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1NTMzMA==", "bodyText": "Aren't enabled and autoSubscribed set to their default values? In which case they can be removed for clarity.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374655330", "createdAt": "2020-02-04T12:59:25Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/resources/OSGI-INF/coldstorage-contrib.xml", "diffHunk": "@@ -18,4 +18,24 @@\n     </listener>\n   </extension>\n \n+  <!-- define the notification that will be responsible for sending the mails -->\n+  <extension\n+    target=\"org.nuxeo.ecm.platform.ec.notification.service.NotificationService\"\n+    point=\"notifications\">\n+\n+    <notification name=\"ColdStorageContentAvailable\" channel=\"email\" enabled=\"true\" availableIn=\"*\"\n+                  subject=\"Archive content available on '${docTitle}'\"\n+                  autoSubscribed=\"false\" template=\"coldStorageContentAvailable\"\n+                  label=\"label.document.download\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTU3MTk4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-352957198", "createdAt": "2020-02-04T13:04:16Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzowNDoxNlrOFlTRfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzowNDoxNlrOFlTRfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1NzQwNg==", "bodyText": "Does this means that the user is automatically subscribed to the ColdStorageContentAvailable notification?\nThough, the attribute is set to false in the contribution.\nSo when is the user actually subscribed?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374657406", "createdAt": "2020-02-04T13:04:16Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-platform-notification/nuxeo-platform-notification-core/src/test/java/org/nuxeo/ecm/platform/ec/notification/operations/SubscribeAndUnsubscribeTest.java", "diffHunk": "@@ -112,7 +112,7 @@ public void testSubscribeAndUnsubscribeOperations() throws OperationException {\n \n         for (DocumentModel doc : listDocModel) {\n             List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertEquals(4, docSubscriptions.size());\n+            assertEquals(5, docSubscriptions.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDIwMzI0", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-353020324", "createdAt": "2020-02-04T14:33:06Z", "commit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDozMzowNlrOFlWI1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDozMzowNlrOFlWI1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwNDM0MA==", "bodyText": "Could be CheckColdStorageContentAvailabilityListener.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r374704340", "createdAt": "2020-02-04T14:33:06Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/coldstorage/CheckAvailabilityOfColdStorageContentListener.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7a25db5e1ed9270eebdd065e36a1ff12c5dce4f2", "committedDate": "2020-02-03T08:35:21Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "1a85ce1bef0550788cf8a65d0afd3fbcfc9b43dc", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1a85ce1bef0550788cf8a65d0afd3fbcfc9b43dc", "committedDate": "2020-02-05T11:29:59Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a85ce1bef0550788cf8a65d0afd3fbcfc9b43dc", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1a85ce1bef0550788cf8a65d0afd3fbcfc9b43dc", "committedDate": "2020-02-05T11:29:59Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "44116cdbc0274194af259907af2cce0e5df1e5f4", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/44116cdbc0274194af259907af2cce0e5df1e5f4", "committedDate": "2020-02-05T14:33:55Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzODk1NDE5", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-353895419", "createdAt": "2020-02-05T17:16:50Z", "commit": {"oid": "44116cdbc0274194af259907af2cce0e5df1e5f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoxNjo1MFrOFmANNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoxNjo1MFrOFmANNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5MzU5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // TODO actually this method set only the \"coldstorage:beingRetrieved\", once the NXP-28417 done,\n          \n          \n            \n                // TODO currently this method only sets the \"coldstorage:beingRetrieved\" property, once NXP-28417 is done,", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r375393590", "createdAt": "2020-02-05T17:16:50Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    public static final String COLD_STORAGE_BEING_RETRIEVED_PROPERTY = \"coldstorage:beingRetrieved\";\n+\n+    public static final String GET_DOCUMENTS_TO_CHECK_QUERY = String.format(\n+            \"SELECT * FROM Document WHERE %s = 1 and %s = 0\", COLD_STORAGE_BEING_RETRIEVED_PROPERTY,\n+            NXQL.ECM_ISTRASHED);\n+\n+    public static final String COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME = \"coldStorageContentAvailable\";\n+\n+    public static final String NUMBER_OF_DAYS_OF_AVAILABILITY_KEY = \"numberOfDaysOfAvailability\";\n+\n+    public static final String ARCHIVE_LOCATION_KEY = \"archiveLocation\";\n+\n+    /** Used in the mail context to put the unknown information until NXP-28417 will be done **/\n+    public static final String TO_DEFINE = \"This information is need to be defined\";\n+\n+    /**\n+     * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     *\n+     * @return the updated document model if the move succeeds\n+     * @throws NuxeoException if the main content is already in the cold storage, or if there is no main content\n+     *             associated with the given document\n+     */\n+    public static DocumentModel moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+        log.debug(\"Move to cold storage the main content of document: {}\", documentModel);\n+\n+        if (documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+                && documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) != null) {\n+            throw new NuxeoException(\n+                    String.format(\"The main content for document: %s is already in cold storage.\", documentModel),\n+                    SC_CONFLICT);\n+        }\n+\n+        Serializable mainContent = documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n+        if (mainContent == null) {\n+            throw new NuxeoException(String.format(\"There is no main content for document: %s.\", documentModel),\n+                    SC_NOT_FOUND);\n+        }\n+\n+        documentModel.addFacet(FacetNames.COLD_STORAGE);\n+        documentModel.setPropertyValue(COLD_STORAGE_CONTENT_PROPERTY, mainContent);\n+        documentModel.setPropertyValue(FILE_CONTENT_PROPERTY, null);\n+        return session.saveDocument(documentModel);\n+    }\n+\n+    /**\n+     * Retrieves the cold storage content associated with the document of the given {@link DocumentRef}.\n+     *\n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a restore request, calling the {@link Blob#getStream()} during this process\n+     *          doesn't mean you will get the blob's content.\n+     * @return the updated document model if the retrieve succeeds\n+     * @throws NuxeoException if there is no cold storage content associated with the given document, or if it is being\n+     *             retrieved\n+     */\n+    // TODO actually this method set only the \"coldstorage:beingRetrieved\", once the NXP-28417 done,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44116cdbc0274194af259907af2cce0e5df1e5f4"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzODk5MzU2", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-353899356", "createdAt": "2020-02-05T17:22:21Z", "commit": {"oid": "44116cdbc0274194af259907af2cce0e5df1e5f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoyMjoyMVrOFmAZZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoyMjoyMVrOFmAZZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NjcwOA==", "bodyText": "Here also I would put documentModel = ColdStorageHelper.moveContentToColdStorage, just to always use the same pattern.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r375396708", "createdAt": "2020-02-05T17:22:21Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    protected static final int NUMBER_OF_DAYS_OF_AVAILABILITY = 5;\n+\n+    protected static final String DEFAULT_DOC_NAME = \"anyFile\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {\n+        DocumentModel documentModel = createDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move the blob to cold storage\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();\n+        documentModel = session.getDocument(documentModel.getRef());\n+\n+        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingDocumentBlobAlreadyInColdStorage() {\n+        DocumentModel documentModel = createDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move for the first time\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // try to make another move\n+        try {\n+            ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+            fail(\"Should fail because the content is already in cold storage\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_CONFLICT, ne.getStatusCode());\n+            assertEquals(String.format(\"The main content for document: %s is already in cold storage.\", documentModel),\n+                    ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n+        DocumentModel documentModel = createDocument(DEFAULT_DOC_NAME, false);\n+        try {\n+            ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+            fail(\"Should fail because there is no main content associated with the document\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_NOT_FOUND, ne.getStatusCode());\n+            assertEquals(String.format(\"There is no main content for document: %s.\", documentModel), ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldRetrieveDocumentBlobFromColdStorage() {\n+        DocumentModel documentModel = createDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // retrieve, which means initiate a request to restore the blob from cold storage\n+        documentModel = ColdStorageHelper.retrieveContentFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+        transactionalFeature.nextTransaction();\n+        documentModel = session.getDocument(documentModel.getRef());\n+\n+        assertTrue((Boolean) documentModel.getPropertyValue(ColdStorageHelper.COLD_STORAGE_BEING_RETRIEVED_PROPERTY));\n+    }\n+\n+    @Test\n+    public void shouldFailWhenRetrievingDocumentBlobFromColdStorageBeingRetrieved() {\n+        DocumentModel documentModel = createDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // retrieve, which means initiate a request to restore the blob from cold storage\n+        documentModel = ColdStorageHelper.retrieveContentFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+\n+        // try to retrieve a second time\n+        try {\n+            ColdStorageHelper.retrieveContentFromColdStorage(session, documentModel.getRef(),\n+                    NUMBER_OF_DAYS_OF_AVAILABILITY);\n+            fail(\"Should fail because the cold storage content is being retrieved.\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_CONFLICT, ne.getStatusCode());\n+            assertEquals(String.format(\"The cold storage content associated with the document: %s is being retrieved.\",\n+                    documentModel), ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailWhenRetrievingDocumentBlobWithoutColdStorageContent() {\n+        DocumentModel documentModel = createDocument(DEFAULT_DOC_NAME, true);\n+        try {\n+            // try to retrieve from cold storage where the blob is not stored in it\n+            ColdStorageHelper.retrieveContentFromColdStorage(session, documentModel.getRef(),\n+                    NUMBER_OF_DAYS_OF_AVAILABILITY);\n+            fail(\"Should fail because there no cold storage content associated to this document.\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_NOT_FOUND, ne.getStatusCode());\n+            assertEquals(String.format(\"No cold storage content defined for document: %s.\", documentModel),\n+                    ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldCheckAvailabilityOfColdStorageContent() {\n+        List<String> documents = Arrays.asList( //\n+                moveAndRetrieveColdStorageContent(DEFAULT_DOC_NAME).getId(),\n+                moveAndRetrieveColdStorageContent(\"anyFile2\").getId(), //\n+                moveAndRetrieveColdStorageContent(\"anyFile3\").getId());\n+        transactionalFeature.nextTransaction();\n+        try (CapturingEventListener listener = new CapturingEventListener(\n+                ColdStorageHelper.COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME)) {\n+            ColdStorageHelper.ColdStorageContentStatus coldStorageContentStatus = ColdStorageHelper.checkColdStorageContentAvailability(\n+                    session);\n+            assertEquals(session.getRepositoryName(), coldStorageContentStatus.getRepositoryName());\n+\n+            // all cold storage contents being retrieved are now available\n+            assertEquals(0, coldStorageContentStatus.getTotalBeingRetrieved());\n+            assertEquals(documents.size(), coldStorageContentStatus.getTotalContentAvailable());\n+\n+            assertTrue(listener.hasBeenFired(ColdStorageHelper.COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME));\n+            assertEquals(3, listener.streamCapturedEvents().count());\n+\n+            List<String> docEventIds = listener.streamCapturedEvents() //\n+                                               .map(event -> {\n+                                                   DocumentEventContext docCtx = (DocumentEventContext) event.getContext();\n+                                                   return docCtx.getSourceDocument().getId();\n+                                               }) //\n+                                               .sorted() //\n+                                               .collect(Collectors.toList());\n+\n+            documents.sort(Comparator.naturalOrder());\n+            assertEquals(documents, docEventIds);\n+        }\n+    }\n+\n+    protected DocumentModel moveAndRetrieveColdStorageContent(String documentName) {\n+        DocumentModel documentModel = createDocument(documentName, true);\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44116cdbc0274194af259907af2cce0e5df1e5f4"}, "originalPosition": 210}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTQxMzk4", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-353941398", "createdAt": "2020-02-05T18:26:53Z", "commit": {"oid": "44116cdbc0274194af259907af2cce0e5df1e5f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyNjo1M1rOFmCZng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyNjo1M1rOFmCZng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyOTUzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String TO_DEFINE = \"This information is need to be defined\";\n          \n          \n            \n                public static final String TO_DEFINE = \"This information needs to be defined\";", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r375429534", "createdAt": "2020-02-05T18:26:53Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core.blob;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Manages the cold storage of the main content of a {@link DocumentModel}.\n+ *\n+ * @since 11.1\n+ */\n+public class ColdStorageHelper {\n+\n+    private static final Logger log = LogManager.getLogger(ColdStorageHelper.class);\n+\n+    public static final String FILE_CONTENT_PROPERTY = \"file:content\";\n+\n+    public static final String COLD_STORAGE_CONTENT_PROPERTY = \"coldstorage:coldContent\";\n+\n+    public static final String COLD_STORAGE_BEING_RETRIEVED_PROPERTY = \"coldstorage:beingRetrieved\";\n+\n+    public static final String GET_DOCUMENTS_TO_CHECK_QUERY = String.format(\n+            \"SELECT * FROM Document WHERE %s = 1 and %s = 0\", COLD_STORAGE_BEING_RETRIEVED_PROPERTY,\n+            NXQL.ECM_ISTRASHED);\n+\n+    public static final String COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME = \"coldStorageContentAvailable\";\n+\n+    public static final String NUMBER_OF_DAYS_OF_AVAILABILITY_KEY = \"numberOfDaysOfAvailability\";\n+\n+    public static final String ARCHIVE_LOCATION_KEY = \"archiveLocation\";\n+\n+    /** Used in the mail context to put the unknown information until NXP-28417 will be done **/\n+    public static final String TO_DEFINE = \"This information is need to be defined\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44116cdbc0274194af259907af2cce0e5df1e5f4"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44116cdbc0274194af259907af2cce0e5df1e5f4", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/44116cdbc0274194af259907af2cce0e5df1e5f4", "committedDate": "2020-02-05T14:33:55Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "82b1167c00128633de58f315ddf38d4ee7bbee64", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/82b1167c00128633de58f315ddf38d4ee7bbee64", "committedDate": "2020-02-06T12:35:05Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82b1167c00128633de58f315ddf38d4ee7bbee64", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/82b1167c00128633de58f315ddf38d4ee7bbee64", "committedDate": "2020-02-06T12:35:05Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "973f4810bf14e89c5dddf7b41335d270c139df8c", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/973f4810bf14e89c5dddf7b41335d270c139df8c", "committedDate": "2020-02-06T12:41:04Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTE0Nzkx", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-355914791", "createdAt": "2020-02-10T12:58:10Z", "commit": {"oid": "e6d264479475257dbdf8138dabfb28c3bc2c459e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjo1ODoxMVrOFnlFkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzozNjoyMFrOFnmOsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0NjQxOQ==", "bodyText": "I don't think that's our XML indent style.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377046419", "createdAt": "2020-02-10T12:58:11Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-test/src/test/resources/OSGI-INF/test-dummy-thumbnail-factory-contrib.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.dummy.thumbnail.factory.test\">\n+\n+  <extension target=\"org.nuxeo.ecm.core.api.thumbnail.ThumbnailService\"\n+             point=\"thumbnailFactory\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6d264479475257dbdf8138dabfb28c3bc2c459e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0OTMzMA==", "bodyText": "documentModel.refresh() is simpler.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377049330", "createdAt": "2020-02-10T13:04:29Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -108,6 +110,60 @@ public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n         }\n     }\n \n+    @Test\n+    public void shouldRetrieveDocumentBlobFromColdStorage() {\n+        DocumentModel documentModel = createDocument(true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // retrieve, which means initiate a request to restore the blob from cold storage\n+        documentModel = ColdStorageHelper.retrieveContentFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+        transactionalFeature.nextTransaction();\n+        documentModel = session.getDocument(documentModel.getRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18323496bfd2be3784897f68816d196a76874462"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1MTI5Mw==", "bodyText": "In other places you use\n(Boolean) documentModel.getPropertyValue(ColdStorageHelper.COLD_STORAGE_BEING_RETRIEVED_PROPERTY)\n\nand\n(boolean) updatedDocument.getPropertyValue(ColdStorageHelper.COLD_STORAGE_BEING_RETRIEVED_PROPERTY)\n\nPlease be consistent.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377051293", "createdAt": "2020-02-10T13:08:50Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -75,6 +78,45 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Retrieves the cold storage content associated with the document of the given {@link DocumentRef}.\n+     * \n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a restore request, calling the {@link Blob#getStream()} during this process\n+     *          doesn't mean you will get the blob's content.\n+     * @return the updated document model if the retrieve succeeds\n+     * @throws NuxeoException if there is no cold storage content associated with the given document, or if it is being\n+     *             retrieved\n+     */\n+    // TODO currently this method sets only the \"coldstorage:beingRetrieved\" property, once the NXP-28417 is done,\n+    // it will trigger the restore request too\n+    public static DocumentModel retrieveContentFromColdStorage(CoreSession session, DocumentRef documentRef,\n+            int numberOfDaysOfAvailability) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+        log.debug(\"Retrieve from cold storage the content of document: {} for: {} days\", documentModel,\n+                numberOfDaysOfAvailability);\n+\n+        if (!documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+                || documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) == null) {\n+            throw new NuxeoException(String.format(\"No cold storage content defined for document: %s.\", documentModel),\n+                    SC_NOT_FOUND);\n+        }\n+\n+        Serializable beingRetrieved = documentModel.getPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY);\n+        if (Boolean.TRUE.equals(beingRetrieved)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18323496bfd2be3784897f68816d196a76874462"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NDkxOQ==", "bodyText": "Not sure about this HTTP status code, as this been discussed? I would see instead 403 or 404 or 412.\nAWS itself returns\n\tHTTP/1.1 403 Forbidden\n\t<Error>\n\t   <Code>InvalidObjectState</Code>\n\t   <Message>The operation is not valid for the object's storage class</Message>\n\t</Error>", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377054919", "createdAt": "2020-02-10T13:16:30Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -75,6 +78,45 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Retrieves the cold storage content associated with the document of the given {@link DocumentRef}.\n+     * \n+     * @param session the core session\n+     * @param documentRef the document reference\n+     * @param numberOfDaysOfAvailability number of days that you want your cold storage content to be accessible after\n+     *            restoring\n+     * @apiNote This method will initiate a restore request, calling the {@link Blob#getStream()} during this process\n+     *          doesn't mean you will get the blob's content.\n+     * @return the updated document model if the retrieve succeeds\n+     * @throws NuxeoException if there is no cold storage content associated with the given document, or if it is being\n+     *             retrieved\n+     */\n+    // TODO currently this method sets only the \"coldstorage:beingRetrieved\" property, once the NXP-28417 is done,\n+    // it will trigger the restore request too\n+    public static DocumentModel retrieveContentFromColdStorage(CoreSession session, DocumentRef documentRef,\n+            int numberOfDaysOfAvailability) {\n+        DocumentModel documentModel = session.getDocument(documentRef);\n+        log.debug(\"Retrieve from cold storage the content of document: {} for: {} days\", documentModel,\n+                numberOfDaysOfAvailability);\n+\n+        if (!documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+                || documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) == null) {\n+            throw new NuxeoException(String.format(\"No cold storage content defined for document: %s.\", documentModel),\n+                    SC_NOT_FOUND);\n+        }\n+\n+        Serializable beingRetrieved = documentModel.getPropertyValue(COLD_STORAGE_BEING_RETRIEVED_PROPERTY);\n+        if (Boolean.TRUE.equals(beingRetrieved)) {\n+            throw new NuxeoException(\n+                    String.format(\"The cold storage content associated with the document: %s is being retrieved.\",\n+                            documentModel),\n+                    SC_CONFLICT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18323496bfd2be3784897f68816d196a76874462"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1Nzg1NQ==", "bodyText": "I feel that the operation name and classname (and other method names) is misleading. People will expect \"retrieve\" to return the blob and not be async. AWS S3 calls it \"restore\". But this is in fact a request to restore the blob at a later point in time.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377057855", "createdAt": "2020-02-10T13:22:08Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/document/RetrieveFromColdStorage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+\n+/**\n+ * Retrieves the cold storage content associated with the input {@link DocumentModel}. This operation will initiate a\n+ * restore request, calling the {@link Blob#getStream()} during this process doesn't mean you will get the blob's\n+ * content.\n+ * \n+ * @since 11.1\n+ */\n+@Operation(id = RetrieveFromColdStorage.ID, category = Constants.CAT_BLOB, label = \"Request restoration from cold storage\", description = \"Request a cold storage content restoration associated with the document.\")\n+public class RetrieveFromColdStorage {\n+\n+    public static final String ID = \"Document.RetrieveFromColdStorage\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18323496bfd2be3784897f68816d196a76874462"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1ODE0NA==", "bodyText": "I would return void given that the doc is unchanged and this operation is essentially async.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377058144", "createdAt": "2020-02-10T13:22:49Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-core/src/main/java/org/nuxeo/ecm/automation/core/operations/document/RetrieveFromColdStorage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *  \n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.document;\n+\n+import org.nuxeo.ecm.automation.core.Constants;\n+import org.nuxeo.ecm.automation.core.annotations.Context;\n+import org.nuxeo.ecm.automation.core.annotations.Operation;\n+import org.nuxeo.ecm.automation.core.annotations.OperationMethod;\n+import org.nuxeo.ecm.automation.core.annotations.Param;\n+import org.nuxeo.ecm.automation.core.collectors.DocumentModelCollector;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+\n+/**\n+ * Retrieves the cold storage content associated with the input {@link DocumentModel}. This operation will initiate a\n+ * restore request, calling the {@link Blob#getStream()} during this process doesn't mean you will get the blob's\n+ * content.\n+ * \n+ * @since 11.1\n+ */\n+@Operation(id = RetrieveFromColdStorage.ID, category = Constants.CAT_BLOB, label = \"Request restoration from cold storage\", description = \"Request a cold storage content restoration associated with the document.\")\n+public class RetrieveFromColdStorage {\n+\n+    public static final String ID = \"Document.RetrieveFromColdStorage\";\n+\n+    @Param(name = \"numberOfDaysOfAvailability\", description = \"The number of days that you want your cold storage content to be accessible.\")\n+    protected int numberOfDaysOfAvailability;\n+\n+    @Context\n+    protected CoreSession session;\n+\n+    @OperationMethod(collector = DocumentModelCollector.class)\n+    public DocumentModel run(DocumentModel doc) {\n+        return ColdStorageHelper.retrieveContentFromColdStorage(session, doc.getRef(), numberOfDaysOfAvailability);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18323496bfd2be3784897f68816d196a76874462"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2MDEzOQ==", "bodyText": "I don't see why you would filter on anything, it's not this query's job to decide where coldstorage can be used. You should do SELECT * FROM Document, Relation WHERE coldstorage:beingRetrieved = 1 and that's it. The presence of the index on coldstorage:beingRetrieved will make sure this is fast anyway.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377060139", "createdAt": "2020-02-10T13:26:46Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -48,6 +54,12 @@\n \n     public static final String COLD_STORAGE_BEING_RETRIEVED_PROPERTY = \"coldstorage:beingRetrieved\";\n \n+    public static final String GET_DOCUMENTS_TO_CHECK_QUERY = String.format(\n+            \"SELECT * FROM Document WHERE %s = 1 and %s = 0\", COLD_STORAGE_BEING_RETRIEVED_PROPERTY,\n+            NXQL.ECM_ISTRASHED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0MDkyMA=="}, "originalCommit": {"oid": "aa516a7728bc3b0ff6adf1b73cbe788845a41f8e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2MTY3Ng==", "bodyText": "Not what would be the point of storing numberOfDaysOfAvailability or the effective end date, because we don't know it exactly (it's advisory to S3, and we don't know precisely the timezone mechanics used (or they could change)). What usage would there be for it?\nThere will be a blob status query to check restore / availability that will return this info from S3 anyway.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377061676", "createdAt": "2020-02-10T13:29:32Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -117,6 +129,86 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage contents are available for download.\n+     *\n+     * @implSpec: Queries all documents with a cold storage content which are being retrieved, meaning\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY} is {@code true}, and it checks if it is available for\n+     *            download. In which case its fires a {@value COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME} event.\n+     * @see #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)\n+     */\n+    // TODO once the cold storage content is available for download (wait for XP-28417 to be done), we should store the\n+    // retrieved numberOfDaysOfAvailability in cold storage schema", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b2705b4153de9be173a24a03de90f7fc010c51"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2Mjg5NA==", "bodyText": "Why is there content in the name of this method? It's not in the other method, and I don't think it brings anything.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377062894", "createdAt": "2020-02-10T13:31:56Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -117,6 +129,86 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage contents are available for download.\n+     *\n+     * @implSpec: Queries all documents with a cold storage content which are being retrieved, meaning\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY} is {@code true}, and it checks if it is available for\n+     *            download. In which case its fires a {@value COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME} event.\n+     * @see #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)\n+     */\n+    // TODO once the cold storage content is available for download (wait for XP-28417 to be done), we should store the\n+    // retrieved numberOfDaysOfAvailability in cold storage schema\n+    public static ColdStorageContentStatus checkColdStorageContentAvailability(CoreSession session) {\n+        log.debug(\"Start checking the available cold storage content for repository: {}\", session::getRepositoryName);\n+\n+        // as the volume of result will be small, we don't use BAF\n+        DocumentModelList documents = session.query(GET_DOCUMENTS_TO_CHECK_QUERY);\n+\n+        // for every available content we will fire an event\n+        int beingRetrieved = documents.size();\n+        int available = 0;\n+        EventService eventService = Framework.getService(EventService.class);\n+        for (DocumentModel doc : documents) {\n+            if (isColdStorageContentAvailable(doc)) {\n+                available++;\n+                beingRetrieved--;\n+                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+                Event event = ctx.newEvent(COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME);\n+                eventService.fireEvent(event);\n+            }\n+        }\n+\n+        log.debug(\n+                \"End checking the available cold storage content for repository: {}, beingRetrieved: {}, available: {}\",\n+                session.getRepositoryName(), beingRetrieved, available);\n+\n+        return new ColdStorageContentStatus(session.getRepositoryName(), beingRetrieved, available);\n+    }\n+\n+    /**\n+     * Checks if the retrieved cold storage content associated with the given document is available for download.\n+     * \n+     * @see #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)\n+     * @see #checkColdStorageContentAvailability(CoreSession)\n+     */\n+    public static boolean isColdStorageContentAvailable(DocumentModel documentModel) {\n+        // FIXME to be reworked depending on how we will check the availability on low level\n+        return documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) != null\n+                && documentModel.hasFacet(FacetNames.COLD_STORAGE);\n+    }\n+\n+    /**\n+     * Status about the cold storage content being retrieved or available for a given repository.\n+     */\n+    public static class ColdStorageContentStatus {\n+\n+        protected final String repositoryName;\n+\n+        protected final int totalBeingRetrieved;\n+\n+        protected final int totalContentAvailable;\n+\n+        public ColdStorageContentStatus(final String repositoryName, final int totalBeingRetrieved,\n+                final int totalContentAvailable) {\n+            this.repositoryName = repositoryName;\n+            this.totalBeingRetrieved = totalBeingRetrieved;\n+            this.totalContentAvailable = totalContentAvailable;\n+        }\n+\n+        public String getRepositoryName() {\n+            return repositoryName;\n+        }\n+\n+        public int getTotalBeingRetrieved() {\n+            return totalBeingRetrieved;\n+        }\n+\n+        public int getTotalContentAvailable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b2705b4153de9be173a24a03de90f7fc010c51"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2MzE5NQ==", "bodyText": "Remove final on parameters, it's not our code style.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377063195", "createdAt": "2020-02-10T13:32:31Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -117,6 +129,86 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage contents are available for download.\n+     *\n+     * @implSpec: Queries all documents with a cold storage content which are being retrieved, meaning\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY} is {@code true}, and it checks if it is available for\n+     *            download. In which case its fires a {@value COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME} event.\n+     * @see #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)\n+     */\n+    // TODO once the cold storage content is available for download (wait for XP-28417 to be done), we should store the\n+    // retrieved numberOfDaysOfAvailability in cold storage schema\n+    public static ColdStorageContentStatus checkColdStorageContentAvailability(CoreSession session) {\n+        log.debug(\"Start checking the available cold storage content for repository: {}\", session::getRepositoryName);\n+\n+        // as the volume of result will be small, we don't use BAF\n+        DocumentModelList documents = session.query(GET_DOCUMENTS_TO_CHECK_QUERY);\n+\n+        // for every available content we will fire an event\n+        int beingRetrieved = documents.size();\n+        int available = 0;\n+        EventService eventService = Framework.getService(EventService.class);\n+        for (DocumentModel doc : documents) {\n+            if (isColdStorageContentAvailable(doc)) {\n+                available++;\n+                beingRetrieved--;\n+                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+                Event event = ctx.newEvent(COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME);\n+                eventService.fireEvent(event);\n+            }\n+        }\n+\n+        log.debug(\n+                \"End checking the available cold storage content for repository: {}, beingRetrieved: {}, available: {}\",\n+                session.getRepositoryName(), beingRetrieved, available);\n+\n+        return new ColdStorageContentStatus(session.getRepositoryName(), beingRetrieved, available);\n+    }\n+\n+    /**\n+     * Checks if the retrieved cold storage content associated with the given document is available for download.\n+     * \n+     * @see #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)\n+     * @see #checkColdStorageContentAvailability(CoreSession)\n+     */\n+    public static boolean isColdStorageContentAvailable(DocumentModel documentModel) {\n+        // FIXME to be reworked depending on how we will check the availability on low level\n+        return documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) != null\n+                && documentModel.hasFacet(FacetNames.COLD_STORAGE);\n+    }\n+\n+    /**\n+     * Status about the cold storage content being retrieved or available for a given repository.\n+     */\n+    public static class ColdStorageContentStatus {\n+\n+        protected final String repositoryName;\n+\n+        protected final int totalBeingRetrieved;\n+\n+        protected final int totalContentAvailable;\n+\n+        public ColdStorageContentStatus(final String repositoryName, final int totalBeingRetrieved,\n+                final int totalContentAvailable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b2705b4153de9be173a24a03de90f7fc010c51"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2MzQzNg==", "bodyText": "There's no point in this, the caller should have this information.", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377063436", "createdAt": "2020-02-10T13:33:02Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -117,6 +129,86 @@ public static DocumentModel retrieveContentFromColdStorage(CoreSession session,\n         return session.saveDocument(documentModel);\n     }\n \n+    /**\n+     * Checks if the retrieved cold storage contents are available for download.\n+     *\n+     * @implSpec: Queries all documents with a cold storage content which are being retrieved, meaning\n+     *            {@value COLD_STORAGE_BEING_RETRIEVED_PROPERTY} is {@code true}, and it checks if it is available for\n+     *            download. In which case its fires a {@value COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME} event.\n+     * @see #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)\n+     */\n+    // TODO once the cold storage content is available for download (wait for XP-28417 to be done), we should store the\n+    // retrieved numberOfDaysOfAvailability in cold storage schema\n+    public static ColdStorageContentStatus checkColdStorageContentAvailability(CoreSession session) {\n+        log.debug(\"Start checking the available cold storage content for repository: {}\", session::getRepositoryName);\n+\n+        // as the volume of result will be small, we don't use BAF\n+        DocumentModelList documents = session.query(GET_DOCUMENTS_TO_CHECK_QUERY);\n+\n+        // for every available content we will fire an event\n+        int beingRetrieved = documents.size();\n+        int available = 0;\n+        EventService eventService = Framework.getService(EventService.class);\n+        for (DocumentModel doc : documents) {\n+            if (isColdStorageContentAvailable(doc)) {\n+                available++;\n+                beingRetrieved--;\n+                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+                Event event = ctx.newEvent(COLD_STORAGE_CONTENT_AVAILABLE_EVENT_NAME);\n+                eventService.fireEvent(event);\n+            }\n+        }\n+\n+        log.debug(\n+                \"End checking the available cold storage content for repository: {}, beingRetrieved: {}, available: {}\",\n+                session.getRepositoryName(), beingRetrieved, available);\n+\n+        return new ColdStorageContentStatus(session.getRepositoryName(), beingRetrieved, available);\n+    }\n+\n+    /**\n+     * Checks if the retrieved cold storage content associated with the given document is available for download.\n+     * \n+     * @see #retrieveContentFromColdStorage(CoreSession, DocumentRef, int)\n+     * @see #checkColdStorageContentAvailability(CoreSession)\n+     */\n+    public static boolean isColdStorageContentAvailable(DocumentModel documentModel) {\n+        // FIXME to be reworked depending on how we will check the availability on low level\n+        return documentModel.getPropertyValue(COLD_STORAGE_CONTENT_PROPERTY) != null\n+                && documentModel.hasFacet(FacetNames.COLD_STORAGE);\n+    }\n+\n+    /**\n+     * Status about the cold storage content being retrieved or available for a given repository.\n+     */\n+    public static class ColdStorageContentStatus {\n+\n+        protected final String repositoryName;\n+\n+        protected final int totalBeingRetrieved;\n+\n+        protected final int totalContentAvailable;\n+\n+        public ColdStorageContentStatus(final String repositoryName, final int totalBeingRetrieved,\n+                final int totalContentAvailable) {\n+            this.repositoryName = repositoryName;\n+            this.totalBeingRetrieved = totalBeingRetrieved;\n+            this.totalContentAvailable = totalContentAvailable;\n+        }\n+\n+        public String getRepositoryName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b2705b4153de9be173a24a03de90f7fc010c51"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2NDI0OA==", "bodyText": "every hour at the 7th minute", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377064248", "createdAt": "2020-02-10T13:34:35Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/resources/OSGI-INF/coldstorage-contrib.xml", "diffHunk": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.coldstorage.contrib\">\n+\n+  <extension target=\"org.nuxeo.ecm.core.scheduler.SchedulerService\" point=\"schedule\">\n+    <schedule id=\"checkAvailabilityOfBlobsBeingRetrieved\">\n+      <!-- every hour and 7 minutes -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b2705b4153de9be173a24a03de90f7fc010c51"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2NTEzOA==", "bodyText": "That's not our XML indent style (for better or worse)", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377065138", "createdAt": "2020-02-10T13:36:20Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/resources/OSGI-INF/coldstorage-contrib.xml", "diffHunk": "@@ -16,4 +16,21 @@\n     </listener>\n   </extension>\n \n+  <extension\n+    target=\"org.nuxeo.ecm.platform.ec.notification.service.NotificationService\"\n+    point=\"notifications\">\n+    <notification name=\"ColdStorageContentAvailable\" channel=\"email\" availableIn=\"*\"\n+                  subject=\"Archive content available on '${docTitle}'\"\n+                  template=\"coldStorageContentAvailable\"\n+                  label=\"label.document.download\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973f4810bf14e89c5dddf7b41335d270c139df8c"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "973f4810bf14e89c5dddf7b41335d270c139df8c", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/973f4810bf14e89c5dddf7b41335d270c139df8c", "committedDate": "2020-02-06T12:41:04Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "0a7cccb76bee819b7ed702a74cb552960b8c6d59", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0a7cccb76bee819b7ed702a74cb552960b8c6d59", "committedDate": "2020-02-10T16:44:08Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDUwNzQy", "url": "https://github.com/nuxeo/nuxeo/pull/3666#pullrequestreview-356450742", "createdAt": "2020-02-11T07:24:19Z", "commit": {"oid": "0a7cccb76bee819b7ed702a74cb552960b8c6d59"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzoyNDoyMFrOFn_K5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzoyNDoyMFrOFn_K5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3Mzc2NA==", "bodyText": "So, finally, don't we want to use refresh instead of session.getDocument?", "url": "https://github.com/nuxeo/nuxeo/pull/3666#discussion_r377473764", "createdAt": "2020-02-11T07:24:20Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.core;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_FORBIDDEN;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.ecm.core.blob.ColdStorageHelper;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.core.event.test.CapturingEventListener;\n+import org.nuxeo.ecm.core.schema.FacetNames;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+public class TestColdStorage {\n+\n+    protected static final String FILE_CONTENT = \"foo\";\n+\n+    protected static final int NUMBER_OF_DAYS_OF_AVAILABILITY = 5;\n+\n+    protected static final String DEFAULT_DOC_NAME = \"anyFile\";\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected TransactionalFeature transactionalFeature;\n+\n+    @Test\n+    public void shouldMoveBlobDocumentToColdStorage() throws IOException {\n+        DocumentModel documentModel = createDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move the blob to cold storage\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+        transactionalFeature.nextTransaction();\n+        documentModel = session.getDocument(documentModel.getRef());\n+\n+        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n+\n+        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+\n+        // check if the `coldstorage:coldContent` contains the original file content\n+        checkBlobContent(documentModel, ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY, FILE_CONTENT);\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingDocumentBlobAlreadyInColdStorage() {\n+        DocumentModel documentModel = createDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move for the first time\n+        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // try to make another move\n+        try {\n+            ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+            fail(\"Should fail because the content is already in cold storage\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_CONFLICT, ne.getStatusCode());\n+            assertEquals(String.format(\"The main content for document: %s is already in cold storage.\", documentModel),\n+                    ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldFailWhenMovingToColdStorageDocumentWithoutContent() {\n+        DocumentModel documentModel = createDocument(DEFAULT_DOC_NAME, false);\n+        try {\n+            ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+            fail(\"Should fail because there is no main content associated with the document\");\n+        } catch (NuxeoException ne) {\n+            assertEquals(SC_NOT_FOUND, ne.getStatusCode());\n+            assertEquals(String.format(\"There is no main content for document: %s.\", documentModel), ne.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldRetrieveDocumentBlobFromColdStorage() {\n+        DocumentModel documentModel = createDocument(DEFAULT_DOC_NAME, true);\n+\n+        // move the blob to cold storage\n+        ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n+\n+        // retrieve, which means initiate a request to restore the blob from cold storage\n+        documentModel = ColdStorageHelper.retrieveContentFromColdStorage(session, documentModel.getRef(),\n+                NUMBER_OF_DAYS_OF_AVAILABILITY);\n+        transactionalFeature.nextTransaction();\n+        documentModel = session.getDocument(documentModel.getRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7cccb76bee819b7ed702a74cb552960b8c6d59"}, "originalPosition": 133}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a7cccb76bee819b7ed702a74cb552960b8c6d59", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0a7cccb76bee819b7ed702a74cb552960b8c6d59", "committedDate": "2020-02-10T16:44:08Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "1234456bbef19d1d81e2785f4370377d1faed226", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1234456bbef19d1d81e2785f4370377d1faed226", "committedDate": "2020-02-11T08:39:59Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1234456bbef19d1d81e2785f4370377d1faed226", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1234456bbef19d1d81e2785f4370377d1faed226", "committedDate": "2020-02-11T08:39:59Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "76a66666604c6bd813d835e1f11a42719c922874", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/76a66666604c6bd813d835e1f11a42719c922874", "committedDate": "2020-02-11T14:13:43Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76a66666604c6bd813d835e1f11a42719c922874", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/76a66666604c6bd813d835e1f11a42719c922874", "committedDate": "2020-02-11T14:13:43Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "2c19e9955d64f190701e3e2e0a4509b19c9ba11e", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2c19e9955d64f190701e3e2e0a4509b19c9ba11e", "committedDate": "2020-02-11T17:27:55Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c19e9955d64f190701e3e2e0a4509b19c9ba11e", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2c19e9955d64f190701e3e2e0a4509b19c9ba11e", "committedDate": "2020-02-11T17:27:55Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "ea69ed9fe142fce13c9df4dc442a6b75671b23fa", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ea69ed9fe142fce13c9df4dc442a6b75671b23fa", "committedDate": "2020-02-11T17:37:25Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea69ed9fe142fce13c9df4dc442a6b75671b23fa", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ea69ed9fe142fce13c9df4dc442a6b75671b23fa", "committedDate": "2020-02-11T17:37:25Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "0e7d93917e227514e5b9e28357512e55b406aeb7", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0e7d93917e227514e5b9e28357512e55b406aeb7", "committedDate": "2020-02-11T18:14:40Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e7d93917e227514e5b9e28357512e55b406aeb7", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0e7d93917e227514e5b9e28357512e55b406aeb7", "committedDate": "2020-02-11T18:14:40Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "26dfaa4fad21549dae919315b2b439e536c7ff1c", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/26dfaa4fad21549dae919315b2b439e536c7ff1c", "committedDate": "2020-02-12T10:53:56Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26dfaa4fad21549dae919315b2b439e536c7ff1c", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/26dfaa4fad21549dae919315b2b439e536c7ff1c", "committedDate": "2020-02-12T10:53:56Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "22e185fe4284efb714c9d069a463d55b43bdcb36", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/22e185fe4284efb714c9d069a463d55b43bdcb36", "committedDate": "2020-02-12T10:54:59Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22e185fe4284efb714c9d069a463d55b43bdcb36", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/22e185fe4284efb714c9d069a463d55b43bdcb36", "committedDate": "2020-02-12T10:54:59Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "abe7383e379cf0a884ab40234f32469a64c09708", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/abe7383e379cf0a884ab40234f32469a64c09708", "committedDate": "2020-02-12T15:01:16Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abe7383e379cf0a884ab40234f32469a64c09708", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/abe7383e379cf0a884ab40234f32469a64c09708", "committedDate": "2020-02-12T15:01:16Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}, "afterCommit": {"oid": "add93de8af35168cd8f3fabaf071038d7db44891", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/add93de8af35168cd8f3fabaf071038d7db44891", "committedDate": "2020-02-12T16:45:52Z", "message": "NXP-28429: Add a listener to send  mail when cold storage content becomes available"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4878, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}