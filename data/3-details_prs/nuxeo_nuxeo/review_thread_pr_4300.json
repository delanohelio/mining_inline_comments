{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5NTc1NTEw", "number": 4300, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyNzoxM1rOEgXO3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDo1MDoyOFrOEhtfdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzcwNTI1OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyNzoxM1rOHNLmRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyNzoxM1rOHNLmRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MzU1OQ==", "bodyText": "the total number of elements produced by the external scroller", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r483583559", "createdAt": "2020-09-04T12:27:13Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkService.java", "diffHunk": "@@ -80,4 +81,23 @@\n      */\n     List<BulkStatus> getStatuses(String username);\n \n+    /**\n+     * Sends a {@link BulkBucket} to the right bulk action.\n+     * <p/>\n+     * This method is useful to produce bucket externally when using an external scroller.\n+     *\n+     * @param bucket the bucket to send to a bulk action\n+     * @since 11.3\n+     */\n+    void appendExternalBucket(BulkBucket bucket);\n+\n+    /**\n+     * Completes a running bulk computation having an external scroller.\n+     *\n+     * @param commandId the command id\n+     * @param count the number of elements produced by the scroller", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926ab4d37cb15f81a29be8beef264be8587d49eb"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzcyMjI4OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjozMjo1M1rOHNLwnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjozMjo1M1rOHNLwnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NjIwNA==", "bodyText": "here we want to load balance processing so better commandId:counter counter can be a global atomic long", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r483586204", "createdAt": "2020-09-04T12:32:53Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -328,4 +332,36 @@ public boolean await(Duration duration) throws InterruptedException {\n                  .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public void appendExternalBucket(BulkBucket bucket) {\n+        String commandId = bucket.getCommandId();\n+\n+        BulkCommand command = getCommand(commandId);\n+        String stream = Framework.getService(BulkAdminService.class).getInputStream(command.getAction());\n+\n+        String key = commandId; // TODO do we keep a bucket number in the K/V to build this key?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926ab4d37cb15f81a29be8beef264be8587d49eb"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjc0MjM5OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoxODozMVrOHPArlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoxODozMVrOHPArlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMTg0NQ==", "bodyText": "protected is enough", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485501845", "createdAt": "2020-09-09T10:18:31Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -95,6 +98,9 @@\n     // How long we keep the command and its status in the kv store once aborted\n     public static final long ABORTED_TTL_SECONDS = 7_200;\n \n+    // @since 11.3\n+    public static final AtomicLong EXTERNAL_SCROLLER_COUNTER = new AtomicLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9db914c77f63a669ab79a49a9224b850107a1383"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjc1Nzc4OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyMjo1OFrOHPA07w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyMjo1OFrOHPA07w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNDIzOQ==", "bodyText": "maybe easier to understand with a dedicated check like if(command.useExternalScroller()) {return;}", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485504239", "createdAt": "2020-09-09T10:22:58Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -162,9 +168,11 @@ protected void checkIfScrollerExists(BulkCommand command) {\n                     GenericScrollRequest.builder(command.getScroller(), command.getQuery()).build())) {\n                 throw new IllegalArgumentException(\"Unknown Generic Scroller for command: \" + command);\n             }\n-        } else if (!scrollService.exists(\n-                DocumentScrollRequest.builder(command.getQuery()).name(command.getScroller()).build())) {\n-            throw new IllegalArgumentException(\"Unknown Document Scroller for command: \" + command);\n+        } else if (!command.useExternalScroller()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9db914c77f63a669ab79a49a9224b850107a1383"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjc4MzEyOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDozMDoyNFrOHPBEOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzozOTo1MlrOHPH1_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwODE1Mw==", "bodyText": "This means a KV store roundtrip for each bucket to get the action name which is a potential perf problem.\nA possible solution is to have a very basic cache on getCommand (just keep the last entry),\nor to provide a different method signature appendExternalBucket(String action, BulkBucket bucket), because the scroller should have the knowledge of the action.", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485508153", "createdAt": "2020-09-09T10:30:24Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -328,4 +329,30 @@ public boolean await(Duration duration) throws InterruptedException {\n                  .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public void appendExternalBucket(BulkBucket bucket) {\n+        String commandId = bucket.getCommandId();\n+\n+        BulkCommand command = getCommand(commandId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9db914c77f63a669ab79a49a9224b850107a1383"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxOTE5Ng==", "bodyText": "I chose to use a PassiveExpiringMap with a TTL of 1 minute because, in the context of the 10B benchmark, we may have two commands at the same time, one for each repository.", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485619196", "createdAt": "2020-09-09T13:39:52Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -328,4 +329,30 @@ public boolean await(Duration duration) throws InterruptedException {\n                  .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public void appendExternalBucket(BulkBucket bucket) {\n+        String commandId = bucket.getCommandId();\n+\n+        BulkCommand command = getCommand(commandId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwODE1Mw=="}, "originalCommit": {"oid": "9db914c77f63a669ab79a49a9224b850107a1383"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjc5MDI3OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDozMjozOVrOHPBIlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDozMjozOVrOHPBIlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwOTI2OA==", "bodyText": "the total count is interesting information to trace", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485509268", "createdAt": "2020-09-09T10:32:39Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -328,4 +329,30 @@ public boolean await(Duration duration) throws InterruptedException {\n                  .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public void appendExternalBucket(BulkBucket bucket) {\n+        String commandId = bucket.getCommandId();\n+\n+        BulkCommand command = getCommand(commandId);\n+        String stream = Framework.getService(BulkAdminService.class).getInputStream(command.getAction());\n+\n+        String key = commandId + \":\" + EXTERNAL_SCROLLER_COUNTER.incrementAndGet();\n+        Record record = Record.of(key, BulkCodecs.getBucketCodec().encode(bucket));\n+\n+        log.debug(\"Append key: {}, record: {}\", key, record);\n+        Framework.getService(StreamService.class).getStreamManager().append(stream, record);\n+    }\n+\n+    @Override\n+    public void completeExternalScroll(String commandId, long count) {\n+        BulkStatus delta = BulkStatus.deltaOf(commandId);\n+        delta.setState(RUNNING);\n+        delta.setScrollEndTime(Instant.now());\n+        delta.setTotal(count);\n+\n+        Record record = Record.of(commandId, BulkCodecs.getStatusCodec().encode(delta));\n+\n+        log.debug(\"Complete external scroll with key: {}, record: {}\", commandId, record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9db914c77f63a669ab79a49a9224b850107a1383"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjgxMDI1OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDozODozNVrOHPBUgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzowMDoyMlrOHPGJpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMjMyMA==", "bodyText": "we need to rename nxqlQuery into query, but I don't see how the total number of elements for an external scroller is implemented", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485512320", "createdAt": "2020-09-09T10:38:35Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java", "diffHunk": "@@ -188,7 +204,8 @@ public void setScroller(String scrollerName) {\n          *\n          * @param action the registered bulk action name\n          * @param nxqlQuery by default an NXQL query that represents the document set to apply the action. When using a\n-         *            generic scroller the query syntax is a convention with the scroller implementation.\n+         *            generic scroller the query syntax is a convention with the scroller implementation. When using an\n+         *            external scroller the field is the total number of elements if known.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9db914c77f63a669ab79a49a9224b850107a1383"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU5MTQ2Mw==", "bodyText": "It is not currently, and I will remove this part from the comment as the count is not known at the beginning of our scroller.", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485591463", "createdAt": "2020-09-09T13:00:22Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java", "diffHunk": "@@ -188,7 +204,8 @@ public void setScroller(String scrollerName) {\n          *\n          * @param action the registered bulk action name\n          * @param nxqlQuery by default an NXQL query that represents the document set to apply the action. When using a\n-         *            generic scroller the query syntax is a convention with the scroller implementation.\n+         *            generic scroller the query syntax is a convention with the scroller implementation. When using an\n+         *            external scroller the field is the total number of elements if known.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMjMyMA=="}, "originalCommit": {"oid": "9db914c77f63a669ab79a49a9224b850107a1383"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzgwMzgwOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/EmptyScroll.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDo0Mzo0M1rOHPK3jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDo0Mzo0M1rOHPK3jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2ODc1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Execute the scroll on empty result set, useful for external scroller.\n          \n          \n            \n             * Executes the scroll on an empty result set, useful for external scrollers.", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485668750", "createdAt": "2020-09-09T14:43:43Z", "author": {"login": "ataillefer"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/scroll/EmptyScroll.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.core.scroll;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+import org.nuxeo.ecm.core.api.scroll.Scroll;\n+import org.nuxeo.ecm.core.api.scroll.ScrollRequest;\n+\n+/**\n+ * Execute the scroll on empty result set, useful for external scroller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671cb18859aa27e7e20b2a243918150d16a062d8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzgzNjA3OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDo1MDowOVrOHPLLxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDo1MDowOVrOHPLLxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MzkyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // wait the scroller\n          \n          \n            \n                    // wait for the scroller", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485673925", "createdAt": "2020-09-09T14:50:09Z", "author": {"login": "ataillefer"}, "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java", "diffHunk": "@@ -293,6 +296,110 @@ public void testScroller() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Tests the external scroller in the case it completes its scrolling after the processing.\n+     */\n+    @Test\n+    public void testExternalScrollerCompleteAtEnd() {\n+        final int nbDocs = 10;\n+        // create some docs\n+        List<String> docs = new ArrayList<>(nbDocs);\n+        for (int i = 0; i < nbDocs; i++) {\n+            DocumentModel doc = session.createDocumentModel(\"/\", \"doc\" + i, \"File\");\n+            doc = session.createDocument(doc);\n+            docs.add(doc.getId());\n+        }\n+\n+        // prepare and submit the command with an external scroller and submit it\n+        String commandId = service.submit(\n+                new BulkCommand.Builder(SetPropertiesAction.ACTION_NAME, \"ignored\", \"system\").useExternalScroller()\n+                                                                                             .build());\n+        // wait the scroller", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671cb18859aa27e7e20b2a243918150d16a062d8"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzgzNjk4OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDo1MDoxN1rOHPLMWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDo1MDoxN1rOHPLMWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3NDA3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // wait the status\n          \n          \n            \n                    // wait for the status", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485674073", "createdAt": "2020-09-09T14:50:17Z", "author": {"login": "ataillefer"}, "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java", "diffHunk": "@@ -293,6 +296,110 @@ public void testScroller() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Tests the external scroller in the case it completes its scrolling after the processing.\n+     */\n+    @Test\n+    public void testExternalScrollerCompleteAtEnd() {\n+        final int nbDocs = 10;\n+        // create some docs\n+        List<String> docs = new ArrayList<>(nbDocs);\n+        for (int i = 0; i < nbDocs; i++) {\n+            DocumentModel doc = session.createDocumentModel(\"/\", \"doc\" + i, \"File\");\n+            doc = session.createDocument(doc);\n+            docs.add(doc.getId());\n+        }\n+\n+        // prepare and submit the command with an external scroller and submit it\n+        String commandId = service.submit(\n+                new BulkCommand.Builder(SetPropertiesAction.ACTION_NAME, \"ignored\", \"system\").useExternalScroller()\n+                                                                                             .build());\n+        // wait the scroller\n+        await().atMost(ONE_MINUTE).until(() -> service.getStatus(commandId).getState() == SCROLLING_RUNNING);\n+        BulkStatus status = service.getStatus(commandId);\n+        assertEquals(0, status.getTotal());\n+        assertEquals(0, status.getProcessed());\n+        assertFalse(status.hasError());\n+\n+        // now append first bucket\n+        service.appendExternalBucket(new BulkBucket(commandId, docs.subList(0, nbDocs / 2)));\n+        // wait the status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671cb18859aa27e7e20b2a243918150d16a062d8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzgzNzk3OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDo1MDoyOFrOHPLM9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDo1MDoyOFrOHPLM9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3NDIyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // wait the status\n          \n          \n            \n                    // wait for the status", "url": "https://github.com/nuxeo/nuxeo/pull/4300#discussion_r485674228", "createdAt": "2020-09-09T14:50:28Z", "author": {"login": "ataillefer"}, "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/bulk/TestBulkProcessor.java", "diffHunk": "@@ -293,6 +296,110 @@ public void testScroller() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Tests the external scroller in the case it completes its scrolling after the processing.\n+     */\n+    @Test\n+    public void testExternalScrollerCompleteAtEnd() {\n+        final int nbDocs = 10;\n+        // create some docs\n+        List<String> docs = new ArrayList<>(nbDocs);\n+        for (int i = 0; i < nbDocs; i++) {\n+            DocumentModel doc = session.createDocumentModel(\"/\", \"doc\" + i, \"File\");\n+            doc = session.createDocument(doc);\n+            docs.add(doc.getId());\n+        }\n+\n+        // prepare and submit the command with an external scroller and submit it\n+        String commandId = service.submit(\n+                new BulkCommand.Builder(SetPropertiesAction.ACTION_NAME, \"ignored\", \"system\").useExternalScroller()\n+                                                                                             .build());\n+        // wait the scroller\n+        await().atMost(ONE_MINUTE).until(() -> service.getStatus(commandId).getState() == SCROLLING_RUNNING);\n+        BulkStatus status = service.getStatus(commandId);\n+        assertEquals(0, status.getTotal());\n+        assertEquals(0, status.getProcessed());\n+        assertFalse(status.hasError());\n+\n+        // now append first bucket\n+        service.appendExternalBucket(new BulkBucket(commandId, docs.subList(0, nbDocs / 2)));\n+        // wait the status\n+        await().atMost(ONE_MINUTE) .until(() -> service.getStatus(commandId).getProcessed() == nbDocs / 2);\n+        status = service.getStatus(commandId);\n+        assertEquals(SCROLLING_RUNNING, status.getState());\n+        assertEquals(0, status.getTotal());\n+        assertFalse(status.hasError());\n+\n+        // now append second bucket\n+        service.appendExternalBucket(new BulkBucket(commandId, docs.subList(nbDocs / 2, nbDocs)));\n+        // wait the status\n+        await().atMost(ONE_MINUTE).until(() -> service.getStatus(commandId).getProcessed() == nbDocs);\n+        status = service.getStatus(commandId);\n+        assertEquals(SCROLLING_RUNNING, status.getState());\n+        assertEquals(0, status.getTotal());\n+        assertFalse(status.hasError());\n+\n+        service.completeExternalScroll(commandId, nbDocs);\n+        // wait the status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "671cb18859aa27e7e20b2a243918150d16a062d8"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4380, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}