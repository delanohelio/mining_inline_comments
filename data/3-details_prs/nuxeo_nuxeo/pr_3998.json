{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTA4Njc5", "number": 3998, "title": "fix-NXP-28964-annotation-on-version", "bodyText": "The fix (currently not done) came with a rework of comment tests in order to better control the needed external API deprecation.\nThe long short story is all tests corresponding to desired behavior are moved to the abstract test class. Then the implementation test class overrides the tests not supported by the implementation. To conclude, the supported implementation test class has tests representing functional behavior that only it implements, such as auto subscription on notifications or comments related fulltext.\nThis will allow me to correctly move tests to new external API.\nT&P: https://qa.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-kleturc/711", "createdAt": "2020-05-04T12:01:13Z", "url": "https://github.com/nuxeo/nuxeo/pull/3998", "merged": true, "mergeCommit": {"oid": "f65f044d73bfc9b7426d38457107e8b4619af6d5"}, "closed": true, "closedAt": "2020-06-09T09:15:37Z", "author": {"login": "kevinleturc"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceBNBGAFqTQwNTA5NjUyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpQRvRAFqTQyNjIyMDk2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDk2NTI0", "url": "https://github.com/nuxeo/nuxeo/pull/3998#pullrequestreview-405096524", "createdAt": "2020-05-04T15:27:56Z", "commit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyNzo1NlrOGQFl6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyNzo1NlrOGQFl6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ==", "bodyText": "I am wondering if we should add the author and text to toString method in the case where we log a sensitive data I mean. what each person says :)", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419522025", "createdAt": "2020-05-04T15:27:56Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "diffHunk": "@@ -270,6 +270,9 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return new ToStringBuilder(this).append(\"id\", getId()).toString();\n+        return new ToStringBuilder(this).append(\"id\", getId())\n+                                        .append(\"author\", getAuthor())\n+                                        .append(\"text\", getText())\n+                                        .toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTI0Mzg3", "url": "https://github.com/nuxeo/nuxeo/pull/3998#pullrequestreview-405124387", "createdAt": "2020-05-04T15:58:53Z", "commit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1ODo1M1rOGQG72g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1ODo1M1rOGQG72g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NDAyNg==", "bodyText": "I am wondering in the case of migrating the comment from property to tree as the same implementation has the COMMENT_PARENT_ID_PROPERTY. perhaps we replace it by:\n    @Override\n    public Comment updateComment(CoreSession session, String commentId, Comment comment)\n            throws CommentNotFoundException, CommentSecurityException {\n        DocumentRef commentRef = new IdRef(commentId);\n        return execute(session, commentRef, cm -> cm.updateComment(session, commentId, comment));\n    }\n\nwdyt and I did the change on my local machine it compile... :) but i didn't run the test", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419544026", "createdAt": "2020-05-04T15:58:53Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -160,28 +168,34 @@ public Comment getComment(CoreSession session, String commentId)\n     public Comment updateComment(CoreSession session, String commentId, Comment comment)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            return second.updateComment(session, commentId, comment);\n-        } else {\n-            return first.updateComment(session, commentId, comment);\n-        }\n+        return CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                return second.updateComment(session, commentId, comment);\n+            } else {\n+                return first.updateComment(session, commentId, comment);\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTI2MzM2", "url": "https://github.com/nuxeo/nuxeo/pull/3998#pullrequestreview-405126336", "createdAt": "2020-05-04T16:01:07Z", "commit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjowMTowN1rOGQHB3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjowMTowN1rOGQHB3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0NTU2NA==", "bodyText": "same as above where we can replace with:\n @Override\n    public void deleteComment(CoreSession session, String commentId)\n            throws CommentNotFoundException, CommentSecurityException {\n        DocumentRef commentRef = new IdRef(commentId);\n        execute(session, commentRef, cm -> {\n            cm.deleteComment(session, commentId);\n            return true;\n        });\n    }\n\nhere I just wrap the deletion to return a boolean because the execute function param is function Type", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r419545564", "createdAt": "2020-05-04T16:01:07Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -160,28 +168,34 @@ public Comment getComment(CoreSession session, String commentId)\n     public Comment updateComment(CoreSession session, String commentId, Comment comment)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            return second.updateComment(session, commentId, comment);\n-        } else {\n-            return first.updateComment(session, commentId, comment);\n-        }\n+        return CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                return second.updateComment(session, commentId, comment);\n+            } else {\n+                return first.updateComment(session, commentId, comment);\n+            }\n+        });\n     }\n \n     @Override\n     public void deleteComment(CoreSession session, String commentId)\n             throws CommentNotFoundException, CommentSecurityException {\n         DocumentRef commentRef = new IdRef(commentId);\n-        if (!session.exists(commentRef)) {\n-            throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n-        }\n-        if (session.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n-            second.deleteComment(session, commentId);\n-        } else {\n-            first.deleteComment(session, commentId);\n-        }\n+        CoreInstance.doPrivileged(session, s -> {\n+            // retrieve comment to check which service handles it\n+            if (!s.exists(commentRef)) {\n+                throw new CommentNotFoundException(\"The comment \" + commentId + \" does not exist\");\n+            }\n+            if (s.getDocument(commentRef).getPropertyValue(COMMENT_PARENT_ID_PROPERTY) != null) {\n+                second.deleteComment(session, commentId);\n+            } else {\n+                first.deleteComment(session, commentId);\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTI0OTk1", "url": "https://github.com/nuxeo/nuxeo/pull/3998#pullrequestreview-405924995", "createdAt": "2020-05-05T15:53:51Z", "commit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1Mzo1MVrOGQwDSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1ODoyN1rOGQwQ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxNzY3Mg==", "bodyText": "Interesting question... is it more or less secure than logging document titles (DocumentModelImpl#toString implementation)?", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420217672", "createdAt": "2020-05-05T15:53:51Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "diffHunk": "@@ -270,6 +270,9 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return new ToStringBuilder(this).append(\"id\", getId()).toString();\n+        return new ToStringBuilder(this).append(\"id\", getId())\n+                                        .append(\"author\", getAuthor())\n+                                        .append(\"text\", getText())\n+                                        .toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjAyNQ=="}, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDE5Mg==", "bodyText": "Worth adding a @since here?", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420220192", "createdAt": "2020-05-05T15:57:10Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -70,7 +71,7 @@\n \n     private static final Logger log = LogManager.getLogger(AbstractCommentManager.class);\n \n-    protected static final String COMMENTS_DIRECTORY = \"Comments\";\n+    public static final String COMMENTS_DIRECTORY = \"Comments\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMTE2Nw==", "bodyText": "@since?", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420221167", "createdAt": "2020-05-05T15:58:27Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -53,6 +53,14 @@ public BridgeCommentManager(CommentManager first, CommentManager second) {\n         this.second = second;\n     }\n \n+    public CommentManager getFirst() {\n+        return first;\n+    }\n+\n+    public CommentManager getSecond() {\n+        return second;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cab540cfbfda96714078ae8aaa25e537cf5518d7", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cab540cfbfda96714078ae8aaa25e537cf5518d7", "committedDate": "2020-05-04T11:48:02Z", "message": "NXP-28964: Prepare tests for external API deprecation"}, "afterCommit": {"oid": "17225c0cd4590fd59122db13b8a6f76b605c42ce", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/17225c0cd4590fd59122db13b8a6f76b605c42ce", "committedDate": "2020-05-05T17:02:58Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17225c0cd4590fd59122db13b8a6f76b605c42ce", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/17225c0cd4590fd59122db13b8a6f76b605c42ce", "committedDate": "2020-05-05T17:02:58Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}, "afterCommit": {"oid": "708fb0507cf5771b789bda96f049d6cd9882e4f8", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/708fb0507cf5771b789bda96f049d6cd9882e4f8", "committedDate": "2020-05-05T17:05:04Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "708fb0507cf5771b789bda96f049d6cd9882e4f8", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/708fb0507cf5771b789bda96f049d6cd9882e4f8", "committedDate": "2020-05-05T17:05:04Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}, "afterCommit": {"oid": "083fa0ea163d06c44851c7904ce074bd7899ab19", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/083fa0ea163d06c44851c7904ce074bd7899ab19", "committedDate": "2020-05-06T14:06:15Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "083fa0ea163d06c44851c7904ce074bd7899ab19", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/083fa0ea163d06c44851c7904ce074bd7899ab19", "committedDate": "2020-05-06T14:06:15Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}, "afterCommit": {"oid": "ccfd4ee88f67022b60b22945ec762345d6774df9", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ccfd4ee88f67022b60b22945ec762345d6774df9", "committedDate": "2020-05-06T14:56:06Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDIwODg1", "url": "https://github.com/nuxeo/nuxeo/pull/3998#pullrequestreview-406420885", "createdAt": "2020-05-06T08:56:38Z", "commit": {"oid": "708fb0507cf5771b789bda96f049d6cd9882e4f8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo1NjozOVrOGRJ12A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowMzo1NFrOGRaRyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0MDIxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return findFirstCapturedEvent(event).orElseThrow(() -> new AssertionError(\"Unable to find first Event\"));\n          \n          \n            \n                    return findFirstCapturedEvent(event).orElseThrow(() -> new AssertionError(\"Unable to find first Event for event: \" + event));", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420640216", "createdAt": "2020-05-06T08:56:39Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/event/test/CapturingEventListener.java", "diffHunk": "@@ -97,8 +105,165 @@ public CapturingEventListener(String... events) {\n         return streamCapturedEventContexts().filter(clazz::isInstance).map(clazz::cast);\n     }\n \n+    /**\n+     * @since 11.1\n+     */\n+    public Optional<Event> findFirstCapturedEvent() {\n+        return streamCapturedEvents().findFirst();\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    public Event findFirstCapturedEventOrElseThrow() {\n+        return findFirstCapturedEvent().orElseThrow(() -> new AssertionError(\"Unable to find first Event\"));\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    public Optional<Event> findFirstCapturedEvent(String event) {\n+        return streamCapturedEvents(event).findFirst();\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    public Event findFirstCapturedEventOrElseThrow(String event) {\n+        return findFirstCapturedEvent(event).orElseThrow(() -> new AssertionError(\"Unable to find first Event\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708fb0507cf5771b789bda96f049d6cd9882e4f8"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NDAwOQ==", "bodyText": "You could maybe move that just before the if using it?", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420894009", "createdAt": "2020-05-06T15:42:51Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/listener/CheckedInCommentListener.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  \n+ *  Contributors:\n+ *      Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.comment.listener;\n+\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_ANCESTOR_IDS_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_PARENT_ID_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.impl.AbstractCommentManager.COMMENTS_DIRECTORY;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventContext;\n+import org.nuxeo.ecm.core.event.EventListener;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+\n+/**\n+ * Listener that updates {@code comment:parentId} and {@code comment:ancestorIds} on version's comments after the\n+ * check-in event.\n+ *\n+ * @since 11.1\n+ */\n+public class CheckedInCommentListener implements EventListener {\n+\n+    @Override\n+    public void handleEvent(Event event) {\n+        EventContext ctx = event.getContext();\n+        if (ctx instanceof DocumentEventContext) {\n+            DocumentEventContext docCtx = (DocumentEventContext) ctx;\n+            CoreSession session = docCtx.getCoreSession();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccfd4ee88f67022b60b22945ec762345d6774df9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkwOTUxMw==", "bodyText": "Empty line.", "url": "https://github.com/nuxeo/nuxeo/pull/3998#discussion_r420909513", "createdAt": "2020-05-06T16:03:54Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestCommentManagerImpl.java", "diffHunk": "@@ -55,105 +47,223 @@\n @Features(RelationCommentFeature.class)\n public class TestCommentManagerImpl extends AbstractTestCommentManager {\n \n-    public static final String QUERY_COMMENTS_AS_DOCUMENTS = \"SELECT * FROM \" + COMMENT_DOC_TYPE;\n+    public TestCommentManagerImpl() {\n+        super(CommentManagerImpl.class);\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testCreateReply() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testGetCommentPermissions() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testGetReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - ordering not supported\")\n+    public void testGetCommentsOrdering() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - ordering not supported\")\n+    public void testGetCommentsPaginationOrdering() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this test/case - permissions check different\")\n+    public void testGetCommentsWithReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateComment() {\n+        super.testUpdateComment(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateCommentByItsAuthor() {\n+        super.testUpdateCommentByItsAuthor(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateCommentByPowerfulUser() {\n+        super.testUpdateCommentByPowerfulUser(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateCommentWithModificationDate() {\n+        super.testUpdateCommentWithModificationDate(); // if implemented one day\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this test/case - permissions check different\")\n+    public void testUpdateReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testDeleteCommentByItsAuthor() {\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - permissions check different\")\n+    public void testDeleteReply() {\n+        // mainly due to testCreateReply not supported\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testGetExternalComment() {\n+        super.testGetExternalComment(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testGetExternalCommentPermissions() {\n+        super.testGetExternalCommentPermissions(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateExternalComment() {\n+        super.testUpdateExternalComment(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateExternalCommentByItsAuthor() {\n+        super.testUpdateExternalCommentByItsAuthor(); // if implemented one day\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testUpdateExternalCommentByPowerfulUser() {\n+        super.testUpdateExternalCommentByPowerfulUser(); // if implemented one day\n+    }\n \n-    public static final String USERNAME = \"Foo\";\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testDeleteExternalComment() {\n+        super.testDeleteExternalComment(); // if implemented one day\n+    }\n \n-    public static final String COMMENT_CONTENT = \"This is my comment\";\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testDeleteExternalCommentByItsAuthor() {\n+        super.testDeleteExternalCommentByItsAuthor(); // if implemented one day\n+    }\n \n-    @Inject\n-    protected CoreFeature coreFeature;\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testDeleteExternalCommentByPowerfulUser() {\n+        super.testDeleteExternalCommentByPowerfulUser(); // if implemented one day\n+    }\n \n-    @Inject\n-    protected UserManager userManager;\n+    @Test(expected = UnsupportedOperationException.class)\n+    @Override\n+    public void testExternalCommentOnVersion() {\n+        super.testExternalCommentOnVersion(); // if implemented one day\n+    }\n+\n+    @Test\n+    @Override\n+    @Ignore(\"CommentManagerImpl doesn't support this case - deprecated implementation\")\n+    public void testCommentsAncestorIds() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccfd4ee88f67022b60b22945ec762345d6774df9"}, "originalPosition": 186}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccfd4ee88f67022b60b22945ec762345d6774df9", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ccfd4ee88f67022b60b22945ec762345d6774df9", "committedDate": "2020-05-06T14:56:06Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}, "afterCommit": {"oid": "ed00df92a3f6dc29e903548ec62110657207484b", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ed00df92a3f6dc29e903548ec62110657207484b", "committedDate": "2020-05-06T17:04:30Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjUxNDc3", "url": "https://github.com/nuxeo/nuxeo/pull/3998#pullrequestreview-407251477", "createdAt": "2020-05-07T08:23:00Z", "commit": {"oid": "ed00df92a3f6dc29e903548ec62110657207484b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed00df92a3f6dc29e903548ec62110657207484b", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ed00df92a3f6dc29e903548ec62110657207484b", "committedDate": "2020-05-06T17:04:30Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}, "afterCommit": {"oid": "00101368a68e018d1212649e316b3e3e82e5784e", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/00101368a68e018d1212649e316b3e3e82e5784e", "committedDate": "2020-05-15T08:24:18Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1Mjg3MDYz", "url": "https://github.com/nuxeo/nuxeo/pull/3998#pullrequestreview-415287063", "createdAt": "2020-05-20T12:36:31Z", "commit": {"oid": "00101368a68e018d1212649e316b3e3e82e5784e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzMzNTIw", "url": "https://github.com/nuxeo/nuxeo/pull/3998#pullrequestreview-423733520", "createdAt": "2020-06-03T16:33:00Z", "commit": {"oid": "00101368a68e018d1212649e316b3e3e82e5784e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbe72176439fff9943fdfb2cb1a7dbfb72ce3166", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/fbe72176439fff9943fdfb2cb1a7dbfb72ce3166", "committedDate": "2020-06-08T08:46:58Z", "message": "NXP-28964: Cleanup / Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc12163b34cf7e8f1d45f1093a3f442579bd992", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ccc12163b34cf7e8f1d45f1093a3f442579bd992", "committedDate": "2020-06-08T08:47:01Z", "message": "NXP-28964: Improve CapturingEventListener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "061c91a2e08c11b62112ad0c010b5e6373f5a35a", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/061c91a2e08c11b62112ad0c010b5e6373f5a35a", "committedDate": "2020-06-08T08:47:01Z", "message": "NXP-28964: Make possible to clear mails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd47498b221b9a352883539dee8babc2a171a68f", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/dd47498b221b9a352883539dee8babc2a171a68f", "committedDate": "2020-06-08T08:51:06Z", "message": "NXP-28964: Prepare tests for external API deprecation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08a3f44de77d4adb21ddd0319650fb6fae77d00d", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/08a3f44de77d4adb21ddd0319650fb6fae77d00d", "committedDate": "2020-06-08T08:51:07Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00101368a68e018d1212649e316b3e3e82e5784e", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/00101368a68e018d1212649e316b3e3e82e5784e", "committedDate": "2020-05-15T08:24:18Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}, "afterCommit": {"oid": "08a3f44de77d4adb21ddd0319650fb6fae77d00d", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/08a3f44de77d4adb21ddd0319650fb6fae77d00d", "committedDate": "2020-06-08T08:51:07Z", "message": "NXP-28964: Handle external comment when they are linked to a version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjIwOTYw", "url": "https://github.com/nuxeo/nuxeo/pull/3998#pullrequestreview-426220960", "createdAt": "2020-06-08T13:14:50Z", "commit": {"oid": "08a3f44de77d4adb21ddd0319650fb6fae77d00d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4793, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}