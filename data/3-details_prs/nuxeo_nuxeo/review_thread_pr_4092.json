{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjgwMDIx", "number": 4092, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNjo1NlrOEBUEug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTo0MTo1MlrOEBaZEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEyOTIyOnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNjo1NlrOGdFjUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNjo1NlrOGdFjUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1Mjg0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"leela\", secondDate));\n          \n          \n            \n                    logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"leela\", firstDate));", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433152848", "createdAt": "2020-06-01T10:16:56Z", "author": {"login": "ataillefer"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java", "diffHunk": "@@ -304,38 +277,13 @@ public void shouldFilterLogEntriesOnMultipleCriteria() throws Exception {\n         ZonedDateTime secondDate = firstDate.plusDays(10);\n \n         List<LogEntry> logEntries = new ArrayList<>();\n-        LogEntry logEntry = auditLogger.newLogEntry();\n-        logEntry.setDocUUID(doc.getRef());\n-        logEntry.setCategory(\"One\");\n-        logEntry.setEventId(\"firstEvent\");\n-        logEntry.setPrincipalName(\"bender\");\n-        logEntry.setEventDate(DateUtils.toDate(firstDate));\n-        logEntries.add(logEntry);\n-        logEntry = auditLogger.newLogEntry();\n-        logEntry.setDocUUID(doc.getRef());\n-        logEntry.setCategory(\"One\");\n-        logEntry.setEventId(\"secondEvent\");\n-        logEntry.setPrincipalName(\"leela\");\n-        logEntry.setEventDate(DateUtils.toDate(firstDate));\n-        logEntries.add(logEntry);\n-        logEntry = auditLogger.newLogEntry();\n-        logEntry.setDocUUID(doc.getRef());\n-        logEntry.setCategory(\"One\");\n-        logEntry.setEventId(\"firstEvent\");\n-        logEntry.setPrincipalName(\"leela\");\n-        logEntry.setEventDate(DateUtils.toDate(secondDate));\n-        logEntries.add(logEntry);\n-        logEntry = auditLogger.newLogEntry();\n-        logEntry.setDocUUID(doc.getRef());\n-        logEntry.setCategory(\"One\");\n-        logEntry.setEventId(\"thirdEvent\");\n-        logEntry.setPrincipalName(\"leela\");\n-        logEntry.setEventDate(DateUtils.toDate(secondDate));\n-        logEntries.add(logEntry);\n+        logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"bender\", firstDate));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"leela\", secondDate));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f0d78d24c2649da49df4d800a4a78bffc9b6ebc"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE0NjQ3OnYy", "diffSide": "LEFT", "path": "modules/platform/nuxeo-platform-query-api/src/main/java/org/nuxeo/ecm/platform/query/api/AbstractPageProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyMzo0OFrOGdFt5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjoxNTo1OFrOGdIajQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NTU1OA==", "bodyText": "Are we sure of the impacts other than related to the PaginableAdapter?", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433155558", "createdAt": "2020-06-01T10:23:48Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-query-api/src/main/java/org/nuxeo/ecm/platform/query/api/AbstractPageProvider.java", "diffHunk": "@@ -355,7 +355,6 @@ public void addQuickFilter(QuickFilter quickFilter) {\n     public void setSortInfos(List<SortInfo> sortInfo) {\n         if (sortInfoChanged(this.sortInfos, sortInfo)) {\n             this.sortInfos = sortInfo;\n-            refresh();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fd9a68fd676f201e30622267a3a3db2e69f9ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5OTc1Nw==", "bodyText": "I asked my self the same question,\nAt the beginning To minimise this impact, I created a new method that use a boolean param, to refresh at demande. But after that some tests fails on my local machine (test where  index = 1). Because the tests was a false positive, as each set of sort reset the index and I had some Page Provider Cache issue...\nTo be honest, the TP passe on default and mongoDB. But perhpas it will impact others things. But I don't know why we call refresh when set the sorter because this method will reset index and do other things.\nTo avoid any breaking changes if any. We can override the setSorter for the AuditPageProvider to avoid refresh only for this provider.", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433199757", "createdAt": "2020-06-01T12:15:58Z", "author": {"login": "RSalem07"}, "path": "modules/platform/nuxeo-platform-query-api/src/main/java/org/nuxeo/ecm/platform/query/api/AbstractPageProvider.java", "diffHunk": "@@ -355,7 +355,6 @@ public void addQuickFilter(QuickFilter quickFilter) {\n     public void setSortInfos(List<SortInfo> sortInfo) {\n         if (sortInfoChanged(this.sortInfos, sortInfo)) {\n             this.sortInfos = sortInfo;\n-            refresh();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NTU1OA=="}, "originalCommit": {"oid": "b9fd9a68fd676f201e30622267a3a3db2e69f9ee"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE1NzgwOnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyODoyMFrOGdF1DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjoyODowNlrOGdIt9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NzM4OQ==", "bodyText": "Is this really useful? If sortBy isn't blank, then sortBy.split(\",\") should always return a non empty array no?", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433157389", "createdAt": "2020-06-01T10:28:20Z", "author": {"login": "ataillefer"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java", "diffHunk": "@@ -114,22 +118,27 @@ protected DocumentModel getSearchDocument() {\n         PageProviderService pps = Framework.getService(PageProviderService.class);\n         Map<String, Serializable> props = new HashMap<>();\n         props.put(CoreQueryDocumentPageProvider.CORE_SESSION_PROPERTY, (Serializable) ctx.getCoreSession());\n-        PageProvider<T> pp = (PageProvider<T>) pps.getPageProvider(\"\", ppDefinition, getSearchDocument(), null,\n-                pageSize, currentPageIndex, props, getParams());\n+        List<SortInfo> sortersInfos = null;\n         if (!StringUtils.isBlank(sortBy)) {\n             String[] sorts = sortBy.split(\",\");\n             String[] orders = null;\n             if (!StringUtils.isBlank(sortOrder)) {\n                 orders = sortOrder.split(\",\");\n             }\n-            // clear potential default sort infos first\n-            pp.setSortInfos(null);\n-            for (int i = 0; i < sorts.length; i++) {\n-                String sort = sorts[i];\n-                boolean sortAscending = orders != null && orders.length > i && \"asc\".equals(orders[i].toLowerCase());\n-                pp.addSortInfo(sort, sortAscending);\n+\n+            if (ArrayUtils.isNotEmpty(sorts)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fd9a68fd676f201e30622267a3a3db2e69f9ee"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMzc1OA==", "bodyText": "Yep, I added the check to avoid passing an empty sorters to underline provide have a look at here From what I saw is if we pass empty array it will consider it as an empty sorter and it will end by not sorting (will not use the default ones).", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433203758", "createdAt": "2020-06-01T12:25:52Z", "author": {"login": "RSalem07"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java", "diffHunk": "@@ -114,22 +118,27 @@ protected DocumentModel getSearchDocument() {\n         PageProviderService pps = Framework.getService(PageProviderService.class);\n         Map<String, Serializable> props = new HashMap<>();\n         props.put(CoreQueryDocumentPageProvider.CORE_SESSION_PROPERTY, (Serializable) ctx.getCoreSession());\n-        PageProvider<T> pp = (PageProvider<T>) pps.getPageProvider(\"\", ppDefinition, getSearchDocument(), null,\n-                pageSize, currentPageIndex, props, getParams());\n+        List<SortInfo> sortersInfos = null;\n         if (!StringUtils.isBlank(sortBy)) {\n             String[] sorts = sortBy.split(\",\");\n             String[] orders = null;\n             if (!StringUtils.isBlank(sortOrder)) {\n                 orders = sortOrder.split(\",\");\n             }\n-            // clear potential default sort infos first\n-            pp.setSortInfos(null);\n-            for (int i = 0; i < sorts.length; i++) {\n-                String sort = sorts[i];\n-                boolean sortAscending = orders != null && orders.length > i && \"asc\".equals(orders[i].toLowerCase());\n-                pp.addSortInfo(sort, sortAscending);\n+\n+            if (ArrayUtils.isNotEmpty(sorts)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NzM4OQ=="}, "originalCommit": {"oid": "b9fd9a68fd676f201e30622267a3a3db2e69f9ee"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwNDcyNQ==", "bodyText": "But I re-check  a second time we can remove it, thx", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433204725", "createdAt": "2020-06-01T12:28:06Z", "author": {"login": "RSalem07"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java", "diffHunk": "@@ -114,22 +118,27 @@ protected DocumentModel getSearchDocument() {\n         PageProviderService pps = Framework.getService(PageProviderService.class);\n         Map<String, Serializable> props = new HashMap<>();\n         props.put(CoreQueryDocumentPageProvider.CORE_SESSION_PROPERTY, (Serializable) ctx.getCoreSession());\n-        PageProvider<T> pp = (PageProvider<T>) pps.getPageProvider(\"\", ppDefinition, getSearchDocument(), null,\n-                pageSize, currentPageIndex, props, getParams());\n+        List<SortInfo> sortersInfos = null;\n         if (!StringUtils.isBlank(sortBy)) {\n             String[] sorts = sortBy.split(\",\");\n             String[] orders = null;\n             if (!StringUtils.isBlank(sortOrder)) {\n                 orders = sortOrder.split(\",\");\n             }\n-            // clear potential default sort infos first\n-            pp.setSortInfos(null);\n-            for (int i = 0; i < sorts.length; i++) {\n-                String sort = sorts[i];\n-                boolean sortAscending = orders != null && orders.length > i && \"asc\".equals(orders[i].toLowerCase());\n-                pp.addSortInfo(sort, sortAscending);\n+\n+            if (ArrayUtils.isNotEmpty(sorts)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NzM4OQ=="}, "originalCommit": {"oid": "b9fd9a68fd676f201e30622267a3a3db2e69f9ee"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE5MjU4OnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDo0MTo1M1rOGdGKqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjowNDo1N1rOGdIJEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MjkyMw==", "bodyText": "Sounds weird to have \"firstEvent\" or \"thirdEvent\" occur several times.\nMaybe call them \"eventA\", \"eventB\", ...", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433162923", "createdAt": "2020-06-01T10:41:53Z", "author": {"login": "ataillefer"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java", "diffHunk": "@@ -420,6 +421,64 @@ public void shouldEnrichWithLatestDocumentLogEntries() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void shouldHandleSortingAndPagination() throws Exception {\n+        DocumentModel doc = RestServerInit.getFile(1, session);\n+\n+        List<LogEntry> logEntries = new ArrayList<>();\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"secondEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"firstEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"james\", null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fd9a68fd676f201e30622267a3a3db2e69f9ee"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NTI4MQ==", "bodyText": "Yes, It was my first idea, but I tried to be consistent with the exiting tests where the pattern is to have this kind of name. But I can change them", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433195281", "createdAt": "2020-06-01T12:04:57Z", "author": {"login": "RSalem07"}, "path": "modules/platform/rest-api/nuxeo-rest-api-test/src/test/java/org/nuxeo/ecm/restapi/test/AuditTest.java", "diffHunk": "@@ -420,6 +421,64 @@ public void shouldEnrichWithLatestDocumentLogEntries() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void shouldHandleSortingAndPagination() throws Exception {\n+        DocumentModel doc = RestServerInit.getFile(1, session);\n+\n+        List<LogEntry> logEntries = new ArrayList<>();\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"secondEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"firstEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"Two\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"secondEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"thirdEvent\", \"james\", null));\n+        logEntries.add(buildLogEntry(doc, \"One\", \"firstEvent\", \"james\", null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MjkyMw=="}, "originalCommit": {"oid": "b9fd9a68fd676f201e30622267a3a3db2e69f9ee"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTE2NDM0OnYy", "diffSide": "RIGHT", "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTo0MTo1MlrOGdPjCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTo0MTo1MlrOGdPjCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxNjYxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<SortInfo> sortersInfos = null;\n          \n          \n            \n                    List<SortInfo> sortInfos = null;\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/nuxeo/nuxeo/pull/4092#discussion_r433316618", "createdAt": "2020-06-01T15:41:52Z", "author": {"login": "troger"}, "path": "modules/platform/rest-api/nuxeo-rest-api-server/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/adapters/PaginableAdapter.java", "diffHunk": "@@ -114,25 +117,24 @@ protected DocumentModel getSearchDocument() {\n         PageProviderService pps = Framework.getService(PageProviderService.class);\n         Map<String, Serializable> props = new HashMap<>();\n         props.put(CoreQueryDocumentPageProvider.CORE_SESSION_PROPERTY, (Serializable) ctx.getCoreSession());\n-        PageProvider<T> pp = (PageProvider<T>) pps.getPageProvider(\"\", ppDefinition, getSearchDocument(), null,\n-                pageSize, currentPageIndex, props, getParams());\n+        List<SortInfo> sortersInfos = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167a1ce52596575ff3a4900dec5af681d562fe5"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4126, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}