{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDg5NzM1", "number": 3723, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNzozNDozMlrODdPAFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNjoyMjo0MlrODesgJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTgxMDc4OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-convert/src/main/java/org/nuxeo/ecm/core/convert/cache/ConversionCacheHolder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNzozNDozMlrOFluEUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMjoyMFrOFnCl9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5NjQwMA==", "bodyText": "Already done by the unique caller getFromCache so not appropriate here, no?", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r375096400", "createdAt": "2020-02-05T07:34:32Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-convert/src/main/java/org/nuxeo/ecm/core/convert/cache/ConversionCacheHolder.java", "diffHunk": "@@ -178,7 +183,12 @@ protected static BlobHolder doGetFromCache(String key) {\n                 // skip all negative values\n                 CACHE_HITS.addAndGet(Long.MIN_VALUE); // back to 0\n             }\n-            return cacheEntry.restore();\n+            BlobHolder restored = cacheEntry.restore();\n+            if (restored.getBlob().getFile().exists()) {\n+                return restored;\n+            } else {\n+                removeFromCache(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a8f094930468560560e6590f76a723500afe04"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MTI2OA==", "bodyText": "Yes first wrote it here then \"moved\" it but forgot to erase the first one !", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r376481268", "createdAt": "2020-02-07T16:22:20Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-core/nuxeo-core-convert/src/main/java/org/nuxeo/ecm/core/convert/cache/ConversionCacheHolder.java", "diffHunk": "@@ -178,7 +183,12 @@ protected static BlobHolder doGetFromCache(String key) {\n                 // skip all negative values\n                 CACHE_HITS.addAndGet(Long.MIN_VALUE); // back to 0\n             }\n-            return cacheEntry.restore();\n+            BlobHolder restored = cacheEntry.restore();\n+            if (restored.getBlob().getFile().exists()) {\n+                return restored;\n+            } else {\n+                removeFromCache(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5NjQwMA=="}, "originalCommit": {"oid": "e1a8f094930468560560e6590f76a723500afe04"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTgzNTQ2OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-convert/src/test/java/org/nuxeo/ecm/platform/convert/tests/TestCacheConversion.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNzo0NjoyMFrOFluS_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozNDo1MVrOFnfK4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMDE1Ng==", "bodyText": "This test is nice, but it might be better/simpler to have a real unit test of the impacted ConversionCacheHolder API:\n\nIn the same Maven module: nuxeo-core-convert instead of nuxeo-platform-convert, so the test and the code are in the same layer.\nTesting directly #getFromCache, as it's static it should be easy.\nNot bothering with the ConversionService.\n\nYou should be able to add a BlobHolder to the cache, verify you can get it, delete its underlying file, get it again and verify the result is null and the cache entry has been removed.", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r375100156", "createdAt": "2020-02-05T07:46:20Z", "author": {"login": "ataillefer"}, "path": "nuxeo-services/nuxeo-platform-convert/src/test/java/org/nuxeo/ecm/platform/convert/tests/TestCacheConversion.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.ecm.platform.convert.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.convert.cache.CacheKeyGenerator;\n+import org.nuxeo.ecm.core.convert.cache.ConversionCacheHolder;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestCacheConversion extends BaseConverterTest {\n+\n+    @Test\n+    public void shouldRegenNullFileCacheEntries() throws IOException {\n+        String srcMT = \"text/html\";\n+        String fileName = \"hello.html\";\n+        String converterName = cs.getConverterName(srcMT, \"application/pdf\");\n+        assertEquals(\"any2pdf\", converterName);\n+\n+        checkConverterAvailability(converterName);\n+        checkCommandAvailability(\"soffice\");\n+\n+        BlobHolder hg = getBlobFromPath(\"test-docs/\" + fileName, srcMT);\n+        Map<String, Serializable> parameters = new HashMap<>();\n+\n+        // first conversion\n+        BlobHolder result = cs.convert(converterName, hg, parameters);\n+        assertNotNull(result);\n+\n+        // retrieve the temp file\n+        String cacheKey = CacheKeyGenerator.computeKey(converterName, hg, parameters);\n+        BlobHolder blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+        String firstTempFileName = blobHolder.getBlob().getFile().getAbsolutePath();\n+        // delete the temp file\n+        Files.delete(Paths.get(blobHolder.getBlob().getFile().getPath()));\n+\n+        // replay conversion\n+        cs.convert(converterName, hg, parameters);\n+        blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+        String secondTempFileName = blobHolder.getBlob().getFile().getAbsolutePath();\n+        // missing temp file has been regenerated. So it has a different name\n+        assertNotEquals(firstTempFileName, secondTempFileName);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a8f094930468560560e6590f76a723500afe04"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1NjMwOA==", "bodyText": "I changed the way of the test then because the identity converter doesn't work like any2pdf: The name of the temp file is always the cache key with a constant prefix so it doesn't change between 2 generations.\nThe workaround i found is to check after getting a null file cache entry, the cache clears the key rather than keeping it.", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r376556308", "createdAt": "2020-02-07T19:05:13Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-convert/src/test/java/org/nuxeo/ecm/platform/convert/tests/TestCacheConversion.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.ecm.platform.convert.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.convert.cache.CacheKeyGenerator;\n+import org.nuxeo.ecm.core.convert.cache.ConversionCacheHolder;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestCacheConversion extends BaseConverterTest {\n+\n+    @Test\n+    public void shouldRegenNullFileCacheEntries() throws IOException {\n+        String srcMT = \"text/html\";\n+        String fileName = \"hello.html\";\n+        String converterName = cs.getConverterName(srcMT, \"application/pdf\");\n+        assertEquals(\"any2pdf\", converterName);\n+\n+        checkConverterAvailability(converterName);\n+        checkCommandAvailability(\"soffice\");\n+\n+        BlobHolder hg = getBlobFromPath(\"test-docs/\" + fileName, srcMT);\n+        Map<String, Serializable> parameters = new HashMap<>();\n+\n+        // first conversion\n+        BlobHolder result = cs.convert(converterName, hg, parameters);\n+        assertNotNull(result);\n+\n+        // retrieve the temp file\n+        String cacheKey = CacheKeyGenerator.computeKey(converterName, hg, parameters);\n+        BlobHolder blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+        String firstTempFileName = blobHolder.getBlob().getFile().getAbsolutePath();\n+        // delete the temp file\n+        Files.delete(Paths.get(blobHolder.getBlob().getFile().getPath()));\n+\n+        // replay conversion\n+        cs.convert(converterName, hg, parameters);\n+        blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+        String secondTempFileName = blobHolder.getBlob().getFile().getAbsolutePath();\n+        // missing temp file has been regenerated. So it has a different name\n+        assertNotEquals(firstTempFileName, secondTempFileName);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMDE1Ng=="}, "originalCommit": {"oid": "e1a8f094930468560560e6590f76a723500afe04"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkwODY3Mw==", "bodyText": "Still don't understand we you need to go through the conversion service for this unit test...", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r376908673", "createdAt": "2020-02-10T07:58:14Z", "author": {"login": "ataillefer"}, "path": "nuxeo-services/nuxeo-platform-convert/src/test/java/org/nuxeo/ecm/platform/convert/tests/TestCacheConversion.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.ecm.platform.convert.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.convert.cache.CacheKeyGenerator;\n+import org.nuxeo.ecm.core.convert.cache.ConversionCacheHolder;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestCacheConversion extends BaseConverterTest {\n+\n+    @Test\n+    public void shouldRegenNullFileCacheEntries() throws IOException {\n+        String srcMT = \"text/html\";\n+        String fileName = \"hello.html\";\n+        String converterName = cs.getConverterName(srcMT, \"application/pdf\");\n+        assertEquals(\"any2pdf\", converterName);\n+\n+        checkConverterAvailability(converterName);\n+        checkCommandAvailability(\"soffice\");\n+\n+        BlobHolder hg = getBlobFromPath(\"test-docs/\" + fileName, srcMT);\n+        Map<String, Serializable> parameters = new HashMap<>();\n+\n+        // first conversion\n+        BlobHolder result = cs.convert(converterName, hg, parameters);\n+        assertNotNull(result);\n+\n+        // retrieve the temp file\n+        String cacheKey = CacheKeyGenerator.computeKey(converterName, hg, parameters);\n+        BlobHolder blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+        String firstTempFileName = blobHolder.getBlob().getFile().getAbsolutePath();\n+        // delete the temp file\n+        Files.delete(Paths.get(blobHolder.getBlob().getFile().getPath()));\n+\n+        // replay conversion\n+        cs.convert(converterName, hg, parameters);\n+        blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+        String secondTempFileName = blobHolder.getBlob().getFile().getAbsolutePath();\n+        // missing temp file has been regenerated. So it has a different name\n+        assertNotEquals(firstTempFileName, secondTempFileName);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMDE1Ng=="}, "originalCommit": {"oid": "e1a8f094930468560560e6590f76a723500afe04"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0OTQ3Mw==", "bodyText": "No more conversionService, all the calls are direct to ConversionCacheHolder static methods", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r376949473", "createdAt": "2020-02-10T09:34:51Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-convert/src/test/java/org/nuxeo/ecm/platform/convert/tests/TestCacheConversion.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.ecm.platform.convert.tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.convert.cache.CacheKeyGenerator;\n+import org.nuxeo.ecm.core.convert.cache.ConversionCacheHolder;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class TestCacheConversion extends BaseConverterTest {\n+\n+    @Test\n+    public void shouldRegenNullFileCacheEntries() throws IOException {\n+        String srcMT = \"text/html\";\n+        String fileName = \"hello.html\";\n+        String converterName = cs.getConverterName(srcMT, \"application/pdf\");\n+        assertEquals(\"any2pdf\", converterName);\n+\n+        checkConverterAvailability(converterName);\n+        checkCommandAvailability(\"soffice\");\n+\n+        BlobHolder hg = getBlobFromPath(\"test-docs/\" + fileName, srcMT);\n+        Map<String, Serializable> parameters = new HashMap<>();\n+\n+        // first conversion\n+        BlobHolder result = cs.convert(converterName, hg, parameters);\n+        assertNotNull(result);\n+\n+        // retrieve the temp file\n+        String cacheKey = CacheKeyGenerator.computeKey(converterName, hg, parameters);\n+        BlobHolder blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+        String firstTempFileName = blobHolder.getBlob().getFile().getAbsolutePath();\n+        // delete the temp file\n+        Files.delete(Paths.get(blobHolder.getBlob().getFile().getPath()));\n+\n+        // replay conversion\n+        cs.convert(converterName, hg, parameters);\n+        blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+        String secondTempFileName = blobHolder.getBlob().getFile().getAbsolutePath();\n+        // missing temp file has been regenerated. So it has a different name\n+        assertNotEquals(firstTempFileName, secondTempFileName);\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMDE1Ng=="}, "originalCommit": {"oid": "e1a8f094930468560560e6590f76a723500afe04"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTEwMzg2OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNjowMToxN1rOFn-Hfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNjoyOTo1MFrOFn-cuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NjUxMA==", "bodyText": "I know these 2 lines are in the existing test, but I wouldn't keep them as they're asserting on a static test resource from the repository.", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377456510", "createdAt": "2020-02-11T06:01:17Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "diffHunk": "@@ -94,4 +100,33 @@ public void testCache() throws Exception {\n         assertEquals(0, cacheSize1 - cacheSize3);\n     }\n \n+    @Test\n+    public void shouldNotReturnNullFileCacheEntries() throws IOException {\n+        File file = FileUtils.getResourceFileFromContext(\"test-data/hello.doc\");\n+        assertNotNull(file);\n+        assertTrue(file.length() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f62f174eb212ff60d045014f4dcf1c38668395"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MTk0NQ==", "bodyText": "Yes taken off !", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377461945", "createdAt": "2020-02-11T06:29:50Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "diffHunk": "@@ -94,4 +100,33 @@ public void testCache() throws Exception {\n         assertEquals(0, cacheSize1 - cacheSize3);\n     }\n \n+    @Test\n+    public void shouldNotReturnNullFileCacheEntries() throws IOException {\n+        File file = FileUtils.getResourceFileFromContext(\"test-data/hello.doc\");\n+        assertNotNull(file);\n+        assertTrue(file.length() > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1NjUxMA=="}, "originalCommit": {"oid": "f5f62f174eb212ff60d045014f4dcf1c38668395"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTExNzgxOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNjoxMjo0NVrOFn-PrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNjoxMjo0NVrOFn-PrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1ODYwNQ==", "bodyText": "You can probably simplify to the one-parameter constructor, the other ones shouldn't be needed.", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377458605", "createdAt": "2020-02-11T06:12:45Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "diffHunk": "@@ -94,4 +100,33 @@ public void testCache() throws Exception {\n         assertEquals(0, cacheSize1 - cacheSize3);\n     }\n \n+    @Test\n+    public void shouldNotReturnNullFileCacheEntries() throws IOException {\n+        File file = FileUtils.getResourceFileFromContext(\"test-data/hello.doc\");\n+        assertNotNull(file);\n+        assertTrue(file.length() > 0);\n+\n+        // Put a blobholder in the cache\n+        Blob blob = Blobs.createBlob(file, \"application/msword\", null, \"hello.doc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f62f174eb212ff60d045014f4dcf1c38668395"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTEyNzAwOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNjoyMDoxNVrOFn-VPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNjoyMDoxNVrOFn-VPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MDAzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // retrieve the temp file\n          \n          \n            \n                    // retrieve the cache entry", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377460030", "createdAt": "2020-02-11T06:20:15Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "diffHunk": "@@ -94,4 +100,33 @@ public void testCache() throws Exception {\n         assertEquals(0, cacheSize1 - cacheSize3);\n     }\n \n+    @Test\n+    public void shouldNotReturnNullFileCacheEntries() throws IOException {\n+        File file = FileUtils.getResourceFileFromContext(\"test-data/hello.doc\");\n+        assertNotNull(file);\n+        assertTrue(file.length() > 0);\n+\n+        // Put a blobholder in the cache\n+        Blob blob = Blobs.createBlob(file, \"application/msword\", null, \"hello.doc\");\n+        BlobHolder bh = new SimpleCachableBlobHolder(blob);\n+        String cacheKey = CacheKeyGenerator.computeKey(\"identity\", bh, null);\n+        ConversionCacheHolder.addToCache(cacheKey, bh);\n+\n+        // check new cache entry was created\n+        assertEquals(1, ConversionCacheHolder.getNbCacheEntries());\n+\n+        // retrieve the temp file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f62f174eb212ff60d045014f4dcf1c38668395"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTEyOTk4OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNjoyMjo0MlrOFn-W8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNjozMTozMFrOFn-eMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MDQ2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // requesting null file cache entries returns null after clearing the outdated key\n          \n          \n            \n                    // requesting null file cache entry returns null after clearing the outdated key", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377460466", "createdAt": "2020-02-11T06:22:42Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "diffHunk": "@@ -94,4 +100,33 @@ public void testCache() throws Exception {\n         assertEquals(0, cacheSize1 - cacheSize3);\n     }\n \n+    @Test\n+    public void shouldNotReturnNullFileCacheEntries() throws IOException {\n+        File file = FileUtils.getResourceFileFromContext(\"test-data/hello.doc\");\n+        assertNotNull(file);\n+        assertTrue(file.length() > 0);\n+\n+        // Put a blobholder in the cache\n+        Blob blob = Blobs.createBlob(file, \"application/msword\", null, \"hello.doc\");\n+        BlobHolder bh = new SimpleCachableBlobHolder(blob);\n+        String cacheKey = CacheKeyGenerator.computeKey(\"identity\", bh, null);\n+        ConversionCacheHolder.addToCache(cacheKey, bh);\n+\n+        // check new cache entry was created\n+        assertEquals(1, ConversionCacheHolder.getNbCacheEntries());\n+\n+        // retrieve the temp file\n+        BlobHolder blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+\n+        // delete the temp file\n+        Files.delete(Paths.get(blobHolder.getBlob().getFile().getPath()));\n+        // check the cache is outdated\n+        assertEquals(1, ConversionCacheHolder.getNbCacheEntries());\n+        assertTrue(ConversionCacheHolder.getCacheKeys().contains(cacheKey));\n+\n+        // requesting null file cache entries returns null after clearing the outdated key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f62f174eb212ff60d045014f4dcf1c38668395"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MjMyMw==", "bodyText": "added also an \"A\" then\nrequested A null...", "url": "https://github.com/nuxeo/nuxeo/pull/3723#discussion_r377462323", "createdAt": "2020-02-11T06:31:30Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-core/nuxeo-core-convert/src/test/java/org/nuxeo/ecm/core/convert/tests/TestCache.java", "diffHunk": "@@ -94,4 +100,33 @@ public void testCache() throws Exception {\n         assertEquals(0, cacheSize1 - cacheSize3);\n     }\n \n+    @Test\n+    public void shouldNotReturnNullFileCacheEntries() throws IOException {\n+        File file = FileUtils.getResourceFileFromContext(\"test-data/hello.doc\");\n+        assertNotNull(file);\n+        assertTrue(file.length() > 0);\n+\n+        // Put a blobholder in the cache\n+        Blob blob = Blobs.createBlob(file, \"application/msword\", null, \"hello.doc\");\n+        BlobHolder bh = new SimpleCachableBlobHolder(blob);\n+        String cacheKey = CacheKeyGenerator.computeKey(\"identity\", bh, null);\n+        ConversionCacheHolder.addToCache(cacheKey, bh);\n+\n+        // check new cache entry was created\n+        assertEquals(1, ConversionCacheHolder.getNbCacheEntries());\n+\n+        // retrieve the temp file\n+        BlobHolder blobHolder = ConversionCacheHolder.getFromCache(cacheKey);\n+\n+        // delete the temp file\n+        Files.delete(Paths.get(blobHolder.getBlob().getFile().getPath()));\n+        // check the cache is outdated\n+        assertEquals(1, ConversionCacheHolder.getNbCacheEntries());\n+        assertTrue(ConversionCacheHolder.getCacheKeys().contains(cacheKey));\n+\n+        // requesting null file cache entries returns null after clearing the outdated key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ2MDQ2Ng=="}, "originalCommit": {"oid": "f5f62f174eb212ff60d045014f4dcf1c38668395"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4227, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}