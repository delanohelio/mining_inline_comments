{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MDEzOTcx", "number": 4178, "title": "NXP-29203: Manage distributions from the webengine UI", "bodyText": "Also includes fixes around hidden distributions and 404 redirections.\nT&P running at https://qa.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-atchertchian-master/250/", "createdAt": "2020-06-24T07:21:48Z", "url": "https://github.com/nuxeo/nuxeo/pull/4178", "merged": true, "mergeCommit": {"oid": "841d3ed2a81bce98be1ccd75dfabf2422665b3bc"}, "closed": true, "closedAt": "2020-06-29T07:35:05Z", "author": {"login": "atchertchian"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuVW-bAFqTQzNjQwMzE1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvFAnLgFqTQzODM5MjA4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDAzMTU5", "url": "https://github.com/nuxeo/nuxeo/pull/4178#pullrequestreview-436403159", "createdAt": "2020-06-24T07:47:24Z", "commit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0NzoyNFrOGoGyGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1ODowOFrOGoHJjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNzM1NQ==", "bodyText": "I would have said that document adapter is immutable regarding their doc.\nFrom what I understand this is used in a sub class, therefore we could make it protected to only allow this usage, wdyt?", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444707355", "createdAt": "2020-06-24T07:47:24Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BaseNuxeoArtifactDocAdapter.java", "diffHunk": "@@ -88,6 +88,15 @@ public DocumentModel getDoc() {\n         return doc;\n     }\n \n+    /**\n+     * Updates the document behind this adapter.\n+     *\n+     * @since 11.2\n+     */\n+    public void setDoc(DocumentModel doc) {\n+        this.doc = doc;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODAxMg==", "bodyText": "Don't you want to test the get/safeGet of this property?", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444708012", "createdAt": "2020-06-24T07:48:35Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMDMyMA==", "bodyText": "Could these two props be given to the first Stream?", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444710320", "createdAt": "2020-06-24T07:53:06Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMTQwOA==", "bodyText": "This should work:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              .filter(entry -> updateProperties.containsKey(entry))\n          \n          \n            \n                              .filter(updateProperties::containsKey)", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444711408", "createdAt": "2020-06-24T07:54:57Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjA2OQ==", "bodyText": "Shouldn't we use the UTC ZoneId?", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444712069", "createdAt": "2020-06-24T07:56:00Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            if (updateProperties.containsKey(PROP_RELEASED)) {\n+                String released = updateProperties.get(PROP_RELEASED);\n+                if (StringUtils.isNotBlank(released)) {\n+                    LocalDate date = LocalDate.parse(released);\n+                    Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjQyMQ==", "bodyText": "java.util.Date is imported by the class, the full qualified name shouldn't be needed.", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444712421", "createdAt": "2020-06-24T07:56:35Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            if (updateProperties.containsKey(PROP_RELEASED)) {\n+                String released = updateProperties.get(PROP_RELEASED);\n+                if (StringUtils.isNotBlank(released)) {\n+                    LocalDate date = LocalDate.parse(released);\n+                    Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();\n+                    doc.setPropertyValue(DistributionSnapshot.PROP_RELEASED, java.util.Date.from(instant));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMzM1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                  .forEach(snap -> distribs.add(snap));\n          \n          \n            \n                                                  .forEach(distribs::add);", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444713358", "createdAt": "2020-06-24T07:58:08Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -177,12 +162,15 @@ protected boolean canSeeRuntimeSnapshot(CoreSession session) {\n \n     @Override\n     public List<DistributionSnapshotDesc> getAvailableDistributions(CoreSession session) {\n-        List<DistributionSnapshotDesc> names = new ArrayList<>();\n-        names.addAll(getPersistentSnapshots(session).values());\n+        List<DistributionSnapshotDesc> distribs = new ArrayList<>();\n+        RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n+                                      .stream()\n+                                      .filter(snap -> !snap.isHidden())\n+                                      .forEach(snap -> distribs.add(snap));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dc4ebf24576d9333773aeb2ca0da23c4343f08b", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4dc4ebf24576d9333773aeb2ca0da23c4343f08b", "committedDate": "2020-06-24T08:30:41Z", "message": "NXP-29203: add link to admin view from home"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/11da8504be3503664902777c1f64f5b770c7fbcd", "committedDate": "2020-06-23T21:25:36Z", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages"}, "afterCommit": {"oid": "79157c8b4790c4ea637f7f8c4eb08dd90139490f", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/79157c8b4790c4ea637f7f8c4eb08dd90139490f", "committedDate": "2020-06-24T08:32:02Z", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79157c8b4790c4ea637f7f8c4eb08dd90139490f", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/79157c8b4790c4ea637f7f8c4eb08dd90139490f", "committedDate": "2020-06-24T08:32:02Z", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages"}, "afterCommit": {"oid": "b922ef3eade1773ca85724f0bca02138a84342b8", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b922ef3eade1773ca85724f0bca02138a84342b8", "committedDate": "2020-06-24T08:39:32Z", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDQzMTc0", "url": "https://github.com/nuxeo/nuxeo/pull/4178#pullrequestreview-436443174", "createdAt": "2020-06-24T08:42:22Z", "commit": {"oid": "b922ef3eade1773ca85724f0bca02138a84342b8"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b922ef3eade1773ca85724f0bca02138a84342b8", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b922ef3eade1773ca85724f0bca02138a84342b8", "committedDate": "2020-06-24T08:39:32Z", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages"}, "afterCommit": {"oid": "92a6b8795a2d1f2484329ef34b0902ae7226bb2e", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/92a6b8795a2d1f2484329ef34b0902ae7226bb2e", "committedDate": "2020-06-24T15:39:30Z", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NzcyNDUz", "url": "https://github.com/nuxeo/nuxeo/pull/4178#pullrequestreview-436772453", "createdAt": "2020-06-24T15:40:23Z", "commit": {"oid": "eafcab04b7738c036f75e1b2b90ea742c306c215"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0MDo1NVrOGoYA0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0MDo1NVrOGoYA0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4OTY1MQ==", "bodyText": "double ; at the end", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444989651", "createdAt": "2020-06-24T15:40:55Z", "author": {"login": "NourNuxeo"}, "path": "ftests/nuxeo-platform-explorer-ftests/explorer-ftests-base/src/main/java/org/nuxeo/functionaltests/explorer/pages/DistribAdminPage.java", "diffHunk": "@@ -42,12 +43,18 @@\n  */\n public class DistribAdminPage extends AbstractExplorerPage {\n \n-    public static final String URL = \"/site/distribution/_admin\";\n+    public static final String URL = String.format(\"%s%s/\", ExplorerHomePage.URL, Distribution.VIEW_ADMIN);\n+\n+    /** @since 11.2 */\n+    public static final String UPDATE_URL = String.format(\"%supdate/\", ExplorerHomePage.URL);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "147d1f5d077691d7f72c5c4da0542ae9d038272f"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92a6b8795a2d1f2484329ef34b0902ae7226bb2e", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/92a6b8795a2d1f2484329ef34b0902ae7226bb2e", "committedDate": "2020-06-24T15:39:30Z", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages"}, "afterCommit": {"oid": "da4584cd791d6013c8cbad006b940ebce58dc6a1", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/da4584cd791d6013c8cbad006b940ebce58dc6a1", "committedDate": "2020-06-25T06:51:20Z", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MzQyNzUw", "url": "https://github.com/nuxeo/nuxeo/pull/4178#pullrequestreview-437342750", "createdAt": "2020-06-25T09:55:07Z", "commit": {"oid": "fe69dc6445bab786eac57d91f553906ce771555f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTo1NTowN1rOGozuPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTo1NTowN1rOGozuPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0MzY0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<DistributionSnapshotDesc> distribs = new ArrayList<>();\n          \n          \n            \n                    RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n          \n          \n            \n                                                  .stream()\n          \n          \n            \n                                                  .filter(snap -> !snap.isHidden())\n          \n          \n            \n                                                  .forEach(distribs::add);\n          \n          \n            \n                    List<DistributionSnapshotDesc> distribs = RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n          \n          \n            \n                                                  .stream()\n          \n          \n            \n                                                  .filter(snap -> !snap.isHidden())\n          \n          \n            \n                                                  .collect(Collectors.toList());", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r445443647", "createdAt": "2020-06-25T09:55:07Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -174,12 +162,15 @@ protected boolean canSeeRuntimeSnapshot(CoreSession session) {\n \n     @Override\n     public List<DistributionSnapshotDesc> getAvailableDistributions(CoreSession session) {\n-        List<DistributionSnapshotDesc> names = new ArrayList<>();\n-        names.addAll(getPersistentSnapshots(session).values());\n+        List<DistributionSnapshotDesc> distribs = new ArrayList<>();\n+        RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n+                                      .stream()\n+                                      .filter(snap -> !snap.isHidden())\n+                                      .forEach(distribs::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe69dc6445bab786eac57d91f553906ce771555f"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da4584cd791d6013c8cbad006b940ebce58dc6a1", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/da4584cd791d6013c8cbad006b940ebce58dc6a1", "committedDate": "2020-06-25T06:51:20Z", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages"}, "afterCommit": {"oid": "7e7551d6c985881f304a49033bf867e90ed10b74", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7e7551d6c985881f304a49033bf867e90ed10b74", "committedDate": "2020-06-25T13:15:02Z", "message": "NXP-28995: remove old documentation remnant"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e7551d6c985881f304a49033bf867e90ed10b74", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7e7551d6c985881f304a49033bf867e90ed10b74", "committedDate": "2020-06-25T13:15:02Z", "message": "NXP-28995: remove old documentation remnant"}, "afterCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "committedDate": "2020-06-25T13:34:44Z", "message": "NXP-28995: remove old documentation remnant"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTA3NTgz", "url": "https://github.com/nuxeo/nuxeo/pull/4178#pullrequestreview-438107583", "createdAt": "2020-06-26T08:26:32Z", "commit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTE3NDE5", "url": "https://github.com/nuxeo/nuxeo/pull/4178#pullrequestreview-438117419", "createdAt": "2020-06-26T08:40:42Z", "commit": {"oid": "991f3e5c326d17900bef72f427869e8fdbf9ab69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo0MDo0MlrOGpYtTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo0MDo0MlrOGpYtTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0OTYxMw==", "bodyText": "why separating the old operation in 2 parts ?\nif you want to do so i suggest:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .collect(Collectors.toList());\n          \n          \n            \n                        aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));\n          \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .map(alias -> {\n          \n          \n            \n                                            validateKeyOrAlias(alias, reservedKeys);\n          \n          \n            \n                                            return alias;\n          \n          \n            \n                                        })\n          \n          \n            \n                                        .collect(Collectors.toList());\n          \n      \n    \n    \n  \n\nwould avoid streaming twice ?\nYou could also peek but I know other devs don't recommend it https://rules.sonarsource.com/java/tag/java8/RSPEC-3864\nbut here you are only validating, not modifying and you do have a terminal operation so why not:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .collect(Collectors.toList());\n          \n          \n            \n                        aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));\n          \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .peek(alias -> validateKeyOrAlias(alias, reservedKeys))\n          \n          \n            \n                                        .collect(Collectors.toList());", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446049613", "createdAt": "2020-06-26T08:40:42Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -495,16 +497,29 @@ public DistributionSnapshot readJson(InputStream in) {\n      *\n      * @since 11.2\n      */\n-    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n-            throws DocumentValidationException {\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n         final DocumentModel doc = getDoc();\n         if (updateProperties == null) {\n             return doc;\n         }\n+        // validations\n         if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n-                  .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n             throw new DocumentValidationException(\"Please fill all required fields.\");\n         }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "991f3e5c326d17900bef72f427869e8fdbf9ab69"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Mjg4NDY0", "url": "https://github.com/nuxeo/nuxeo/pull/4178#pullrequestreview-438288464", "createdAt": "2020-06-26T13:20:10Z", "commit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoyMDoxMFrOGpgmhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozNzo0MFrOGphNqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3ODk0OQ==", "bodyText": "StringUtils.isBlank(TITLE_PROPERTY_PATH) is always false", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446178949", "createdAt": "2020-06-26T13:20:10Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3OTY0OQ==", "bodyText": "props.put(PROP_RELEASED, releaseDate == null ? null : new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate))", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446179649", "createdAt": "2020-06-26T13:21:29Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4MTQxNA==", "bodyText": "proprties -> properties", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446181414", "createdAt": "2020-06-26T13:24:28Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4Mjc2MA==", "bodyText": "aliases.forEach(...), no need for .stream()", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446182760", "createdAt": "2020-06-26T13:26:40Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE, PROP_RELEASED, PROP_ALIASES)\n+                  .filter(formFields::containsKey)\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(props.get(TITLE_PROPERTY_PATH))) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * Updates the distribution document metadata.\n+     *\n+     * @since 11.2\n+     */\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n+        final DocumentModel doc = getDoc();\n+        if (updateProperties == null) {\n+            return doc;\n+        }\n+        // validations\n+        if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n+            throw new DocumentValidationException(\"Please fill all required fields.\");\n+        }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4MzU0OQ==", "bodyText": "For basic loops without filtering/mapping we should prefer List.of(...).forEach() to avoid building a stream.\nThere are several in this method and the following ones.", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446183549", "createdAt": "2020-06-26T13:28:03Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4ODk3MQ==", "bodyText": "Why not simply if (forbidden.contains(keyOrAlias))?", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446188971", "createdAt": "2020-06-26T13:37:40Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE, PROP_RELEASED, PROP_ALIASES)\n+                  .filter(formFields::containsKey)\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(props.get(TITLE_PROPERTY_PATH))) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * Updates the distribution document metadata.\n+     *\n+     * @since 11.2\n+     */\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n+        final DocumentModel doc = getDoc();\n+        if (updateProperties == null) {\n+            return doc;\n+        }\n+        // validations\n+        if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n+            throw new DocumentValidationException(\"Please fill all required fields.\");\n+        }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));\n+        }\n+        // updates\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .filter(updateProperties::containsKey)\n+              .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+        if (updateProperties.containsKey(PROP_RELEASED)) {\n+            doc.setPropertyValue(DistributionSnapshot.PROP_RELEASED, convertDate(updateProperties.get(PROP_RELEASED)));\n+        }\n+        if (aliases != null) {\n+            doc.setPropertyValue(PROP_ALIASES, (Serializable) aliases);\n+        }\n+        if (!StringUtils.isBlank(comment)) {\n+            doc.putContextData(\"comment\", comment);\n+        }\n+        doc.putContextData(ThumbnailConstants.DISABLE_THUMBNAIL_COMPUTATION, true);\n+        DocumentModel updatedDoc = session.saveDocument(doc);\n+        session.save();\n+        return updatedDoc;\n+    }\n+\n+    protected void validateKeyOrAlias(String keyOrAlias, List<String> reservedKeys) throws DocumentValidationException {\n+        var forbidden = new ArrayList<>(List.of(\n+                // reserved for live distrib\n+                SnapshotManager.DISTRIBUTION_ALIAS_CURRENT, SnapshotManager.DISTRIBUTION_ALIAS_ADM,\n+                // added automatically\n+                SnapshotManager.DISTRIBUTION_ALIAS_LATEST_FT, SnapshotManager.DISTRIBUTION_ALIAS_LATEST_LTS));\n+        if (reservedKeys != null) {\n+            forbidden.addAll(reservedKeys);\n+        }\n+        Optional<String> match = forbidden.stream().filter(keyOrAlias::equals).findFirst();\n+        if (match.isPresent()) {\n+            throw new DocumentValidationException(\n+                    String.format(\"Distribution key or alias is reserved: '%s'\", match.get()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 191}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22eef97cd2e554e2c265774393bd5d0446ca7005", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/22eef97cd2e554e2c265774393bd5d0446ca7005", "committedDate": "2020-06-26T14:23:11Z", "message": "NXP-29203: add update views for explorer distributions metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "309e408e6b8990720139e4583072113c8f395720", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/309e408e6b8990720139e4583072113c8f395720", "committedDate": "2020-06-26T14:23:11Z", "message": "NXP-29203: validate distribution key and aliases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1486cd04cebd926b697690144298d4207c1ad9d", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e1486cd04cebd926b697690144298d4207c1ad9d", "committedDate": "2020-06-26T14:23:11Z", "message": "NXP-29203/NXP-24965: review retrieval of persisted explorer distribs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9b361017134a66ae8e1540c9919760754415f62", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f9b361017134a66ae8e1540c9919760754415f62", "committedDate": "2020-06-26T14:23:11Z", "message": "NXP-29203: handle 404 on unknown explorer distrib subpages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a234abb46b29bb24c984f2636ed3a926a8ce6a30", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a234abb46b29bb24c984f2636ed3a926a8ce6a30", "committedDate": "2020-06-26T14:23:11Z", "message": "NXP-28837: update copyright on classes significantly changed so far"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d59ca7f712d8596ca75206531a43abeff2fa697", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1d59ca7f712d8596ca75206531a43abeff2fa697", "committedDate": "2020-06-26T14:23:11Z", "message": "NXP-28995: remove old documentation remnant"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9ccf06bac1e22a1625eaae2a1213ba8454c4c009", "committedDate": "2020-06-25T13:34:44Z", "message": "NXP-28995: remove old documentation remnant"}, "afterCommit": {"oid": "1d59ca7f712d8596ca75206531a43abeff2fa697", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1d59ca7f712d8596ca75206531a43abeff2fa697", "committedDate": "2020-06-26T14:23:11Z", "message": "NXP-28995: remove old documentation remnant"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzkyMDgw", "url": "https://github.com/nuxeo/nuxeo/pull/4178#pullrequestreview-438392080", "createdAt": "2020-06-26T15:30:43Z", "commit": {"oid": "1d59ca7f712d8596ca75206531a43abeff2fa697"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4718, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}