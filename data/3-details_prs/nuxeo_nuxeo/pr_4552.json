{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MDgzNDE2", "number": 4552, "title": "Feature NXP-29991 better zip preview", "bodyText": "", "createdAt": "2020-12-22T12:11:08Z", "url": "https://github.com/nuxeo/nuxeo/pull/4552", "merged": true, "mergeCommit": {"oid": "3ef281f7911401f2a754651c41039e35295dc48a"}, "closed": true, "closedAt": "2020-12-24T15:33:29Z", "author": {"login": "kevinleturc"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdooYtiAH2gAyNTQ0MDgzNDE2OmRiNGE1NWU5MmEzNWQxYWYwMDM1OTdhODc3M2VmZmM3YWNkMDRhMDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdor6a2AFqTU1NzE0NDgwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "db4a55e92a35d1af003597a8773effc7acd04a06", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/db4a55e92a35d1af003597a8773effc7acd04a06", "committedDate": "2020-12-22T10:57:24Z", "message": "NXP-29991: Cleanup / Format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MDM4NTUx", "url": "https://github.com/nuxeo/nuxeo/pull/4552#pullrequestreview-557038551", "createdAt": "2020-12-22T12:18:55Z", "commit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxODo1NVrOIJ5PUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjozMTowMlrOIJ5kLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NTkwNA==", "bodyText": "You could use javax.ws.rs.core.MediaType.TEXT_HTML etc. for the constants (if it's not a dependency to add)", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547245904", "createdAt": "2020-12-22T12:18:55Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NjI3Nw==", "bodyText": "Please put the log as the first constant.", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547246277", "createdAt": "2020-12-22T12:19:49Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NjkwOQ==", "bodyText": "\"UTF-8\" -> null, it's the default and doesn't need to be explicit", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547246909", "createdAt": "2020-12-22T12:21:21Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "diffHunk": "@@ -103,16 +110,53 @@ public void testXMLDocument() throws Exception {\n         doTestFileDocument(blob, \"\\n\\n<b>test</b>\");\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.preview:test-zip-preview-contrib.xml\")\n+    public void testZIPDocument() throws Exception {\n+        File file = Framework.createTempFile(\"testZIPDocument\", \".zip\");\n+        try (ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file))) {\n+            writeZipEntry(out, \"payload.html\");\n+            writeZipEntry(out, \"payload.xml\");\n+            writeZipEntry(out, \"payload.txt\");\n+        }\n+        Blob blob = Blobs.createBlob(file, \"application/zip\", \"UTF-8\", \"testZIPDocument.zip\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0ODMyMg==", "bodyText": "\"UTF-8\" -> null", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547248322", "createdAt": "2020-12-22T12:24:26Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) throws PreviewException {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", \"UTF-8\", filename);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0ODc5MA==", "bodyText": "Is that the right error message?", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547248790", "createdAt": "2020-12-22T12:25:24Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) throws PreviewException {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", \"UTF-8\", filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot fetch ZipEntryBlob content with filename: \" + filename, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1MDk1Mg==", "bodyText": "Isn't there a risk that we'll read all the \"lines\" of a binary file for example?", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547250952", "createdAt": "2020-12-22T12:30:18Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) throws PreviewException {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", \"UTF-8\", filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot fetch ZipEntryBlob content with filename: \" + filename, e);\n+        }\n+    }\n+\n+    protected boolean isSanitizable(Blob blob) {\n+        String mimeType = getMimetypeRegistry().getMimetypeFromFilenameWithBlobMimetypeFallback(blob.getFilename(), blob, null);\n+        boolean sanitized = false;\n+        if (mimeType == null) {\n+            try (InputStream stream = blob.getStream()) {\n+                // last chance introspect the content\n+                LineIterator lineIt = IOUtils.lineIterator(stream, defaultIfNull(blob.getEncoding(), \"UTF-8\"));\n+                while (lineIt.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1MTI0NQ==", "bodyText": "You could return directly here, no need for a local sanitized variable (which I'd have called sanitizable)", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547251245", "createdAt": "2020-12-22T12:31:02Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) throws PreviewException {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", \"UTF-8\", filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot fetch ZipEntryBlob content with filename: \" + filename, e);\n+        }\n+    }\n+\n+    protected boolean isSanitizable(Blob blob) {\n+        String mimeType = getMimetypeRegistry().getMimetypeFromFilenameWithBlobMimetypeFallback(blob.getFilename(), blob, null);\n+        boolean sanitized = false;\n+        if (mimeType == null) {\n+            try (InputStream stream = blob.getStream()) {\n+                // last chance introspect the content\n+                LineIterator lineIt = IOUtils.lineIterator(stream, defaultIfNull(blob.getEncoding(), \"UTF-8\"));\n+                while (lineIt.hasNext()) {\n+                    String line = lineIt.nextLine();\n+                    sanitized = line.contains(\"<script\");\n+                    if (sanitized) {\n+                        break;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 105}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/fc37e894b628162468872e2b2e5852361d0a8e7f", "committedDate": "2020-12-22T12:10:39Z", "message": "NXP-29991: Better zip preview"}, "afterCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b", "committedDate": "2020-12-22T13:18:14Z", "message": "NXP-29991: Better zip preview"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MDczOTAz", "url": "https://github.com/nuxeo/nuxeo/pull/4552#pullrequestreview-557073903", "createdAt": "2020-12-22T13:21:12Z", "commit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MTA0NzAx", "url": "https://github.com/nuxeo/nuxeo/pull/4552#pullrequestreview-557104701", "createdAt": "2020-12-22T14:09:29Z", "commit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "state": "DISMISSED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDowOTozMFrOIJ8awg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyOToxMlrOIJ9DlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5Nzk4Ng==", "bodyText": "Zip blobs", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547297986", "createdAt": "2020-12-22T14:09:30Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5OTUxNQ==", "bodyText": "maybe a more generic message like \"Unable to find converter from application/zip to text/html\"", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547299515", "createdAt": "2020-12-22T14:12:40Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(TEXT_HTML, TEXT_XML, TEXT_PLAIN);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwMjMxMg==", "bodyText": "Any point using streams here?", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547302312", "createdAt": "2020-12-22T14:18:05Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(TEXT_HTML, TEXT_XML, TEXT_PLAIN);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwODMyOQ==", "bodyText": "can this happen?", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547308329", "createdAt": "2020-12-22T14:29:02Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(TEXT_HTML, TEXT_XML, TEXT_PLAIN);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", null, filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot read ZipEntryBlob content with filename: \" + filename, e);\n+        }\n+    }\n+\n+    protected boolean isSanitizable(Blob blob) {\n+        String mimeType = getMimetypeRegistry().getMimetypeFromFilenameWithBlobMimetypeFallback(blob.getFilename(),\n+                blob, null);\n+        if (mimeType == null) {\n+            try (InputStream stream = blob.getStream()) {\n+                // last chance introspect the content\n+                LineIterator lineIt = IOUtils.lineIterator(stream, defaultIfNull(blob.getEncoding(), \"UTF-8\"));\n+                while (lineIt.hasNext()) {\n+                    String line = lineIt.nextLine();\n+                    if (line.contains(\"<script\")) {\n+                        return true;\n+                    }\n+                }\n+                return false;\n+            } catch (IOException e) {\n+                throw new PreviewException(\"Unable to introspect content\");\n+            }\n+        } else {\n+            return HTML_MIME_TYPES.contains(mimeType);\n+        }\n+    }\n+\n+    protected MimetypeRegistry getMimetypeRegistry() {\n+        MimetypeRegistry registry = Framework.getService(MimetypeRegistry.class);\n+        if (registry == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwODQzNw==", "bodyText": "same question", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547308437", "createdAt": "2020-12-22T14:29:12Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(TEXT_HTML, TEXT_XML, TEXT_PLAIN);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", null, filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot read ZipEntryBlob content with filename: \" + filename, e);\n+        }\n+    }\n+\n+    protected boolean isSanitizable(Blob blob) {\n+        String mimeType = getMimetypeRegistry().getMimetypeFromFilenameWithBlobMimetypeFallback(blob.getFilename(),\n+                blob, null);\n+        if (mimeType == null) {\n+            try (InputStream stream = blob.getStream()) {\n+                // last chance introspect the content\n+                LineIterator lineIt = IOUtils.lineIterator(stream, defaultIfNull(blob.getEncoding(), \"UTF-8\"));\n+                while (lineIt.hasNext()) {\n+                    String line = lineIt.nextLine();\n+                    if (line.contains(\"<script\")) {\n+                        return true;\n+                    }\n+                }\n+                return false;\n+            } catch (IOException e) {\n+                throw new PreviewException(\"Unable to introspect content\");\n+            }\n+        } else {\n+            return HTML_MIME_TYPES.contains(mimeType);\n+        }\n+    }\n+\n+    protected MimetypeRegistry getMimetypeRegistry() {\n+        MimetypeRegistry registry = Framework.getService(MimetypeRegistry.class);\n+        if (registry == null) {\n+            throw new PreviewException(\"Cannot find MimetypeRegistry\");\n+        }\n+        return registry;\n+    }\n+\n+    protected HtmlSanitizerService getHtmlSanitizerService() {\n+        HtmlSanitizerService sanitizer = Framework.getService(HtmlSanitizerService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de49903e105abe88c3e1151ad028be42632be977", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/de49903e105abe88c3e1151ad028be42632be977", "committedDate": "2020-12-22T14:57:52Z", "message": "NXP-29991: Better zip preview"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b", "committedDate": "2020-12-22T13:18:14Z", "message": "NXP-29991: Better zip preview"}, "afterCommit": {"oid": "de49903e105abe88c3e1151ad028be42632be977", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/de49903e105abe88c3e1151ad028be42632be977", "committedDate": "2020-12-22T14:57:52Z", "message": "NXP-29991: Better zip preview"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MTQ0NjQz", "url": "https://github.com/nuxeo/nuxeo/pull/4552#pullrequestreview-557144643", "createdAt": "2020-12-22T15:03:42Z", "commit": {"oid": "de49903e105abe88c3e1151ad028be42632be977"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MTQ0ODAz", "url": "https://github.com/nuxeo/nuxeo/pull/4552#pullrequestreview-557144803", "createdAt": "2020-12-22T15:03:56Z", "commit": {"oid": "de49903e105abe88c3e1151ad028be42632be977"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4923, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}