{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0OTk4OTE0", "number": 3930, "title": "Feature nxp 28801 stream latency from nuxeo reorg2", "bodyText": "Include NXP-28619", "createdAt": "2020-04-17T08:35:41Z", "url": "https://github.com/nuxeo/nuxeo/pull/3930", "merged": true, "mergeCommit": {"oid": "bd3a431401633ecc8bc153c414728e98dd771bcf"}, "closed": true, "closedAt": "2020-05-20T13:15:22Z", "author": {"login": "bdelbosc"}, "timelineItems": {"totalCount": 84, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYeHSzgBqjMyNDM2Mzg4NDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjFKkXAFqTQxNTEyNjYxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "429e846ba8ea17062e8edd87ad9a3f0afec29a2e", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/429e846ba8ea17062e8edd87ad9a3f0afec29a2e", "committedDate": "2020-04-17T08:06:08Z", "message": "NXP-28619: Refactor K8s rollout status statements"}, "afterCommit": {"oid": "d087187b4c68c40f19426de473c006d3350511a0", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d087187b4c68c40f19426de473c006d3350511a0", "committedDate": "2020-04-17T09:45:09Z", "message": "NXP-28619: Refactor K8s rollout status statements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d087187b4c68c40f19426de473c006d3350511a0", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d087187b4c68c40f19426de473c006d3350511a0", "committedDate": "2020-04-17T09:45:09Z", "message": "NXP-28619: Refactor K8s rollout status statements"}, "afterCommit": {"oid": "d0f824f842a415e791281ab837517075d8ea1cfa", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d0f824f842a415e791281ab837517075d8ea1cfa", "committedDate": "2020-04-17T11:11:40Z", "message": "NXP-28619: Refactor K8s rollout status statements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0f824f842a415e791281ab837517075d8ea1cfa", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d0f824f842a415e791281ab837517075d8ea1cfa", "committedDate": "2020-04-17T11:11:40Z", "message": "NXP-28619: Refactor K8s rollout status statements"}, "afterCommit": {"oid": "6fbb14ee81368ca1628b2e44aa3b1927f605eecc", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6fbb14ee81368ca1628b2e44aa3b1927f605eecc", "committedDate": "2020-04-17T13:35:29Z", "message": "NXP-28619: Refactor K8s rollout status statements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6fbb14ee81368ca1628b2e44aa3b1927f605eecc", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6fbb14ee81368ca1628b2e44aa3b1927f605eecc", "committedDate": "2020-04-17T13:35:29Z", "message": "NXP-28619: Refactor K8s rollout status statements"}, "afterCommit": {"oid": "1d6c426e63e788a483a63a7d66c24d83fea50fd5", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1d6c426e63e788a483a63a7d66c24d83fea50fd5", "committedDate": "2020-04-17T15:03:46Z", "message": "NXP-28619: Ignore temporary TestSnapshotPersist that fails on multi env"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d6c426e63e788a483a63a7d66c24d83fea50fd5", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1d6c426e63e788a483a63a7d66c24d83fea50fd5", "committedDate": "2020-04-17T15:03:46Z", "message": "NXP-28619: Ignore temporary TestSnapshotPersist that fails on multi env"}, "afterCommit": {"oid": "382b6279bdabfe55099ce54a3c63f21f15670b80", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/382b6279bdabfe55099ce54a3c63f21f15670b80", "committedDate": "2020-04-18T06:33:06Z", "message": "NXP-28619: Ignore temporary TestSnapshotPersist that fails on multi env"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "374dc3851280cc441e71f3430caf2ca0adcec64c", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/374dc3851280cc441e71f3430caf2ca0adcec64c", "committedDate": "2020-04-20T08:47:08Z", "message": "NXP-28619: Prevent failure while commit position of the last batch"}, "afterCommit": {"oid": "72083a90ffeb871a27532ddcccf5306727220568", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/72083a90ffeb871a27532ddcccf5306727220568", "committedDate": "2020-04-20T12:20:11Z", "message": "NXP-28619: Prevent failure while commit position of the last batch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c86d3c967cd6881004638380370913f1ec3f5bec", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c86d3c967cd6881004638380370913f1ec3f5bec", "committedDate": "2020-04-20T15:52:54Z", "message": "NXP-28619: Enable to delete Kafka topic try to clean test topics"}, "afterCommit": {"oid": "4d23ae82a665e741c37c94c436d79880154ece04", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4d23ae82a665e741c37c94c436d79880154ece04", "committedDate": "2020-04-21T05:52:14Z", "message": "NXP-28619: Enable to delete Kafka topic try to clean test topics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d23ae82a665e741c37c94c436d79880154ece04", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4d23ae82a665e741c37c94c436d79880154ece04", "committedDate": "2020-04-21T05:52:14Z", "message": "NXP-28619: Enable to delete Kafka topic try to clean test topics"}, "afterCommit": {"oid": "37e6d523a06d8c53eb69dde0fa1f5ecc224bfe60", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/37e6d523a06d8c53eb69dde0fa1f5ecc224bfe60", "committedDate": "2020-04-21T06:27:14Z", "message": "NXP-28619: Enable to delete Kafka topic try to clean test topics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37e6d523a06d8c53eb69dde0fa1f5ecc224bfe60", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/37e6d523a06d8c53eb69dde0fa1f5ecc224bfe60", "committedDate": "2020-04-21T06:27:14Z", "message": "NXP-28619: Enable to delete Kafka topic try to clean test topics"}, "afterCommit": {"oid": "9ef91b644786d80302654a0a40d3d06f3ae2d5fd", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9ef91b644786d80302654a0a40d3d06f3ae2d5fd", "committedDate": "2020-04-21T08:03:34Z", "message": "NXP-28619: Enable to delete Kafka topic try to clean test topics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ef91b644786d80302654a0a40d3d06f3ae2d5fd", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9ef91b644786d80302654a0a40d3d06f3ae2d5fd", "committedDate": "2020-04-21T08:03:34Z", "message": "NXP-28619: Enable to delete Kafka topic try to clean test topics"}, "afterCommit": {"oid": "24963b83eb9ed23bdd542c3d3cf0026961635295", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/24963b83eb9ed23bdd542c3d3cf0026961635295", "committedDate": "2020-04-21T12:38:45Z", "message": "NXP-28619: Delete Kafka topic on unit test\n\nDisabling Kafka auto create topic mode.\nUse a random prefix per run to avoid multiple initialization\nwhen using @Deploy annotation on method."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24963b83eb9ed23bdd542c3d3cf0026961635295", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/24963b83eb9ed23bdd542c3d3cf0026961635295", "committedDate": "2020-04-21T12:38:45Z", "message": "NXP-28619: Delete Kafka topic on unit test\n\nDisabling Kafka auto create topic mode.\nUse a random prefix per run to avoid multiple initialization\nwhen using @Deploy annotation on method."}, "afterCommit": {"oid": "ddb78c617aed6fe30b2528ee8fab0ab778fcab3e", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ddb78c617aed6fe30b2528ee8fab0ab778fcab3e", "committedDate": "2020-04-21T12:50:18Z", "message": "NXP-28619: Delete Kafka topic on unit test\n\nDisabling Kafka auto create topic mode.\nUse a random prefix per run to avoid multiple initialization\nwhen using @Deploy annotation on method."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae755e8fa7348a57bdbfef5f87dd547242613bad", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ae755e8fa7348a57bdbfef5f87dd547242613bad", "committedDate": "2020-04-22T06:13:09Z", "message": "NXP-28619: Fix serializer/deserializer class resolution\n\nAvoid doing class resolution within Kafka because of its weird class loader\nthat sometime produce Class not found."}, "afterCommit": {"oid": "edbab86e165a7ca29d7c20f384a378bb9da09796", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/edbab86e165a7ca29d7c20f384a378bb9da09796", "committedDate": "2020-04-22T06:52:59Z", "message": "NXP-28619: Fix serializer/deserializer class resolution\n\nAvoid doing class resolution within Kafka because of its weird class loader\nthat sometime produce Class not found."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53ecb3efcced70e5f621c1015cd3dc7a887cc257", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/53ecb3efcced70e5f621c1015cd3dc7a887cc257", "committedDate": "2020-04-22T10:31:50Z", "message": "NXP-28619: Stop processing before deleting topics in unit test"}, "afterCommit": {"oid": "bf440bc80ad0b259e2af73881572366bb41a7eac", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bf440bc80ad0b259e2af73881572366bb41a7eac", "committedDate": "2020-04-22T12:24:09Z", "message": "NXP-28619: Stop processing before deleting topics in unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTcwMzAy", "url": "https://github.com/nuxeo/nuxeo/pull/3930#pullrequestreview-398170302", "createdAt": "2020-04-22T13:07:12Z", "commit": {"oid": "097bd71e0de4e843113fa3b998381c284da3688a"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowNzoxMlrOGJ1Z2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1NzoxNlrOGJ7A0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2NTMzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"start update metrics: \" + metrics.size());\n          \n          \n            \n                    log.debug(\"start update metrics: {}\", metrics::size);", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r412965336", "createdAt": "2020-04-22T13:07:12Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamMetricsComputation.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream;\n+\n+import static org.nuxeo.lib.stream.computation.log.ComputationRunner.NUXEO_METRICS_REGISTRY_NAME;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.lib.stream.codec.AvroMessageCodec;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.AbstractComputation;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.Watermark;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import io.dropwizard.metrics5.Gauge;\n+import io.dropwizard.metrics5.MetricName;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.dropwizard.metrics5.SharedMetricRegistries;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class StreamMetricsComputation extends AbstractComputation {\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(\n+            StreamMetricsComputation.class);\n+\n+    protected static final String NAME = \"streamMetrics\";\n+\n+    protected MetricRegistry registry = SharedMetricRegistries.getOrCreate(NUXEO_METRICS_REGISTRY_NAME);\n+\n+    protected final long intervalMs;\n+\n+    protected final List<String> inputStreams;\n+\n+    protected final List<String> streams = new ArrayList<>();\n+\n+    protected final Set<String> invalidStreams = new HashSet<>();\n+\n+    protected final List<LogPartitionGroup> groups = new ArrayList<>();\n+\n+    protected final List<LatencyMetric> metrics = new ArrayList<>();\n+\n+    protected LogManager manager;\n+\n+    protected final Codec<Record> codec = new AvroMessageCodec<>(Record.class);\n+\n+    protected long refreshGroupCounter;\n+\n+    public StreamMetricsComputation(Duration interval, List<String> streams) {\n+        super(NAME, 1, 0);\n+        this.intervalMs = interval.toMillis();\n+        this.inputStreams = streams;\n+    }\n+\n+    @Override\n+    public void init(ComputationContext context) {\n+        if (context.isSpareComputation()) {\n+            log.info(\"Spare instance nothing to report\");\n+            unregisterMetrics();\n+        } else {\n+            log.warn(\"Instance elected to report stream metrics\");\n+            context.setTimer(\"tracker\", System.currentTimeMillis() + intervalMs);\n+        }\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        unregisterMetrics();\n+    }\n+\n+    protected void registerMetrics() {\n+        unregisterMetrics();\n+        getGroups().forEach(group -> metrics.add(new LatencyMetric(group, registry)));\n+    }\n+\n+    protected void unregisterMetrics() {\n+        metrics.forEach(LatencyMetric::destroy);\n+        metrics.clear();\n+    }\n+\n+    @Override\n+    public void processTimer(ComputationContext context, String key, long timestamp) {\n+        refreshMetricsIfNeeded();\n+        log.debug(\"start update metrics: \" + metrics.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "097bd71e0de4e843113fa3b998381c284da3688a"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3MTYzNQ==", "bodyText": "Should recordOf call be inside the if?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r412971635", "createdAt": "2020-04-22T13:15:23Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/main/java/org/nuxeo/ecm/platform/audit/listener/StreamAuditEventListener.java", "diffHunk": "@@ -119,18 +118,23 @@ protected void writeEntries() {\n         if (entries.get().isEmpty()) {\n             return;\n         }\n-        LogAppender<Record> appender = getLogManager().getAppender(STREAM_NAME);\n-        entries.get().forEach(entry -> writeEntry(appender, entry));\n+        StreamManager streamManager = getStreamManager();\n+        for (LogEntry entry : entries.get()) {\n+            Record record = recordOf(entry);\n+            if (entry != null) {\n+                streamManager.append(STREAM_NAME, record);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e473a8a93e4cc9a5a443585cd3cc35334ef9cdae"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3NzcxNQ==", "bodyText": "Missing some curly brackets", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r412977715", "createdAt": "2020-04-22T13:23:01Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/Name.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.log;\n+\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An identifier composed of a namespace and a specific name with 2 string representations:<br>\n+ * - an uniform resource name (urn) represented as a relative path: {@code namespace/name}<br>\n+ * - an identifier (id): encode the urn as {@code namespace-name}<br>\n+ *\n+ *\n+ * When there is no namespace, URN and id are identical.\n+ *\n+ * @since 11.1\n+ */\n+public class Name {\n+    public static final String NAMESPACE_GLOBAL = \"_GLOBAL_\";\n+\n+    public static final String NAMESPACE_URN_SEP = \"/\";\n+\n+    public static final String NAMESPACE_ID_SEP = \"-\";\n+\n+    protected static final Pattern VALID_NAMESPACE_PATTERN = Pattern.compile(\"[A-Za-z][A-Za-z0-9_]*\");\n+\n+    protected static final Pattern VALID_LOG_NAME_PATTERN = Pattern.compile(\"[A-Za-z0-9][A-Za-z0-9_\\\\-]*\");\n+\n+    protected static final Pattern VALID_LOG_NAME_WITHOUT_NS_PATTERN = Pattern.compile(\"[A-Za-z0-9][A-Za-z0-9_]*\");\n+\n+    protected final String namespace;\n+\n+    protected final String name;\n+\n+    protected final String id;\n+\n+    protected final String urn;\n+\n+    private Name(String namespace, String name) {\n+        checkNameSpace(namespace);\n+        this.namespace = namespace;\n+        this.name = name;\n+        if (NAMESPACE_GLOBAL.equals(namespace)) {\n+            checkLogNameWithoutNamespace(name);\n+            this.id = name;\n+            this.urn = name;\n+        } else {\n+            checkLogName(name);\n+            this.id = namespace + NAMESPACE_ID_SEP + name;\n+            this.urn = namespace + NAMESPACE_URN_SEP + name;\n+        }\n+    }\n+\n+    public static Name of(String namespace, String name) {\n+        return new Name(namespace, name);\n+    }\n+\n+    public static Name ofUrn(String urn) {\n+        Objects.requireNonNull(urn, \"Null URN\");\n+        int pos = urn.indexOf(NAMESPACE_URN_SEP);\n+        if (pos < 0) {\n+            return new Name(NAMESPACE_GLOBAL, urn);\n+        }\n+        return new Name(urn.substring(0, pos), urn.substring(pos + 1));\n+    }\n+\n+    public static Name ofId(String id) {\n+        Objects.requireNonNull(id, \"Null id\");\n+        int pos = id.indexOf(NAMESPACE_ID_SEP);\n+        if (pos < 0) {\n+            return new Name(NAMESPACE_GLOBAL, id);\n+        }\n+        return new Name(id.substring(0, pos), id.substring(pos + 1));\n+    }\n+\n+    public static String idOfUrn(String urn) {\n+        return Name.ofUrn(urn).getId();\n+    }\n+\n+    public static String urnOfId(String id) {\n+        return Name.ofId(id).getUrn();\n+    }\n+\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public String getUrn() {\n+        return urn;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Name{\" + \"namespace='\" + namespace + '\\'' + \", name='\" + name + '\\'' + \", id='\" + id + '\\'' + \", urn='\"\n+                + urn + '\\'' + '}';\n+    }\n+\n+    protected static void checkLogName(String name) {\n+        if (!VALID_LOG_NAME_PATTERN.matcher(name).matches()) {\n+            throw new IllegalArgumentException(\"Invalid name: '\" + name + \"'.\");\n+        }\n+    }\n+\n+    protected static void checkLogNameWithoutNamespace(String name) {\n+        if (!VALID_LOG_NAME_WITHOUT_NS_PATTERN.matcher(name).matches()) {\n+            throw new IllegalArgumentException(\"Invalid name without namespace: '\" + name + \"'\");\n+        }\n+    }\n+\n+    protected static void checkNameSpace(String name) {\n+        if (!VALID_NAMESPACE_PATTERN.matcher(name).matches() & !NAMESPACE_GLOBAL.equals(name)) {\n+            throw new IllegalArgumentException(\"Invalid namespace: '\" + name + \"'\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+        Name name = (Name) o;\n+        return Objects.equals(urn, name.urn);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e473a8a93e4cc9a5a443585cd3cc35334ef9cdae"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5NTMxNA==", "bodyText": "You can use Stream#of instead of Arrays.asList().stream().", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r412995314", "createdAt": "2020-04-22T13:44:28Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/RestoreCommand.java", "diffHunk": "@@ -210,15 +211,12 @@ protected Latency decodeLatency(byte[] data) {\n         return Latency.fromJson(new String(data, StandardCharsets.UTF_8));\n     }\n \n-    protected List<String> getLogNames(LogManager manager, String names) {\n+    protected List<Name> getLogNames(LogManager manager, String names) {\n         if (ALL_LOGS.equalsIgnoreCase(names)) {\n-            return manager.listAll()\n-                          .stream()\n-                          .filter(name -> !name.startsWith(INTERNAL_LOG_PREFIX))\n-                          .collect(Collectors.toList());\n+            return manager.listAll();\n         }\n-        List<String> ret = Arrays.asList(names.split(\",\"));\n-        for (String name : ret) {\n+        List<Name> ret = Arrays.asList(names.split(\",\")).stream().map(Name::ofUrn).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e473a8a93e4cc9a5a443585cd3cc35334ef9cdae"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5OTk0Ng==", "bodyText": "INPUT_STREAM should be wrapped by Name or we should call getName from name ?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r412999946", "createdAt": "2020-04-22T13:49:58Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/TrackerCommand.java", "diffHunk": "@@ -126,19 +127,16 @@ public boolean run(LogManager manager, CommandLine cmd) {\n         return runProcessor(manager);\n     }\n \n-    protected List<String> getLogNames(LogManager manager, String names) {\n+    protected List<Name> getLogNames(LogManager manager, String names) {\n         if (ALL_LOGS.equalsIgnoreCase(names)) {\n-            return manager.listAll()\n-                          .stream()\n-                          .filter(name -> !name.startsWith(INTERNAL_LOG_PREFIX))\n-                          .filter(name -> !name.startsWith(INPUT_STREAM))\n+            return manager.listAll().stream().filter(name -> !INPUT_STREAM.equals(name))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e473a8a93e4cc9a5a443585cd3cc35334ef9cdae"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwMDY5MA==", "bodyText": "Stream#of should be used.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r413000690", "createdAt": "2020-04-22T13:50:53Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/TrackerCommand.java", "diffHunk": "@@ -126,19 +127,16 @@ public boolean run(LogManager manager, CommandLine cmd) {\n         return runProcessor(manager);\n     }\n \n-    protected List<String> getLogNames(LogManager manager, String names) {\n+    protected List<Name> getLogNames(LogManager manager, String names) {\n         if (ALL_LOGS.equalsIgnoreCase(names)) {\n-            return manager.listAll()\n-                          .stream()\n-                          .filter(name -> !name.startsWith(INTERNAL_LOG_PREFIX))\n-                          .filter(name -> !name.startsWith(INPUT_STREAM))\n+            return manager.listAll().stream().filter(name -> !INPUT_STREAM.equals(name))\n                           .collect(Collectors.toList());\n         }\n-        List<String> ret = Arrays.asList(names.split(\",\"));\n+        List<Name> ret = Arrays.asList(names.split(\",\")).stream().map(Name::ofUrn).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e473a8a93e4cc9a5a443585cd3cc35334ef9cdae"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzNjY0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return isBlank(inputStream) ? name : inputStream;\n          \n          \n            \n                    return defaultIfBlank(inputStream, name);", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r413036641", "createdAt": "2020-04-22T14:33:44Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkActionDescriptor.java", "diffHunk": "@@ -98,4 +103,10 @@ public void setEnabled(boolean isEnabled) {\n     public String getDefaultScroller() {\n         return defaultScroller;\n     }\n+\n+    // @since 11.1\n+    public String getInputStream() {\n+        return isBlank(inputStream) ? name : inputStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc5fb7b2cfe48a613f5081726684dd980f0dee"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0NjM0Ng==", "bodyText": "I saw several produceImmediate removal, is it wanted?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r413046346", "createdAt": "2020-04-22T14:45:01Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/main/resources/OSGI-INF/imaging-bulk-contrib.xml", "diffHunk": "@@ -4,16 +4,14 @@\n   <require>org.nuxeo.ecm.core.bulk</require>\n \n   <extension target=\"org.nuxeo.ecm.core.bulk\" point=\"actions\">\n-    <action name=\"recomputeViews\" bucketSize=\"100\" batchSize=\"50\" httpEnabled=\"false\"\n+    <action name=\"recomputeViews\" inputStream=\"bulk/recomputeViews\" bucketSize=\"100\" batchSize=\"50\" httpEnabled=\"false\"\n       validationClass=\"org.nuxeo.ecm.platform.picture.recompute.RecomputeViewsActionValidation\" />\n   </extension>\n \n   <extension target=\"org.nuxeo.runtime.stream.service\" point=\"streamProcessor\">\n-    <streamProcessor name=\"recomputeViews\"\n-      class=\"org.nuxeo.ecm.platform.picture.recompute.RecomputeViewsAction\" logConfig=\"bulk\" defaultConcurrency=\"2\"\n-      defaultPartitions=\"2\">\n+    <streamProcessor name=\"recomputeViews\" class=\"org.nuxeo.ecm.platform.picture.recompute.RecomputeViewsAction\"\n+      defaultConcurrency=\"2\" defaultPartitions=\"2\">\n       <policy name=\"default\" maxRetries=\"3\" delay=\"1s\" maxDelay=\"10s\" continueOnFailure=\"true\" />\n-      <option name=\"produceImmediate\">false</option>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc5fb7b2cfe48a613f5081726684dd980f0dee"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1NzIzMg==", "bodyText": "You may want to configure in the RuntimeStreamFeature or add LogManager and StreamManager as services of StreamServiceImpl component?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r413057232", "createdAt": "2020-04-22T14:57:16Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestBlobImport.java", "diffHunk": "@@ -49,20 +51,24 @@\n import org.nuxeo.lib.stream.pattern.consumer.ConsumerStatus;\n import org.nuxeo.lib.stream.pattern.producer.ProducerPool;\n import org.nuxeo.lib.stream.pattern.producer.ProducerStatus;\n-import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.stream.StreamService;\n import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n \n @RunWith(FeaturesRunner.class)\n @Features(CoreFeature.class)\n-@Deploy(\"org.nuxeo.runtime.stream\")\n-public abstract class TestBlobImport {\n+public class TestBlobImport {\n     protected static final Log log = LogFactory.getLog(TestBlobImport.class);\n \n     @Rule\n     public TemporaryFolder folder = new TemporaryFolder();\n \n-    public abstract LogManager getManager() throws Exception;\n+    @Inject\n+    StreamService streamService;\n+\n+    protected LogManager getManager() {\n+        return streamService.getLogManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdc69c611775d5e0b16482425936bee8ec90762"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49ef4f63aa752688580272b9567a9fef126b3d2b", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/49ef4f63aa752688580272b9567a9fef126b3d2b", "committedDate": "2020-04-22T16:21:22Z", "message": "NXP-28973: mvn under stereoids"}, "afterCommit": {"oid": "e6ed52ccb1966c0565d8b958c9fa5392397fe34c", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e6ed52ccb1966c0565d8b958c9fa5392397fe34c", "committedDate": "2020-04-22T17:26:56Z", "message": "NXP-28973: mvn under stereoids"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a8ec8bddfddb435deb0536736588874cf2d674e", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0a8ec8bddfddb435deb0536736588874cf2d674e", "committedDate": "2020-04-22T17:51:45Z", "message": "NXP-28973: Try to avoid race condition temporary fix"}, "afterCommit": {"oid": "a237d1ef1acbca8d4a8448b802b65ce57c9abd33", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a237d1ef1acbca8d4a8448b802b65ce57c9abd33", "committedDate": "2020-04-23T07:21:26Z", "message": "NXP-28973: Try to avoid race condition temporary fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6010b733ded1acdbf9b6ad5c2a130ad53b0ff247", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6010b733ded1acdbf9b6ad5c2a130ad53b0ff247", "committedDate": "2020-04-23T12:59:55Z", "message": "NXP-28619 try to lower retention and transaction state options"}, "afterCommit": {"oid": "85b716177f3820a4045d01579f9e84f15c47d12e", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/85b716177f3820a4045d01579f9e84f15c47d12e", "committedDate": "2020-04-23T13:06:06Z", "message": "NXP-28619: Try to lower retention and transaction state options"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85b716177f3820a4045d01579f9e84f15c47d12e", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/85b716177f3820a4045d01579f9e84f15c47d12e", "committedDate": "2020-04-23T13:06:06Z", "message": "NXP-28619: Try to lower retention and transaction state options"}, "afterCommit": {"oid": "e213e89e7da557289761a58d61018ac7b547b90a", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e213e89e7da557289761a58d61018ac7b547b90a", "committedDate": "2020-04-24T05:24:28Z", "message": "NXP-28619: Try to lower retention and transaction state options"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72aeda0a27b03a2b7c40d07694fcc4b41ffcd256", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/72aeda0a27b03a2b7c40d07694fcc4b41ffcd256", "committedDate": "2020-04-24T14:53:12Z", "message": "NXP-28973: Temporary try concurrent build to get faster ci feedback on random"}, "afterCommit": {"oid": "bcd10ea95795f8bee8ec6b75ad769d8da4638409", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bcd10ea95795f8bee8ec6b75ad769d8da4638409", "committedDate": "2020-04-25T14:50:16Z", "message": "NXP-28973: Temporary try concurrent build to get faster ci feedback on random"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bcd10ea95795f8bee8ec6b75ad769d8da4638409", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bcd10ea95795f8bee8ec6b75ad769d8da4638409", "committedDate": "2020-04-25T14:50:16Z", "message": "NXP-28973: Temporary try concurrent build to get faster ci feedback on random"}, "afterCommit": {"oid": "64453a436c715d542edfba9c1dd0e3227f0bb7b5", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/64453a436c715d542edfba9c1dd0e3227f0bb7b5", "committedDate": "2020-04-26T14:00:04Z", "message": "NXP-28801: Upgrade to Kafka 2.5.0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48b0085405de72884c0fe8acc0d11d5bb3801219", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/48b0085405de72884c0fe8acc0d11d5bb3801219", "committedDate": "2020-04-27T10:16:21Z", "message": "NXP-28801: Temporary add debug trace for importer rebalance bug"}, "afterCommit": {"oid": "da3b0ff33ced4ae99aaa2169ed0f50c94eb34229", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/da3b0ff33ced4ae99aaa2169ed0f50c94eb34229", "committedDate": "2020-04-27T13:55:26Z", "message": "NXP-28801: Temporary add debug trace for importer rebalance bug"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27483ec32e53c2c58f6177797cf6bc98d647e739", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/27483ec32e53c2c58f6177797cf6bc98d647e739", "committedDate": "2020-04-29T08:56:17Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}, "afterCommit": {"oid": "0aa6ac9ac3b313c0adc37c4d5b0a6e507b8130c0", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0aa6ac9ac3b313c0adc37c4d5b0a6e507b8130c0", "committedDate": "2020-04-29T09:35:28Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0aa6ac9ac3b313c0adc37c4d5b0a6e507b8130c0", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0aa6ac9ac3b313c0adc37c4d5b0a6e507b8130c0", "committedDate": "2020-04-29T09:35:28Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}, "afterCommit": {"oid": "036048074d2b6306a227670b97a69593e81e1668", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/036048074d2b6306a227670b97a69593e81e1668", "committedDate": "2020-04-30T05:33:20Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "036048074d2b6306a227670b97a69593e81e1668", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/036048074d2b6306a227670b97a69593e81e1668", "committedDate": "2020-04-30T05:33:20Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}, "afterCommit": {"oid": "bd205bc269c9acbec6d735ed246ead777262bbb0", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bd205bc269c9acbec6d735ed246ead777262bbb0", "committedDate": "2020-04-30T06:45:57Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd205bc269c9acbec6d735ed246ead777262bbb0", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bd205bc269c9acbec6d735ed246ead777262bbb0", "committedDate": "2020-04-30T06:45:57Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}, "afterCommit": {"oid": "279bf54160984708a4e8a92818c28848e44e9ff5", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/279bf54160984708a4e8a92818c28848e44e9ff5", "committedDate": "2020-04-30T10:17:54Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "279bf54160984708a4e8a92818c28848e44e9ff5", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/279bf54160984708a4e8a92818c28848e44e9ff5", "committedDate": "2020-04-30T10:17:54Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}, "afterCommit": {"oid": "99c3db616dc9c29ce21795c06d1079816f255269", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/99c3db616dc9c29ce21795c06d1079816f255269", "committedDate": "2020-04-30T14:25:43Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99c3db616dc9c29ce21795c06d1079816f255269", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/99c3db616dc9c29ce21795c06d1079816f255269", "committedDate": "2020-04-30T14:25:43Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}, "afterCommit": {"oid": "2dbfc5e0e6d324ff5b4dba58181431442181f43c", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2dbfc5e0e6d324ff5b4dba58181431442181f43c", "committedDate": "2020-05-04T09:33:39Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2dbfc5e0e6d324ff5b4dba58181431442181f43c", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2dbfc5e0e6d324ff5b4dba58181431442181f43c", "committedDate": "2020-05-04T09:33:39Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}, "afterCommit": {"oid": "092e608f8e2d873a5ece8f41c514b6e88fe5e1d8", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/092e608f8e2d873a5ece8f41c514b6e88fe5e1d8", "committedDate": "2020-05-04T09:48:07Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "092e608f8e2d873a5ece8f41c514b6e88fe5e1d8", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/092e608f8e2d873a5ece8f41c514b6e88fe5e1d8", "committedDate": "2020-05-04T09:48:07Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}, "afterCommit": {"oid": "a21103362cfa8cf02e18e8ca2fb632e65bd807cd", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a21103362cfa8cf02e18e8ca2fb632e65bd807cd", "committedDate": "2020-05-04T10:16:10Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7011ba6a6bbab6f3b4f4dcb8c225f2e26b6c9525", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7011ba6a6bbab6f3b4f4dcb8c225f2e26b6c9525", "committedDate": "2020-05-04T13:44:54Z", "message": "NXP-28619: Use maven enforcer only on Package phase"}, "afterCommit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d2701ff337d32ee3577d2308956dce8c47d96e9f", "committedDate": "2020-05-05T05:28:59Z", "message": "NXP-28619: Use maven enforcer only on Package phase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NzQzMjE0", "url": "https://github.com/nuxeo/nuxeo/pull/3930#pullrequestreview-406743214", "createdAt": "2020-05-06T15:42:40Z", "commit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTo0Mjo0MFrOGRZUuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzoyNzowM1rOGRdnlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5Mzg4MA==", "bodyText": "We want to keep it, no?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r420893880", "createdAt": "2020-05-06T15:42:40Z", "author": {"login": "kevinleturc"}, "path": "Jenkinsfile", "diffHunk": "@@ -30,7 +30,6 @@ testEnvironments= [\n properties([\n   [$class: 'GithubProjectProperty', projectUrlStr: repositoryUrl],\n   [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', daysToKeepStr: '60', numToKeepStr: '60', artifactNumToKeepStr: '5']],\n-  disableConcurrentBuilds(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2Mzc3Mw==", "bodyText": "Isn't problematic to leave a document in repository?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r420963773", "createdAt": "2020-05-06T17:26:20Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/action/DeletionAction.java", "diffHunk": "@@ -70,6 +77,8 @@ protected void compute(CoreSession session, List<String> ids, Map<String, Serial\n                     doc.removeSingleton();\n                 } catch (DocumentNotFoundException e) {\n                     // Document is already deleted\n+                } catch (DocumentExistsException e) {\n+                    log.debug(\"Cannot delete {}: {}\", id, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2NDI0NA==", "bodyText": "new line not needed", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r420964244", "createdAt": "2020-05-06T17:27:03Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestWorkManagerRunWorkInFailure.java", "diffHunk": "@@ -57,8 +57,8 @@\n @Features({ RuntimeStreamFeature.class, CoreFeature.class })\n @Deploy(\"org.nuxeo.ecm.automation.core\")\n @Deploy(\"org.nuxeo.ecm.automation.features\")\n-@Deploy(\"org.nuxeo.ecm.core.event:test-work-dead-letter-queue.xml\")\n @RepositoryConfig(cleanup = Granularity.METHOD)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjIxNzM0", "url": "https://github.com/nuxeo/nuxeo/pull/3930#pullrequestreview-407221734", "createdAt": "2020-05-07T07:41:20Z", "commit": {"oid": "37403840d739a5c08c75b5163708be34b159a6e9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37403840d739a5c08c75b5163708be34b159a6e9", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/37403840d739a5c08c75b5163708be34b159a6e9", "committedDate": "2020-05-07T07:25:36Z", "message": "NXP-29077: fix testFileBlobAndDocumentImport nb of blobs\n\nOn slow Kafka cluster read may return an empty record because assignement\nis not yet done within the 100ms which create a doc with an empty blob"}, "afterCommit": {"oid": "5764e5fa3f7ce5633f7171b0399fc214cec995e4", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5764e5fa3f7ce5633f7171b0399fc214cec995e4", "committedDate": "2020-05-12T16:04:42Z", "message": "NXP-29077: fix testFileBlobAndDocumentImport nb of blobs\n\nOn slow Kafka cluster read may return an empty record because assignement\nis not yet done within the 100ms which create a doc with an empty blob"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5764e5fa3f7ce5633f7171b0399fc214cec995e4", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5764e5fa3f7ce5633f7171b0399fc214cec995e4", "committedDate": "2020-05-12T16:04:42Z", "message": "NXP-29077: fix testFileBlobAndDocumentImport nb of blobs\n\nOn slow Kafka cluster read may return an empty record because assignement\nis not yet done within the 100ms which create a doc with an empty blob"}, "afterCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b1030c72f81fd7449173b14135a0165e620df43a", "committedDate": "2020-05-13T13:43:19Z", "message": "NXP-29077: fix testFileBlobAndDocumentImport nb of blobs\n\nOn slow Kafka cluster read may return an empty record because assignement\nis not yet done within the 100ms which create a doc with an empty blob"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b1030c72f81fd7449173b14135a0165e620df43a", "committedDate": "2020-05-13T13:43:19Z", "message": "NXP-29077: fix testFileBlobAndDocumentImport nb of blobs\n\nOn slow Kafka cluster read may return an empty record because assignement\nis not yet done within the 100ms which create a doc with an empty blob"}, "afterCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d4f409008a2e70995de4c801058ea05dba489448", "committedDate": "2020-05-13T19:40:06Z", "message": "NXP-29077: fix testFileBlobAndDocumentImport nb of blobs\n\nOn slow Kafka cluster read may return an empty record because assignement\nis not yet done within the 100ms which create a doc with an empty blob"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTU0NjQw", "url": "https://github.com/nuxeo/nuxeo/pull/3930#pullrequestreview-410954640", "createdAt": "2020-05-13T14:00:31Z", "commit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "state": "COMMENTED", "comments": {"totalCount": 83, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDowMDozMlrOGUzDnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjo0NDoyMlrOGVabrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2MTIxNQ==", "bodyText": "We probably could add it by default too MAVEN_ARGS and explicitly set it to false at the package step?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424461215", "createdAt": "2020-05-13T14:00:32Z", "author": {"login": "troger"}, "path": "Jenkinsfile", "diffHunk": "@@ -86,7 +86,7 @@ String getDockerTagFrom(String version) {\n \n void runFunctionalTests(String baseDir) {\n   try {\n-    sh \"mvn ${MAVEN_ARGS} -f ${baseDir}/pom.xml verify\"\n+    sh \"mvn ${MAVEN_ARGS} -Dnuxeo.skip.enforcer=true -f ${baseDir}/pom.xml verify\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2NDgyMg==", "bodyText": "Could be removed as we know use TEST_LONG_ROLLOUT_STATUS_TIMEOUT, right?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424464822", "createdAt": "2020-05-13T14:05:21Z", "author": {"login": "troger"}, "path": "Jenkinsfile", "diffHunk": "@@ -261,16 +302,25 @@ pipeline {\n     TEST_HELM_CHART_RELEASE = 'test-release'\n     TEST_NAMESPACE_PREFIX = \"nuxeo-unit-tests-$BRANCH_NAME-$BUILD_NUMBER\".toLowerCase()\n     TEST_SERVICE_DOMAIN_SUFFIX = 'svc.cluster.local'\n-    TEST_REDIS_RESOURCE = \"${TEST_HELM_CHART_RELEASE}-redis-master\"\n-    TEST_ELASTICSEARCH_RESOURCE = \"${TEST_HELM_CHART_RELEASE}-elasticsearch-client\"\n+    TEST_REDIS_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-redis-master\"\n+    TEST_MONGODB_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-mongodb\"\n+    TEST_POSTGRESQL_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-postgresql\"\n+    TEST_ELASTICSEARCH_DATA_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-elasticsearch-data\"\n+    TEST_ELASTICSEARCH_MASTER_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-elasticsearch-master\"\n+    TEST_ELASTICSEARCH_CLIENT_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-elasticsearch-client\"\n+    TEST_KAFKA_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-kafka\"\n+    TEST_KAFKA_PORT = '9092'\n+    TEST_KAFKA_POD_NAME = \"${TEST_KAFKA_K8S_OBJECT}-0\"\n     TEST_DEFAULT_ROLLOUT_STATUS_TIMEOUT = '1m'\n-     // Elasticsearch might take longer\n+    // Elasticsearch might take longer\n     TEST_ELASTICSEARCH_ROLLOUT_STATUS_TIMEOUT = '3m'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2ODQ3NQ==", "bodyText": "Shouldn't we need\npodLabels:\n  branch: $BRANCH_NAME\n  resource: pod\n  team: platform\n  usage: utests\n\non each Elasticsearch pod also for tracking purposes?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424468475", "createdAt": "2020-05-13T14:10:20Z", "author": {"login": "troger"}, "path": "ci/helm/nuxeo-test-elasticsearch-values.yaml", "diffHunk": "@@ -0,0 +1,27 @@\n+elasticsearch:\n+  client:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2OTg2OQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424469869", "createdAt": "2020-05-13T14:12:14Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkActionDescriptor.java", "diffHunk": "@@ -41,6 +43,9 @@\n     @XNode(\"@name\")\n     public String name;\n \n+    @XNode(\"@inputStream\")\n+    public String inputStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MDgzNA==", "bodyText": "Worth adding a @deprecated since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424470834", "createdAt": "2020-05-13T14:13:29Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -57,15 +58,23 @@\n \n     private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(BulkServiceImpl.class);\n \n+    // log config is not needed anymore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MTI5Mw==", "bodyText": "Missing @since on new public constants.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424471293", "createdAt": "2020-05-13T14:14:10Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -57,15 +58,23 @@\n \n     private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(BulkServiceImpl.class);\n \n+    // log config is not needed anymore\n+    @Deprecated\n     public static final String BULK_LOG_MANAGER_NAME = \"bulk\";\n \n     public static final String BULK_KV_STORE_NAME = \"bulk\";\n \n-    public static final String COMMAND_STREAM = \"command\";\n+    public static final String COMMAND_STREAM = \"bulk/command\";\n \n-    public static final String STATUS_STREAM = \"status\";\n+    public static final Name COMMAND_STREAM_NAME = Name.ofUrn(COMMAND_STREAM);\n \n-    public static final String DONE_STREAM = \"done\";\n+    public static final String STATUS_STREAM = \"bulk/status\";\n+\n+    public static final Name STATUS_STREAM_NAME = Name.ofUrn(STATUS_STREAM);\n+\n+    public static final String DONE_STREAM = \"bulk/done\";\n+\n+    public static final Name DONE_STREAM_NAME = Name.ofUrn(DONE_STREAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MTMwNw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424481307", "createdAt": "2020-05-13T14:27:04Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/work/StreamWorkManager.java", "diffHunk": "@@ -106,6 +107,8 @@\n \n     protected long CACHE_LAST_METRIC_DURATION_MS = 1000;\n \n+    public static final String NAMESPACE_PREFIX = \"work/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4NTU5MA==", "bodyText": "Shouldn't we keep it for backward compat'?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424485590", "createdAt": "2020-05-13T14:32:38Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/work/WorkManagerImpl.java", "diffHunk": "@@ -114,19 +115,12 @@\n      */\n     public static final String WORKMANAGER_PROCESSING_DISABLE = \"nuxeo.work.processing.disable\";\n \n-    /**\n-     * The Log Manager name to use for accessing the dead letter queue stream.\n-     *\n-     * @since 11.1\n-     */\n-    public static final String DEFAULT_LOG_MANAGER = \"default\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNjg5OQ==", "bodyText": "Not formatted?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424506899", "createdAt": "2020-05-13T14:59:23Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/work/StreamWorkManagerTest.java", "diffHunk": "@@ -86,20 +86,26 @@ public void testWorkManagerConfigDisableAllAfterStart() {\n \n     @Test\n     public void testWorkIdempotent() throws InterruptedException {\n-        SleepWork work = new SleepWork(getDurationMillis());\n+        long durationMs = 1_000;\n+        SleepWork work = new SleepWork(durationMs);\n         assertTrue(work.isIdempotent());\n+\n         service.schedule(work);\n-        assertTrue(service.awaitCompletion(getDurationMillis() * 5L, TimeUnit.MILLISECONDS));\n+        assertTrue(service.awaitCompletion(60, TimeUnit.SECONDS));\n         tracker.assertDiff(0, 0, 1, 0);\n \n-        // schedule again the exact same work 3 times\n-        service.schedule(work);\n-        service.schedule(work);\n-        service.schedule(work);\n+        // schedule again the exact same work many times\n+        for (int i=0; i<10; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNzg4MA==", "bodyText": "Do we need the String.valueOf(elapsed) as message? As elapsed will be displayed anyway if it fails?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424507880", "createdAt": "2020-05-13T15:00:38Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/work/StreamWorkManagerTest.java", "diffHunk": "@@ -86,20 +86,26 @@ public void testWorkManagerConfigDisableAllAfterStart() {\n \n     @Test\n     public void testWorkIdempotent() throws InterruptedException {\n-        SleepWork work = new SleepWork(getDurationMillis());\n+        long durationMs = 1_000;\n+        SleepWork work = new SleepWork(durationMs);\n         assertTrue(work.isIdempotent());\n+\n         service.schedule(work);\n-        assertTrue(service.awaitCompletion(getDurationMillis() * 5L, TimeUnit.MILLISECONDS));\n+        assertTrue(service.awaitCompletion(60, TimeUnit.SECONDS));\n         tracker.assertDiff(0, 0, 1, 0);\n \n-        // schedule again the exact same work 3 times\n-        service.schedule(work);\n-        service.schedule(work);\n-        service.schedule(work);\n+        // schedule again the exact same work many times\n+        for (int i=0; i<10; i++) {\n+            service.schedule(work);\n+        }\n \n-        // works with the same id are skipped immediately and marked as completed, we don't have to wait 5s\n-        assertTrue(service.awaitCompletion(getDurationMillis() / 2, TimeUnit.MILLISECONDS));\n-        tracker.assertDiff(0, 0, 4, 0);\n+        long start = System.currentTimeMillis();\n+        assertTrue(service.awaitCompletion(60, TimeUnit.SECONDS));\n+        long elapsed = System.currentTimeMillis() - start;\n+        tracker.assertDiff(0, 0, 11, 0);\n+\n+        // works with the same id are skipped immediately and marked as completed\n+        assertTrue(String.valueOf(elapsed), elapsed <= 4_000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwOTI5MQ==", "bodyText": "Sane as above.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424509291", "createdAt": "2020-05-13T15:02:32Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/work/StreamWorkManagerTest.java", "diffHunk": "@@ -158,23 +164,23 @@ public void testNoConcurrentJobsWithSameId() throws InterruptedException {\n     public void onlyLastCoalescingWorkShouldBeExecuted() throws InterruptedException {\n         log.debug(\"StreamWorkManagerTest.onlyLastCoalescingWorkShouldBeExecuted() beginning\");\n         // long work, to serve as a filler\n-        SleepWork longWork = createCoalescing(getDurationMillis() * 100L);\n+        int longDurationMs = 20_000;\n+        int shortDurationMs = 1_000;\n+        SleepWork longWork = createCoalescing(longDurationMs);\n         // short work the only to be actually computed\n-        SleepWork shortWork = createCoalescing(getDurationMillis());\n+        SleepWork shortWork = createCoalescing(shortDurationMs);\n \n-        // we have to let the service warm up as the first offset is falsely set to 0\n         service.schedule(shortWork);\n-        assertTrue(service.awaitCompletion(getDurationMillis() * 2L, TimeUnit.MILLISECONDS));\n-        tracker.assertDiff(0, 0, 1, 0);\n-\n-        // a work will actually be executed only if handled before the next one is scheduled\n-        // it's not the case here and the long works will be skipped\n         service.schedule(longWork);\n         service.schedule(longWork);\n-        // only the last, short work, will actually be computed and waiting for it's execution time is enough\n+        // only the last, short work, will actually be computed and waiting less than a long work is enough\n         service.schedule(shortWork);\n-        assertTrue(service.awaitCompletion(getDurationMillis(), TimeUnit.MILLISECONDS));\n+\n+        long start = System.currentTimeMillis();\n+        assertTrue(service.awaitCompletion(60, TimeUnit.SECONDS));\n+        long elapsed = System.currentTimeMillis() - start;\n         tracker.assertDiff(0, 0, 4, 0);\n+        assertTrue(String.valueOf(elapsed), elapsed < longDurationMs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMTYyNw==", "bodyText": "Not really for documents under legal hold/retention I guess?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424511627", "createdAt": "2020-05-13T15:05:32Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/action/DeletionAction.java", "diffHunk": "@@ -70,6 +77,8 @@ protected void compute(CoreSession session, List<String> ids, Map<String, Serial\n                     doc.removeSingleton();\n                 } catch (DocumentNotFoundException e) {\n                     // Document is already deleted\n+                } catch (DocumentExistsException e) {\n+                    log.debug(\"Cannot delete {}: {}\", id, e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2Mzc3Mw=="}, "originalCommit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMTc3Nw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424511777", "createdAt": "2020-05-13T15:05:44Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/security/RetentionExpiredAction.java", "diffHunk": "@@ -58,11 +58,13 @@\n \n     public static final String ACTION_NAME = \"retentionExpired\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMjk4Mg==", "bodyText": "Is there a NXP to fix it and remove the @Ignore?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424512982", "createdAt": "2020-05-13T15:07:19Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSnapshotPersist.java", "diffHunk": "@@ -52,6 +53,7 @@\n \n @RunWith(FeaturesRunner.class)\n @Features(RuntimeSnaphotFeature.class)\n+@Ignore(\"Fail to udpate on multi stream env\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMzM2OA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424513368", "createdAt": "2020-05-13T15:07:52Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/bulk/AutomationBulkAction.java", "diffHunk": "@@ -56,14 +56,16 @@\n \n     public static final String ACTION_NAME = \"automation\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMzU3Nw==", "bodyText": "Not used?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424513577", "createdAt": "2020-05-13T15:08:06Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/bulk/BulkRunAction.java", "diffHunk": "@@ -50,6 +52,8 @@\n @Operation(id = BulkRunAction.ID, category = Constants.CAT_SERVICES, label = \"Run a bulk command\", addToStudio = true, description = \"Run a bulk action on a set of documents expressed by a NXQL.\")\n public class BulkRunAction {\n \n+    private static Logger log = LogManager.getLogger(BulkRunAction.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNDUxMQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424514511", "createdAt": "2020-05-13T15:09:18Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/bulk/IndexAction.java", "diffHunk": "@@ -39,6 +39,8 @@\n public class IndexAction implements StreamProcessorTopology {\n     public static final String ACTION_NAME = \"index\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNjk4Mw==", "bodyText": "Should we keep them for backward compat'? Or anyway it's not working anymore and customers must update their code?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424516983", "createdAt": "2020-05-13T15:12:38Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/main/java/org/nuxeo/ecm/platform/audit/listener/StreamAuditEventListener.java", "diffHunk": "@@ -61,11 +60,7 @@\n \n     public static final String STREAM_AUDIT_ENABLED_PROP = \"nuxeo.stream.audit.enabled\";\n \n-    public static final String AUDIT_LOG_CONFIG_PROP = \"nuxeo.stream.audit.log.config\";\n-\n-    public static final String DEFAULT_LOG_CONFIG = \"audit\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODMxOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424518318", "createdAt": "2020-05-13T15:14:23Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-csv-export/src/main/java/org/nuxeo/ecm/platform/csv/export/action/CSVExportAction.java", "diffHunk": "@@ -43,12 +43,14 @@\n \n     public static final String ACTION_NAME = \"csvExport\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODYzMQ==", "bodyText": "Same comment as before, do we really need the String.valueOf(eventSize) as message?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424518631", "createdAt": "2020-05-13T15:14:47Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestCommentsMigrator.java", "diffHunk": "@@ -222,7 +222,8 @@ public void testMigrationFromPropertyToSecuredWithCommentParentEmpty() {\n         transactionalFeature.nextTransaction();\n \n         List<LogEvent> events = logCaptureResult.getCaughtEvents();\n-        assertEquals(NB_COMMENTS_BY_FILE + 1, events.size());\n+        int eventSize = events.size();\n+        assertTrue(String.valueOf(eventSize), eventSize >= NB_COMMENTS_BY_FILE + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODczNw==", "bodyText": "Same as above :)", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424518737", "createdAt": "2020-05-13T15:14:55Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestCommentsMigrator.java", "diffHunk": "@@ -265,7 +266,8 @@ public void testMigrationFromPropertyToSecuredWithRemovedParentComment() {\n         transactionalFeature.nextTransaction();\n \n         List<LogEvent> events = logCaptureResult.getCaughtEvents();\n-        assertEquals(NB_COMMENTS_BY_FILE + 1, events.size());\n+        int eventSize = events.size();\n+        assertTrue(String.valueOf(eventSize), eventSize >= NB_COMMENTS_BY_FILE + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxOTA1MQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424519051", "createdAt": "2020-05-13T15:15:16Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/main/java/org/nuxeo/ecm/platform/picture/recompute/RecomputeViewsAction.java", "diffHunk": "@@ -61,14 +61,16 @@\n \n     public static final String ACTION_NAME = \"recomputeViews\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxOTg1OA==", "bodyText": "Shouldn't we use assumeTrue/assumeFalse for that?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424519858", "createdAt": "2020-05-13T15:16:21Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestPictureConversions.java", "diffHunk": "@@ -196,6 +199,10 @@ public void shouldFilterPictureConversions() throws Exception {\n \n     @Test\n     public void pictureConversionsAlwaysHaveExtensions() throws IOException {\n+        if (coreFeature.getStorageConfiguration().isVCSPostgreSQL()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMDAwNQ==", "bodyText": "Same as above.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424520005", "createdAt": "2020-05-13T15:16:33Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestRecomputePictureViews.java", "diffHunk": "@@ -69,9 +70,17 @@\n     @Inject\n     protected AutomationService automationService;\n \n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n     @Test\n     @SuppressWarnings(\"unchecked\")\n     public void testRecomputePictureViews() throws Exception {\n+        if (coreFeature.getStorageConfiguration().isVCSPostgreSQL()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNDc3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                StreamService streamService;\n          \n          \n            \n                protected StreamService streamService;", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424524777", "createdAt": "2020-05-13T15:22:53Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestBlobImport.java", "diffHunk": "@@ -42,26 +44,31 @@\n import org.nuxeo.importer.stream.producer.RandomStringBlobMessageProducerFactory;\n import org.nuxeo.lib.stream.codec.Codec;\n import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.Name;\n import org.nuxeo.lib.stream.pattern.consumer.BatchPolicy;\n import org.nuxeo.lib.stream.pattern.consumer.ConsumerPolicy;\n import org.nuxeo.lib.stream.pattern.consumer.ConsumerPool;\n import org.nuxeo.lib.stream.pattern.consumer.ConsumerStatus;\n import org.nuxeo.lib.stream.pattern.producer.ProducerPool;\n import org.nuxeo.lib.stream.pattern.producer.ProducerStatus;\n-import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.stream.StreamService;\n import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n \n @RunWith(FeaturesRunner.class)\n @Features(CoreFeature.class)\n-@Deploy(\"org.nuxeo.runtime.stream\")\n-public abstract class TestBlobImport {\n+public class TestBlobImport {\n     protected static final Log log = LogFactory.getLog(TestBlobImport.class);\n \n     @Rule\n     public TemporaryFolder folder = new TemporaryFolder();\n \n-    public abstract LogManager getManager() throws Exception;\n+    @Inject\n+    StreamService streamService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNTc1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                StreamService streamService;\n          \n          \n            \n                protected StreamService streamService;", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424525759", "createdAt": "2020-05-13T15:24:14Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestDocumentImport.java", "diffHunk": "@@ -67,53 +65,58 @@\n import org.nuxeo.lib.stream.pattern.producer.ProducerPool;\n import org.nuxeo.lib.stream.pattern.producer.ProducerStatus;\n import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamService;\n import org.nuxeo.runtime.test.runner.Deploy;\n import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n import org.nuxeo.runtime.transaction.TransactionHelper;\n \n @RunWith(FeaturesRunner.class)\n @Features({ CoreFeature.class, RedisFeature.class })\n-@Deploy(\"org.nuxeo.runtime.stream\")\n @Deploy(\"org.nuxeo.importer.stream\")\n @Deploy(\"org.nuxeo.ecm.platform.dublincore\")\n @Deploy(\"org.nuxeo.importer.stream:test-core-type-contrib.xml\")\n-public abstract class TestDocumentImport {\n+public class TestDocumentImport {\n \n     protected static final Log log = LogFactory.getLog(TestDocumentImport.class);\n \n-    public abstract LogManager getManager() throws Exception;\n+    @Inject\n+    StreamService streamService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNjU0Ng==", "bodyText": "This comment could be removed, right?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424526546", "createdAt": "2020-05-13T15:25:16Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestDocumentImport.java", "diffHunk": "@@ -284,22 +289,21 @@ public void testRedisImport() throws Exception {\n         final short NB_PRODUCERS = 5;\n         final int NB_DOCUMENTS = 2 * 100;\n         final String REDIS_PREFIX = \"test.imp\";\n+        final Name LOG_DOC = Name.ofUrn(\"import/redis-doc\");\n         Codec<DocumentMessage> docCodec = StreamImporters.getDocCodec();\n-        try (LogManager manager = getManager()) {\n-            // 1. generate documents with blobs\n-            manager.createIfNotExists(DEFAULT_LOG_DOC_NAME, NB_QUEUE);\n-            ProducerPool<DocumentMessage> producers = new ProducerPool<>(DEFAULT_LOG_DOC_NAME, manager, docCodec,\n-                    new RandomDocumentMessageProducerFactory(NB_DOCUMENTS, \"en_US\", 2, false), NB_PRODUCERS);\n-            List<ProducerStatus> ret = producers.start().get();\n-            assertEquals(NB_PRODUCERS, ret.size());\n-\n-            // 2. import documents into Redis\n-            // DocumentModel root = session.getRootDocument();\n-            ConsumerPool<DocumentMessage> consumers = new ConsumerPool<>(DEFAULT_LOG_DOC_NAME, manager, docCodec,\n-                    new RedisDocumentMessageConsumerFactory(REDIS_PREFIX), ConsumerPolicy.BOUNDED);\n-            List<ConsumerStatus> ret2 = consumers.start().get();\n-            assertEquals(NB_QUEUE, ret2.size());\n-        }\n+        // 1. generate documents with blobs\n+        getLogManager().createIfNotExists(LOG_DOC, NB_QUEUE);\n+        ProducerPool<DocumentMessage> producers = new ProducerPool<>(LOG_DOC.getUrn(), getLogManager(), docCodec,\n+                new RandomDocumentMessageProducerFactory(NB_DOCUMENTS, \"en_US\", 2, false), NB_PRODUCERS);\n+        List<ProducerStatus> ret = producers.start().get();\n+        assertEquals(NB_PRODUCERS, ret.size());\n+\n+        // 2. import documents into Redis\n+        // DocumentModel root = session.getRootDocument();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyODcyOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424528728", "createdAt": "2020-05-13T15:28:04Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/AttachRetentionRuleAction.java", "diffHunk": "@@ -47,13 +47,15 @@\n \n     public static final String ACTION_NAME = \"attachRetentionRule\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyODg4Mg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424528882", "createdAt": "2020-05-13T15:28:14Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "diffHunk": "@@ -52,11 +52,13 @@\n \n     public static final String ACTION_NAME = \"evalInputEventBasedRule\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTAxMg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424529012", "createdAt": "2020-05-13T15:28:22Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/HoldDocumentsAction.java", "diffHunk": "@@ -43,13 +43,15 @@\n \n     public static final String ACTION_NAME = \"holdDocumentsAction\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTEyNg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424529126", "createdAt": "2020-05-13T15:28:31Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/ProcessRetentionEventAction.java", "diffHunk": "@@ -54,11 +54,13 @@\n \n     public static final String ACTION_NAME = \"processRetentionEvent\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTM0OA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424529348", "createdAt": "2020-05-13T15:28:47Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "diffHunk": "@@ -43,18 +43,20 @@\n \n     public static final String ACTION_NAME = \"unholdDocumentsAction\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NTcxOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424575718", "createdAt": "2020-05-13T16:34:16Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-search/nuxeo-search-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/search/test/bulk/RemoveDocumentAction.java", "diffHunk": "@@ -40,25 +42,27 @@\n \n     public static final String ACTION_NAME = \"removeDocuments\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NTg2Ng==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424575866", "createdAt": "2020-05-13T16:34:30Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-thumbnail/src/main/java/org/nuxeo/ecm/platform/thumbnail/action/RecomputeThumbnailsAction.java", "diffHunk": "@@ -61,18 +61,20 @@\n \n     public static final String ACTION_NAME = \"recomputeThumbnails\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NzQ1Mg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424577452", "createdAt": "2020-05-13T16:36:46Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaConfigDescriptor.java", "diffHunk": "@@ -41,6 +41,12 @@\n         protected Properties properties = new Properties();\n     }\n \n+    @XObject(\"admin\")\n+    public static class AdminProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NzUxNg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424577516", "createdAt": "2020-05-13T16:36:51Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaConfigDescriptor.java", "diffHunk": "@@ -59,6 +65,9 @@\n     @XNode(\"consumer\")\n     public ConsumerProperties consumerProperties = new ConsumerProperties();\n \n+    @XNode(\"admin\")\n+    public AdminProperties adminProperties = new AdminProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NzkyMw==", "bodyText": "Safe to remove? (just to check)", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424577923", "createdAt": "2020-05-13T16:37:30Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaConfigService.java", "diffHunk": "@@ -34,26 +34,25 @@\n      */\n     Set<String> listConfigNames();\n \n-    /**\n-     * Returns the Zookeeper servers for a configuration.\n-     *\n-     * @deprecated since 10.2 NXP-24634: we don't want to depend anymore on Zookeeper\n-     */\n-    @Deprecated\n-    String getZkServers(String configName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3ODUwOQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424578509", "createdAt": "2020-05-13T16:38:24Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "diffHunk": "@@ -33,10 +34,16 @@\n @XObject(\"logConfig\")\n public class LogConfigDescriptor implements Descriptor {\n \n+    public static final String SEP = \":\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3ODY2MA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424578660", "createdAt": "2020-05-13T16:38:41Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "diffHunk": "@@ -54,6 +61,21 @@ public String getId() {\n         }\n     }\n \n+    @XObject(value = \"match\")\n+    public static class LogMatchDescriptor implements Descriptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk1ODUzOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424958538", "createdAt": "2020-05-14T08:26:43Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "diffHunk": "@@ -66,6 +88,9 @@ public String getId() {\n     @XNodeList(value = \"log\", type = ArrayList.class, componentType = LogDescriptor.class)\n     public List<LogDescriptor> logs = new ArrayList<>();\n \n+    @XNodeList(value = \"match\", type = ArrayList.class, componentType = LogMatchDescriptor.class)\n+    public List<LogMatchDescriptor> matches = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk1ODYzMA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424958630", "createdAt": "2020-05-14T08:26:51Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "diffHunk": "@@ -80,4 +105,19 @@ public boolean isEnabled() {\n     public void setEnabled(boolean isEnabled) {\n         this.isEnabled = isEnabled;\n     }\n+\n+    // @since 11.1\n+    public boolean isDefault() {\n+        return isDefault;\n+    }\n+\n+    // @since 11.1\n+    public boolean onlyLogDeclaration() {\n+        return name == null && type == null;\n+    }\n+\n+    public List<String> getPatterns() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2MDM5MQ==", "bodyText": "I remembered we prefer to not cache services, for hotreload purposes maybe? @kevinleturc ?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424960391", "createdAt": "2020-05-14T08:29:40Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamMetricsComputation.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream;\n+\n+import static org.nuxeo.lib.stream.computation.log.ComputationRunner.NUXEO_METRICS_REGISTRY_NAME;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.lib.stream.codec.AvroMessageCodec;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.AbstractComputation;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.Watermark;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import io.dropwizard.metrics5.Gauge;\n+import io.dropwizard.metrics5.MetricName;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.dropwizard.metrics5.SharedMetricRegistries;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class StreamMetricsComputation extends AbstractComputation {\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(\n+            StreamMetricsComputation.class);\n+\n+    protected static final String NAME = \"stream/metrics\";\n+\n+    protected MetricRegistry registry = SharedMetricRegistries.getOrCreate(NUXEO_METRICS_REGISTRY_NAME);\n+\n+    protected final long intervalMs;\n+\n+    protected final List<String> inputStreams;\n+\n+    protected final List<Name> streams = new ArrayList<>();\n+\n+    protected final Set<Name> invalidStreams = new HashSet<>();\n+\n+    protected final List<LogPartitionGroup> groups = new ArrayList<>();\n+\n+    protected final List<LatencyMetric> metrics = new ArrayList<>();\n+\n+    protected LogManager manager;\n+\n+    protected final Codec<Record> codec = new AvroMessageCodec<>(Record.class);\n+\n+    protected long refreshGroupCounter;\n+\n+    public StreamMetricsComputation(Duration interval, List<String> streams) {\n+        super(NAME, 1, 0);\n+        this.intervalMs = interval.toMillis();\n+        this.inputStreams = streams;\n+    }\n+\n+    @Override\n+    public void init(ComputationContext context) {\n+        if (context.isSpareComputation()) {\n+            log.info(\"Spare instance nothing to report\");\n+            unregisterMetrics();\n+        } else {\n+            log.warn(\"Instance elected to report stream metrics\");\n+            context.setTimer(\"tracker\", System.currentTimeMillis() + intervalMs);\n+        }\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        unregisterMetrics();\n+    }\n+\n+    protected void registerMetrics() {\n+        unregisterMetrics();\n+        getGroups().forEach(group -> metrics.add(new LatencyMetric(group, registry)));\n+    }\n+\n+    protected void unregisterMetrics() {\n+        metrics.forEach(LatencyMetric::destroy);\n+        metrics.clear();\n+    }\n+\n+    @Override\n+    public void processTimer(ComputationContext context, String key, long timestamp) {\n+        refreshMetricsIfNeeded();\n+        log.debug(\"start update metrics: {}\", metrics::size);\n+        List<LatencyMetric> toRemove = metrics.stream()\n+                                              .filter(metric -> metric.update(getManager(), codec))\n+                                              .collect(Collectors.toList());\n+        toRemove.forEach(LatencyMetric::destroy);\n+        toRemove.forEach(metric -> invalidStreams.add(metric.getStream()));\n+        metrics.removeAll(toRemove);\n+        context.setTimer(\"tracker\", System.currentTimeMillis() + intervalMs);\n+    }\n+\n+    protected void refreshMetricsIfNeeded() {\n+        if (streams.isEmpty() || groups.isEmpty() || metrics.isEmpty() || ++refreshGroupCounter % 5 == 0) {\n+            streams.clear();\n+            groups.clear();\n+            registerMetrics();\n+        }\n+    }\n+\n+    protected List<Name> getStreams() {\n+        if (streams.isEmpty()) {\n+            if (inputStreams == null || inputStreams.isEmpty()) {\n+                streams.addAll(getManager().listAll());\n+                log.debug(\"Use all available streams: {}\", streams);\n+            } else {\n+                inputStreams.forEach(stream -> streams.add(Name.ofUrn(stream)));\n+                log.debug(\"Use input streams: {}\", streams);\n+            }\n+            if (!invalidStreams.isEmpty()) {\n+                streams.removeAll(invalidStreams);\n+                log.debug(\"Filtered list of streams: {}\", streams);\n+            }\n+        }\n+        return streams;\n+    }\n+\n+    protected List<LogPartitionGroup> getGroups() {\n+        if (groups.isEmpty()) {\n+            getStreams().forEach(name -> {\n+                getManager().listConsumerGroups(name)\n+                            .forEach(group -> groups.add(new LogPartitionGroup(group, name, 0)));\n+            });\n+            log.info(\"Update list of consumers: {}\", groups);\n+        }\n+        return groups;\n+    }\n+\n+    protected LogManager getManager() {\n+        if (manager == null) {\n+            manager = Framework.getService(StreamService.class).getLogManager();\n+        }\n+        return manager;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2NjU0Mg==", "bodyText": "Could be just set as default in the interface maybe?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424966542", "createdAt": "2020-05-14T08:39:06Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamServiceImpl.java", "diffHunk": "@@ -77,83 +80,100 @@ public int getApplicationStartedOrder() {\n     }\n \n     @Override\n-    public LogManager getLogManager(String name) {\n-        // TODO: returns a wrapper that don't expose the LogManager#close\n-        if (!logManagers.containsKey(name)) {\n-            LogConfigDescriptor config = getDescriptor(XP_LOG_CONFIG, name);\n-            if (config == null || !config.isEnabled()) {\n-                throw new IllegalArgumentException(\"Unknown or disabled logConfig: \" + name);\n-            }\n-            if (\"kafka\".equalsIgnoreCase(config.type)) {\n-                logManagers.put(name, createKafkaLogManager(config));\n-            } else {\n-                logManagers.put(name, createChronicleLogManager(config));\n-            }\n-        }\n-        return logManagers.get(name);\n+    public LogManager getLogManager() {\n+        return logManager;\n     }\n \n     @Override\n-    public StreamManager getStreamManager(String name) {\n-        return streamManagers.computeIfAbsent(name, app -> new LogStreamManager(getLogManager(name)));\n+    public StreamManager getStreamManager() {\n+        return streamManager;\n     }\n \n-    protected LogManager createKafkaLogManager(LogConfigDescriptor config) {\n-        String kafkaConfig = config.options.getOrDefault(\"kafkaConfig\", \"default\");\n-        KafkaConfigService service = Framework.getService(KafkaConfigService.class);\n-        return new KafkaLogManager(service.getTopicPrefix(kafkaConfig), service.getProducerProperties(kafkaConfig),\n-                service.getConsumerProperties(kafkaConfig));\n+    @Override\n+    public LogManager getLogManager(String name) {\n+        // TODO: returns a wrapper that don't expose the LogManager#close\n+        return getLogManager();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2Njc4OA==", "bodyText": "Same as above.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424966788", "createdAt": "2020-05-14T08:39:29Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamServiceImpl.java", "diffHunk": "@@ -77,83 +80,100 @@ public int getApplicationStartedOrder() {\n     }\n \n     @Override\n-    public LogManager getLogManager(String name) {\n-        // TODO: returns a wrapper that don't expose the LogManager#close\n-        if (!logManagers.containsKey(name)) {\n-            LogConfigDescriptor config = getDescriptor(XP_LOG_CONFIG, name);\n-            if (config == null || !config.isEnabled()) {\n-                throw new IllegalArgumentException(\"Unknown or disabled logConfig: \" + name);\n-            }\n-            if (\"kafka\".equalsIgnoreCase(config.type)) {\n-                logManagers.put(name, createKafkaLogManager(config));\n-            } else {\n-                logManagers.put(name, createChronicleLogManager(config));\n-            }\n-        }\n-        return logManagers.get(name);\n+    public LogManager getLogManager() {\n+        return logManager;\n     }\n \n     @Override\n-    public StreamManager getStreamManager(String name) {\n-        return streamManagers.computeIfAbsent(name, app -> new LogStreamManager(getLogManager(name)));\n+    public StreamManager getStreamManager() {\n+        return streamManager;\n     }\n \n-    protected LogManager createKafkaLogManager(LogConfigDescriptor config) {\n-        String kafkaConfig = config.options.getOrDefault(\"kafkaConfig\", \"default\");\n-        KafkaConfigService service = Framework.getService(KafkaConfigService.class);\n-        return new KafkaLogManager(service.getTopicPrefix(kafkaConfig), service.getProducerProperties(kafkaConfig),\n-                service.getConsumerProperties(kafkaConfig));\n+    @Override\n+    public LogManager getLogManager(String name) {\n+        // TODO: returns a wrapper that don't expose the LogManager#close\n+        return getLogManager();\n     }\n \n-    protected LogManager createChronicleLogManager(LogConfigDescriptor config) {\n-        String basePath = config.options.getOrDefault(\"basePath\", null);\n-        String directory = config.options.getOrDefault(\"directory\", config.getId());\n-        Path path = getChroniclePath(basePath, directory);\n-        String retention = getChronicleRetention(config.options.getOrDefault(\"retention\", null));\n-        return new ChronicleLogManager(path, retention);\n+    @Override\n+    public StreamManager getStreamManager(String name) {\n+        return streamManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMzkwNw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425013907", "createdAt": "2020-05-14T09:53:40Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -150,18 +167,26 @@ public boolean isExternal(String streamName) {\n      *\n      * @since 10.2\n      */\n-    public Settings setCodec(String streamName, Codec<Record> codec) {\n+    public Settings setCodec(Name streamName, Codec<Record> codec) {\n         Objects.requireNonNull(codec);\n         codecs.put(streamName, codec);\n         return this;\n     }\n \n+    public Settings setCodec(String streamName, Codec<Record> codec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNDQzNw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425014437", "createdAt": "2020-05-14T09:54:33Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -150,18 +167,26 @@ public boolean isExternal(String streamName) {\n      *\n      * @since 10.2\n      */\n-    public Settings setCodec(String streamName, Codec<Record> codec) {\n+    public Settings setCodec(Name streamName, Codec<Record> codec) {\n         Objects.requireNonNull(codec);\n         codecs.put(streamName, codec);\n         return this;\n     }\n \n+    public Settings setCodec(String streamName, Codec<Record> codec) {\n+        return setCodec(Name.ofUrn(streamName), codec);\n+    }\n+\n     /**\n      * Gets the codec for a stream.\n      *\n      * @since 10.2\n      */\n     public Codec<Record> getCodec(String streamName) {\n+        return getCodec(Name.ofUrn(streamName));\n+    }\n+\n+    public Codec<Record> getCodec(Name streamName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNDcyMg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425014722", "createdAt": "2020-05-14T09:54:57Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -171,7 +196,7 @@ public Settings setCodec(String streamName, Codec<Record> codec) {\n      *\n      * @since 10.3\n      */\n-    public Settings setPolicy(String computationName, ComputationPolicy policy) {\n+    public Settings setPolicy(Name computationName, ComputationPolicy policy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNDkzNQ==", "bodyText": "Since 10.3.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425014935", "createdAt": "2020-05-14T09:55:11Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -180,21 +205,29 @@ public Settings setPolicy(String computationName, ComputationPolicy policy) {\n         return this;\n     }\n \n+    public Settings setPolicy(String computationName, ComputationPolicy policy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNTMzOQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425015339", "createdAt": "2020-05-14T09:55:48Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -180,21 +205,29 @@ public Settings setPolicy(String computationName, ComputationPolicy policy) {\n         return this;\n     }\n \n+    public Settings setPolicy(String computationName, ComputationPolicy policy) {\n+        return setPolicy(Name.ofUrn(computationName), policy);\n+    }\n+\n     /**\n      * Gets the policy for a computation.\n      *\n      * @since 10.3\n      */\n-    public ComputationPolicy getPolicy(String computationName) {\n+    public ComputationPolicy getPolicy(Name computationName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNTQzNA==", "bodyText": "Since 10.3.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425015434", "createdAt": "2020-05-14T09:55:57Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -180,21 +205,29 @@ public Settings setPolicy(String computationName, ComputationPolicy policy) {\n         return this;\n     }\n \n+    public Settings setPolicy(String computationName, ComputationPolicy policy) {\n+        return setPolicy(Name.ofUrn(computationName), policy);\n+    }\n+\n     /**\n      * Gets the policy for a computation.\n      *\n      * @since 10.3\n      */\n-    public ComputationPolicy getPolicy(String computationName) {\n+    public ComputationPolicy getPolicy(Name computationName) {\n         return policies.getOrDefault(computationName, defaultPolicy);\n     }\n \n+    public ComputationPolicy getPolicy(String computationName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNTY3Ng==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425015676", "createdAt": "2020-05-14T09:56:19Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -204,13 +237,21 @@ public Settings addFilter(String streamName, RecordFilter filter) {\n         return this;\n     }\n \n+    public Settings addFilter(String streamName, RecordFilter filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNTgxNw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425015817", "createdAt": "2020-05-14T09:56:31Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -204,13 +237,21 @@ public Settings addFilter(String streamName, RecordFilter filter) {\n         return this;\n     }\n \n+    public Settings addFilter(String streamName, RecordFilter filter) {\n+        return addFilter(Name.ofUrn(streamName), filter);\n+    }\n+\n     /**\n      * Gets the filter chain for a stream.\n      *\n      * @since 11.1\n      */\n-    public RecordFilterChain getFilterChain(String streamName) {\n+    public RecordFilterChain getFilterChain(Name streamName) {\n         return filters.getOrDefault(streamName, defaultFilter);\n     }\n \n+    public RecordFilterChain getFilterChain(String streamName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxODMwOQ==", "bodyText": "Why not just returning the result of patterns.stream().anyMatch(pattern -> name.getUrn().startsWith(pattern)).", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425018309", "createdAt": "2020-05-14T10:00:38Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/AbstractLogConfig.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.log;\n+\n+import java.util.List;\n+\n+/**\n+ * @since 11.1\n+ */\n+public abstract class AbstractLogConfig implements LogConfig {\n+\n+    protected final List<String> patterns;\n+\n+    protected final boolean defaultConfig;\n+\n+    public AbstractLogConfig(boolean defaultConfig, List<String> patterns) {\n+        this.defaultConfig = defaultConfig;\n+        if (patterns == null) {\n+            throw new IllegalArgumentException(\"patterns required\");\n+        }\n+        this.patterns = patterns;\n+    }\n+\n+    @Override\n+    public boolean isDefault() {\n+        return defaultConfig;\n+    }\n+\n+    @Override\n+    public boolean match(Name name) {\n+        if (patterns.stream().anyMatch(pattern -> name.getUrn().startsWith(pattern))) {\n+            return true;\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTI0OQ==", "bodyText": "Not needed.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425019249", "createdAt": "2020-05-14T10:02:12Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/AbstractLogConfig.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.log;\n+\n+import java.util.List;\n+\n+/**\n+ * @since 11.1\n+ */\n+public abstract class AbstractLogConfig implements LogConfig {\n+\n+    protected final List<String> patterns;\n+\n+    protected final boolean defaultConfig;\n+\n+    public AbstractLogConfig(boolean defaultConfig, List<String> patterns) {\n+        this.defaultConfig = defaultConfig;\n+        if (patterns == null) {\n+            throw new IllegalArgumentException(\"patterns required\");\n+        }\n+        this.patterns = patterns;\n+    }\n+\n+    @Override\n+    public boolean isDefault() {\n+        return defaultConfig;\n+    }\n+\n+    @Override\n+    public boolean match(Name name) {\n+        if (patterns.stream().anyMatch(pattern -> name.getUrn().startsWith(pattern))) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean match(Name name, Name group) {\n+        if (patterns.stream().anyMatch(pattern -> group.getUrn().startsWith(pattern))) {\n+            return true;\n+        }\n+        if (match(name)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTQ0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (match(name)) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return match(name);", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425019444", "createdAt": "2020-05-14T10:02:35Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/AbstractLogConfig.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.log;\n+\n+import java.util.List;\n+\n+/**\n+ * @since 11.1\n+ */\n+public abstract class AbstractLogConfig implements LogConfig {\n+\n+    protected final List<String> patterns;\n+\n+    protected final boolean defaultConfig;\n+\n+    public AbstractLogConfig(boolean defaultConfig, List<String> patterns) {\n+        this.defaultConfig = defaultConfig;\n+        if (patterns == null) {\n+            throw new IllegalArgumentException(\"patterns required\");\n+        }\n+        this.patterns = patterns;\n+    }\n+\n+    @Override\n+    public boolean isDefault() {\n+        return defaultConfig;\n+    }\n+\n+    @Override\n+    public boolean match(Name name) {\n+        if (patterns.stream().anyMatch(pattern -> name.getUrn().startsWith(pattern))) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean match(Name name, Name group) {\n+        if (patterns.stream().anyMatch(pattern -> group.getUrn().startsWith(pattern))) {\n+            return true;\n+        }\n+        if (match(name)) {\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDU0MA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425020540", "createdAt": "2020-05-14T10:04:26Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDY0NQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425020645", "createdAt": "2020-05-14T10:04:37Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDgxOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425020818", "createdAt": "2020-05-14T10:04:53Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDk5OQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425020999", "createdAt": "2020-05-14T10:05:14Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #delete(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean delete(String name) {\n+        return delete(Name.ofUrn(name));\n+    }\n \n     /**\n      * Returns the number of partition of a Log.\n      *\n      * @since 10.2\n      */\n-    int size(String name);\n+    int size(Name name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMTUyNA==", "bodyText": "Keep the existing @since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425021524", "createdAt": "2020-05-14T10:06:02Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #delete(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean delete(String name) {\n+        return delete(Name.ofUrn(name));\n+    }\n \n     /**\n      * Returns the number of partition of a Log.\n      *\n      * @since 10.2\n      */\n-    int size(String name);\n+    int size(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #size(Name)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNjg2Mw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425026863", "createdAt": "2020-05-14T10:14:47Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #delete(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean delete(String name) {\n+        return delete(Name.ofUrn(name));\n+    }\n \n     /**\n      * Returns the number of partition of a Log.\n      *\n      * @since 10.2\n      */\n-    int size(String name);\n+    int size(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #size(Name)} instead\n+     */\n+    @Deprecated\n+    default int size(String name) {\n+        return size(Name.ofUrn(name));\n+    }\n \n     /**\n      * Gets an appender for the Log named {@code name}, uses {@code codec} to encode records. An appender is thread\n      * safe.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogAppender<M> getAppender(String name, Codec<M> codec);\n+    <M extends Externalizable> LogAppender<M> getAppender(Name name, Codec<M> codec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzAyNA==", "bodyText": "Keep the existing @since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425027024", "createdAt": "2020-05-14T10:15:03Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #delete(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean delete(String name) {\n+        return delete(Name.ofUrn(name));\n+    }\n \n     /**\n      * Returns the number of partition of a Log.\n      *\n      * @since 10.2\n      */\n-    int size(String name);\n+    int size(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #size(Name)} instead\n+     */\n+    @Deprecated\n+    default int size(String name) {\n+        return size(Name.ofUrn(name));\n+    }\n \n     /**\n      * Gets an appender for the Log named {@code name}, uses {@code codec} to encode records. An appender is thread\n      * safe.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogAppender<M> getAppender(String name, Codec<M> codec);\n+    <M extends Externalizable> LogAppender<M> getAppender(Name name, Codec<M> codec);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getAppender(Name, Codec)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzYxNA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425027614", "createdAt": "2020-05-14T10:16:05Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #delete(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean delete(String name) {\n+        return delete(Name.ofUrn(name));\n+    }\n \n     /**\n      * Returns the number of partition of a Log.\n      *\n      * @since 10.2\n      */\n-    int size(String name);\n+    int size(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #size(Name)} instead\n+     */\n+    @Deprecated\n+    default int size(String name) {\n+        return size(Name.ofUrn(name));\n+    }\n \n     /**\n      * Gets an appender for the Log named {@code name}, uses {@code codec} to encode records. An appender is thread\n      * safe.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogAppender<M> getAppender(String name, Codec<M> codec);\n+    <M extends Externalizable> LogAppender<M> getAppender(Name name, Codec<M> codec);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getAppender(Name, Codec)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogAppender<M> getAppender(String name, Codec<M> codec) {\n+        return getAppender(Name.ofUrn(name), codec);\n+    }\n \n     /**\n      * Gets an appender for the Log named {@code name}, uses an already defined codec or the legacy encoding to encode\n      * records. An appender is thread safe.\n      */\n+    default <M extends Externalizable> LogAppender<M> getAppender(Name name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzc1OQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425027759", "createdAt": "2020-05-14T10:16:20Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzg3Mg==", "bodyText": "Keep also @since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425027872", "createdAt": "2020-05-14T10:16:33Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODQ5MA==", "bodyText": "No backward compatibility as other methods?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425028490", "createdAt": "2020-05-14T10:17:39Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n+        return getLatencyPerPartition(Name.ofUrn(name), Name.ofUrn(group), codec, timestampExtractor, keyExtractor);\n     }\n \n     /**\n-     * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n-     * Two functions need to be provided to extract the timestamp and a key from a record.\n+     * Returns the latency between consumer {@code group} and producers for a Log.\n      *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatencyPerPartition(String, String, Codec, Function, Function)} instead.\n+     * @since 10.2\n      */\n-    @Deprecated\n-    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group,\n+    default <M extends Externalizable> Latency getLatency(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatencyPerPartition(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatency(String, String, Codec, Function, Function)} instead.\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n     @Deprecated\n-    default <M extends Externalizable> Latency getLatency(String name, String group,\n-            Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatency(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+                                                          Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n      * Returns all the Log names.\n      */\n-    List<String> listAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODU1Mw==", "bodyText": "No backward compatibility as other methods?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425028553", "createdAt": "2020-05-14T10:17:46Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n+        return getLatencyPerPartition(Name.ofUrn(name), Name.ofUrn(group), codec, timestampExtractor, keyExtractor);\n     }\n \n     /**\n-     * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n-     * Two functions need to be provided to extract the timestamp and a key from a record.\n+     * Returns the latency between consumer {@code group} and producers for a Log.\n      *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatencyPerPartition(String, String, Codec, Function, Function)} instead.\n+     * @since 10.2\n      */\n-    @Deprecated\n-    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group,\n+    default <M extends Externalizable> Latency getLatency(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatencyPerPartition(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatency(String, String, Codec, Function, Function)} instead.\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n     @Deprecated\n-    default <M extends Externalizable> Latency getLatency(String name, String group,\n-            Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatency(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+                                                          Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n      * Returns all the Log names.\n      */\n-    List<String> listAll();\n+    List<Name> listAll();\n \n     /**\n      * List the consumer groups for a Log.<br/>\n      * Note that for Kafka it returns only consumers that use the subscribe API.\n      */\n-    List<String> listConsumerGroups(String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODc0Mw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425028743", "createdAt": "2020-05-14T10:18:04Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODk3Mg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425028972", "createdAt": "2020-05-14T10:18:29Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {\n         return createTailer(group, partitions, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+        return createTailer(Name.ofUrn(group), partitions);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Reads records using the\n      * legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTMxMA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029310", "createdAt": "2020-05-14T10:19:06Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {\n         return createTailer(group, partitions, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+        return createTailer(Name.ofUrn(group), partitions);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Reads records using the\n      * legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition) {\n         return createTailer(group, partition, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+        return createTailer(Name.ofUrn(group), partition);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign all {@code partitions} of the Log. Reads records using\n      * the legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Name name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTM5Mg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029392", "createdAt": "2020-05-14T10:19:15Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {\n         return createTailer(group, partitions, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+        return createTailer(Name.ofUrn(group), partitions);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Reads records using the\n      * legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition) {\n         return createTailer(group, partition, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+        return createTailer(Name.ofUrn(group), partition);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign all {@code partitions} of the Log. Reads records using\n      * the legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Name name) {\n         return createTailer(group, name, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+        return createTailer(Name.ofUrn(group), Name.ofUrn(name));\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Use an explicit codec to\n      * decode records. A tailer is NOT thread safe.\n      *\n      * @since 10.2\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition, Codec<M> codec) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition, Codec<M> codec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTQ4NA==", "bodyText": "Keep since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029484", "createdAt": "2020-05-14T10:19:27Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {\n         return createTailer(group, partitions, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+        return createTailer(Name.ofUrn(group), partitions);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Reads records using the\n      * legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition) {\n         return createTailer(group, partition, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+        return createTailer(Name.ofUrn(group), partition);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign all {@code partitions} of the Log. Reads records using\n      * the legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Name name) {\n         return createTailer(group, name, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+        return createTailer(Name.ofUrn(group), Name.ofUrn(name));\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Use an explicit codec to\n      * decode records. A tailer is NOT thread safe.\n      *\n      * @since 10.2\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition, Codec<M> codec) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition, Codec<M> codec) {\n         return createTailer(group, Collections.singletonList(partition), codec);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, LogPartition, Codec)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTYwNQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029605", "createdAt": "2020-05-14T10:19:41Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {\n         return createTailer(group, partitions, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+        return createTailer(Name.ofUrn(group), partitions);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Reads records using the\n      * legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition) {\n         return createTailer(group, partition, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+        return createTailer(Name.ofUrn(group), partition);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign all {@code partitions} of the Log. Reads records using\n      * the legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Name name) {\n         return createTailer(group, name, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+        return createTailer(Name.ofUrn(group), Name.ofUrn(name));\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Use an explicit codec to\n      * decode records. A tailer is NOT thread safe.\n      *\n      * @since 10.2\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition, Codec<M> codec) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition, Codec<M> codec) {\n         return createTailer(group, Collections.singletonList(partition), codec);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, LogPartition, Codec)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition, Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), Collections.singletonList(partition), codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assigns all {@code partitions} of the Log. Uses {@code codec}\n      * to decode records. A tailer is NOT thread safe.\n      *\n      * @since 10.2\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name, Codec<M> codec) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Name name, Codec<M> codec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTczNA==", "bodyText": "Keep since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029734", "createdAt": "2020-05-14T10:19:56Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -142,6 +231,14 @@\n                 codec);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTg0Mw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029843", "createdAt": "2020-05-14T10:20:08Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -156,9 +253,28 @@\n      * <p/>\n      * You should not mix {@link #createTailer} and {@code subscribe} usage using the same {@code group}.\n      */\n-    <M extends Externalizable> LogTailer<M> subscribe(String group, Collection<String> names,\n+    <M extends Externalizable> LogTailer<M> subscribe(Name group, Collection<Name> names,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMDAyOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425030028", "createdAt": "2020-05-14T10:20:30Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -156,9 +253,28 @@\n      * <p/>\n      * You should not mix {@link #createTailer} and {@code subscribe} usage using the same {@code group}.\n      */\n-    <M extends Externalizable> LogTailer<M> subscribe(String group, Collection<String> names,\n+    <M extends Externalizable> LogTailer<M> subscribe(Name group, Collection<Name> names,\n             RebalanceListener listener, Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #subscribe(Name, Collection, RebalanceListener, Codec)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> subscribe(String group, Collection<String> names,\n+            RebalanceListener listener, Codec<M> codec) {\n+        return subscribe(Name.ofUrn(group), names.stream().map(Name::ofUrn).collect(Collectors.toList()), listener,\n+                codec);\n+    }\n+\n+    default <M extends Externalizable> LogTailer<M> subscribe(Name group, Collection<Name> names,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMDQ5NQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425030495", "createdAt": "2020-05-14T10:21:24Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMDU4MQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425030581", "createdAt": "2020-05-14T10:21:34Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMDc1Mg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425030752", "createdAt": "2020-05-14T10:21:55Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMTI1MA==", "bodyText": "Keep since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425031250", "createdAt": "2020-05-14T10:22:51Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMTM1MA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425031350", "createdAt": "2020-05-14T10:23:04Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n+        return getLatencyPerPartition(Name.ofUrn(name), Name.ofUrn(group), codec, timestampExtractor, keyExtractor);\n     }\n \n     /**\n-     * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n-     * Two functions need to be provided to extract the timestamp and a key from a record.\n+     * Returns the latency between consumer {@code group} and producers for a Log.\n      *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatencyPerPartition(String, String, Codec, Function, Function)} instead.\n+     * @since 10.2\n      */\n-    @Deprecated\n-    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group,\n+    default <M extends Externalizable> Latency getLatency(Name name, Name group, Codec<M> codec,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMjA5OQ==", "bodyText": "Keep existing @since 10.2 (?)", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425032099", "createdAt": "2020-05-14T10:24:27Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n+        return getLatencyPerPartition(Name.ofUrn(name), Name.ofUrn(group), codec, timestampExtractor, keyExtractor);\n     }\n \n     /**\n-     * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n-     * Two functions need to be provided to extract the timestamp and a key from a record.\n+     * Returns the latency between consumer {@code group} and producers for a Log.\n      *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatencyPerPartition(String, String, Codec, Function, Function)} instead.\n+     * @since 10.2\n      */\n-    @Deprecated\n-    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group,\n+    default <M extends Externalizable> Latency getLatency(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatencyPerPartition(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatency(String, String, Codec, Function, Function)} instead.\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n     @Deprecated\n-    default <M extends Externalizable> Latency getLatency(String name, String group,\n-            Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatency(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwNjM1MQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425106351", "createdAt": "2020-05-14T12:44:22Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/RebalanceListener.java", "diffHunk": "@@ -31,4 +31,7 @@\n \n     void onPartitionsAssigned(Collection<LogPartition> partitions);\n \n+    default void onPartitionsLost(Collection<LogPartition> partitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d4f409008a2e70995de4c801058ea05dba489448", "committedDate": "2020-05-13T19:40:06Z", "message": "NXP-29077: fix testFileBlobAndDocumentImport nb of blobs\n\nOn slow Kafka cluster read may return an empty record because assignement\nis not yet done within the 100ms which create a doc with an empty blob"}, "afterCommit": {"oid": "8431a1fc1e1b68c658bdcc5a9d51945a55dde75b", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8431a1fc1e1b68c658bdcc5a9d51945a55dde75b", "committedDate": "2020-05-14T13:41:58Z", "message": "NXP-29077: fix testFileBlobAndDocumentImport nb of blobs\n\nOn slow Kafka cluster read may return an empty record because assignement\nis not yet done within the 100ms which create a doc with an empty blob"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a77b3b3db159a5971f9add16f1505f52f965bc4f", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a77b3b3db159a5971f9add16f1505f52f965bc4f", "committedDate": "2020-05-18T07:13:35Z", "message": "NXP-28963: Temporarily ignore (more) tests randomly failing in Jenkins X"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0891dd13566c253761f206caee49bbb2188bdd1", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c0891dd13566c253761f206caee49bbb2188bdd1", "committedDate": "2020-05-18T07:13:35Z", "message": "NXP-28801: Computation context is aware of spare state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7b842d0336484964df54843fba0395e7a90e518", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e7b842d0336484964df54843fba0395e7a90e518", "committedDate": "2020-05-18T07:13:35Z", "message": "NXP-28801: Add a processor to report Nuxeo Stream Metrics\n\nA single thread in the Nuxeo cluster is reporting the global nuxeo\nstream metrics.\nNuxeo stream metrics have been renamed to use tags and global suffix.\nLatency is reported only for consumer that lags.\nUse the proper synchronization when retrieving the lags."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a2e922583eff64c830c596e4bc6ff58f13d76c", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/43a2e922583eff64c830c596e4bc6ff58f13d76c", "committedDate": "2020-05-18T07:13:35Z", "message": "NXP-28877: Use Name object for stream and consumer group"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9b56d854c0ed19f1d3774593ed0c036c0e47a43", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a9b56d854c0ed19f1d3774593ed0c036c0e47a43", "committedDate": "2020-05-18T07:13:35Z", "message": "NXP-28877: Adapt stream importer to LogManager Name object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cfbd4b7020a820aa128470503e6a3e4f58c86ac", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5cfbd4b7020a820aa128470503e6a3e4f58c86ac", "committedDate": "2020-05-18T07:13:35Z", "message": "NXP-28879: Add UnifiedLogManager that can handle multiple configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "272ca51687a6b6492bf7aada9f1e9a710ad21417", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/272ca51687a6b6492bf7aada9f1e9a710ad21417", "committedDate": "2020-05-18T07:13:35Z", "message": "NXP-28879: Use the UnifiedLogManager in nuxeo-runtime-stream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29892afc761ea0a168814aadae5d66b628abcf02", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/29892afc761ea0a168814aadae5d66b628abcf02", "committedDate": "2020-05-18T07:13:35Z", "message": "NXP-28879: Rename all streams and consumer groups\n\nAction names are not changed to not break existing code or REST API,\nthe action's input stream can now be set explicitly in the XP."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8431a1fc1e1b68c658bdcc5a9d51945a55dde75b", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8431a1fc1e1b68c658bdcc5a9d51945a55dde75b", "committedDate": "2020-05-14T13:41:58Z", "message": "NXP-29077: fix testFileBlobAndDocumentImport nb of blobs\n\nOn slow Kafka cluster read may return an empty record because assignement\nis not yet done within the 100ms which create a doc with an empty blob"}, "afterCommit": {"oid": "ddd74590a8c69b83e75f422acfb6ef91423c4fba", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ddd74590a8c69b83e75f422acfb6ef91423c4fba", "committedDate": "2020-05-18T07:18:46Z", "message": "NXP-29077: fix testFileBlobAndDocumentImport nb of blobs\n\nOn slow Kafka cluster read may return an empty record because assignement\nis not yet done within the 100ms which create a doc with an empty blob"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65995eed002c062049c4b56af0ff122f5f1815cf", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/65995eed002c062049c4b56af0ff122f5f1815cf", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28801: Udpate api doc contribs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd4a23e7f2f29f54d9487377aae0579193840b4e", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/fd4a23e7f2f29f54d9487377aae0579193840b4e", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28879: LogConfig may be used jsut to initialize log\n\nWhen not defining a name and a type only take care of the log initialization."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b75687bff8964c9c4b6ac3c0d99eba957cce6188", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b75687bff8964c9c4b6ac3c0d99eba957cce6188", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28879 NXP-28619: Make nuxeo.test.stream=kafka work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aff5f7efaa7c80443b418d38f293f1e697ba68d", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4aff5f7efaa7c80443b418d38f293f1e697ba68d", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28879: Rely on runtime for CQ/Kafka switch on stream importer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb050f92070755ca31f14a1ee7c8f4d5e7e554ad", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cb050f92070755ca31f14a1ee7c8f4d5e7e554ad", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Allow to assume Kafka enablement in runtime stream tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77d6e000a075fe00091a3e46acee81fcd712d48a", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/77d6e000a075fe00091a3e46acee81fcd712d48a", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Only ignore tests ignored for NXP-27559 when run against Chronicle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a66a4ada617711b2aad04098d5daf418da42779", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7a66a4ada617711b2aad04098d5daf418da42779", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Define conditional ignore for Kafka and Chronicle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9a45cea9101c465456e7b680c28db42dfe74672", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d9a45cea9101c465456e7b680c28db42dfe74672", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Refactor unit test chart values/system properties generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c551788b12e579e7f5ad75ad5dddb7854929199f", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c551788b12e579e7f5ad75ad5dddb7854929199f", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Run runtime unit tests with Kafka"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e71c6828f63c877f79bfe7e5d7b9b33e8a1ede7", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3e71c6828f63c877f79bfe7e5d7b9b33e8a1ede7", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Increase log tailer read timeout in TestLog\n\nThis fixes TestLogKafka.testListConsumerGroups failing with:\n```\njava.lang.NullPointerException\n\tat org.nuxeo.lib.stream.tests.log.TestLog.readKey(TestLog.java:938)\n\tat org.nuxeo.lib.stream.tests.log.TestLog.testListConsumerGroups(TestLog.java:714)\n```"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21572c3591a7ce007d8e6486fbddfb0d80b3d5c6", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/21572c3591a7ce007d8e6486fbddfb0d80b3d5c6", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Fix Kafka configuration for unit tests\n\nSet group.initial.rebalance.delay.ms = 10\n\nThe default value in the Kafka Helm chart, 3 seconds, is good for production because it allows to group the rebalancing when starting several nodes.\nYet, for the unit tests, it wastes some time since we are only starting/stopping consumers.\n\nSet offsets.topic.num.partitions = 5\n\nDefault value is 50.\nReducing the number of partitions of the __consumer_offset internal topic will relieve disk IO and save some time, including for the initial rebalancing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c9e8d6549373e704ad886d3d5deb430db63a793", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1c9e8d6549373e704ad886d3d5deb430db63a793", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Make tests independent from Kafka configuration (group.initial.rebalance.delay.ms)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "610fa912d4e9c7a86b66fc3eecddc953348f527a", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/610fa912d4e9c7a86b66fc3eecddc953348f527a", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Run MongoDB/PostgreSQL unit tests with Kafka"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59006c549d3fc0f86134e0f3fbff86bba504c677", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/59006c549d3fc0f86134e0f3fbff86bba504c677", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Refactor K8s rollout status statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cedd11f85cf18ee0b31fd021ae72193e21e057ff", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cedd11f85cf18ee0b31fd021ae72193e21e057ff", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Fix possible random on slow slave"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd79b44f8bcd955b4bd06dbb93cd2e0456707338", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/dd79b44f8bcd955b4bd06dbb93cd2e0456707338", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Prevent failure while commit position of the last batch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1fa287679aabcf2bfa36c0b8eec11c81b8be63e", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e1fa287679aabcf2bfa36c0b8eec11c81b8be63e", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28957: Fix randomly failing TestCommentsMigrator.testMigrationFromPropertyToSecuredWithCommentParentEmpty"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "364313225cdf3c11e00bed685f6d35bc984e4833", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/364313225cdf3c11e00bed685f6d35bc984e4833", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-29047: Enable to delete Kafka topic, applied to UT\n\nDisabling Kafka auto create topic mode.\nUse a random prefix per run to avoid multiple initialization\nwhen using @Deploy annotation on method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2f63ba6ff019b01cc48697e0ab81b0ae8563caa", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f2f63ba6ff019b01cc48697e0ab81b0ae8563caa", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Fix serializer/deserializer class resolution\n\nAvoid doing class resolution within Kafka because of its weird class loader\nthat sometime produce Class not found."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf7de1ffb930c0064a28fb24f10004698685f207", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cf7de1ffb930c0064a28fb24f10004698685f207", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Temporary commit for debug purpose to be removed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e4e72bbda9323d2f222a7396aa955982ae44f01", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1e4e72bbda9323d2f222a7396aa955982ae44f01", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-29047: Stop processing before deleting topics in unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6609150b63c69dbcec2ebbc4f5a0d3525579b309", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6609150b63c69dbcec2ebbc4f5a0d3525579b309", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28973: Deletion action handle document under retention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08fda89749167953ac80a4f8c40635ff5ba0bf31", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/08fda89749167953ac80a4f8c40635ff5ba0bf31", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Test mvn options\n\nDisabling profiling optimisation -XX:TieredStopAtLevel=1 to use less\nresources\nTry to run to use parallelism with 4 threads when possible -T4C\nNote that concurrency must be disabled on Package phase."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7831d172e9e436b1b3a5391a666749db5f6ea9de", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7831d172e9e436b1b3a5391a666749db5f6ea9de", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28728: Avoid SWM race condition with the KV Store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75427c5e921769e4852ba0b7f53978bb2b38f61e", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/75427c5e921769e4852ba0b7f53978bb2b38f61e", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Try to lower retention and transaction state options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "442ff387a81cec5a8e23773e75bda6b6cf1331c7", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/442ff387a81cec5a8e23773e75bda6b6cf1331c7", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-29044: Trace more information in case of CommitFailedException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e09d9df34472b2896cf52954225231571e3d994c", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e09d9df34472b2896cf52954225231571e3d994c", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-29045: Upgrade to Kafka 2.5.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d06e83779fa6447abaef4318f89d3588ec3bcef", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4d06e83779fa6447abaef4318f89d3588ec3bcef", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-29045: Support new Kafka rebalance onPartitionsLost listener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ed64717d563b0678831d2fa341b1b12cf06f4c0", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5ed64717d563b0678831d2fa341b1b12cf06f4c0", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-29044: Temporarly change log level from WARN to INFO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f348f3dba46a8a896cc81699e05d2a2f947b01e4", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f348f3dba46a8a896cc81699e05d2a2f947b01e4", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-29044: Fix commitFailedException during rebalancing\n\nRaise a RebalanceException if poll returns in the middle of\na rebalancing, this prevent to call commit and raise the\nCommitFailedException or RebalanceInProgressException (2.5.0)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ec1ca7019c0136c159bd188f2208f56e1bc59aa", "author": {"user": {"login": "ataillefer", "name": "Antoine Taillefer"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3ec1ca7019c0136c159bd188f2208f56e1bc59aa", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Output pod description in build logs\n\nWe're particularly interested in the node name to be able to monitor its resource consumption afterwards."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5914856ba995bef39a7223473b8c43c33968a9d", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e5914856ba995bef39a7223473b8c43c33968a9d", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Use maven enforcer only on Package phase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65d7249229733a625e9770a98c7c7ae433130e17", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/65d7249229733a625e9770a98c7c7ae433130e17", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-29077: fix testFileBlobAndDocumentImport nb of blobs\n\nOn slow Kafka cluster read may return an empty record because assignement\nis not yet done within the 100ms which create a doc with an empty blob"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "201d53c8bcd2ccf0c3cdefef5a34a0fcc73b3585", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/201d53c8bcd2ccf0c3cdefef5a34a0fcc73b3585", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28877 NXP-28879 NXP-29047: Take into account reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cff65a28b2f09b4ff5f2fbb9f2b5016fffb7c805", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cff65a28b2f09b4ff5f2fbb9f2b5016fffb7c805", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Bump rollout timeouts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc15f0602c540d5cb4bc2fa43697f99d12a13b2f", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/dc15f0602c540d5cb4bc2fa43697f99d12a13b2f", "committedDate": "2020-05-18T09:44:48Z", "message": "NXP-28619: Bump rollout timeouts"}, "afterCommit": {"oid": "cff65a28b2f09b4ff5f2fbb9f2b5016fffb7c805", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cff65a28b2f09b4ff5f2fbb9f2b5016fffb7c805", "committedDate": "2020-05-18T12:08:49Z", "message": "NXP-28619: Bump rollout timeouts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0Mjc3MDAy", "url": "https://github.com/nuxeo/nuxeo/pull/3930#pullrequestreview-414277002", "createdAt": "2020-05-19T09:42:32Z", "commit": {"oid": "cff65a28b2f09b4ff5f2fbb9f2b5016fffb7c805"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTI2NjE3", "url": "https://github.com/nuxeo/nuxeo/pull/3930#pullrequestreview-415126617", "createdAt": "2020-05-20T08:54:30Z", "commit": {"oid": "cff65a28b2f09b4ff5f2fbb9f2b5016fffb7c805"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4768, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}