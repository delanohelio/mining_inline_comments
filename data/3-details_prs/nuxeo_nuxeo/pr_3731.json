{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTg0NDAx", "number": 3731, "title": "improvement-NXP-28633-Allow-a-Nuxeo-Operation-to-subscribe-a-user-to-a-given-notifications", "bodyText": "PR created from https://qa.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-saouana/198/", "createdAt": "2020-02-07T20:19:48Z", "url": "https://github.com/nuxeo/nuxeo/pull/3731", "merged": true, "mergeCommit": {"oid": "50d64ff78e6507779481deb2066d28b090319286"}, "closed": true, "closedAt": "2020-02-11T16:21:26Z", "author": {"login": "nuxeojenkins"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcC4hxRAFqTM1NTc0MzU1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDTJnKgFqTM1NjczMjIyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NzQzNTU4", "url": "https://github.com/nuxeo/nuxeo/pull/3731#pullrequestreview-355743558", "createdAt": "2020-02-10T08:05:30Z", "commit": {"oid": "9be86d86477e737f2608a5c8a229bb8ffcd1e8e2"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTAyMjUx", "url": "https://github.com/nuxeo/nuxeo/pull/3731#pullrequestreview-356102251", "createdAt": "2020-02-10T16:57:08Z", "commit": {"oid": "1ac7fa65802cbef1e85ddda9960d3af1bb57c99c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjo1NzowOFrOFnt2Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzowMDozMFrOFnt-bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE4OTk3MQ==", "bodyText": "I tend to keep this when there is also an empty line separating the class declaration from the first field.", "url": "https://github.com/nuxeo/nuxeo/pull/3731#discussion_r377189971", "createdAt": "2020-02-10T16:57:08Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-features/nuxeo-platform-notification/nuxeo-platform-notification-core/src/test/java/org/nuxeo/ecm/platform/ec/notification/operations/SubscribeAndUnsubscribeTest.java", "diffHunk": "@@ -87,92 +78,85 @@ public void setUp() {\n             listDocs.add(testFile);\n         }\n         listDocModel = new DocumentModelListImpl(listDocs);\n-        ctx = new OperationContext(coreSession);\n-    }\n-\n-    @After\n-    public void closeOperationContext() {\n-        ctx.close();\n     }\n \n     @Test\n     public void testSubscribeAndUnsubscribeOperations() throws OperationException {\n-        OperationChain chain = new OperationChain(\"test-chain\");\n-        chain.add(SubscribeOperation.ID);\n-        ctx.setInput(listDocModel);\n-        String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n-        }\n-\n-        // subscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertEquals(4, docSubscriptions.size());\n-            assertTrue(docSubscriptions.contains(\"Creation\"));\n-            assertTrue(docSubscriptions.contains(\"Modification\"));\n-            assertTrue(docSubscriptions.contains(\"Workflow Change\"));\n-            assertTrue(docSubscriptions.contains(\"Approbation review started\"));\n-        }\n-\n-        chain = new OperationChain(\"test-chain\");\n-        chain.add(UnsubscribeOperation.ID);\n-        ctx.clear();\n-        ctx.setInput(listDocModel);\n-        username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        // unsubscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n+        try (OperationContext ctx = new OperationContext(coreSession)) {\n+            OperationChain chain = new OperationChain(\"test-chain\");\n+            chain.add(SubscribeOperation.ID);\n+            ctx.setInput(listDocModel);\n+            String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n+\n+            // subscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertEquals(4, docSubscriptions.size());\n+                assertTrue(docSubscriptions.contains(\"Creation\"));\n+                assertTrue(docSubscriptions.contains(\"Modification\"));\n+                assertTrue(docSubscriptions.contains(\"Workflow Change\"));\n+                assertTrue(docSubscriptions.contains(\"Approbation review started\"));\n+            }\n+\n+            chain = new OperationChain(\"test-chain\");\n+            chain.add(UnsubscribeOperation.ID);\n+            ctx.clear();\n+            ctx.setInput(listDocModel);\n+            username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            // unsubscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n         }\n     }\n \n     @Test\n     public void testSelectiveSubscribeAndUnsubscribeOperations() throws OperationException {\n-        Map<String, Object> params = new HashMap<>();\n-        params.put(\"notifications\", new StringList(new ArrayList<String>() {private static final long serialVersionUID = 1L;\n-\n-        { add(\"Creation\"); }}));\n-\n-        OperationChain chain = new OperationChain(\"test-chain\");\n-        chain.add(SubscribeOperation.ID).from(params);\n-        ctx.setInput(listDocModel);\n-        String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n-        }\n-\n-        // subscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertEquals(1, docSubscriptions.size());\n-            assertTrue(docSubscriptions.contains(\"Creation\"));\n-        }\n-\n-        chain = new OperationChain(\"test-chain\");\n-        chain.add(UnsubscribeOperation.ID).from(params);\n-        ctx.clear();\n-        ctx.setInput(listDocModel);\n-        username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        // unsubscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n+        try (OperationContext ctx = new OperationContext(coreSession)) {\n+            Map<String, Object> params = Map.of(\"notifications\", List.of(\"Creation\"));\n+            OperationChain chain = new OperationChain(\"test-chain\");\n+            chain.add(SubscribeOperation.ID).from(params);\n+            ctx.setInput(listDocModel);\n+            String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n+\n+            // subscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertEquals(1, docSubscriptions.size());\n+                assertTrue(docSubscriptions.contains(\"Creation\"));\n+            }\n+\n+            chain = new OperationChain(\"test-chain\");\n+            chain.add(UnsubscribeOperation.ID).from(params);\n+            ctx.clear();\n+            ctx.setInput(listDocModel);\n+            username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            // unsubscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n         }\n     }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac7fa65802cbef1e85ddda9960d3af1bb57c99c"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5MjA0NQ==", "bodyText": "I get a different result when I format this (one liner)", "url": "https://github.com/nuxeo/nuxeo/pull/3731#discussion_r377192045", "createdAt": "2020-02-10T17:00:30Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/resources/OSGI-INF/operations-contrib.xml", "diffHunk": "@@ -6,7 +6,7 @@\n   <documentation>@author Bogdan Stefanescu (bs@nuxeo.com)</documentation>\n \n   <extension target=\"org.nuxeo.ecm.core.operation.OperationServiceComponent\"\n-    point=\"operations\">\n+             point=\"operations\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac7fa65802cbef1e85ddda9960d3af1bb57c99c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "398c5b05a2e5b1f00b5fa5d0873f7ed721dfab38", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/398c5b05a2e5b1f00b5fa5d0873f7ed721dfab38", "committedDate": "2020-02-10T17:20:52Z", "message": "NXP-28633: Cleanup / Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23741626f21320bca39af1e5b87a69a5148cd975", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/23741626f21320bca39af1e5b87a69a5148cd975", "committedDate": "2020-02-10T17:20:52Z", "message": "NXP-28633: Allow a Nuxeo Operation to subscribe a user to a given notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9be86d86477e737f2608a5c8a229bb8ffcd1e8e2", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9be86d86477e737f2608a5c8a229bb8ffcd1e8e2", "committedDate": "2020-02-07T12:59:31Z", "message": "NXP-28633: Allow a Nuxeo Operation to subscribe a user to a given notifications"}, "afterCommit": {"oid": "23741626f21320bca39af1e5b87a69a5148cd975", "author": {"user": {"login": "RSalem07", "name": "Salem Aouana"}}, "url": "https://github.com/nuxeo/nuxeo/commit/23741626f21320bca39af1e5b87a69a5148cd975", "committedDate": "2020-02-10T17:20:52Z", "message": "NXP-28633: Allow a Nuxeo Operation to subscribe a user to a given notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDI5MTc1", "url": "https://github.com/nuxeo/nuxeo/pull/3731#pullrequestreview-356429175", "createdAt": "2020-02-11T05:58:52Z", "commit": {"oid": "23741626f21320bca39af1e5b87a69a5148cd975"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NzMyMjI0", "url": "https://github.com/nuxeo/nuxeo/pull/3731#pullrequestreview-356732224", "createdAt": "2020-02-11T15:06:33Z", "commit": {"oid": "23741626f21320bca39af1e5b87a69a5148cd975"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4842, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}