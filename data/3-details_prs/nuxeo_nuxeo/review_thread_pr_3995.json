{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyODc5OTk1", "number": 3995, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1MTozN1rOD5cIrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1MTozN1rOD5cIrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTU2Mzk5OnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-platform-audit/nuxeo-platform-audit-core/src/test/java/org/nuxeo/ecm/platform/audit/TestSimpleTemplateBasedRootAudit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1MTozN1rOGQtOAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1MTozN1rOGQtOAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MTI2Ng==", "bodyText": "In the future please use L instead of l for readability. l is very easily confused with 1.", "url": "https://github.com/nuxeo/nuxeo/pull/3995#discussion_r420171266", "createdAt": "2020-05-05T14:51:37Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-platform-audit/nuxeo-platform-audit-core/src/test/java/org/nuxeo/ecm/platform/audit/TestSimpleTemplateBasedRootAudit.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Salem Aouana\n+ */\n+\n+package org.nuxeo.ecm.platform.audit;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.api.security.ACE;\n+import org.nuxeo.ecm.core.api.security.ACL;\n+import org.nuxeo.ecm.core.api.security.ACP;\n+import org.nuxeo.ecm.platform.audit.api.LogEntry;\n+import org.nuxeo.ecm.platform.query.api.PageProvider;\n+import org.nuxeo.ecm.platform.query.api.PageProviderService;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * The root init acl which happens at\n+ * {@link org.nuxeo.ecm.platform.content.template.factories.SimpleTemplateBasedRootFactory}. Should occur only once, at\n+ * the beginning when we add the first children of the root document.\n+ * <p>\n+ * Deploying a new contribution for a given test method, will call the {@code SimpleTemplateBasedRootFactory} for a\n+ * second time, but as the root documents already contains children, we should not init the acl of the root document.\n+ * \n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(AuditFeature.class)\n+public class TestSimpleTemplateBasedRootAudit {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected PageProviderService pps;\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.audit.tests:test-add-content-template-contrib.xml\")\n+    public void shouldInitRootAclOnlyOnce() {\n+        DocumentModel root = session.getDocument(new PathRef(\"/\"));\n+        @SuppressWarnings(\"unchecked\")\n+        PageProvider<LogEntry> pp = (PageProvider<LogEntry>) pps.getPageProvider(\"DOCUMENT_HISTORY_PROVIDER\", null, 3l,\n+                0l, new HashMap<String, Serializable>(), root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f33dc0fc07265c4c440c81ad5b7fe68c0684401"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4206, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}