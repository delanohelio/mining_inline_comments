{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzU5MDY2", "number": 4500, "title": "NXP-29815: add an endpoint to recompute video renditions", "bodyText": "", "createdAt": "2020-12-01T14:51:02Z", "url": "https://github.com/nuxeo/nuxeo/pull/4500", "merged": true, "mergeCommit": {"oid": "cfeedd5da004c01617e11fd7a186dc6cf46dc133"}, "closed": true, "closedAt": "2021-07-15T12:27:33Z", "author": {"login": "charlesboidot"}, "timelineItems": {"totalCount": 73, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh7LQnABqjQwNTc2MTQwNzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeoViGsgFqTcwMTgyNDUzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7af921c3cff5d80c01b534cf693dbaae94c55b10", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7af921c3cff5d80c01b534cf693dbaae94c55b10", "committedDate": "2020-12-01T14:49:19Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "930e8508482307bb4eba8e9fbdc2846b1fd90d2e", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/930e8508482307bb4eba8e9fbdc2846b1fd90d2e", "committedDate": "2020-12-01T14:52:11Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "930e8508482307bb4eba8e9fbdc2846b1fd90d2e", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/930e8508482307bb4eba8e9fbdc2846b1fd90d2e", "committedDate": "2020-12-01T14:52:11Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "74967fa4e0781df710ee975a6522599209f986b5", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/74967fa4e0781df710ee975a6522599209f986b5", "committedDate": "2020-12-03T13:06:25Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74967fa4e0781df710ee975a6522599209f986b5", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/74967fa4e0781df710ee975a6522599209f986b5", "committedDate": "2020-12-03T13:06:25Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "274fb1db36130308caca65d25be80ef813110cc3", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/274fb1db36130308caca65d25be80ef813110cc3", "committedDate": "2020-12-03T13:44:57Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "274fb1db36130308caca65d25be80ef813110cc3", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/274fb1db36130308caca65d25be80ef813110cc3", "committedDate": "2020-12-03T13:44:57Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "0235b9691f109e5945ba8f668a22f9e73c0b4246", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0235b9691f109e5945ba8f668a22f9e73c0b4246", "committedDate": "2020-12-07T09:23:15Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0235b9691f109e5945ba8f668a22f9e73c0b4246", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0235b9691f109e5945ba8f668a22f9e73c0b4246", "committedDate": "2020-12-07T09:23:15Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "3d4fc36bbf8afd4242478a897c4a12fc3e459df3", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3d4fc36bbf8afd4242478a897c4a12fc3e459df3", "committedDate": "2020-12-08T09:40:32Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d4fc36bbf8afd4242478a897c4a12fc3e459df3", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3d4fc36bbf8afd4242478a897c4a12fc3e459df3", "committedDate": "2020-12-08T09:40:32Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "a7522df455603dbe82fedf2a23d2dd2a6286232a", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a7522df455603dbe82fedf2a23d2dd2a6286232a", "committedDate": "2020-12-09T14:02:46Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7522df455603dbe82fedf2a23d2dd2a6286232a", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a7522df455603dbe82fedf2a23d2dd2a6286232a", "committedDate": "2020-12-09T14:02:46Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/546c26be19a84e2e1ce193fca771662957ee0008", "committedDate": "2020-12-09T15:44:05Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTkyMjY1", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-548192265", "createdAt": "2020-12-09T13:41:47Z", "commit": {"oid": "3d4fc36bbf8afd4242478a897c4a12fc3e459df3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzo0MTo0N1rOICVKwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjoyNTozOFrOICdiXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMxNDg4MA==", "bodyText": "Versions should be declared in the root pom under the dependencyManagement element.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539314880", "createdAt": "2020-12-09T13:41:47Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-core/pom.xml", "diffHunk": "@@ -48,7 +48,9 @@\n     </dependency>\n     <dependency>\n       <groupId>org.nuxeo.ecm.platform</groupId>\n-      <artifactId>nuxeo-platform-video</artifactId>\n+      <artifactId>nuxeo-platform-video-core</artifactId>\n+      <version>11.4-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4fc36bbf8afd4242478a897c4a12fc3e459df3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMxNTYzOQ==", "bodyText": "You'll need to change all your since since we're now on the 11.5 track.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539315639", "createdAt": "2020-12-09T13:42:52Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionActionValidation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_XPATH;\n+\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+\n+/**\n+ * @since 11.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4fc36bbf8afd4242478a897c4a12fc3e459df3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyMDEzNw==", "bodyText": "Could you validate that the conversion exists here? As it, unknown conversions will be rejected on command submission and therefore such error during processing will be avoided.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539320137", "createdAt": "2020-12-09T13:48:50Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionActionValidation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction.PARAM_XPATH;\n+\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+\n+/**\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionActionValidation extends AbstractBulkActionValidation {\n+\t@Override\n+\tprotected List<String> getParametersToValidate() {\n+\t\treturn List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n+\t}\n+\n+\t@Override\n+\tprotected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\t\tString xpath = command.getParam(PARAM_XPATH);\n+\t\tvalidateXpath(PARAM_XPATH, xpath, command);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4fc36bbf8afd4242478a897c4a12fc3e459df3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyMDkyNA==", "bodyText": "You're using tabs in this file, can you convert them to spaces?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539320924", "createdAt": "2020-12-09T13:49:49Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4fc36bbf8afd4242478a897c4a12fc3e459df3"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM0MjczNw==", "bodyText": "recomputeRenditions looks a bit too generic to me, what about recomputeVideo or recomputeTranscodedVideo or recomputeVideoConversion?\nThe change should also be done to classes.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539342737", "createdAt": "2020-12-09T14:17:52Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7522df455603dbe82fedf2a23d2dd2a6286232a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM5NzAxMw==", "bodyText": "The conversionName parameter value should be a List like CSVProjectionComputation#PARAM_SCHEMAS to avoid splitting.\nThe empty list case should represent Compute all conversions case.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539397013", "createdAt": "2020-12-09T15:21:53Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n+\n+\t// @since 11.4\n+\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+\tpublic static final String PARAM_XPATH = \"xpath\";\n+\n+\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+\t@Override\n+\tpublic Topology getTopology(Map<String, String> options) {\n+\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n+\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n+\t}\n+\n+\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+\t\tprotected String xpath;\n+\n+\t\tprotected String conversionName;\n+\n+\t\tpublic RecomputeRenditionsComputation() {\n+\t\t\tsuper(ACTION_FULL_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void startBucket(String bucketKey) {\n+\t\t\tBulkCommand command = getCurrentCommand();\n+\t\t\txpath = command.getParam(PARAM_XPATH);\n+\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+\t\t\tfor (String docId : ids) {\n+\t\t\t\tif (!session.exists(new IdRef(docId))) {\n+\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n+\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n+\t\t\t\tif (blob == null) {\n+\t\t\t\t\t// do nothing\n+\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tString title = workingDocument.getTitle();\n+\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n+\t\t\t\t\tVideo video = videoDoc.getVideo();\n+\n+\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n+\n+\t\t\t\t\tif (\"*\".equals(conversionName)) {\n+\t\t\t\t\t\t// Recomputing all available renditions\n+\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// Recomputing wanted renditions\n+\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition list\n+\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n+\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n+\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition\n+\t\t\t\t\t\t\tconversionNames.add(conversionName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7522df455603dbe82fedf2a23d2dd2a6286232a"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM5ODgxMg==", "bodyText": "You could use the code below to avoid the Serializable cast on line 156:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n          \n          \n            \n            \t\t\t\tvar transcodedVideos = new ArrayList<Map<String, Serializable>>();", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539398812", "createdAt": "2020-12-09T15:23:56Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n+\n+\t// @since 11.4\n+\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+\tpublic static final String PARAM_XPATH = \"xpath\";\n+\n+\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+\t@Override\n+\tpublic Topology getTopology(Map<String, String> options) {\n+\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n+\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n+\t}\n+\n+\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+\t\tprotected String xpath;\n+\n+\t\tprotected String conversionName;\n+\n+\t\tpublic RecomputeRenditionsComputation() {\n+\t\t\tsuper(ACTION_FULL_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void startBucket(String bucketKey) {\n+\t\t\tBulkCommand command = getCurrentCommand();\n+\t\t\txpath = command.getParam(PARAM_XPATH);\n+\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+\t\t\tfor (String docId : ids) {\n+\t\t\t\tif (!session.exists(new IdRef(docId))) {\n+\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n+\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n+\t\t\t\tif (blob == null) {\n+\t\t\t\t\t// do nothing\n+\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tString title = workingDocument.getTitle();\n+\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7522df455603dbe82fedf2a23d2dd2a6286232a"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxMTg2Nw==", "bodyText": "As conversion could be very long on video, we need to commitOrRollback the transaction just before starting the conversion and start a new one after.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539411867", "createdAt": "2020-12-09T15:39:01Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n+\n+\t// @since 11.4\n+\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+\tpublic static final String PARAM_XPATH = \"xpath\";\n+\n+\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+\t@Override\n+\tpublic Topology getTopology(Map<String, String> options) {\n+\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n+\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n+\t}\n+\n+\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+\t\tprotected String xpath;\n+\n+\t\tprotected String conversionName;\n+\n+\t\tpublic RecomputeRenditionsComputation() {\n+\t\t\tsuper(ACTION_FULL_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void startBucket(String bucketKey) {\n+\t\t\tBulkCommand command = getCurrentCommand();\n+\t\t\txpath = command.getParam(PARAM_XPATH);\n+\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+\t\t\tfor (String docId : ids) {\n+\t\t\t\tif (!session.exists(new IdRef(docId))) {\n+\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n+\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n+\t\t\t\tif (blob == null) {\n+\t\t\t\t\t// do nothing\n+\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tString title = workingDocument.getTitle();\n+\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n+\t\t\t\t\tVideo video = videoDoc.getVideo();\n+\n+\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n+\n+\t\t\t\t\tif (\"*\".equals(conversionName)) {\n+\t\t\t\t\t\t// Recomputing all available renditions\n+\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// Recomputing wanted renditions\n+\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition list\n+\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n+\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n+\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition\n+\t\t\t\t\t\t\tconversionNames.add(conversionName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (String conversion : conversionNames) {\n+\t\t\t\t\t\tconversionName = conversion;\n+\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n+\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n+\n+\t\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7522df455603dbe82fedf2a23d2dd2a6286232a"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxMzcyMw==", "bodyText": "I didn't find any relevant events to fire, you can delete this part.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539413723", "createdAt": "2020-12-09T15:41:06Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n+\n+\t// @since 11.4\n+\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+\tpublic static final String PARAM_XPATH = \"xpath\";\n+\n+\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+\t@Override\n+\tpublic Topology getTopology(Map<String, String> options) {\n+\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n+\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n+\t}\n+\n+\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+\t\tprotected String xpath;\n+\n+\t\tprotected String conversionName;\n+\n+\t\tpublic RecomputeRenditionsComputation() {\n+\t\t\tsuper(ACTION_FULL_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void startBucket(String bucketKey) {\n+\t\t\tBulkCommand command = getCurrentCommand();\n+\t\t\txpath = command.getParam(PARAM_XPATH);\n+\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+\t\t\tfor (String docId : ids) {\n+\t\t\t\tif (!session.exists(new IdRef(docId))) {\n+\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n+\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n+\t\t\t\tif (blob == null) {\n+\t\t\t\t\t// do nothing\n+\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tString title = workingDocument.getTitle();\n+\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n+\t\t\t\t\tVideo video = videoDoc.getVideo();\n+\n+\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n+\n+\t\t\t\t\tif (\"*\".equals(conversionName)) {\n+\t\t\t\t\t\t// Recomputing all available renditions\n+\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// Recomputing wanted renditions\n+\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition list\n+\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n+\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n+\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition\n+\t\t\t\t\t\t\tconversionNames.add(conversionName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (String conversion : conversionNames) {\n+\t\t\t\t\t\tconversionName = conversion;\n+\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n+\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n+\n+\t\t\t\t\t}\n+\t\t\t\t\tworkingDocument.setPropertyValue(VideoConstants.TRANSCODED_VIDEOS_PROPERTY,\n+\t\t\t\t\t\t\t(Serializable) transcodedVideos);\n+\t\t\t\t\tsession.saveDocument(workingDocument);\n+\t\t\t\t} catch (DocumentNotFoundException e) {\n+\t\t\t\t\t// a parent of the document may have been deleted.\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (workingDocument.isVersion()) {\n+\t\t\t\t\tworkingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+\t\t\t\t}\n+\t\t\t\tworkingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(\"\", Boolean.TRUE);\n+\t\t\t\tsession.saveDocument(workingDocument);\n+\n+\t\t\t\tDocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n+\t\t\t\tEvent event = ctx.newEvent(\"\");\n+\t\t\t\tFramework.getService(EventService.class).fireEvent(event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7522df455603dbe82fedf2a23d2dd2a6286232a"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNDcxMg==", "bodyText": "To delete?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539414712", "createdAt": "2020-12-09T15:42:10Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeRenditionsAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.picture.listener.PictureViewsGenerationListener.DISABLE_PICTURE_VIEWS_GENERATION_LISTENER;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.ecm.platform.video.adapter.VideoDocumentAdapter;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described\n+ * by the given xpath.\n+ *\n+ * @since 11.4\n+ */\n+public class RecomputeRenditionsAction implements StreamProcessorTopology {\n+\n+\tprivate static final Logger log = LogManager.getLogger(RecomputeRenditionsAction.class);\n+\n+\tpublic static final String ACTION_NAME = \"recomputeRenditions\";\n+\n+\t// @since 11.4\n+\tpublic static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+\tpublic static final String PARAM_XPATH = \"xpath\";\n+\n+\tpublic static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+\t@Override\n+\tpublic Topology getTopology(Map<String, String> options) {\n+\t\treturn Topology.builder().addComputation(RecomputeRenditionsComputation::new, //\n+\t\t\t\tArrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM)).build();\n+\t}\n+\n+\tpublic static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+\t\tpublic static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+\t\tprotected String xpath;\n+\n+\t\tprotected String conversionName;\n+\n+\t\tpublic RecomputeRenditionsComputation() {\n+\t\t\tsuper(ACTION_FULL_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void startBucket(String bucketKey) {\n+\t\t\tBulkCommand command = getCurrentCommand();\n+\t\t\txpath = command.getParam(PARAM_XPATH);\n+\t\t\tconversionName = command.getParam(PARAM_CONVERSION_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+\t\t\tlog.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+\t\t\tfor (String docId : ids) {\n+\t\t\t\tif (!session.exists(new IdRef(docId))) {\n+\t\t\t\t\tlog.debug(\"Doc id doesn't exist: {}\", docId);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tDocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+\t\t\t\tProperty fileProp = workingDocument.getProperty(xpath);\n+\t\t\t\tBlob blob = (Blob) fileProp.getValue();\n+\t\t\t\tif (blob == null) {\n+\t\t\t\t\t// do nothing\n+\t\t\t\t\tlog.debug(\"No blob for doc: {}\", workingDocument);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tString title = workingDocument.getTitle();\n+\t\t\t\tList<Map<String, Serializable>> transcodedVideos = new ArrayList<>();\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tVideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+\t\t\t\t\tVideoService videoService = Framework.getService(VideoService.class);\n+\t\t\t\t\tVideo video = videoDoc.getVideo();\n+\n+\t\t\t\t\tList<String> conversionNames = new ArrayList<>();\n+\n+\t\t\t\t\tif (\"*\".equals(conversionName)) {\n+\t\t\t\t\t\t// Recomputing all available renditions\n+\t\t\t\t\t\tfor (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+\t\t\t\t\t\t\tconversionNames.add(conversion.getName());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// Recomputing wanted renditions\n+\t\t\t\t\t\tif(conversionName.contains(\"-\")) {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition list\n+\t\t\t\t\t\t\tString[] conversions = conversionName.split(\"-\");\n+\t\t\t\t\t\t\tfor (int i = 0; i < conversions.length; i++) {\n+\t\t\t\t\t\t\t\tconversionNames.add(conversions[i]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t// Recomputing a specific rendition\n+\t\t\t\t\t\t\tconversionNames.add(conversionName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (String conversion : conversionNames) {\n+\t\t\t\t\t\tconversionName = conversion;\n+\t\t\t\t\t\tTranscodedVideo transcodedVideo = videoService.convert(video, conversionName);\n+\t\t\t\t\t\ttranscodedVideos.add(transcodedVideo.toMap());\n+\n+\t\t\t\t\t}\n+\t\t\t\t\tworkingDocument.setPropertyValue(VideoConstants.TRANSCODED_VIDEOS_PROPERTY,\n+\t\t\t\t\t\t\t(Serializable) transcodedVideos);\n+\t\t\t\t\tsession.saveDocument(workingDocument);\n+\t\t\t\t} catch (DocumentNotFoundException e) {\n+\t\t\t\t\t// a parent of the document may have been deleted.\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (workingDocument.isVersion()) {\n+\t\t\t\t\tworkingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+\t\t\t\t}\n+\t\t\t\tworkingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+\t\t\t\tworkingDocument.putContextData(\"\", Boolean.TRUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7522df455603dbe82fedf2a23d2dd2a6286232a"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyMTUzNg==", "bodyText": "To follow the source MANIFEST:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Bundle-SymbolicName: org.nuxeo.ecm.platform.videos.core.tests\n          \n          \n            \n            Bundle-SymbolicName: org.nuxeo.ecm.platform.video.tests", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539421536", "createdAt": "2020-12-09T15:49:53Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/test/resources/META-INF/MANIFEST.MF", "diffHunk": "@@ -0,0 +1 @@\n+Bundle-SymbolicName: org.nuxeo.ecm.platform.videos.core.tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyMjYyNg==", "bodyText": "Versions should be declared in root pom.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539422626", "createdAt": "2020-12-09T15:51:09Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/pom.xml", "diffHunk": "@@ -0,0 +1,37 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.nuxeo.ecm.platform</groupId>\n+    <artifactId>nuxeo-platform-video</artifactId>\n+    <version>11.5-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>nuxeo-platform-video-rest</artifactId>\n+  <name>Nuxeo Platform Video REST</name>\n+  <description>Management API endpoint used to recompute video renditions</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.nuxeo.ecm.platform</groupId>\n+      <artifactId>nuxeo-platform-video-core</artifactId>\n+      <version>11.4-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyMzI5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@Path(\"recompute/{conversionName}/\")\n          \n          \n            \n            \t@Path(\"recompute/{conversionName}\")", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539423297", "createdAt": "2020-12-09T15:51:55Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+\tpublic static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\n+\tpublic static final String VIDEOS_DEFAULT_CONVERSION = \"*\";\n+\n+\t/**\n+\t * Recomputes video renditions for the documents matching the given query or\n+\t * {@link #VIDEOS_DEFAULT_QUERY} if not provided.\n+\t *\n+\t * @param query a custom query to specify which videos should be processed\n+\t * @return the {@link BulkStatus} of the command\n+\t */\n+\t@POST\n+\t@Path(\"recompute/{conversionName}/\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyMzQ0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@Path(\"recompute/\")\n          \n          \n            \n            \t@Path(\"recompute\")", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539423446", "createdAt": "2020-12-09T15:52:04Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+\tpublic static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\n+\tpublic static final String VIDEOS_DEFAULT_CONVERSION = \"*\";\n+\n+\t/**\n+\t * Recomputes video renditions for the documents matching the given query or\n+\t * {@link #VIDEOS_DEFAULT_QUERY} if not provided.\n+\t *\n+\t * @param query a custom query to specify which videos should be processed\n+\t * @return the {@link BulkStatus} of the command\n+\t */\n+\t@POST\n+\t@Path(\"recompute/{conversionName}/\")\n+\tpublic BulkStatus doPostVideos(@FormParam(\"query\") String query,\n+\t\t\t@PathParam(\"conversionName\") String conversionName) {\n+\t\tString finalQuery = StringUtils.defaultIfBlank(query, VIDEOS_DEFAULT_QUERY);\n+\t\tString finalConversions = StringUtils.defaultIfBlank(conversionName, VIDEOS_DEFAULT_CONVERSION);\n+\t\tBulkService bulkService = Framework.getService(BulkService.class);\n+\t\tString commandId = bulkService\n+\t\t\t\t.submit(new BulkCommand.Builder(RecomputeRenditionsAction.ACTION_NAME, finalQuery, SYSTEM_USERNAME)\n+\t\t\t\t\t\t.repository(ctx.getCoreSession().getRepositoryName())\n+\t\t\t\t\t\t.param(RecomputeRenditionsAction.PARAM_XPATH, \"file:content\")\n+\t\t\t\t\t\t.param(RecomputeRenditionsAction.PARAM_CONVERSION_NAME, finalConversions).build());\n+\t\treturn bulkService.getStatus(commandId);\n+\t}\n+\n+\t@POST\n+\t@Path(\"recompute/\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNjYyMA==", "bodyText": "PathParam should be a FormParam and you can use a List<String> as type.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539426620", "createdAt": "2020-12-09T15:55:39Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+\tpublic static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\n+\tpublic static final String VIDEOS_DEFAULT_CONVERSION = \"*\";\n+\n+\t/**\n+\t * Recomputes video renditions for the documents matching the given query or\n+\t * {@link #VIDEOS_DEFAULT_QUERY} if not provided.\n+\t *\n+\t * @param query a custom query to specify which videos should be processed\n+\t * @return the {@link BulkStatus} of the command\n+\t */\n+\t@POST\n+\t@Path(\"recompute/{conversionName}/\")\n+\tpublic BulkStatus doPostVideos(@FormParam(\"query\") String query,\n+\t\t\t@PathParam(\"conversionName\") String conversionName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNjk0Nw==", "bodyText": "Format/indentation issue.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539426947", "createdAt": "2020-12-09T15:56:02Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeRenditionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+\tpublic static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\n+\tpublic static final String VIDEOS_DEFAULT_CONVERSION = \"*\";\n+\n+\t/**\n+\t * Recomputes video renditions for the documents matching the given query or\n+\t * {@link #VIDEOS_DEFAULT_QUERY} if not provided.\n+\t *\n+\t * @param query a custom query to specify which videos should be processed\n+\t * @return the {@link BulkStatus} of the command\n+\t */\n+\t@POST\n+\t@Path(\"recompute/{conversionName}/\")\n+\tpublic BulkStatus doPostVideos(@FormParam(\"query\") String query,\n+\t\t\t@PathParam(\"conversionName\") String conversionName) {\n+\t\tString finalQuery = StringUtils.defaultIfBlank(query, VIDEOS_DEFAULT_QUERY);\n+\t\tString finalConversions = StringUtils.defaultIfBlank(conversionName, VIDEOS_DEFAULT_CONVERSION);\n+\t\tBulkService bulkService = Framework.getService(BulkService.class);\n+\t\tString commandId = bulkService\n+\t\t\t\t.submit(new BulkCommand.Builder(RecomputeRenditionsAction.ACTION_NAME, finalQuery, SYSTEM_USERNAME)\n+\t\t\t\t\t\t.repository(ctx.getCoreSession().getRepositoryName())\n+\t\t\t\t\t\t.param(RecomputeRenditionsAction.PARAM_XPATH, \"file:content\")\n+\t\t\t\t\t\t.param(RecomputeRenditionsAction.PARAM_CONVERSION_NAME, finalConversions).build());\n+\t\treturn bulkService.getStatus(commandId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyODgyMg==", "bodyText": "To remove?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539428822", "createdAt": "2020-12-09T15:58:06Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQzMDc4NQ==", "bodyText": "Extra space.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539430785", "createdAt": "2020-12-09T16:00:21Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+\t@Inject\n+\tprotected CoreSession session;\n+\n+\tprotected DocumentRef docRef;\n+\n+\t@Before\n+\tpublic void createDocument() throws IOException {\n+\n+\t\tDocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+\t\tBlob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+\t\t\t\tStandardCharsets.UTF_8.name(), \"video.mpg\");\n+\t\tdoc.setPropertyValue(\"file:content\", (Serializable) blob);\n+\t\tdoc = session.createDocument(doc);\n+\t\ttxFeature.nextTransaction();\n+\t\tdoc = session.getDocument(doc.getRef());\n+\t\tdocRef = doc.getRef();\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosNoQuery() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 3);\n+\t}\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQzMTUxMg==", "bodyText": "This file contains also tabs, could you check all files in this PR to remove tabs?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539431512", "createdAt": "2020-12-09T16:01:13Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0MDE3OA==", "bodyText": "expectedRenditions should be a List or a String to improve readability.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539440178", "createdAt": "2020-12-09T16:11:40Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+\t@Inject\n+\tprotected CoreSession session;\n+\n+\tprotected DocumentRef docRef;\n+\n+\t@Before\n+\tpublic void createDocument() throws IOException {\n+\n+\t\tDocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+\t\tBlob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+\t\t\t\tStandardCharsets.UTF_8.name(), \"video.mpg\");\n+\t\tdoc.setPropertyValue(\"file:content\", (Serializable) blob);\n+\t\tdoc = session.createDocument(doc);\n+\t\ttxFeature.nextTransaction();\n+\t\tdoc = session.getDocument(doc.getRef());\n+\t\tdocRef = doc.getRef();\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosNoQuery() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 3);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testRecomputeVideosValidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\t\tdoTestRecomputeVideos(query, true, 3);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRendition() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 1);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRenditionsList() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 2);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosInvalidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM nowhere\";\n+\t\tdoTestRecomputeVideos(query, false, 0);\n+\t}\n+\n+\tprotected void doTestRecomputeVideos(String query, boolean success, int expectedRenditions) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0OTA1MQ==", "bodyText": "It should be next to its initialization.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539449051", "createdAt": "2020-12-09T16:22:09Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+\t@Inject\n+\tprotected CoreSession session;\n+\n+\tprotected DocumentRef docRef;\n+\n+\t@Before\n+\tpublic void createDocument() throws IOException {\n+\n+\t\tDocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+\t\tBlob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+\t\t\t\tStandardCharsets.UTF_8.name(), \"video.mpg\");\n+\t\tdoc.setPropertyValue(\"file:content\", (Serializable) blob);\n+\t\tdoc = session.createDocument(doc);\n+\t\ttxFeature.nextTransaction();\n+\t\tdoc = session.getDocument(doc.getRef());\n+\t\tdocRef = doc.getRef();\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosNoQuery() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 3);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testRecomputeVideosValidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\t\tdoTestRecomputeVideos(query, true, 3);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRendition() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 1);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRenditionsList() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 2);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosInvalidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM nowhere\";\n+\t\tdoTestRecomputeVideos(query, false, 0);\n+\t}\n+\n+\tprotected void doTestRecomputeVideos(String query, boolean success, int expectedRenditions) throws IOException {\n+\n+\t\t// Test there is no already generated renditions\n+\t\tDocumentModel doc = session.getDocument(docRef);\n+\t\tList<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc\n+\t\t\t\t.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+\t\tassertTrue(transcodedVideos.isEmpty());\n+\n+\t\t// generating new video renditions\n+\t\tMultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\t\tif (query != null) {\n+\t\t\tformData.add(\"query\", query);\n+\t\t}\n+\t\tString commandId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1MTk5OQ==", "bodyText": "Could you add the conversion doesn't exist case?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r539451999", "createdAt": "2020-12-09T16:25:38Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.core.blob.binary.BinaryBlob;\n+//import org.nuxeo.ecm.platform.rendition.service.RenditionService;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+\t@Inject\n+\tprotected CoreSession session;\n+\n+\tprotected DocumentRef docRef;\n+\n+\t@Before\n+\tpublic void createDocument() throws IOException {\n+\n+\t\tDocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+\t\tBlob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+\t\t\t\tStandardCharsets.UTF_8.name(), \"video.mpg\");\n+\t\tdoc.setPropertyValue(\"file:content\", (Serializable) blob);\n+\t\tdoc = session.createDocument(doc);\n+\t\ttxFeature.nextTransaction();\n+\t\tdoc = session.getDocument(doc.getRef());\n+\t\tdocRef = doc.getRef();\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosNoQuery() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 3);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testRecomputeVideosValidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+\t\tdoTestRecomputeVideos(query, true, 3);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRendition() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 1);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideoCustomRenditionsList() throws IOException {\n+\t\tdoTestRecomputeVideos(null, true, 2);\n+\t}\n+\n+\t@Test\n+\tpublic void testRecomputeVideosInvalidQuery() throws IOException {\n+\t\tString query = \"SELECT * FROM nowhere\";\n+\t\tdoTestRecomputeVideos(query, false, 0);\n+\t}\n+\n+\tprotected void doTestRecomputeVideos(String query, boolean success, int expectedRenditions) throws IOException {\n+\n+\t\t// Test there is no already generated renditions\n+\t\tDocumentModel doc = session.getDocument(docRef);\n+\t\tList<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc\n+\t\t\t\t.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+\t\tassertTrue(transcodedVideos.isEmpty());\n+\n+\t\t// generating new video renditions\n+\t\tMultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\t\tif (query != null) {\n+\t\t\tformData.add(\"query\", query);\n+\t\t}\n+\t\tString commandId;\n+\t\tString post = \"/management/videos/recompute/\";\n+\t\tswitch (expectedRenditions) {\n+\t\tcase 1:\n+\t\t\t// Recompute only the WebM rendition to test the conversionName parameter\n+\t\t\tpost += \"WebM 480p\";\n+\t\t\tbreak;\n+\t\tcase 2:\n+\t\t\t// Recompute the WebM and MP4 renditions to test a list a converters\n+\t\t\tpost += \"WebM 480p-MP4 480p\";\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\t// Recompute all renditions to test the wildcard\n+\t\t\tpost += \"*\";\n+\t\t\tbreak;\n+\t\t}\n+\t\tpost += \"/\";\n+\t\ttry (CloseableClientResponse response = httpClientRule.post(post, formData)) {\n+\t\t\tassertEquals(SC_OK, response.getStatus());\n+\t\t\tJsonNode node = mapper.readTree(response.getEntityInputStream());\n+\t\t\tassertBulkStatusScheduled(node);\n+\t\t\tcommandId = getBulkCommandId(node);\n+\t\t}\n+\n+\t\t// waiting for the asynchronous video renditions recompute task\n+\t\ttxFeature.nextTransaction();\n+\n+\t\ttry (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+\t\t\tJsonNode node = mapper.readTree(response.getEntityInputStream());\n+\t\t\tassertEquals(SC_OK, response.getStatus());\n+\n+\t\t\tassertBulkStatusCompleted(node);\n+\t\t\tdoc = session.getDocument(docRef);\n+\n+\t\t\ttranscodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+\t\t\tassertNotNull(transcodedVideos);\n+\t\t\tif (success) {\n+\t\t\t\tassertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+\t\t\t\tassertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+\t\t\t\tassertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+\t\t\t\tassertEquals(1, node.get(STATUS_TOTAL).asInt());\n+\t\t\t\tassertEquals(expectedRenditions, transcodedVideos.size());\n+\t\t\t\tswitch (expectedRenditions) {\n+\t\t\t\tcase 1:\n+\t\t\t\t\tassertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 2:\n+\t\t\t\t\tassertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\t\t\t\t\tassertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tassertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\t\t\t\t\tassertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+\t\t\t\t\tassertEquals(\"Ogg 480p\", transcodedVideos.get(2).get(\"name\"));\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tassertEquals(0, node.get(STATUS_PROCESSED).asInt());\n+\t\t\t\tassertTrue(node.get(STATUS_HAS_ERROR).asBoolean());\n+\t\t\t\tassertEquals(1, node.get(STATUS_ERROR_COUNT).asInt());\n+\t\t\t\tassertEquals(0, node.get(STATUS_TOTAL).asInt());\n+\t\t\t\tassertEquals(\"Invalid query\", node.get(STATUS_ERROR_MESSAGE).asText());\n+\n+\t\t\t\tassertTrue(transcodedVideos.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008"}, "originalPosition": 191}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "546c26be19a84e2e1ce193fca771662957ee0008", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/546c26be19a84e2e1ce193fca771662957ee0008", "committedDate": "2020-12-09T15:44:05Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "98aea378ae4747b3e9636debb934cfb77baa2b47", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/98aea378ae4747b3e9636debb934cfb77baa2b47", "committedDate": "2020-12-14T16:42:50Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98aea378ae4747b3e9636debb934cfb77baa2b47", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/98aea378ae4747b3e9636debb934cfb77baa2b47", "committedDate": "2020-12-14T16:42:50Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "cda665a4d5d9a715c9b327f91baa16468e2b3fc9", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cda665a4d5d9a715c9b327f91baa16468e2b3fc9", "committedDate": "2020-12-14T16:47:02Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cda665a4d5d9a715c9b327f91baa16468e2b3fc9", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cda665a4d5d9a715c9b327f91baa16468e2b3fc9", "committedDate": "2020-12-14T16:47:02Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "9680ad7592bed5581e47170b58cea86fcb11c77b", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9680ad7592bed5581e47170b58cea86fcb11c77b", "committedDate": "2020-12-15T09:17:46Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9680ad7592bed5581e47170b58cea86fcb11c77b", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9680ad7592bed5581e47170b58cea86fcb11c77b", "committedDate": "2020-12-15T09:17:46Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "dc13e88b0e88c1ea09674ada802f866235a7c5b8", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/dc13e88b0e88c1ea09674ada802f866235a7c5b8", "committedDate": "2020-12-17T16:23:12Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc13e88b0e88c1ea09674ada802f866235a7c5b8", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/dc13e88b0e88c1ea09674ada802f866235a7c5b8", "committedDate": "2020-12-17T16:23:12Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "committedDate": "2020-12-18T08:48:57Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NjM1MzU3", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-555635357", "createdAt": "2020-12-18T16:29:22Z", "commit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjoyOToyMlrOIIp5ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTowMDoyMFrOIJUZfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk0NjA1MQ==", "bodyText": "This is independent of the document, you could put this outside of the loop.\nstartBucket method looks like a good candidate to put this code.\nNote: you can put the service in a field as it is done in AutomationComputation.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r545946051", "createdAt": "2020-12-18T16:29:22Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwMjQ5OA==", "bodyText": "It shouldn't be needed as we're saving the renditions one by one.\nFurthermore, you should put the same context data in the saveRendition method.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546602498", "createdAt": "2020-12-21T09:37:20Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }\n+                if (workingDocument.isVersion()) {\n+                    workingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+                }\n+                workingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+                workingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+                workingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+                session.saveDocument(workingDocument);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwMzIzNQ==", "bodyText": "You could use var to declare transcodedVideos .", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546603235", "createdAt": "2020-12-21T09:39:00Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }\n+                if (workingDocument.isVersion()) {\n+                    workingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+                }\n+                workingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+                workingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+                workingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(DocumentModel doc, String conversionName, TranscodedVideo transcodedVideo,\n+            CoreSession session) {\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwNTM3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            for (Map<String, Serializable> tv : transcodedVideos) {\n          \n          \n            \n                                if (tv.get(\"name\") == conversionName) {\n          \n          \n            \n                                    transcodedVideos.remove(tv);\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546605379", "createdAt": "2020-12-21T09:43:43Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }\n+                if (workingDocument.isVersion()) {\n+                    workingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+                }\n+                workingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+                workingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+                workingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(DocumentModel doc, String conversionName, TranscodedVideo transcodedVideo,\n+            CoreSession session) {\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        if (transcodedVideos == null) {\n+            transcodedVideos = new ArrayList<>();\n+        } else {\n+            if (transcodedVideo == null) {\n+                for (Map<String, Serializable> tv : transcodedVideos) {\n+                    if (tv.get(\"name\") == conversionName) {\n+                        transcodedVideos.remove(tv);\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwNzIzNg==", "bodyText": "Furthermore, we don't need to do a check on transcodedVideo nullity as we want to do the same thing in both cases.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546607236", "createdAt": "2020-12-21T09:47:22Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }\n+                if (workingDocument.isVersion()) {\n+                    workingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+                }\n+                workingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+                workingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+                workingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(DocumentModel doc, String conversionName, TranscodedVideo transcodedVideo,\n+            CoreSession session) {\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        if (transcodedVideos == null) {\n+            transcodedVideos = new ArrayList<>();\n+        } else {\n+            if (transcodedVideo == null) {\n+                for (Map<String, Serializable> tv : transcodedVideos) {\n+                    if (tv.get(\"name\") == conversionName) {\n+                        transcodedVideos.remove(tv);\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwNTM3OQ=="}, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwOTQxMA==", "bodyText": "The doc parameter should be a docId/docRef that you first get from DB and finally save.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546609410", "createdAt": "2020-12-21T09:52:01Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }\n+                if (workingDocument.isVersion()) {\n+                    workingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+                }\n+                workingDocument.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+                workingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+                workingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(DocumentModel doc, String conversionName, TranscodedVideo transcodedVideo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxMTA4OQ==", "bodyText": "Could you add a finally block to start the transaction if it is not active? Otherwise, we could end by committing a non-existing transaction at the beginning of the loop.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546611089", "createdAt": "2020-12-21T09:55:13Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNTYzMw==", "bodyText": "Could you follow the \"style\" of validateCommand code that we can found in others bulk action validation?\nIe: one bloc per parameter, separated by a blank line.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546625633", "createdAt": "2020-12-21T10:24:41Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNTg2Mg==", "bodyText": "You should first do a call to validateList.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546625862", "createdAt": "2020-12-21T10:25:10Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+        String xpath = command.getParam(PARAM_XPATH);\n+        List<String> conversionNames = command.getParam(PARAM_CONVERSION_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNzY1MA==", "bodyText": "This could be replaced by a call to conversionNames.removeAll(videoService.getAvailableVideoConversions()) + an empty check on the resulting List.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546627650", "createdAt": "2020-12-21T10:28:35Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+        String xpath = command.getParam(PARAM_XPATH);\n+        List<String> conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        validateXpath(PARAM_XPATH, xpath, command);\n+        // recompute all renditions\n+        if (conversionNames.isEmpty()) {\n+            return;\n+        }\n+        VideoService videoService = Framework.getService(VideoService.class);\n+        List<String> conversionNamesArray = new ArrayList<>();\n+        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+            conversionNamesArray.add(conversion.getName());\n+        }\n+\n+        for (String conversion : conversionNames) {\n+            if (!conversionNamesArray.contains(conversion)) {\n+                throw new IllegalArgumentException(String.format(\"The conversion %s is not supported.\", conversion));\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNzc1OQ==", "bodyText": "Indent.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546627759", "createdAt": "2020-12-21T10:28:49Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/resources/OSGI-INF/video-bulk-contrib.xml", "diffHunk": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.platform.video.bulk\" version=\"1.0.0\">\n+\n+  <require>org.nuxeo.ecm.core.bulk</require>\n+\n+  <extension target=\"org.nuxeo.ecm.core.bulk\" point=\"actions\">\n+  \t<!-- Here the batch size is equal to the bucket size because in this case the computation handles the transaction -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyODExNQ==", "bodyText": "Forgotten comment?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546628115", "createdAt": "2020-12-21T10:29:34Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    // By default we only recompute renditions for document without any renditions\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' \";\n+    //AND vid:transcodedVideos IS NULL AND ecm:isVersion = 0 AND ecm:isProxy = 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyODM5NQ==", "bodyText": "We may want to exclude proxy, no?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546628395", "createdAt": "2020-12-21T10:30:12Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    // By default we only recompute renditions for document without any renditions\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyOTkzMw==", "bodyText": "Every bulk action should handle a missing parameter, we don't need to give an empty List for this one.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546629933", "createdAt": "2020-12-21T10:33:45Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    // By default we only recompute renditions for document without any renditions\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' \";\n+    //AND vid:transcodedVideos IS NULL AND ecm:isVersion = 0 AND ecm:isProxy = 0\n+\n+    /**\n+     * Recomputes video renditions for the documents matching the given query or {@link #VIDEOS_DEFAULT_QUERY} if not\n+     * provided.\n+     *\n+     * @param query a custom query to specify which videos should be processed\n+     * @return the {@link BulkStatus} of the command\n+     */\n+    @POST\n+    @Path(\"recompute\")\n+    public BulkStatus doPostVideos(@FormParam(\"query\") String query,\n+            @FormParam(\"conversionName\") List<String> conversionName) {\n+        String finalQuery = StringUtils.defaultIfBlank(query, VIDEOS_DEFAULT_QUERY);\n+        List<String> finalConversions = conversionName;\n+        if (conversionName == null) {\n+            conversionName = new ArrayList<>();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMzQ2MA==", "bodyText": "This method is very long, we should consider refactoring if possible.\nI would sort the parameters as below:\n\nquery / because is the first action parameter\nrenditions / because is the second action parameter\nmissingConversion\nsuccess", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546633460", "createdAt": "2020-12-21T10:41:08Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMzU4Mw==", "bodyText": "Could be declared as var.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546633583", "createdAt": "2020-12-21T10:41:28Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNDA0Mw==", "bodyText": "No need for this local variable.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546634043", "createdAt": "2020-12-21T10:42:28Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        String post = \"/management/videos/recompute/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNDU5MQ==", "bodyText": "MultivaluedMap is a Map of List, you should be able to use the put method with the list directly.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546634591", "createdAt": "2020-12-21T10:43:36Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            for (String rendition : expectedRenditions) {\n+                formData.add(\"conversionName\", rendition);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzOTk4Nw==", "bodyText": "This could be extracted to a method such as assertTranscodedVideos taking as parameters:\n\nthe expectedRenditions, in case the list is null, you should retrieve the available conversions from video service\nthe actualTranscodedVideos\n\nThe whole logic based on the List size should be reworked to assert directly against the expectedRenditions List.\nOccurrences of conversion names should disappear.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546639987", "createdAt": "2020-12-21T10:55:16Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            for (String rendition : expectedRenditions) {\n+                formData.add(\"conversionName\", rendition);\n+            }\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(post, formData)) {\n+            if (impossibleConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            doc = session.getDocument(docRef);\n+\n+            transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            if (success) {\n+                assertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+                assertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(1, node.get(STATUS_TOTAL).asInt());\n+                int nbExpectedRenditions;\n+                if (expectedRenditions == null) {\n+                    nbExpectedRenditions = 3;\n+                } else {\n+                    nbExpectedRenditions = expectedRenditions.size();\n+                }\n+\n+                assertEquals(nbExpectedRenditions, transcodedVideos.size());\n+                switch (nbExpectedRenditions) {\n+                case 1:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\n+                    break;\n+                case 2:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    break;\n+\n+                default:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    assertEquals(\"Ogg 480p\", transcodedVideos.get(2).get(\"name\"));\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0MDI1Mg==", "bodyText": "Forgotten Sys out?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546640252", "createdAt": "2020-12-21T10:55:50Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            for (String rendition : expectedRenditions) {\n+                formData.add(\"conversionName\", rendition);\n+            }\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(post, formData)) {\n+            if (impossibleConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            doc = session.getDocument(docRef);\n+\n+            transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            if (success) {\n+                assertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+                assertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(1, node.get(STATUS_TOTAL).asInt());\n+                int nbExpectedRenditions;\n+                if (expectedRenditions == null) {\n+                    nbExpectedRenditions = 3;\n+                } else {\n+                    nbExpectedRenditions = expectedRenditions.size();\n+                }\n+\n+                assertEquals(nbExpectedRenditions, transcodedVideos.size());\n+                switch (nbExpectedRenditions) {\n+                case 1:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\n+                    break;\n+                case 2:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    break;\n+\n+                default:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    assertEquals(\"Ogg 480p\", transcodedVideos.get(2).get(\"name\"));\n+                    break;\n+                }\n+            } else {\n+                assertEquals(0, node.get(STATUS_PROCESSED).asInt());\n+                assertTrue(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(1, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(0, node.get(STATUS_TOTAL).asInt());\n+                assertEquals(\"Invalid query\", node.get(STATUS_ERROR_MESSAGE).asText());\n+                assertTrue(transcodedVideos.isEmpty());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+        DocumentModel doc = session.getDocument(docRef);\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating all default video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(post, formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            doc = session.getDocument(docRef);\n+\n+            List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                    TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            System.out.println(\"Round 1->\"+transcodedVideos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0MDk5NA==", "bodyText": "Why not using doTestRecomputeVideos for the first computation?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546640994", "createdAt": "2020-12-21T10:57:28Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, false, true, null);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, false, true, List.of(\"WebM 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, true, false, List.of(\"foo 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, false, true, List.of(\"WebM 480p\", \"MP4 480p\"));\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, false, false, null);\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, boolean impossibleConversionError, boolean success,\n+            List<String> expectedRenditions) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        List<Map<String, Serializable>> transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(\n+                TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            for (String rendition : expectedRenditions) {\n+                formData.add(\"conversionName\", rendition);\n+            }\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(post, formData)) {\n+            if (impossibleConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            doc = session.getDocument(docRef);\n+\n+            transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            if (success) {\n+                assertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+                assertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(1, node.get(STATUS_TOTAL).asInt());\n+                int nbExpectedRenditions;\n+                if (expectedRenditions == null) {\n+                    nbExpectedRenditions = 3;\n+                } else {\n+                    nbExpectedRenditions = expectedRenditions.size();\n+                }\n+\n+                assertEquals(nbExpectedRenditions, transcodedVideos.size());\n+                switch (nbExpectedRenditions) {\n+                case 1:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+\n+                    break;\n+                case 2:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    break;\n+\n+                default:\n+                    assertEquals(\"WebM 480p\", transcodedVideos.get(0).get(\"name\"));\n+                    assertEquals(\"MP4 480p\", transcodedVideos.get(1).get(\"name\"));\n+                    assertEquals(\"Ogg 480p\", transcodedVideos.get(2).get(\"name\"));\n+                    break;\n+                }\n+            } else {\n+                assertEquals(0, node.get(STATUS_PROCESSED).asInt());\n+                assertTrue(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(1, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(0, node.get(STATUS_TOTAL).asInt());\n+                assertEquals(\"Invalid query\", node.get(STATUS_ERROR_MESSAGE).asText());\n+                assertTrue(transcodedVideos.isEmpty());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+        DocumentModel doc = session.getDocument(docRef);\n+        String post = \"/management/videos/recompute/\";\n+\n+        // generating all default video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(post, formData)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0MjMwMA==", "bodyText": "Could you put it after the core module?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r546642300", "createdAt": "2020-12-21T11:00:20Z", "author": {"login": "kevinleturc"}, "path": "pom.xml", "diffHunk": "@@ -1504,9 +1504,21 @@\n       <!-- Video -->\n       <dependency>\n         <groupId>org.nuxeo.ecm.platform</groupId>\n-        <artifactId>nuxeo-platform-video</artifactId>\n+        <artifactId>nuxeo-platform-video-core</artifactId>\n         <version>${nuxeo.platform.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.nuxeo.ecm.platform</groupId>\n+        <artifactId>nuxeo-platform-video-rest</artifactId>\n+        <version>${nuxeo.platform.version}</version>\n+      </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/fe4e027e75c759c862b9bd9d75a5e38d19cec3d7", "committedDate": "2020-12-18T08:48:57Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "15b0441d21213c5e5071de70ccaca068b6646a00", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/15b0441d21213c5e5071de70ccaca068b6646a00", "committedDate": "2021-01-04T10:57:58Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15b0441d21213c5e5071de70ccaca068b6646a00", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/15b0441d21213c5e5071de70ccaca068b6646a00", "committedDate": "2021-01-04T10:57:58Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "0347c3aaca99af9c23808e3620296e32cf70c025", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0347c3aaca99af9c23808e3620296e32cf70c025", "committedDate": "2021-01-04T11:31:43Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0347c3aaca99af9c23808e3620296e32cf70c025", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0347c3aaca99af9c23808e3620296e32cf70c025", "committedDate": "2021-01-04T11:31:43Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "041193bf95d7f05824e89f839649f5fea4db23bb", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/041193bf95d7f05824e89f839649f5fea4db23bb", "committedDate": "2021-01-04T11:37:20Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "041193bf95d7f05824e89f839649f5fea4db23bb", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/041193bf95d7f05824e89f839649f5fea4db23bb", "committedDate": "2021-01-04T11:37:20Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/639f045d6f3a026d25b92a4edb4fbcedafa6a3f6", "committedDate": "2021-01-12T13:52:34Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MzQyMTQx", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-566342141", "createdAt": "2021-01-12T14:45:34Z", "commit": {"oid": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNDo0NTozNFrOISE3_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNDo1MToxMlrOISFIyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyNTE0OQ==", "bodyText": "You probably don't need a second List, does something as below looks ok?\nconversionNames = command.getParam(PARAM_CONVERSION_NAME);\nif (conversionNames.isEmpty()) {\n    conversionNames = videoService.getAvailableVideoConversions().stream().map(VideoConversion::getName).collect(Collectors.toList());\n}", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r555825149", "createdAt": "2021-01-12T14:45:34Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            conversionNamesArray = new ArrayList<>();\n+            if (conversionNames.isEmpty()) {\n+                // Recomputing all available renditions\n+                for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                    conversionNamesArray.add(conversion.getName());\n+                }\n+            } else {\n+                // Recomputing wanted renditions\n+                conversionNamesArray.addAll(conversionNames);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyNjMwNg==", "bodyText": "Twice the same bloc.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r555826306", "createdAt": "2021-01-12T14:47:00Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            conversionNamesArray = new ArrayList<>();\n+            if (conversionNames.isEmpty()) {\n+                // Recomputing all available renditions\n+                for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                    conversionNamesArray.add(conversion.getName());\n+                }\n+            } else {\n+                // Recomputing wanted renditions\n+                conversionNamesArray.addAll(conversionNames);\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(new IdRef(workingDocument.getId()), conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    TransactionHelper.startTransaction();\n+                }\n+\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(IdRef docId, String conversionName, TranscodedVideo transcodedVideo,\n+            CoreSession session) {\n+        DocumentModel doc = session.getDocument(docId);\n+        var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+        transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));\n+        if (transcodedVideo != null) {\n+            transcodedVideos.add(transcodedVideo.toMap());\n+        }\n+        doc.setPropertyValue(TRANSCODED_VIDEOS_PROPERTY, (Serializable) transcodedVideos);\n+        if (doc.isVersion()) {\n+            doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+        }\n+        if (doc.isVersion()) {\n+            doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyNzk1NQ==", "bodyText": "Can you move the TODO on the query and write it as a regular comment (not a javadoc one).", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r555827955", "createdAt": "2021-01-12T14:49:12Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    // By default we only recompute renditions for document without any renditions\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' AND ecm:isProxy = 0 AND ecm:isVersion = 0\";\n+\n+    /**\n+     * @TODO Default query should only recompute rendition for videos with no recomputed renditions\n+     *       (vid:transcodedVideos is NULL)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyODQzMg==", "bodyText": "Why do we need this variable?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r555828432", "createdAt": "2021-01-12T14:49:49Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4\n+ */\n+@WebObject(type = ManagementObject.MANAGEMENT_OBJECT_PREFIX + \"videos\")\n+@Produces(APPLICATION_JSON)\n+public class VideosObject extends AbstractResource<ResourceTypeImpl> {\n+\n+    // By default we only recompute renditions for document without any renditions\n+    public static final String VIDEOS_DEFAULT_QUERY = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video' AND ecm:isProxy = 0 AND ecm:isVersion = 0\";\n+\n+    /**\n+     * @TODO Default query should only recompute rendition for videos with no recomputed renditions\n+     *       (vid:transcodedVideos is NULL)\n+     */\n+\n+    /**\n+     * Recomputes video renditions for the documents matching the given query or {@link #VIDEOS_DEFAULT_QUERY} if not\n+     * provided.\n+     *\n+     * @param query a custom query to specify which videos should be processed\n+     * @return the {@link BulkStatus} of the command\n+     */\n+    @POST\n+    @Path(\"recompute\")\n+    public BulkStatus doPostVideos(@FormParam(\"query\") String query,\n+            @FormParam(\"conversionName\") List<String> conversionName) {\n+        String finalQuery = StringUtils.defaultIfBlank(query, VIDEOS_DEFAULT_QUERY);\n+        List<String> finalConversions = conversionName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyOTQ1MA==", "bodyText": "Here you can remove the conversion from conversionNames, as it you don't have to maintain another List.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r555829450", "createdAt": "2021-01-12T14:51:12Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\n+        // Check XPath\n+        String xpath = command.getParam(PARAM_XPATH);\n+        validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAME, command);\n+        List<String> conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));\n+        // recompute all renditions\n+        if (conversionNames.isEmpty()) {\n+            return;\n+        }\n+        VideoService videoService = Framework.getService(VideoService.class);\n+        List<String> conversionNamesArray = new ArrayList<>();\n+        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+            conversionNamesArray.add(conversion.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6"}, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "639f045d6f3a026d25b92a4edb4fbcedafa6a3f6", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/639f045d6f3a026d25b92a4edb4fbcedafa6a3f6", "committedDate": "2021-01-12T13:52:34Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "448a459f720c21642bb4621bae6d32ba5b2b4b81", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/448a459f720c21642bb4621bae6d32ba5b2b4b81", "committedDate": "2021-01-12T16:12:23Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "448a459f720c21642bb4621bae6d32ba5b2b4b81", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/448a459f720c21642bb4621bae6d32ba5b2b4b81", "committedDate": "2021-01-12T16:12:23Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "7d26739df4d242db57a18ac5fcef1e425b722f2e", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7d26739df4d242db57a18ac5fcef1e425b722f2e", "committedDate": "2021-01-12T16:33:16Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3MDQyMTM4", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-567042138", "createdAt": "2021-01-13T09:37:35Z", "commit": {"oid": "7d26739df4d242db57a18ac5fcef1e425b722f2e"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOTozNzozNVrOISm_cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOTo1MzoyMVrOISnnTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM4NDExMg==", "bodyText": "Not needed.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556384112", "createdAt": "2021-01-13T09:37:35Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d26739df4d242db57a18ac5fcef1e425b722f2e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM4NDgzNA==", "bodyText": "new ArrayList is not needed as we're not editing the list.\nIt was needed before, when the code had a conversionNames.addAll(...).", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556384834", "createdAt": "2021-01-13T09:38:44Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d26739df4d242db57a18ac5fcef1e425b722f2e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM4NTcxNQ==", "bodyText": "Line exceeds 120 characters.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556385715", "createdAt": "2021-01-13T09:40:10Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions().stream().map(VideoConversion::getName).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d26739df4d242db57a18ac5fcef1e425b722f2e"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM4ODk5MA==", "bodyText": "Could you check if the transaction is active to start it?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556388990", "createdAt": "2021-01-13T09:45:15Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+\n+                var transcodedVideos = new ArrayList<Map<String, Serializable>>();\n+\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    VideoService videoService = Framework.getService(VideoService.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    List<String> conversionNamesArray = new ArrayList<>();\n+\n+                    if (conversionNames.isEmpty()) {\n+                        // Recomputing all available renditions\n+                        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                            conversionNamesArray.add(conversion.getName());\n+                        }\n+                    } else {\n+                        // Recomputing wanted renditions\n+                        conversionNamesArray.addAll(conversionNames);\n+\n+                    }\n+                    for (String conversion : conversionNamesArray) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(workingDocument, conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxMTA4OQ=="}, "originalCommit": {"oid": "fe4e027e75c759c862b9bd9d75a5e38d19cec3d7"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM5MzQ3OA==", "bodyText": "Could you put the session as the first parameter?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556393478", "createdAt": "2021-01-13T09:52:08Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions().stream().map(VideoConversion::getName).collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(new IdRef(workingDocument.getId()), conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    TransactionHelper.startTransaction();\n+                }\n+\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(IdRef docId, String conversionName, TranscodedVideo transcodedVideo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d26739df4d242db57a18ac5fcef1e425b722f2e"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM5MzczMg==", "bodyText": "Could you add @SuppressWarnings(\"unchecked\") to the method to avoid a cast warning in IDE?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556393732", "createdAt": "2021-01-13T09:52:31Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoConstants;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected List<String> conversionNamesArray = new ArrayList<>();\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions().stream().map(VideoConversion::getName).collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(new IdRef(workingDocument.getId()), conversion, transcodedVideo, session);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    TransactionHelper.startTransaction();\n+                }\n+\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    protected static void saveRendition(IdRef docId, String conversionName, TranscodedVideo transcodedVideo,\n+            CoreSession session) {\n+        DocumentModel doc = session.getDocument(docId);\n+        var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d26739df4d242db57a18ac5fcef1e425b722f2e"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM5NDMxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(!conversionNames.isEmpty()) {\n          \n          \n            \n                    if (!conversionNames.isEmpty()) {", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556394318", "createdAt": "2021-01-13T09:53:21Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAME;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAME);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\n+        // Check XPath\n+        String xpath = command.getParam(PARAM_XPATH);\n+        validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAME, command);\n+        List<String> conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAME));\n+        // recompute all renditions\n+        if (conversionNames.isEmpty()) {\n+            return;\n+        }\n+        VideoService videoService = Framework.getService(VideoService.class);\n+        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+            conversionNames.remove(conversion.getName());\n+        }\n+        if(!conversionNames.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d26739df4d242db57a18ac5fcef1e425b722f2e"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d26739df4d242db57a18ac5fcef1e425b722f2e", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7d26739df4d242db57a18ac5fcef1e425b722f2e", "committedDate": "2021-01-12T16:33:16Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "363846a23521e031dcb98833729a35724b5c3682", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/363846a23521e031dcb98833729a35724b5c3682", "committedDate": "2021-01-13T10:51:52Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "363846a23521e031dcb98833729a35724b5c3682", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/363846a23521e031dcb98833729a35724b5c3682", "committedDate": "2021-01-13T10:51:52Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "e067be8fd87ce2ca408b1375832debf94a111fe0", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e067be8fd87ce2ca408b1375832debf94a111fe0", "committedDate": "2021-01-13T10:55:23Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3MTEyODE1", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-567112815", "createdAt": "2021-01-13T11:04:08Z", "commit": {"oid": "e067be8fd87ce2ca408b1375832debf94a111fe0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTowNDowOFrOISqSNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTowNTo1OVrOISqWbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzODA2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if(!TransactionHelper.isTransactionActive()) {\n          \n          \n            \n                                if (!TransactionHelper.isTransactionActive()) {", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556438069", "createdAt": "2021-01-13T11:04:08Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        if(!TransactionHelper.isTransactionActive()) {\n+                            TransactionHelper.startTransaction();\n+                        }\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if(!TransactionHelper.isTransactionActive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e067be8fd87ce2ca408b1375832debf94a111fe0"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzOTE1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * since 11.4\n          \n          \n            \n             * @since 11.5", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556439150", "createdAt": "2021-01-13T11:05:59Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e067be8fd87ce2ca408b1375832debf94a111fe0"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e067be8fd87ce2ca408b1375832debf94a111fe0", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e067be8fd87ce2ca408b1375832debf94a111fe0", "committedDate": "2021-01-13T10:55:23Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "c54a49f84cedfda3a5e45a2c952a6be9afe9a6d3", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c54a49f84cedfda3a5e45a2c952a6be9afe9a6d3", "committedDate": "2021-01-13T11:07:48Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3MzY5OTYx", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-567369961", "createdAt": "2021-01-13T15:56:53Z", "commit": {"oid": "c54a49f84cedfda3a5e45a2c952a6be9afe9a6d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo1Njo1M1rOIS2UTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo1Njo1M1rOIS2UTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzNTIxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * since 11.5\n          \n          \n            \n             * @since 11.5", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r556635212", "createdAt": "2021-01-13T15:56:53Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/management/VideosObject.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.nuxeo.ecm.core.api.security.SecurityConstants.SYSTEM_USERNAME;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import javax.ws.rs.FormParam;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.nuxeo.ecm.core.bulk.BulkService;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.bulk.message.BulkStatus;\n+import org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction;\n+import org.nuxeo.ecm.webengine.model.WebObject;\n+import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n+import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * since 11.5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c54a49f84cedfda3a5e45a2c952a6be9afe9a6d3"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c54a49f84cedfda3a5e45a2c952a6be9afe9a6d3", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c54a49f84cedfda3a5e45a2c952a6be9afe9a6d3", "committedDate": "2021-01-13T11:07:48Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "755d6215a4cc20af12cdd079fe750c761053acc9", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/755d6215a4cc20af12cdd079fe750c761053acc9", "committedDate": "2021-01-13T16:02:21Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4MTQ4NTEx", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-568148511", "createdAt": "2021-01-14T11:31:46Z", "commit": {"oid": "755d6215a4cc20af12cdd079fe750c761053acc9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "755d6215a4cc20af12cdd079fe750c761053acc9", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/755d6215a4cc20af12cdd079fe750c761053acc9", "committedDate": "2021-01-13T16:02:21Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "6403c956ba3acbe40efa1342280c3508506788f6", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6403c956ba3acbe40efa1342280c3508506788f6", "committedDate": "2021-01-14T15:04:02Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MTM1NjM1", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-569135635", "createdAt": "2021-01-15T10:23:18Z", "commit": {"oid": "6403c956ba3acbe40efa1342280c3508506788f6"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6403c956ba3acbe40efa1342280c3508506788f6", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6403c956ba3acbe40efa1342280c3508506788f6", "committedDate": "2021-01-14T15:04:02Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "0036f2b4fcc3aa20768cb3482426de32c2dd7f28", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0036f2b4fcc3aa20768cb3482426de32c2dd7f28", "committedDate": "2021-01-15T16:00:18Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0036f2b4fcc3aa20768cb3482426de32c2dd7f28", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0036f2b4fcc3aa20768cb3482426de32c2dd7f28", "committedDate": "2021-01-15T16:00:18Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "d41c8a0c185dbab3106fc8ffcb957df2f84d5a92", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d41c8a0c185dbab3106fc8ffcb957df2f84d5a92", "committedDate": "2021-01-19T09:45:30Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMDY4Nzc4", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-571068778", "createdAt": "2021-01-19T09:46:53Z", "commit": {"oid": "d41c8a0c185dbab3106fc8ffcb957df2f84d5a92"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d41c8a0c185dbab3106fc8ffcb957df2f84d5a92", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d41c8a0c185dbab3106fc8ffcb957df2f84d5a92", "committedDate": "2021-01-19T09:45:30Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cb93ee1409a99913dd7401610b84dafbafe825b5", "committedDate": "2021-01-20T14:36:29Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMTE1NDAz", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-573115403", "createdAt": "2021-01-21T09:09:35Z", "commit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwOTowOTozNVrOIXsDkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMDozOTo0OFrOIXv0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcwOTk2OQ==", "bodyText": "We could update this obsolete description by the way:\n\"Provides video management for the Nuxeo Platform.\"", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561709969", "createdAt": "2021-01-21T09:09:35Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/pom.xml", "diffHunk": "@@ -0,0 +1,109 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.nuxeo.ecm.platform</groupId>\n+    <artifactId>nuxeo-platform-video-parent</artifactId>\n+    <version>11.5-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>nuxeo-platform-video-core</artifactId>\n+  <name>Nuxeo Platform Video Core</name>\n+  <description>Nuxeo Platform Video provides video management to Nuxeo Web Platform and RCP.  </description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxMDM3OA==", "bodyText": "2021 now, but well, detail", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561710378", "createdAt": "2021-01-21T09:10:10Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxMjk1Mw==", "bodyText": "Unused.\nDo we want to fire such an event for the video conversions, as it is done for the picture views recomputation: https://github.com/nuxeo/nuxeo/blob/master/modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/main/java/org/nuxeo/ecm/platform/picture/recompute/RecomputeViewsAction.java#L134\n@kevinleturc ? Regrading #4500 (comment) maybe.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561712953", "createdAt": "2021-01-21T09:14:07Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxMzU4Ng==", "bodyText": "Is it OK/a good practice to cache the service here? @kevinleturc", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561713586", "createdAt": "2021-01-21T09:15:07Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxNjAwNA==", "bodyText": "Do we want to handle the case where the xpath doesn't match a Blob property?\nBy logging a warning and continuing for instance.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561716004", "createdAt": "2021-01-21T09:18:47Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxNjgxNw==", "bodyText": "Can you please add comment to say that we commit the transaction since the video conversion can be very long.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561716817", "createdAt": "2021-01-21T09:19:54Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxODAyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        log.warn(\"Conversion to {} has failed\", conversion);\n          \n          \n            \n                                        log.warn(\"Conversion {} of doc id {} has failed\", conversion, docId);", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561718020", "createdAt": "2021-01-21T09:21:46Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTcxOTk0Nw==", "bodyText": "Why static?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561719947", "createdAt": "2021-01-21T09:24:43Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        public static final String PICTURE_VIEWS_GENERATION_DONE_EVENT = \"pictureViewsGenerationDone\";\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAME);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion to {} has failed\", conversion);\n+                        }\n+                        if (!TransactionHelper.isTransactionActive()) {\n+                            TransactionHelper.startTransaction();\n+                        }\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected static void saveRendition(CoreSession session, IdRef docId, String conversionName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc2MjM2MQ==", "bodyText": "not sure why this is needed", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561762361", "createdAt": "2021-01-21T10:26:25Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc2NjIyNg==", "bodyText": "seems unneeded", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561766226", "createdAt": "2021-01-21T10:31:51Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        txFeature.nextTransaction();\n+        doc = session.getDocument(doc.getRef());\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+        DocumentModel doc = session.getDocument(docRef);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc3MTU0Nw==", "bodyText": "Shouldn't it be conversionNames?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r561771547", "createdAt": "2021-01-21T10:39:48Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAME = \"conversionName\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5"}, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb93ee1409a99913dd7401610b84dafbafe825b5", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cb93ee1409a99913dd7401610b84dafbafe825b5", "committedDate": "2021-01-20T14:36:29Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "73547e0988a727c366a23e6408e95422787a0e99", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/73547e0988a727c366a23e6408e95422787a0e99", "committedDate": "2021-01-22T10:47:03Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73547e0988a727c366a23e6408e95422787a0e99", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/73547e0988a727c366a23e6408e95422787a0e99", "committedDate": "2021-01-22T10:47:03Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "b53c206e514ab6501b33d80c27dbee90b36c6c2a", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b53c206e514ab6501b33d80c27dbee90b36c6c2a", "committedDate": "2021-01-22T12:54:14Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b53c206e514ab6501b33d80c27dbee90b36c6c2a", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b53c206e514ab6501b33d80c27dbee90b36c6c2a", "committedDate": "2021-01-22T12:54:14Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "3456ddcffe631906e6e4b1aa0a55c78b2f28f177", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3456ddcffe631906e6e4b1aa0a55c78b2f28f177", "committedDate": "2021-01-25T10:40:35Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1Mjg3NDI0", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-575287424", "createdAt": "2021-01-25T11:04:20Z", "commit": {"oid": "3456ddcffe631906e6e4b1aa0a55c78b2f28f177"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxMTowNDoyMVrOIZhuew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxMTowNzo1M1rOIZh3Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzYzNzg4Mw==", "bodyText": "Shouldn't this be done after all renditions have been saved for a given document?\nSo, probably after this line: https://github.com/nuxeo/nuxeo/pull/4500/files#diff-bc4a7bfecdae732db5ff4d4d6a3e452a5f53018ca76157e70f1edc8b0c0734baR155.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r563637883", "createdAt": "2021-01-25T11:04:21Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property '{}' of doc id {} is not a blob.\", docId, xpath);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion {} of doc id {} has failed\", conversion, docId);\n+                        }\n+                        if (!TransactionHelper.isTransactionActive()) {\n+                            TransactionHelper.startTransaction();\n+                        }\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }\n+                session.saveDocument(workingDocument);\n+            }\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        protected void saveRendition(CoreSession session, IdRef docId, String conversionName,\n+                TranscodedVideo transcodedVideo) {\n+            DocumentModel doc = session.getDocument(docId);\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            transcodedVideos.removeIf(tv -> conversionName.equals(tv.get(\"name\")));\n+            if (transcodedVideo != null) {\n+                transcodedVideos.add(transcodedVideo.toMap());\n+            }\n+            doc.setPropertyValue(TRANSCODED_VIDEOS_PROPERTY, (Serializable) transcodedVideos);\n+            if (doc.isVersion()) {\n+                doc.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);\n+            }\n+            doc.putContextData(\"disableNotificationService\", Boolean.TRUE);\n+            doc.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);\n+            doc.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);\n+            session.saveDocument(doc);\n+\n+            DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), doc);\n+            Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3456ddcffe631906e6e4b1aa0a55c78b2f28f177"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzYzOTE3OQ==", "bodyText": "Please try to keep the usual format with :\nfoo: {}...\n\nAnd parameters docId and xpath are inverted.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r563639179", "createdAt": "2021-01-25T11:06:29Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property '{}' of doc id {} is not a blob.\", docId, xpath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3456ddcffe631906e6e4b1aa0a55c78b2f28f177"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzY0MDA5MQ==", "bodyText": "In fact, I've suggested this but, for consistency, should be:\nConversion: {} of doc id: {} has failed\"", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r563640091", "createdAt": "2021-01-25T11:07:53Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property '{}' of doc id {} is not a blob.\", docId, xpath);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion {} of doc id {} has failed\", conversion, docId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3456ddcffe631906e6e4b1aa0a55c78b2f28f177"}, "originalPosition": 140}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3456ddcffe631906e6e4b1aa0a55c78b2f28f177", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3456ddcffe631906e6e4b1aa0a55c78b2f28f177", "committedDate": "2021-01-25T10:40:35Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "42050154003d3a74c758280b926490803c7f180e", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/42050154003d3a74c758280b926490803c7f180e", "committedDate": "2021-01-25T13:55:11Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42050154003d3a74c758280b926490803c7f180e", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/42050154003d3a74c758280b926490803c7f180e", "committedDate": "2021-01-25T13:55:11Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "5e939480bfda470e6ceb27f77dd403ced6d1a3ac", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5e939480bfda470e6ceb27f77dd403ced6d1a3ac", "committedDate": "2021-01-25T14:02:15Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e939480bfda470e6ceb27f77dd403ced6d1a3ac", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5e939480bfda470e6ceb27f77dd403ced6d1a3ac", "committedDate": "2021-01-25T14:02:15Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "9379766d42a370db938b24cf1dac2d3e97c19fbf", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9379766d42a370db938b24cf1dac2d3e97c19fbf", "committedDate": "2021-01-25T14:54:39Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1NTExMzQz", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-575511343", "createdAt": "2021-01-25T15:28:33Z", "commit": {"oid": "9379766d42a370db938b24cf1dac2d3e97c19fbf"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9379766d42a370db938b24cf1dac2d3e97c19fbf", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9379766d42a370db938b24cf1dac2d3e97c19fbf", "committedDate": "2021-01-25T14:54:39Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1bdde940e842dae14bf9d28de7d430db60ec39e3", "committedDate": "2021-01-27T13:19:24Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3MzMzNjQ5", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-577333649", "createdAt": "2021-01-27T13:29:04Z", "commit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3MzQ3NDY1", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-577347465", "createdAt": "2021-01-27T13:44:12Z", "commit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxMzo0NDoxMlrOIbIQnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxMzo0NDoxMlrOIbIQnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTMxNzc4OQ==", "bodyText": "In fact, this one can disappear, as it isreplaced by nuxeo-platform-video-parent.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565317789", "createdAt": "2021-01-27T13:44:12Z", "author": {"login": "ataillefer"}, "path": "pom.xml", "diffHunk": "@@ -1481,11 +1481,33 @@\n       </dependency>\n \n       <!-- Video -->\n+      <dependency>\n+        <groupId>org.nuxeo.ecm.platform</groupId>\n+        <artifactId>nuxeo-platform-video-parent</artifactId>\n+        <version>${nuxeo.platform.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.nuxeo.ecm.platform</groupId>\n         <artifactId>nuxeo-platform-video</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3NDQ3OTc1", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-577447975", "createdAt": "2021-01-27T15:19:11Z", "commit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNToxOToxMVrOIbM6nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QxNToyMTo1MVrOIbNDMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM5NDA3OQ==", "bodyText": "Isn't there missing a continue?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565394079", "createdAt": "2021-01-27T15:19:11Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM5NTI0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 11.4\n          \n          \n            \n             * @since 11.5", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565395243", "createdAt": "2021-01-27T15:20:37Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM5NjI3NA==", "bodyText": "Parent modules don't need to be referenced there.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565396274", "createdAt": "2021-01-27T15:21:51Z", "author": {"login": "kevinleturc"}, "path": "pom.xml", "diffHunk": "@@ -1481,11 +1481,33 @@\n       </dependency>\n \n       <!-- Video -->\n+      <dependency>\n+        <groupId>org.nuxeo.ecm.platform</groupId>\n+        <artifactId>nuxeo-platform-video-parent</artifactId>\n+        <version>${nuxeo.platform.version}</version>\n+      </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4MTM0Njky", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-578134692", "createdAt": "2021-01-28T09:27:16Z", "commit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwOToyNzoxNlrOIbuPtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMDoyOToxN1rOIbw1qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk0MDE1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <description>Nuxeo Platform Video provides video management for the Nuxeo Platform.  </description>\n          \n          \n            \n              <description>Nuxeo Platform Video provides video management for the Nuxeo Platform.</description>", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565940151", "createdAt": "2021-01-28T09:27:16Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/pom.xml", "diffHunk": "@@ -0,0 +1,109 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.nuxeo.ecm.platform</groupId>\n+    <artifactId>nuxeo-platform-video-parent</artifactId>\n+    <version>11.5-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>nuxeo-platform-video-core</artifactId>\n+  <name>Nuxeo Platform Video Core</name>\n+  <description>Nuxeo Platform Video provides video management for the Nuxeo Platform.  </description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk0MTA0Nw==", "bodyText": "Not needed as the whole class is @since 11.5", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565941047", "createdAt": "2021-01-28T09:28:37Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk1ODg0NA==", "bodyText": "Worth listing also the conversionNames list?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565958844", "createdAt": "2021-01-28T09:54:45Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk2MTUzOQ==", "bodyText": "Is there a reason to log the whole document here instead of the id?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565961539", "createdAt": "2021-01-28T09:58:23Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk2MjE4Nw==", "bodyText": "Worth checking there is actually an active transaction before committing it? (cc @kevinleturc )", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565962187", "createdAt": "2021-01-28T09:59:20Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk3NzIyNg==", "bodyText": "in which case the transaction could be active here?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565977226", "createdAt": "2021-01-28T10:21:37Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        if (!TransactionHelper.isTransactionActive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk3ODg0Mg==", "bodyText": "Not sure saving the document here is needed, as it's done in the #saveRendition method.\nYou could maybe just use workingDocument.refresh() or refetch the document.\nWDYT @kevinleturc ?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565978842", "createdAt": "2021-01-28T10:24:07Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    // @since 11.4\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} for doc ids: {}\", ACTION_NAME, ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!(fileProp instanceof Blob)) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument);\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        if (!TransactionHelper.isTransactionActive()) {\n+                            TransactionHelper.startTransaction();\n+                        }\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }\n+                workingDocument = session.saveDocument(workingDocument);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTk4MjYzMg==", "bodyText": "Not sure it's needed.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r565982632", "createdAt": "2021-01-28T10:29:17Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-video/nuxeo-platform-video-core/src/main/resources/OSGI-INF/video-bulk-contrib.xml", "diffHunk": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.platform.video.bulk\" version=\"1.0.0\">\n+\n+  <require>org.nuxeo.ecm.core.bulk</require>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1bdde940e842dae14bf9d28de7d430db60ec39e3", "committedDate": "2021-01-27T13:19:24Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "26866635103093ec7625fa2dec80842ee0979489", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/26866635103093ec7625fa2dec80842ee0979489", "committedDate": "2021-01-29T14:36:14Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26866635103093ec7625fa2dec80842ee0979489", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/26866635103093ec7625fa2dec80842ee0979489", "committedDate": "2021-01-29T14:36:14Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "f3c43b436936115c04e34e7f2ade8b84cc31fefd", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f3c43b436936115c04e34e7f2ade8b84cc31fefd", "committedDate": "2021-02-02T10:59:12Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxNDQ0MzQy", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-581444342", "createdAt": "2021-02-02T15:09:19Z", "commit": {"oid": "f3c43b436936115c04e34e7f2ade8b84cc31fefd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTowOToxOVrOIeVVpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNToxMzo0NVrOIeVjUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY3Nzc5Nw==", "bodyText": "Not needed, this is useful to publish a test jar, e.g. my-module-11.5-SNAPSHOT-tests.jar, which only makes sense if the module has some interesting things to expose in its src/test classpath (typically test features implementing RunnerFeature), which is not the case here.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r568677797", "createdAt": "2021-02-02T15:09:19Z", "author": {"login": "ataillefer"}, "path": "modules/platform/video/pom.xml", "diffHunk": "@@ -0,0 +1,41 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.nuxeo.ecm.platform</groupId>\n+    <artifactId>nuxeo-platform-parent</artifactId>\n+    <version>11.5-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>nuxeo-platform-video-parent</artifactId>\n+  <name>Nuxeo Platform Video</name>\n+  <packaging>pom</packaging>\n+  <description>Nuxeo Platform Video provides video management to Nuxeo Web Platform and RCP.</description>\n+\n+  <modules>\n+    <module>nuxeo-platform-video</module>\n+    <module>nuxeo-platform-video-rest</module>\n+  </modules>\n+\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-jar-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <configuration>\n+              <archive>\n+                <manifestFile>src/test/resources/META-INF/MANIFEST.MF</manifestFile>\n+              </archive>\n+            </configuration>\n+            <goals>\n+              <goal>test-jar</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c43b436936115c04e34e7f2ade8b84cc31fefd"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY3ODg1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <description>Nuxeo Platform Video provides video management to Nuxeo Web Platform and RCP.</description>\n          \n          \n            \n              <description>Nuxeo Video parent POM</description>", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r568678855", "createdAt": "2021-02-02T15:10:38Z", "author": {"login": "ataillefer"}, "path": "modules/platform/video/pom.xml", "diffHunk": "@@ -0,0 +1,41 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.nuxeo.ecm.platform</groupId>\n+    <artifactId>nuxeo-platform-parent</artifactId>\n+    <version>11.5-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>nuxeo-platform-video-parent</artifactId>\n+  <name>Nuxeo Platform Video</name>\n+  <packaging>pom</packaging>\n+  <description>Nuxeo Platform Video provides video management to Nuxeo Web Platform and RCP.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3c43b436936115c04e34e7f2ade8b84cc31fefd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY4MTI5Ng==", "bodyText": "Indeed: #4500 (comment), can you please remove it?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r568681296", "createdAt": "2021-02-02T15:13:45Z", "author": {"login": "ataillefer"}, "path": "pom.xml", "diffHunk": "@@ -1481,11 +1481,33 @@\n       </dependency>\n \n       <!-- Video -->\n+      <dependency>\n+        <groupId>org.nuxeo.ecm.platform</groupId>\n+        <artifactId>nuxeo-platform-video-parent</artifactId>\n+        <version>${nuxeo.platform.version}</version>\n+      </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM5NjI3NA=="}, "originalCommit": {"oid": "1bdde940e842dae14bf9d28de7d430db60ec39e3"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3c43b436936115c04e34e7f2ade8b84cc31fefd", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f3c43b436936115c04e34e7f2ade8b84cc31fefd", "committedDate": "2021-02-02T10:59:12Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "committedDate": "2021-02-02T15:37:44Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyMTY1MjE5", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-582165219", "createdAt": "2021-02-03T09:33:12Z", "commit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyODcyNDEw", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-582872410", "createdAt": "2021-02-03T22:46:16Z", "commit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QyMjo0NjoxNlrOIfaLkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QyMzozNDoyOVrOIfbd1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgwNTcxMg==", "bodyText": "The encoding is only needed for MIME types that are text/<something>, so leave it null.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569805712", "createdAt": "2021-02-03T22:46:16Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgwNTk3Mw==", "bodyText": "The empty lines at method start/end don't really help readability.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569805973", "createdAt": "2021-02-03T22:46:48Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgwODczNw==", "bodyText": "Use try-with-resources for response.getEntityInputStream() to avoid close the stream properly (I know other existing tests don't do that but we should try to improve new code).\nThis one can actually be merged with the enclosing try-with-resources.\nYour IDE should a warning of a resource leak if it's not closed; if it doesn't, check your IDE config to activate it.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569808737", "createdAt": "2021-02-03T22:52:25Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgwOTk3MA==", "bodyText": "The assertNotNull could be pushed down into assertTranscodedVideos. Or just skipped if it's really not expected to fail, and a NPE if it fails should be clear enough anyway. Also there are other places below where you don't check for null.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569809970", "createdAt": "2021-02-03T22:55:12Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            assertTranscodedVideos(null, transcodedVideos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxMTcyOA==", "bodyText": "Rename missingConversionError -> expectMissingConversionError and success -> expectSuccess", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569811728", "createdAt": "2021-02-03T22:58:45Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            assertTranscodedVideos(null, transcodedVideos);\n+        }\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, List<String> expectedRenditions, boolean missingConversionError,\n+            boolean success) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxMTk2OQ==", "bodyText": "-> expectSuccess", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569811969", "createdAt": "2021-02-03T22:59:10Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            assertTranscodedVideos(null, transcodedVideos);\n+        }\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, List<String> expectedRenditions, boolean missingConversionError,\n+            boolean success) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            formData.put(\"conversionNames\", expectedRenditions);\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            if (missingConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+        assertResponse(commandId, expectedRenditions, success);\n+\n+    }\n+\n+    protected void assertResponse(String commandId, List<String> expectedRenditions, boolean success)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxMjQ1MA==", "bodyText": "This can be an @Injected field.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569812450", "createdAt": "2021-02-03T23:00:08Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            assertTranscodedVideos(null, transcodedVideos);\n+        }\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, List<String> expectedRenditions, boolean missingConversionError,\n+            boolean success) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            formData.put(\"conversionNames\", expectedRenditions);\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            if (missingConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+        assertResponse(commandId, expectedRenditions, success);\n+\n+    }\n+\n+    protected void assertResponse(String commandId, List<String> expectedRenditions, boolean success)\n+            throws IOException {\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            if (success) {\n+                assertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+                assertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(1, node.get(STATUS_TOTAL).asInt());\n+                assertTranscodedVideos(expectedRenditions, transcodedVideos);\n+            } else {\n+                assertEquals(0, node.get(STATUS_PROCESSED).asInt());\n+                assertTrue(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(1, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(0, node.get(STATUS_TOTAL).asInt());\n+                assertEquals(\"Invalid query\", node.get(STATUS_ERROR_MESSAGE).asText());\n+                assertTrue(transcodedVideos.isEmpty());\n+            }\n+        }\n+    }\n+\n+    protected void assertTranscodedVideos(List<String> expectedRenditions,\n+            List<Map<String, Serializable>> transcodedVideos) {\n+        if (expectedRenditions == null) {\n+            VideoService videoService = Framework.getService(VideoService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxMzcxNQ==", "bodyText": "expectedRenditions = videoService.getAvailableVideoConversions()\n                                 .stream()\n                                 .map(VideoConversion::getName)\n                                 .collect(Collectors.toList())\n\nWhich is the way you actually wrote it in RecomputeRenditionsComputation btw \ud83d\ude00\nAnd personally I like to do a static import of Collectors.toList but it's up to you.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569813715", "createdAt": "2021-02-03T23:03:05Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/management/TestVideosObject.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.restapi.server.jaxrs.management;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_COUNT;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_ERROR_MESSAGE;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_HAS_ERROR;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_PROCESSED;\n+import static org.nuxeo.ecm.core.bulk.io.BulkConstants.STATUS_TOTAL;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.core.MultivaluedMap;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentRef;\n+import org.nuxeo.ecm.platform.video.VideoFeature;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.ecm.restapi.test.ManagementBaseTest;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.core.util.MultivaluedMapImpl;\n+\n+/**\n+ * @since 11.5\n+ */\n+@Features(VideoFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.video.rest\")\n+public class TestVideosObject extends ManagementBaseTest {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    protected DocumentRef docRef;\n+\n+    @Before\n+    public void createDocument() throws IOException {\n+\n+        DocumentModel doc = session.createDocumentModel(\"/\", \"videoDoc\", \"Video\");\n+        Blob blob = Blobs.createBlob(FileUtils.getResourceFileFromContext(\"videos/video.mpg\"), \"video/mpg\",\n+                StandardCharsets.UTF_8.name(), \"video.mpg\");\n+        doc.setPropertyValue(\"file:content\", (Serializable) blob);\n+        doc = session.createDocument(doc);\n+        docRef = doc.getRef();\n+\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosNoQueryNoConversions() throws IOException {\n+        doTestRecomputeVideos(null, null, false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosValidQueryCustomConversion() throws IOException {\n+        String query = \"SELECT * FROM Document WHERE ecm:mixinType = 'Video'\";\n+        doTestRecomputeVideos(query, List.of(\"WebM 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosImpossibleConversion() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"foo 480p\"), true, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosCustomRenditionsList() throws IOException {\n+        doTestRecomputeVideos(null, List.of(\"WebM 480p\", \"MP4 480p\"), false, true);\n+    }\n+\n+    @Test\n+    public void testRecomputeVideosInvalidQuery() throws IOException {\n+        String query = \"SELECT * FROM nowhere\";\n+        doTestRecomputeVideos(query, null, false, false);\n+    }\n+\n+    @Test\n+    public void testRecomputeOneAfterRecomputeAll() throws IOException {\n+\n+        // generating all default video renditions\n+        doTestRecomputeVideos(null, null, false, true);\n+\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        String commandId;\n+\n+        // try recomputing only the Ogg conversion\n+        formData.add(\"conversionNames\", \"Ogg 480p\");\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            assertTranscodedVideos(null, transcodedVideos);\n+        }\n+    }\n+\n+    protected void doTestRecomputeVideos(String query, List<String> expectedRenditions, boolean missingConversionError,\n+            boolean success) throws IOException {\n+\n+        // Test there is no already generated renditions\n+        DocumentModel doc = session.getDocument(docRef);\n+        var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+        assertTrue(transcodedVideos.isEmpty());\n+\n+        // generating new video renditions\n+        MultivaluedMap<String, String> formData = new MultivaluedMapImpl();\n+        if (query != null) {\n+            formData.add(\"query\", query);\n+        }\n+        if (expectedRenditions != null) {\n+            formData.put(\"conversionNames\", expectedRenditions);\n+        }\n+\n+        String commandId;\n+        try (CloseableClientResponse response = httpClientRule.post(\"/management/videos/recompute/\", formData)) {\n+            if (missingConversionError) {\n+                assertEquals(SC_BAD_REQUEST, response.getStatus());\n+                return;\n+            }\n+            assertEquals(SC_OK, response.getStatus());\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertBulkStatusScheduled(node);\n+            commandId = getBulkCommandId(node);\n+        }\n+\n+        // waiting for the asynchronous video renditions recompute task\n+        txFeature.nextTransaction();\n+        assertResponse(commandId, expectedRenditions, success);\n+\n+    }\n+\n+    protected void assertResponse(String commandId, List<String> expectedRenditions, boolean success)\n+            throws IOException {\n+        try (CloseableClientResponse response = httpClientRule.get(\"/management/bulk/\" + commandId)) {\n+            JsonNode node = mapper.readTree(response.getEntityInputStream());\n+            assertEquals(SC_OK, response.getStatus());\n+            assertBulkStatusCompleted(node);\n+            DocumentModel doc = session.getDocument(docRef);\n+\n+            var transcodedVideos = (List<Map<String, Serializable>>) doc.getPropertyValue(TRANSCODED_VIDEOS_PROPERTY);\n+            assertNotNull(transcodedVideos);\n+            if (success) {\n+                assertEquals(1, node.get(STATUS_PROCESSED).asInt());\n+                assertFalse(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(0, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(1, node.get(STATUS_TOTAL).asInt());\n+                assertTranscodedVideos(expectedRenditions, transcodedVideos);\n+            } else {\n+                assertEquals(0, node.get(STATUS_PROCESSED).asInt());\n+                assertTrue(node.get(STATUS_HAS_ERROR).asBoolean());\n+                assertEquals(1, node.get(STATUS_ERROR_COUNT).asInt());\n+                assertEquals(0, node.get(STATUS_TOTAL).asInt());\n+                assertEquals(\"Invalid query\", node.get(STATUS_ERROR_MESSAGE).asText());\n+                assertTrue(transcodedVideos.isEmpty());\n+            }\n+        }\n+    }\n+\n+    protected void assertTranscodedVideos(List<String> expectedRenditions,\n+            List<Map<String, Serializable>> transcodedVideos) {\n+        if (expectedRenditions == null) {\n+            VideoService videoService = Framework.getService(VideoService.class);\n+            expectedRenditions = new ArrayList<>();\n+            for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+                expectedRenditions.add(conversion.getName());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxNDEwNQ==", "bodyText": "Add terminating newline", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569814105", "createdAt": "2021-02-03T23:04:00Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/crowdin.ini", "diffHunk": "@@ -0,0 +1,2 @@\n+[nuxeo]\n+en_US=src/main/resources/OSGI-INF/l10n/messages_en_US.properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxNDUxOQ==", "bodyText": "Could be List.of", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569814519", "createdAt": "2021-02-03T23:04:59Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxNTczNA==", "bodyText": "Put new IdRef(docId) in a local variable, it's used twice.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569815734", "createdAt": "2021-02-03T23:07:42Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxNjg3MA==", "bodyText": "Remove extra parentheses: if (!(fileProp instanceof Blob || fileProp instanceof BlobProperty))\nBut fileProp instanceof Blob is not possible, we always get a kind Property not a value.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569816870", "createdAt": "2021-02-03T23:10:28Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgxOTMyMA==", "bodyText": "Instead of this try/finally block that has to do a check, it's better to enclose the inner par that needs to be outside a transaction with\n                 TransactionHelper.commitOrRollbackTransaction();\n                 try {\n                     TranscodedVideo transcodedVideo = null;\n                     try {\n                         transcodedVideo = videoService.convert(video, conversion);\n                     } catch (ConversionException e) {\n                         log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n                     }\n                 } finally {\n                     TransactionHelper.startTransaction();\n                 }\n\nWhich can be even reduced to:\n                 TranscodedVideo transcodedVideo;\n                 TransactionHelper.commitOrRollbackTransaction();\n                 try {\n                     transcodedVideo = videoService.convert(video, conversion);\n                 } catch (ConversionException e) {\n                     log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n                     transcodedVideo = null;\n                 } finally {\n                     TransactionHelper.startTransaction();\n                 }", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569819320", "createdAt": "2021-02-03T23:16:21Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                    continue;\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyMDM0Mw==", "bodyText": "new IdRef(workingDocument.getId()) -> workingDocument.getRef() but it's actually even simpler to use the local variable I suggested before, it's the same value.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569820343", "createdAt": "2021-02-03T23:18:29Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                    continue;\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyMDg5NA==", "bodyText": "The service could be put in a field of the computation as you did for videoService (which is allowed because computations aren't long-lived).", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569820894", "createdAt": "2021-02-03T23:19:49Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                    continue;\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }\n+                workingDocument.refresh();\n+                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n+                Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);\n+                Framework.getService(EventService.class).fireEvent(event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyMTQ2OQ==", "bodyText": "Please set the @SuppressWarnings on the smallest possible scope, which I guess is the var transcodedVideos definition bellow.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569821469", "createdAt": "2021-02-03T23:21:07Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsAction.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;\n+import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;\n+import static org.nuxeo.ecm.core.bulk.BulkServiceImpl.STATUS_STREAM;\n+import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;\n+import static org.nuxeo.ecm.platform.video.VideoConstants.TRANSCODED_VIDEOS_PROPERTY;\n+import static org.nuxeo.ecm.platform.video.service.VideoConversionWork.VIDEO_CONVERSIONS_DONE_EVENT;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.INPUT_1;\n+import static org.nuxeo.lib.stream.computation.AbstractComputation.OUTPUT_1;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentNotFoundException;\n+import org.nuxeo.ecm.core.api.IdRef;\n+import org.nuxeo.ecm.core.api.model.Property;\n+import org.nuxeo.ecm.core.api.model.impl.primitives.BlobProperty;\n+import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.event.Event;\n+import org.nuxeo.ecm.core.event.EventService;\n+import org.nuxeo.ecm.core.event.impl.DocumentEventContext;\n+import org.nuxeo.ecm.platform.video.TranscodedVideo;\n+import org.nuxeo.ecm.platform.video.Video;\n+import org.nuxeo.ecm.platform.video.VideoDocument;\n+import org.nuxeo.lib.stream.computation.Topology;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamProcessorTopology;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * BAF Computation that fills video renditions for the blob property described by the given xpath.\n+ *\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsAction implements StreamProcessorTopology {\n+\n+    private static final Logger log = LogManager.getLogger(RecomputeVideoConversionsAction.class);\n+\n+    public static final String ACTION_NAME = \"recomputeVideoConversion\";\n+\n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;\n+\n+    public static final String PARAM_XPATH = \"xpath\";\n+\n+    public static final String PARAM_CONVERSION_NAMES = \"conversionNames\";\n+\n+    @Override\n+    public Topology getTopology(Map<String, String> options) {\n+        return Topology.builder()\n+                       .addComputation(RecomputeRenditionsComputation::new, //\n+                               Arrays.asList(INPUT_1 + \":\" + ACTION_FULL_NAME, OUTPUT_1 + \":\" + STATUS_STREAM))\n+                       .build();\n+    }\n+\n+    public static class RecomputeRenditionsComputation extends AbstractBulkComputation {\n+\n+        protected String xpath;\n+\n+        protected List<String> conversionNames;\n+\n+        protected VideoService videoService = Framework.getService(VideoService.class);\n+\n+        public RecomputeRenditionsComputation() {\n+            super(ACTION_FULL_NAME);\n+        }\n+\n+        @Override\n+        public void startBucket(String bucketKey) {\n+            BulkCommand command = getCurrentCommand();\n+            xpath = command.getParam(PARAM_XPATH);\n+            conversionNames = command.getParam(PARAM_CONVERSION_NAMES);\n+            if (conversionNames.isEmpty()) {\n+                conversionNames = videoService.getAvailableVideoConversions()\n+                                              .stream()\n+                                              .map(VideoConversion::getName)\n+                                              .collect(Collectors.toList());\n+            }\n+        }\n+\n+        @Override\n+        protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {\n+            log.debug(\"Compute action: {} generating conversions: {} for doc ids: {}\", ACTION_NAME, conversionNames,\n+                    ids);\n+            for (String docId : ids) {\n+                if (!session.exists(new IdRef(docId))) {\n+                    log.debug(\"Doc id doesn't exist: {}\", docId);\n+                    continue;\n+                }\n+\n+                DocumentModel workingDocument = session.getDocument(new IdRef(docId));\n+                Property fileProp = workingDocument.getProperty(xpath);\n+                if (!((fileProp instanceof Blob) || (fileProp instanceof BlobProperty))) {\n+                    log.warn(\"Property: {} of doc id: {} is not a blob.\", xpath, docId);\n+                    continue;\n+                }\n+                Blob blob = (Blob) fileProp.getValue();\n+                if (blob == null) {\n+                    // do nothing\n+                    log.debug(\"No blob for doc: {}\", workingDocument.getId());\n+                    continue;\n+                }\n+                try {\n+                    VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);\n+                    Video video = videoDoc.getVideo();\n+\n+                    for (String conversion : conversionNames) {\n+                        // here we want to commit the transaction since the video conversion can be very long\n+                        TransactionHelper.commitOrRollbackTransaction();\n+                        TranscodedVideo transcodedVideo = null;\n+                        try {\n+                            transcodedVideo = videoService.convert(video, conversion);\n+                        } catch (ConversionException e) {\n+                            log.warn(\"Conversion: {} of doc id: {} has failed\", conversion, docId);\n+                        }\n+                        TransactionHelper.startTransaction();\n+                        saveRendition(session, new IdRef(workingDocument.getId()), conversion, transcodedVideo);\n+                    }\n+                } catch (DocumentNotFoundException e) {\n+                    // a parent of the document may have been deleted.\n+                    continue;\n+                } finally {\n+                    if (!TransactionHelper.isTransactionActive()) {\n+                        TransactionHelper.startTransaction();\n+                    }\n+                }\n+                workingDocument.refresh();\n+                DocumentEventContext ctx = new DocumentEventContext(session, session.getPrincipal(), workingDocument);\n+                Event event = ctx.newEvent(VIDEO_CONVERSIONS_DONE_EVENT);\n+                Framework.getService(EventService.class).fireEvent(event);\n+            }\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyMjIzOQ==", "bodyText": "Add a blank line between these two.", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569822239", "createdAt": "2021-02-03T23:23:03Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAMES;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyNDg1MA==", "bodyText": "Could use streams too\nvideoService.getAvailableVideoConversions()\n            .stream()\n            .map(VideoConversion::getName)\n            .forEach(conversionNames::remove);", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569824850", "createdAt": "2021-02-03T23:29:26Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAMES;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAMES);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\n+        // Check XPath\n+        String xpath = command.getParam(PARAM_XPATH);\n+        validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAMES, command);\n+        List<String> conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAMES));\n+        // recompute all renditions\n+        if (conversionNames.isEmpty()) {\n+            return;\n+        }\n+        VideoService videoService = Framework.getService(VideoService.class);\n+        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+            conversionNames.remove(conversion.getName());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyNTc4Mg==", "bodyText": "As this stream pattern is being used a lot, maybe it's worth adding a new videoService.getAvailableVideoConversionNames() method...\n@troger @kevinleturc @ataillefer what do you think?", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569825782", "createdAt": "2021-02-03T23:31:49Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/service/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.service;\n+\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_CONVERSION_NAMES;\n+import static org.nuxeo.ecm.platform.video.service.RecomputeVideoConversionsAction.PARAM_XPATH;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAMES);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+\n+        // Check XPath\n+        String xpath = command.getParam(PARAM_XPATH);\n+        validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAMES, command);\n+        List<String> conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAMES));\n+        // recompute all renditions\n+        if (conversionNames.isEmpty()) {\n+            return;\n+        }\n+        VideoService videoService = Framework.getService(VideoService.class);\n+        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+            conversionNames.remove(conversion.getName());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyNDg1MA=="}, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyNjY3NA==", "bodyText": "videos -> video for consistency", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569826674", "createdAt": "2021-02-03T23:34:14Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video-rest/src/test/resources/META-INF/MANIFEST.MF", "diffHunk": "@@ -0,0 +1 @@\n+Bundle-SymbolicName: org.nuxeo.ecm.platform.videos.rest.tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTgyNjc3Mg==", "bodyText": "videos -> video for consistency", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r569826772", "createdAt": "2021-02-03T23:34:29Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/test/resources/META-INF/MANIFEST.MF", "diffHunk": "@@ -0,0 +1 @@\n+Bundle-SymbolicName: org.nuxeo.ecm.platform.videos.tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/55f715fe95e55d0ba8f34d0d0fe0df6233991b2c", "committedDate": "2021-02-02T15:37:44Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "5630ba95c98c8c5bca233d302a37580fba70b42b", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5630ba95c98c8c5bca233d302a37580fba70b42b", "committedDate": "2021-02-08T16:28:14Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5630ba95c98c8c5bca233d302a37580fba70b42b", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5630ba95c98c8c5bca233d302a37580fba70b42b", "committedDate": "2021-02-08T16:28:14Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "7ca3de2bf95b62c1d0273be6e15841f8f8cbedca", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7ca3de2bf95b62c1d0273be6e15841f8f8cbedca", "committedDate": "2021-02-08T16:39:21Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ca3de2bf95b62c1d0273be6e15841f8f8cbedca", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7ca3de2bf95b62c1d0273be6e15841f8f8cbedca", "committedDate": "2021-02-08T16:39:21Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "76a9749ac1f7feb219eb96fcd8cf35b6bb2374b5", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/76a9749ac1f7feb219eb96fcd8cf35b6bb2374b5", "committedDate": "2021-02-09T09:51:29Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76a9749ac1f7feb219eb96fcd8cf35b6bb2374b5", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/76a9749ac1f7feb219eb96fcd8cf35b6bb2374b5", "committedDate": "2021-02-09T09:51:29Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "93be7968929ff73aa91f9685641ce3b78e3129e8", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/93be7968929ff73aa91f9685641ce3b78e3129e8", "committedDate": "2021-02-09T10:42:09Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93be7968929ff73aa91f9685641ce3b78e3129e8", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/93be7968929ff73aa91f9685641ce3b78e3129e8", "committedDate": "2021-02-09T10:42:09Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "7f65296ffe4d856b9b645436d34096d54cbce94c", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7f65296ffe4d856b9b645436d34096d54cbce94c", "committedDate": "2021-02-09T12:57:29Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg5OTgxNjEz", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-589981613", "createdAt": "2021-02-13T17:18:58Z", "commit": {"oid": "7f65296ffe4d856b9b645436d34096d54cbce94c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xM1QxNzoxODo1OFrOIlBXBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xM1QxNzoxODo1OFrOIlBXBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY5MDUwMA==", "bodyText": "conversionNames.removeAll(videoService.getAvailableVideoConversionsNames())", "url": "https://github.com/nuxeo/nuxeo/pull/4500#discussion_r575690500", "createdAt": "2021-02-13T17:18:58Z", "author": {"login": "efge"}, "path": "modules/platform/video/nuxeo-platform-video/src/main/java/org/nuxeo/ecm/platform/video/action/RecomputeVideoConversionsActionValidation.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+package org.nuxeo.ecm.platform.video.action;\n+\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeTranscodedVideosComputation.PARAM_CONVERSION_NAMES;\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeTranscodedVideosComputation.PARAM_XPATH;\n+import static org.nuxeo.ecm.platform.video.computation.RecomputeVideoInfoComputation.ONLY_RECOMPUTE_MISSING_VIDEO_INFO;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.nuxeo.ecm.core.bulk.AbstractBulkActionValidation;\n+import org.nuxeo.ecm.core.bulk.message.BulkCommand;\n+import org.nuxeo.ecm.platform.video.service.VideoConversion;\n+import org.nuxeo.ecm.platform.video.service.VideoService;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * @since 11.5\n+ */\n+public class RecomputeVideoConversionsActionValidation extends AbstractBulkActionValidation {\n+\n+    @Override\n+    protected List<String> getParametersToValidate() {\n+        return List.of(PARAM_XPATH, PARAM_CONVERSION_NAMES, ONLY_RECOMPUTE_MISSING_VIDEO_INFO);\n+    }\n+\n+    @Override\n+    protected void validateCommand(BulkCommand command) throws IllegalArgumentException {\n+        // Check generateVidInfoOnMissingOnly\n+        validateBoolean(ONLY_RECOMPUTE_MISSING_VIDEO_INFO, command);\n+\n+        // Check XPath\n+        String xpath = command.getParam(PARAM_XPATH);\n+        validateXpath(PARAM_XPATH, xpath, command);\n+\n+        // Check conversions list\n+        validateList(PARAM_CONVERSION_NAMES, command);\n+        List<String> conversionNames = new ArrayList<>(command.getParam(PARAM_CONVERSION_NAMES));\n+        // recompute all renditions\n+        if (conversionNames.isEmpty()) {\n+            return;\n+        }\n+        VideoService videoService = Framework.getService(VideoService.class);\n+        for (VideoConversion conversion : videoService.getAvailableVideoConversions()) {\n+            conversionNames.remove(conversion.getName());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f65296ffe4d856b9b645436d34096d54cbce94c"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f65296ffe4d856b9b645436d34096d54cbce94c", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7f65296ffe4d856b9b645436d34096d54cbce94c", "committedDate": "2021-02-09T12:57:29Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "69f2e7ed22e8ecfbd1984848a9e43424236d5548", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/69f2e7ed22e8ecfbd1984848a9e43424236d5548", "committedDate": "2021-06-14T12:50:04Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69f2e7ed22e8ecfbd1984848a9e43424236d5548", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/69f2e7ed22e8ecfbd1984848a9e43424236d5548", "committedDate": "2021-06-14T12:50:04Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "b56b2705f081f88fa84dacc6015b84644709fbf9", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b56b2705f081f88fa84dacc6015b84644709fbf9", "committedDate": "2021-06-14T13:00:46Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b56b2705f081f88fa84dacc6015b84644709fbf9", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b56b2705f081f88fa84dacc6015b84644709fbf9", "committedDate": "2021-06-14T13:00:46Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "08e8d86a2b8677fa27497b6a6e45aaa0d9a0a44c", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/08e8d86a2b8677fa27497b6a6e45aaa0d9a0a44c", "committedDate": "2021-07-06T14:37:44Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10a000305a1536ee906847ea8b4abedcf0e5e185", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/10a000305a1536ee906847ea8b4abedcf0e5e185", "committedDate": "2021-07-07T10:18:36Z", "message": "NXP-29815: cleanup / format"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08e8d86a2b8677fa27497b6a6e45aaa0d9a0a44c", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/08e8d86a2b8677fa27497b6a6e45aaa0d9a0a44c", "committedDate": "2021-07-06T14:37:44Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "d5864e6bd3d0551538403fc8509072f4f8042d6e", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d5864e6bd3d0551538403fc8509072f4f8042d6e", "committedDate": "2021-07-07T10:18:47Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3ae205d3a5129d6b802d26857b3755f9764bf49", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a3ae205d3a5129d6b802d26857b3755f9764bf49", "committedDate": "2021-07-07T14:08:38Z", "message": "NXP-29815: Add a way to customize the transaction timeout in a bulk computation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "080504ce6efa51a9443ba92bff69a8dc904a2e16", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/080504ce6efa51a9443ba92bff69a8dc904a2e16", "committedDate": "2021-07-07T14:08:38Z", "message": "NXP-29815: Add a method to get the available conversions names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbbb2e04a08909718d4a7c0c528c1e4ba7530f1c", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cbbb2e04a08909718d4a7c0c528c1e4ba7530f1c", "committedDate": "2021-07-07T14:08:40Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5864e6bd3d0551538403fc8509072f4f8042d6e", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d5864e6bd3d0551538403fc8509072f4f8042d6e", "committedDate": "2021-07-07T10:18:47Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}, "afterCommit": {"oid": "cbbb2e04a08909718d4a7c0c528c1e4ba7530f1c", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cbbb2e04a08909718d4a7c0c528c1e4ba7530f1c", "committedDate": "2021-07-07T14:08:40Z", "message": "NXP-29815: add an endpoint to recompute video renditions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAxMTI2ODE5", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-701126819", "createdAt": "2021-07-07T15:05:55Z", "commit": {"oid": "cbbb2e04a08909718d4a7c0c528c1e4ba7530f1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAxMTQzMjE0", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-701143214", "createdAt": "2021-07-07T15:19:52Z", "commit": {"oid": "cbbb2e04a08909718d4a7c0c528c1e4ba7530f1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzAxODI0NTM4", "url": "https://github.com/nuxeo/nuxeo/pull/4500#pullrequestreview-701824538", "createdAt": "2021-07-08T09:10:38Z", "commit": {"oid": "cbbb2e04a08909718d4a7c0c528c1e4ba7530f1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4907, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}