{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNzA3NTQw", "number": 3734, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozNjozOFrODeYlUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0ODoyN1rODeY2Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTg2NjQzOnYy", "diffSide": "RIGHT", "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozNjozOFrOFnfOlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMToyMDoyN1rOFniewA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MDQyMA==", "bodyText": "Is it expected to have the empty string here?", "url": "https://github.com/nuxeo/nuxeo/pull/3734#discussion_r376950420", "createdAt": "2020-02-10T09:36:38Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.tools.command;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.coursera.metrics.datadog.model.DatadogGauge;\n+import org.coursera.metrics.datadog.transport.HttpTransport;\n+import org.coursera.metrics.datadog.transport.Transport;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+\n+/**\n+ * A computation that sends periodically latencies to Datadog.\n+ *\n+ * @since 11.1\n+ */\n+public class LatencyDatadogComputation extends LatencyTrackerComputation {\n+\n+    private static final Log log = LogFactory.getLog(LatencyDatadogComputation.class);\n+\n+    protected final String apiKey;\n+\n+    protected final List<String> tags;\n+\n+    protected final String basePrefix;\n+\n+    protected final boolean partition;\n+\n+    protected HttpTransport transport;\n+\n+    public LatencyDatadogComputation(LogManager manager, List<String> logNames, String apiKey, List<String> tags,\n+            String basePrefix, String computationName, int intervalSecond, int count, boolean partition,\n+            boolean verbose, Codec<Record> codec) {\n+        super(manager, logNames, computationName, intervalSecond, count, verbose, codec, 0);\n+        this.apiKey = apiKey;\n+        this.tags = tags;\n+        this.basePrefix = basePrefix;\n+        this.partition = partition;\n+    }\n+\n+    @Override\n+    public void init(ComputationContext context) {\n+        super.init(context);\n+        transport = new HttpTransport.Builder().withApiKey(apiKey).build();\n+    }\n+\n+    @Override\n+    protected void processLatencies(ComputationContext context, LogPartitionGroup logGroup, List<Latency> latencies) {\n+        Latency groupLatency = Latency.of(latencies);\n+        publishMetrics(groupLatency, basePrefix, \"all\", logGroup.name, logGroup.group);\n+        if (!partition) {\n+            return;\n+        }\n+        for (int part = 0; part < latencies.size(); part++) {\n+            publishMetrics(groupLatency, basePrefix, String.format(\"%02d\", part), logGroup.name, logGroup.group);\n+        }\n+    }\n+\n+    protected void publishMetrics(Latency latency, String prefix, String partition, String stream, String group) {\n+        if (verbose) {\n+            log.info(latency.toString());\n+        }\n+        // upper is the time when the latency has been measured\n+        long metricTime = latency.upper() / 1000;\n+        String host = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42f8af157bd62bca3fa19a936a8d78a28b25e9d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5NTAwNw==", "bodyText": "This is supposed to be the hostname that is sending the metric, but the metrics are global to the cluster, will update this to make it clear.", "url": "https://github.com/nuxeo/nuxeo/pull/3734#discussion_r376995007", "createdAt": "2020-02-10T11:01:01Z", "author": {"login": "bdelbosc"}, "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.tools.command;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.coursera.metrics.datadog.model.DatadogGauge;\n+import org.coursera.metrics.datadog.transport.HttpTransport;\n+import org.coursera.metrics.datadog.transport.Transport;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+\n+/**\n+ * A computation that sends periodically latencies to Datadog.\n+ *\n+ * @since 11.1\n+ */\n+public class LatencyDatadogComputation extends LatencyTrackerComputation {\n+\n+    private static final Log log = LogFactory.getLog(LatencyDatadogComputation.class);\n+\n+    protected final String apiKey;\n+\n+    protected final List<String> tags;\n+\n+    protected final String basePrefix;\n+\n+    protected final boolean partition;\n+\n+    protected HttpTransport transport;\n+\n+    public LatencyDatadogComputation(LogManager manager, List<String> logNames, String apiKey, List<String> tags,\n+            String basePrefix, String computationName, int intervalSecond, int count, boolean partition,\n+            boolean verbose, Codec<Record> codec) {\n+        super(manager, logNames, computationName, intervalSecond, count, verbose, codec, 0);\n+        this.apiKey = apiKey;\n+        this.tags = tags;\n+        this.basePrefix = basePrefix;\n+        this.partition = partition;\n+    }\n+\n+    @Override\n+    public void init(ComputationContext context) {\n+        super.init(context);\n+        transport = new HttpTransport.Builder().withApiKey(apiKey).build();\n+    }\n+\n+    @Override\n+    protected void processLatencies(ComputationContext context, LogPartitionGroup logGroup, List<Latency> latencies) {\n+        Latency groupLatency = Latency.of(latencies);\n+        publishMetrics(groupLatency, basePrefix, \"all\", logGroup.name, logGroup.group);\n+        if (!partition) {\n+            return;\n+        }\n+        for (int part = 0; part < latencies.size(); part++) {\n+            publishMetrics(groupLatency, basePrefix, String.format(\"%02d\", part), logGroup.name, logGroup.group);\n+        }\n+    }\n+\n+    protected void publishMetrics(Latency latency, String prefix, String partition, String stream, String group) {\n+        if (verbose) {\n+            log.info(latency.toString());\n+        }\n+        // upper is the time when the latency has been measured\n+        long metricTime = latency.upper() / 1000;\n+        String host = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MDQyMA=="}, "originalCommit": {"oid": "b42f8af157bd62bca3fa19a936a8d78a28b25e9d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMzcxMg==", "bodyText": "finally, I use the hostname reporting the metric it should not be a problem", "url": "https://github.com/nuxeo/nuxeo/pull/3734#discussion_r377003712", "createdAt": "2020-02-10T11:20:27Z", "author": {"login": "bdelbosc"}, "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.tools.command;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.coursera.metrics.datadog.model.DatadogGauge;\n+import org.coursera.metrics.datadog.transport.HttpTransport;\n+import org.coursera.metrics.datadog.transport.Transport;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+\n+/**\n+ * A computation that sends periodically latencies to Datadog.\n+ *\n+ * @since 11.1\n+ */\n+public class LatencyDatadogComputation extends LatencyTrackerComputation {\n+\n+    private static final Log log = LogFactory.getLog(LatencyDatadogComputation.class);\n+\n+    protected final String apiKey;\n+\n+    protected final List<String> tags;\n+\n+    protected final String basePrefix;\n+\n+    protected final boolean partition;\n+\n+    protected HttpTransport transport;\n+\n+    public LatencyDatadogComputation(LogManager manager, List<String> logNames, String apiKey, List<String> tags,\n+            String basePrefix, String computationName, int intervalSecond, int count, boolean partition,\n+            boolean verbose, Codec<Record> codec) {\n+        super(manager, logNames, computationName, intervalSecond, count, verbose, codec, 0);\n+        this.apiKey = apiKey;\n+        this.tags = tags;\n+        this.basePrefix = basePrefix;\n+        this.partition = partition;\n+    }\n+\n+    @Override\n+    public void init(ComputationContext context) {\n+        super.init(context);\n+        transport = new HttpTransport.Builder().withApiKey(apiKey).build();\n+    }\n+\n+    @Override\n+    protected void processLatencies(ComputationContext context, LogPartitionGroup logGroup, List<Latency> latencies) {\n+        Latency groupLatency = Latency.of(latencies);\n+        publishMetrics(groupLatency, basePrefix, \"all\", logGroup.name, logGroup.group);\n+        if (!partition) {\n+            return;\n+        }\n+        for (int part = 0; part < latencies.size(); part++) {\n+            publishMetrics(groupLatency, basePrefix, String.format(\"%02d\", part), logGroup.name, logGroup.group);\n+        }\n+    }\n+\n+    protected void publishMetrics(Latency latency, String prefix, String partition, String stream, String group) {\n+        if (verbose) {\n+            log.info(latency.toString());\n+        }\n+        // upper is the time when the latency has been measured\n+        long metricTime = latency.upper() / 1000;\n+        String host = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MDQyMA=="}, "originalCommit": {"oid": "b42f8af157bd62bca3fa19a936a8d78a28b25e9d"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTg5NzkwOnYy", "diffSide": "RIGHT", "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0NTozN1rOFnfhUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0NTozN1rOFnfhUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NTIxNg==", "bodyText": "Maybe?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.debug(\"Error when closing graphite socket: \", e);\n          \n          \n            \n                            log.debug(\"Error when closing datadog client: \", e);", "url": "https://github.com/nuxeo/nuxeo/pull/3734#discussion_r376955216", "createdAt": "2020-02-10T09:45:37Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyDatadogComputation.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.tools.command;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.coursera.metrics.datadog.model.DatadogGauge;\n+import org.coursera.metrics.datadog.transport.HttpTransport;\n+import org.coursera.metrics.datadog.transport.Transport;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+\n+/**\n+ * A computation that sends periodically latencies to Datadog.\n+ *\n+ * @since 11.1\n+ */\n+public class LatencyDatadogComputation extends LatencyTrackerComputation {\n+\n+    private static final Log log = LogFactory.getLog(LatencyDatadogComputation.class);\n+\n+    protected final String apiKey;\n+\n+    protected final List<String> tags;\n+\n+    protected final String basePrefix;\n+\n+    protected final boolean partition;\n+\n+    protected HttpTransport transport;\n+\n+    public LatencyDatadogComputation(LogManager manager, List<String> logNames, String apiKey, List<String> tags,\n+            String basePrefix, String computationName, int intervalSecond, int count, boolean partition,\n+            boolean verbose, Codec<Record> codec) {\n+        super(manager, logNames, computationName, intervalSecond, count, verbose, codec, 0);\n+        this.apiKey = apiKey;\n+        this.tags = tags;\n+        this.basePrefix = basePrefix;\n+        this.partition = partition;\n+    }\n+\n+    @Override\n+    public void init(ComputationContext context) {\n+        super.init(context);\n+        transport = new HttpTransport.Builder().withApiKey(apiKey).build();\n+    }\n+\n+    @Override\n+    protected void processLatencies(ComputationContext context, LogPartitionGroup logGroup, List<Latency> latencies) {\n+        Latency groupLatency = Latency.of(latencies);\n+        publishMetrics(groupLatency, basePrefix, \"all\", logGroup.name, logGroup.group);\n+        if (!partition) {\n+            return;\n+        }\n+        for (int part = 0; part < latencies.size(); part++) {\n+            publishMetrics(groupLatency, basePrefix, String.format(\"%02d\", part), logGroup.name, logGroup.group);\n+        }\n+    }\n+\n+    protected void publishMetrics(Latency latency, String prefix, String partition, String stream, String group) {\n+        if (verbose) {\n+            log.info(latency.toString());\n+        }\n+        // upper is the time when the latency has been measured\n+        long metricTime = latency.upper() / 1000;\n+        String host = \"\";\n+        List<String> mTags = new ArrayList<>(tags.size() + 3);\n+        mTags.addAll(tags);\n+        mTags.add(\"stream:\" + stream);\n+        mTags.add(\"consumer:\" + group);\n+        mTags.add(\"partition:\" + partition);\n+        try {\n+            Transport.Request request = transport.prepare();\n+            request.addGauge(new DatadogGauge(prefix + \".lag\", latency.lag().lag(), metricTime, host, mTags));\n+            request.addGauge(new DatadogGauge(prefix + \".end\", latency.lag().upper(), metricTime, host, mTags));\n+            request.addGauge(new DatadogGauge(prefix + \".pos\", latency.lag().lower(), metricTime, host, mTags));\n+            request.addGauge(new DatadogGauge(prefix + \".latency\", latency.latency(), metricTime, host, mTags));\n+            request.send();\n+        } catch (IOException e) {\n+            log.error(\"Fail to prepare metric to datadog \" + prefix + \" \" + latency, e);\n+        } catch (Exception e) {\n+            log.error(\"Fail to send metric to datadog \" + prefix + \" \" + latency, e);\n+        }\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        super.destroy();\n+        if (transport != null) {\n+            try {\n+                transport.close();\n+            } catch (IOException e) {\n+                log.debug(\"Error when closing graphite socket: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42f8af157bd62bca3fa19a936a8d78a28b25e9d"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTkwOTUwOnYy", "diffSide": "RIGHT", "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyMonitorComputation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0ODoyN1rOFnfn_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0ODoyN1rOFnfn_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NjkyNA==", "bodyText": "What about the backward compat? Can we provide a deprecated constructor?", "url": "https://github.com/nuxeo/nuxeo/pull/3734#discussion_r376956924", "createdAt": "2020-02-10T09:48:27Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/LatencyMonitorComputation.java", "diffHunk": "@@ -52,13 +53,17 @@\n \n     protected GraphiteSender graphite;\n \n+    protected final boolean partition;\n+\n     public LatencyMonitorComputation(LogManager manager, List<String> logNames, String host, int port, boolean udp,\n-            String basePrefix, String computationName, int intervalSecond, int count, boolean verbose,\n+            String basePrefix, String computationName, int intervalSecond, int count, boolean partition,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42f8af157bd62bca3fa19a936a8d78a28b25e9d"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4245, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}