{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzA4OTAx", "number": 3862, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowNjo0N1rODrT7_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo0NDo1NlrODtSCdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQyMDE0OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowNjo0N1rOF7lWEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzo1NjowOFrOF7nesg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjE2MQ==", "bodyText": "Instead of doing manual parsing/matching of the Accept: header, wouldn't it be simpler to have two methods, one with @Produces(MediaType.APPLICATION_JSON) and one with @Produces(MediaType.TEXT_PLAIN) to let the JAX-RS framework itself do the matching?", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r398022161", "createdAt": "2020-03-25T17:06:47Z", "author": {"login": "efge"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "diffHunk": "@@ -65,12 +70,20 @@ protected void initialize(Object... args) {\n     }\n \n     @POST\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN })\n     public Response createToken(@QueryParam(\"application\") String applicationName,\n             @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n-            @QueryParam(\"permission\") String permission) {\n+            @QueryParam(\"permission\") String permission, @HeaderParam(\"accept\") String acceptType) {\n         String username = getCurrentUser().getName();\n         String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n-        return Response.ok(token).status(Response.Status.CREATED).build();\n+        String body = token;\n+        MediaType cType = MediaType.TEXT_PLAIN_TYPE;\n+        List<MediaType> acceptList = accepts(acceptType);\n+        if (acceptList.isEmpty() || acceptList.stream().anyMatch(type -> MediaType.APPLICATION_JSON_TYPE.isCompatible(type))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84db88b052cc8146b7e516631eb072e5c14c863"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NzEzOA==", "bodyText": "Delegated matching to JAX-RS and added \"detail\" query parameter to return populated JSON object.", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r398057138", "createdAt": "2020-03-25T17:56:08Z", "author": {"login": "dbnuxeo"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "diffHunk": "@@ -65,12 +70,20 @@ protected void initialize(Object... args) {\n     }\n \n     @POST\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN })\n     public Response createToken(@QueryParam(\"application\") String applicationName,\n             @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n-            @QueryParam(\"permission\") String permission) {\n+            @QueryParam(\"permission\") String permission, @HeaderParam(\"accept\") String acceptType) {\n         String username = getCurrentUser().getName();\n         String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n-        return Response.ok(token).status(Response.Status.CREATED).build();\n+        String body = token;\n+        MediaType cType = MediaType.TEXT_PLAIN_TYPE;\n+        List<MediaType> acceptList = accepts(acceptType);\n+        if (acceptList.isEmpty() || acceptList.stream().anyMatch(type -> MediaType.APPLICATION_JSON_TYPE.isCompatible(type))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjE2MQ=="}, "originalCommit": {"oid": "d84db88b052cc8146b7e516631eb072e5c14c863"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQyMjgwOnYy", "diffSide": "RIGHT", "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowNzoyNFrOF7lXxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzo1NjoyMlrOF7nfTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjU5OA==", "bodyText": "Please avoid reorganizing imports in the same commit as the features/fixes being implemented themselves.", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r398022598", "createdAt": "2020-03-25T17:07:24Z", "author": {"login": "efge"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "diffHunk": "@@ -18,29 +18,34 @@\n  */\n package org.nuxeo.ecm.restapi.server.jaxrs.login.tokenauth;\n \n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentModelList;\n-import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n-import org.nuxeo.ecm.tokenauth.io.AuthenticationToken;\n-import org.nuxeo.ecm.webengine.model.WebObject;\n-import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n-import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n-import org.nuxeo.ecm.tokenauth.service.TokenAuthenticationService;\n-import org.nuxeo.runtime.api.Framework;\n+import java.util.Calendar;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84db88b052cc8146b7e516631eb072e5c14c863"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1NzI5Mw==", "bodyText": "Restored order.", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r398057293", "createdAt": "2020-03-25T17:56:22Z", "author": {"login": "dbnuxeo"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "diffHunk": "@@ -18,29 +18,34 @@\n  */\n package org.nuxeo.ecm.restapi.server.jaxrs.login.tokenauth;\n \n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.ecm.core.api.DocumentModelList;\n-import org.nuxeo.ecm.core.api.NuxeoPrincipal;\n-import org.nuxeo.ecm.tokenauth.io.AuthenticationToken;\n-import org.nuxeo.ecm.webengine.model.WebObject;\n-import org.nuxeo.ecm.webengine.model.impl.AbstractResource;\n-import org.nuxeo.ecm.webengine.model.impl.ResourceTypeImpl;\n-import org.nuxeo.ecm.tokenauth.service.TokenAuthenticationService;\n-import org.nuxeo.runtime.api.Framework;\n+import java.util.Calendar;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjU5OA=="}, "originalCommit": {"oid": "d84db88b052cc8146b7e516631eb072e5c14c863"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzY5MjI4OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/test/java/org/nuxeo/ecm/restapi/test/AuthenticationTokensTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODowOTo1NFrOF7oC1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTowMzo1NlrOF8LTWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NjM5MQ==", "bodyText": "Shouldn't we check respToken.get(\"token\") too? It's the main info after all", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r398066391", "createdAt": "2020-03-25T18:09:54Z", "author": {"login": "efge"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/test/java/org/nuxeo/ecm/restapi/test/AuthenticationTokensTest.java", "diffHunk": "@@ -106,16 +107,79 @@ public void itCanRevokeTokens() throws Exception {\n     }\n \n     @Test\n-    public void itCanCreateTokens() throws Exception {\n+    public void itCanCreateTextTokens() throws Exception {\n         // acquire a token\n         MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n         params.put(\"application\", Collections.singletonList(\"app\"));\n         params.put(\"deviceId\", Collections.singletonList(\"device\"));\n         params.put(\"permission\", Collections.singletonList(\"rw\"));\n-        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null)) {\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.TEXT_PLAIN })) {\n             assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n             String tokenId = response.getEntity(String.class);\n             assertFalse(tokenId.isEmpty());\n+            assertFalse(tokenId.startsWith(\"\\\"\"));\n+            assertFalse(tokenId.endsWith(\"\\\"\"));\n+            assertTrue(MediaType.TEXT_PLAIN_TYPE.isCompatible(response.getType()));\n+        }\n+\n+        // check tokens for current user\n+        List<JsonNode> tokens = getTokens();\n+        assertEquals(1, tokens.size());\n+        JsonNode token = tokens.get(0);\n+        assertEquals(\"app\", token.get(\"application\").textValue());\n+        assertEquals(\"device\", token.get(\"deviceId\").textValue());\n+        assertEquals(\"rw\", token.get(\"permission\").textValue());\n+        assertFalse(token.get(\"creationDate\").textValue().isEmpty());\n+        assertFalse(token.get(\"username\").textValue().isEmpty());\n+    }\n+\n+    @Test\n+    public void itCanCreateJSONTokens() throws Exception {\n+        // acquire a token\n+        MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n+        params.put(\"application\", Collections.singletonList(\"app\"));\n+        params.put(\"deviceId\", Collections.singletonList(\"device\"));\n+        params.put(\"permission\", Collections.singletonList(\"rw\"));\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.APPLICATION_JSON })) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+            String tokenId = response.getEntity(String.class);\n+            assertFalse(tokenId.isEmpty());\n+            assertTrue(tokenId.startsWith(\"\\\"\"));\n+            assertTrue(tokenId.endsWith(\"\\\"\"));\n+            assertTrue(MediaType.APPLICATION_JSON_TYPE.isCompatible(response.getType()));\n+        }\n+\n+        // check tokens for current user\n+        List<JsonNode> tokens = getTokens();\n+        assertEquals(1, tokens.size());\n+        JsonNode token = tokens.get(0);\n+        assertEquals(\"app\", token.get(\"application\").textValue());\n+        assertEquals(\"device\", token.get(\"deviceId\").textValue());\n+        assertEquals(\"rw\", token.get(\"permission\").textValue());\n+        assertFalse(token.get(\"creationDate\").textValue().isEmpty());\n+        assertFalse(token.get(\"username\").textValue().isEmpty());\n+    }\n+\n+    @Test\n+    public void itCanCreateDetailedJSONTokens() throws Exception {\n+        // acquire a token\n+        MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n+        params.put(\"application\", Collections.singletonList(\"app\"));\n+        params.put(\"deviceId\", Collections.singletonList(\"device\"));\n+        params.put(\"permission\", Collections.singletonList(\"rw\"));\n+        params.put(\"detail\", Collections.singletonList(\"true\"));\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.APPLICATION_JSON })) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+            JsonNode respToken = mapper.readTree(response.getEntityInputStream());\n+            assertTrue(MediaType.APPLICATION_JSON_TYPE.isCompatible(response.getType()));\n+            assertEquals(\"app\", respToken.get(\"application\").textValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c05ea45bf546172c6f0cc6569799cd7d059064b6"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5OTY3OQ==", "bodyText": "Done", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r398099679", "createdAt": "2020-03-25T19:02:40Z", "author": {"login": "dbnuxeo"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/test/java/org/nuxeo/ecm/restapi/test/AuthenticationTokensTest.java", "diffHunk": "@@ -106,16 +107,79 @@ public void itCanRevokeTokens() throws Exception {\n     }\n \n     @Test\n-    public void itCanCreateTokens() throws Exception {\n+    public void itCanCreateTextTokens() throws Exception {\n         // acquire a token\n         MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n         params.put(\"application\", Collections.singletonList(\"app\"));\n         params.put(\"deviceId\", Collections.singletonList(\"device\"));\n         params.put(\"permission\", Collections.singletonList(\"rw\"));\n-        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null)) {\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.TEXT_PLAIN })) {\n             assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n             String tokenId = response.getEntity(String.class);\n             assertFalse(tokenId.isEmpty());\n+            assertFalse(tokenId.startsWith(\"\\\"\"));\n+            assertFalse(tokenId.endsWith(\"\\\"\"));\n+            assertTrue(MediaType.TEXT_PLAIN_TYPE.isCompatible(response.getType()));\n+        }\n+\n+        // check tokens for current user\n+        List<JsonNode> tokens = getTokens();\n+        assertEquals(1, tokens.size());\n+        JsonNode token = tokens.get(0);\n+        assertEquals(\"app\", token.get(\"application\").textValue());\n+        assertEquals(\"device\", token.get(\"deviceId\").textValue());\n+        assertEquals(\"rw\", token.get(\"permission\").textValue());\n+        assertFalse(token.get(\"creationDate\").textValue().isEmpty());\n+        assertFalse(token.get(\"username\").textValue().isEmpty());\n+    }\n+\n+    @Test\n+    public void itCanCreateJSONTokens() throws Exception {\n+        // acquire a token\n+        MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n+        params.put(\"application\", Collections.singletonList(\"app\"));\n+        params.put(\"deviceId\", Collections.singletonList(\"device\"));\n+        params.put(\"permission\", Collections.singletonList(\"rw\"));\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.APPLICATION_JSON })) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+            String tokenId = response.getEntity(String.class);\n+            assertFalse(tokenId.isEmpty());\n+            assertTrue(tokenId.startsWith(\"\\\"\"));\n+            assertTrue(tokenId.endsWith(\"\\\"\"));\n+            assertTrue(MediaType.APPLICATION_JSON_TYPE.isCompatible(response.getType()));\n+        }\n+\n+        // check tokens for current user\n+        List<JsonNode> tokens = getTokens();\n+        assertEquals(1, tokens.size());\n+        JsonNode token = tokens.get(0);\n+        assertEquals(\"app\", token.get(\"application\").textValue());\n+        assertEquals(\"device\", token.get(\"deviceId\").textValue());\n+        assertEquals(\"rw\", token.get(\"permission\").textValue());\n+        assertFalse(token.get(\"creationDate\").textValue().isEmpty());\n+        assertFalse(token.get(\"username\").textValue().isEmpty());\n+    }\n+\n+    @Test\n+    public void itCanCreateDetailedJSONTokens() throws Exception {\n+        // acquire a token\n+        MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n+        params.put(\"application\", Collections.singletonList(\"app\"));\n+        params.put(\"deviceId\", Collections.singletonList(\"device\"));\n+        params.put(\"permission\", Collections.singletonList(\"rw\"));\n+        params.put(\"detail\", Collections.singletonList(\"true\"));\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.APPLICATION_JSON })) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+            JsonNode respToken = mapper.readTree(response.getEntityInputStream());\n+            assertTrue(MediaType.APPLICATION_JSON_TYPE.isCompatible(response.getType()));\n+            assertEquals(\"app\", respToken.get(\"application\").textValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NjM5MQ=="}, "originalCommit": {"oid": "c05ea45bf546172c6f0cc6569799cd7d059064b6"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI2NjM0NQ==", "bodyText": "I don't see a change. Did you push on the correct repo?", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r398266345", "createdAt": "2020-03-26T01:28:40Z", "author": {"login": "efge"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/test/java/org/nuxeo/ecm/restapi/test/AuthenticationTokensTest.java", "diffHunk": "@@ -106,16 +107,79 @@ public void itCanRevokeTokens() throws Exception {\n     }\n \n     @Test\n-    public void itCanCreateTokens() throws Exception {\n+    public void itCanCreateTextTokens() throws Exception {\n         // acquire a token\n         MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n         params.put(\"application\", Collections.singletonList(\"app\"));\n         params.put(\"deviceId\", Collections.singletonList(\"device\"));\n         params.put(\"permission\", Collections.singletonList(\"rw\"));\n-        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null)) {\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.TEXT_PLAIN })) {\n             assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n             String tokenId = response.getEntity(String.class);\n             assertFalse(tokenId.isEmpty());\n+            assertFalse(tokenId.startsWith(\"\\\"\"));\n+            assertFalse(tokenId.endsWith(\"\\\"\"));\n+            assertTrue(MediaType.TEXT_PLAIN_TYPE.isCompatible(response.getType()));\n+        }\n+\n+        // check tokens for current user\n+        List<JsonNode> tokens = getTokens();\n+        assertEquals(1, tokens.size());\n+        JsonNode token = tokens.get(0);\n+        assertEquals(\"app\", token.get(\"application\").textValue());\n+        assertEquals(\"device\", token.get(\"deviceId\").textValue());\n+        assertEquals(\"rw\", token.get(\"permission\").textValue());\n+        assertFalse(token.get(\"creationDate\").textValue().isEmpty());\n+        assertFalse(token.get(\"username\").textValue().isEmpty());\n+    }\n+\n+    @Test\n+    public void itCanCreateJSONTokens() throws Exception {\n+        // acquire a token\n+        MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n+        params.put(\"application\", Collections.singletonList(\"app\"));\n+        params.put(\"deviceId\", Collections.singletonList(\"device\"));\n+        params.put(\"permission\", Collections.singletonList(\"rw\"));\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.APPLICATION_JSON })) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+            String tokenId = response.getEntity(String.class);\n+            assertFalse(tokenId.isEmpty());\n+            assertTrue(tokenId.startsWith(\"\\\"\"));\n+            assertTrue(tokenId.endsWith(\"\\\"\"));\n+            assertTrue(MediaType.APPLICATION_JSON_TYPE.isCompatible(response.getType()));\n+        }\n+\n+        // check tokens for current user\n+        List<JsonNode> tokens = getTokens();\n+        assertEquals(1, tokens.size());\n+        JsonNode token = tokens.get(0);\n+        assertEquals(\"app\", token.get(\"application\").textValue());\n+        assertEquals(\"device\", token.get(\"deviceId\").textValue());\n+        assertEquals(\"rw\", token.get(\"permission\").textValue());\n+        assertFalse(token.get(\"creationDate\").textValue().isEmpty());\n+        assertFalse(token.get(\"username\").textValue().isEmpty());\n+    }\n+\n+    @Test\n+    public void itCanCreateDetailedJSONTokens() throws Exception {\n+        // acquire a token\n+        MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n+        params.put(\"application\", Collections.singletonList(\"app\"));\n+        params.put(\"deviceId\", Collections.singletonList(\"device\"));\n+        params.put(\"permission\", Collections.singletonList(\"rw\"));\n+        params.put(\"detail\", Collections.singletonList(\"true\"));\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.APPLICATION_JSON })) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+            JsonNode respToken = mapper.readTree(response.getEntityInputStream());\n+            assertTrue(MediaType.APPLICATION_JSON_TYPE.isCompatible(response.getType()));\n+            assertEquals(\"app\", respToken.get(\"application\").textValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NjM5MQ=="}, "originalCommit": {"oid": "c05ea45bf546172c6f0cc6569799cd7d059064b6"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU5NTcxNQ==", "bodyText": "Yes.  The JSON serializes the token value as \"id\" and not \"token\".", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r398595715", "createdAt": "2020-03-26T14:01:42Z", "author": {"login": "dbnuxeo"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/test/java/org/nuxeo/ecm/restapi/test/AuthenticationTokensTest.java", "diffHunk": "@@ -106,16 +107,79 @@ public void itCanRevokeTokens() throws Exception {\n     }\n \n     @Test\n-    public void itCanCreateTokens() throws Exception {\n+    public void itCanCreateTextTokens() throws Exception {\n         // acquire a token\n         MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n         params.put(\"application\", Collections.singletonList(\"app\"));\n         params.put(\"deviceId\", Collections.singletonList(\"device\"));\n         params.put(\"permission\", Collections.singletonList(\"rw\"));\n-        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null)) {\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.TEXT_PLAIN })) {\n             assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n             String tokenId = response.getEntity(String.class);\n             assertFalse(tokenId.isEmpty());\n+            assertFalse(tokenId.startsWith(\"\\\"\"));\n+            assertFalse(tokenId.endsWith(\"\\\"\"));\n+            assertTrue(MediaType.TEXT_PLAIN_TYPE.isCompatible(response.getType()));\n+        }\n+\n+        // check tokens for current user\n+        List<JsonNode> tokens = getTokens();\n+        assertEquals(1, tokens.size());\n+        JsonNode token = tokens.get(0);\n+        assertEquals(\"app\", token.get(\"application\").textValue());\n+        assertEquals(\"device\", token.get(\"deviceId\").textValue());\n+        assertEquals(\"rw\", token.get(\"permission\").textValue());\n+        assertFalse(token.get(\"creationDate\").textValue().isEmpty());\n+        assertFalse(token.get(\"username\").textValue().isEmpty());\n+    }\n+\n+    @Test\n+    public void itCanCreateJSONTokens() throws Exception {\n+        // acquire a token\n+        MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n+        params.put(\"application\", Collections.singletonList(\"app\"));\n+        params.put(\"deviceId\", Collections.singletonList(\"device\"));\n+        params.put(\"permission\", Collections.singletonList(\"rw\"));\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.APPLICATION_JSON })) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+            String tokenId = response.getEntity(String.class);\n+            assertFalse(tokenId.isEmpty());\n+            assertTrue(tokenId.startsWith(\"\\\"\"));\n+            assertTrue(tokenId.endsWith(\"\\\"\"));\n+            assertTrue(MediaType.APPLICATION_JSON_TYPE.isCompatible(response.getType()));\n+        }\n+\n+        // check tokens for current user\n+        List<JsonNode> tokens = getTokens();\n+        assertEquals(1, tokens.size());\n+        JsonNode token = tokens.get(0);\n+        assertEquals(\"app\", token.get(\"application\").textValue());\n+        assertEquals(\"device\", token.get(\"deviceId\").textValue());\n+        assertEquals(\"rw\", token.get(\"permission\").textValue());\n+        assertFalse(token.get(\"creationDate\").textValue().isEmpty());\n+        assertFalse(token.get(\"username\").textValue().isEmpty());\n+    }\n+\n+    @Test\n+    public void itCanCreateDetailedJSONTokens() throws Exception {\n+        // acquire a token\n+        MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n+        params.put(\"application\", Collections.singletonList(\"app\"));\n+        params.put(\"deviceId\", Collections.singletonList(\"device\"));\n+        params.put(\"permission\", Collections.singletonList(\"rw\"));\n+        params.put(\"detail\", Collections.singletonList(\"true\"));\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.APPLICATION_JSON })) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+            JsonNode respToken = mapper.readTree(response.getEntityInputStream());\n+            assertTrue(MediaType.APPLICATION_JSON_TYPE.isCompatible(response.getType()));\n+            assertEquals(\"app\", respToken.get(\"application\").textValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NjM5MQ=="}, "originalCommit": {"oid": "c05ea45bf546172c6f0cc6569799cd7d059064b6"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0NDA1OQ==", "bodyText": "Ah ok yes AuthenticationTokenWriter does that work and uses a different name.", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r398644059", "createdAt": "2020-03-26T15:03:56Z", "author": {"login": "efge"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/test/java/org/nuxeo/ecm/restapi/test/AuthenticationTokensTest.java", "diffHunk": "@@ -106,16 +107,79 @@ public void itCanRevokeTokens() throws Exception {\n     }\n \n     @Test\n-    public void itCanCreateTokens() throws Exception {\n+    public void itCanCreateTextTokens() throws Exception {\n         // acquire a token\n         MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n         params.put(\"application\", Collections.singletonList(\"app\"));\n         params.put(\"deviceId\", Collections.singletonList(\"device\"));\n         params.put(\"permission\", Collections.singletonList(\"rw\"));\n-        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null)) {\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.TEXT_PLAIN })) {\n             assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n             String tokenId = response.getEntity(String.class);\n             assertFalse(tokenId.isEmpty());\n+            assertFalse(tokenId.startsWith(\"\\\"\"));\n+            assertFalse(tokenId.endsWith(\"\\\"\"));\n+            assertTrue(MediaType.TEXT_PLAIN_TYPE.isCompatible(response.getType()));\n+        }\n+\n+        // check tokens for current user\n+        List<JsonNode> tokens = getTokens();\n+        assertEquals(1, tokens.size());\n+        JsonNode token = tokens.get(0);\n+        assertEquals(\"app\", token.get(\"application\").textValue());\n+        assertEquals(\"device\", token.get(\"deviceId\").textValue());\n+        assertEquals(\"rw\", token.get(\"permission\").textValue());\n+        assertFalse(token.get(\"creationDate\").textValue().isEmpty());\n+        assertFalse(token.get(\"username\").textValue().isEmpty());\n+    }\n+\n+    @Test\n+    public void itCanCreateJSONTokens() throws Exception {\n+        // acquire a token\n+        MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n+        params.put(\"application\", Collections.singletonList(\"app\"));\n+        params.put(\"deviceId\", Collections.singletonList(\"device\"));\n+        params.put(\"permission\", Collections.singletonList(\"rw\"));\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.APPLICATION_JSON })) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+            String tokenId = response.getEntity(String.class);\n+            assertFalse(tokenId.isEmpty());\n+            assertTrue(tokenId.startsWith(\"\\\"\"));\n+            assertTrue(tokenId.endsWith(\"\\\"\"));\n+            assertTrue(MediaType.APPLICATION_JSON_TYPE.isCompatible(response.getType()));\n+        }\n+\n+        // check tokens for current user\n+        List<JsonNode> tokens = getTokens();\n+        assertEquals(1, tokens.size());\n+        JsonNode token = tokens.get(0);\n+        assertEquals(\"app\", token.get(\"application\").textValue());\n+        assertEquals(\"device\", token.get(\"deviceId\").textValue());\n+        assertEquals(\"rw\", token.get(\"permission\").textValue());\n+        assertFalse(token.get(\"creationDate\").textValue().isEmpty());\n+        assertFalse(token.get(\"username\").textValue().isEmpty());\n+    }\n+\n+    @Test\n+    public void itCanCreateDetailedJSONTokens() throws Exception {\n+        // acquire a token\n+        MultivaluedMap<String, String> params = new MultivaluedMapImpl();\n+        params.put(\"application\", Collections.singletonList(\"app\"));\n+        params.put(\"deviceId\", Collections.singletonList(\"device\"));\n+        params.put(\"permission\", Collections.singletonList(\"rw\"));\n+        params.put(\"detail\", Collections.singletonList(\"true\"));\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, \"/token\", null, params, null, null,\n+                new String[] { MediaType.APPLICATION_JSON })) {\n+            assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n+            JsonNode respToken = mapper.readTree(response.getEntityInputStream());\n+            assertTrue(MediaType.APPLICATION_JSON_TYPE.isCompatible(response.getType()));\n+            assertEquals(\"app\", respToken.get(\"application\").textValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NjM5MQ=="}, "originalCommit": {"oid": "c05ea45bf546172c6f0cc6569799cd7d059064b6"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM4OTk3OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxNDo1MVrOF9m0SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyODowN1rOF-eIAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MzQzMg==", "bodyText": "This could be reworked to:\nbody = getTokens(applicationName).stream()\n                                 .filter(item -> token.equals(item.getToken()))\n                                 .findFirst()\n                                 .orElse(body);", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r400143432", "createdAt": "2020-03-30T12:14:51Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "diffHunk": "@@ -65,12 +65,32 @@ protected void initialize(Object... args) {\n     }\n \n     @POST\n+    @Produces(MediaType.TEXT_PLAIN)\n     public Response createToken(@QueryParam(\"application\") String applicationName,\n             @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n             @QueryParam(\"permission\") String permission) {\n         String username = getCurrentUser().getName();\n         String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n-        return Response.ok(token).status(Response.Status.CREATED).build();\n+        return Response.ok(token).type(MediaType.TEXT_PLAIN_TYPE).status(Response.Status.CREATED).build();\n+    }\n+\n+    @POST\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response createJSONToken(@QueryParam(\"application\") String applicationName,\n+            @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n+            @QueryParam(\"permission\") String permission, @QueryParam(\"detail\") boolean detail) {\n+        String username = getCurrentUser().getName();\n+        String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n+        Object body = String.format(\"\\\"%s\\\"\", token);\n+        if (detail) {\n+            // Get the token from the service to populate additional fields like 'creationDate'\n+            AuthenticationToken at = getTokens(applicationName).stream().filter(item -> token.equals(item.getToken()))\n+                    .findFirst().orElse(null);\n+            if (at != null) {\n+            \tbody = at;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c686c77774343cc93f04ca6f88d54118264cf63a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0OTI1NQ==", "bodyText": "It could, but the receiver type would have to be Object.  I kept it this way for type readability.", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r400149255", "createdAt": "2020-03-30T12:24:34Z", "author": {"login": "dbnuxeo"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "diffHunk": "@@ -65,12 +65,32 @@ protected void initialize(Object... args) {\n     }\n \n     @POST\n+    @Produces(MediaType.TEXT_PLAIN)\n     public Response createToken(@QueryParam(\"application\") String applicationName,\n             @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n             @QueryParam(\"permission\") String permission) {\n         String username = getCurrentUser().getName();\n         String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n-        return Response.ok(token).status(Response.Status.CREATED).build();\n+        return Response.ok(token).type(MediaType.TEXT_PLAIN_TYPE).status(Response.Status.CREATED).build();\n+    }\n+\n+    @POST\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response createJSONToken(@QueryParam(\"application\") String applicationName,\n+            @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n+            @QueryParam(\"permission\") String permission, @QueryParam(\"detail\") boolean detail) {\n+        String username = getCurrentUser().getName();\n+        String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n+        Object body = String.format(\"\\\"%s\\\"\", token);\n+        if (detail) {\n+            // Get the token from the service to populate additional fields like 'creationDate'\n+            AuthenticationToken at = getTokens(applicationName).stream().filter(item -> token.equals(item.getToken()))\n+                    .findFirst().orElse(null);\n+            if (at != null) {\n+            \tbody = at;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MzQzMg=="}, "originalCommit": {"oid": "c686c77774343cc93f04ca6f88d54118264cf63a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1ODQ4Mw==", "bodyText": "It could be interesting if we're using the type, this is not the case here. The information it brings can be given by recent IDE on findFirst() line.\nFor readability too, the current has an extra null check making code strange to read.\nAlso, it is not formatted, which will end to something less readable in my opinion:\nAuthenticationToken at = getTokens(applicationName).stream()\n                                                   .filter(item -> token.equals(item.getToken()))\n                                                   .findFirst()\n                                                   .orElse(null);\nif (at != null) {\n    body = at;\n}", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r400158483", "createdAt": "2020-03-30T12:39:52Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "diffHunk": "@@ -65,12 +65,32 @@ protected void initialize(Object... args) {\n     }\n \n     @POST\n+    @Produces(MediaType.TEXT_PLAIN)\n     public Response createToken(@QueryParam(\"application\") String applicationName,\n             @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n             @QueryParam(\"permission\") String permission) {\n         String username = getCurrentUser().getName();\n         String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n-        return Response.ok(token).status(Response.Status.CREATED).build();\n+        return Response.ok(token).type(MediaType.TEXT_PLAIN_TYPE).status(Response.Status.CREATED).build();\n+    }\n+\n+    @POST\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response createJSONToken(@QueryParam(\"application\") String applicationName,\n+            @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n+            @QueryParam(\"permission\") String permission, @QueryParam(\"detail\") boolean detail) {\n+        String username = getCurrentUser().getName();\n+        String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n+        Object body = String.format(\"\\\"%s\\\"\", token);\n+        if (detail) {\n+            // Get the token from the service to populate additional fields like 'creationDate'\n+            AuthenticationToken at = getTokens(applicationName).stream().filter(item -> token.equals(item.getToken()))\n+                    .findFirst().orElse(null);\n+            if (at != null) {\n+            \tbody = at;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MzQzMg=="}, "originalCommit": {"oid": "c686c77774343cc93f04ca6f88d54118264cf63a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0OTYwMQ==", "bodyText": "Resolved this issue, had to erase the type signature with a map call.", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r401049601", "createdAt": "2020-03-31T16:28:07Z", "author": {"login": "dbnuxeo"}, "path": "nuxeo-services/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "diffHunk": "@@ -65,12 +65,32 @@ protected void initialize(Object... args) {\n     }\n \n     @POST\n+    @Produces(MediaType.TEXT_PLAIN)\n     public Response createToken(@QueryParam(\"application\") String applicationName,\n             @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n             @QueryParam(\"permission\") String permission) {\n         String username = getCurrentUser().getName();\n         String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n-        return Response.ok(token).status(Response.Status.CREATED).build();\n+        return Response.ok(token).type(MediaType.TEXT_PLAIN_TYPE).status(Response.Status.CREATED).build();\n+    }\n+\n+    @POST\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response createJSONToken(@QueryParam(\"application\") String applicationName,\n+            @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n+            @QueryParam(\"permission\") String permission, @QueryParam(\"detail\") boolean detail) {\n+        String username = getCurrentUser().getName();\n+        String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n+        Object body = String.format(\"\\\"%s\\\"\", token);\n+        if (detail) {\n+            // Get the token from the service to populate additional fields like 'creationDate'\n+            AuthenticationToken at = getTokens(applicationName).stream().filter(item -> token.equals(item.getToken()))\n+                    .findFirst().orElse(null);\n+            if (at != null) {\n+            \tbody = at;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MzQzMg=="}, "originalCommit": {"oid": "c686c77774343cc93f04ca6f88d54118264cf63a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODA4MDU1OnYy", "diffSide": "RIGHT", "path": "modules/platform/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo0NDo1NlrOF-niTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTowODoyM1rOF-oTVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwMzc5MQ==", "bodyText": "The comment is a bit distracting when reading the code, especially since it describes what the code does and not why. I'd simply remove it, people interested in understanding why can see in the IDE the error reported if they remove the cast.", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r401203791", "createdAt": "2020-03-31T20:44:56Z", "author": {"login": "efge"}, "path": "modules/platform/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "diffHunk": "@@ -65,12 +65,33 @@ protected void initialize(Object... args) {\n     }\n \n     @POST\n+    @Produces(MediaType.TEXT_PLAIN)\n     public Response createToken(@QueryParam(\"application\") String applicationName,\n             @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n             @QueryParam(\"permission\") String permission) {\n         String username = getCurrentUser().getName();\n         String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n-        return Response.ok(token).status(Response.Status.CREATED).build();\n+        return Response.ok(token).type(MediaType.TEXT_PLAIN_TYPE).status(Response.Status.CREATED).build();\n+    }\n+\n+    @POST\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response createJSONToken(@QueryParam(\"application\") String applicationName,\n+            @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n+            @QueryParam(\"permission\") String permission, @QueryParam(\"detail\") boolean detail) {\n+        String username = getCurrentUser().getName();\n+        String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n+        Object body = String.format(\"\\\"%s\\\"\", token);\n+        if (detail) {\n+            // Get the token from the service to populate additional fields like 'creationDate'\n+            body = getTokens(applicationName).stream()\n+                                             .filter(item -> token.equals(item.getToken()))\n+                                             .findFirst()\n+                                             // Erase AuthenticationToken type signature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45783e0522ca17e1b7ec42533b3b47d94afd910c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNjM0Mg==", "bodyText": "Removed the comment.", "url": "https://github.com/nuxeo/nuxeo/pull/3862#discussion_r401216342", "createdAt": "2020-03-31T21:08:23Z", "author": {"login": "dbnuxeo"}, "path": "modules/platform/login/nuxeo-platform-login-token-rest/src/main/java/org/nuxeo/ecm/restapi/server/jaxrs/login/tokenauth/AuthenticationTokensObject.java", "diffHunk": "@@ -65,12 +65,33 @@ protected void initialize(Object... args) {\n     }\n \n     @POST\n+    @Produces(MediaType.TEXT_PLAIN)\n     public Response createToken(@QueryParam(\"application\") String applicationName,\n             @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n             @QueryParam(\"permission\") String permission) {\n         String username = getCurrentUser().getName();\n         String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n-        return Response.ok(token).status(Response.Status.CREATED).build();\n+        return Response.ok(token).type(MediaType.TEXT_PLAIN_TYPE).status(Response.Status.CREATED).build();\n+    }\n+\n+    @POST\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response createJSONToken(@QueryParam(\"application\") String applicationName,\n+            @QueryParam(\"deviceId\") String deviceId, @QueryParam(\"deviceDescription\") String deviceDescription,\n+            @QueryParam(\"permission\") String permission, @QueryParam(\"detail\") boolean detail) {\n+        String username = getCurrentUser().getName();\n+        String token = service.acquireToken(username, applicationName, deviceId, deviceDescription, permission);\n+        Object body = String.format(\"\\\"%s\\\"\", token);\n+        if (detail) {\n+            // Get the token from the service to populate additional fields like 'creationDate'\n+            body = getTokens(applicationName).stream()\n+                                             .filter(item -> token.equals(item.getToken()))\n+                                             .findFirst()\n+                                             // Erase AuthenticationToken type signature", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwMzc5MQ=="}, "originalCommit": {"oid": "45783e0522ca17e1b7ec42533b3b47d94afd910c"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4215, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}