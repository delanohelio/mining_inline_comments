{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3ODkwMDM5", "number": 4027, "title": "NXP-29098: new migration object", "bodyText": "", "createdAt": "2020-05-14T10:05:30Z", "url": "https://github.com/nuxeo/nuxeo/pull/4027", "merged": true, "mergeCommit": {"oid": "3c99cbbf4b84fe55c7008f5bfb0b55f9284b3426"}, "closed": true, "closedAt": "2020-07-02T13:06:52Z", "author": {"login": "NourNuxeo"}, "timelineItems": {"totalCount": 62, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchK7R7gBqjMzMzU5Mjg1MzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw-hBnAFqTQ0MTY1NzM3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "397739bfe49e10dacff1da2983584bb7b7063b19", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/397739bfe49e10dacff1da2983584bb7b7063b19", "committedDate": "2020-05-14T10:04:40Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "8c5c5a8c09ad0faa0162142c5e199cb3243f9b8f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8c5c5a8c09ad0faa0162142c5e199cb3243f9b8f", "committedDate": "2020-05-14T10:29:15Z", "message": "NXP-29098: new migration object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzAzMzk5", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-411703399", "createdAt": "2020-05-14T11:16:07Z", "commit": {"oid": "8c5c5a8c09ad0faa0162142c5e199cb3243f9b8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMToxNjowOFrOGVXj0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMToxNjowOFrOGVXj0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1OTI4Mw==", "bodyText": "You shouldn't use this exception from javax.resource.spi.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r425059283", "createdAt": "2020-05-14T11:16:08Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -18,6 +18,10 @@\n  */\n package org.nuxeo.runtime.migration;\n \n+import java.util.List;\n+\n+import javax.resource.spi.IllegalStateException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5c5a8c09ad0faa0162142c5e199cb3243f9b8f"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb4063d1df006147ec9b734f807fe2ebaad2e9d2", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cb4063d1df006147ec9b734f807fe2ebaad2e9d2", "committedDate": "2020-05-14T17:10:24Z", "message": "TEMP"}, "afterCommit": {"oid": "df64c9313a5817b7cbc4fa88279a7db327c2e4a3", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/df64c9313a5817b7cbc4fa88279a7db327c2e4a3", "committedDate": "2020-05-14T17:14:40Z", "message": "TEMP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df64c9313a5817b7cbc4fa88279a7db327c2e4a3", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/df64c9313a5817b7cbc4fa88279a7db327c2e4a3", "committedDate": "2020-05-14T17:14:40Z", "message": "TEMP"}, "afterCommit": {"oid": "f870430636cd49ac55c7569c188bb5bd77602b24", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f870430636cd49ac55c7569c188bb5bd77602b24", "committedDate": "2020-05-14T18:57:44Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f870430636cd49ac55c7569c188bb5bd77602b24", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f870430636cd49ac55c7569c188bb5bd77602b24", "committedDate": "2020-05-14T18:57:44Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "9a1ba7ec4b868152c4d193842eb520c2dfbb795f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9a1ba7ec4b868152c4d193842eb520c2dfbb795f", "committedDate": "2020-05-14T19:00:42Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a1ba7ec4b868152c4d193842eb520c2dfbb795f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9a1ba7ec4b868152c4d193842eb520c2dfbb795f", "committedDate": "2020-05-14T19:00:42Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "ce034af249b47d0cd8a3afb799b8a85fcdec110a", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ce034af249b47d0cd8a3afb799b8a85fcdec110a", "committedDate": "2020-05-15T12:39:57Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce034af249b47d0cd8a3afb799b8a85fcdec110a", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ce034af249b47d0cd8a3afb799b8a85fcdec110a", "committedDate": "2020-05-15T12:39:57Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "baccfa9c38ec1a5476cd1615d79eba307574bec3", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/baccfa9c38ec1a5476cd1615d79eba307574bec3", "committedDate": "2020-05-15T12:43:56Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "baccfa9c38ec1a5476cd1615d79eba307574bec3", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/baccfa9c38ec1a5476cd1615d79eba307574bec3", "committedDate": "2020-05-15T12:43:56Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "4e284588675c14fa0ffaa0ec6b7708a9d19fdf11", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4e284588675c14fa0ffaa0ec6b7708a9d19fdf11", "committedDate": "2020-05-15T12:44:51Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e284588675c14fa0ffaa0ec6b7708a9d19fdf11", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4e284588675c14fa0ffaa0ec6b7708a9d19fdf11", "committedDate": "2020-05-15T12:44:51Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "719a30addcb88122aa5fb1f939f1f73ce6f48050", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/719a30addcb88122aa5fb1f939f1f73ce6f48050", "committedDate": "2020-05-15T12:45:55Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "719a30addcb88122aa5fb1f939f1f73ce6f48050", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/719a30addcb88122aa5fb1f939f1f73ce6f48050", "committedDate": "2020-05-15T12:45:55Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "77dda1c76278af73dd4fa6e2de893b1b8728c0d0", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/77dda1c76278af73dd4fa6e2de893b1b8728c0d0", "committedDate": "2020-05-15T12:51:16Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77dda1c76278af73dd4fa6e2de893b1b8728c0d0", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/77dda1c76278af73dd4fa6e2de893b1b8728c0d0", "committedDate": "2020-05-15T12:51:16Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "2204f1bfa8467700aceced2a6533d672a7583914", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2204f1bfa8467700aceced2a6533d672a7583914", "committedDate": "2020-05-15T12:56:19Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2204f1bfa8467700aceced2a6533d672a7583914", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2204f1bfa8467700aceced2a6533d672a7583914", "committedDate": "2020-05-15T12:56:19Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "55b817a7ec69ca09836a971ef4a14fb637a7e594", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/55b817a7ec69ca09836a971ef4a14fb637a7e594", "committedDate": "2020-05-15T13:06:01Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55b817a7ec69ca09836a971ef4a14fb637a7e594", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/55b817a7ec69ca09836a971ef4a14fb637a7e594", "committedDate": "2020-05-15T13:06:01Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "92c2ae3cea867a337645abaab21655d9a8ada3f8", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/92c2ae3cea867a337645abaab21655d9a8ada3f8", "committedDate": "2020-05-15T13:13:35Z", "message": "NXP-29098: new migration object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDc3NzQ1", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-415477745", "createdAt": "2020-05-20T15:51:06Z", "commit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1MTowNlrOGYSdnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjozMDozN1rOGYUFcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTUwMQ==", "bodyText": "You shouldn't do this, there's a lot of think deploying CoreFeature and this bundle. As you can see on a lot of test bundles, and especially this one, we do not declare components in it and we deploy them where it is needed.\nThere's a special case for test bundle components -> the component is required to deploy the source bundle. This isn't the case there as we're in a test library.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428121501", "createdAt": "2020-05-20T15:51:06Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-test/src/main/resources/META-INF/MANIFEST.MF", "diffHunk": "@@ -30,3 +30,4 @@ Import-Package: com.google.inject,\n  org.nuxeo.ecm.core.work,\n  org.nuxeo.runtime\n Require-Bundle: org.nuxeo.ecm.core\n+Nuxeo-Component: OSGI-INF/dummy-migration.xml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNDEzOQ==", "bodyText": "I would have put this in nuxeo-runtime-migration, what's preventing this?", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428124139", "createdAt": "2020-05-20T15:54:48Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.migration.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.MigrationFeature;\n+import org.nuxeo.runtime.migration.Migration;\n+import org.nuxeo.runtime.migration.MigrationService;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, MigrationFeature.class, TransactionalFeature.class })\n+public class TestMigrationService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNjIzNQ==", "bodyText": "You shouldn't leverage external things. Declare your own migration, deploy it, and use it.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428126235", "createdAt": "2020-05-20T15:57:43Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.migration.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.MigrationFeature;\n+import org.nuxeo.runtime.migration.Migration;\n+import org.nuxeo.runtime.migration.MigrationService;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, MigrationFeature.class, TransactionalFeature.class })\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(2, migrations.size());\n+    }\n+\n+    @Test\n+    public void testGetMigration() {\n+        Migration migration = migrationService.getMigration(\"trash-storage\");\n+        assertEquals(migration.getId(), \"trash-storage\");\n+        assertEquals(migration.getDescription(), \"Migration of in the trash storage model\");\n+        assertEquals(migration.getLabel(), \"migration.trash-storage\");\n+        assertEquals(migration.getStatus().getState(), \"property\");\n+        assertEquals(migration.getSteps().get(\"lifecycle-to-property\").getDescription(),\n+                \"Migrate trashed state from lifecycle to property\");\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNzIzMw==", "bodyText": "testGetMigrations should be sandboxed and it should declare its own migration and assert it fully (not just the size).", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428127233", "createdAt": "2020-05-20T15:59:07Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.migration.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.MigrationFeature;\n+import org.nuxeo.runtime.migration.Migration;\n+import org.nuxeo.runtime.migration.MigrationService;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, MigrationFeature.class, TransactionalFeature.class })\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(2, migrations.size());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNzk3Nw==", "bodyText": "Too expensive for a toString imho.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428127977", "createdAt": "2020-05-20T16:00:08Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.nuxeo.runtime.migration.MigrationDescriptor.MigrationStepDescriptor;\n+import org.nuxeo.runtime.migration.MigrationService.MigrationStatus;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Migration {\n+\n+    protected String id;\n+\n+    protected String description;\n+\n+    protected String label;\n+\n+    protected MigrationStatus status;\n+\n+    protected Map<String, MigrationStepDescriptor> steps;\n+\n+    public Migration(String id, String description, String label, MigrationStatus status,\n+            Map<String, MigrationStepDescriptor> steps) {\n+        this.id = id;\n+        this.description = description;\n+        this.label = label;\n+        this.steps = steps;\n+        this.status = status;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public String getLabel() {\n+        return label;\n+    }\n+\n+    public MigrationStatus getStatus() {\n+        return status;\n+    }\n+\n+    public Map<String, MigrationStepDescriptor> getSteps() {\n+        return steps;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String[] stepsArray = steps.entrySet()\n+                                   .stream()\n+                                   .map(e -> \"'\" + e.getKey() + \"' : \" + \"'\" + e.getValue().getDescription() + \"'\")\n+                                   .toArray(String[]::new);\n+        return \"Migration: [id: '\" + id + \"', description: '\" + description + \"', label: '\" + label + \"', status: '\"\n+                + status.getState() + \"', steps: \" + Arrays.toString(stepsArray) + \"]\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyODEwNA==", "bodyText": "Missing final", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428128104", "createdAt": "2020-05-20T16:00:19Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class MigrationConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyOTU5MA==", "bodyText": "Isn't a problem for javascript when it comes to reading this property (due to .)?", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428129590", "createdAt": "2020-05-20T16:02:26Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class MigrationConstants {\n+\n+    public static final String MIGRATION_ENTITY_TYPE = \"migration\";\n+\n+    public static final String MIGRATION_ID = \"id\";\n+\n+    public static final String MIGRATION_DESCRIPTION = \"description\";\n+\n+    public static final String MIGRATION_DESCRIPTION_LABEL = \"description.label\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzMjMyNw==", "bodyText": "Is it possible to move it next to runStep, ideally before it, in order to gather related methods.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428132327", "createdAt": "2020-05-20T16:06:26Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();\n+\n+    /**\n+     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n+     * @since 11.1\n+     */\n+    void run(String migrationId) throws IllegalArgumentException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNjk4OA==", "bodyText": "Not sure we want this API, we don't have migration to wait during tests, and current migration tests don't need it.\nSuch APIs are a pain when they become available to the world. Here you may want it for tests, but later someone will ask you to make it work in a Nuxeo Cluster... Because it's public on an interface.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428136988", "createdAt": "2020-05-20T16:13:24Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();\n+\n+    /**\n+     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n+     * @since 11.1\n+     */\n+    void run(String migrationId) throws IllegalArgumentException;\n+\n+    /**\n+     * Waits for completion of all migration steps.\n+     *\n+     * @return {@code true} if the migration executor has no more threads running {@code false} otherwise\n+     * @since 11.1\n+     */\n+    boolean await(Duration duration) throws InterruptedException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNzUzNQ==", "bodyText": "Format", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428137535", "createdAt": "2020-05-20T16:14:15Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void run(String migrationId) {\n+        if(getStatus(migrationId) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzODAxMA==", "bodyText": "Format", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428138010", "createdAt": "2020-05-20T16:14:59Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void run(String migrationId) {\n+        if(getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);\n+        }\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n+        Set<MigrationStepDescriptor> availableSteps = getAvailableSteps(descriptor);\n+        if(availableSteps.size() != 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzOTkzMQ==", "bodyText": "Is it possible to add javadoc to explain what this method does?", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428139931", "createdAt": "2020-05-20T16:17:50Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MjIxOA==", "bodyText": "This method is synchronous and could take a lot of time as explained in its Javadoc. This could be problematic when using it through REST.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428142218", "createdAt": "2020-05-20T16:21:16Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void run(String migrationId) {\n+        if(getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NjI4MQ==", "bodyText": "MigrationStepDescriptor step = descriptor.getSteps().values().stream().filter(v -> status.getState().equals(v.getFromState())).collect(Collectors.reducing((a, b) -> null)).orElseThrow(() -> new IllegalStateException(String.format(\"Migration %s needs to have exactly one step to run\", migrationId)));", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428146281", "createdAt": "2020-05-20T16:27:49Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void run(String migrationId) {\n+        if(getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);\n+        }\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n+        Set<MigrationStepDescriptor> availableSteps = getAvailableSteps(descriptor);\n+        if(availableSteps.size() != 1) {\n+            throw new IllegalStateException(String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n+        } else {\n+            runStep(migrationId, availableSteps.iterator().next().getId());\n+        }\n+    }\n+\n+    protected Set<MigrationStepDescriptor> getAvailableSteps(MigrationDescriptor descriptor) {\n+        MigrationStatus status = getStatus(descriptor.getId());\n+        return descriptor.getSteps()\n+                         .entrySet()\n+                         .stream()\n+                         .filter(e -> e.getValue().getFromState().equals(status.getState()))\n+                         .map(Entry::getValue)\n+                         .collect(Collectors.toSet());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0ODA4MA==", "bodyText": "See my comment on the interface.\nFor the cluster aspect, if you don't reach the node doing the migration, you won't await I think.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428148080", "createdAt": "2020-05-20T16:30:37Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void run(String migrationId) {\n+        if(getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);\n+        }\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n+        Set<MigrationStepDescriptor> availableSteps = getAvailableSteps(descriptor);\n+        if(availableSteps.size() != 1) {\n+            throw new IllegalStateException(String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n+        } else {\n+            runStep(migrationId, availableSteps.iterator().next().getId());\n+        }\n+    }\n+\n+    protected Set<MigrationStepDescriptor> getAvailableSteps(MigrationDescriptor descriptor) {\n+        MigrationStatus status = getStatus(descriptor.getId());\n+        return descriptor.getSteps()\n+                         .entrySet()\n+                         .stream()\n+                         .filter(e -> e.getValue().getFromState().equals(status.getState()))\n+                         .map(Entry::getValue)\n+                         .collect(Collectors.toSet());\n+    }\n+\n+    @Override\n+    public boolean await(Duration duration) throws InterruptedException {\n+        long deadline = System.nanoTime() + duration.toNanos();\n+        for (;;) {\n+            if (executor.getActiveCount() == 0) {\n+                return true;\n+            }\n+            Thread.sleep(100);\n+            if (deadline < System.nanoTime()) {\n+                return false;\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDU5NzQ5", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-415459749", "createdAt": "2020-05-20T15:31:47Z", "commit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTozMTo0N1rOGYRmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo0NDoyN1rOGYZRDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNzQ0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Features({ TransactionalFeature.class })\n          \n          \n            \n            @Features(TransactionalFeature.class)", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428107440", "createdAt": "2020-05-20T15:31:47Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/MigrationFeature.java", "diffHunk": "@@ -45,6 +48,7 @@\n  */\n @Deploy(\"org.nuxeo.runtime.kv\")\n @Deploy(\"org.nuxeo.runtime.migration\")\n+@Features({ TransactionalFeature.class })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwODQ3NQ==", "bodyText": "Maybe just:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <component name=\"org.nuxeo.ecm.core.test.migration.service.migrator\" version=\"1.0\">\n          \n          \n            \n            <component name=\"org.nuxeo.ecm.core.test.migration.dummy\" version=\"1.0\">", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428108475", "createdAt": "2020-05-20T15:33:14Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-test/src/main/resources/OSGI-INF/dummy-migration.xml", "diffHunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.core.test.migration.service.migrator\" version=\"1.0\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExMDM2Nw==", "bodyText": "Take care of the assertEquals Javadoc... it's always expected, actual.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428110367", "createdAt": "2020-05-20T15:35:42Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.migration.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.MigrationFeature;\n+import org.nuxeo.runtime.migration.Migration;\n+import org.nuxeo.runtime.migration.MigrationService;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, MigrationFeature.class, TransactionalFeature.class })\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(2, migrations.size());\n+    }\n+\n+    @Test\n+    public void testGetMigration() {\n+        Migration migration = migrationService.getMigration(\"trash-storage\");\n+        assertEquals(migration.getId(), \"trash-storage\");\n+        assertEquals(migration.getDescription(), \"Migration of in the trash storage model\");\n+        assertEquals(migration.getLabel(), \"migration.trash-storage\");\n+        assertEquals(migration.getStatus().getState(), \"property\");\n+        assertEquals(migration.getSteps().get(\"lifecycle-to-property\").getDescription(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNDEyOQ==", "bodyText": "Not used, so it should probably go with the writers?", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428114129", "createdAt": "2020-05-20T15:40:45Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class MigrationConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNDY3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void run(String migrationId) throws IllegalArgumentException;\n          \n          \n            \n                void run(String id) throws IllegalArgumentException;\n          \n      \n    \n    \n  \n\nConsistency with other methods...", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428114671", "createdAt": "2020-05-20T15:41:30Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();\n+\n+    /**\n+     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n+     * @since 11.1\n+     */\n+    void run(String migrationId) throws IllegalArgumentException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNDkwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@code true} if the migration executor has no more threads running {@code false} otherwise\n          \n          \n            \n                 * @return {@code true} if the migration executor has no more threads running, {@code false} otherwise", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428114905", "createdAt": "2020-05-20T15:41:48Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();\n+\n+    /**\n+     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n+     * @since 11.1\n+     */\n+    void run(String migrationId) throws IllegalArgumentException;\n+\n+    /**\n+     * Waits for completion of all migration steps.\n+     *\n+     * @return {@code true} if the migration executor has no more threads running {@code false} otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxODUzMA==", "bodyText": "Because you added MigrationFeature to nuxeo-core-test probably :p", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428218530", "createdAt": "2020-05-20T18:25:02Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.migration.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.MigrationFeature;\n+import org.nuxeo.runtime.migration.Migration;\n+import org.nuxeo.runtime.migration.MigrationService;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, MigrationFeature.class, TransactionalFeature.class })\n+public class TestMigrationService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNDEzOQ=="}, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxOTUyMw==", "bodyText": "Agree, the dummy one is here for that.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428219523", "createdAt": "2020-05-20T18:26:40Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/migration/test/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.ecm.core.migration.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.MigrationFeature;\n+import org.nuxeo.runtime.migration.Migration;\n+import org.nuxeo.runtime.migration.MigrationService;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, MigrationFeature.class, TransactionalFeature.class })\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected TransactionalFeature txFeature;\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(2, migrations.size());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNzIzMw=="}, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMDYwMg==", "bodyText": "\ud83d\udc4d should be descriptionLabel as what we do on other writers.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428220602", "createdAt": "2020-05-20T18:28:34Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationConstants.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class MigrationConstants {\n+\n+    public static final String MIGRATION_ENTITY_TYPE = \"migration\";\n+\n+    public static final String MIGRATION_ID = \"id\";\n+\n+    public static final String MIGRATION_DESCRIPTION = \"description\";\n+\n+    public static final String MIGRATION_DESCRIPTION_LABEL = \"description.label\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyOTU5MA=="}, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMTY5Ng==", "bodyText": "Missing javadoc, and worth moving them before MigrationStatus getStatus(String id);", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428221696", "createdAt": "2020-05-20T18:30:26Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMzI5Nw==", "bodyText": "If we don't want to expose it publicly, I would put that method only on the implementation class stating it's for test purposes, and use it in the test.\nDoes that sound good @kevinleturc ?", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428223297", "createdAt": "2020-05-20T18:32:17Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -234,4 +237,28 @@ public long getProgressTotal() {\n      */\n     void runStep(String id, String step);\n \n+    /**\n+     * @since 11.1\n+     */\n+    Migration getMigration(String id);\n+\n+    /**\n+     * @since 11.1\n+     */\n+    List<Migration> getMigrations();\n+\n+    /**\n+     * @throws IllegalStateException if the migration doesn't have exactly one available step to run.\n+     * @since 11.1\n+     */\n+    void run(String migrationId) throws IllegalArgumentException;\n+\n+    /**\n+     * Waits for completion of all migration steps.\n+     *\n+     * @return {@code true} if the migration executor has no more threads running {@code false} otherwise\n+     * @since 11.1\n+     */\n+    boolean await(Duration duration) throws InterruptedException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEzNjk4OA=="}, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNDg0OQ==", "bodyText": "We agreed to have the #run method probing the migration to have only one call to do from the outside. However, like in the #probeAndSetState method Javadoc, it should be stated clearly in the #run method Javadoc.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428224849", "createdAt": "2020-05-20T18:33:56Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void run(String migrationId) {\n+        if(getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MjIxOA=="}, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzMjk3Mg==", "bodyText": "The steps should be filtered to only return the available steps for the given migration, like what is done on the JSF UI (see https://github.com/nuxeo/nuxeo-jsf-ui/blob/master/code/nuxeo-admin-center-jsf/src/main/java/org/nuxeo/ecm/admin/MigrationAdminBean.java#L49 for instance).", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r428232972", "createdAt": "2020-05-20T18:44:27Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +533,55 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                descriptor.getSteps());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0c77d054898ec7a59bc35b08a50abf06822c8b5", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c0c77d054898ec7a59bc35b08a50abf06822c8b5", "committedDate": "2020-05-15T15:32:34Z", "message": "NXP-29098: add a MigrationService Waiter"}, "afterCommit": {"oid": "35f9785a182e5e6f3269a591216fb96696501171", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/35f9785a182e5e6f3269a591216fb96696501171", "committedDate": "2020-05-26T16:25:45Z", "message": "NXP-29098: add a MigrationService Waiter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "187e0c222ce8e3ffcb1aed432cdcefccf0e70cf0", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/187e0c222ce8e3ffcb1aed432cdcefccf0e70cf0", "committedDate": "2020-05-26T16:27:56Z", "message": "TEMP"}, "afterCommit": {"oid": "ca533de464f2fde1737c0c582f1bce82fffdb311", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ca533de464f2fde1737c0c582f1bce82fffdb311", "committedDate": "2020-05-26T16:29:53Z", "message": "NXP-29098: add a MigrationService Waiter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca533de464f2fde1737c0c582f1bce82fffdb311", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ca533de464f2fde1737c0c582f1bce82fffdb311", "committedDate": "2020-05-26T16:29:53Z", "message": "NXP-29098: add a MigrationService Waiter"}, "afterCommit": {"oid": "8e845916f5dc755b6672458b1df4544e4479caca", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8e845916f5dc755b6672458b1df4544e4479caca", "committedDate": "2020-05-26T16:32:53Z", "message": "NXP-29098: add a MigrationService Waiter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e845916f5dc755b6672458b1df4544e4479caca", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8e845916f5dc755b6672458b1df4544e4479caca", "committedDate": "2020-05-26T16:32:53Z", "message": "NXP-29098: add a MigrationService Waiter"}, "afterCommit": {"oid": "bb1fd4cd000b6ed9c164ea31fd71658a6a675b3c", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bb1fd4cd000b6ed9c164ea31fd71658a6a675b3c", "committedDate": "2020-05-26T16:36:15Z", "message": "NXP-29098: add a MigrationService Waiter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb1fd4cd000b6ed9c164ea31fd71658a6a675b3c", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/bb1fd4cd000b6ed9c164ea31fd71658a6a675b3c", "committedDate": "2020-05-26T16:36:15Z", "message": "NXP-29098: add a MigrationService Waiter"}, "afterCommit": {"oid": "39728551e82c683a0ca1e7e613867b644cdfa13a", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/39728551e82c683a0ca1e7e613867b644cdfa13a", "committedDate": "2020-05-27T12:19:36Z", "message": "NXP-29098: add a MigrationService Waiter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "39728551e82c683a0ca1e7e613867b644cdfa13a", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/39728551e82c683a0ca1e7e613867b644cdfa13a", "committedDate": "2020-05-27T12:19:36Z", "message": "NXP-29098: add a MigrationService Waiter"}, "afterCommit": {"oid": "57f12a472e97f35c4306bbeb8c6a1370ec297e46", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/57f12a472e97f35c4306bbeb8c6a1370ec297e46", "committedDate": "2020-05-27T14:04:57Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57f12a472e97f35c4306bbeb8c6a1370ec297e46", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/57f12a472e97f35c4306bbeb8c6a1370ec297e46", "committedDate": "2020-05-27T14:04:57Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "5f8d86b85ec9ddf82359b32c41b7584734327cf9", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5f8d86b85ec9ddf82359b32c41b7584734327cf9", "committedDate": "2020-05-27T14:07:24Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f8d86b85ec9ddf82359b32c41b7584734327cf9", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5f8d86b85ec9ddf82359b32c41b7584734327cf9", "committedDate": "2020-05-27T14:07:24Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "2853685cbb4c9138dc1d87d496c339987500609c", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2853685cbb4c9138dc1d87d496c339987500609c", "committedDate": "2020-05-27T14:22:45Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2853685cbb4c9138dc1d87d496c339987500609c", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2853685cbb4c9138dc1d87d496c339987500609c", "committedDate": "2020-05-27T14:22:45Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "0df4406a3b5f52cf5429d5cc2939efcb2f26fc27", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0df4406a3b5f52cf5429d5cc2939efcb2f26fc27", "committedDate": "2020-05-27T15:19:52Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0df4406a3b5f52cf5429d5cc2939efcb2f26fc27", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0df4406a3b5f52cf5429d5cc2939efcb2f26fc27", "committedDate": "2020-05-27T15:19:52Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "886898ea4bf4b26c5affc6dc6063337752b6c9e9", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/886898ea4bf4b26c5affc6dc6063337752b6c9e9", "committedDate": "2020-05-27T15:21:40Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "886898ea4bf4b26c5affc6dc6063337752b6c9e9", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/886898ea4bf4b26c5affc6dc6063337752b6c9e9", "committedDate": "2020-05-27T15:21:40Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "58ece6666ded9f22ab707cf97aacea3b0122d260", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/58ece6666ded9f22ab707cf97aacea3b0122d260", "committedDate": "2020-05-27T15:22:52Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58ece6666ded9f22ab707cf97aacea3b0122d260", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/58ece6666ded9f22ab707cf97aacea3b0122d260", "committedDate": "2020-05-27T15:22:52Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "9228df21dc5abc9a629bb08ea1dd6fd2d33ce4f3", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9228df21dc5abc9a629bb08ea1dd6fd2d33ce4f3", "committedDate": "2020-05-27T15:51:29Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9228df21dc5abc9a629bb08ea1dd6fd2d33ce4f3", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9228df21dc5abc9a629bb08ea1dd6fd2d33ce4f3", "committedDate": "2020-05-27T15:51:29Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5b623bc015c6af769f77012f1aa02787ac379278", "committedDate": "2020-05-29T10:11:40Z", "message": "NXP-29098: new migration object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTI0MzA4", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-420124308", "createdAt": "2020-05-28T13:47:44Z", "commit": {"oid": "9228df21dc5abc9a629bb08ea1dd6fd2d33ce4f3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo0Nzo0NFrOGb157g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyNToxNlrOGghGEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0NzkxOA==", "bodyText": "<p>", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r431847918", "createdAt": "2020-05-28T13:47:44Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationService.java", "diffHunk": "@@ -224,6 +243,15 @@ public long getProgressTotal() {\n      */\n     String probeAndSetState(String id);\n \n+    /**\n+     * Probes the migration state if necessary and runs a migration.\n+     * THIS METHOD MAY TAKE A WHILE as it may call {@link #probeAndSetState(String)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9228df21dc5abc9a629bb08ea1dd6fd2d33ce4f3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNDUxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var descriptors = getDescriptors(XP_CONFIG);\n          \n          \n            \n                    return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n          \n          \n            \n                    return getDescriptors(XP_CONFIG).stream().map(Descriptor::getId).map(this::getMigration).collect(toList());", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436704514", "createdAt": "2020-06-08T13:33:57Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +532,47 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                getAvailableSteps(descriptor));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNzU4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @implnote Runs a migration if it has exactly one available step to run.\n          \n          \n            \n                 * @implNote Runs a migration if it has exactly one available step to run.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436707582", "createdAt": "2020-06-08T13:38:44Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +532,47 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                getAvailableSteps(descriptor));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * @implnote Runs a migration if it has exactly one available step to run.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcxMjg3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void probeAndRun(String migrationId) {\n          \n          \n            \n                public void probeAndRun(String id) {", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436712874", "createdAt": "2020-06-08T13:44:53Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +532,47 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                getAvailableSteps(descriptor));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * @implnote Runs a migration if it has exactly one available step to run.\n+     */\n+    @Override\n+    public void probeAndRun(String migrationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyMDEwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n          \n          \n            \n                                String.format(\"Migration: %s must have only one runnable step from state: %s\", migrationId, state));\n          \n      \n    \n    \n  \n\nNeed to get the state before.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436720105", "createdAt": "2020-06-08T13:51:45Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +532,47 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                getAvailableSteps(descriptor));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * @implnote Runs a migration if it has exactly one available step to run.\n+     */\n+    @Override\n+    public void probeAndRun(String migrationId) {\n+        if (getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);\n+        }\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n+        var availableSteps = getAvailableSteps(descriptor);\n+        if (availableSteps.size() != 1) {\n+            throw new IllegalStateException(\n+                    String.format(\"Migration %s needs to have exactly one step to run\", migrationId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcyMTc3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                        runStep(migrationId, availableSteps.values().iterator().next().getId());\n          \n          \n            \n                    }\n          \n          \n            \n                    }\n          \n          \n            \n                    runStep(migrationId, availableSteps.values().iterator().next().getId());", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436721771", "createdAt": "2020-06-08T13:53:21Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +532,47 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return new Migration(id, descriptor.getDescription(), descriptor.getDescriptionLabel(), getStatus(id),\n+                getAvailableSteps(descriptor));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        var descriptors = getDescriptors(XP_CONFIG);\n+        return descriptors.stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * @implnote Runs a migration if it has exactly one available step to run.\n+     */\n+    @Override\n+    public void probeAndRun(String migrationId) {\n+        if (getStatus(migrationId) == null) {\n+            probeAndSetState(migrationId);\n+        }\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, migrationId);\n+        var availableSteps = getAvailableSteps(descriptor);\n+        if (availableSteps.size() != 1) {\n+            throw new IllegalStateException(\n+                    String.format(\"Migration %s needs to have exactly one step to run\", migrationId));\n+        } else {\n+            runStep(migrationId, availableSteps.values().iterator().next().getId());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MTk2NA==", "bodyText": "Should be a simple List.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436741964", "createdAt": "2020-06-08T14:13:49Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/Migration.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+import java.util.Map;\n+\n+import org.nuxeo.runtime.migration.MigrationDescriptor.MigrationStepDescriptor;\n+import org.nuxeo.runtime.migration.MigrationService.MigrationStatus;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class Migration {\n+\n+    protected String id;\n+\n+    protected String description;\n+\n+    protected String label;\n+\n+    protected MigrationStatus status;\n+\n+    protected Map<String, MigrationStepDescriptor> steps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzMwOQ==", "bodyText": "Missing @Override.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436743309", "createdAt": "2020-06-08T14:15:43Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+import org.nuxeo.runtime.migration.MigrationService.MigrationContext;\n+import org.nuxeo.runtime.migration.MigrationService.Migrator;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class DummyMigrator implements Migrator {\n+\n+    protected String state;\n+\n+    public void run(String step, MigrationContext migrationContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzcxMw==", "bodyText": "Why is it needed?", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436743713", "createdAt": "2020-06-08T14:16:16Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/DummyMigrator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+import org.nuxeo.runtime.migration.MigrationService.MigrationContext;\n+import org.nuxeo.runtime.migration.MigrationService.Migrator;\n+import org.nuxeo.runtime.transaction.TransactionHelper;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class DummyMigrator implements Migrator {\n+\n+    protected String state;\n+\n+    public void run(String step, MigrationContext migrationContext) {\n+        TransactionHelper.commitOrRollbackTransaction();\n+        TransactionHelper.startTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NDYxMw==", "bodyText": "You could just deploy org.nuxeo.runtime.migration.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436744613", "createdAt": "2020-06-08T14:17:36Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTI1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void checkMigration(Migration migration) {\n          \n          \n            \n                protected void assertDummyMigration(Migration actual) {", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436745253", "createdAt": "2020-06-08T14:18:34Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testRunMigration() {\n+        String dummy = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummy).getStatus().getState());\n+        migrationService.probeAndRun(dummy);\n+        await().atMost(1, SECONDS)\n+               .until(() -> migrationService.getMigration(dummy).getStatus().getState().equals(\"after\"));\n+        try {\n+            migrationService.probeAndRun(dummy);\n+            fail(\"should fail\");\n+        } catch (java.lang.IllegalStateException e) {\n+            assertEquals(\"Migration dummy-migration needs to have exactly one step to run\", e.getMessage());\n+        }\n+    }\n+\n+    protected void checkMigration(Migration migration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTY3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(null, migrationService.getMigration(\"fake\"));\n          \n          \n            \n                    assertNull(migrationService.getMigration(\"fake\"));", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436745671", "createdAt": "2020-06-08T14:19:11Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NjI2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testRunMigration() {\n          \n          \n            \n                public void testProbeAndRunMigration() {", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436746265", "createdAt": "2020-06-08T14:20:05Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testRunMigration() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NzIwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                           .until(() -> migrationService.getMigration(dummy).getStatus().getState().equals(\"after\"));\n          \n          \n            \n                           .until(() -> \"after\".equals(migrationService.getMigration(dummy).getStatus().getState()));", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436747206", "createdAt": "2020-06-08T14:21:32Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testRunMigration() {\n+        String dummy = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummy).getStatus().getState());\n+        migrationService.probeAndRun(dummy);\n+        await().atMost(1, SECONDS)\n+               .until(() -> migrationService.getMigration(dummy).getStatus().getState().equals(\"after\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0ODI0OA==", "bodyText": "New line to separate both tests (improve the readability :)).", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436748248", "createdAt": "2020-06-08T14:23:01Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testRunMigration() {\n+        String dummy = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummy).getStatus().getState());\n+        migrationService.probeAndRun(dummy);\n+        await().atMost(1, SECONDS)\n+               .until(() -> migrationService.getMigration(dummy).getStatus().getState().equals(\"after\"));\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0ODU0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (java.lang.IllegalStateException e) {\n          \n          \n            \n                    } catch (IllegalStateException e) {", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436748548", "createdAt": "2020-06-08T14:23:24Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration:OSGI-INF/migration-service.xml\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        checkMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(1, migrations.size());\n+        checkMigration(migrations.get(0));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertEquals(null, migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testRunMigration() {\n+        String dummy = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummy).getStatus().getState());\n+        migrationService.probeAndRun(dummy);\n+        await().atMost(1, SECONDS)\n+               .until(() -> migrationService.getMigration(dummy).getStatus().getState().equals(\"after\"));\n+        try {\n+            migrationService.probeAndRun(dummy);\n+            fail(\"should fail\");\n+        } catch (java.lang.IllegalStateException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0OTg0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <component name=\"org.nuxeo.runtime.test.migration.dummy\" version=\"1.0\">\n          \n          \n            \n            <component name=\"org.nuxeo.runtime.migration.test.dummy\" version=\"1.0\">\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r436749842", "createdAt": "2020-06-08T14:25:16Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/resources/OSGI-INF/dummy-migration.xml", "diffHunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.runtime.test.migration.dummy\" version=\"1.0\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278"}, "originalPosition": 2}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b623bc015c6af769f77012f1aa02787ac379278", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5b623bc015c6af769f77012f1aa02787ac379278", "committedDate": "2020-05-29T10:11:40Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "committedDate": "2020-06-10T10:26:59Z", "message": "NXP-29098: new migration object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTIxNTYz", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-427921563", "createdAt": "2020-06-10T10:28:15Z", "commit": {"oid": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDoyODoxNVrOGhuxJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDoyODoxNVrOGhuxJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyMjQzNg==", "bodyText": "didn't feel worth a separate commit. Unless ?...", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r438022436", "createdAt": "2020-06-10T10:28:15Z", "author": {"login": "NourNuxeo"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -470,8 +471,7 @@ public void runStep(String id, String step) {\n                 log.error(\"Exception during execution of step: {} for migration: {}\", step, id, t);\n             }\n             // after the migrator is finished, change state, except if shutdown is requested or exception\n-            String state = t != null || migrationContext.isShutdownRequested()\n-                    ? stepDescr.fromState\n+            String state = t != null || migrationContext.isShutdownRequested() ? stepDescr.fromState", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0f23e35c626aef5338ae6a8fcb21a3196a68e5ac", "committedDate": "2020-06-10T10:26:59Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "38b158875f753ff8890f6c3fc89a5f3520897c1f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/38b158875f753ff8890f6c3fc89a5f3520897c1f", "committedDate": "2020-06-10T10:30:16Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38b158875f753ff8890f6c3fc89a5f3520897c1f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/38b158875f753ff8890f6c3fc89a5f3520897c1f", "committedDate": "2020-06-10T10:30:16Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "215aca93ab9716492aae69ae31b4bba7212150da", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/215aca93ab9716492aae69ae31b4bba7212150da", "committedDate": "2020-06-10T13:34:14Z", "message": "NXP-29098: new migration object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NTMwNTky", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-429530592", "createdAt": "2020-06-12T07:46:41Z", "commit": {"oid": "215aca93ab9716492aae69ae31b4bba7212150da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzo0Njo0MVrOGi6Z5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzo0Njo0MVrOGi6Z5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI2MTY3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"Migration %s must have only one runnable step from state: %s\", id, status.getState())); // NOSONAR\n          \n          \n            \n                                \"Migration: %s must have only one runnable step from state: %s\", id, status.getState())); // NOSONAR", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r439261671", "createdAt": "2020-06-12T07:46:41Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +529,35 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        if (descriptor == null) {\n+            return null;\n+        }\n+        return Migration.from(descriptor, getStatus(id));\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        return getDescriptors(XP_CONFIG).stream().map(d -> getMigration(d.getId())).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * @implNote Runs a migration if it has exactly one available step to run.\n+     */\n+    @Override\n+    public void probeAndRun(String id) {\n+        MigrationStatus status = getStatus(id);\n+        if (status == null) {\n+            probeAndSetState(id);\n+        }\n+        var steps = Migration.from(getDescriptor(XP_CONFIG, id), status).getSteps();\n+        if (steps.size() != 1) {\n+            throw new IllegalStateException(String.format(\n+                    \"Migration %s must have only one runnable step from state: %s\", id, status.getState())); // NOSONAR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215aca93ab9716492aae69ae31b4bba7212150da"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "215aca93ab9716492aae69ae31b4bba7212150da", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/215aca93ab9716492aae69ae31b4bba7212150da", "committedDate": "2020-06-10T13:34:14Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "9e0c4b067f17e887e85bfce60016478a91626561", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9e0c4b067f17e887e85bfce60016478a91626561", "committedDate": "2020-06-12T09:28:54Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e0c4b067f17e887e85bfce60016478a91626561", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9e0c4b067f17e887e85bfce60016478a91626561", "committedDate": "2020-06-12T09:28:54Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "9b489b78c334471de458ec0491233cfb54d406a6", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9b489b78c334471de458ec0491233cfb54d406a6", "committedDate": "2020-06-12T11:25:43Z", "message": "NXP-29098: new migration object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTY4NDQz", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-430568443", "createdAt": "2020-06-15T11:50:18Z", "commit": {"oid": "9b489b78c334471de458ec0491233cfb54d406a6"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNzI4NTY5", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-430728569", "createdAt": "2020-06-15T14:59:51Z", "commit": {"oid": "9b489b78c334471de458ec0491233cfb54d406a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDo1OTo1MlrOGj2GTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDo1OTo1MlrOGj2GTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIzOTY5Mw==", "bodyText": "Maybe worth doing the same thing as for Migration, a static from and only simple params in the constructor.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r440239693", "createdAt": "2020-06-15T14:59:52Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationStep.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+package org.nuxeo.runtime.migration;\n+\n+import org.nuxeo.runtime.migration.MigrationDescriptor.MigrationStepDescriptor;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class MigrationStep {\n+\n+    protected final String id;\n+\n+    protected final String description;\n+\n+    protected final String descriptionLabel;\n+\n+    protected final String fromState;\n+\n+    protected final String toState;\n+\n+    public final String getId() {\n+        return id;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public String getDescriptionLabel() {\n+        return descriptionLabel;\n+    }\n+\n+    public String getFromState() {\n+        return fromState;\n+    }\n+\n+    public String getToState() {\n+        return toState;\n+    }\n+\n+    public MigrationStep(MigrationStepDescriptor descriptor) {\n+        this.id = descriptor.getId();\n+        this.description = descriptor.getDescription();\n+        this.descriptionLabel = descriptor.getDescriptionLabel();\n+        this.fromState = descriptor.getFromState();\n+        this.toState = descriptor.getToState();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b489b78c334471de458ec0491233cfb54d406a6"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b489b78c334471de458ec0491233cfb54d406a6", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9b489b78c334471de458ec0491233cfb54d406a6", "committedDate": "2020-06-12T11:25:43Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "42f1feab153f3df43ff1230a183eb71ee3274861", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/42f1feab153f3df43ff1230a183eb71ee3274861", "committedDate": "2020-06-15T15:34:55Z", "message": "NXP-29098: new migration object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjIxNDYw", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-432621460", "createdAt": "2020-06-17T17:30:15Z", "commit": {"oid": "42f1feab153f3df43ff1230a183eb71ee3274861"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42f1feab153f3df43ff1230a183eb71ee3274861", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/42f1feab153f3df43ff1230a183eb71ee3274861", "committedDate": "2020-06-15T15:34:55Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "abca2eb4122b13acdd8dbf9f78808038ca096817", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/abca2eb4122b13acdd8dbf9f78808038ca096817", "committedDate": "2020-06-18T14:48:16Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abca2eb4122b13acdd8dbf9f78808038ca096817", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/abca2eb4122b13acdd8dbf9f78808038ca096817", "committedDate": "2020-06-18T14:48:16Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "f982e60aa2bfd222f5d6eb35ffaae48d1a68d676", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f982e60aa2bfd222f5d6eb35ffaae48d1a68d676", "committedDate": "2020-06-24T09:02:01Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f982e60aa2bfd222f5d6eb35ffaae48d1a68d676", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f982e60aa2bfd222f5d6eb35ffaae48d1a68d676", "committedDate": "2020-06-24T09:02:01Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "4c4a622a05aa636f79f48290e96454dbbe72e0cf", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4c4a622a05aa636f79f48290e96454dbbe72e0cf", "committedDate": "2020-06-24T09:06:34Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c4a622a05aa636f79f48290e96454dbbe72e0cf", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4c4a622a05aa636f79f48290e96454dbbe72e0cf", "committedDate": "2020-06-24T09:06:34Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "5562cc19a487a93dd2aa752018874632dd919474", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5562cc19a487a93dd2aa752018874632dd919474", "committedDate": "2020-06-29T14:39:35Z", "message": "NXP-29098: new migration object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12676c10cdb749dfd4646ef00e7a928cdba2ee6c", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/12676c10cdb749dfd4646ef00e7a928cdba2ee6c", "committedDate": "2020-06-29T14:47:44Z", "message": "NXP-29098: add bad request exception mapping to webengine"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5562cc19a487a93dd2aa752018874632dd919474", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5562cc19a487a93dd2aa752018874632dd919474", "committedDate": "2020-06-29T14:39:35Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "812554aa77cfec284417bebcbd12bba5df0f44a7", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/812554aa77cfec284417bebcbd12bba5df0f44a7", "committedDate": "2020-06-29T14:47:52Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "812554aa77cfec284417bebcbd12bba5df0f44a7", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/812554aa77cfec284417bebcbd12bba5df0f44a7", "committedDate": "2020-06-29T14:47:52Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "f0fc21c8d2fdcf52d3f5d17f5ca77f3558d8907f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f0fc21c8d2fdcf52d3f5d17f5ca77f3558d8907f", "committedDate": "2020-06-29T15:08:43Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0fc21c8d2fdcf52d3f5d17f5ca77f3558d8907f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f0fc21c8d2fdcf52d3f5d17f5ca77f3558d8907f", "committedDate": "2020-06-29T15:08:43Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "beafe03c777f339c08fc69994173e4e532cbca18", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/beafe03c777f339c08fc69994173e4e532cbca18", "committedDate": "2020-06-29T15:15:22Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "beafe03c777f339c08fc69994173e4e532cbca18", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/beafe03c777f339c08fc69994173e4e532cbca18", "committedDate": "2020-06-29T15:15:22Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "6023eb1654d495087106ca85a38e1413b8d38e17", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6023eb1654d495087106ca85a38e1413b8d38e17", "committedDate": "2020-06-29T15:49:18Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6023eb1654d495087106ca85a38e1413b8d38e17", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6023eb1654d495087106ca85a38e1413b8d38e17", "committedDate": "2020-06-29T15:49:18Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "d7298c2f9e2ad2df310db4b3c302e4986f2701e7", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d7298c2f9e2ad2df310db4b3c302e4986f2701e7", "committedDate": "2020-06-29T15:56:26Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7298c2f9e2ad2df310db4b3c302e4986f2701e7", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d7298c2f9e2ad2df310db4b3c302e4986f2701e7", "committedDate": "2020-06-29T15:56:26Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb", "committedDate": "2020-06-29T16:43:47Z", "message": "NXP-29098: new migration object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MzU4MTcw", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-439358170", "createdAt": "2020-06-29T17:32:24Z", "commit": {"oid": "062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDc5NDQ2", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-440079446", "createdAt": "2020-06-30T14:34:06Z", "commit": {"oid": "062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNDowNlrOGq_ZQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNjo0OFrOGq_hWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMjAzNQ==", "bodyText": "Shouldn't you get status in case you probe the state?", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447732035", "createdAt": "2020-06-30T14:34:06Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/main/java/org/nuxeo/runtime/migration/MigrationServiceImpl.java", "diffHunk": "@@ -529,4 +530,36 @@ protected void atomic(String id, Consumer<KeyValueStore> consumer) {\n         throw new RuntimeException(\"Cannot lock for write migration: \" + id + \", already locked: \" + currentLock);\n     }\n \n+    @Override\n+    public Migration getMigration(String id) {\n+        MigrationDescriptor descriptor = getDescriptor(XP_CONFIG, id);\n+        MigrationStatus status = getStatus(id);\n+        if (descriptor == null || status == null) {\n+            return null;\n+        }\n+        return Migration.from(descriptor, status);\n+    }\n+\n+    @Override\n+    public List<Migration> getMigrations() {\n+        return getDescriptors(XP_CONFIG).stream().map(Descriptor::getId).map(this::getMigration).collect(toList());\n+    }\n+\n+    /**\n+     * @implNote Runs a migration if it has exactly one available step to run.\n+     */\n+    @Override\n+    public void probeAndRun(String id) {\n+        MigrationStatus status = getStatus(id);\n+        if (status == null) {\n+            probeAndSetState(id);\n+        }\n+        var steps = Migration.from(getDescriptor(XP_CONFIG, id), status).getSteps();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMjUxNA==", "bodyText": "Format", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447732514", "createdAt": "2020-06-30T14:34:45Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        assertDummyMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(2, migrations.size());\n+        assertDummyMigration(migrations.get(0));\n+        assertDummyMultiMigration(migrations.get(1));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertNull(migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testProbeAndRunMigration() {\n+        // Migration with 2 sequential steps: before to after, after to reallyAfter\n+        String dummyMigration = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummyMigration).getStatus().getState());\n+        migrationService.probeAndRun(dummyMigration);\n+        await().atMost(1, SECONDS)\n+               .until(() -> \"after\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n+        migrationService.probeAndRun(dummyMigration);\n+        await().atMost(1, SECONDS)\n+        .until(() -> \"reallyAfter\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNDEwNg==", "bodyText": "Please a meaningful comment or leave it empty.", "url": "https://github.com/nuxeo/nuxeo/pull/4027#discussion_r447734106", "createdAt": "2020-06-30T14:36:48Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-migration/src/test/java/org/nuxeo/runtime/migration/TestMigrationService.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nour AL KOTOB\n+ */\n+\n+package org.nuxeo.runtime.migration;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.runtime.cluster\")\n+@Deploy(\"org.nuxeo.runtime.migration\")\n+@Deploy(\"org.nuxeo.runtime.migration.tests:OSGI-INF/dummy-migration.xml\")\n+public class TestMigrationService {\n+\n+    @Inject\n+    protected MigrationService migrationService;\n+\n+    @Test\n+    public void testGetMigration() {\n+        assertDummyMigration(migrationService.getMigration(\"dummy-migration\"));\n+    }\n+\n+    @Test\n+    public void testGetMigrations() {\n+        var migrations = migrationService.getMigrations();\n+        assertEquals(2, migrations.size());\n+        assertDummyMigration(migrations.get(0));\n+        assertDummyMultiMigration(migrations.get(1));\n+    }\n+\n+    @Test\n+    public void testUnknownMigration() {\n+        assertNull(migrationService.getMigration(\"fake\"));\n+    }\n+\n+    @Test\n+    public void testProbeAndRunMigration() {\n+        // Migration with 2 sequential steps: before to after, after to reallyAfter\n+        String dummyMigration = \"dummy-migration\";\n+        assertEquals(\"before\", migrationService.getMigration(dummyMigration).getStatus().getState());\n+        migrationService.probeAndRun(dummyMigration);\n+        await().atMost(1, SECONDS)\n+               .until(() -> \"after\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n+        migrationService.probeAndRun(dummyMigration);\n+        await().atMost(1, SECONDS)\n+        .until(() -> \"reallyAfter\".equals(migrationService.getMigration(dummyMigration).getStatus().getState()));\n+        try {\n+            migrationService.probeAndRun(dummyMigration);\n+            fail(\"should fail\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb"}, "originalPosition": 82}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/062ad76d0bc2cc0adc6da73a0ee42fcfa5fd80cb", "committedDate": "2020-06-29T16:43:47Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "98c89ff4c23114d012b3d08a9faefb5c30d4bed0", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/98c89ff4c23114d012b3d08a9faefb5c30d4bed0", "committedDate": "2020-06-30T15:18:14Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98c89ff4c23114d012b3d08a9faefb5c30d4bed0", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/98c89ff4c23114d012b3d08a9faefb5c30d4bed0", "committedDate": "2020-06-30T15:18:14Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "2ca38ad22070400175e9e34b8d7f53dbffb66c8f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2ca38ad22070400175e9e34b8d7f53dbffb66c8f", "committedDate": "2020-06-30T15:47:46Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ca38ad22070400175e9e34b8d7f53dbffb66c8f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2ca38ad22070400175e9e34b8d7f53dbffb66c8f", "committedDate": "2020-06-30T15:47:46Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "1f8341555b645327669f87dab47a26f48dabbd88", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1f8341555b645327669f87dab47a26f48dabbd88", "committedDate": "2020-06-30T16:19:16Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f8341555b645327669f87dab47a26f48dabbd88", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1f8341555b645327669f87dab47a26f48dabbd88", "committedDate": "2020-06-30T16:19:16Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "3854d39e6c587f9683f5c6c5685e4c4447458648", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3854d39e6c587f9683f5c6c5685e4c4447458648", "committedDate": "2020-07-01T08:22:08Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3854d39e6c587f9683f5c6c5685e4c4447458648", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/3854d39e6c587f9683f5c6c5685e4c4447458648", "committedDate": "2020-07-01T08:22:08Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "f189ad225350879feece895c1155da8756299f24", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f189ad225350879feece895c1155da8756299f24", "committedDate": "2020-07-01T13:02:47Z", "message": "NXP-29098: new migration object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ed592a364c21de12c571c02027726df0c313140", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6ed592a364c21de12c571c02027726df0c313140", "committedDate": "2020-07-02T08:43:44Z", "message": "NXP-29098: new migration object"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f189ad225350879feece895c1155da8756299f24", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f189ad225350879feece895c1155da8756299f24", "committedDate": "2020-07-01T13:02:47Z", "message": "NXP-29098: new migration object"}, "afterCommit": {"oid": "6ed592a364c21de12c571c02027726df0c313140", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6ed592a364c21de12c571c02027726df0c313140", "committedDate": "2020-07-02T08:43:44Z", "message": "NXP-29098: new migration object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNDczMDAz", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-441473003", "createdAt": "2020-07-02T08:44:12Z", "commit": {"oid": "6ed592a364c21de12c571c02027726df0c313140"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjU3Mzcw", "url": "https://github.com/nuxeo/nuxeo/pull/4027#pullrequestreview-441657370", "createdAt": "2020-07-02T13:04:38Z", "commit": {"oid": "6ed592a364c21de12c571c02027726df0c313140"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4733, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}