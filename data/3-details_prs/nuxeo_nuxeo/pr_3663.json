{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNDE2MDQ2", "number": 3663, "title": "improvement-NXP-28254-conversation-participants-missing-notifications", "bodyText": "PR created from https://qa.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-nalkotob/104/", "createdAt": "2020-01-14T02:42:36Z", "url": "https://github.com/nuxeo/nuxeo/pull/3663", "merged": true, "mergeCommit": {"oid": "dd5ddae85b0f8a580f008a45c272ad58195abcc9"}, "closed": true, "closedAt": "2020-02-24T11:27:34Z", "author": {"login": "nuxeojenkins"}, "timelineItems": {"totalCount": 81, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6oIHMABqjI5NTE0NjM0MjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHbDBCgFqTM0ODU0Nzg3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6ec2b4a4d6bee895f752d7a583fbf0862bb843d", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e6ec2b4a4d6bee895f752d7a583fbf0862bb843d", "committedDate": "2020-01-13T17:38:03Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "98f972113b43e3bbc4c26ca5f824a56857de26fe", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/98f972113b43e3bbc4c26ca5f824a56857de26fe", "committedDate": "2020-01-15T16:04:15Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98f972113b43e3bbc4c26ca5f824a56857de26fe", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/98f972113b43e3bbc4c26ca5f824a56857de26fe", "committedDate": "2020-01-15T16:04:15Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c0ca914e28e03369b0e7c3a364a85237a3690131", "committedDate": "2020-01-16T10:26:42Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDk2Mjkz", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344496293", "createdAt": "2020-01-17T10:43:38Z", "commit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDo0MzozOFrOFe1Miw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMTozODowMFrOFe2hZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3MzE2Mw==", "bodyText": "Move that as default implementations on AbstractCommentManager:\n\nYou won't have to duplicate it on both BridgeCommentManager and CommentManagerImpl.\nFor backward compatibility, it will be easier for implementer (if any) of AbstractCommentManager.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367873163", "createdAt": "2020-01-17T10:43:38Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/BridgeCommentManager.java", "diffHunk": "@@ -259,4 +259,16 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n         });\n     }\n     \n+    @Override\n+    protected boolean isDocumentNotCommented(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3MzM1Nw==", "bodyText": "I would go for a simpler, not negative, hasComments.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367873357", "createdAt": "2020-01-17T10:44:10Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg3Mzc3Mg==", "bodyText": "Same here, hasComments, and to be consistent with the other method, keep the arguments order:  session, document, author.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367873772", "createdAt": "2020-01-17T10:45:17Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MDUwNA==", "bodyText": "Why not using a COUNT query?", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367880504", "createdAt": "2020-01-17T11:00:15Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -73,6 +74,22 @@\n \n     protected static final String COMMENT_NAME = \"comment\";\n \n+    /**\n+     * Counts how many comments where made on a specific document.\n+     *\n+     * @since 11.1\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS = //\n+            \"SELECT \" + ECM_UUID + \" FROM Comment WHERE \" + COMMENT_ANCESTOR_IDS + \"/* = '%s'\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MTQxNw==", "bodyText": "You should use a limit of 1 here, if there is one comment, the document is commented. It will avoid to query all.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367881417", "createdAt": "2020-01-17T11:02:11Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -461,4 +482,18 @@ public DocumentRef getCommentedDocumentRef(CoreSession s, DocumentModel commentD\n         });\n \n     }\n+\n+    @Override\n+    protected boolean isDocumentNotCommented(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS, document.getId());\n+        return session.queryProjection(query, 0, 0).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MTUwNQ==", "bodyText": "Same, use a limit of 1, not 0.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367881505", "createdAt": "2020-01-17T11:02:25Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -461,4 +482,18 @@ public DocumentRef getCommentedDocumentRef(CoreSession s, DocumentModel commentD\n         });\n \n     }\n+\n+    @Override\n+    protected boolean isDocumentNotCommented(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS, document.getId());\n+        return session.queryProjection(query, 0, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS_AND_AUTHOR, document.getId(), author);\n+        return session.queryProjection(query, 0, 0).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDEzNg==", "bodyText": "Why not using a COUNT query?", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367884136", "createdAt": "2020-01-17T11:08:41Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -83,6 +85,18 @@\n \n     public static final String SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE = \"This service implementation does not implement deprecated API.\";\n \n+    /**\n+     * Counts how many comments where made on a specific document.\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR = //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDIzMg==", "bodyText": "limit to 1.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367884232", "createdAt": "2020-01-17T11:08:57Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +578,19 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    @Override\n+    public boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), author);\n+        return session.queryProjection(query, 0, 0).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDI2Mw==", "bodyText": "limit to 1.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367884263", "createdAt": "2020-01-17T11:09:02Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +578,19 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    @Override\n+    public boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), author);\n+        return session.queryProjection(query, 0, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean isDocumentNotCommented(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR, document.getId());\n+        return session.queryProjection(query, 0, 0).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDM3MQ==", "bodyText": "You can move it to the extension line.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367884371", "createdAt": "2020-01-17T11:09:21Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/resources/OSGI-INF/comment-notification-contrib.xml", "diffHunk": "@@ -40,4 +40,9 @@\n     <veto name=\"CommentNotificationVeto\" class=\"org.nuxeo.ecm.platform.comment.notification.CommentNotificationVeto\" />\n   </extension>\n \n+  <extension target=\"org.nuxeo.runtime.ConfigurationService\"\n+    point=\"configuration\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDg2OQ==", "bodyText": "This constant should not be here but where it's used, as it's related to a comments feature, not a notification one.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367884869", "createdAt": "2020-01-17T11:10:44Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-notification/nuxeo-platform-notification-core/src/main/java/org/nuxeo/ecm/platform/ec/notification/service/NotificationService.java", "diffHunk": "@@ -79,6 +79,13 @@\n \n     private static final Log log = LogFactory.getLog(NotificationService.class);\n \n+    /**\n+     * The key to the config turning on or off autosubscription.\n+     *\n+     * @since 11.1\n+     */\n+    public static final String AUTOSUBSCRIBE_CONFIG_KEY = \"org.nuxeo.ecm.platform.comment.service.notification.autosubscribe\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDk3Mg==", "bodyText": "New line (you probably can configure your IDE to add new line at the end :))", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367884972", "createdAt": "2020-01-17T11:11:02Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/resources/OSGI-INF/notification-subscription-contrib.xml", "diffHunk": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\"?>\n+<component\n+        name=\"org.nuxeo.ecm.notifications.contribution.comments.autosubscribe.test\">\n+  <extension target=\"org.nuxeo.runtime.ConfigurationService\"\n+    point=\"configuration\">\n+    <property name=\"org.nuxeo.ecm.platform.comment.service.notification.autosubscribe\">true</property>\n+  </extension>\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NzgzNw==", "bodyText": "You could just oneline:\nif (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY))", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367887837", "createdAt": "2020-01-17T11:18:50Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document);\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void autosubscribeToNewCommentsNotifications(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        ConfigurationService configService = Framework.getService(ConfigurationService.class);\n+\n+        if (configService.isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4ODc5OA==", "bodyText": "Should be true by default on master, according to @aescaffre comment https://jira.nuxeo.com/browse/NXP-28254?focusedCommentId=421233&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-421233", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367888798", "createdAt": "2020-01-17T11:21:18Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/resources/OSGI-INF/comment-notification-contrib.xml", "diffHunk": "@@ -40,4 +40,9 @@\n     <veto name=\"CommentNotificationVeto\" class=\"org.nuxeo.ecm.platform.comment.notification.CommentNotificationVeto\" />\n   </extension>\n \n+  <extension target=\"org.nuxeo.runtime.ConfigurationService\"\n+    point=\"configuration\">\n+    <property name=\"org.nuxeo.ecm.platform.comment.service.notification.autosubscribe\">false</property>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5MDY2NQ==", "bodyText": "I would name it simply handleNotificationAutoSubscriptions maybe?", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367890665", "createdAt": "2020-01-17T11:26:17Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document);\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void autosubscribeToNewCommentsNotifications(CoreSession session, DocumentModel commentDocModel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5MjQzMg==", "bodyText": "There is a typo, but subscribeCommentAddedNotification sounds more relevant.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367892432", "createdAt": "2020-01-17T11:31:00Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document);\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void autosubscribeToNewCommentsNotifications(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        ConfigurationService configService = Framework.getService(ConfigurationService.class);\n+\n+        if (configService.isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (isDocumentNotCommented(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToNeCommentNotifications(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (isDocumentNotCommentedByUser(session, commentAuthor.getName(), document)) {\n+            // Comment author is writing his first comment on the document\n+            subscribeToNeCommentNotifications(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to notifications on the document.\n+     *\n+     * @param document the document being commented\n+     * @param user the user to subscribe to comment notifications\n+     * @since 11.1\n+     */\n+    protected void subscribeToNeCommentNotifications(DocumentModel document, NuxeoPrincipal user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5NDg4Ng==", "bodyText": "State here that this method is subscribing the user to \"commentAdded\" notification, it does not subscribe the user to all notifications :)", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367894886", "createdAt": "2020-01-17T11:38:00Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,76 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommented(CoreSession session, DocumentModel document);\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected abstract boolean isDocumentNotCommentedByUser(CoreSession session, String author, DocumentModel document);\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void autosubscribeToNewCommentsNotifications(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        ConfigurationService configService = Framework.getService(ConfigurationService.class);\n+\n+        if (configService.isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (isDocumentNotCommented(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToNeCommentNotifications(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (isDocumentNotCommentedByUser(session, commentAuthor.getName(), document)) {\n+            // Comment author is writing his first comment on the document\n+            subscribeToNeCommentNotifications(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to notifications on the document.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 108}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c0ca914e28e03369b0e7c3a364a85237a3690131", "committedDate": "2020-01-16T10:26:42Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0873d7ace8050a98edbebb4a9a4387fab67e1e45", "committedDate": "2020-01-17T15:14:41Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjU0OTQy", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344654942", "createdAt": "2020-01-17T15:29:24Z", "commit": {"oid": "1a1e2b3643755d4ad7341229a2b59a2689aaef84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNToyOToyNVrOFe8jzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNToyOToyNVrOFe8jzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk5MzgwNw==", "bodyText": "i think this file is not related to this jira ticket after the cleanup there is no code changes or i am missed some thing :)", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367993807", "createdAt": "2020-01-17T15:29:25Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment-workflow/src/main/resources/OSGI-INF/notification-contrib.xml", "diffHunk": "@@ -24,6 +24,3 @@\n   </extension>\n \n </component>\n-\n-\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1e2b3643755d4ad7341229a2b59a2689aaef84"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjU5MDk4", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344659098", "createdAt": "2020-01-17T15:35:27Z", "commit": {"oid": "1a1e2b3643755d4ad7341229a2b59a2689aaef84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTozNToyOFrOFe8wCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTozNToyOFrOFe8wCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk5NjkzNw==", "bodyText": "on tests added since is not required", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r367996937", "createdAt": "2020-01-17T15:35:28Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentManager.java", "diffHunk": "@@ -80,6 +80,11 @@\n \n     protected static final String AUTHOR_OF_COMMENT = \"linda\";\n \n+    /**\n+     * @since 11.1\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1e2b3643755d4ad7341229a2b59a2689aaef84"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjY1NjM3", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344665637", "createdAt": "2020-01-17T15:44:54Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0NDo1NFrOFe9DJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0NDo1NFrOFe9DJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMTgyOA==", "bodyText": "can you give us, an example on which cases we can get the PropertyNotFoundException i think we can find another way instead of rely on the exception to get the second information for example i was thinking of things like:\n protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n        String author = null;\n        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n            // means annotation / comment\n            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n        }\n\n        if (StringUtils.isEmpty(author)) {\n            String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n            // to be more robust we can check if the  the array is emtpy ...and log ...but i think we will always have an element \n            author = contributors[0];\n        }\n\n        return Framework.getService(UserManager.class).getPrincipal(author);\n    }", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368001828", "createdAt": "2020-01-17T15:44:54Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -140,9 +146,15 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n         UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        try {\n+            // this is more reliable in case of a comment\n+            Property authorProp = docModel.getProperty(COMMENT_AUTHOR);\n+            return userManager.getPrincipal((String) authorProp.getValue());\n+        } catch (PropertyNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjY4Mjkx", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344668291", "createdAt": "2020-01-17T15:48:42Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0ODo0M1rOFe9LFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0ODo0M1rOFe9LFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMzg2Mw==", "bodyText": "true if comments were found -> {@code true}if comments were found, otherwise {@code false}\nwdyt", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368003863", "createdAt": "2020-01-17T15:48:43Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjcwMjQw", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344670240", "createdAt": "2020-01-17T15:51:22Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1MToyMlrOFe9QvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo1MToyMlrOFe9QvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwNTMwOQ==", "bodyText": "i think on master version these two methods hasComments and hasComments should be abstract to be implemented by any new comment implementation / customers code ...\nOn 10.10  (when you will do you backport) you should keep throw new UnsupportedOperationException(); for backward compatibility", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368005309", "createdAt": "2020-01-17T15:51:22Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjgwNDg0", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344680484", "createdAt": "2020-01-17T16:06:02Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjowNjowMlrOFe9vDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjowNjowMlrOFe9vDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMzA2OA==", "bodyText": "can be replaced by\nSubscribes a user to {@value org.nuxeo.ecm.platform.comment.api.CommentEvents#COMMENT_ADDED} event on the document\nwe subscribe to an event", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368013068", "createdAt": "2020-01-17T16:06:02Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+                                                       DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeCommentAddedNotification(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (!hasCommentsByUser(session, document, commentAuthor.getName())) {\n+            // Comment author is writing his first comment on the document\n+            subscribeCommentAddedNotification(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to \"CommentAdded\" notifications on the document.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjgzMTg5", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344683189", "createdAt": "2020-01-17T16:10:13Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoxMDoxM1rOFe92wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoxMDoxM1rOFe92wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNTA0MQ==", "bodyText": "i think we should rework the javadoc to be more readable like Subscribes the comment author on events to the top level document. for more context on for example which event are added during this subscription you can use\n@implspec and sure we can ask the team for more feedbacks ...:)", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368015041", "createdAt": "2020-01-17T16:10:13Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njg0NTk0", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344684594", "createdAt": "2020-01-17T16:12:28Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoxMjoyOFrOFe97Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoxMjoyOFrOFe97Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNjIxOQ==", "bodyText": "i think a log message on TRACE level will help any one trying to understand why the notification mail are not received", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368016219", "createdAt": "2020-01-17T16:12:28Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+                                                       DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjkxMDg4", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344691088", "createdAt": "2020-01-17T16:22:35Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyMjozNVrOFe-OGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyMjozNVrOFe-OGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTAxNw==", "bodyText": "i think this method should ne re-formatted, here what i get when i reformat\n  protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n            DocumentModel document) {", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368021017", "createdAt": "2020-01-17T16:22:35Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+                                                       DocumentModel document) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjkzNjU0", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344693654", "createdAt": "2020-01-17T16:26:29Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyNjoyOVrOFe-V-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyNjoyOVrOFe-V-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMzAzNA==", "bodyText": "is there any reason the check if notificationManager, you can remove it, in a case where notificationManager is null we should at least add a log or let the code fail we will see it more quickly then trying understanding why we don't receive the notification mail", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368023034", "createdAt": "2020-01-17T16:26:29Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -193,4 +205,80 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return true if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Subscribes top level document's author on first comment and commentor on his first comment if autosubscribtion is\n+     * turned on.\n+     *\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+                                                       DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeCommentAddedNotification(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (!hasCommentsByUser(session, document, commentAuthor.getName())) {\n+            // Comment author is writing his first comment on the document\n+            subscribeCommentAddedNotification(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to \"CommentAdded\" notifications on the document.\n+     *\n+     * @param document the document being commented\n+     * @param user the user to subscribe to comment notifications\n+     * @since 11.1\n+     */\n+    protected void subscribeCommentAddedNotification(DocumentModel document, NuxeoPrincipal user) {\n+        String subscriber = NotificationConstants.USER_PREFIX + user.getName();\n+        NotificationManager notificationManager = Framework.getService(NotificationManager.class);\n+        if (notificationManager != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njk0Mjcy", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344694272", "createdAt": "2020-01-17T16:27:27Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyNzoyN1rOFe-YCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjoyNzoyN1rOFe-YCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMzU2MA==", "bodyText": "if we decide to not make the two methods abstract you will have the default impl on abstract class", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368023560", "createdAt": "2020-01-17T16:27:27Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/CommentManagerImpl.java", "diffHunk": "@@ -525,4 +525,14 @@ public DocumentRef getTopLevelCommentAncestor(CoreSession s, DocumentRef comment\n     public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel commentDocumentModel) {\n         throw new UnsupportedOperationException();\n     }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njk2MDQz", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344696043", "createdAt": "2020-01-17T16:30:05Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozMDowNlrOFe-dFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozMDowNlrOFe-dFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNDg1NQ==", "bodyText": "as these two constants are not used outer the class what if we just make them inner on method and reuse the method to get the first query on the second once", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368024855", "createdAt": "2020-01-17T16:30:06Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -73,6 +74,22 @@\n \n     protected static final String COMMENT_NAME = \"comment\";\n \n+    /**\n+     * Counts how many comments where made on a specific document.\n+     *\n+     * @since 11.1\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS = //\n+            \"SELECT \" + ECM_UUID + \" FROM Comment WHERE \" + COMMENT_ANCESTOR_IDS + \"/* = '%s'\";\n+\n+    /**\n+     * Counts how many comments where made by a specific user on a specific document.\n+     *\n+     * @since 11.1\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS_AND_AUTHOR = //\n+            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS + \" AND \" + COMMENT_AUTHOR + \" = '%s'\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njk3MjUw", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344697250", "createdAt": "2020-01-17T16:32:03Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozMjowM1rOFe-gsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozMjowM1rOFe-gsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNTc3OA==", "bodyText": "why we handleNotificationAutoSubscriptions and notifyEvent on the Get we just retrieve why we need to notify an event", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368025778", "createdAt": "2020-01-17T16:32:03Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -131,8 +148,9 @@ public DocumentModel createComment(DocumentModel docModel, DocumentModel comment\n                     (Serializable) computeAncestorIds(session, docModel.getId()));\n             DocumentModel comment = session.createDocument(commentModelToCreate);\n             comment.detach(true);\n-            notifyEvent(session, CommentEvents.COMMENT_ADDED, docModel, comment);\n \n+            handleNotificationAutoSubscriptions(session, commentModel, session.getDocument(docRef));\n+            notifyEvent(session, CommentEvents.COMMENT_ADDED, comment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njk4MzQ5", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344698349", "createdAt": "2020-01-17T16:33:40Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozMzo0MFrOFe-kAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjozMzo0MFrOFe-kAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNjYyNw==", "bodyText": "we can use a buildQuery method i think there no need to extract them as a field class", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368026627", "createdAt": "2020-01-17T16:33:40Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -83,6 +85,18 @@\n \n     public static final String SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE = \"This service implementation does not implement deprecated API.\";\n \n+    /**\n+     * Counts how many comments where made on a specific document.\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR = //\n+            \"SELECT \" + ECM_UUID + \" FROM Comment WHERE \" + ECM_ANCESTORID + \" = '%s'\";\n+\n+    /**\n+     * Counts how many comments where made by a specific user on a specific document.\n+     */\n+    protected static final String QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR = //\n+            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR + \" AND \" + COMMENT_AUTHOR + \" = '%s'\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzA1MDE5", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344705019", "createdAt": "2020-01-17T16:44:07Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0NDowN1rOFe-3ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo0NDowN1rOFe-3ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzMTY3NA==", "bodyText": "why changing it from Service to Manager", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368031674", "createdAt": "2020-01-17T16:44:07Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -66,8 +70,12 @@\n @Features({ NotificationCommentFeature.class, SmtpMailServerFeature.class })\n public abstract class AbstractTestCommentNotification {\n \n+    protected static final String ADMINISTRATOR = \"Administrator\";\n+\n+    protected static final String ANY_COMMENT_MESSAGE = \"any Comment message\";\n+\n     @Inject\n-    protected NotificationService notificationService;\n+    protected NotificationManager notificationManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzA5Njg1", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344709685", "createdAt": "2020-01-17T16:51:25Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1MToyNlrOFe_GCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjo1MToyNlrOFe_GCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzNTMzNg==", "bodyText": "i think it will better if we work together to try reworking this test for more readability / simplicity", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368035336", "createdAt": "2020-01-17T16:51:26Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -149,12 +162,90 @@ public void shouldNotifyWithTheRightCommentedDocument() {\n \n         // Reply\n         captureAndVerifyCommentEventNotification(() -> {\n-            Comment reply = createComment(commentedDocumentModel);\n+            Comment reply = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewComments() {\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzExMDMz", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-344711033", "createdAt": "2020-01-17T16:53:38Z", "commit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0873d7ace8050a98edbebb4a9a4387fab67e1e45", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0873d7ace8050a98edbebb4a9a4387fab67e1e45", "committedDate": "2020-01-17T15:14:41Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "17f9a38f86053db4fb0b274f966371f0b5af1268", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/17f9a38f86053db4fb0b274f966371f0b5af1268", "committedDate": "2020-01-20T06:59:46Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17f9a38f86053db4fb0b274f966371f0b5af1268", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/17f9a38f86053db4fb0b274f966371f0b5af1268", "committedDate": "2020-01-20T06:59:46Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "2e2d5b32fd0140f7465702cf2cd03c1a4553fc10", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2e2d5b32fd0140f7465702cf2cd03c1a4553fc10", "committedDate": "2020-01-20T10:11:56Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e2d5b32fd0140f7465702cf2cd03c1a4553fc10", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2e2d5b32fd0140f7465702cf2cd03c1a4553fc10", "committedDate": "2020-01-20T10:11:56Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "4dc9e35602cb4cd347fac1f28561f97fed5b0a30", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4dc9e35602cb4cd347fac1f28561f97fed5b0a30", "committedDate": "2020-01-20T16:19:36Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4dc9e35602cb4cd347fac1f28561f97fed5b0a30", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4dc9e35602cb4cd347fac1f28561f97fed5b0a30", "committedDate": "2020-01-20T16:19:36Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "82ab021c0e67b1ce912bc4afe967cca4cef7cbdb", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/82ab021c0e67b1ce912bc4afe967cca4cef7cbdb", "committedDate": "2020-01-20T21:08:40Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82ab021c0e67b1ce912bc4afe967cca4cef7cbdb", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/82ab021c0e67b1ce912bc4afe967cca4cef7cbdb", "committedDate": "2020-01-20T21:08:40Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "a0577102611333e237832a06259dbe9e6e5b2b98", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a0577102611333e237832a06259dbe9e6e5b2b98", "committedDate": "2020-01-20T21:11:00Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0577102611333e237832a06259dbe9e6e5b2b98", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a0577102611333e237832a06259dbe9e6e5b2b98", "committedDate": "2020-01-20T21:11:00Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "94109e5091cb93dc004949bfd38658465602ef1f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/94109e5091cb93dc004949bfd38658465602ef1f", "committedDate": "2020-01-20T21:13:34Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94109e5091cb93dc004949bfd38658465602ef1f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/94109e5091cb93dc004949bfd38658465602ef1f", "committedDate": "2020-01-20T21:13:34Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "082982db5f6b713d9368db8e070ee3a41d57cf2e", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/082982db5f6b713d9368db8e070ee3a41d57cf2e", "committedDate": "2020-01-20T21:18:03Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NzExNTg0", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-345711584", "createdAt": "2020-01-21T08:51:06Z", "commit": {"oid": "082982db5f6b713d9368db8e070ee3a41d57cf2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwODo1MTowN1rOFfyNog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwODo1MTowN1rOFfyNog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3Mjg2Ng==", "bodyText": "sorry, i have an other interrogation about this auto-subscribe: actually if you use the platform (i made my test on my local 10.10) when a user clique on the  Notify Me button the backend code that will be called will be\norg.nuxeo.ecm.platform.ec.notification.service.NotificationService#addSubscriptions((String username, DocumentModel doc, Boolean sendConfirmationEmail, NuxeoPrincipal principal))\nthrough the Subscription operation. we don't give the name of the notification and then the method that will be called is doc.getAdapter(SubscriptionAdapter.class).addSubscriptionsToAll(username); which will add the notification list below:\n\"Modification\", \"CommentPublication\", \"Approbation review started\", \"CommentUpdated\", \"Creation\", \"CommentAdded\", \"Workflow Change\"\nmy interrogations:\n\nIn your code yo give the CommentAdded when you auto-subscribe if the treatment is not the same then the web-ui,  what about CommentUpdated, an user can update a given comment under some conditions (admin ...)\ndo we need to send a mail to notify that the user is now auto-subscribed: .addSubscription(subscriber, COMMENT_ADDED_NOTIFICATION, document, false, user, COMMENT_ADDED_NOTIFICATION);\nfalse means no mail will be sent when we subscribe", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r368872866", "createdAt": "2020-01-21T08:51:07Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -183,4 +204,83 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found, otherwise {@code false}\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found, otherwise {@code false}\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Handles autosubscription to {@value #COMMENT_ADDED_NOTIFICATION} following notification rules.\n+     *\n+     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n+     *           The default implementation autosubscribes comment author on his first comment on top level document if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            log.trace(\"autosubscription to new comments is disabled\");\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeCommentAddedNotification(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (!hasCommentsByUser(session, document, commentAuthor.getName())) {\n+            // Comment author is writing his first comment on the document\n+            subscribeCommentAddedNotification(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to {@value #COMMENT_ADDED_NOTIFICATION} notifications on the document.\n+     *\n+     * @param document the document being commented\n+     * @param user the user to subscribe to comment notifications\n+     * @since 11.1\n+     */\n+    protected void subscribeCommentAddedNotification(DocumentModel document, NuxeoPrincipal user) {\n+        String subscriber = NotificationConstants.USER_PREFIX + user.getName();\n+        NotificationManager notificationManager = Framework.getService(NotificationManager.class);\n+        notificationManager.addSubscription(subscriber, COMMENT_ADDED_NOTIFICATION, document, false, user,\n+                COMMENT_ADDED_NOTIFICATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "082982db5f6b713d9368db8e070ee3a41d57cf2e"}, "originalPosition": 153}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "082982db5f6b713d9368db8e070ee3a41d57cf2e", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/082982db5f6b713d9368db8e070ee3a41d57cf2e", "committedDate": "2020-01-20T21:18:03Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "f22b60721d826580b63713581da984e1553c21a3", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f22b60721d826580b63713581da984e1553c21a3", "committedDate": "2020-01-21T10:54:34Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f22b60721d826580b63713581da984e1553c21a3", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f22b60721d826580b63713581da984e1553c21a3", "committedDate": "2020-01-21T10:54:34Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "eb3b0901bc78aadbe5211bef7f28dac6f301b85e", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/eb3b0901bc78aadbe5211bef7f28dac6f301b85e", "committedDate": "2020-01-21T10:55:42Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb3b0901bc78aadbe5211bef7f28dac6f301b85e", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/eb3b0901bc78aadbe5211bef7f28dac6f301b85e", "committedDate": "2020-01-21T10:55:42Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "c07d31b5d9dd8e697bedb346b119f6594c3f662d", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c07d31b5d9dd8e697bedb346b119f6594c3f662d", "committedDate": "2020-01-22T11:35:24Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c07d31b5d9dd8e697bedb346b119f6594c3f662d", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c07d31b5d9dd8e697bedb346b119f6594c3f662d", "committedDate": "2020-01-22T11:35:24Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "7387c39eb98a8b73a2143269430104e074dd40f6", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7387c39eb98a8b73a2143269430104e074dd40f6", "committedDate": "2020-01-22T15:22:36Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7387c39eb98a8b73a2143269430104e074dd40f6", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7387c39eb98a8b73a2143269430104e074dd40f6", "committedDate": "2020-01-22T15:22:36Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b5e353638a6259e9526211af4369465eddc402ac", "committedDate": "2020-01-22T16:40:28Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MjEwMjE3", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-347210217", "createdAt": "2020-01-23T10:55:53Z", "commit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDo1NTo1M1rOFg6LUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDo1NTo1M1rOFg6LUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1MTkyMg==", "bodyText": "i don't know if we can find ourself with a comment without author, because if it is the case and the docModel is a Comment, you will not evaluate the second if and we find ourself without author; why if we change to:\n       if (docModel.hasSchema(COMMENT_SCHEMA)) {\n            // means annotation / comment\n            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n        }\n        if (StringUtils.isEmpty(author)) {", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370051922", "createdAt": "2020-01-23T10:55:53Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -133,9 +138,15 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n-        UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        String author = null;\n+        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n+            // means annotation / comment\n+            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n+        } else if (StringUtils.isEmpty(author)) {\n+            String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b5e353638a6259e9526211af4369465eddc402ac", "committedDate": "2020-01-22T16:40:28Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4ee59ce19a549cfef4e3499f74f3874f41ab79ee", "committedDate": "2020-01-23T11:08:20Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MjE4NTA1", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-347218505", "createdAt": "2020-01-23T11:11:06Z", "commit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMToxMTo1MVrOFg6lOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMToxNzoyMlrOFg6uWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1ODU1Mw==", "bodyText": "what if we rework the java doc here:\n /**\n     * Handles auto-subscription to comment notifications rules.\n     *\n     * @implSpec If the auto-subscription is enabled {@value NotificationService#AUTOSUBSCRIBE_CONFIG_KEY} then\n     *           <ul>\n     *           <li>We auto-subscribes to the top level document's author on his first comment:\n     *           {@link #hasComments(CoreSession, DocumentModel)}</li>\n     *           <li>.....: {@link #hasCommentsByUser(CoreSession, DocumentModel, String)}</li>\n     *           </ul>\n     * @param session the core session\n     * @param commentDocModel the comment document model\n     * @param document the document being commented\n     * @since 11.1\n     */\n\navoid duplication ...", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370058553", "createdAt": "2020-01-23T11:11:51Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +198,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Handles autosubscription to comment notifications rules.\n+     *\n+     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n+     *           The default implementation autosubscribes comment author on his first comment on top level document if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1OTU5Nw==", "bodyText": "the two assertion can be replaced by one:\nassertEquals(expectedSubscriptions, subscriptions)\n\nthey should be sorted", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370059597", "createdAt": "2020-01-23T11:14:13Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -170,38 +178,63 @@ protected void captureAndVerifyAnnotationEventNotification(Supplier<DocumentMode\n     @Test\n     public void shouldNotifyWithTheRightAnnotatedDocument() {\n         // First comment\n-        Annotation createdAnnotation = createAnnotation(annotatedDocumentModel);\n+        Annotation createdAnnotation = createAnnotation(annotatedDocumentModel, ADMINISTRATOR, ANY_ANNOTATION_MESSAGE);\n         DocumentModel createdAnnotationDocModel = session.getDocument(new IdRef(createdAnnotation.getId()));\n         // before subscribing, or previous event will be notified as well\n         transactionalFeature.nextTransaction();\n         // Reply\n         captureAndVerifyAnnotationEventNotification(() -> {\n             // subscribe to notifications\n-            addSubscriptions(\"CommentAdded\");\n+            addSubscriptions(COMMENT_ADDED_NOTIFICATION);\n \n-            Comment reply = createAnnotation(createdAnnotationDocModel);\n+            Comment reply = createAnnotation(createdAnnotationDocModel, ADMINISTRATOR, ANY_ANNOTATION_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewAnnotations() {\n+        String john = \"john\";\n+        String johnSubscription = NotificationConstants.USER_PREFIX + john;\n+        createUser(john);\n+        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription,\n+                annotatedDocumentModel);\n+        assertEquals(0, subscriptions.size());\n+        createAnnotation(annotatedDocumentModel, john, \"Test message\");\n+        transactionalFeature.nextTransaction();\n+        annotatedDocumentModel = session.getDocument(annotatedDocumentModel.getRef());\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, annotatedDocumentModel);\n+        List<String> expectedSubscriptions = List.of(COMMENT_ADDED_NOTIFICATION, COMMENT_UPDATED_NOTIFICATION);\n+        assertEquals(expectedSubscriptions.size(), subscriptions.size());\n+        assertTrue(subscriptions.containsAll(expectedSubscriptions));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA2MDI1Ng==", "bodyText": "i think this method is not used as now we test mainly the subscriptions behaviour, is it right", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370060256", "createdAt": "2020-01-23T11:15:57Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -140,26 +150,73 @@ public void shouldNotifyEventWhenRemoveComment() {\n     @Test\n     public void shouldNotifyWithTheRightCommentedDocument() {\n         // First comment\n-        Comment createdComment = createComment(commentedDocumentModel);\n+        Comment createdComment = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n         DocumentModel createdCommentDocModel = session.getDocument(new IdRef(createdComment.getId()));\n         // before subscribing, or previous event will be notified as well\n         transactionalFeature.nextTransaction();\n         // Reply\n         captureAndVerifyCommentEventNotification(() -> {\n             addSubscriptions(\"CommentAdded\");\n \n-            Comment reply = createComment(createdCommentDocModel);\n+            Comment reply = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n-    private void addSubscriptions(String... notifications) {\n+    protected void addSubscriptions(String... notifications) {\n         NuxeoPrincipal principal = session.getPrincipal();\n         String subscriber = NotificationConstants.USER_PREFIX + principal.getName();\n         for (String notif : notifications) {\n-            notificationService.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+            notificationManager.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewComments() {\n+        String john = \"john\";\n+        String johnSubscription = NotificationConstants.USER_PREFIX + john;\n+        createUser(john);\n+        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription,\n+                commentedDocumentModel);\n+        assertEquals(0, subscriptions.size());\n+        createComment(commentedDocumentModel, john, \"Test message\");\n+        transactionalFeature.nextTransaction();\n+        commentedDocumentModel = session.getDocument(commentedDocumentModel.getRef());\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, commentedDocumentModel);\n+        List<String> expectedSubscriptions = List.of(COMMENT_ADDED_NOTIFICATION, COMMENT_UPDATED_NOTIFICATION);\n+        assertEquals(expectedSubscriptions.size(), subscriptions.size());\n+        assertTrue(subscriptions.containsAll(expectedSubscriptions));\n+        for (String subscription : subscriptions) {\n+            notificationManager.removeSubscription(johnSubscription, subscription, commentedDocumentModel);\n         }\n+        createComment(commentedDocumentModel, john, \"Test message again\");\n+        transactionalFeature.nextTransaction();\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, commentedDocumentModel);\n+        assertEquals(0, subscriptions.size());\n+    }\n+\n+    protected int checkNotifications(CapturingEventListener listener, Comment createdComment, int offset,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA2MDg5MA==", "bodyText": "same thing as checkNotifications will be removed, i think this one too  (checkMailContent)", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370060890", "createdAt": "2020-01-23T11:17:22Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/CommentUtils.java", "diffHunk": "@@ -129,6 +136,24 @@ public static void checkReceivedMail(List<MailMessage> mails, DocumentModel comm\n         }\n     }\n \n+    /**\n+     * Checks the received mail, sent when a comment / annotation is created or updated.\n+     *\n+     * @param mail the mail to compare\n+     * @param commentDocModel the document model of the comment, cannot be {@code null}\n+     * @param commentedDocModel the document being commented, cannot be {@code null}\n+     * @param event the event, cannot be {@code null}\n+     * @param commentEventType the type of comment event {@link org.nuxeo.ecm.platform.comment.api.CommentEvents},\n+     *            cannot be {@code null}\n+     */\n+    public static String checkMailContent(MailMessage mail, DocumentModel commentDocModel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4ee59ce19a549cfef4e3499f74f3874f41ab79ee", "committedDate": "2020-01-23T11:08:20Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "ed2ec3be4faaac038362167696828271466464d5", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ed2ec3be4faaac038362167696828271466464d5", "committedDate": "2020-01-23T14:29:40Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MTg3NjI0", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-347187624", "createdAt": "2020-01-23T10:18:19Z", "commit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDoxODoxOVrOFg5GCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToyMjo1M1rOFhCLGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNDE4NQ==", "bodyText": "As you are changing the code, let's go for:\nString[] contributors = (String[]) docModel.getPropertyValue(\"dc:contributors\");\nThe prefered way to get a property value (using xpath).", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370034185", "createdAt": "2020-01-23T10:18:19Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -133,9 +138,15 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n-        UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        String author = null;\n+        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n+            // means annotation / comment\n+            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n+        } else if (StringUtils.isEmpty(author)) {\n+            String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNTg0Mg==", "bodyText": "I would go for StringUtils.isBlank here.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370035842", "createdAt": "2020-01-23T10:21:44Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -133,9 +138,15 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n-        UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        String author = null;\n+        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n+            // means annotation / comment\n+            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n+        } else if (StringUtils.isEmpty(author)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNjUyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n          \n          \n            \n                protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n          \n      \n    \n    \n  \n\nThe Javadoc + methods arguments are enough, not need for the ByUser suffix.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370036521", "createdAt": "2020-01-23T10:23:17Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNjY0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param author the name of the user who's comments are being counted\n          \n          \n            \n                 * @param user the name of the user who's comments are being counted", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370036640", "createdAt": "2020-01-23T10:23:31Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNjc5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@code true} if comments by author were found\n          \n          \n            \n                 * @return {@code true} if comments by user were found", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370036798", "createdAt": "2020-01-23T10:23:50Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzOTk2NQ==", "bodyText": "empty line.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370039965", "createdAt": "2020-01-23T10:30:14Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Handles autosubscription to comment notifications rules.\n+     *\n+     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n+     *           The default implementation autosubscribes comment author on his first comment on top level document if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            log.trace(\"autosubscription to new comments is disabled\");\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToCommentNotifications(document, topLevelDocumentAuthor);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0NzA2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n          \n          \n            \n                    if (topLevelDocumentAuthor.equals(commentAuthor)) {\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370047061", "createdAt": "2020-01-23T10:45:20Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Handles autosubscription to comment notifications rules.\n+     *\n+     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n+     *           The default implementation autosubscribes comment author on his first comment on top level document if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            log.trace(\"autosubscription to new comments is disabled\");\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToCommentNotifications(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0OTEzNw==", "bodyText": "It's not really anymore \"CommentNotifications\" is it? subscribeToNotifications seems more accurate :)\nIf you keep the params javadoc, update it to remove \"comment\" references.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370049137", "createdAt": "2020-01-23T10:49:40Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +197,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Handles autosubscription to comment notifications rules.\n+     *\n+     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n+     *           The default implementation autosubscribes comment author on his first comment on top level document if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,\n+            DocumentModel document) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            log.trace(\"autosubscription to new comments is disabled\");\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(document);\n+        if (!hasComments(session, document)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToCommentNotifications(document, topLevelDocumentAuthor);\n+\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor.getName().equals(commentAuthor.getName())) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (!hasCommentsByUser(session, document, commentAuthor.getName())) {\n+            // Comment author is writing his first comment on the document\n+            subscribeToCommentNotifications(document, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to notifications on the document.\n+     *\n+     * @param document the document being commented\n+     * @param user the user to subscribe to comment notifications\n+     * @since 11.1\n+     */\n+    protected void subscribeToCommentNotifications(DocumentModel document, NuxeoPrincipal user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1MTYxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n          \n          \n            \n                protected boolean hasComments(CoreSession session, DocumentModel document, String user) {", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370051612", "createdAt": "2020-01-23T10:55:11Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -461,4 +482,18 @@ public DocumentRef getCommentedDocumentRef(CoreSession s, DocumentModel commentD\n         });\n \n     }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1NTY5Nw==", "bodyText": "Why public? If needed, put it before the protected ones.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370055697", "createdAt": "2020-01-23T11:04:40Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -69,6 +69,14 @@\n @Features({ NotificationCommentFeature.class, SmtpMailServerFeature.class })\n public abstract class AbstractTestAnnotationNotification {\n \n+    protected static final String COMMENT_ADDED_NOTIFICATION = \"CommentAdded\";\n+\n+    public static final String COMMENT_UPDATED_NOTIFICATION = \"CommentUpdated\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e353638a6259e9526211af4369465eddc402ac"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2Njk4Nw==", "bodyText": "It's not a public method that will be used by others... I don't think we need all the @implSpec here. The method's code is already clear enough IMO.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370166987", "createdAt": "2020-01-23T14:58:00Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +198,81 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param author the name of the user who's comments are being counted\n+     * @return {@code true} if comments by author were found\n+     * @since 11.1\n+     */\n+    protected boolean hasCommentsByUser(CoreSession session, DocumentModel document, String author) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Handles autosubscription to comment notifications rules.\n+     *\n+     * @implSpec The default implementation autosubscribes top level document's author on first comment if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasComments method.<br/>\n+     *           The default implementation autosubscribes comment author on his first comment on top level document if\n+     *           autosubscription is enabled. This relies on the implementation of the abstract hasCommentsByUser method\n+     * @param session the core session\n+     * @param commentDocModel the comment\n+     * @param document the document being commented\n+     * @since 11.1\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1ODU1Mw=="}, "originalCommit": {"oid": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3OTgxNw==", "bodyText": "private.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370179817", "createdAt": "2020-01-23T15:18:44Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/CommentUtils.java", "diffHunk": "@@ -60,6 +65,8 @@\n  */\n public class CommentUtils {\n \n+    public static final Logger log = LogManager.getLogger(CommentUtils.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2ec3be4faaac038362167696828271466464d5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4MjkzNw==", "bodyText": "But it's related to comments, so it should go to the comment service. BTW, you assume here https://github.com/nuxeo/nuxeo/pull/3663/files#diff-c765ee349f84c6b796ac98a000e4be25R279 that the Notification Service is always available in the comment context.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370182937", "createdAt": "2020-01-23T15:22:53Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-notification/nuxeo-platform-notification-core/src/main/java/org/nuxeo/ecm/platform/ec/notification/service/NotificationService.java", "diffHunk": "@@ -79,6 +79,13 @@\n \n     private static final Log log = LogFactory.getLog(NotificationService.class);\n \n+    /**\n+     * The key to the config turning on or off autosubscription.\n+     *\n+     * @since 11.1\n+     */\n+    public static final String AUTOSUBSCRIBE_CONFIG_KEY = \"org.nuxeo.ecm.platform.comment.service.notification.autosubscribe\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4NDg2OQ=="}, "originalCommit": {"oid": "c0ca914e28e03369b0e7c3a364a85237a3690131"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed2ec3be4faaac038362167696828271466464d5", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/ed2ec3be4faaac038362167696828271466464d5", "committedDate": "2020-01-23T14:29:40Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/872a0d932a4f59f3f32bbe3c427e84757758ea39", "committedDate": "2020-01-23T15:58:20Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/872a0d932a4f59f3f32bbe3c427e84757758ea39", "committedDate": "2020-01-23T15:58:20Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "fefbebd08833ed4c4e48393edbb2762b5fed8550", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/fefbebd08833ed4c4e48393edbb2762b5fed8550", "committedDate": "2020-01-23T16:37:41Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NDM3NjUx", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-347437651", "createdAt": "2020-01-23T16:30:52Z", "commit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjozMDo1MlrOFhEsCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjo0MjoyMFrOFhFGUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDEzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected boolean hasComments(CoreSession session, DocumentModel document, String author) {\n          \n          \n            \n                protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n          \n      \n    \n    \n  \n\nTo be consistent with the interface.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370224136", "createdAt": "2020-01-23T16:30:52Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -461,4 +482,18 @@ public DocumentRef getCommentedDocumentRef(CoreSession s, DocumentModel commentD\n         });\n \n     }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document, String author) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDIzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS_AND_AUTHOR, document.getId(), author);\n          \n          \n            \n                            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS_AND_AUTHOR, document.getId(), user);", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370224234", "createdAt": "2020-01-23T16:31:01Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -461,4 +482,18 @@ public DocumentRef getCommentedDocumentRef(CoreSession s, DocumentModel commentD\n         });\n \n     }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document, String author) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_COMMENT_ANCESTORS_AND_AUTHOR, document.getId(), author);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDM2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean hasComments(CoreSession session, DocumentModel document, String author) {\n          \n          \n            \n                public boolean hasComments(CoreSession session, DocumentModel document, String user) {", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370224361", "createdAt": "2020-01-23T16:31:15Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +578,19 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    @Override\n+    public boolean hasComments(CoreSession session, DocumentModel document, String author) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDQ4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), author);\n          \n          \n            \n                            QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), user);", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370224484", "createdAt": "2020-01-23T16:31:25Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +578,19 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    @Override\n+    public boolean hasComments(CoreSession session, DocumentModel document, String author) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), author);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNDk0NA==", "bodyText": "Put this method before the other hasComments one. Consistency with the interface and PropertyCommentManager.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370224944", "createdAt": "2020-01-23T16:32:12Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +578,19 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    @Override\n+    public boolean hasComments(CoreSession session, DocumentModel document, String author) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR_AND_AUTHOR, document.getId(), author);\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    @Override\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_COUNT_FOR_DOCUMENT_BY_ECM_ANCESTOR, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNTM1NA==", "bodyText": "Stick with contains.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370225354", "createdAt": "2020-01-23T16:32:56Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -170,38 +178,63 @@ protected void captureAndVerifyAnnotationEventNotification(Supplier<DocumentMode\n     @Test\n     public void shouldNotifyWithTheRightAnnotatedDocument() {\n         // First comment\n-        Annotation createdAnnotation = createAnnotation(annotatedDocumentModel);\n+        Annotation createdAnnotation = createAnnotation(annotatedDocumentModel, ADMINISTRATOR, ANY_ANNOTATION_MESSAGE);\n         DocumentModel createdAnnotationDocModel = session.getDocument(new IdRef(createdAnnotation.getId()));\n         // before subscribing, or previous event will be notified as well\n         transactionalFeature.nextTransaction();\n         // Reply\n         captureAndVerifyAnnotationEventNotification(() -> {\n             // subscribe to notifications\n-            addSubscriptions(\"CommentAdded\");\n+            addSubscriptions(COMMENT_ADDED_NOTIFICATION);\n \n-            Comment reply = createAnnotation(createdAnnotationDocModel);\n+            Comment reply = createAnnotation(createdAnnotationDocModel, ADMINISTRATOR, ANY_ANNOTATION_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewAnnotations() {\n+        String john = \"john\";\n+        String johnSubscription = NotificationConstants.USER_PREFIX + john;\n+        createUser(john);\n+        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription,\n+                annotatedDocumentModel);\n+        assertEquals(0, subscriptions.size());\n+        createAnnotation(annotatedDocumentModel, john, \"Test message\");\n+        transactionalFeature.nextTransaction();\n+        annotatedDocumentModel = session.getDocument(annotatedDocumentModel.getRef());\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, annotatedDocumentModel);\n+        List<String> expectedSubscriptions = List.of(COMMENT_ADDED_NOTIFICATION, COMMENT_UPDATED_NOTIFICATION);\n+        assertEquals(expectedSubscriptions.size(), subscriptions.size());\n+        assertTrue(subscriptions.containsAll(expectedSubscriptions));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1OTU5Nw=="}, "originalCommit": {"oid": "4ee59ce19a549cfef4e3499f74f3874f41ab79ee"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNjE0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(0, subscriptions.size());\n          \n          \n            \n                    assertTrue(subscriptions.isEmpty());", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370226147", "createdAt": "2020-01-23T16:34:14Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -170,38 +178,63 @@ protected void captureAndVerifyAnnotationEventNotification(Supplier<DocumentMode\n     @Test\n     public void shouldNotifyWithTheRightAnnotatedDocument() {\n         // First comment\n-        Annotation createdAnnotation = createAnnotation(annotatedDocumentModel);\n+        Annotation createdAnnotation = createAnnotation(annotatedDocumentModel, ADMINISTRATOR, ANY_ANNOTATION_MESSAGE);\n         DocumentModel createdAnnotationDocModel = session.getDocument(new IdRef(createdAnnotation.getId()));\n         // before subscribing, or previous event will be notified as well\n         transactionalFeature.nextTransaction();\n         // Reply\n         captureAndVerifyAnnotationEventNotification(() -> {\n             // subscribe to notifications\n-            addSubscriptions(\"CommentAdded\");\n+            addSubscriptions(COMMENT_ADDED_NOTIFICATION);\n \n-            Comment reply = createAnnotation(createdAnnotationDocModel);\n+            Comment reply = createAnnotation(createdAnnotationDocModel, ADMINISTRATOR, ANY_ANNOTATION_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewAnnotations() {\n+        String john = \"john\";\n+        String johnSubscription = NotificationConstants.USER_PREFIX + john;\n+        createUser(john);\n+        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription,\n+                annotatedDocumentModel);\n+        assertEquals(0, subscriptions.size());\n+        createAnnotation(annotatedDocumentModel, john, \"Test message\");\n+        transactionalFeature.nextTransaction();\n+        annotatedDocumentModel = session.getDocument(annotatedDocumentModel.getRef());\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, annotatedDocumentModel);\n+        List<String> expectedSubscriptions = List.of(COMMENT_ADDED_NOTIFICATION, COMMENT_UPDATED_NOTIFICATION);\n+        assertEquals(expectedSubscriptions.size(), subscriptions.size());\n+        assertTrue(subscriptions.containsAll(expectedSubscriptions));\n+        for (String subscription : subscriptions) {\n+            notificationManager.removeSubscription(johnSubscription, subscription, annotatedDocumentModel);\n+        }\n+        createAnnotation(annotatedDocumentModel, john, \"Test message again\");\n+        transactionalFeature.nextTransaction();\n+            subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, annotatedDocumentModel);\n+        assertEquals(0, subscriptions.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyNzQwNQ==", "bodyText": "Name it folder, or reuse doc maybe? domain is misleading.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370227405", "createdAt": "2020-01-23T16:36:17Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentManager.java", "diffHunk": "@@ -99,10 +97,15 @@\n \n     @Before\n     public void init() {\n-        DocumentModel domain = session.createDocumentModel(\"/\", \"Folder\", \"Folder\");\n+        DocumentModel domain = session.createDocumentModel(\"/\", \"domain\", \"Domain\");\n+        session.createDocument(domain);\n+        doc = session.createDocumentModel(\"/domain\", \"test\", \"File\");\n+        doc = session.createDocument(doc);\n+\n+        domain = session.createDocumentModel(\"/\", \"Folder\", \"Folder\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyODAwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(0, subscriptions.size());\n          \n          \n            \n                    assertTrue(subscriptions.isEmpty());", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370228004", "createdAt": "2020-01-23T16:37:16Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -140,26 +148,56 @@ public void shouldNotifyEventWhenRemoveComment() {\n     @Test\n     public void shouldNotifyWithTheRightCommentedDocument() {\n         // First comment\n-        Comment createdComment = createComment(commentedDocumentModel);\n+        Comment createdComment = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n         DocumentModel createdCommentDocModel = session.getDocument(new IdRef(createdComment.getId()));\n         // before subscribing, or previous event will be notified as well\n         transactionalFeature.nextTransaction();\n         // Reply\n         captureAndVerifyCommentEventNotification(() -> {\n             addSubscriptions(\"CommentAdded\");\n \n-            Comment reply = createComment(createdCommentDocModel);\n+            Comment reply = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n-    private void addSubscriptions(String... notifications) {\n+    protected void addSubscriptions(String... notifications) {\n         NuxeoPrincipal principal = session.getPrincipal();\n         String subscriber = NotificationConstants.USER_PREFIX + principal.getName();\n         for (String notif : notifications) {\n-            notificationService.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+            notificationManager.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewComments() {\n+        String john = \"john\";\n+        String johnSubscription = NotificationConstants.USER_PREFIX + john;\n+        createUser(john);\n+        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription,\n+                commentedDocumentModel);\n+        assertEquals(0, subscriptions.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyODEyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(0, subscriptions.size());\n          \n          \n            \n                    assertTrue(subscriptions.isEmpty());", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370228128", "createdAt": "2020-01-23T16:37:32Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -140,26 +148,56 @@ public void shouldNotifyEventWhenRemoveComment() {\n     @Test\n     public void shouldNotifyWithTheRightCommentedDocument() {\n         // First comment\n-        Comment createdComment = createComment(commentedDocumentModel);\n+        Comment createdComment = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n         DocumentModel createdCommentDocModel = session.getDocument(new IdRef(createdComment.getId()));\n         // before subscribing, or previous event will be notified as well\n         transactionalFeature.nextTransaction();\n         // Reply\n         captureAndVerifyCommentEventNotification(() -> {\n             addSubscriptions(\"CommentAdded\");\n \n-            Comment reply = createComment(createdCommentDocModel);\n+            Comment reply = createComment(commentedDocumentModel, ADMINISTRATOR, ANY_COMMENT_MESSAGE);\n             DocumentModel replyDocumentModel = session.getDocument(new IdRef(reply.getId()));\n             return session.getDocument(new IdRef(replyDocumentModel.getId()));\n         }, COMMENT_ADDED, DOCUMENT_CREATED);\n     }\n \n-    private void addSubscriptions(String... notifications) {\n+    protected void addSubscriptions(String... notifications) {\n         NuxeoPrincipal principal = session.getPrincipal();\n         String subscriber = NotificationConstants.USER_PREFIX + principal.getName();\n         for (String notif : notifications) {\n-            notificationService.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+            notificationManager.addSubscription(subscriber, notif, commentedDocumentModel, false, principal, notif);\n+        }\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewComments() {\n+        String john = \"john\";\n+        String johnSubscription = NotificationConstants.USER_PREFIX + john;\n+        createUser(john);\n+        List<String> subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription,\n+                commentedDocumentModel);\n+        assertEquals(0, subscriptions.size());\n+        createComment(commentedDocumentModel, john, \"Test message\");\n+        transactionalFeature.nextTransaction();\n+        commentedDocumentModel = session.getDocument(commentedDocumentModel.getRef());\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, commentedDocumentModel);\n+        List<String> expectedSubscriptions = List.of(COMMENT_ADDED_NOTIFICATION, COMMENT_UPDATED_NOTIFICATION);\n+        assertEquals(expectedSubscriptions.size(), subscriptions.size());\n+        assertTrue(subscriptions.containsAll(expectedSubscriptions));\n+        for (String subscription : subscriptions) {\n+            notificationManager.removeSubscription(johnSubscription, subscription, commentedDocumentModel);\n         }\n+        createComment(commentedDocumentModel, john, \"Test message again\");\n+        transactionalFeature.nextTransaction();\n+        subscriptions = notificationManager.getSubscriptionsForUserOnDocument(johnSubscription, commentedDocumentModel);\n+        assertEquals(0, subscriptions.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872a0d932a4f59f3f32bbe3c427e84757758ea39"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzMDg2NQ==", "bodyText": "Same line as component.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r370230865", "createdAt": "2020-01-23T16:42:20Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/resources/OSGI-INF/notification-subscription-contrib.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\"?>\n+<component\n+        name=\"org.nuxeo.ecm.notifications.contribution.comments.autosubscribe.test\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fefbebd08833ed4c4e48393edbb2762b5fed8550"}, "originalPosition": 3}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fefbebd08833ed4c4e48393edbb2762b5fed8550", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/fefbebd08833ed4c4e48393edbb2762b5fed8550", "committedDate": "2020-01-23T16:37:41Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "98248cea2041431accf943d664c5315dea7a684b", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/98248cea2041431accf943d664c5315dea7a684b", "committedDate": "2020-01-23T17:09:34Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98248cea2041431accf943d664c5315dea7a684b", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/98248cea2041431accf943d664c5315dea7a684b", "committedDate": "2020-01-23T17:09:34Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "79d3d23425ffaf712ca43f1ef2132f611b4cde95", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/79d3d23425ffaf712ca43f1ef2132f611b4cde95", "committedDate": "2020-01-24T10:25:44Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODcyNTE0", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-347872514", "createdAt": "2020-01-24T10:42:30Z", "commit": {"oid": "98248cea2041431accf943d664c5315dea7a684b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79d3d23425ffaf712ca43f1ef2132f611b4cde95", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/79d3d23425ffaf712ca43f1ef2132f611b4cde95", "committedDate": "2020-01-24T10:25:44Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "1fd2a8990d30cefadc531937a122c38bd49b7325", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1fd2a8990d30cefadc531937a122c38bd49b7325", "committedDate": "2020-01-27T11:06:26Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fd2a8990d30cefadc531937a122c38bd49b7325", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1fd2a8990d30cefadc531937a122c38bd49b7325", "committedDate": "2020-01-27T11:06:26Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "d8bf545c6a575e46ee0b4130f9c2072cf7dff0db", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d8bf545c6a575e46ee0b4130f9c2072cf7dff0db", "committedDate": "2020-01-27T11:23:07Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8bf545c6a575e46ee0b4130f9c2072cf7dff0db", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d8bf545c6a575e46ee0b4130f9c2072cf7dff0db", "committedDate": "2020-01-27T11:23:07Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "db1f31883da610ba51f485f5460926beb4a25623", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/db1f31883da610ba51f485f5460926beb4a25623", "committedDate": "2020-01-27T12:00:08Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db1f31883da610ba51f485f5460926beb4a25623", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/db1f31883da610ba51f485f5460926beb4a25623", "committedDate": "2020-01-27T12:00:08Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "dbc0eb94dde967e546e324c178fb381e533c0767", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/dbc0eb94dde967e546e324c178fb381e533c0767", "committedDate": "2020-01-27T12:06:30Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbc0eb94dde967e546e324c178fb381e533c0767", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/dbc0eb94dde967e546e324c178fb381e533c0767", "committedDate": "2020-01-27T12:06:30Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "9016dd98b2557d7034103c2e84c4f3ff84b1628c", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9016dd98b2557d7034103c2e84c4f3ff84b1628c", "committedDate": "2020-01-27T12:42:17Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9016dd98b2557d7034103c2e84c4f3ff84b1628c", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9016dd98b2557d7034103c2e84c4f3ff84b1628c", "committedDate": "2020-01-27T12:42:17Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "d1d705b8c48e139d7bf226c87c781561c0898e71", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d1d705b8c48e139d7bf226c87c781561c0898e71", "committedDate": "2020-01-27T12:46:38Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1d705b8c48e139d7bf226c87c781561c0898e71", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d1d705b8c48e139d7bf226c87c781561c0898e71", "committedDate": "2020-01-27T12:46:38Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "28f2d51aedb10fdfadbd57191ac82a75186f93ab", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/28f2d51aedb10fdfadbd57191ac82a75186f93ab", "committedDate": "2020-01-27T14:30:46Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28f2d51aedb10fdfadbd57191ac82a75186f93ab", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/28f2d51aedb10fdfadbd57191ac82a75186f93ab", "committedDate": "2020-01-27T14:30:46Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "1e1745b4f0e7caee2beaad4f8eb83407e125fc9c", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1e1745b4f0e7caee2beaad4f8eb83407e125fc9c", "committedDate": "2020-01-27T14:36:00Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e1745b4f0e7caee2beaad4f8eb83407e125fc9c", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1e1745b4f0e7caee2beaad4f8eb83407e125fc9c", "committedDate": "2020-01-27T14:36:00Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "7cddb650defe9eddbf3e73d16377afdf68071042", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7cddb650defe9eddbf3e73d16377afdf68071042", "committedDate": "2020-01-27T14:43:07Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NzE3NjA3", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-348717607", "createdAt": "2020-01-27T14:48:46Z", "commit": {"oid": "7cddb650defe9eddbf3e73d16377afdf68071042"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo0ODo0NlrOFiFSPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo0ODo0NlrOFiFSPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4MjQ5NA==", "bodyText": "add a new line, between the two methods", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371282494", "createdAt": "2020-01-27T14:48:46Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +592,73 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true} if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param user the name of the user who's comments are being counted\n+     * @return {@code true} if comments by user were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR_AND_AUTHOR, document.getId(), user);\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cddb650defe9eddbf3e73d16377afdf68071042"}, "originalPosition": 139}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7cddb650defe9eddbf3e73d16377afdf68071042", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7cddb650defe9eddbf3e73d16377afdf68071042", "committedDate": "2020-01-27T14:43:07Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "d958072f736d5cc2132f5dfb4cc761204d1f9c40", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d958072f736d5cc2132f5dfb4cc761204d1f9c40", "committedDate": "2020-01-27T14:59:21Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NzUyMjI5", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-348752229", "createdAt": "2020-01-27T15:31:05Z", "commit": {"oid": "7cddb650defe9eddbf3e73d16377afdf68071042"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNTozMzoxN1rOFiG86A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNTo0MDoyMlrOFiHOoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMwOTgwMA==", "bodyText": "perhaps i missed some thing but why add the notification-contribution on CommentFeature the feature responsible of notification is NotificationCommentFeature:\ni tried to rollback this part (i mean removr the notification-contrib from commentFeature and put it in the NotificationCommentFeature i ran the whole tests, there some tests that failed (mainly the AbstractTestAnnotationService stack)  because if (!hasComments(session, document, commentAuthor.getName()) is null to fix it:\n\ni create  the users\n\n        CommentUtils.createUser(\"jdoe\");\n        CommentUtils.createUser(\"bob\");\n\neven if i did one test still failed on the AbstractTestAnnotationService it is because there is no comment auhtor and you code try to find it\nif (StringUtils.isBlank(author)) {\n            String[] contributors = (String[]) docModel.getPropertyValue(\"dc:contributors\");\n            author = contributors[0];\n        }\n        return Framework.getService(UserManager.class).getPrincipal(author);\n\nbut as the comment is created using doPriviliege... the dc:contributors will be system and the  Framework.getService(UserManager.class).getPrincipal(author); will returns null i don't why but i think its better te put the deploy notification contribution and fix the remained tests:\norg.nuxeo.ecm.restapi.server.jaxrs.comment.AbstractAnnotationAdapterTest#testUpdateAnnotation\norg.nuxeo.ecm.restapi.server.jaxrs.comment.AbstractAnnotationAdapterTest#testUpdateExternalAnnotation\norg.nuxeo.ecm.restapi.server.jaxrs.comment.AbstractCommentAdapterTest#testUpdateExternalComment\norg.nuxeo.ecm.platform.comment.impl.TestTreeCommentManager#shouldDeleteComment\ni think it is the same bug there is no author just call the CommentUtils.createUser()\nfrom web-ui i think we will not have an issue because they will send the author\nbut with REST API any other client, we will have an issue if the caller don't put the author and Framework.getService(UserManager.class).getPrincipal(author); returns null in the case system", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371309800", "createdAt": "2020-01-27T15:33:17Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/CommentFeature.java", "diffHunk": "@@ -35,5 +35,6 @@\n @Deploy(\"org.nuxeo.ecm.platform.comment.api\")\n @Deploy(\"org.nuxeo.ecm.platform.query.api\")\n @Deploy(\"org.nuxeo.ecm.platform.comment\")\n+@Deploy(\"org.nuxeo.ecm.platform.comment.tests:OSGI-INF/notification-contrib.xml\")\n public class CommentFeature implements RunnerFeature {\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d958072f736d5cc2132f5dfb4cc761204d1f9c40"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxMjgyNA==", "bodyText": "i am wondering if the /nuxeo/nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/resources/OSGI-INF/comment-notification-contrib.xml is not duplication of nuxeo-platform-comment/src/main/resources/OSGI-INF/comment-notification-contrib.xml as the both enable the auto-subscription", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371312824", "createdAt": "2020-01-27T15:37:57Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestTreeAnnotationNotification.java", "diffHunk": "@@ -31,4 +45,46 @@\n     protected Class<? extends CommentManager> getType() {\n         return TreeCommentManager.class;\n     }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewAnnotations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d958072f736d5cc2132f5dfb4cc761204d1f9c40"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxNDMzNg==", "bodyText": "same interrogation about the use of this new notification-subscription-contrib.xml", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371314336", "createdAt": "2020-01-27T15:40:22Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestTreeCommentNotification.java", "diffHunk": "@@ -31,4 +43,39 @@\n     protected Class<? extends CommentManager> getType() {\n         return TreeCommentManager.class;\n     }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.comment:OSGI-INF/notification-subscription-contrib.xml\")\n+    public void testAutoSubscribingOnlyOnceToNewComments() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d958072f736d5cc2132f5dfb4cc761204d1f9c40"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d958072f736d5cc2132f5dfb4cc761204d1f9c40", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d958072f736d5cc2132f5dfb4cc761204d1f9c40", "committedDate": "2020-01-27T14:59:21Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "a00a37259464cdc4c90d5b7b7d339d9a31257ac3", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a00a37259464cdc4c90d5b7b7d339d9a31257ac3", "committedDate": "2020-01-28T15:00:57Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a00a37259464cdc4c90d5b7b7d339d9a31257ac3", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a00a37259464cdc4c90d5b7b7d339d9a31257ac3", "committedDate": "2020-01-28T15:00:57Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "8185d25b9d864ed363064266dbe556335367881b", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8185d25b9d864ed363064266dbe556335367881b", "committedDate": "2020-01-31T14:12:04Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8185d25b9d864ed363064266dbe556335367881b", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8185d25b9d864ed363064266dbe556335367881b", "committedDate": "2020-01-31T14:12:04Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "035e9bc32e4e15c5148b6be94ae34341854f11c4", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/035e9bc32e4e15c5148b6be94ae34341854f11c4", "committedDate": "2020-01-31T17:16:59Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "035e9bc32e4e15c5148b6be94ae34341854f11c4", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/035e9bc32e4e15c5148b6be94ae34341854f11c4", "committedDate": "2020-01-31T17:16:59Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "a6f0ee93f9ba274adb17d5fc2db71a76063ab512", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a6f0ee93f9ba274adb17d5fc2db71a76063ab512", "committedDate": "2020-01-31T17:20:15Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6f0ee93f9ba274adb17d5fc2db71a76063ab512", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a6f0ee93f9ba274adb17d5fc2db71a76063ab512", "committedDate": "2020-01-31T17:20:15Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "a64c202f959b628c217cd62f01ae93310bde2fdb", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a64c202f959b628c217cd62f01ae93310bde2fdb", "committedDate": "2020-02-01T01:40:49Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a64c202f959b628c217cd62f01ae93310bde2fdb", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a64c202f959b628c217cd62f01ae93310bde2fdb", "committedDate": "2020-02-01T01:40:49Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "5a695a57c46c3c0e0e734592db88a8c444aef71e", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5a695a57c46c3c0e0e734592db88a8c444aef71e", "committedDate": "2020-02-03T14:07:34Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NTUzMjU1", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-348553255", "createdAt": "2020-01-27T10:14:50Z", "commit": {"oid": "79d3d23425ffaf712ca43f1ef2132f611b4cde95"}, "state": "DISMISSED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDoxNDo1MFrOFh9hPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyNDo0MFrOFkzEUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE1NTI2Mw==", "bodyText": "You can put it in CommentManagerImpl, putting this in the abstract makes the implementation not aware of this method.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r371155263", "createdAt": "2020-01-27T10:14:50Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -186,4 +204,71 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n         notifyEvent(session, eventType, commentParent, commentDocumentModel);\n     }\n \n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true}if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        // CommentManagerImpl doesn't support it.\n+        throw new UnsupportedOperationException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79d3d23425ffaf712ca43f1ef2132f611b4cde95"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMDU4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(principal == null) {\n          \n          \n            \n                    if (principal == null) {", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r374120582", "createdAt": "2020-02-03T14:07:38Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -133,9 +134,22 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n-        UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        String author = null;\n+        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n+            // means annotation / comment\n+            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n+        }\n+        if (StringUtils.isBlank(author)) {\n+            String[] contributors = (String[]) docModel.getPropertyValue(\"dc:contributors\");\n+            author = contributors[0];\n+        }\n+\n+        NuxeoPrincipal principal = Framework.getService(UserManager.class).getPrincipal(author);\n+        // If principal doesn't exist anymore\n+        if(principal == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a64c202f959b628c217cd62f01ae93310bde2fdb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMTExNg==", "bodyText": "No need for this since as the service is already since 11.1", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r374121116", "createdAt": "2020-02-03T14:08:37Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -77,12 +84,33 @@\n  */\n public class TreeCommentManager extends AbstractCommentManager {\n \n+    private static final Logger log = LogManager.getLogger(TreeCommentManager.class);\n+\n     protected static final String GET_COMMENT_PAGE_PROVIDER_NAME = \"GET_COMMENT_AS_EXTERNAL_ENTITY\";\n \n     protected static final String GET_COMMENTS_FOR_DOCUMENT_PAGE_PROVIDER_NAME = \"GET_COMMENTS_FOR_DOCUMENT_BY_ECM_PARENT\";\n \n     public static final String SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE = \"This service implementation does not implement deprecated API.\";\n \n+    /**\n+     * The key to the config turning on or off autosubscription.\n+     *\n+     * @since 11.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a695a57c46c3c0e0e734592db88a8c444aef71e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyNjA0NA==", "bodyText": "Could you rework the method signature  to this?\nvoid handleNotificationAutoSubscriptions(CoreSession session, DocumentModel topLevelDocModel, DocumentModel commentDocModel)\nIn order to follow same order than existing one and have a better naming for top level.", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r374126044", "createdAt": "2020-02-03T14:18:06Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -559,4 +592,73 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true} if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param user the name of the user who's comments are being counted\n+     * @return {@code true} if comments by user were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR_AND_AUTHOR, document.getId(), user);\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentDocModel,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4MjQ5NA=="}, "originalCommit": {"oid": "7cddb650defe9eddbf3e73d16377afdf68071042"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyOTc0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertEquals(0, mails.size());\n          \n          \n            \n                        assertTrue(mails.isEmpty());", "url": "https://github.com/nuxeo/nuxeo/pull/3663#discussion_r374129744", "createdAt": "2020-02-03T14:24:40Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -106,52 +100,105 @@ protected CommentManager getCommentManager() {\n     public void shouldNotifyEventWhenCreateComment() {\n         // We subscribe to the creation document to check that we will not be notified about the comment creation as\n         // document (see CommentCreationVeto), only the comment added, and the 'File' document creation\n-        captureAndVerifyCommentEventNotification(() -> {\n-            Comment createdComment = createCommentAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdComment.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Comment comment = createCommentAndAddSubscription(\"CommentAdded\");\n+            DocumentModel commentDocumentModel = session.getDocument(new IdRef(comment.getId()));\n+            DocumentModel commentParentDocumentModel = session.getDocument(\n+                    new IdRef((String) commentDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, commentDocumentModel, commentParentDocumentModel,\n+                    commentedDocumentModel);\n+\n+            List<MailMessage> mails = emailsResult.getMails();\n+            assertEquals(1, mails.size());\n+            String expectedMailContent = getExpectedMailContent(commentDocumentModel, commentedDocumentModel,\n+                    expectedEvent);\n+            assertEquals(expectedMailContent, getMailContent(mails.get(0)));\n+        }\n     }\n \n     @Test\n     public void shouldNotifyEventWhenUpdateComment() {\n         // We subscribe to the update document to check that we will not be notified about the comment updated as\n         // document (see CommentModificationVeto), only the comment updated.\n-        Comment createdComment = createCommentAndAddSubscription(\"CommentUpdated\", \"Modification\");\n+        Comment comment = createCommentAndAddSubscription(\"CommentUpdated\");\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_UPDATED)) {\n+            comment.setText(\"I update the comment\");\n+            commentManager.updateComment(session, comment.getId(), comment);\n+            DocumentModel commentDocumentModel = session.getDocument(new IdRef(comment.getId()));\n+            DocumentModel commentParentDocumentModel = session.getDocument(\n+                    new IdRef((String) commentDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, commentDocumentModel, commentParentDocumentModel,\n+                    commentedDocumentModel);\n \n-        captureAndVerifyCommentEventNotification(() -> {\n-            createdComment.setText(\"I update the message\");\n-            commentManager.updateComment(session, createdComment.getId(), createdComment);\n-            return session.getDocument(new IdRef(createdComment.getId()));\n-        }, COMMENT_UPDATED, DOCUMENT_UPDATED);\n+            List<MailMessage> mails = emailsResult.getMails();\n+            assertEquals(1, mails.size());\n+            String expectedMailContent = getExpectedMailContent(commentDocumentModel, commentedDocumentModel,\n+                    expectedEvent);\n+            assertEquals(expectedMailContent, getMailContent(mails.get(0)));\n+        }\n     }\n \n     @Test\n     public void shouldNotifyEventWhenRemoveComment() {\n-        Comment createdComment = createCommentAndAddSubscription(\"CommentRemoved\");\n-        DocumentModel commentDocModel = session.getDocument(new IdRef(createdComment.getId()));\n+        Comment comment = createCommentAndAddSubscription(\"CommentRemoved\");\n+        DocumentModel commentDocModel = session.getDocument(new IdRef(comment.getId()));\n         commentDocModel.detach(true);\n \n-        captureAndVerifyCommentEventNotification(() -> {\n-            commentManager.deleteComment(session, createdComment.getId());\n-            return commentDocModel;\n-        }, COMMENT_REMOVED, DOCUMENT_REMOVED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_REMOVED)) {\n+            commentManager.deleteComment(session, comment.getId());\n+            DocumentModel commentParentDocumentModel = session.getDocument(\n+                    new IdRef((String) commentDocModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, commentDocModel, commentParentDocumentModel,\n+                    commentedDocumentModel);\n+\n+            List<MailMessage> mails = emailsResult.getMails();\n+            // Only true because TreeCommentManager overrides this method\n+            assertEquals(0, mails.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a695a57c46c3c0e0e734592db88a8c444aef71e"}, "originalPosition": 121}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a695a57c46c3c0e0e734592db88a8c444aef71e", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5a695a57c46c3c0e0e734592db88a8c444aef71e", "committedDate": "2020-02-03T14:07:34Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "26b2f5d0e51cdb11b487c0787324888eed505167", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/26b2f5d0e51cdb11b487c0787324888eed505167", "committedDate": "2020-02-03T16:52:22Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26b2f5d0e51cdb11b487c0787324888eed505167", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/26b2f5d0e51cdb11b487c0787324888eed505167", "committedDate": "2020-02-03T16:52:22Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "89c2a10ee4cd38126f2ee1214d8f69c4e7a3f664", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/89c2a10ee4cd38126f2ee1214d8f69c4e7a3f664", "committedDate": "2020-02-03T16:53:48Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89c2a10ee4cd38126f2ee1214d8f69c4e7a3f664", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/89c2a10ee4cd38126f2ee1214d8f69c4e7a3f664", "committedDate": "2020-02-03T16:53:48Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "618b46c4a283103bbcc83375269c07d11931f0f5", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/618b46c4a283103bbcc83375269c07d11931f0f5", "committedDate": "2020-02-03T17:06:40Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "618b46c4a283103bbcc83375269c07d11931f0f5", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/618b46c4a283103bbcc83375269c07d11931f0f5", "committedDate": "2020-02-03T17:06:40Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "9bc9bf7087e3fcdc1134579277be435c2a084614", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9bc9bf7087e3fcdc1134579277be435c2a084614", "committedDate": "2020-02-03T17:19:27Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bc9bf7087e3fcdc1134579277be435c2a084614", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9bc9bf7087e3fcdc1134579277be435c2a084614", "committedDate": "2020-02-03T17:19:27Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "a2a3c4fb2f37103db40c6fc028be8dd2e14069ea", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a2a3c4fb2f37103db40c6fc028be8dd2e14069ea", "committedDate": "2020-02-04T08:25:45Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2a3c4fb2f37103db40c6fc028be8dd2e14069ea", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a2a3c4fb2f37103db40c6fc028be8dd2e14069ea", "committedDate": "2020-02-04T08:25:45Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "f109b64e51e33fb823acbf09710256469a91eaf1", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f109b64e51e33fb823acbf09710256469a91eaf1", "committedDate": "2020-02-04T08:37:10Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f109b64e51e33fb823acbf09710256469a91eaf1", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/f109b64e51e33fb823acbf09710256469a91eaf1", "committedDate": "2020-02-04T08:37:10Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "5f294481489586a92a8c2708f513e4e707a5792b", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5f294481489586a92a8c2708f513e4e707a5792b", "committedDate": "2020-02-04T08:37:51Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f294481489586a92a8c2708f513e4e707a5792b", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5f294481489586a92a8c2708f513e4e707a5792b", "committedDate": "2020-02-04T08:37:51Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "e335b00dfd074f019759f37f2e25f72f11bfc4c5", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e335b00dfd074f019759f37f2e25f72f11bfc4c5", "committedDate": "2020-02-04T08:38:59Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e335b00dfd074f019759f37f2e25f72f11bfc4c5", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e335b00dfd074f019759f37f2e25f72f11bfc4c5", "committedDate": "2020-02-04T08:38:59Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "2b0c4f3b2820336a00b18a888576cd6944d12001", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2b0c4f3b2820336a00b18a888576cd6944d12001", "committedDate": "2020-02-04T10:47:17Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTk0OTc3", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-353594977", "createdAt": "2020-02-05T10:05:43Z", "commit": {"oid": "2b0c4f3b2820336a00b18a888576cd6944d12001"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjA4NjQ1", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-353608645", "createdAt": "2020-02-05T10:26:33Z", "commit": {"oid": "2b0c4f3b2820336a00b18a888576cd6944d12001"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "694bf73295e49700ebb124bcab1369262403d60b", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/694bf73295e49700ebb124bcab1369262403d60b", "committedDate": "2020-02-13T09:59:27Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "0a911c2dd71ec2da5a7d00ca951d9b12ab3c96ab", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0a911c2dd71ec2da5a7d00ca951d9b12ab3c96ab", "committedDate": "2020-02-13T10:07:41Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4ODMwMjgz", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-358830283", "createdAt": "2020-02-14T10:02:36Z", "commit": {"oid": "0a911c2dd71ec2da5a7d00ca951d9b12ab3c96ab"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "261beeda41bd07a2b7394969361aef6e4e716586", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/261beeda41bd07a2b7394969361aef6e4e716586", "committedDate": "2020-02-21T18:05:12Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a911c2dd71ec2da5a7d00ca951d9b12ab3c96ab", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0a911c2dd71ec2da5a7d00ca951d9b12ab3c96ab", "committedDate": "2020-02-13T10:07:41Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "261beeda41bd07a2b7394969361aef6e4e716586", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/261beeda41bd07a2b7394969361aef6e4e716586", "committedDate": "2020-02-21T18:05:12Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjUzNjUy", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-363253652", "createdAt": "2020-02-24T09:31:26Z", "commit": {"oid": "261beeda41bd07a2b7394969361aef6e4e716586"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NTQ3ODcx", "url": "https://github.com/nuxeo/nuxeo/pull/3663#pullrequestreview-348547871", "createdAt": "2020-01-27T10:05:39Z", "commit": {"oid": "79d3d23425ffaf712ca43f1ef2132f611b4cde95"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4876, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}