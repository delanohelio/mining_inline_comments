{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzOTAyMjUx", "number": 4479, "title": "NXP-29585: Add Bulk command queryLimit", "bodyText": "A default limit can be set on action and overriden when building command,\na flag in the status indicate if the limit has been reached for a command.", "createdAt": "2020-11-19T12:07:47Z", "url": "https://github.com/nuxeo/nuxeo/pull/4479", "merged": true, "mergeCommit": {"oid": "ef51c8f00ca9efefc48624c45ced36bc3da26f14"}, "closed": true, "closedAt": "2020-11-27T14:42:09Z", "author": {"login": "bdelbosc"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeT80BgFqTUzNTI2MTY2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgUd6RgFqTUzOTM5NjgxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjYxNjY3", "url": "https://github.com/nuxeo/nuxeo/pull/4479#pullrequestreview-535261667", "createdAt": "2020-11-20T09:29:36Z", "commit": {"oid": "22cea73e2c3785e3fd039d0a8b7ddea690bcbeca"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22cea73e2c3785e3fd039d0a8b7ddea690bcbeca", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/22cea73e2c3785e3fd039d0a8b7ddea690bcbeca", "committedDate": "2020-11-19T17:50:32Z", "message": "NXP-29585: Bump default partitions for async processing"}, "afterCommit": {"oid": "7b1c824864cbae7a83ff1dacc4be227f00e4f37a", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7b1c824864cbae7a83ff1dacc4be227f00e4f37a", "committedDate": "2020-11-20T15:54:55Z", "message": "NXP-29677: Bump default partitions for async processing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MzQ5NjIz", "url": "https://github.com/nuxeo/nuxeo/pull/4479#pullrequestreview-536349623", "createdAt": "2020-11-23T10:39:16Z", "commit": {"oid": "7b1c824864cbae7a83ff1dacc4be227f00e4f37a"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Nzc0NDc3", "url": "https://github.com/nuxeo/nuxeo/pull/4479#pullrequestreview-538774477", "createdAt": "2020-11-25T18:56:02Z", "commit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1NjowMlrOH6AS-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToxMDowMVrOH6Ar_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4NDMxNQ==", "bodyText": "Can you use <= 0 to be stylistically consistent with other checks of this limit?", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530584315", "createdAt": "2020-11-25T18:56:02Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java", "diffHunk": "@@ -199,6 +218,14 @@ protected void processRecord(ComputationContext context, Record record) {\n         context.askForCheckpoint();\n     }\n \n+    private long getQueryLimit(BulkCommand command) {\n+        Long limit = command.getQueryLimit();\n+        if (limit == null || limit < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4NDUyMw==", "bodyText": "Maybe log the value in the exception message too?", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530584523", "createdAt": "2020-11-25T18:56:31Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkCommand.java", "diffHunk": "@@ -254,6 +274,29 @@ public Builder repository(String name) {\n             return this;\n         }\n \n+        /**\n+         * Limits the query result.\n+         *\n+         * @since 11.4\n+         */\n+        public Builder queryLimit(long limit) {\n+            if (limit <= 0) {\n+                throw new IllegalArgumentException(\"Limit must be > 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4ODk3OA==", "bodyText": "It's not clear to me what his means when it's true. Is it that there was a limit passed when doing the query? Or that the query is incomplete in its results returned.\nA useful flag would be more about \"limitReached\", which I would call \"resultsTruncated\" or \"resultsIncomplete\", or \"moreResults\".", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530588978", "createdAt": "2020-11-25T19:06:02Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/message/BulkStatus.java", "diffHunk": "@@ -111,6 +112,9 @@\n     @Nullable\n     protected Long processingDurationMillis;\n \n+    @AvroDefault(\"false\")\n+    protected boolean limitedQuery;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4OTQ5NQ==", "bodyText": "What about if we get exactly to the queryLimit value? Then we flag limitReached=true but there's no additional documents. The use of this for paging is not clear.", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530589495", "createdAt": "2020-11-25T19:07:11Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/computation/BulkScrollerComputation.java", "diffHunk": "@@ -169,21 +176,33 @@ protected void processRecord(ComputationContext context, Record record) {\n                         return;\n                     }\n                     List<String> docIds = scroll.next();\n-                    documentIds.addAll(docIds);\n+                    int scrollCount = docIds.size();\n+                    if (documentCount + scrollCount < queryLimit) {\n+                        documentIds.addAll(docIds);\n+                    } else {\n+                        scrollCount = Math.toIntExact(queryLimit - documentCount);\n+                        documentIds.addAll(docIds.subList(0, scrollCount));\n+                        limitReached = true;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDcxOA==", "bodyText": "Please add tests for the behavior where the .queryLimit() is wordCount-1, exactly wordCount, and wordCount+1 to test edge cases.", "url": "https://github.com/nuxeo/nuxeo/pull/4479#discussion_r530590718", "createdAt": "2020-11-25T19:10:01Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-bulk/src/test/java/org/nuxeo/ecm/core/bulk/action/TestWordCountAction.java", "diffHunk": "@@ -70,9 +71,57 @@ public void testWordCount() throws Exception {\n         assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n         BulkStatus status = bulkService.getStatus(commandId);\n         assertEquals(COMPLETED, status.getState());\n+        assertFalse(status.isLimitedQuery());\n         assertEquals(wordCount, status.getResult().get(\"wordCount\"));\n     }\n \n+    @Test\n+    public void testWordCountWithLimitedQery() throws Exception {\n+        int wordCount = 2732;\n+        String myFile = createFile(wordCount);\n+        // Use an action limited by default to the first 100 first lines\n+        BulkCommand command = new BulkCommand.Builder(\"testWordCountLimited\", myFile, \"system\")\n+                .useGenericScroller()\n+                .build();\n+        String commandId = bulkService.submit(command);\n+        assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n+        BulkStatus status = bulkService.getStatus(commandId);\n+        assertEquals(COMPLETED, status.getState());\n+        assertTrue(status.isLimitedQuery());\n+        int result100 = (Integer) status.getResult().get(\"wordCount\");\n+        assertTrue(result100 > 0);\n+        // the number of word for the first 100 lines is inferior to the total number of words in the file\n+        assertTrue(wordCount > result100);\n+\n+        // Now set an explicit limit to a lower number of lines\n+        command = new BulkCommand.Builder(\"testWordCountLimited\",  myFile, \"system\")\n+                .useGenericScroller()\n+                .queryLimit(10)\n+                .build();\n+        commandId = bulkService.submit(command);\n+        assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n+        status = bulkService.getStatus(commandId);\n+        assertTrue(status.isLimitedQuery());\n+        assertEquals(COMPLETED, status.getState());\n+        int result10 = (Integer) status.getResult().get(\"wordCount\");\n+        assertTrue(result10 > 0);\n+        // there is less words in 10 lines than 100\n+        assertTrue(result100 > result10);\n+\n+        // Now request explicit unlimited number of lines\n+        command = new BulkCommand.Builder(\"testWordCountLimited\",  myFile, \"system\")\n+                .useGenericScroller()\n+                .queryUnlimited()\n+                .build();\n+        commandId = bulkService.submit(command);\n+        assertTrue(bulkService.await(commandId, Duration.ofSeconds(20)));\n+        status = bulkService.getStatus(commandId);\n+        assertEquals(COMPLETED, status.getState());\n+        assertFalse(status.isLimitedQuery());\n+        long resultUnlimited = (Integer) status.getResult().get(\"wordCount\");\n+        assertEquals(wordCount, resultUnlimited);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9afea36201f533daf40e2cf9ce820a61671c321c"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "571c84b8056007ca70b2d925a0738d1dfcb7c653", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/571c84b8056007ca70b2d925a0738d1dfcb7c653", "committedDate": "2020-11-26T13:31:13Z", "message": "NXP-29585: Add Bulk command queryLimit\n\nA default limit can be set on action and overriden when building command,\na flag in the status indicate if the limit has been reached for a command."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5500aa62f1852ad8e04f10493152bdf578174257", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/5500aa62f1852ad8e04f10493152bdf578174257", "committedDate": "2020-11-26T13:31:13Z", "message": "NXP-29585: Limit csvExport to 100k documents by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5f5f3088925369e494de4c6afa975841f98101b", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b5f5f3088925369e494de4c6afa975841f98101b", "committedDate": "2020-11-26T13:31:13Z", "message": "NXP-29677: Bump default partitions for async processing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b1c824864cbae7a83ff1dacc4be227f00e4f37a", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7b1c824864cbae7a83ff1dacc4be227f00e4f37a", "committedDate": "2020-11-20T15:54:55Z", "message": "NXP-29677: Bump default partitions for async processing"}, "afterCommit": {"oid": "b5f5f3088925369e494de4c6afa975841f98101b", "author": {"user": {"login": "bdelbosc", "name": "Benoit Delbosc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b5f5f3088925369e494de4c6afa975841f98101b", "committedDate": "2020-11-26T13:31:13Z", "message": "NXP-29677: Bump default partitions for async processing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MzIwMDE1", "url": "https://github.com/nuxeo/nuxeo/pull/4479#pullrequestreview-539320015", "createdAt": "2020-11-26T13:35:14Z", "commit": {"oid": "b5f5f3088925369e494de4c6afa975841f98101b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5Mzk2ODEz", "url": "https://github.com/nuxeo/nuxeo/pull/4479#pullrequestreview-539396813", "createdAt": "2020-11-26T15:13:35Z", "commit": {"oid": "b5f5f3088925369e494de4c6afa975841f98101b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4898, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}