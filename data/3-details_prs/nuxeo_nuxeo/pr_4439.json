{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NTE1Mjg5", "number": 4439, "title": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will \u2026", "bodyText": "Fix for Jira Issue : https://jira.nuxeo.com/browse/NXP-29450", "createdAt": "2020-11-04T16:56:19Z", "url": "https://github.com/nuxeo/nuxeo/pull/4439", "merged": true, "mergeCommit": {"oid": "8f1a2bf7f17b96bb31c4aa88da7e66d08d812f33"}, "closed": true, "closedAt": "2020-11-06T10:55:03Z", "author": {"login": "charlesboidot"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZiLQ2gFqTUyNDI0NjM0MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZzKd6AFqTUyNDk2NTg3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MjQ2MzQw", "url": "https://github.com/nuxeo/nuxeo/pull/4439#pullrequestreview-524246340", "createdAt": "2020-11-05T13:14:24Z", "commit": {"oid": "4bc5d8df68edf1a1d3e8ad61dfd20938882af72a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzoxNDoyNVrOHuCryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzoxNDoyNVrOHuCryg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA0MDUyMg==", "bodyText": "newVersionFolder never used, calling checkIn without reading the result is enough for this test", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518040522", "createdAt": "2020-11-05T13:14:25Z", "author": {"login": "tmartins"}, "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class})\n+public class CollectionCreateFolderVersionTest {\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    CoreSession session;\n+\n+\n+    private static final String TEST_FOLDER = \"testFolder\";\n+\n+    private static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 11;\n+\n+    @Test\n+    public void testCreateFolderVersionContainingACollection() throws Exception {\n+        List<DocumentModel> files = new ArrayList<>();\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+        DocumentModel folder = session.createDocumentModel(testWorkspace.getPathAsString(), TEST_FOLDER,\n+                \"Folder\");\n+        folder = session.createDocument(folder);\n+\n+        for (int i = 1; i <= NB_TEST_FILES; i++) {\n+            DocumentModel testFile = session.createDocumentModel(folder.getPath().toString(), TEST_FILE_NAME + i,\n+                    \"File\");\n+            testFile = session.createDocument(testFile);\n+            files.add(testFile);\n+        }\n+\n+        DocumentModel collectionInFolder = session.createDocumentModel(folder.getPathAsString(),\n+                TEST_COLLECTION_IN_FOLDER, CollectionConstants.COLLECTION_TYPE);\n+        collectionInFolder = session.createDocument(collectionInFolder);\n+        session.save();\n+        collectionManager.addToCollection(collectionInFolder, files, session);\n+        Collection collectionAdapter = collectionInFolder.getAdapter(Collection.class);\n+\n+        //Check all children files are in the collection\n+        assertEquals(NB_TEST_FILES,collectionAdapter.getCollectedDocumentIds().size());\n+\n+        // Create a new version of the folder\n+        DocumentModel newVersionFolder = session.getDocument(session.checkIn(folder.getRef(), VersioningOption.MAJOR, \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc5d8df68edf1a1d3e8ad61dfd20938882af72a"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MjY1NzM5", "url": "https://github.com/nuxeo/nuxeo/pull/4439#pullrequestreview-524265739", "createdAt": "2020-11-05T13:37:15Z", "commit": {"oid": "4bc5d8df68edf1a1d3e8ad61dfd20938882af72a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozNzoxNVrOHuDl_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozNzoxNVrOHuDl_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NTQyMQ==", "bodyText": "remove this line", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518055421", "createdAt": "2020-11-05T13:37:15Z", "author": {"login": "tmartins"}, "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class})\n+public class CollectionCreateFolderVersionTest {\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    CoreSession session;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc5d8df68edf1a1d3e8ad61dfd20938882af72a"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4bc5d8df68edf1a1d3e8ad61dfd20938882af72a", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/4bc5d8df68edf1a1d3e8ad61dfd20938882af72a", "committedDate": "2020-11-04T16:44:48Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}, "afterCommit": {"oid": "85f65a36f6c00077d41d983bba8a7107afa2c836", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/85f65a36f6c00077d41d983bba8a7107afa2c836", "committedDate": "2020-11-05T14:08:52Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzI1Njc0", "url": "https://github.com/nuxeo/nuxeo/pull/4439#pullrequestreview-524325674", "createdAt": "2020-11-05T14:38:40Z", "commit": {"oid": "85f65a36f6c00077d41d983bba8a7107afa2c836"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDozODo0MFrOHuGT_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDozOTowNFrOHuGVLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA5OTk2Ng==", "bodyText": "Can you add protected keyword to fields not having visibility?", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518099966", "createdAt": "2020-11-05T14:38:40Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    @Inject\n+    CollectionManager collectionManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85f65a36f6c00077d41d983bba8a7107afa2c836"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEwMDI2OA==", "bodyText": "Static fields should be first, everything should be protected.", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518100268", "createdAt": "2020-11-05T14:39:04Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    CoreSession session;\n+\n+    private static final String TEST_FOLDER = \"testFolder\";\n+\n+    private static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85f65a36f6c00077d41d983bba8a7107afa2c836"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzI4MDAy", "url": "https://github.com/nuxeo/nuxeo/pull/4439#pullrequestreview-524328002", "createdAt": "2020-11-05T14:40:55Z", "commit": {"oid": "85f65a36f6c00077d41d983bba8a7107afa2c836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDo0MDo1NVrOHuGawQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDo0MDo1NVrOHuGawQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEwMTY5Nw==", "bodyText": "You should use the equals method, = in java checks references.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (child.getId() != collectionInFolder.getId()) {\n          \n          \n            \n                        if (child.getId().equals(collectionInFolder.getId())) {", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518101697", "createdAt": "2020-11-05T14:40:55Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    @Inject\n+    CollectionManager collectionManager;\n+\n+    @Inject\n+    CoreSession session;\n+\n+    private static final String TEST_FOLDER = \"testFolder\";\n+\n+    private static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 3;\n+\n+    @Test\n+    public void testCreateFolderVersionContainingACollection() throws Exception {\n+        List<DocumentModel> files = new ArrayList<>();\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+        DocumentModel folder = session.createDocumentModel(testWorkspace.getPathAsString(), TEST_FOLDER, \"Folder\");\n+        folder = session.createDocument(folder);\n+\n+        for (int i = 1; i <= NB_TEST_FILES; i++) {\n+            DocumentModel testFile = session.createDocumentModel(folder.getPath().toString(), TEST_FILE_NAME + i,\n+                    \"File\");\n+            testFile = session.createDocument(testFile);\n+            files.add(testFile);\n+        }\n+\n+        DocumentModel collectionInFolder = session.createDocumentModel(folder.getPathAsString(),\n+                TEST_COLLECTION_IN_FOLDER, CollectionConstants.COLLECTION_TYPE);\n+        collectionInFolder = session.createDocument(collectionInFolder);\n+        session.save();\n+        collectionManager.addToCollection(collectionInFolder, files, session);\n+        Collection collectionAdapter = collectionInFolder.getAdapter(Collection.class);\n+\n+        // Check all children files are in the collection\n+        assertEquals(NB_TEST_FILES, collectionAdapter.getCollectedDocumentIds().size());\n+\n+        // Create a new version of the folder\n+        session.checkIn(folder.getRef(), VersioningOption.MAJOR, \"\");\n+        assertEquals(1, session.getVersions(folder.getRef()).size());\n+\n+        // Test if children documents are all still collected\n+        DocumentModelIterator it = session.getChildrenIterator(folder.getRef());\n+        int size = 0;\n+        while (it.hasNext()) {\n+            DocumentModel child = it.next();\n+            if (child.getId() != collectionInFolder.getId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85f65a36f6c00077d41d983bba8a7107afa2c836"}, "originalPosition": 96}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85f65a36f6c00077d41d983bba8a7107afa2c836", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/85f65a36f6c00077d41d983bba8a7107afa2c836", "committedDate": "2020-11-05T14:08:52Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}, "afterCommit": {"oid": "efc3c12cec67aeded0c807594fcdd3316086e6be", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/efc3c12cec67aeded0c807594fcdd3316086e6be", "committedDate": "2020-11-05T14:49:55Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzI0Mzky", "url": "https://github.com/nuxeo/nuxeo/pull/4439#pullrequestreview-524324392", "createdAt": "2020-11-05T14:37:26Z", "commit": {"oid": "85f65a36f6c00077d41d983bba8a7107afa2c836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTozNTo1OVrOHuJCxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTozNTo1OVrOHuJCxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE0NDcxMQ==", "bodyText": "Could it be simplified to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DocumentModelIterator it = session.getChildrenIterator(folder.getRef());\n          \n          \n            \n                    int size = 0;\n          \n          \n            \n                    while (it.hasNext()) {\n          \n          \n            \n                        DocumentModel child = it.next();\n          \n          \n            \n                        if (child.getId().equals(collectionInFolder.getId())) {\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                        assertTrue(collectionManager.isCollected(child));\n          \n          \n            \n                        size++;\n          \n          \n            \n                    }\n          \n          \n            \n                    List<DocumentModel>children = session.getChildren(folder.getRef());\n          \n          \n            \n                    int size = 0;\n          \n          \n            \n                    for (DocumentModel child : children) {\n          \n          \n            \n                        if (!child.getId().equals(collectionInFolder.getId())) {\n          \n          \n            \n                                assertTrue(collectionManager.isCollected(child));\n          \n          \n            \n                                size++;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518144711", "createdAt": "2020-11-05T15:35:59Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    protected static final String TEST_FOLDER = \"testFolder\";\n+\n+    protected static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 3;\n+\n+    @Inject\n+    protected CollectionManager collectionManager;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Test\n+    public void testCreateFolderVersionContainingACollection() throws Exception {\n+        List<DocumentModel> files = new ArrayList<>();\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+        DocumentModel folder = session.createDocumentModel(testWorkspace.getPathAsString(), TEST_FOLDER, \"Folder\");\n+        folder = session.createDocument(folder);\n+\n+        for (int i = 1; i <= NB_TEST_FILES; i++) {\n+            DocumentModel testFile = session.createDocumentModel(folder.getPath().toString(), TEST_FILE_NAME + i,\n+                    \"File\");\n+            testFile = session.createDocument(testFile);\n+            files.add(testFile);\n+        }\n+\n+        DocumentModel collectionInFolder = session.createDocumentModel(folder.getPathAsString(),\n+                TEST_COLLECTION_IN_FOLDER, CollectionConstants.COLLECTION_TYPE);\n+        collectionInFolder = session.createDocument(collectionInFolder);\n+        session.save();\n+        collectionManager.addToCollection(collectionInFolder, files, session);\n+        Collection collectionAdapter = collectionInFolder.getAdapter(Collection.class);\n+\n+        // Check all children files are in the collection\n+        assertEquals(NB_TEST_FILES, collectionAdapter.getCollectedDocumentIds().size());\n+\n+        // Create a new version of the folder\n+        session.checkIn(folder.getRef(), VersioningOption.MAJOR, \"\");\n+        assertEquals(1, session.getVersions(folder.getRef()).size());\n+\n+        // Test if children documents are all still collected\n+        DocumentModelIterator it = session.getChildrenIterator(folder.getRef());\n+        int size = 0;\n+        while (it.hasNext()) {\n+            DocumentModel child = it.next();\n+            if (child.getId().equals(collectionInFolder.getId())) {\n+                continue;\n+            }\n+            assertTrue(collectionManager.isCollected(child));\n+            size++;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efc3c12cec67aeded0c807594fcdd3316086e6be"}, "originalPosition": 101}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "efc3c12cec67aeded0c807594fcdd3316086e6be", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/efc3c12cec67aeded0c807594fcdd3316086e6be", "committedDate": "2020-11-05T14:49:55Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}, "afterCommit": {"oid": "b89a215ebec82c188bf45f993922f8bb70bfcc33", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b89a215ebec82c188bf45f993922f8bb70bfcc33", "committedDate": "2020-11-05T15:44:01Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0Mzk3ODE1", "url": "https://github.com/nuxeo/nuxeo/pull/4439#pullrequestreview-524397815", "createdAt": "2020-11-05T15:46:01Z", "commit": {"oid": "b89a215ebec82c188bf45f993922f8bb70bfcc33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo0NjowMVrOHuJliA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo0NjowMVrOHuJliA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1MzYwOA==", "bodyText": "Could you format the code?", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518153608", "createdAt": "2020-11-05T15:46:01Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    protected static final String TEST_FOLDER = \"testFolder\";\n+\n+    protected static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 3;\n+\n+    @Inject\n+    protected CollectionManager collectionManager;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Test\n+    public void testCreateFolderVersionContainingACollection() throws Exception {\n+        List<DocumentModel> files = new ArrayList<>();\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+        DocumentModel folder = session.createDocumentModel(testWorkspace.getPathAsString(), TEST_FOLDER, \"Folder\");\n+        folder = session.createDocument(folder);\n+\n+        for (int i = 1; i <= NB_TEST_FILES; i++) {\n+            DocumentModel testFile = session.createDocumentModel(folder.getPath().toString(), TEST_FILE_NAME + i,\n+                    \"File\");\n+            testFile = session.createDocument(testFile);\n+            files.add(testFile);\n+        }\n+\n+        DocumentModel collectionInFolder = session.createDocumentModel(folder.getPathAsString(),\n+                TEST_COLLECTION_IN_FOLDER, CollectionConstants.COLLECTION_TYPE);\n+        collectionInFolder = session.createDocument(collectionInFolder);\n+        session.save();\n+        collectionManager.addToCollection(collectionInFolder, files, session);\n+        Collection collectionAdapter = collectionInFolder.getAdapter(Collection.class);\n+\n+        // Check all children files are in the collection\n+        assertEquals(NB_TEST_FILES, collectionAdapter.getCollectedDocumentIds().size());\n+\n+        // Create a new version of the folder\n+        session.checkIn(folder.getRef(), VersioningOption.MAJOR, \"\");\n+        assertEquals(1, session.getVersions(folder.getRef()).size());\n+\n+        // Test if children documents are all still collected\n+        List<DocumentModel>children = session.getChildren(folder.getRef());\n+        int size = 0;\n+        for (DocumentModel child : children) {\n+            if (!child.getId().equals(collectionInFolder.getId())) {\n+                    assertTrue(collectionManager.isCollected(child));\n+                    size++;\n+            }\n+        }\n+        assertEquals(NB_TEST_FILES, size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b89a215ebec82c188bf45f993922f8bb70bfcc33"}, "originalPosition": 100}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b89a215ebec82c188bf45f993922f8bb70bfcc33", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/b89a215ebec82c188bf45f993922f8bb70bfcc33", "committedDate": "2020-11-05T15:44:01Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}, "afterCommit": {"oid": "c6c57e3ac2db29bd84d63d0c86804051f551f10b", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c6c57e3ac2db29bd84d63d0c86804051f551f10b", "committedDate": "2020-11-05T15:47:59Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDA0NzQx", "url": "https://github.com/nuxeo/nuxeo/pull/4439#pullrequestreview-524404741", "createdAt": "2020-11-05T15:52:49Z", "commit": {"oid": "c6c57e3ac2db29bd84d63d0c86804051f551f10b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo1Mjo0OVrOHuJ5vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo1Mjo0OVrOHuJ5vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1ODc4Mg==", "bodyText": "Missed format, as it is a new class you can run the formatter on the full file.", "url": "https://github.com/nuxeo/nuxeo/pull/4439#discussion_r518158782", "createdAt": "2020-11-05T15:52:49Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-collections/src/test/java/org/nuxeo/ecm/collections/core/test/CollectionCreateFolderVersionTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Charles Boidot\n+ */\n+\n+package org.nuxeo.ecm.collections.core.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.collections.api.CollectionConstants;\n+import org.nuxeo.ecm.collections.api.CollectionManager;\n+import org.nuxeo.ecm.collections.core.adapter.Collection;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelIterator;\n+import org.nuxeo.ecm.core.api.VersioningOption;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ CoreFeature.class, CollectionFeature.class })\n+public class CollectionCreateFolderVersionTest {\n+\n+    protected static final String TEST_FOLDER = \"testFolder\";\n+\n+    protected static final String TEST_COLLECTION_IN_FOLDER = \"testCollectionInFolder\";\n+\n+    protected static final String TEST_FILE_NAME = \"testFile\";\n+\n+    protected static final int NB_TEST_FILES = 3;\n+\n+    @Inject\n+    protected CollectionManager collectionManager;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Test\n+    public void testCreateFolderVersionContainingACollection() throws Exception {\n+        List<DocumentModel> files = new ArrayList<>();\n+        DocumentModel testWorkspace = session.createDocumentModel(\"/default-domain/workspaces\", \"testWorkspace\",\n+                \"Workspace\");\n+        testWorkspace = session.createDocument(testWorkspace);\n+        DocumentModel folder = session.createDocumentModel(testWorkspace.getPathAsString(), TEST_FOLDER, \"Folder\");\n+        folder = session.createDocument(folder);\n+\n+        for (int i = 1; i <= NB_TEST_FILES; i++) {\n+            DocumentModel testFile = session.createDocumentModel(folder.getPath().toString(), TEST_FILE_NAME + i,\n+                    \"File\");\n+            testFile = session.createDocument(testFile);\n+            files.add(testFile);\n+        }\n+\n+        DocumentModel collectionInFolder = session.createDocumentModel(folder.getPathAsString(),\n+                TEST_COLLECTION_IN_FOLDER, CollectionConstants.COLLECTION_TYPE);\n+        collectionInFolder = session.createDocument(collectionInFolder);\n+        session.save();\n+        collectionManager.addToCollection(collectionInFolder, files, session);\n+        Collection collectionAdapter = collectionInFolder.getAdapter(Collection.class);\n+\n+        // Check all children files are in the collection\n+        assertEquals(NB_TEST_FILES, collectionAdapter.getCollectedDocumentIds().size());\n+\n+        // Create a new version of the folder\n+        session.checkIn(folder.getRef(), VersioningOption.MAJOR, \"\");\n+        assertEquals(1, session.getVersions(folder.getRef()).size());\n+\n+        // Test if children documents are all still collected\n+        List<DocumentModel>children = session.getChildren(folder.getRef());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c57e3ac2db29bd84d63d0c86804051f551f10b"}, "originalPosition": 92}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6c57e3ac2db29bd84d63d0c86804051f551f10b", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/c6c57e3ac2db29bd84d63d0c86804051f551f10b", "committedDate": "2020-11-05T15:47:59Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}, "afterCommit": {"oid": "40d0f2fa41c1fb51852b9dc2d53e5f5b59188b96", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/40d0f2fa41c1fb51852b9dc2d53e5f5b59188b96", "committedDate": "2020-11-05T15:54:42Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDMxNzEy", "url": "https://github.com/nuxeo/nuxeo/pull/4439#pullrequestreview-524431712", "createdAt": "2020-11-05T16:19:36Z", "commit": {"oid": "40d0f2fa41c1fb51852b9dc2d53e5f5b59188b96"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDQ1MzQ2", "url": "https://github.com/nuxeo/nuxeo/pull/4439#pullrequestreview-524445346", "createdAt": "2020-11-05T16:33:23Z", "commit": {"oid": "40d0f2fa41c1fb51852b9dc2d53e5f5b59188b96"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "053eff98f5b65b9516443e955bab8e12703fa7e3", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/053eff98f5b65b9516443e955bab8e12703fa7e3", "committedDate": "2020-11-05T16:53:48Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40d0f2fa41c1fb51852b9dc2d53e5f5b59188b96", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/40d0f2fa41c1fb51852b9dc2d53e5f5b59188b96", "committedDate": "2020-11-05T15:54:42Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}, "afterCommit": {"oid": "053eff98f5b65b9516443e955bab8e12703fa7e3", "author": {"user": {"login": "charlesboidot", "name": "Charles Boidot"}}, "url": "https://github.com/nuxeo/nuxeo/commit/053eff98f5b65b9516443e955bab8e12703fa7e3", "committedDate": "2020-11-05T16:53:48Z", "message": "NXP-29450: Fix the conditions when DuplicatedCollectionListener will process the documents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDcwNDE4", "url": "https://github.com/nuxeo/nuxeo/pull/4439#pullrequestreview-524470418", "createdAt": "2020-11-05T16:59:11Z", "commit": {"oid": "053eff98f5b65b9516443e955bab8e12703fa7e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0OTY1ODc2", "url": "https://github.com/nuxeo/nuxeo/pull/4439#pullrequestreview-524965876", "createdAt": "2020-11-06T09:01:56Z", "commit": {"oid": "053eff98f5b65b9516443e955bab8e12703fa7e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4950, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}