{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzIzMTkx", "number": 3885, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxOTozMFrODuQ0zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDo1NDo1NFrODuU96w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODM2NzQ5OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSRepositoryDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxOTozMFrOGAKVuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxOTozMFrOGAKVuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMjU4NA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402822584", "createdAt": "2020-04-03T08:19:30Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSRepositoryDescriptor.java", "diffHunk": "@@ -70,6 +70,11 @@ public void setFulltextDisabled(boolean disabled) {\n         fulltextDescriptor.setFulltextDisabled(disabled);\n     }\n \n+    @XNode(\"fulltext@storedInBlob\")\n+    public void setFulltextStoredInBlob(boolean storedInBlob) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODM4MTA0OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoyMTozNFrOGAKc2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoyMTozNFrOGAKc2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyNDQxMA==", "bodyText": "What about:\nif (fulltextStoredInBlob && fulltext != null)", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402824410", "createdAt": "2020-04-03T08:21:34Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-storage-dbs/src/main/java/org/nuxeo/ecm/core/storage/dbs/DBSSession.java", "diffHunk": "@@ -1547,10 +1554,29 @@ protected static ACP memToAcp(Serializable acpSer) {\n         return acp;\n     }\n \n+    @Override\n+    public boolean isFulltextStoredInBlob() {\n+        return fulltextStoredInBlob;\n+    }\n+\n     @Override\n     public Map<String, String> getBinaryFulltext(String id) {\n         State state = transaction.getStateForRead(id);\n         String fulltext = (String) state.get(KEY_FULLTEXT_BINARY);\n+        if (fulltextStoredInBlob) {\n+            String key = fulltext;\n+            if (key != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODkwNDYzOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/RepositoryDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxMToxMFrOGAPJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxMToxMFrOGAPJ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMTQ4Mg==", "bodyText": "Since 11.1", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402901482", "createdAt": "2020-04-03T10:11:10Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/RepositoryDescriptor.java", "diffHunk": "@@ -318,6 +318,11 @@ public void setFulltextDisabled(boolean disabled) {\n         fulltextDescriptor.setFulltextDisabled(disabled);\n     }\n \n+    @XNode(\"indexing/fulltext@storedInBlob\")\n+    public void setFulltextStoredInBlob(boolean storedInBlob) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODkxNjYyOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/SessionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxNDo1OFrOGAPRWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxNDo1OFrOGAPRWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMzM4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (fulltextDescriptor.getFulltextStoredInBlob()) {\n          \n          \n            \n                        String key = map.get(\"binarytext\");\n          \n          \n            \n                        if (key != null) {\n          \n          \n            \n                    String key = map.get(\"binarytext\");\n          \n          \n            \n                    if (fulltextDescriptor.getFulltextStoredInBlob() && key != null) {", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402903384", "createdAt": "2020-04-03T10:14:58Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/SessionImpl.java", "diffHunk": "@@ -1475,13 +1484,34 @@ public long getCacheSelectionSize() {\n         return context.getCacheSelectionSize();\n     }\n \n+    @Override\n+    public boolean isFulltextStoredInBlob() {\n+        return fulltextDescriptor.getFulltextStoredInBlob();\n+    }\n+\n     @Override\n     public Map<String, String> getBinaryFulltext(Serializable id) {\n-        if (repository.getRepositoryDescriptor().getFulltextDescriptor().getFulltextDisabled()) {\n+        if (fulltextDescriptor.getFulltextDisabled()) {\n             return null;\n         }\n         RowId rowId = new RowId(Model.FULLTEXT_TABLE_NAME, id);\n-        return mapper.getBinaryFulltext(rowId);\n+        Map<String, String> map = mapper.getBinaryFulltext(rowId);\n+        if (fulltextDescriptor.getFulltextStoredInBlob()) {\n+            String key = map.get(\"binarytext\");\n+            if (key != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODkxOTM0OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/JDBCBackend.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxNTo1MlrOGAPTGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjozMzowNVrOGATcyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMzgzNA==", "bodyText": "Worth updating the class to log4j 2, nop?", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402903834", "createdAt": "2020-04-03T10:15:52Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/JDBCBackend.java", "diffHunk": "@@ -126,8 +126,9 @@ public Model initialize(RepositoryImpl repository) {\n         }\n         if (log.isDebugEnabled()) {\n             FulltextDescriptor fulltextDescriptor = repositoryDescriptor.getFulltextDescriptor();\n-            log.debug(String.format(\"Database ready, fulltext: disabled=%b searchDisabled=%b.\",\n-                    fulltextDescriptor.getFulltextDisabled(), fulltextDescriptor.getFulltextSearchDisabled()));\n+            log.debug(String.format(\"Database ready, fulltext: disabled=%b storedInBlob=%b searchDisabled=%b.\",\n+                    fulltextDescriptor.getFulltextDisabled(), fulltextDescriptor.getFulltextStoredInBlob(),\n+                    fulltextDescriptor.getFulltextSearchDisabled()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MTg1MA==", "bodyText": "Sure but later :)\nNote that this debug log is only seen once at startup so no performance-critical.", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402971850", "createdAt": "2020-04-03T12:33:05Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-storage-sql/nuxeo-core-storage-sql/src/main/java/org/nuxeo/ecm/core/storage/sql/jdbc/JDBCBackend.java", "diffHunk": "@@ -126,8 +126,9 @@ public Model initialize(RepositoryImpl repository) {\n         }\n         if (log.isDebugEnabled()) {\n             FulltextDescriptor fulltextDescriptor = repositoryDescriptor.getFulltextDescriptor();\n-            log.debug(String.format(\"Database ready, fulltext: disabled=%b searchDisabled=%b.\",\n-                    fulltextDescriptor.getFulltextDisabled(), fulltextDescriptor.getFulltextSearchDisabled()));\n+            log.debug(String.format(\"Database ready, fulltext: disabled=%b storedInBlob=%b searchDisabled=%b.\",\n+                    fulltextDescriptor.getFulltextDisabled(), fulltextDescriptor.getFulltextStoredInBlob(),\n+                    fulltextDescriptor.getFulltextSearchDisabled()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMzgzNA=="}, "originalCommit": {"oid": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODkzNTMxOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-storage/src/main/java/org/nuxeo/ecm/core/storage/FulltextDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMDozN1rOGAPc7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMDozN1rOGAPc7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNjM1MA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402906350", "createdAt": "2020-04-03T10:20:37Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-storage/src/main/java/org/nuxeo/ecm/core/storage/FulltextDescriptor.java", "diffHunk": "@@ -111,10 +111,20 @@ public void setFulltextDisabled(boolean disabled) {\n         fulltextDisabled = Boolean.valueOf(disabled);\n     }\n \n+    private Boolean fulltextStoredInBlob;\n+\n+    public boolean getFulltextStoredInBlob() {\n+        return defaultFalse(fulltextStoredInBlob);\n+    }\n+\n+    public void setFulltextStoredInBlob(boolean storedInBlob) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk0MTQwOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/FulltextStoredInBlobFeature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMjozNlrOGAPgzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMjozNlrOGAPgzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNzM0MA==", "bodyText": "Missing blank line?", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402907340", "createdAt": "2020-04-03T10:22:36Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-test/src/main/java/org/nuxeo/ecm/core/test/FulltextStoredInBlobFeature.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Florent Guillaume\n+ */\n+package org.nuxeo.ecm.core.test;\n+\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RunnerFeature;\n+\n+public class FulltextStoredInBlobFeature implements RunnerFeature {\n+    private static final String KEY = \"nuxeo.test.fulltext.storedInBlob\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTA0NjE5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/test/java/org/nuxeo/elasticsearch/test/TestFulltextStoredInBlob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDo1NDo1NFrOGAQgfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjozNDoyOFrOGATgCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMzY0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertEquals(1, esRet.totalSize());\n          \n          \n            \n                    assertEquals(1, esRet.totalSize());\n          \n      \n    \n    \n  \n\nThere's another one in the class.", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402923645", "createdAt": "2020-04-03T10:54:54Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/test/java/org/nuxeo/elasticsearch/test/TestFulltextStoredInBlob.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * (C) Copyright 2015-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Benoit Delbosc\n+ *     Florent Guillaume\n+ */\n+package org.nuxeo.elasticsearch.test;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.query.QueryParseException;\n+import org.nuxeo.ecm.core.test.FulltextStoredInBlobFeature;\n+import org.nuxeo.elasticsearch.query.NxQueryBuilder;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ FulltextStoredInBlobFeature.class, RepositoryElasticSearchFeature.class })\n+@Deploy(\"org.nuxeo.elasticsearch.core:elasticsearch-test-contrib.xml\")\n+public class TestFulltextStoredInBlob extends TestFulltextEnabled {\n+\n+    @Override\n+    @Test\n+    public void testFulltext() throws Exception {\n+        createFileWithBlob();\n+        // binary fulltext extraction is done\n+        String nxql = \"SELECT * FROM Document WHERE ecm:fulltext='search'\";\n+        DocumentModelList esRet = ess.query(new NxQueryBuilder(session).nxql(nxql));\n+        Assert.assertEquals(1, esRet.totalSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MjY4Mg==", "bodyText": "This class is actually essentially a copy of an existing one but you're right, I'll clean it up.", "url": "https://github.com/nuxeo/nuxeo/pull/3885#discussion_r402972682", "createdAt": "2020-04-03T12:34:28Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/test/java/org/nuxeo/elasticsearch/test/TestFulltextStoredInBlob.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * (C) Copyright 2015-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Benoit Delbosc\n+ *     Florent Guillaume\n+ */\n+package org.nuxeo.elasticsearch.test;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.query.QueryParseException;\n+import org.nuxeo.ecm.core.test.FulltextStoredInBlobFeature;\n+import org.nuxeo.elasticsearch.query.NxQueryBuilder;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ FulltextStoredInBlobFeature.class, RepositoryElasticSearchFeature.class })\n+@Deploy(\"org.nuxeo.elasticsearch.core:elasticsearch-test-contrib.xml\")\n+public class TestFulltextStoredInBlob extends TestFulltextEnabled {\n+\n+    @Override\n+    @Test\n+    public void testFulltext() throws Exception {\n+        createFileWithBlob();\n+        // binary fulltext extraction is done\n+        String nxql = \"SELECT * FROM Document WHERE ecm:fulltext='search'\";\n+        DocumentModelList esRet = ess.query(new NxQueryBuilder(session).nxql(nxql));\n+        Assert.assertEquals(1, esRet.totalSize());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkyMzY0NQ=="}, "originalCommit": {"oid": "e9a2b2dc0bda2dbd0fe2c9f2f2ebfd316b657f8b"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4234, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}