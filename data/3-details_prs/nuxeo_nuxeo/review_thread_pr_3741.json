{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczODYyNzcz", "number": 3741, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODo1Mzo1MVrODf0SxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDozMzoxMVrODf2I_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njg5MjIxOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODo1Mzo1MVrOFpvYvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzoxMDowMVrOFp9p0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxMjMxNw==", "bodyText": "throws IOException is not needed", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379312317", "createdAt": "2020-02-14T08:53:51Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -179,4 +189,45 @@ protected String getContentDispositionHeader(Blob blob) {\n         return RFC2231.encodeContentDisposition(blob.getFilename(), false, null);\n     }\n \n+    @Override\n+    public BlobStatus getStatus(ManagedBlob blob) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU0NjA2NQ==", "bodyText": "Actually it should have been, I intended to wrap any AmazonServiceException into an IOException. I'll change that.", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379546065", "createdAt": "2020-02-14T17:10:01Z", "author": {"login": "efge"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -179,4 +189,45 @@ protected String getContentDispositionHeader(Blob blob) {\n         return RFC2231.encodeContentDisposition(blob.getFilename(), false, null);\n     }\n \n+    @Override\n+    public BlobStatus getStatus(ManagedBlob blob) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxMjMxNw=="}, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njg5NDU4OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODo1NDo0NVrOFpvaRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODo1NDo0NVrOFpvaRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxMjcwOQ==", "bodyText": "you can use the constructor with three args (public GetObjectMetadataRequest(String bucketName, String key, String versionId)", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379312709", "createdAt": "2020-02-14T08:54:45Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -179,4 +189,45 @@ protected String getContentDispositionHeader(Blob blob) {\n         return RFC2231.encodeContentDisposition(blob.getFilename(), false, null);\n     }\n \n+    @Override\n+    public BlobStatus getStatus(ManagedBlob blob) throws IOException {\n+        String key = stripBlobKeyPrefix(blob.getKey());\n+        String objectKey;\n+        String versionId;\n+        int seppos = key.indexOf(VER_SEP);\n+        if (seppos < 0) {\n+            objectKey = key;\n+            versionId = null;\n+        } else {\n+            objectKey = key.substring(0, seppos);\n+            versionId = key.substring(seppos + 1);\n+        }\n+        String bucketKey = config.bucketPrefix + objectKey;\n+        GetObjectMetadataRequest request = new GetObjectMetadataRequest(config.bucketName, bucketKey);\n+        request.setVersionId(versionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjkwNDA4OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODo1ODowNVrOFpvf0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzoxMjo0NVrOFp9uqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNDEzMA==", "bodyText": "wdyt if we replace it by:\n        String objectKey = key;\n        String versionId = null;\n        int seppos = key.indexOf(VER_SEP);\n        if(seppos >= 0) {\n            objectKey = key.substring(0, seppos);\n            versionId = key.substring(seppos + 1);\n        }", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379314130", "createdAt": "2020-02-14T08:58:05Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -179,4 +189,45 @@ protected String getContentDispositionHeader(Blob blob) {\n         return RFC2231.encodeContentDisposition(blob.getFilename(), false, null);\n     }\n \n+    @Override\n+    public BlobStatus getStatus(ManagedBlob blob) throws IOException {\n+        String key = stripBlobKeyPrefix(blob.getKey());\n+        String objectKey;\n+        String versionId;\n+        int seppos = key.indexOf(VER_SEP);\n+        if (seppos < 0) {\n+            objectKey = key;\n+            versionId = null;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU0NzMwNQ==", "bodyText": "I prefer the \"static single assignment\" form, where variables are assigned only once if possible and if it doesn't make the code unreadable.\nNote that this pattern helps lambdas as well (not in this case, there's no lambda) as it makes the variables effectively-final.", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379547305", "createdAt": "2020-02-14T17:12:45Z", "author": {"login": "efge"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -179,4 +189,45 @@ protected String getContentDispositionHeader(Blob blob) {\n         return RFC2231.encodeContentDisposition(blob.getFilename(), false, null);\n     }\n \n+    @Override\n+    public BlobStatus getStatus(ManagedBlob blob) throws IOException {\n+        String key = stripBlobKeyPrefix(blob.getKey());\n+        String objectKey;\n+        String versionId;\n+        int seppos = key.indexOf(VER_SEP);\n+        if (seppos < 0) {\n+            objectKey = key;\n+            versionId = null;\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNDEzMA=="}, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjkyNjUwOnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTowNjoxMFrOFpvteg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzoxNDozNlrOFp9xyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNzYyNg==", "bodyText": "i checkout you branch and i get an error compilation here, pehaps i miss something, but your static import\nimport static org.apache.commons.lang.StringUtils.defaultIfEmpty; doesn't exist i replace it by import static org.apache.commons.lang3.StringUtils.defaultIfEmpty; i think we use apache common 3", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379317626", "createdAt": "2020-02-14T09:06:10Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -179,4 +189,45 @@ protected String getContentDispositionHeader(Blob blob) {\n         return RFC2231.encodeContentDisposition(blob.getFilename(), false, null);\n     }\n \n+    @Override\n+    public BlobStatus getStatus(ManagedBlob blob) throws IOException {\n+        String key = stripBlobKeyPrefix(blob.getKey());\n+        String objectKey;\n+        String versionId;\n+        int seppos = key.indexOf(VER_SEP);\n+        if (seppos < 0) {\n+            objectKey = key;\n+            versionId = null;\n+        } else {\n+            objectKey = key.substring(0, seppos);\n+            versionId = key.substring(seppos + 1);\n+        }\n+        String bucketKey = config.bucketPrefix + objectKey;\n+        GetObjectMetadataRequest request = new GetObjectMetadataRequest(config.bucketName, bucketKey);\n+        request.setVersionId(versionId);\n+        ObjectMetadata metadata;\n+        try {\n+            metadata = config.amazonS3.getObjectMetadata(request);\n+        } catch (AmazonServiceException e) {\n+            if (S3BlobStore.isMissingKey(e)) {\n+                // don't crash for a missing blob, even though it means the storage is corrupted\n+                log.error(\"Failed to get information on blob: \" + key, e);\n+                return new BlobStatus();\n+            }\n+            throw e;\n+        }\n+        // storage class is null for STANDARD\n+        String storageClass = defaultIfEmpty(metadata.getStorageClass(), StorageClass.Standard.toString());\n+        // x-amz-restore absent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU0ODEwNA==", "bodyText": "Thanks. I intended to use commons-lang3 but I still have indirect dependencies to commons-lang somewhere.", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379548104", "createdAt": "2020-02-14T17:14:36Z", "author": {"login": "efge"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -179,4 +189,45 @@ protected String getContentDispositionHeader(Blob blob) {\n         return RFC2231.encodeContentDisposition(blob.getFilename(), false, null);\n     }\n \n+    @Override\n+    public BlobStatus getStatus(ManagedBlob blob) throws IOException {\n+        String key = stripBlobKeyPrefix(blob.getKey());\n+        String objectKey;\n+        String versionId;\n+        int seppos = key.indexOf(VER_SEP);\n+        if (seppos < 0) {\n+            objectKey = key;\n+            versionId = null;\n+        } else {\n+            objectKey = key.substring(0, seppos);\n+            versionId = key.substring(seppos + 1);\n+        }\n+        String bucketKey = config.bucketPrefix + objectKey;\n+        GetObjectMetadataRequest request = new GetObjectMetadataRequest(config.bucketName, bucketKey);\n+        request.setVersionId(versionId);\n+        ObjectMetadata metadata;\n+        try {\n+            metadata = config.amazonS3.getObjectMetadata(request);\n+        } catch (AmazonServiceException e) {\n+            if (S3BlobStore.isMissingKey(e)) {\n+                // don't crash for a missing blob, even though it means the storage is corrupted\n+                log.error(\"Failed to get information on blob: \" + key, e);\n+                return new BlobStatus();\n+            }\n+            throw e;\n+        }\n+        // storage class is null for STANDARD\n+        String storageClass = defaultIfEmpty(metadata.getStorageClass(), StorageClass.Standard.toString());\n+        // x-amz-restore absent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNzYyNg=="}, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njk3ODg1OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOToyNDoxN1rOFpwMlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOToyNDoxN1rOFpwMlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyNTU4OA==", "bodyText": "can be replaced by log.error(\"Failed to get information on blob: {}\" , key, e); but i think you main logging message are doing using the concatenation string message (i mean on others code part like here perhaps we should keep it as it is to more consistency", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379325588", "createdAt": "2020-02-14T09:24:17Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -179,4 +189,45 @@ protected String getContentDispositionHeader(Blob blob) {\n         return RFC2231.encodeContentDisposition(blob.getFilename(), false, null);\n     }\n \n+    @Override\n+    public BlobStatus getStatus(ManagedBlob blob) throws IOException {\n+        String key = stripBlobKeyPrefix(blob.getKey());\n+        String objectKey;\n+        String versionId;\n+        int seppos = key.indexOf(VER_SEP);\n+        if (seppos < 0) {\n+            objectKey = key;\n+            versionId = null;\n+        } else {\n+            objectKey = key.substring(0, seppos);\n+            versionId = key.substring(seppos + 1);\n+        }\n+        String bucketKey = config.bucketPrefix + objectKey;\n+        GetObjectMetadataRequest request = new GetObjectMetadataRequest(config.bucketName, bucketKey);\n+        request.setVersionId(versionId);\n+        ObjectMetadata metadata;\n+        try {\n+            metadata = config.amazonS3.getObjectMetadata(request);\n+        } catch (AmazonServiceException e) {\n+            if (S3BlobStore.isMissingKey(e)) {\n+                // don't crash for a missing blob, even though it means the storage is corrupted\n+                log.error(\"Failed to get information on blob: \" + key, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njk5MDg5OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOToyODoyMVrOFpwT7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzozNjoxOVrOFp-WAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyNzQ3MQ==", "bodyText": "should we returns directly a new instance of blob status as the default values will be:\ndownloadable=true and storageClass is null which means a downloadable standard storage, and in fact we don't have our storage. perhapse should we add a code status or at least returns:\n return new BlobStatus()withDownloadable(false);", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379327471", "createdAt": "2020-02-14T09:28:21Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -179,4 +189,45 @@ protected String getContentDispositionHeader(Blob blob) {\n         return RFC2231.encodeContentDisposition(blob.getFilename(), false, null);\n     }\n \n+    @Override\n+    public BlobStatus getStatus(ManagedBlob blob) throws IOException {\n+        String key = stripBlobKeyPrefix(blob.getKey());\n+        String objectKey;\n+        String versionId;\n+        int seppos = key.indexOf(VER_SEP);\n+        if (seppos < 0) {\n+            objectKey = key;\n+            versionId = null;\n+        } else {\n+            objectKey = key.substring(0, seppos);\n+            versionId = key.substring(seppos + 1);\n+        }\n+        String bucketKey = config.bucketPrefix + objectKey;\n+        GetObjectMetadataRequest request = new GetObjectMetadataRequest(config.bucketName, bucketKey);\n+        request.setVersionId(versionId);\n+        ObjectMetadata metadata;\n+        try {\n+            metadata = config.amazonS3.getObjectMetadata(request);\n+        } catch (AmazonServiceException e) {\n+            if (S3BlobStore.isMissingKey(e)) {\n+                // don't crash for a missing blob, even though it means the storage is corrupted\n+                log.error(\"Failed to get information on blob: \" + key, e);\n+                return new BlobStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NzM3OQ==", "bodyText": "Good point.", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379557379", "createdAt": "2020-02-14T17:36:19Z", "author": {"login": "efge"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -179,4 +189,45 @@ protected String getContentDispositionHeader(Blob blob) {\n         return RFC2231.encodeContentDisposition(blob.getFilename(), false, null);\n     }\n \n+    @Override\n+    public BlobStatus getStatus(ManagedBlob blob) throws IOException {\n+        String key = stripBlobKeyPrefix(blob.getKey());\n+        String objectKey;\n+        String versionId;\n+        int seppos = key.indexOf(VER_SEP);\n+        if (seppos < 0) {\n+            objectKey = key;\n+            versionId = null;\n+        } else {\n+            objectKey = key.substring(0, seppos);\n+            versionId = key.substring(seppos + 1);\n+        }\n+        String bucketKey = config.bucketPrefix + objectKey;\n+        GetObjectMetadataRequest request = new GetObjectMetadataRequest(config.bucketName, bucketKey);\n+        request.setVersionId(versionId);\n+        ObjectMetadata metadata;\n+        try {\n+            metadata = config.amazonS3.getObjectMetadata(request);\n+        } catch (AmazonServiceException e) {\n+            if (S3BlobStore.isMissingKey(e)) {\n+                // don't crash for a missing blob, even though it means the storage is corrupted\n+                log.error(\"Failed to get information on blob: \" + key, e);\n+                return new BlobStatus();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyNzQ3MQ=="}, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzA3Njk5OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTo1NTo1NFrOFpxIBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTo1NTo1NFrOFpxIBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM0MDgwNw==", "bodyText": "can be replaced by:\nRestoreObjectRequest request = new RestoreObjectRequest(bucketName, bucketKey, days).withVersionId(versionId);", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379340807", "createdAt": "2020-02-14T09:55:54Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java", "diffHunk": "@@ -676,6 +678,15 @@ public void writeBlobProperties(BlobUpdateContext blobUpdateContext) throws IOEx\n                 logTrace(\"rnote right: \" + status.toString());\n                 amazonS3.setObjectLegalHold(request);\n             }\n+            if (blobUpdateContext.restoreForDuration != null) {\n+                Duration duration = blobUpdateContext.restoreForDuration.duration;\n+                // round up duration to days\n+                int days = (int) duration.plusDays(1).minusSeconds(1).toDays();\n+                RestoreObjectRequest request = new RestoreObjectRequest(bucketName, bucketKey);\n+                request.setVersionId(versionId);\n+                request.setExpirationInDays(days);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzE3NTc0OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDoyNjozMFrOFpyDrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzoyODo1OVrOFp-Jvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1NjA3OA==", "bodyText": "i am wondering if should use/explore the returned object:\n RestoreObjectResult restoreObjectResult = amazonS3.restoreObjectV2(request);\nmainly the use of com.amazonaws.services.s3.model.RestoreObjectResult#restoreOutputPath\n    /**\n     * The path in the provided S3 output location where Select results will be restored to\n     */\n    private String restoreOutputPath;\n\nOr we shouldn't care about it and when the content is available  call the  org.nuxeo.ecm.core.blob.BlobProvider#getStatus then we can make the call to org.nuxeo.ecm.core.blob.BlobProvider#getStream", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379356078", "createdAt": "2020-02-14T10:26:30Z", "author": {"login": "RSalem07"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java", "diffHunk": "@@ -676,6 +678,15 @@ public void writeBlobProperties(BlobUpdateContext blobUpdateContext) throws IOEx\n                 logTrace(\"rnote right: \" + status.toString());\n                 amazonS3.setObjectLegalHold(request);\n             }\n+            if (blobUpdateContext.restoreForDuration != null) {\n+                Duration duration = blobUpdateContext.restoreForDuration.duration;\n+                // round up duration to days\n+                int days = (int) duration.plusDays(1).minusSeconds(1).toDays();\n+                RestoreObjectRequest request = new RestoreObjectRequest(bucketName, bucketKey);\n+                request.setVersionId(versionId);\n+                request.setExpirationInDays(days);\n+                amazonS3.restoreObjectV2(request);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NDIzOQ==", "bodyText": "restoreOutputPath is about \"select\" restores, which is something different.\nIn our case there's really nothing interesting in the result... It's just launching an async restore.", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379554239", "createdAt": "2020-02-14T17:28:59Z", "author": {"login": "efge"}, "path": "addons/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobStore.java", "diffHunk": "@@ -676,6 +678,15 @@ public void writeBlobProperties(BlobUpdateContext blobUpdateContext) throws IOEx\n                 logTrace(\"rnote right: \" + status.toString());\n                 amazonS3.setObjectLegalHold(request);\n             }\n+            if (blobUpdateContext.restoreForDuration != null) {\n+                Duration duration = blobUpdateContext.restoreForDuration.duration;\n+                // round up duration to days\n+                int days = (int) duration.plusDays(1).minusSeconds(1).toDays();\n+                RestoreObjectRequest request = new RestoreObjectRequest(bucketName, bucketKey);\n+                request.setVersionId(versionId);\n+                request.setExpirationInDays(days);\n+                amazonS3.restoreObjectV2(request);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1NjA3OA=="}, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzE5NDg2OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDozMzoxMVrOFpyP0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNzozMzo0MlrOFp-Rew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1OTE4NA==", "bodyText": "what if we hide the fact that null is a the Standard storage as it is low level implementation detail (mainly AWS for instant), i think your idea is to use the blob status like more generic, but ...or {@code null} for the standard storage class. is mainly an AWS implementation.\nor to be more generic perhaps we shouldn't give this information and replace it by more generic term storageDetails", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379359184", "createdAt": "2020-02-14T10:33:11Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobStatus.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Florent Guillaume\n+ */\n+package org.nuxeo.ecm.core.blob;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Status associated to a blob in storage.\n+ *\n+ * @since 11.1\n+ */\n+public class BlobStatus {\n+\n+    protected String storageClass;\n+\n+    protected boolean downloadable = true;\n+\n+    protected Instant downloadableUntil;\n+\n+    public BlobStatus withStorageClass(String storageClass) {\n+        this.storageClass = storageClass;\n+        return this;\n+    }\n+\n+    public BlobStatus withDownloadable(boolean downloadable) {\n+        this.downloadable = downloadable;\n+        return this;\n+    }\n+\n+    public BlobStatus withDownloadableUntil(Instant downloadableUntil) {\n+        this.downloadableUntil = downloadableUntil;\n+        return this;\n+    }\n+\n+    /**\n+     * The storage class, or {@code null} for the standard storage class.\n+     */\n+    public String getStorageClass() {\n+        return storageClass;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NjIxOQ==", "bodyText": "I'll change so that the default storage class is always represented as null, even when calling getStatus (so if the storage returns a value that corresponds to its standard storage class I'll turn it into null). That helps to build a \"standard\" availability with just new BlobStatus()", "url": "https://github.com/nuxeo/nuxeo/pull/3741#discussion_r379556219", "createdAt": "2020-02-14T17:33:42Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/blob/BlobStatus.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Florent Guillaume\n+ */\n+package org.nuxeo.ecm.core.blob;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Status associated to a blob in storage.\n+ *\n+ * @since 11.1\n+ */\n+public class BlobStatus {\n+\n+    protected String storageClass;\n+\n+    protected boolean downloadable = true;\n+\n+    protected Instant downloadableUntil;\n+\n+    public BlobStatus withStorageClass(String storageClass) {\n+        this.storageClass = storageClass;\n+        return this;\n+    }\n+\n+    public BlobStatus withDownloadable(boolean downloadable) {\n+        this.downloadable = downloadable;\n+        return this;\n+    }\n+\n+    public BlobStatus withDownloadableUntil(Instant downloadableUntil) {\n+        this.downloadableUntil = downloadableUntil;\n+        return this;\n+    }\n+\n+    /**\n+     * The storage class, or {@code null} for the standard storage class.\n+     */\n+    public String getStorageClass() {\n+        return storageClass;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1OTE4NA=="}, "originalCommit": {"oid": "55b02cbd4f5bd050b6f645ef138b36d5ad5bb0c2"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4253, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}