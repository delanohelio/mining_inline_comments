{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MzMyMTQ1", "number": 4249, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzowOTowNlrOEW4ijg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODo1NjoxMlrOEYZHQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDMwNDc4OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzowOTowNlrOG-Xruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1Mzo0NVrOG_aQ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MjkyMw==", "bodyText": "Shouldn't be getClass instead of ComponentManagerImpl.class?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468052923", "createdAt": "2020-08-10T17:09:06Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -63,6 +65,10 @@ public void deactivate(ComponentContext context) {\n         setModifiedNow();\n     }\n \n+    protected void addRuntimeMessage(Level level, String message) {\n+        Framework.getRuntime().getMessageHandler().addMessage(level, message, ComponentManagerImpl.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1NjU3Mw==", "bodyText": "These are still registration errors, so if we want to cleanup them up on hot reload, they should be linked to the ComponentManager marker", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468356573", "createdAt": "2020-08-11T06:35:14Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -63,6 +65,10 @@ public void deactivate(ComponentContext context) {\n         setModifiedNow();\n     }\n \n+    protected void addRuntimeMessage(Level level, String message) {\n+        Framework.getRuntime().getMessageHandler().addMessage(level, message, ComponentManagerImpl.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MjkyMw=="}, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0MzgwNw==", "bodyText": "source removed --> resolve", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469143807", "createdAt": "2020-08-12T09:53:45Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -63,6 +65,10 @@ public void deactivate(ComponentContext context) {\n         setModifiedNow();\n     }\n \n+    protected void addRuntimeMessage(Level level, String message) {\n+        Framework.getRuntime().getMessageHandler().addMessage(level, message, ComponentManagerImpl.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MjkyMw=="}, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDMwODQ3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoxMDowNlrOG-Xt5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjo0ODo1N1rOG-qjoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MzQ3Nw==", "bodyText": "Can you introduce a dedicated clear method without argument and do not allow null as argument for this one?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468053477", "createdAt": "2020-08-10T17:10:06Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n+        return messages.stream()\n+                       .filter(msg -> p.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+    }\n \n-        DEACTIVATING\n+    @Override\n+    public List<String> getMessageStrings(Predicate<RuntimeMessage> predicate) {\n+        return getMessages(predicate).stream()\n+                                     .map(RuntimeMessage::getMessage)\n+                                     .collect(Collectors.collectingAndThen(Collectors.toList(),\n+                                             Collections::unmodifiableList));\n+    }\n \n+    @Override\n+    public void clear(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1NzYyMQ==", "bodyText": "I hesitated to avoid piling up new API (since nobody would call that clear() method) but i can add it if you fin it better", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468357621", "createdAt": "2020-08-11T06:37:45Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n+        return messages.stream()\n+                       .filter(msg -> p.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+    }\n \n-        DEACTIVATING\n+    @Override\n+    public List<String> getMessageStrings(Predicate<RuntimeMessage> predicate) {\n+        return getMessages(predicate).stream()\n+                                     .map(RuntimeMessage::getMessage)\n+                                     .collect(Collectors.collectingAndThen(Collectors.toList(),\n+                                             Collections::unmodifiableList));\n+    }\n \n+    @Override\n+    public void clear(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MzQ3Nw=="}, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MjE0NQ==", "bodyText": "Removed the null possibility", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468362145", "createdAt": "2020-08-11T06:48:57Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n+        return messages.stream()\n+                       .filter(msg -> p.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+    }\n \n-        DEACTIVATING\n+    @Override\n+    public List<String> getMessageStrings(Predicate<RuntimeMessage> predicate) {\n+        return getMessages(predicate).stream()\n+                                     .map(RuntimeMessage::getMessage)\n+                                     .collect(Collectors.collectingAndThen(Collectors.toList(),\n+                                             Collections::unmodifiableList));\n+    }\n \n+    @Override\n+    public void clear(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MzQ3Nw=="}, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDMxNDM1OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoxMTo0NFrOG-XxaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjo0OTowNVrOG-qj1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NDM3Nw==", "bodyText": "Can you remove the null argument possibility?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468054377", "createdAt": "2020-08-10T17:11:44Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1NzczMg==", "bodyText": "See above comment (same reason)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468357732", "createdAt": "2020-08-11T06:38:01Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NDM3Nw=="}, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MjE5Nw==", "bodyText": "Removed the null possibility", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468362197", "createdAt": "2020-08-11T06:49:05Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NDM3Nw=="}, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDMxODM1OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoxMjo1MFrOG-Xz7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjozODoyNlrOG-qTCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTAyMQ==", "bodyText": "Just p doesn't work?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468055021", "createdAt": "2020-08-10T17:12:50Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n+        return messages.stream()\n+                       .filter(msg -> p.test(msg))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1Nzg5OA==", "bodyText": "Indeed, got confused by error when i tried to redefine the predicate parameter directly", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468357898", "createdAt": "2020-08-11T06:38:26Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n+        return messages.stream()\n+                       .filter(msg -> p.test(msg))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTAyMQ=="}, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDMyMTQ0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoxMzozN1rOG-X1vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODo0Njo1M1rOG-uVwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTQ4Ng==", "bodyText": "Does it make sense to have instead/in addition an api with Class<? > as source type?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468055486", "createdAt": "2020-08-10T17:13:37Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1ODAzNA==", "bodyText": "Instead makes sense given the usage \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468358034", "createdAt": "2020-08-11T06:38:44Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTQ4Ng=="}, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MjYwMA==", "bodyText": "Will check the DeploymentPreprocessor use case (only usage based on a String for now)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468362600", "createdAt": "2020-08-11T06:50:05Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTQ4Ng=="}, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyNDEzMA==", "bodyText": "Made the changed and used the addMessage(RuntimeMessage) api for the DeploymentPreprocessor use case (as nuxeo-runtime cannot depend on nuxeo-runtime-deploy module without producing a dependency cycle)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468424130", "createdAt": "2020-08-11T08:46:53Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTQ4Ng=="}, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDMzNTA0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoxNzozNFrOG-X-AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjozODo1MlrOG-qT1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzYwMQ==", "bodyText": "Forgotten System.err?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468057601", "createdAt": "2020-08-10T17:17:34Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "diffHunk": "@@ -47,18 +49,47 @@ public void testContributions() throws Exception {\n         // do nothing\n     }\n \n+    protected void checkDupe(boolean detected) {\n+        List<String> errors = Framework.getRuntime().getMessageHandler().getErrors();\n+        if (detected) {\n+            assertEquals(List.of(\"Duplicate component name: service:my.comp2\"), errors);\n+            System.err.println(Framework.getRuntime().getMessageHandler().getMessages(null).get(0).getSource());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1ODEwMg==", "bodyText": "Indeed thanks!", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468358102", "createdAt": "2020-08-11T06:38:52Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "diffHunk": "@@ -47,18 +49,47 @@ public void testContributions() throws Exception {\n         // do nothing\n     }\n \n+    protected void checkDupe(boolean detected) {\n+        List<String> errors = Framework.getRuntime().getMessageHandler().getErrors();\n+        if (detected) {\n+            assertEquals(List.of(\"Duplicate component name: service:my.comp2\"), errors);\n+            System.err.println(Framework.getRuntime().getMessageHandler().getMessages(null).get(0).getSource());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzYwMQ=="}, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzYyNjM5OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzowNDowMFrOG-2yNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo0ODo0M1rOG-4pPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MjQ4NA==", "bodyText": "Not needed.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468562484", "createdAt": "2020-08-11T13:04:00Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NTg3MQ==", "bodyText": "Needed for the DeploymentPreprocessor use case, see comments on resolved conversation above", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468585871", "createdAt": "2020-08-11T13:38:52Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MjQ4NA=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5MTk3MQ==", "bodyText": "\ud83e\udd14\nI was just talking about the super();, not the whole constructor (?)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468591971", "createdAt": "2020-08-11T13:47:22Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MjQ4NA=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5Mjk1OQ==", "bodyText": "ah ok", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468592959", "createdAt": "2020-08-11T13:48:43Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MjQ4NA=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzYzMDAwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzowNDo1MFrOG-20Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1NToxNFrOG_aUUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA==", "bodyText": "Which listener?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468563034", "createdAt": "2020-08-11T13:04:50Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NjM1NA==", "bodyText": "RuntimeMessageHandler is a runtime listener. Maybe we don't need this info anymore, wdyt @kevinleturc ?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468586354", "createdAt": "2020-08-11T13:39:34Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5Njg2Ng==", "bodyText": "We can get rid of the listener aspect there indeed.\nThe new state INITIALIZING represents the ComponentManager state before it starts its activation and it is only reachable just after the ComponentManager instantiation right?\nWe can reword the comment in this way \ud83d\udc4d .", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468596866", "createdAt": "2020-08-11T13:53:50Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5OTcxNw==", "bodyText": "If we don't need this to be a listener, i'll get rid of the whole \"step\" information anyway. So which is it? Do you think we'll need to know at which step the message has been added?\nMy understanding is that this info was added to handle dupe messages in case of hotreload, but the strategy is not working anyway, that's why i added the notion of source instead.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468599717", "createdAt": "2020-08-11T13:57:31Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0Mjg5Nw==", "bodyText": "If we don't need this to be a listener, i'll get rid of the whole \"step\" information anyway. So which is it? Do you think we'll need to know at which step the message has been added?\n\nWe don't really need to know precisely the step, in fact we need to know if it happens during ACTIVATING + STARTING, or before RUNNING in order to not clean them before displaying them.\nThe source approach is interesting but it requires to manipulate the stack of messages outside of the handler which is not great to handle all usages (runtime/hotreload/test) and requires additional API for this. In addition, see one of my comments, it requires to put ComponentManagerImpl as a source for all Component. Is it really source? We won't be able to use this new field to know which component reported the message, or am I missing something?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468642897", "createdAt": "2020-08-11T14:52:08Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1MDE0MQ==", "bodyText": "I cannot finely know which component provided the registration without changing the DescriptorRegistry api, that's why i limited changes here by cleaning up all messages from the ComponentManager source, even if i'm not happy with these changes. We're not relying on the step at all anymore: calls to #applyStash is the current criterion i'm using.\nI chose to go this way for now because at least we're not hiding important problems at startup anymore: it fixes the duplicate component name detection at startup (and you confirmed on slack that hotreload messages about reloaded components are enough, we don't need the complete list of messages -- that fixes the dupe messages on hotreload, still).\nNow if we want sthg finer, i'll postpone all this work until i get a go to fix the registration in general (as current code is nonsense): this will take time and bring more questions/issues, so this may not happen any time soon.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468650141", "createdAt": "2020-08-11T15:01:48Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NDY1Nw==", "bodyText": "relying on RUNNING state to clear messages fixed it --> cleaned up the step on messages, but kept the listener logics to be able to clear all messages when previous step was RUNNING", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469144657", "createdAt": "2020-08-12T09:55:14Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzYzMTM5OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzowNTowOVrOG-21NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzozOTo1OFrOG-4Qfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzI1Mg==", "bodyText": "Not needed, the whole class is @since 11.3.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468563252", "createdAt": "2020-08-11T13:05:09Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.\n+         *\n+         * @since 11.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NjYyMg==", "bodyText": "Yes but still a new behaviour compared to previous states, anyway i can remove it.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468586622", "createdAt": "2020-08-11T13:39:58Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.\n+         *\n+         * @since 11.3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzI1Mg=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzY1NDA3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoxMDo0MVrOG-3DCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoxMDo0MVrOG-3DCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2Njc5NQ==", "bodyText": "Missing Javadoc/since.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468566795", "createdAt": "2020-08-11T13:10:41Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzY1NDg0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoxMDo1NVrOG-3Diw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo0MDo0MFrOG-4SWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NjkyMw==", "bodyText": "It's not a free string identifier :)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468566923", "createdAt": "2020-08-11T13:10:55Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzA5OQ==", "bodyText": "Forgot to update the javadoc after latest changes indeed", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468587099", "createdAt": "2020-08-11T13:40:40Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NjkyMw=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzY1NzcwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoxMTozN1rOG-3FOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjowMDowOVrOG--p-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NzM1Mg==", "bodyText": "Predicate could be null, like for #getMessages?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468567352", "createdAt": "2020-08-11T13:11:37Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if\n+     * needed).\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message, Class<?> source);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzQ1NA==", "bodyText": "Not anymore, see previous comments from Kevin: i removed this possibility", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468587454", "createdAt": "2020-08-11T13:41:07Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if\n+     * needed).\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message, Class<?> source);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NzM1Mg=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY4ODY2MQ==", "bodyText": "So this need to be removed, right?\nhttps://github.com/nuxeo/nuxeo/pull/4249/files#diff-ea74bf978f35cfe86fc57284c8fc0567R78", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468688661", "createdAt": "2020-08-11T15:55:57Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if\n+     * needed).\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message, Class<?> source);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NzM1Mg=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5MTQ1MQ==", "bodyText": "Yes, thanks, i will review javadoc once we agree on the rest.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468691451", "createdAt": "2020-08-11T16:00:09Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if\n+     * needed).\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message, Class<?> source);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NzM1Mg=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzY2NDI4OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoxMzoxN1rOG-3JOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo0MToyMVrOG-4UZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2ODM3Nw==", "bodyText": "What if predicate is null?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468568377", "createdAt": "2020-08-11T13:13:17Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if\n+     * needed).\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message, Class<?> source);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessageStrings(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Clears messages filtered by following predicate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzYyMg==", "bodyText": "see previous comments", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468587622", "createdAt": "2020-08-11T13:41:21Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if\n+     * needed).\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message, Class<?> source);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessageStrings(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Clears messages filtered by following predicate.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2ODM3Nw=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzY5NDkyOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyMDozMFrOG-3cAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyMDozMFrOG-3cAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3MzE4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                   .filter(msg -> predicate.test(msg))\n          \n          \n            \n                                   .filter(predicate)\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468573184", "createdAt": "2020-08-11T13:20:30Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,37 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n+    @Override\n+    public void addMessage(Level level, String message, Class<?> source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        return messages.stream()\n+                       .filter(msg -> predicate.test(msg))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzY5NTk0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyMDo0NFrOG-3cpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyMDo0NFrOG-3cpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3MzM1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    messages.removeIf(msg -> predicate.test(msg));\n          \n          \n            \n                    messages.removeIf(predicate);", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468573350", "createdAt": "2020-08-11T13:20:44Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,37 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n+    @Override\n+    public void addMessage(Level level, String message, Class<?> source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        return messages.stream()\n+                       .filter(msg -> predicate.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+    }\n \n-        DEACTIVATING\n+    @Override\n+    public List<String> getMessageStrings(Predicate<RuntimeMessage> predicate) {\n+        return getMessages(predicate).stream()\n+                                     .map(RuntimeMessage::getMessage)\n+                                     .collect(Collectors.collectingAndThen(Collectors.toList(),\n+                                             Collections::unmodifiableList));\n+    }\n \n+    @Override\n+    public void clear(Predicate<RuntimeMessage> predicate) {\n+        messages.removeIf(msg -> predicate.test(msg));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzcwNDE3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyMjo0M1rOG-3hvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo0MzozN1rOG-4amw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDY1Mg==", "bodyText": "Why not using #getClass() like in other changes?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468574652", "createdAt": "2020-08-11T13:22:43Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -501,7 +496,9 @@ public synchronized void unregisterServices(RegistrationInfo ri) {\n \n     protected static void handleError(String message, Exception e) {\n         log.error(message, e);\n-        Framework.getRuntime().getMessageHandler().addWarning(message);\n+        Framework.getRuntime()\n+                 .getMessageHandler()\n+                 .addMessage(Level.SEVERE, message, ComponentManagerImpl.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4OTIxMQ==", "bodyText": "because it's a static method", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468589211", "createdAt": "2020-08-11T13:43:37Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -501,7 +496,9 @@ public synchronized void unregisterServices(RegistrationInfo ri) {\n \n     protected static void handleError(String message, Exception e) {\n         log.error(message, e);\n-        Framework.getRuntime().getMessageHandler().addWarning(message);\n+        Framework.getRuntime()\n+                 .getMessageHandler()\n+                 .addMessage(Level.SEVERE, message, ComponentManagerImpl.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDY1Mg=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzcyODY0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyODoyMFrOG-3w6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1NjoxM1rOG_aWtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3ODUzNg==", "bodyText": "Seems not clear to me why we are using ComponentManagerImpl.class here instead of #getClass() or RegistrationInfoImpl.java.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468578536", "createdAt": "2020-08-11T13:28:20Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,7 +343,9 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n+            Framework.getRuntime()\n+                     .getMessageHandler()\n+                     .addMessage(Level.SEVERE, msg, ComponentManagerImpl.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5MTk0Mw==", "bodyText": "because we need to clear all these in case of hotreload/tests, but i can reference both classes here if you prefer: https://github.com/nuxeo/nuxeo/blob/fix-NXP-29504-runtime-startup-errors/modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java#L899\nnote i'll need to rework this anyway for https://jira.nuxeo.com/browse/NXP-28948, i was trying to merge minimal changes before refactoring the DescriptorRegistry api to handle things more finely (if we want to).", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468591943", "createdAt": "2020-08-11T13:47:20Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,7 +343,9 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n+            Framework.getRuntime()\n+                     .getMessageHandler()\n+                     .addMessage(Level.SEVERE, msg, ComponentManagerImpl.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3ODUzNg=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NTI3MQ==", "bodyText": "source removed -> resolve", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469145271", "createdAt": "2020-08-12T09:56:13Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,7 +343,9 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n+            Framework.getRuntime()\n+                     .getMessageHandler()\n+                     .addMessage(Level.SEVERE, msg, ComponentManagerImpl.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3ODUzNg=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDA0NTA2OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDo0ODo0N1rOG_OAKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1Njo1MVrOG_aYFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0Mjg4OA==", "bodyText": "I'm good with using java.util.logging.Level in this API, as it's a JDK class.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468942888", "createdAt": "2020-08-12T00:48:47Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -63,6 +65,10 @@ public void deactivate(ComponentContext context) {\n         setModifiedNow();\n     }\n \n+    protected void addRuntimeMessage(Level level, String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3OTgzMA==", "bodyText": "My issue is that we are mixing 2 logging API (even if it's just for a LogLevel...) in all classes using this API - I don't find it clear.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469079830", "createdAt": "2020-08-12T08:05:33Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -63,6 +65,10 @@ public void deactivate(ComponentContext context) {\n         setModifiedNow();\n     }\n \n+    protected void addRuntimeMessage(Level level, String message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0Mjg4OA=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NTYyMA==", "bodyText": "Introduced a specific level for this, to still avoid duplicating error-related and warning-related api, and hopefully keeping clear semantics", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469145620", "createdAt": "2020-08-12T09:56:51Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -63,6 +65,10 @@ public void deactivate(ComponentContext context) {\n         setModifiedNow();\n     }\n \n+    protected void addRuntimeMessage(Level level, String message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0Mjg4OA=="}, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDA1ODA0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDo1NjoxOVrOG_OH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1ODowOFrOG_aajw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0NDg2Nw==", "bodyText": "I know it's a refactoring of pre-existing code, but FYI since Java 10 you can directly do .collect(Collectors.toUnmodifiableList())", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468944867", "createdAt": "2020-08-12T00:56:19Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,37 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n+    @Override\n+    public void addMessage(Level level, String message, Class<?> source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        return messages.stream()\n+                       .filter(msg -> predicate.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb3b63f41ae2805772e93cfe70ce7a6123d7320"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NjI1NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469146255", "createdAt": "2020-08-12T09:58:08Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,37 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n+    @Override\n+    public void addMessage(Level level, String message, Class<?> source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        return messages.stream()\n+                       .filter(msg -> predicate.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0NDg2Nw=="}, "originalCommit": {"oid": "afb3b63f41ae2805772e93cfe70ce7a6123d7320"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjY2MzM3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozMjoyNFrOG_mvcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODozMzo0NFrOHABhZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0ODIxMA==", "bodyText": "Worth adding a convenient method #getMessages(Level) to ease the replacement of #getErrors and #getWarnings methods? Make sens to me as we have #addMessage(Level, String).", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469348210", "createdAt": "2020-08-12T15:32:24Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getRuntimeMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4Njk4MA==", "bodyText": "Added this api for convenience", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469786980", "createdAt": "2020-08-13T08:33:44Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getRuntimeMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0ODIxMA=="}, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjY2NDc3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozMjo0MVrOG_mwQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozMjo0MVrOG_mwQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0ODQxNw==", "bodyText": "Cannot be null, right? \ud83d\ude43", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469348417", "createdAt": "2020-08-12T15:32:41Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjY2NzE0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozMzoxMlrOG_mxrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozMzoxMlrOG_mxrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0ODc4Mw==", "bodyText": "Former javadoc comment I think (?)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469348783", "createdAt": "2020-08-12T15:33:12Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjY3ODU0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozNTozNlrOG_m4Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODozMjo0MVrOHABfKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MDQ4Mw==", "bodyText": "Thanks for the RuntimeMessage#step cleanup, I didn't see any usage except the RuntimeMessageHandlerImpl, does it worth to leave this class over there?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469350483", "createdAt": "2020-08-12T15:35:36Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+/**\n+ * Represents a message to be held by the Runtime framework.\n+ * <p>\n+ * Allows detecting and displaying errors and warnings at server startup and when hot-reloading.\n+ *\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    public RuntimeMessage(Level level, String message) {\n+        this.level = level;\n+        this.message = message;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public enum Level {\n+\n+        ERROR,\n+\n+        WARNING\n+\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        ACTIVATING,\n+\n+        STARTING,\n+\n+        RUNNING,\n+\n+        STOPPING,\n+\n+        DEACTIVATING\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4NjQxMQ==", "bodyText": "Will move it to RuntimeMessageHandlerImpl \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469786411", "createdAt": "2020-08-13T08:32:41Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+/**\n+ * Represents a message to be held by the Runtime framework.\n+ * <p>\n+ * Allows detecting and displaying errors and warnings at server startup and when hot-reloading.\n+ *\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    public RuntimeMessage(Level level, String message) {\n+        this.level = level;\n+        this.message = message;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public enum Level {\n+\n+        ERROR,\n+\n+        WARNING\n+\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        ACTIVATING,\n+\n+        STARTING,\n+\n+        RUNNING,\n+\n+        STOPPING,\n+\n+        DEACTIVATING\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MDQ4Mw=="}, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjY3ODY3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozNTozOFrOG_m4bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwODozMzoyMVrOHABgkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MDUwOA==", "bodyText": "Seems this method is not used anymore? Do we need it (right now)?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469350508", "createdAt": "2020-08-12T15:35:38Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getRuntimeMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Clears messages filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    void clear(Predicate<RuntimeMessage> predicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4Njc2OQ==", "bodyText": "Removed all api that was not needed right-away", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469786769", "createdAt": "2020-08-13T08:33:21Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getRuntimeMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Clears messages filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    void clear(Predicate<RuntimeMessage> predicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MDUwOA=="}, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjk4NTc3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/resources/OSGI-INF/ConfigurationService.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1Nzo1N1rOHAPfGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozMToyOVrOHAQ86w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNTc3MQ==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470015771", "createdAt": "2020-08-13T14:57:57Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/resources/OSGI-INF/ConfigurationService.xml", "diffHunk": "@@ -37,4 +37,4 @@\n     <object class=\"org.nuxeo.runtime.services.config.ConfigurationPropertyDescriptor\" />\n   </extension-point>\n \n-</component>\n\\ No newline at end of file\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzOTc4Nw==", "bodyText": "Pushed by mistake, already fixed (did not cleanup anything that was modified later on with actual code changes)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470039787", "createdAt": "2020-08-13T15:31:29Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/resources/OSGI-INF/ConfigurationService.xml", "diffHunk": "@@ -37,4 +37,4 @@\n     <object class=\"org.nuxeo.runtime.services.config.ConfigurationPropertyDescriptor\" />\n   </extension-point>\n \n-</component>\n\\ No newline at end of file\n+</component>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNTc3MQ=="}, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjk4NjI1OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1ODowM1rOHAPfbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1ODowM1rOHAPfbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNTg1Mw==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470015853", "createdAt": "2020-08-13T14:58:03Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/pom.xml", "diffHunk": "@@ -56,4 +56,4 @@\n     </resources>\n   </build>\n \n-</project>\n\\ No newline at end of file\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjk4NzEzOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/main/resources/logback-test.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1ODoxNVrOHAPf-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1ODoxNVrOHAPf-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNTk5Mg==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470015992", "createdAt": "2020-08-13T14:58:15Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/main/resources/logback-test.xml", "diffHunk": "@@ -11,4 +11,4 @@\n   <root level=\"warn\">\n     <appender-ref ref=\"STDOUT\" />\n   </root>\n-</configuration>\n\\ No newline at end of file\n+</configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjk4NzI4OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/main/resources/isolated-server.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1ODoxOFrOHAPgGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1ODoxOFrOHAPgGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNjAyNw==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470016027", "createdAt": "2020-08-13T14:58:18Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/main/resources/isolated-server.xml", "diffHunk": "@@ -4,4 +4,4 @@\n \t\tpoint=\"locators\">\n \t\t<locator domain=\"org.nuxeo\" exist=\"false\" remote=\"false\" />\n \t</extension>\n-</component>\n\\ No newline at end of file\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjk4NzU0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1ODoyMVrOHAPgSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1ODoyMVrOHAPgSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNjA3NQ==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470016075", "createdAt": "2020-08-13T14:58:21Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesLoader.java", "diffHunk": "@@ -144,4 +144,4 @@ protected Module onModule() {\n         };\n     }\n \n-}\n\\ No newline at end of file\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjk4ODAwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/Deploys.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1ODoyNlrOHAPglw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1ODoyNlrOHAPglw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNjE1MQ==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470016151", "createdAt": "2020-08-13T14:58:26Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/Deploys.java", "diffHunk": "@@ -45,4 +45,4 @@\n \n     Deploy[] value();\n \n-}\n\\ No newline at end of file\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjk5OTQ3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationMockFeature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowMDo0M1rOHAPndQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowMDo0M1rOHAPndQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNzkwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class RuntimeInitializationMockFeature implements RunnerFeature {\n          \n          \n            \n            public class RuntimeInitializationErrorMockFeature implements RunnerFeature {\n          \n      \n    \n    \n  \n\nMaybe? To make it clear it adds/generates errors.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470017909", "createdAt": "2020-08-13T15:00:43Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationMockFeature.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+\n+import org.nuxeo.runtime.RuntimeMessage.Level;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RunnerFeature;\n+\n+import com.google.inject.Binder;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeInitializationMockFeature implements RunnerFeature {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306dc46b24bd780d4b48500f9fee14c097ef5d1c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzAwNjUxOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowMTo0MVrOHAPrLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo1NDo1OVrOHAR5eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxODg2Mg==", "bodyText": "Worth checking there are no messages?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470018862", "createdAt": "2020-08-13T15:01:41Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    public void testDeploymentPreprocessorErrors() throws Exception {\n+        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306dc46b24bd780d4b48500f9fee14c097ef5d1c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1NTI5MA==", "bodyText": "Was indeed worth checking: some messages have been ignored, some not.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470055290", "createdAt": "2020-08-13T15:54:59Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    public void testDeploymentPreprocessorErrors() throws Exception {\n+        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxODg2Mg=="}, "originalCommit": {"oid": "306dc46b24bd780d4b48500f9fee14c097ef5d1c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzAwNzIyOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowMTo0OFrOHAPrkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowMTo0OFrOHAPrkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxODk2MA==", "bodyText": "Not used.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470018960", "createdAt": "2020-08-13T15:01:48Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306dc46b24bd780d4b48500f9fee14c097ef5d1c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzAyNjczOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowNjoxNlrOHAP3rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTowNjoxNlrOHAP3rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMjA2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(List.of(), Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING));\n          \n          \n            \n                    assertTrue(Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING).isEmpty());\n          \n      \n    \n    \n  \n\nSame for others assertEquals(List.of(), ...)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470022062", "createdAt": "2020-08-13T15:06:16Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "diffHunk": "@@ -47,18 +50,111 @@ public void testContributions() throws Exception {\n         // do nothing\n     }\n \n+    protected void checkDupe(boolean detected) {\n+        List<String> errors = Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR);\n+        if (detected) {\n+            assertEquals(List.of(\"Duplicate component name: service:my.comp2\"), errors);\n+        } else {\n+            assertEquals(0, errors.size());\n+        }\n+    }\n+\n     @Test\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n-    @Ignore(\"Deactivated for now since duplicate contributions are still allowed.\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\")\n     public void testContributionsWithDuplicateComponent() throws Exception {\n-        boolean success = false;\n-        try {\n-            hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\");\n-            success = true;\n-        } catch (AssertionError e) {\n-            // OK.\n-        }\n-        assertFalse(\"An exception should have been raised.\", success);\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentSameFile() throws Exception {\n+        // dupe annotation on tests not detected (?)\n+        checkDupe(false);\n     }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentSameFileHotReload() throws Exception {\n+        hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\");\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentHotReload() throws Exception {\n+        hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\");\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:invalid-component-activate-message.xml\")\n+    public void testInvalidComponentActivateMessage() throws Exception {\n+        assertEquals(List.of(\"Error message on activate\"),\n+                Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR));\n+        assertEquals(List.of(\"Warn message on activate\"),\n+                Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING));\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:invalid-component.xml\")\n+    public void testInvalidComponent() throws Exception {\n+        assertEquals(List.of(\n+                \"Bad extension declaration (no target attribute specified) on component 'service:invalid.comp'\",\n+                \"Warning: target extension point 'xp' of 'invalid.comp' is unknown. Check your extension in component service:invalid.comp\",\n+                \"Warning: target extension point 'null' of 'invalid.comp' is unknown. Check your extension in component service:invalid.comp\"),\n+                Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR));\n+        assertEquals(List.of(), Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzA0OTgwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToxMTozM1rOHAQFxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToxMTozM1rOHAQFxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyNTY2OA==", "bodyText": "Seems that all the throws Exception in methods not using the hotDeployer can be removed.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470025668", "createdAt": "2020-08-13T15:11:33Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "diffHunk": "@@ -47,18 +50,111 @@ public void testContributions() throws Exception {\n         // do nothing\n     }\n \n+    protected void checkDupe(boolean detected) {\n+        List<String> errors = Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR);\n+        if (detected) {\n+            assertEquals(List.of(\"Duplicate component name: service:my.comp2\"), errors);\n+        } else {\n+            assertEquals(0, errors.size());\n+        }\n+    }\n+\n     @Test\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n-    @Ignore(\"Deactivated for now since duplicate contributions are still allowed.\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\")\n     public void testContributionsWithDuplicateComponent() throws Exception {\n-        boolean success = false;\n-        try {\n-            hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\");\n-            success = true;\n-        } catch (AssertionError e) {\n-            // OK.\n-        }\n-        assertFalse(\"An exception should have been raised.\", success);\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentSameFile() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzA4OTU1OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMDowNVrOHAQd9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMDowNVrOHAQd9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMTg2MA==", "bodyText": "Unused.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470031860", "createdAt": "2020-08-13T15:20:05Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzA5OTY5OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMjoxMlrOHAQkPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMjoxMlrOHAQkPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzQ2OA==", "bodyText": "I would have linked to #getMessages(Level).", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470033468", "createdAt": "2020-08-13T15:22:12Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -27,26 +31,57 @@\n  */\n public interface RuntimeMessageHandler {\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages strings, filtered by given level.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Level level);\n+\n+    /**\n+     * Returns all messages strings, filtered by given predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzA5OTk5OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMjoxNVrOHAQkaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzoxNDowMlrOHAU_jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzUxMg==", "bodyText": "What about putting the feature as a static class here? It will improve readability.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470033512", "createdAt": "2020-08-13T15:22:15Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    public void testDeploymentPreprocessorErrors() throws Exception {\n+        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEwNTk5Ng==", "bodyText": "I reverted that change as maven test fails on FeaturesLoader usage of the static inner class:\njava.lang.IllegalAccessException: class org.nuxeo.runtime.test.runner.FeaturesLoader$Holder cannot access a member of class org.nuxeo.runtime.RuntimeInitializationPreprocessorTest$ErrorFeature with modifiers \"public\"\n\tat java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:361)\n\tat java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:591)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)\n\tat org.nuxeo.runtime.test.runner.FeaturesLoader$Holder.<init>(FeaturesLoader.java:54)\n\tat org.nuxeo.runtime.test.runner.FeaturesLoader.loadFeature(FeaturesLoader.java:124)\n\tat org.nuxeo.runtime.test.runner.FeaturesLoader.loadFeatures(FeaturesLoader.java:100)\n\tat org.nuxeo.runtime.test.runner.FeaturesRunner.<init>(FeaturesRunner.java:106)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470105996", "createdAt": "2020-08-13T17:14:02Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    public void testDeploymentPreprocessorErrors() throws Exception {\n+        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzUxMg=="}, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzEwMDE5OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMjoxOVrOHAQkjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMjoxOVrOHAQkjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzU1MA==", "bodyText": "I would have linked to #getMessages(Level).", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470033550", "createdAt": "2020-08-13T15:22:19Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -27,26 +31,57 @@\n  */\n public interface RuntimeMessageHandler {\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages strings, filtered by given level.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Level level);\n+\n+    /**\n+     * Returns all messages strings, filtered by given predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzEwOTU3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTestComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyNDoyN1rOHAQqPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyNDoyN1rOHAQqPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzNTAwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (\"fail\".equals(actionType) && !\"activate\".equals(actionTypeOn)) { // error at activation will bubble up\n          \n          \n            \n                                                                                         // and will not be caught by message\n          \n          \n            \n                                                                                         // handler --> skip it\n          \n          \n            \n                        throw new RuntimeException(\"Fail on \" + actionTypeOn);\n          \n          \n            \n                    // error at activation will bubble up and will not be caught by message handler --> skip it\n          \n          \n            \n                    if (\"fail\".equals(actionType) && !\"activate\".equals(actionTypeOn)) { \n          \n          \n            \n                        throw new RuntimeException(\"Fail on \" + actionTypeOn);", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470035004", "createdAt": "2020-08-13T15:24:27Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTestComponent.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import org.nuxeo.runtime.RuntimeMessage.Level;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.ComponentInstance;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeInitializationTestComponent extends DefaultComponent {\n+\n+    protected String actionType;\n+\n+    protected String actionTypeOn;\n+\n+    @Override\n+    public void activate(ComponentContext context) {\n+        actionType = (String) context.getPropertyValue(\"actionType\");\n+        actionTypeOn = (String) context.getPropertyValue(\"actionTypeOn\");\n+\n+        actOn(\"activate\");\n+    }\n+\n+    @Override\n+    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n+        actOn(\"register\");\n+    }\n+\n+    @Override\n+    public void start(ComponentContext context) {\n+        actOn(\"start\");\n+    }\n+\n+    protected void actOn(String action) {\n+        if (!action.equals(actionTypeOn)) {\n+            return;\n+        }\n+        if (\"fail\".equals(actionType) && !\"activate\".equals(actionTypeOn)) { // error at activation will bubble up\n+                                                                             // and will not be caught by message\n+                                                                             // handler --> skip it\n+            throw new RuntimeException(\"Fail on \" + actionTypeOn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzIwMDAxOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0NjoxNFrOHARi-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzo0ODozNVrOHAq8OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTUyOA==", "bodyText": "I don't like null,  they are often error prone. What do you think about moving the content of this method in the activate method?\nAs it we drop the null thing + we have the full error management (with the early return) at the same place.\nWdyt?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470049528", "createdAt": "2020-08-13T15:46:14Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,8 +343,8 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n-            throw e;\n+            Framework.getRuntime().getMessageHandler().addMessage(Level.ERROR, msg);\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2OTUwOQ==", "bodyText": "Ok but if so, it appears even more consistent to catch an error at component activation too... (as all the logics are in the same method one after the other).\nThat will change the behaviour described in the RuntimeInitializationTestComponent (see \"error at activation will bubble up and will not be caught by message handler\" in my test comments).\nWe would have in the final RegistrationInfo#activate method the following process:\n\ntry/catch on component instantiation (add error to runtime if so and return)\ntry/catch on activation (new behaviour: add error to runtime if so and return instead of bubbling up the error)\ntry/catch on each of the extensions contributions\ntry/catch on each of the pending contributions\n\nWDYT?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470069509", "createdAt": "2020-08-13T16:17:45Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,8 +343,8 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n-            throw e;\n+            Framework.getRuntime().getMessageHandler().addMessage(Level.ERROR, msg);\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTUyOA=="}, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3MjI0Mw==", "bodyText": "I will include the change so that you can see what it looks like, i can revert it if we're not happy with it or if there are unexpected impacts.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470072243", "createdAt": "2020-08-13T16:22:26Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,8 +343,8 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n-            throw e;\n+            Framework.getRuntime().getMessageHandler().addMessage(Level.ERROR, msg);\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTUyOA=="}, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3ODc5Mg==", "bodyText": "(pushed)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470078792", "createdAt": "2020-08-13T16:32:49Z", "author": {"login": "atchertchian"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,8 +343,8 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n-            throw e;\n+            Framework.getRuntime().getMessageHandler().addMessage(Level.ERROR, msg);\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTUyOA=="}, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2NTU5Mw==", "bodyText": "I like it \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470465593", "createdAt": "2020-08-14T07:48:35Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,8 +343,8 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n-            throw e;\n+            Framework.getRuntime().getMessageHandler().addMessage(Level.ERROR, msg);\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTUyOA=="}, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDEyNzM2OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODo1NjoxMlrOHAtARQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODo1NjoxMlrOHAtARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5OTM5Nw==", "bodyText": "Nice, I didn't realize this had been added in Java 11, it's indeed cleaner-looking than .toArray(new Extension[0])", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470499397", "createdAt": "2020-08-14T08:56:12Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -574,15 +579,24 @@ public String getImplementation() {\n         return implementation;\n     }\n \n-    public void checkExtensions() {\n+    /**\n+     * Checks extensions and returns only valid ones.\n+     *\n+     * @since 11.3\n+     */\n+    protected Extension[] checkExtensions() {\n+        var validExtensions = new ArrayList<Extension>();\n         for (ExtensionImpl xt : extensions) {\n             if (xt.target == null) {\n                 String msg = String.format(\n-                        \"Bad extension declaration (no target attribute specified) on component 's%'\", getName());\n-                Framework.getRuntime().getMessageHandler().addMessage(Level.WARNING, msg);\n+                        \"Bad extension declaration (no target attribute specified) on component '%s'\", getName());\n+                Framework.getRuntime().getMessageHandler().addMessage(Level.ERROR, msg);\n                 continue;\n+            } else {\n+                validExtensions.add(xt);\n             }\n         }\n+        return validExtensions.toArray(Extension[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c4b4760dbddc1cae54672ea0d79bdb8bba7d2e"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4389, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}