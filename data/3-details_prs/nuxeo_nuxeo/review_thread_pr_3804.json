{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDY1MTYx", "number": 3804, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTozOTo0MFrODlAtQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTozOTo0MFrODlAtQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTM1NDkxOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTozOTo0MFrOFxp9zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoxMDo1N1rOFxusgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxMjEwOA==", "bodyText": "Can you try/catch readTree call?", "url": "https://github.com/nuxeo/nuxeo/pull/3804#discussion_r387612108", "createdAt": "2020-03-04T11:39:40Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java", "diffHunk": "@@ -56,15 +64,30 @@ public final boolean accept(Class<?> clazz, Type genericType, MediaType mediatyp\n \n     @Override\n     public void write(Enriched<EntityType> enrichable, JsonGenerator jg) {\n-        try {\n-            write(jg, enrichable.getEntity());\n+        try (TokenBuffer tb = new TokenBuffer(MAPPER, false)) {\n+            // Write to a temporary output in case of exception during write()\n+            tb.writeStartObject();\n+            write(tb, enrichable.getEntity());\n+            tb.writeEndObject();\n+            tb.flush();\n+            // Add the complete, well-formed content to the real output\n+            try (JsonParser parser = tb.asParser()) {\n+                parser.nextToken(); // ignoring START_OBJECT\n+                while (parser.nextToken() == FIELD_NAME) {\n+                    jg.copyCurrentStructure(parser);\n+                }\n+                if (parser.currentToken() != END_OBJECT) {\n+                    log.error(\"Enricher: {} failed on current token: {}, output to write: {}\", name,\n+                            parser.currentToken(), MAPPER.readTree(tb.asParser()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce297babe90dce493b971927603e21dcb802d8df"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4OTYwMg==", "bodyText": "added it like so: #3799 (comment)", "url": "https://github.com/nuxeo/nuxeo/pull/3804#discussion_r387689602", "createdAt": "2020-03-04T14:10:57Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-core/nuxeo-core-io/src/main/java/org/nuxeo/ecm/core/io/marshallers/json/enrichers/AbstractJsonEnricher.java", "diffHunk": "@@ -56,15 +64,30 @@ public final boolean accept(Class<?> clazz, Type genericType, MediaType mediatyp\n \n     @Override\n     public void write(Enriched<EntityType> enrichable, JsonGenerator jg) {\n-        try {\n-            write(jg, enrichable.getEntity());\n+        try (TokenBuffer tb = new TokenBuffer(MAPPER, false)) {\n+            // Write to a temporary output in case of exception during write()\n+            tb.writeStartObject();\n+            write(tb, enrichable.getEntity());\n+            tb.writeEndObject();\n+            tb.flush();\n+            // Add the complete, well-formed content to the real output\n+            try (JsonParser parser = tb.asParser()) {\n+                parser.nextToken(); // ignoring START_OBJECT\n+                while (parser.nextToken() == FIELD_NAME) {\n+                    jg.copyCurrentStructure(parser);\n+                }\n+                if (parser.currentToken() != END_OBJECT) {\n+                    log.error(\"Enricher: {} failed on current token: {}, output to write: {}\", name,\n+                            parser.currentToken(), MAPPER.readTree(tb.asParser()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxMjEwOA=="}, "originalCommit": {"oid": "ce297babe90dce493b971927603e21dcb802d8df"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4299, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}