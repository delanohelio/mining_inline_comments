{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNDg1NjIx", "number": 4221, "title": "fix-NXP-29286-filemanager-import-overwrite-parameter", "bodyText": "PR created from https://qa.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-mschoentgen/4/", "createdAt": "2020-07-16T20:21:14Z", "url": "https://github.com/nuxeo/nuxeo/pull/4221", "merged": true, "mergeCommit": {"oid": "82585cb126952e59c7ee0208f5ee1b79f7a38e6e"}, "closed": true, "closedAt": "2020-07-24T08:21:58Z", "author": {"login": "nuxeojenkins"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1u3rZgFqTQ1MDQzOTQxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3_fK9gFqTQ1NDcwNDIxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDM5NDEz", "url": "https://github.com/nuxeo/nuxeo/pull/4221#pullrequestreview-450439413", "createdAt": "2020-07-17T07:40:31Z", "commit": {"oid": "21aa96fc4a818b3aba4ef8d1b8a030266a35f723"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo0MDozMVrOGzIuLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzo0MDozMVrOGzIuLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MzQ1Mw==", "bodyText": "I think we want overwite || overwrite here?", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r456273453", "createdAt": "2020-07-17T07:40:31Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/FileManagerImport.java", "diffHunk": "@@ -82,7 +88,7 @@ public DocumentModel run(Blob blob) throws OperationException, IOException {\n         DocumentModel currentDocument = getCurrentDocument();\n         String path = currentDocument.getPathAsString();\n         FileImporterContext fileCreationContext = FileImporterContext.builder(session, blob, path)\n-                                                                     .overwrite(overwite)\n+                                                                     .overwrite(overwrite)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21aa96fc4a818b3aba4ef8d1b8a030266a35f723"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21aa96fc4a818b3aba4ef8d1b8a030266a35f723", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/21aa96fc4a818b3aba4ef8d1b8a030266a35f723", "committedDate": "2020-07-16T15:06:50Z", "message": "NXP-29286: rename the parameter \"overwite\" of FileManager.Import to \"overwrite\""}, "afterCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/c1702cf6c38b2060e2c91385079ca54c553497c4", "committedDate": "2020-07-17T12:08:48Z", "message": "NXP-29286: rename the parameter \"overwite\" of FileManager.Import to \"overwrite\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjEwNzky", "url": "https://github.com/nuxeo/nuxeo/pull/4221#pullrequestreview-451610792", "createdAt": "2020-07-20T13:35:36Z", "commit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzozNTozNlrOG0M0RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzo0MjoyNVrOG0NNLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4OTEyNQ==", "bodyText": "Better to use Folder as type for a parent document :)", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r457389125", "createdAt": "2020-07-20T13:35:36Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+@Deploy(\"org.nuxeo.ecm.platform.webapp.types\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected DocumentModel parent;\n+\n+    @Before\n+    public void before() {\n+        parent = session.createDocumentModel(\"/\", \"foo\", \"File\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5MTQwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Map<String, Serializable> params = new HashMap<>();\n          \n          \n            \n                        params.put(\"title\", \"bar\");\n          \n          \n            \n                        Map<String, Serializable> params = Map.of(\"title\", \"bar\");\n          \n      \n    \n    \n  \n\nSame for other Maps.", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r457391407", "createdAt": "2020-07-20T13:37:59Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+@Deploy(\"org.nuxeo.ecm.platform.webapp.types\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected DocumentModel parent;\n+\n+    @Before\n+    public void before() {\n+        parent = session.createDocumentModel(\"/\", \"foo\", \"File\");\n+        parent = session.createDocument(parent);\n+    }\n+\n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5NTUwMA==", "bodyText": "Tests are on error on your PR (https://jenkins.platform.dev.nuxeo.com/blue/organizations/jenkins/nuxeo%2Fnuxeo/detail/PR-4221/2/pipeline):\n[2020-07-17T16:23:51.496Z] [ERROR] testFileImport(org.nuxeo.ecm.automation.core.operations.services.TestFileManagerImport)  Time elapsed: 0.049 s  <<< ERROR!\n[2020-07-17T16:23:51.496Z] org.nuxeo.ecm.automation.InvalidChainException: Cannot find any valid path in operation chain - no method found for operation 'FileManager.Import' and for first input type 'org.nuxeo.ecm.core.api.impl.DocumentModelImpl'\n\nThe operation input is a Blob, not the parent document. The parent document should be passed as a currentDocument context variable.\nSee TestFileManagerImportWithProperties#testNoteCreationWithProperties for instance.", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r457395500", "createdAt": "2020-07-20T13:42:25Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+@Deploy(\"org.nuxeo.ecm.platform.webapp.types\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected DocumentModel parent;\n+\n+    @Before\n+    public void before() {\n+        parent = session.createDocumentModel(\"/\", \"foo\", \"File\");\n+        parent = session.createDocument(parent);\n+    }\n+\n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzIzNDkz", "url": "https://github.com/nuxeo/nuxeo/pull/4221#pullrequestreview-451723493", "createdAt": "2020-07-20T15:35:04Z", "commit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTozNTowNFrOG0Tn_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo0MzoyOFrOG0UDAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMDY3MA==", "bodyText": "Couldn't this be dealt with the following code?\n@Param(name = \"overwrite\", required = false, alias = \"overwite\")\nprotected Boolean overwrite = false;\n\nThen we could have simply:\n.overwrite(overwrite)", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r457500670", "createdAt": "2020-07-20T15:35:04Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/FileManagerImport.java", "diffHunk": "@@ -82,7 +88,7 @@ public DocumentModel run(Blob blob) throws OperationException, IOException {\n         DocumentModel currentDocument = getCurrentDocument();\n         String path = currentDocument.getPathAsString();\n         FileImporterContext fileCreationContext = FileImporterContext.builder(session, blob, path)\n-                                                                     .overwrite(overwite)\n+                                                                     .overwrite(overwite || overwrite)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwNDM1MQ==", "bodyText": "There is no title parameter for the FileManagerImport operation.", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r457504351", "createdAt": "2020-07-20T15:39:20Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+@Deploy(\"org.nuxeo.ecm.platform.webapp.types\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected DocumentModel parent;\n+\n+    @Before\n+    public void before() {\n+        parent = session.createDocumentModel(\"/\", \"foo\", \"File\");\n+        parent = session.createDocument(parent);\n+    }\n+\n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwNDcwOA==", "bodyText": "I guess setting a description is not strictly needed here.", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r457504708", "createdAt": "2020-07-20T15:39:49Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+@Deploy(\"org.nuxeo.ecm.platform.webapp.types\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected DocumentModel parent;\n+\n+    @Before\n+    public void before() {\n+        parent = session.createDocumentModel(\"/\", \"foo\", \"File\");\n+        parent = session.createDocument(parent);\n+    }\n+\n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertEquals(\"File\", doc.getType());\n+            assertEquals(\"bar\", doc.getName());\n+            assertEquals(\"/foo/bar\", doc.getPathAsString());\n+            assertEquals(\"bar\", doc.getTitle());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportOverwrite() throws OperationException {\n+        // first create a file\n+        DocumentModel file = session.createDocumentModel(parent.getPathAsString(), \"bar\", \"File\");\n+        file.setPropertyValue(\"dc:title\", \"bar\");\n+        file.setPropertyValue(\"dc:description\", \"foobar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwNTAwNw==", "bodyText": "title parameter doesn't exist", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r457505007", "createdAt": "2020-07-20T15:40:09Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+@Deploy(\"org.nuxeo.ecm.platform.webapp.types\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected DocumentModel parent;\n+\n+    @Before\n+    public void before() {\n+        parent = session.createDocumentModel(\"/\", \"foo\", \"File\");\n+        parent = session.createDocument(parent);\n+    }\n+\n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertEquals(\"File\", doc.getType());\n+            assertEquals(\"bar\", doc.getName());\n+            assertEquals(\"/foo/bar\", doc.getPathAsString());\n+            assertEquals(\"bar\", doc.getTitle());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportOverwrite() throws OperationException {\n+        // first create a file\n+        DocumentModel file = session.createDocumentModel(parent.getPathAsString(), \"bar\", \"File\");\n+        file.setPropertyValue(\"dc:title\", \"bar\");\n+        file.setPropertyValue(\"dc:description\", \"foobar\");\n+        file = session.createDocument(file);\n+        txFeature.nextTransaction();\n+\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwNjA1Mw==", "bodyText": "Could be removed since it's included by the next assertion.", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r457506053", "createdAt": "2020-07-20T15:41:27Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+@Deploy(\"org.nuxeo.ecm.platform.webapp.types\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected DocumentModel parent;\n+\n+    @Before\n+    public void before() {\n+        parent = session.createDocumentModel(\"/\", \"foo\", \"File\");\n+        parent = session.createDocument(parent);\n+    }\n+\n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertEquals(\"File\", doc.getType());\n+            assertEquals(\"bar\", doc.getName());\n+            assertEquals(\"/foo/bar\", doc.getPathAsString());\n+            assertEquals(\"bar\", doc.getTitle());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportOverwrite() throws OperationException {\n+        // first create a file\n+        DocumentModel file = session.createDocumentModel(parent.getPathAsString(), \"bar\", \"File\");\n+        file.setPropertyValue(\"dc:title\", \"bar\");\n+        file.setPropertyValue(\"dc:description\", \"foobar\");\n+        file = session.createDocument(file);\n+        txFeature.nextTransaction();\n+\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+            params.put(\"overwrite\", true);\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwNjYxNA==", "bodyText": "title param doesn't exist", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r457506614", "createdAt": "2020-07-20T15:42:08Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+@Deploy(\"org.nuxeo.ecm.platform.webapp.types\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected DocumentModel parent;\n+\n+    @Before\n+    public void before() {\n+        parent = session.createDocumentModel(\"/\", \"foo\", \"File\");\n+        parent = session.createDocument(parent);\n+    }\n+\n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertEquals(\"File\", doc.getType());\n+            assertEquals(\"bar\", doc.getName());\n+            assertEquals(\"/foo/bar\", doc.getPathAsString());\n+            assertEquals(\"bar\", doc.getTitle());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportOverwrite() throws OperationException {\n+        // first create a file\n+        DocumentModel file = session.createDocumentModel(parent.getPathAsString(), \"bar\", \"File\");\n+        file.setPropertyValue(\"dc:title\", \"bar\");\n+        file.setPropertyValue(\"dc:description\", \"foobar\");\n+        file = session.createDocument(file);\n+        txFeature.nextTransaction();\n+\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+            params.put(\"overwrite\", true);\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertEquals(file.getId(), doc.getId());\n+            assertEquals(\"File\", doc.getType());\n+            assertEquals(\"bar\", doc.getName());\n+            assertEquals(\"/foo/bar\", doc.getPathAsString());\n+            assertEquals(\"bar\", doc.getTitle());\n+            assertEquals(\"foobar\", doc.getPropertyValue(\"dc:description\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportNoOverwrite() throws OperationException {\n+        // first create a file\n+        DocumentModel file = session.createDocumentModel(parent.getPathAsString(), \"bar\", \"File\");\n+        file.setPropertyValue(\"dc:title\", \"bar\");\n+        file.setPropertyValue(\"dc:description\", \"foobar\");\n+        file = session.createDocument(file);\n+\n+        // no overwrite\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwNzQxMw==", "bodyText": "title param doesn't exist", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r457507413", "createdAt": "2020-07-20T15:43:13Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+@Deploy(\"org.nuxeo.ecm.platform.webapp.types\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected DocumentModel parent;\n+\n+    @Before\n+    public void before() {\n+        parent = session.createDocumentModel(\"/\", \"foo\", \"File\");\n+        parent = session.createDocument(parent);\n+    }\n+\n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertEquals(\"File\", doc.getType());\n+            assertEquals(\"bar\", doc.getName());\n+            assertEquals(\"/foo/bar\", doc.getPathAsString());\n+            assertEquals(\"bar\", doc.getTitle());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportOverwrite() throws OperationException {\n+        // first create a file\n+        DocumentModel file = session.createDocumentModel(parent.getPathAsString(), \"bar\", \"File\");\n+        file.setPropertyValue(\"dc:title\", \"bar\");\n+        file.setPropertyValue(\"dc:description\", \"foobar\");\n+        file = session.createDocument(file);\n+        txFeature.nextTransaction();\n+\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+            params.put(\"overwrite\", true);\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertEquals(file.getId(), doc.getId());\n+            assertEquals(\"File\", doc.getType());\n+            assertEquals(\"bar\", doc.getName());\n+            assertEquals(\"/foo/bar\", doc.getPathAsString());\n+            assertEquals(\"bar\", doc.getTitle());\n+            assertEquals(\"foobar\", doc.getPropertyValue(\"dc:description\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportNoOverwrite() throws OperationException {\n+        // first create a file\n+        DocumentModel file = session.createDocumentModel(parent.getPathAsString(), \"bar\", \"File\");\n+        file.setPropertyValue(\"dc:title\", \"bar\");\n+        file.setPropertyValue(\"dc:description\", \"foobar\");\n+        file = session.createDocument(file);\n+\n+        // no overwrite\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertNotEquals(file.getId(), doc.getId());\n+            assertEquals(\"File\", doc.getType());\n+            assertNotEquals(\"bar\", doc.getName());\n+            assertNotEquals(\"/foo/bar\", doc.getPathAsString());\n+            assertEquals(\"bar\", doc.getTitle());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportDeprecatedOverwite() throws OperationException {\n+        // first create a file\n+        DocumentModel file = session.createDocumentModel(parent.getPathAsString(), \"bar\", \"File\");\n+        file.setPropertyValue(\"dc:title\", \"bar\");\n+        file.setPropertyValue(\"dc:description\", \"foobar\");\n+        file = session.createDocument(file);\n+        txFeature.nextTransaction();\n+\n+        // the deprecated \"overwite\" parameter should still be taken into account\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwNzU4Ng==", "bodyText": "Could be removed since it's included by the next assertion.", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r457507586", "createdAt": "2020-07-20T15:43:28Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+@Deploy(\"org.nuxeo.ecm.platform.webapp.types\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected DocumentModel parent;\n+\n+    @Before\n+    public void before() {\n+        parent = session.createDocumentModel(\"/\", \"foo\", \"File\");\n+        parent = session.createDocument(parent);\n+    }\n+\n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertEquals(\"File\", doc.getType());\n+            assertEquals(\"bar\", doc.getName());\n+            assertEquals(\"/foo/bar\", doc.getPathAsString());\n+            assertEquals(\"bar\", doc.getTitle());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportOverwrite() throws OperationException {\n+        // first create a file\n+        DocumentModel file = session.createDocumentModel(parent.getPathAsString(), \"bar\", \"File\");\n+        file.setPropertyValue(\"dc:title\", \"bar\");\n+        file.setPropertyValue(\"dc:description\", \"foobar\");\n+        file = session.createDocument(file);\n+        txFeature.nextTransaction();\n+\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+            params.put(\"overwrite\", true);\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertEquals(file.getId(), doc.getId());\n+            assertEquals(\"File\", doc.getType());\n+            assertEquals(\"bar\", doc.getName());\n+            assertEquals(\"/foo/bar\", doc.getPathAsString());\n+            assertEquals(\"bar\", doc.getTitle());\n+            assertEquals(\"foobar\", doc.getPropertyValue(\"dc:description\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportNoOverwrite() throws OperationException {\n+        // first create a file\n+        DocumentModel file = session.createDocumentModel(parent.getPathAsString(), \"bar\", \"File\");\n+        file.setPropertyValue(\"dc:title\", \"bar\");\n+        file.setPropertyValue(\"dc:description\", \"foobar\");\n+        file = session.createDocument(file);\n+\n+        // no overwrite\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertNotEquals(file.getId(), doc.getId());\n+            assertEquals(\"File\", doc.getType());\n+            assertNotEquals(\"bar\", doc.getName());\n+            assertNotEquals(\"/foo/bar\", doc.getPathAsString());\n+            assertEquals(\"bar\", doc.getTitle());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportDeprecatedOverwite() throws OperationException {\n+        // first create a file\n+        DocumentModel file = session.createDocumentModel(parent.getPathAsString(), \"bar\", \"File\");\n+        file.setPropertyValue(\"dc:title\", \"bar\");\n+        file.setPropertyValue(\"dc:description\", \"foobar\");\n+        file = session.createDocument(file);\n+        txFeature.nextTransaction();\n+\n+        // the deprecated \"overwite\" parameter should still be taken into account\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(parent);\n+            Map<String, Serializable> params = new HashMap<>();\n+            params.put(\"title\", \"bar\");\n+            params.put(\"overwite\", true);\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4"}, "originalPosition": 164}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1702cf6c38b2060e2c91385079ca54c553497c4", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/c1702cf6c38b2060e2c91385079ca54c553497c4", "committedDate": "2020-07-17T12:08:48Z", "message": "NXP-29286: rename the parameter \"overwite\" of FileManager.Import to \"overwrite\""}, "afterCommit": {"oid": "fb1be29e3c1f3baf2e15ad26981db9e4b7c2e27a", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/fb1be29e3c1f3baf2e15ad26981db9e4b7c2e27a", "committedDate": "2020-07-22T16:08:23Z", "message": "NXP-29286: rename the parameter \"overwite\" of FileManager.Import to \"overwrite\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzOTU0ODYx", "url": "https://github.com/nuxeo/nuxeo/pull/4221#pullrequestreview-453954861", "createdAt": "2020-07-23T09:07:48Z", "commit": {"oid": "fb1be29e3c1f3baf2e15ad26981db9e4b7c2e27a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowNzo0OFrOG2CPcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToyMDo0MlrOG2Cp4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMzAwOA==", "bodyText": "= null is not needed", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r459313008", "createdAt": "2020-07-23T09:07:48Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected Blob textBlob;\n+    protected String fileName = \"foo.txt\";\n+    protected String filePath = \"/foo.txt\";\n+\n+    @Before\n+    public void before() {\n+        textBlob = Blobs.createBlob(\"foo\", \"application/octet-stream\", null, fileName);\n+    }\n+    \n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(textBlob);\n+            ctx.put(\"currentDocument\", \"/\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertEquals(\"Note\", doc.getType());\n+            assertEquals(fileName, doc.getName());\n+            assertEquals(filePath, doc.getPathAsString());\n+            assertEquals(fileName, doc.getTitle());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportNoMimeTypeCheck() throws OperationException {\n+        // mime type check is true by default, a Note should be created\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(textBlob);\n+            ctx.put(\"currentDocument\", \"/\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID);\n+            assertEquals(\"Note\", doc.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportNoNoMimeTypeCheck() throws OperationException {\n+        // no mime type check, a File should be created\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(textBlob);\n+            ctx.put(\"currentDocument\", \"/\");\n+\n+            Map<String, Serializable> params = Map.of(\"noMimeTypeCheck\", true);\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID, params);\n+            assertEquals(\"File\", doc.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportOverwrite() throws OperationException {\n+        DocumentModel file = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1be29e3c1f3baf2e15ad26981db9e4b7c2e27a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxODMzNw==", "bodyText": "I'm wondering if this test could not be removed since this case is tested by the above test.\nYou could simply include the inline comment in the above test.", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r459318337", "createdAt": "2020-07-23T09:17:52Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected Blob textBlob;\n+    protected String fileName = \"foo.txt\";\n+    protected String filePath = \"/foo.txt\";\n+\n+    @Before\n+    public void before() {\n+        textBlob = Blobs.createBlob(\"foo\", \"application/octet-stream\", null, fileName);\n+    }\n+    \n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(textBlob);\n+            ctx.put(\"currentDocument\", \"/\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            assertEquals(\"Note\", doc.getType());\n+            assertEquals(fileName, doc.getName());\n+            assertEquals(filePath, doc.getPathAsString());\n+            assertEquals(fileName, doc.getTitle());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportNoMimeTypeCheck() throws OperationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1be29e3c1f3baf2e15ad26981db9e4b7c2e27a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxODY4Ng==", "bodyText": "We usually add blank lines between fields.", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r459318686", "createdAt": "2020-07-23T09:18:32Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected Blob textBlob;\n+    protected String fileName = \"foo.txt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1be29e3c1f3baf2e15ad26981db9e4b7c2e27a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxOTc3OQ==", "bodyText": "In fact, I'm wondering if we should not keep the deprecated field, along with using an alias, just to make sure someone possibly extending this class won't have its compilation broken.\n@troger WDYT?", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r459319779", "createdAt": "2020-07-23T09:20:42Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/FileManagerImport.java", "diffHunk": "@@ -63,8 +63,8 @@\n     @Context\n     protected OperationContext context;\n \n-    @Param(name = \"overwite\", required = false)\n-    protected Boolean overwite = false;\n+    @Param(name = \"overwrite\", alias = \"overwite\", required = false)\n+    protected Boolean overwrite = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb1be29e3c1f3baf2e15ad26981db9e4b7c2e27a"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb1be29e3c1f3baf2e15ad26981db9e4b7c2e27a", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/fb1be29e3c1f3baf2e15ad26981db9e4b7c2e27a", "committedDate": "2020-07-22T16:08:23Z", "message": "NXP-29286: rename the parameter \"overwite\" of FileManager.Import to \"overwrite\""}, "afterCommit": {"oid": "863b938ba0acea9aa77ca5a82204bf7cb326e5f6", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/863b938ba0acea9aa77ca5a82204bf7cb326e5f6", "committedDate": "2020-07-23T12:40:42Z", "message": "NXP-29286: rename the parameter \"overwite\" of FileManager.Import to \"overwrite\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MDk2NTg4", "url": "https://github.com/nuxeo/nuxeo/pull/4221#pullrequestreview-454096588", "createdAt": "2020-07-23T12:51:27Z", "commit": {"oid": "863b938ba0acea9aa77ca5a82204bf7cb326e5f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjo1MToyN1rOG2JB0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjo1MToyN1rOG2JB0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQyNDIwOQ==", "bodyText": "Can you please replace this by a Java constant, aka:\nprotected static final String FILE_NAME = \"foo.txt\";\n\nSame thing for filePath -> FILE_PATH.\nThese 2 fields should be placed before the other members, at the very top of the class.", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r459424209", "createdAt": "2020-07-23T12:51:27Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected Blob textBlob;\n+\n+    protected String fileName = \"foo.txt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "863b938ba0acea9aa77ca5a82204bf7cb326e5f6"}, "originalPosition": 71}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "863b938ba0acea9aa77ca5a82204bf7cb326e5f6", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/863b938ba0acea9aa77ca5a82204bf7cb326e5f6", "committedDate": "2020-07-23T12:40:42Z", "message": "NXP-29286: rename the parameter \"overwite\" of FileManager.Import to \"overwrite\""}, "afterCommit": {"oid": "ef8f4bf49cc8124d4e695a8ec0df2640aa600665", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/ef8f4bf49cc8124d4e695a8ec0df2640aa600665", "committedDate": "2020-07-23T13:00:11Z", "message": "NXP-29286: rename the parameter \"overwite\" of FileManager.Import to \"overwrite\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTM2Mzky", "url": "https://github.com/nuxeo/nuxeo/pull/4221#pullrequestreview-454136392", "createdAt": "2020-07-23T13:35:54Z", "commit": {"oid": "ef8f4bf49cc8124d4e695a8ec0df2640aa600665"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTQxNzIx", "url": "https://github.com/nuxeo/nuxeo/pull/4221#pullrequestreview-454141721", "createdAt": "2020-07-23T13:41:45Z", "commit": {"oid": "ef8f4bf49cc8124d4e695a8ec0df2640aa600665"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0MTo0NVrOG2LEIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0MTo0NVrOG2LEIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1NzU3MA==", "bodyText": "I would have put the comment near the assertion, as in #testFileImport to be consistent :)", "url": "https://github.com/nuxeo/nuxeo/pull/4221#discussion_r459457570", "createdAt": "2020-07-23T13:41:45Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestFileManagerImport.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Micka\u00ebl Schoentgen <mschoentgen@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.automation.core.operations.services;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.AutomationService;\n+import org.nuxeo.ecm.automation.OperationContext;\n+import org.nuxeo.ecm.automation.OperationException;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.TransactionalFeature;\n+\n+/**\n+ * @since 11.2\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.core\")\n+@Deploy(\"org.nuxeo.ecm.automation.features\")\n+public class TestFileManagerImport {\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Inject\n+    protected AutomationService service;\n+\n+    @Inject\n+    public TransactionalFeature txFeature;\n+\n+    protected Blob textBlob;\n+\n+    @Before\n+    public void before() {\n+        textBlob = Blobs.createBlob(\"foo\", \"application/octet-stream\", null, \"foo.txt\");\n+    }\n+\n+    @Test\n+    public void testFileImport() throws OperationException {\n+        try (OperationContext ctx = new OperationContext(session)) {\n+            ctx.setInput(textBlob);\n+            ctx.put(\"currentDocument\", \"/\");\n+\n+            DocumentModel doc = (DocumentModel) service.run(ctx, FileManagerImport.ID);\n+            assertNotNull(doc);\n+            assertNotNull(doc.getId());\n+            // noMimeTypeCheck is false by default, thus a Note should have been created\n+            assertEquals(\"Note\", doc.getType());\n+            assertEquals(\"foo.txt\", doc.getName());\n+            assertEquals(\"/foo.txt\", doc.getPathAsString());\n+            assertEquals(\"foo.txt\", doc.getTitle());\n+        }\n+    }\n+\n+    @Test\n+    public void testFileImportNoNoMimeTypeCheck() throws OperationException {\n+        // no mime type check, a File should be created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef8f4bf49cc8124d4e695a8ec0df2640aa600665"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c2b4d8293288001f0fa005d081515d1c05f4826", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/3c2b4d8293288001f0fa005d081515d1c05f4826", "committedDate": "2020-07-23T15:47:36Z", "message": "NXP-29286: rename the parameter \"overwite\" of FileManager.Import to \"overwrite\""}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef8f4bf49cc8124d4e695a8ec0df2640aa600665", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/ef8f4bf49cc8124d4e695a8ec0df2640aa600665", "committedDate": "2020-07-23T13:00:11Z", "message": "NXP-29286: rename the parameter \"overwite\" of FileManager.Import to \"overwrite\""}, "afterCommit": {"oid": "3c2b4d8293288001f0fa005d081515d1c05f4826", "author": {"user": null}, "url": "https://github.com/nuxeo/nuxeo/commit/3c2b4d8293288001f0fa005d081515d1c05f4826", "committedDate": "2020-07-23T15:47:36Z", "message": "NXP-29286: rename the parameter \"overwite\" of FileManager.Import to \"overwrite\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDU1ODc1", "url": "https://github.com/nuxeo/nuxeo/pull/4221#pullrequestreview-454455875", "createdAt": "2020-07-23T20:04:30Z", "commit": {"oid": "3c2b4d8293288001f0fa005d081515d1c05f4826"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NzA0MjE0", "url": "https://github.com/nuxeo/nuxeo/pull/4221#pullrequestreview-454704214", "createdAt": "2020-07-24T08:09:59Z", "commit": {"oid": "3c2b4d8293288001f0fa005d081515d1c05f4826"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4984, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}