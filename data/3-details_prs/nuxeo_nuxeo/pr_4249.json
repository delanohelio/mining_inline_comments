{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MzMyMTQ1", "number": 4249, "title": "NXP-29504: runtime startup errors/warnings", "bodyText": "", "createdAt": "2020-08-10T07:35:55Z", "url": "https://github.com/nuxeo/nuxeo/pull/4249", "merged": true, "mergeCommit": {"oid": "1a3fd48e6aa0257824ef688c6561324db4ba171b"}, "closed": true, "closedAt": "2020-08-14T09:49:16Z", "author": {"login": "atchertchian"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9lF3AgBqjM2Mzk2MjY1Njk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-wvRmAFqTQ2NzQxNjExNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84cd8027f30d7afe59a65ec0c76d73f10c9c1962", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/84cd8027f30d7afe59a65ec0c76d73f10c9c1962", "committedDate": "2020-08-10T07:31:53Z", "message": "dupe detection + messages mgmt (wip)"}, "afterCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/36ee98457b7e58c67635f0f971b59d34b97d14e0", "committedDate": "2020-08-10T16:47:34Z", "message": "NXP-29504: adapt usage of runtime messages api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NDE3Njc5", "url": "https://github.com/nuxeo/nuxeo/pull/4249#pullrequestreview-464417679", "createdAt": "2020-08-10T17:09:05Z", "commit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzowOTowNlrOG-Xruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzoxNzozNFrOG-X-AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MjkyMw==", "bodyText": "Shouldn't be getClass instead of ComponentManagerImpl.class?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468052923", "createdAt": "2020-08-10T17:09:06Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -63,6 +65,10 @@ public void deactivate(ComponentContext context) {\n         setModifiedNow();\n     }\n \n+    protected void addRuntimeMessage(Level level, String message) {\n+        Framework.getRuntime().getMessageHandler().addMessage(level, message, ComponentManagerImpl.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1MzQ3Nw==", "bodyText": "Can you introduce a dedicated clear method without argument and do not allow null as argument for this one?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468053477", "createdAt": "2020-08-10T17:10:06Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n+        return messages.stream()\n+                       .filter(msg -> p.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+    }\n \n-        DEACTIVATING\n+    @Override\n+    public List<String> getMessageStrings(Predicate<RuntimeMessage> predicate) {\n+        return getMessages(predicate).stream()\n+                                     .map(RuntimeMessage::getMessage)\n+                                     .collect(Collectors.collectingAndThen(Collectors.toList(),\n+                                             Collections::unmodifiableList));\n+    }\n \n+    @Override\n+    public void clear(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NDM3Nw==", "bodyText": "Can you remove the null argument possibility?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468054377", "createdAt": "2020-08-10T17:11:44Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTAyMQ==", "bodyText": "Just p doesn't work?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468055021", "createdAt": "2020-08-10T17:12:50Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source));\n+    }\n \n-        RUNNING,\n+    protected Predicate<RuntimeMessage> getFinalPredicate(Predicate<RuntimeMessage> givenPredicate) {\n+        return givenPredicate == null ? m -> true : givenPredicate;\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        final Predicate<RuntimeMessage> p = predicate == null ? m -> true : predicate;\n+        return messages.stream()\n+                       .filter(msg -> p.test(msg))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NTQ4Ng==", "bodyText": "Does it make sense to have instead/in addition an api with Class<? > as source type?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468055486", "createdAt": "2020-08-10T17:13:37Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,43 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n+    @Override\n+    public void addMessage(Level level, String message, String source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA1NzYwMQ==", "bodyText": "Forgotten System.err?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468057601", "createdAt": "2020-08-10T17:17:34Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "diffHunk": "@@ -47,18 +49,47 @@ public void testContributions() throws Exception {\n         // do nothing\n     }\n \n+    protected void checkDupe(boolean detected) {\n+        List<String> errors = Framework.getRuntime().getMessageHandler().getErrors();\n+        if (detected) {\n+            assertEquals(List.of(\"Duplicate component name: service:my.comp2\"), errors);\n+            System.err.println(Framework.getRuntime().getMessageHandler().getMessages(null).get(0).getSource());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36ee98457b7e58c67635f0f971b59d34b97d14e0", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/36ee98457b7e58c67635f0f971b59d34b97d14e0", "committedDate": "2020-08-10T16:47:34Z", "message": "NXP-29504: adapt usage of runtime messages api"}, "afterCommit": {"oid": "0a085d449719af6f5fc2f5fb5a4457ea759fa4f0", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0a085d449719af6f5fc2f5fb5a4457ea759fa4f0", "committedDate": "2020-08-11T06:50:20Z", "message": "NXP-29504: adapt usage of runtime messages api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a085d449719af6f5fc2f5fb5a4457ea759fa4f0", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0a085d449719af6f5fc2f5fb5a4457ea759fa4f0", "committedDate": "2020-08-11T06:50:20Z", "message": "NXP-29504: adapt usage of runtime messages api"}, "afterCommit": {"oid": "a66a102369d6801d2e9b2e58ee00f63be5fc6f52", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a66a102369d6801d2e9b2e58ee00f63be5fc6f52", "committedDate": "2020-08-11T06:55:36Z", "message": "NXP-29504: adapt usage of runtime messages api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a66a102369d6801d2e9b2e58ee00f63be5fc6f52", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a66a102369d6801d2e9b2e58ee00f63be5fc6f52", "committedDate": "2020-08-11T06:55:36Z", "message": "NXP-29504: adapt usage of runtime messages api"}, "afterCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "committedDate": "2020-08-11T08:45:44Z", "message": "NXP-29504: adapt usage of runtime messages api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MDQyNjY5", "url": "https://github.com/nuxeo/nuxeo/pull/4249#pullrequestreview-465042669", "createdAt": "2020-08-11T13:04:00Z", "commit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzowNDowMFrOG-2yNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzoyODoyMFrOG-3w6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MjQ4NA==", "bodyText": "Not needed.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468562484", "createdAt": "2020-08-11T13:04:00Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzAzNA==", "bodyText": "Which listener?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468563034", "createdAt": "2020-08-11T13:04:50Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MzI1Mg==", "bodyText": "Not needed, the whole class is @since 11.3.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468563252", "createdAt": "2020-08-11T13:05:09Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import java.util.logging.Level;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final ComponentManagerStep step;\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    protected final String source;\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message) {\n+        this(step, level, message, null);\n+    }\n+\n+    public RuntimeMessage(ComponentManagerStep step, Level level, String message, String source) {\n+        super();\n+        this.step = step;\n+        this.level = level;\n+        this.message = message;\n+        this.source = source;\n+    }\n+\n+    public ComponentManagerStep getStep() {\n+        return step;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        /**\n+         * Pseudo state when listener has not been called yet.\n+         *\n+         * @since 11.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2Njc5NQ==", "bodyText": "Missing Javadoc/since.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468566795", "createdAt": "2020-08-11T13:10:41Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NjkyMw==", "bodyText": "It's not a free string identifier :)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468566923", "createdAt": "2020-08-11T13:10:55Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2NzM1Mg==", "bodyText": "Predicate could be null, like for #getMessages?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468567352", "createdAt": "2020-08-11T13:11:37Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if\n+     * needed).\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message, Class<?> source);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2ODM3Nw==", "bodyText": "What if predicate is null?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468568377", "createdAt": "2020-08-11T13:13:17Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -41,12 +48,51 @@\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String, String, String, String)} or\n+     *             {@link #addMessage(RuntimeMessage)} instead. O\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n      */\n     List<String> getErrors();\n \n+    void addMessage(RuntimeMessage message);\n+\n+    /**\n+     * Adds the following message.\n+     * <p>\n+     * The source is a free string identifier allowing to distinguish between messages (and to clear them selectively if\n+     * needed).\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message, Class<?> source);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessageStrings(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Clears messages filtered by following predicate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3MzE4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                   .filter(msg -> predicate.test(msg))\n          \n          \n            \n                                   .filter(predicate)\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468573184", "createdAt": "2020-08-11T13:20:30Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,37 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n+    @Override\n+    public void addMessage(Level level, String message, Class<?> source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        return messages.stream()\n+                       .filter(msg -> predicate.test(msg))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3MzM1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    messages.removeIf(msg -> predicate.test(msg));\n          \n          \n            \n                    messages.removeIf(predicate);", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468573350", "createdAt": "2020-08-11T13:20:44Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,37 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n+    @Override\n+    public void addMessage(Level level, String message, Class<?> source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        return messages.stream()\n+                       .filter(msg -> predicate.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n+    }\n \n-        DEACTIVATING\n+    @Override\n+    public List<String> getMessageStrings(Predicate<RuntimeMessage> predicate) {\n+        return getMessages(predicate).stream()\n+                                     .map(RuntimeMessage::getMessage)\n+                                     .collect(Collectors.collectingAndThen(Collectors.toList(),\n+                                             Collections::unmodifiableList));\n+    }\n \n+    @Override\n+    public void clear(Predicate<RuntimeMessage> predicate) {\n+        messages.removeIf(msg -> predicate.test(msg));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDY1Mg==", "bodyText": "Why not using #getClass() like in other changes?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468574652", "createdAt": "2020-08-11T13:22:43Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/ComponentManagerImpl.java", "diffHunk": "@@ -501,7 +496,9 @@ public synchronized void unregisterServices(RegistrationInfo ri) {\n \n     protected static void handleError(String message, Exception e) {\n         log.error(message, e);\n-        Framework.getRuntime().getMessageHandler().addWarning(message);\n+        Framework.getRuntime()\n+                 .getMessageHandler()\n+                 .addMessage(Level.SEVERE, message, ComponentManagerImpl.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3ODUzNg==", "bodyText": "Seems not clear to me why we are using ComponentManagerImpl.class here instead of #getClass() or RegistrationInfoImpl.java.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468578536", "createdAt": "2020-08-11T13:28:20Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,7 +343,9 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n+            Framework.getRuntime()\n+                     .getMessageHandler()\n+                     .addMessage(Level.SEVERE, msg, ComponentManagerImpl.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTIwNDMz", "url": "https://github.com/nuxeo/nuxeo/pull/4249#pullrequestreview-465520433", "createdAt": "2020-08-12T00:48:47Z", "commit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDo0ODo0N1rOG_OAKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDo0ODo0N1rOG_OAKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0Mjg4OA==", "bodyText": "I'm good with using java.util.logging.Level in this API, as it's a JDK class.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468942888", "createdAt": "2020-08-12T00:48:47Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/DefaultComponent.java", "diffHunk": "@@ -63,6 +65,10 @@ public void deactivate(ComponentContext context) {\n         setModifiedNow();\n     }\n \n+    protected void addRuntimeMessage(Level level, String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTIyNTYy", "url": "https://github.com/nuxeo/nuxeo/pull/4249#pullrequestreview-465522562", "createdAt": "2020-08-12T00:56:19Z", "commit": {"oid": "afb3b63f41ae2805772e93cfe70ce7a6123d7320"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDo1NjoxOVrOG_OH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMDo1NjoxOVrOG_OH4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0NDg2Nw==", "bodyText": "I know it's a refactoring of pre-existing code, but FYI since Java 10 you can directly do .collect(Collectors.toUnmodifiableList())", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r468944867", "createdAt": "2020-08-12T00:56:19Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandlerImpl.java", "diffHunk": "@@ -86,56 +89,37 @@ public void beforeDeactivation(ComponentManager mgr) {\n     }\n \n     protected void changeStep(ComponentManagerStep step) {\n-        messages.removeIf(msg -> step.equals(msg.getStep()));\n-        this.step = step;\n+        this.currentStep = step;\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected static class Message {\n-\n-        protected final ComponentManagerStep step;\n-\n-        protected final Level level;\n-\n-        protected final String message;\n-\n-        public Message(ComponentManagerStep step, Level level, String message) {\n-            this.step = step;\n-            this.level = level;\n-            this.message = message;\n-        }\n-\n-        public ComponentManagerStep getStep() {\n-            return step;\n-        }\n-\n-        public Level getLevel() {\n-            return level;\n-        }\n-\n-        public String getMessage() {\n-            return message;\n-        }\n-\n+    @Override\n+    public void addMessage(RuntimeMessage message) {\n+        messages.add(message);\n     }\n \n-    /**\n-     * @since 9.10\n-     */\n-    protected enum ComponentManagerStep {\n-\n-        ACTIVATING,\n-\n-        STARTING,\n-\n-        RUNNING,\n+    @Override\n+    public void addMessage(Level level, String message, Class<?> source) {\n+        addMessage(new RuntimeMessage(currentStep, level, message, source == null ? null : source.getName()));\n+    }\n \n-        STOPPING,\n+    @Override\n+    public List<RuntimeMessage> getMessages(Predicate<RuntimeMessage> predicate) {\n+        return messages.stream()\n+                       .filter(msg -> predicate.test(msg))\n+                       .collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb3b63f41ae2805772e93cfe70ce7a6123d7320"}, "originalPosition": 121}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8690cf6c6ad7727d8a71053aaba8177ce303ed27", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/8690cf6c6ad7727d8a71053aaba8177ce303ed27", "committedDate": "2020-08-12T08:57:06Z", "message": "NXP-29504: cleanup/format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05e8f2a798006935dfa0347a6f3d1b312c2e41ed", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/05e8f2a798006935dfa0347a6f3d1b312c2e41ed", "committedDate": "2020-08-12T08:57:06Z", "message": "NXP-29504: remove duplicate loading of bundle org.nuxeo.runtime bundle components\n\nAllows removing hacky code in startup duplicate components detection."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/430fb801dcbf81e786b86eefd8c4cf0fe2a0a44f", "committedDate": "2020-08-11T08:45:44Z", "message": "NXP-29504: adapt usage of runtime messages api"}, "afterCommit": {"oid": "9752129a8503db80abf4a7360cb12dc9758b6733", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9752129a8503db80abf4a7360cb12dc9758b6733", "committedDate": "2020-08-12T09:52:10Z", "message": "NXP-29504: adapt usage of runtime messages api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9752129a8503db80abf4a7360cb12dc9758b6733", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/9752129a8503db80abf4a7360cb12dc9758b6733", "committedDate": "2020-08-12T09:52:10Z", "message": "NXP-29504: adapt usage of runtime messages api"}, "afterCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d04bacb6c456728a82e66a2c1de08899c712fbf3", "committedDate": "2020-08-12T09:57:32Z", "message": "NXP-29504: adapt usage of runtime messages api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDMyMjU2", "url": "https://github.com/nuxeo/nuxeo/pull/4249#pullrequestreview-466032256", "createdAt": "2020-08-12T15:32:24Z", "commit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozMjoyNFrOG_mvcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozNTozOFrOG_m4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0ODIxMA==", "bodyText": "Worth adding a convenient method #getMessages(Level) to ease the replacement of #getErrors and #getWarnings methods? Make sens to me as we have #addMessage(Level, String).", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469348210", "createdAt": "2020-08-12T15:32:24Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getRuntimeMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0ODQxNw==", "bodyText": "Cannot be null, right? \ud83d\ude43", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469348417", "createdAt": "2020-08-12T15:32:41Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MDUwOA==", "bodyText": "Seems this method is not used anymore? Do we need it (right now)?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469350508", "createdAt": "2020-08-12T15:35:38Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.\n+     *\n+     * @since 11.3\n+     */\n+    List<RuntimeMessage> getRuntimeMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Returns all messages strings, filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n+    /**\n+     * Clears messages filtered by following predicate.\n+     *\n+     * @since 11.3\n+     */\n+    void clear(Predicate<RuntimeMessage> predicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDMyOTg1", "url": "https://github.com/nuxeo/nuxeo/pull/4249#pullrequestreview-466032985", "createdAt": "2020-08-12T15:33:11Z", "commit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozMzoxMlrOG_mxrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozNTozNlrOG_m4Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0ODc4Mw==", "bodyText": "Former javadoc comment I think (?)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469348783", "createdAt": "2020-08-12T15:33:12Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -29,24 +33,64 @@\n \n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getErrors();\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages, filtered by following predicate.\n+     * <p>\n+     * Predicate can be null, in which case no filtering will be done.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MDQ4Mw==", "bodyText": "Thanks for the RuntimeMessage#step cleanup, I didn't see any usage except the RuntimeMessageHandlerImpl, does it worth to leave this class over there?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r469350483", "createdAt": "2020-08-12T15:35:36Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessage.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * (C) Copyright 2017-2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+/**\n+ * Represents a message to be held by the Runtime framework.\n+ * <p>\n+ * Allows detecting and displaying errors and warnings at server startup and when hot-reloading.\n+ *\n+ * @since 11.3\n+ */\n+public class RuntimeMessage {\n+\n+    protected final Level level;\n+\n+    protected final String message;\n+\n+    public RuntimeMessage(Level level, String message) {\n+        this.level = level;\n+        this.message = message;\n+    }\n+\n+    public Level getLevel() {\n+        return level;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public enum Level {\n+\n+        ERROR,\n+\n+        WARNING\n+\n+    }\n+\n+    protected enum ComponentManagerStep {\n+\n+        ACTIVATING,\n+\n+        STARTING,\n+\n+        RUNNING,\n+\n+        STOPPING,\n+\n+        DEACTIVATING\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d04bacb6c456728a82e66a2c1de08899c712fbf3", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d04bacb6c456728a82e66a2c1de08899c712fbf3", "committedDate": "2020-08-12T09:57:32Z", "message": "NXP-29504: adapt usage of runtime messages api"}, "afterCommit": {"oid": "6346e5522c76f1e55dee69852d2dca4f4cb05763", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6346e5522c76f1e55dee69852d2dca4f4cb05763", "committedDate": "2020-08-13T14:31:51Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6346e5522c76f1e55dee69852d2dca4f4cb05763", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/6346e5522c76f1e55dee69852d2dca4f4cb05763", "committedDate": "2020-08-13T14:31:51Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}, "afterCommit": {"oid": "234e0d47582207ea5aa09d35578465b609e51261", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/234e0d47582207ea5aa09d35578465b609e51261", "committedDate": "2020-08-13T14:51:43Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "234e0d47582207ea5aa09d35578465b609e51261", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/234e0d47582207ea5aa09d35578465b609e51261", "committedDate": "2020-08-13T14:51:43Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}, "afterCommit": {"oid": "306dc46b24bd780d4b48500f9fee14c097ef5d1c", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/306dc46b24bd780d4b48500f9fee14c097ef5d1c", "committedDate": "2020-08-13T14:55:32Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "306dc46b24bd780d4b48500f9fee14c097ef5d1c", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/306dc46b24bd780d4b48500f9fee14c097ef5d1c", "committedDate": "2020-08-13T14:55:32Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}, "afterCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/aa37139c103d09d8e8631fbfa557809b80222300", "committedDate": "2020-08-13T15:01:47Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODQ1MTU1", "url": "https://github.com/nuxeo/nuxeo/pull/4249#pullrequestreview-466845155", "createdAt": "2020-08-13T14:57:57Z", "commit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDo1Nzo1N1rOHAPfGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMjoxOVrOHAQkjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNTc3MQ==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470015771", "createdAt": "2020-08-13T14:57:57Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/resources/OSGI-INF/ConfigurationService.xml", "diffHunk": "@@ -37,4 +37,4 @@\n     <object class=\"org.nuxeo.runtime.services.config.ConfigurationPropertyDescriptor\" />\n   </extension-point>\n \n-</component>\n\\ No newline at end of file\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNTg1Mw==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470015853", "createdAt": "2020-08-13T14:58:03Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/pom.xml", "diffHunk": "@@ -56,4 +56,4 @@\n     </resources>\n   </build>\n \n-</project>\n\\ No newline at end of file\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNTk5Mg==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470015992", "createdAt": "2020-08-13T14:58:15Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/main/resources/logback-test.xml", "diffHunk": "@@ -11,4 +11,4 @@\n   <root level=\"warn\">\n     <appender-ref ref=\"STDOUT\" />\n   </root>\n-</configuration>\n\\ No newline at end of file\n+</configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNjAyNw==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470016027", "createdAt": "2020-08-13T14:58:18Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/main/resources/isolated-server.xml", "diffHunk": "@@ -4,4 +4,4 @@\n \t\tpoint=\"locators\">\n \t\t<locator domain=\"org.nuxeo\" exist=\"false\" remote=\"false\" />\n \t</extension>\n-</component>\n\\ No newline at end of file\n+</component>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNjA3NQ==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470016075", "createdAt": "2020-08-13T14:58:21Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesLoader.java", "diffHunk": "@@ -144,4 +144,4 @@ protected Module onModule() {\n         };\n     }\n \n-}\n\\ No newline at end of file\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNjE1MQ==", "bodyText": "Should be in the cleanup/format commit.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470016151", "createdAt": "2020-08-13T14:58:26Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/Deploys.java", "diffHunk": "@@ -45,4 +45,4 @@\n \n     Deploy[] value();\n \n-}\n\\ No newline at end of file\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d8c0fbd58acedbae7c3841e384c023a933ac2f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNzkwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class RuntimeInitializationMockFeature implements RunnerFeature {\n          \n          \n            \n            public class RuntimeInitializationErrorMockFeature implements RunnerFeature {\n          \n      \n    \n    \n  \n\nMaybe? To make it clear it adds/generates errors.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470017909", "createdAt": "2020-08-13T15:00:43Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationMockFeature.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.runtime;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+\n+import org.nuxeo.runtime.RuntimeMessage.Level;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RunnerFeature;\n+\n+import com.google.inject.Binder;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeInitializationMockFeature implements RunnerFeature {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306dc46b24bd780d4b48500f9fee14c097ef5d1c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxODg2Mg==", "bodyText": "Worth checking there are no messages?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470018862", "createdAt": "2020-08-13T15:01:41Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    public void testDeploymentPreprocessorErrors() throws Exception {\n+        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306dc46b24bd780d4b48500f9fee14c097ef5d1c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxODk2MA==", "bodyText": "Not used.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470018960", "createdAt": "2020-08-13T15:01:48Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306dc46b24bd780d4b48500f9fee14c097ef5d1c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyMjA2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(List.of(), Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING));\n          \n          \n            \n                    assertTrue(Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING).isEmpty());\n          \n      \n    \n    \n  \n\nSame for others assertEquals(List.of(), ...)", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470022062", "createdAt": "2020-08-13T15:06:16Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "diffHunk": "@@ -47,18 +50,111 @@ public void testContributions() throws Exception {\n         // do nothing\n     }\n \n+    protected void checkDupe(boolean detected) {\n+        List<String> errors = Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR);\n+        if (detected) {\n+            assertEquals(List.of(\"Duplicate component name: service:my.comp2\"), errors);\n+        } else {\n+            assertEquals(0, errors.size());\n+        }\n+    }\n+\n     @Test\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n-    @Ignore(\"Deactivated for now since duplicate contributions are still allowed.\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\")\n     public void testContributionsWithDuplicateComponent() throws Exception {\n-        boolean success = false;\n-        try {\n-            hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\");\n-            success = true;\n-        } catch (AssertionError e) {\n-            // OK.\n-        }\n-        assertFalse(\"An exception should have been raised.\", success);\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentSameFile() throws Exception {\n+        // dupe annotation on tests not detected (?)\n+        checkDupe(false);\n     }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentSameFileHotReload() throws Exception {\n+        hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\");\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentHotReload() throws Exception {\n+        hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\");\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:invalid-component-activate-message.xml\")\n+    public void testInvalidComponentActivateMessage() throws Exception {\n+        assertEquals(List.of(\"Error message on activate\"),\n+                Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR));\n+        assertEquals(List.of(\"Warn message on activate\"),\n+                Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING));\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:invalid-component.xml\")\n+    public void testInvalidComponent() throws Exception {\n+        assertEquals(List.of(\n+                \"Bad extension declaration (no target attribute specified) on component 'service:invalid.comp'\",\n+                \"Warning: target extension point 'xp' of 'invalid.comp' is unknown. Check your extension in component service:invalid.comp\",\n+                \"Warning: target extension point 'null' of 'invalid.comp' is unknown. Check your extension in component service:invalid.comp\"),\n+                Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR));\n+        assertEquals(List.of(), Framework.getRuntime().getMessageHandler().getMessages(Level.WARNING));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyNTY2OA==", "bodyText": "Seems that all the throws Exception in methods not using the hotDeployer can be removed.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470025668", "createdAt": "2020-08-13T15:11:33Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTest.java", "diffHunk": "@@ -47,18 +50,111 @@ public void testContributions() throws Exception {\n         // do nothing\n     }\n \n+    protected void checkDupe(boolean detected) {\n+        List<String> errors = Framework.getRuntime().getMessageHandler().getMessages(Level.ERROR);\n+        if (detected) {\n+            assertEquals(List.of(\"Duplicate component name: service:my.comp2\"), errors);\n+        } else {\n+            assertEquals(0, errors.size());\n+        }\n+    }\n+\n     @Test\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n     @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n-    @Ignore(\"Deactivated for now since duplicate contributions are still allowed.\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\")\n     public void testContributionsWithDuplicateComponent() throws Exception {\n-        boolean success = false;\n-        try {\n-            hotDeployer.deploy(\"org.nuxeo.runtime.test.tests:CopyOfMyComp2.xml\");\n-            success = true;\n-        } catch (AssertionError e) {\n-            // OK.\n-        }\n-        assertFalse(\"An exception should have been raised.\", success);\n+        checkDupe(true);\n+    }\n+\n+    @Test\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp1.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    @Deploy(\"org.nuxeo.runtime.test.tests:MyComp2.xml\")\n+    public void testContributionsWithDuplicateComponentSameFile() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzQ2OA==", "bodyText": "I would have linked to #getMessages(Level).", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470033468", "createdAt": "2020-08-13T15:22:12Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -27,26 +31,57 @@\n  */\n public interface RuntimeMessageHandler {\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages strings, filtered by given level.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Level level);\n+\n+    /**\n+     * Returns all messages strings, filtered by given predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzU1MA==", "bodyText": "I would have linked to #getMessages(Level).", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470033550", "createdAt": "2020-08-13T15:22:19Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/RuntimeMessageHandler.java", "diffHunk": "@@ -27,26 +31,57 @@\n  */\n public interface RuntimeMessageHandler {\n \n+    /**\n+     * Adds the following message.\n+     *\n+     * @since 11.3\n+     */\n+    void addMessage(Level level, String message);\n+\n+    /**\n+     * Returns all messages strings, filtered by given level.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Level level);\n+\n+    /**\n+     * Returns all messages strings, filtered by given predicate.\n+     *\n+     * @since 11.3\n+     */\n+    List<String> getMessages(Predicate<RuntimeMessage> predicate);\n+\n     /**\n      * Warning messages don't block server startup.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addWarning(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of warning messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead\n      */\n+    @Deprecated\n     List<String> getWarnings();\n \n     /**\n      * Add new error.\n      * <p />\n      * Error messages block server startup in strict mode.\n+     *\n+     * @deprecated since 11.3, use {@link #addMessage(Level, String)} instead.\n      */\n+    @Deprecated\n     void addError(String message);\n \n     /**\n      * @return an unmodifiable {@link List} of error messages\n+     * @deprecated since 11.3, use {@link #getMessages(Predicate)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODY2MzQw", "url": "https://github.com/nuxeo/nuxeo/pull/4249#pullrequestreview-466866340", "createdAt": "2020-08-13T15:20:05Z", "commit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMDowNVrOHAQd9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0NjoxNFrOHARi-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMTg2MA==", "bodyText": "Unused.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470031860", "createdAt": "2020-08-13T15:20:05Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzUxMg==", "bodyText": "What about putting the feature as a static class here? It will improve readability.", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470033512", "createdAt": "2020-08-13T15:22:15Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationPreprocessorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.HotDeployer;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeInitializationMockFeature.class, RuntimeFeature.class })\n+public class RuntimeInitializationPreprocessorTest {\n+\n+    @Inject\n+    protected HotDeployer hotDeployer;\n+\n+    @Test\n+    public void testDeploymentPreprocessorErrors() throws Exception {\n+        // messages have been cleared up by now, see actual test in RuntimeInitializationMockFeature", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzNTAwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (\"fail\".equals(actionType) && !\"activate\".equals(actionTypeOn)) { // error at activation will bubble up\n          \n          \n            \n                                                                                         // and will not be caught by message\n          \n          \n            \n                                                                                         // handler --> skip it\n          \n          \n            \n                        throw new RuntimeException(\"Fail on \" + actionTypeOn);\n          \n          \n            \n                    // error at activation will bubble up and will not be caught by message handler --> skip it\n          \n          \n            \n                    if (\"fail\".equals(actionType) && !\"activate\".equals(actionTypeOn)) { \n          \n          \n            \n                        throw new RuntimeException(\"Fail on \" + actionTypeOn);", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470035004", "createdAt": "2020-08-13T15:24:27Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-test/src/test/java/org/nuxeo/runtime/RuntimeInitializationTestComponent.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+\n+package org.nuxeo.runtime;\n+\n+import org.nuxeo.runtime.RuntimeMessage.Level;\n+import org.nuxeo.runtime.model.ComponentContext;\n+import org.nuxeo.runtime.model.ComponentInstance;\n+import org.nuxeo.runtime.model.DefaultComponent;\n+\n+/**\n+ * @since 11.3\n+ */\n+public class RuntimeInitializationTestComponent extends DefaultComponent {\n+\n+    protected String actionType;\n+\n+    protected String actionTypeOn;\n+\n+    @Override\n+    public void activate(ComponentContext context) {\n+        actionType = (String) context.getPropertyValue(\"actionType\");\n+        actionTypeOn = (String) context.getPropertyValue(\"actionTypeOn\");\n+\n+        actOn(\"activate\");\n+    }\n+\n+    @Override\n+    public void registerContribution(Object contribution, String xp, ComponentInstance component) {\n+        actOn(\"register\");\n+    }\n+\n+    @Override\n+    public void start(ComponentContext context) {\n+        actOn(\"start\");\n+    }\n+\n+    protected void actOn(String action) {\n+        if (!action.equals(actionTypeOn)) {\n+            return;\n+        }\n+        if (\"fail\".equals(actionType) && !\"activate\".equals(actionTypeOn)) { // error at activation will bubble up\n+                                                                             // and will not be caught by message\n+                                                                             // handler --> skip it\n+            throw new RuntimeException(\"Fail on \" + actionTypeOn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTUyOA==", "bodyText": "I don't like null,  they are often error prone. What do you think about moving the content of this method in the activate method?\nAs it we drop the null thing + we have the full error management (with the early return) at the same place.\nWdyt?", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470049528", "createdAt": "2020-08-13T15:46:14Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -342,8 +343,8 @@ protected ComponentInstance createComponentInstance() {\n             String msg = \"Failed to instantiate component: \" + implementation;\n             log.error(msg, e);\n             msg += \" (\" + e.toString() + ')';\n-            Framework.getRuntime().getMessageHandler().addError(msg);\n-            throw e;\n+            Framework.getRuntime().getMessageHandler().addMessage(Level.ERROR, msg);\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7b17b603abe0cfda4800fcd063c9836d42e5841", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/a7b17b603abe0cfda4800fcd063c9836d42e5841", "committedDate": "2020-08-13T16:31:59Z", "message": "NXP-29504: rework runtime messages management\n\nFixes duplicate component names detection at startup, and stores more detailed information that can be used by explorer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "360e927be1dd762e56b872a70d93bc10bf5b8d03", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/360e927be1dd762e56b872a70d93bc10bf5b8d03", "committedDate": "2020-08-13T16:31:59Z", "message": "NXP-29504: adapt usage of runtime messages api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa37139c103d09d8e8631fbfa557809b80222300", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/aa37139c103d09d8e8631fbfa557809b80222300", "committedDate": "2020-08-13T15:01:47Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}, "afterCommit": {"oid": "0e3bca59abaf4899ec2782e86bc8be4a8eba0f8e", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0e3bca59abaf4899ec2782e86bc8be4a8eba0f8e", "committedDate": "2020-08-13T16:31:59Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84c4b4760dbddc1cae54672ea0d79bdb8bba7d2e", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/84c4b4760dbddc1cae54672ea0d79bdb8bba7d2e", "committedDate": "2020-08-13T17:12:24Z", "message": "NXP-29504: add more unit tests, fix related RegistrationInfoImpl behaviour (setting aside NXP-29547)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a189ea62a211e14c2735cc59ec4cd802de8fe1", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/24a189ea62a211e14c2735cc59ec4cd802de8fe1", "committedDate": "2020-08-13T17:12:24Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e3bca59abaf4899ec2782e86bc8be4a8eba0f8e", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0e3bca59abaf4899ec2782e86bc8be4a8eba0f8e", "committedDate": "2020-08-13T16:31:59Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}, "afterCommit": {"oid": "24a189ea62a211e14c2735cc59ec4cd802de8fe1", "author": {"user": {"login": "atchertchian", "name": "Anahide Tchertchian"}}, "url": "https://github.com/nuxeo/nuxeo/commit/24a189ea62a211e14c2735cc59ec4cd802de8fe1", "committedDate": "2020-08-13T17:12:24Z", "message": "NXP-28914: Log failure exception in BackingServiceConfigurator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MzczMjc5", "url": "https://github.com/nuxeo/nuxeo/pull/4249#pullrequestreview-467373279", "createdAt": "2020-08-14T07:49:04Z", "commit": {"oid": "24a189ea62a211e14c2735cc59ec4cd802de8fe1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NDE1OTEy", "url": "https://github.com/nuxeo/nuxeo/pull/4249#pullrequestreview-467415912", "createdAt": "2020-08-14T08:56:12Z", "commit": {"oid": "84c4b4760dbddc1cae54672ea0d79bdb8bba7d2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODo1NjoxMlrOHAtARQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODo1NjoxMlrOHAtARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5OTM5Nw==", "bodyText": "Nice, I didn't realize this had been added in Java 11, it's indeed cleaner-looking than .toArray(new Extension[0])", "url": "https://github.com/nuxeo/nuxeo/pull/4249#discussion_r470499397", "createdAt": "2020-08-14T08:56:12Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime/src/main/java/org/nuxeo/runtime/model/impl/RegistrationInfoImpl.java", "diffHunk": "@@ -574,15 +579,24 @@ public String getImplementation() {\n         return implementation;\n     }\n \n-    public void checkExtensions() {\n+    /**\n+     * Checks extensions and returns only valid ones.\n+     *\n+     * @since 11.3\n+     */\n+    protected Extension[] checkExtensions() {\n+        var validExtensions = new ArrayList<Extension>();\n         for (ExtensionImpl xt : extensions) {\n             if (xt.target == null) {\n                 String msg = String.format(\n-                        \"Bad extension declaration (no target attribute specified) on component 's%'\", getName());\n-                Framework.getRuntime().getMessageHandler().addMessage(Level.WARNING, msg);\n+                        \"Bad extension declaration (no target attribute specified) on component '%s'\", getName());\n+                Framework.getRuntime().getMessageHandler().addMessage(Level.ERROR, msg);\n                 continue;\n+            } else {\n+                validExtensions.add(xt);\n             }\n         }\n+        return validExtensions.toArray(Extension[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c4b4760dbddc1cae54672ea0d79bdb8bba7d2e"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NDE2MTE0", "url": "https://github.com/nuxeo/nuxeo/pull/4249#pullrequestreview-467416114", "createdAt": "2020-08-14T08:56:28Z", "commit": {"oid": "24a189ea62a211e14c2735cc59ec4cd802de8fe1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4998, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}