{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2OTYxNTM3", "number": 3695, "title": "10.10-HF/improvement-NXP-28254-conversation-participants-missing-notifications", "bodyText": "PR created from https://qa2.nuxeo.org/jenkins/job/TestAndPush/job/ondemand-testandpush-nalkotob-10.10/124/", "createdAt": "2020-01-24T18:31:02Z", "url": "https://github.com/nuxeo/nuxeo/pull/3695", "merged": true, "mergeCommit": {"oid": "7e95aba294dc68759555b3b08977813a6ee0e6c1"}, "closed": true, "closedAt": "2020-02-24T15:15:42Z", "author": {"login": "nuxeojenkins"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCBJJzABqjMwMTgwNzk1NjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHe62XgFqTM2MzQ1NTk3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c8ab880deb48f2a40bfdac5bd567f65eee1f8f7", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/2c8ab880deb48f2a40bfdac5bd567f65eee1f8f7", "committedDate": "2020-01-24T13:38:10Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "e42b7ca24b4664e507f30b1fc925836547b60afd", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e42b7ca24b4664e507f30b1fc925836547b60afd", "committedDate": "2020-02-07T15:33:43Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e42b7ca24b4664e507f30b1fc925836547b60afd", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/e42b7ca24b4664e507f30b1fc925836547b60afd", "committedDate": "2020-02-07T15:33:43Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "0175506bbd408a3f64ea2fd511189de9976039f9", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0175506bbd408a3f64ea2fd511189de9976039f9", "committedDate": "2020-02-07T15:39:50Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0175506bbd408a3f64ea2fd511189de9976039f9", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0175506bbd408a3f64ea2fd511189de9976039f9", "committedDate": "2020-02-07T15:39:50Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "0a8b691d4c888fd5019ad17b149352adcc9cd6a1", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0a8b691d4c888fd5019ad17b149352adcc9cd6a1", "committedDate": "2020-02-07T15:42:09Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjQ3MDI1", "url": "https://github.com/nuxeo/nuxeo/pull/3695#pullrequestreview-355247025", "createdAt": "2020-02-07T15:44:11Z", "commit": {"oid": "0a8b691d4c888fd5019ad17b149352adcc9cd6a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0NDoxMlrOFnBUCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0NDoxMlrOFnBUCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MDI5OA==", "bodyText": "IDE automatically removes trailing spaces. Since there are no cleanup commits in backports I can either leave it as it is, or put it back in a text editor, but the problem will happen again and again in next commits.", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376460298", "createdAt": "2020-02-07T15:44:12Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -316,7 +361,7 @@ public DocumentRef getTopLevelCommentAncestor(CoreSession s, DocumentRef documen\n     /**\n      * Gets or creates the 'Comments' folder, this folder will be under the document being commented and it contains the\n      * whole comments of the first document that we comment.\n-     * \n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a8b691d4c888fd5019ad17b149352adcc9cd6a1"}, "originalPosition": 106}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a8b691d4c888fd5019ad17b149352adcc9cd6a1", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0a8b691d4c888fd5019ad17b149352adcc9cd6a1", "committedDate": "2020-02-07T15:42:09Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "db0078fd7b15fd8af33ba31fe44681623c8ec60f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/db0078fd7b15fd8af33ba31fe44681623c8ec60f", "committedDate": "2020-02-07T15:50:05Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjU1NzA0", "url": "https://github.com/nuxeo/nuxeo/pull/3695#pullrequestreview-355255704", "createdAt": "2020-02-07T15:55:54Z", "commit": {"oid": "db0078fd7b15fd8af33ba31fe44681623c8ec60f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo1NTo1NFrOFnBuUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo1NTo1NFrOFnBuUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NzAyNg==", "bodyText": "As this method is reworked and the variables are renamed on master, I thought it would be better to keep the same names on 10.10 even if it induces mixing a bit of Cleanup/Refacto in the commit\nSame on\n\ndb0078f#diff-28554eaa66542e2d29a24a2ced0d0134R157\ndb0078f#diff-b5ba4c2a86feb19034eeccb42bbcd8aaR136", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376467026", "createdAt": "2020-02-07T15:55:54Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -95,92 +96,95 @@ public void before() {\n \n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n-        // We subscribe to the creation document to check that we will not be notified about the annotation creation as\n-        // document (see CommentCreationVeto), only the annotation added, and the 'File' document creation\n-        captureAndVerifyAnnotationEventNotification(() -> {\n-            Annotation createdAnnotation = createAnnotationAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdAnnotation.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n+            DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n+            DocumentModel annotationParentDocumentModel = session.getDocument(\n+                    new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, annotationDocumentModel, annotationParentDocumentModel,\n+                    annotatedDocumentModel);\n+        }\n     }\n \n     @Test\n     public void shouldNotifyEventWhenUpdateAnnotation() {\n-        // We subscribe to the update document to check that we will not be notified about the annotation updated as\n-        // document (see CommentModificationVeto), only the annotation updated.\n-        Annotation annotation = createAnnotationAndAddSubscription(\"CommentUpdated\", \"Modification\");\n-\n-        captureAndVerifyAnnotationEventNotification(() -> {\n+        Annotation annotation = createAnnotation(annotatedDocumentModel);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_UPDATED)) {\n             annotation.setText(\"I update the annotation\");\n             annotationService.updateAnnotation(session, annotation.getId(), annotation);\n-            return session.getDocument(new IdRef(annotation.getId()));\n-        }, COMMENT_UPDATED, DOCUMENT_UPDATED);\n+            DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n+            DocumentModel annotationParentDocumentModel = session.getDocument(\n+                    new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, annotationDocumentModel, annotationParentDocumentModel,\n+                    annotatedDocumentModel);\n+        }\n     }\n \n     @Test\n     public void shouldNotifyEventWhenRemoveAnnotation() {\n-        Annotation createdAnnotation = createAnnotationAndAddSubscription(\"CommentRemoved\");\n-        DocumentModel annotationDocModel = session.getDocument(new IdRef(createdAnnotation.getId()));\n+        Annotation annotation = createAnnotation(annotatedDocumentModel);\n+        DocumentModel annotationDocModel = session.getDocument(new IdRef(annotation.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0078fd7b15fd8af33ba31fe44681623c8ec60f"}, "originalPosition": 92}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db0078fd7b15fd8af33ba31fe44681623c8ec60f", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/db0078fd7b15fd8af33ba31fe44681623c8ec60f", "committedDate": "2020-02-07T15:50:05Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "1783390e77b2380b73ef19d91d0a50452efaa321", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1783390e77b2380b73ef19d91d0a50452efaa321", "committedDate": "2020-02-07T16:00:05Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjYwMjAy", "url": "https://github.com/nuxeo/nuxeo/pull/3695#pullrequestreview-355260202", "createdAt": "2020-02-07T16:02:00Z", "commit": {"oid": "1783390e77b2380b73ef19d91d0a50452efaa321"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjowMjowMFrOFnB7XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjowMjowMFrOFnB7XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3MDM2NQ==", "bodyText": "same issue than 1783390#r376460298", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376470365", "createdAt": "2020-02-07T16:02:00Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestPropertyCommentNotification.java", "diffHunk": "@@ -12,13 +12,25 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *  \n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1783390e77b2380b73ef19d91d0a50452efaa321"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjYwNTAz", "url": "https://github.com/nuxeo/nuxeo/pull/3695#pullrequestreview-355260503", "createdAt": "2020-02-07T16:02:25Z", "commit": {"oid": "1783390e77b2380b73ef19d91d0a50452efaa321"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjowMjoyNlrOFnB8OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjowMjoyNlrOFnB8OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3MDU4NA==", "bodyText": "same issue than 1783390#r376460298", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376470584", "createdAt": "2020-02-07T16:02:26Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestTreeCommentNotification.java", "diffHunk": "@@ -12,15 +12,24 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *  \n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1783390e77b2380b73ef19d91d0a50452efaa321"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1783390e77b2380b73ef19d91d0a50452efaa321", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1783390e77b2380b73ef19d91d0a50452efaa321", "committedDate": "2020-02-07T16:00:05Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "505180ba05068f8d389584a1b59c10c2e505f1be", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/505180ba05068f8d389584a1b59c10c2e505f1be", "committedDate": "2020-02-07T16:03:36Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "505180ba05068f8d389584a1b59c10c2e505f1be", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/505180ba05068f8d389584a1b59c10c2e505f1be", "committedDate": "2020-02-07T16:03:36Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "committedDate": "2020-02-07T16:12:13Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4", "committedDate": "2020-02-07T16:12:13Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "0df0a5c788546bee17d3391f78721ace3b535766", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0df0a5c788546bee17d3391f78721ace3b535766", "committedDate": "2020-02-10T10:15:18Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1ODYwMjQ1", "url": "https://github.com/nuxeo/nuxeo/pull/3695#pullrequestreview-355860245", "createdAt": "2020-02-10T11:20:05Z", "commit": {"oid": "0df0a5c788546bee17d3391f78721ace3b535766"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMToyMDowNVrOFnieKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMToyMDowNVrOFnieKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMzU2MA==", "bodyText": "This file has been renamed, even in 10.10. Can you move your change to the appropriate test class?", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r377003560", "createdAt": "2020-02-10T11:20:05Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/impl/CommentJsonWriterTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * (C) Copyright 2018 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuno Cunha <ncunha@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.comment.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.number.OrderingComparison.greaterThanOrEqualTo;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.io.marshallers.json.AbstractJsonWriterTest;\n+import org.nuxeo.ecm.core.io.marshallers.json.JsonAssert;\n+import org.nuxeo.ecm.core.io.registry.context.RenderingContext;\n+import org.nuxeo.ecm.platform.comment.CommentFeature;\n+import org.nuxeo.ecm.platform.comment.api.Comment;\n+import org.nuxeo.ecm.platform.comment.api.CommentImpl;\n+import org.nuxeo.ecm.platform.comment.api.CommentManager;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 10.3\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(CommentFeature.class)\n+public class CommentJsonWriterTest extends AbstractJsonWriterTest.External<CommentJsonWriter, Comment> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0df0a5c788546bee17d3391f78721ace3b535766"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0df0a5c788546bee17d3391f78721ace3b535766", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/0df0a5c788546bee17d3391f78721ace3b535766", "committedDate": "2020-02-10T10:15:18Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "886e9fbcf58a75010b635b3ec569f5e1f429d625", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/886e9fbcf58a75010b635b3ec569f5e1f429d625", "committedDate": "2020-02-10T13:26:29Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTM1NDMz", "url": "https://github.com/nuxeo/nuxeo/pull/3695#pullrequestreview-355935433", "createdAt": "2020-02-10T13:30:38Z", "commit": {"oid": "886e9fbcf58a75010b635b3ec569f5e1f429d625"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzozMDozOFrOFnmDOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzozMDozOFrOFnmDOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2MjIwMQ==", "bodyText": "Cherry pick issue I think, the feature is only available on master.", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r377062201", "createdAt": "2020-02-10T13:30:38Z", "author": {"login": "kevinleturc"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -72,12 +79,34 @@\n  */\n public class TreeCommentManager extends AbstractCommentManager {\n \n+    private static final Logger log = LogManager.getLogger(TreeCommentManager.class);\n+\n     protected static final String GET_COMMENT_PAGE_PROVIDER_NAME = \"GET_COMMENT_AS_EXTERNAL_ENTITY\";\n \n     protected static final String GET_COMMENTS_FOR_DOCUMENT_PAGE_PROVIDER_NAME = \"GET_COMMENTS_FOR_DOCUMENT_BY_ECM_PARENT\";\n \n     public static final String SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE = \"This service implementation does not implement deprecated API.\";\n \n+    /**\n+     * The key to the config turning on or off autosubscription.\n+     */\n+    public static final String AUTOSUBSCRIBE_CONFIG_KEY = \"org.nuxeo.ecm.platform.comment.service.notification.autosubscribe\";\n+\n+    /**\n+     * Counts how many comments where made on a specific document.\n+     */\n+    protected static final String QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR = //\n+            \"SELECT \" + ECM_UUID + \" FROM Comment WHERE \" + ECM_ANCESTORID + \" = '%s'\";\n+\n+    /**\n+     * Counts how many comments where made by a specific user on a specific document.\n+     */\n+    protected static final String QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR_AND_AUTHOR = //\n+            QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR + \" AND \" + COMMENT_AUTHOR + \" = '%s'\";\n+\n+    /** @since 11.1 **/\n+    public static final String COMMENT_RELATED_TEXT_ID = \"commentRelatedTextId_%s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "886e9fbcf58a75010b635b3ec569f5e1f429d625"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "886e9fbcf58a75010b635b3ec569f5e1f429d625", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/886e9fbcf58a75010b635b3ec569f5e1f429d625", "committedDate": "2020-02-10T13:26:29Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "1ec71ed3dd19eecffb234e02958487c04e1c0fa8", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/1ec71ed3dd19eecffb234e02958487c04e1c0fa8", "committedDate": "2020-02-10T13:50:26Z", "message": "NXP-28254: smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjcxNjk5", "url": "https://github.com/nuxeo/nuxeo/pull/3695#pullrequestreview-355271699", "createdAt": "2020-02-07T16:18:32Z", "commit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoxODozMlrOFnCdbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzowMDoyOVrOFoRLmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3OTA4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.debug(\"Principal not found: \" + principal);\n          \n          \n            \n                        log.debug(\"Principal not found for: {}, author);", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376479085", "createdAt": "2020-02-07T16:18:32Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -134,9 +138,22 @@ protected void notifyEvent(CoreSession session, String eventType, DocumentModel\n     }\n \n     protected NuxeoPrincipal getAuthor(DocumentModel docModel) {\n-        String[] contributors = (String[]) docModel.getProperty(\"dublincore\", \"contributors\");\n-        UserManager userManager = Framework.getService(UserManager.class);\n-        return userManager.getPrincipal(contributors[0]);\n+        String author = null;\n+        if (docModel.hasSchema(COMMENT_SCHEMA)) {\n+            // means annotation / comment\n+            author = (String) docModel.getPropertyValue(COMMENT_AUTHOR);\n+        }\n+        if (StringUtils.isBlank(author)) {\n+            String[] contributors = (String[]) docModel.getPropertyValue(\"dc:contributors\");\n+            author = contributors[0];\n+        }\n+\n+        NuxeoPrincipal principal = Framework.getService(UserManager.class).getPrincipal(author);\n+        // If principal doesn't exist anymore\n+        if (principal == null) {\n+            log.debug(\"Principal not found: \" + principal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MDI1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentModelToCreate) {\n          \n          \n            \n                protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel comment) {", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376480256", "createdAt": "2020-02-07T16:20:42Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -187,11 +217,26 @@ public DocumentModel createComment(DocumentModel documentModel, DocumentModel co\n \n             commentModelToCreate = session.createDocument(commentModelToCreate);\n             commentModelToCreate.detach(true);\n+            handleNotificationAutoSubscriptions(session, commentModelToCreate);\n             notifyEvent(session, CommentEvents.COMMENT_ADDED, documentModel, commentModelToCreate);\n             return commentModelToCreate;\n         });\n     }\n \n+    /**\n+     * Resolves top level document and calls\n+     * {@link #handleNotificationAutoSubscriptions(CoreSession, DocumentModel, DocumentModel)}.\n+     *\n+     * @param session the core session\n+     * @param commentModelToCreate the comment being added\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentModelToCreate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MDk0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DocumentRef topLevelDocRef = getTopLevelCommentAncestor(session, new IdRef(commentModelToCreate.getId()));\n          \n          \n            \n                    DocumentRef topLevelDocRef = getTopLevelCommentAncestor(session, comment.getRef());", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376480949", "createdAt": "2020-02-07T16:21:47Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -187,11 +217,26 @@ public DocumentModel createComment(DocumentModel documentModel, DocumentModel co\n \n             commentModelToCreate = session.createDocument(commentModelToCreate);\n             commentModelToCreate.detach(true);\n+            handleNotificationAutoSubscriptions(session, commentModelToCreate);\n             notifyEvent(session, CommentEvents.COMMENT_ADDED, documentModel, commentModelToCreate);\n             return commentModelToCreate;\n         });\n     }\n \n+    /**\n+     * Resolves top level document and calls\n+     * {@link #handleNotificationAutoSubscriptions(CoreSession, DocumentModel, DocumentModel)}.\n+     *\n+     * @param session the core session\n+     * @param commentModelToCreate the comment being added\n+     * @since 11.1\n+     */\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel commentModelToCreate) {\n+        DocumentRef topLevelDocRef = getTopLevelCommentAncestor(session, new IdRef(commentModelToCreate.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MjM1Ng==", "bodyText": "I'm ok keeping it \ud83e\udd37\u200d\u2642", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376482356", "createdAt": "2020-02-07T16:24:16Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -316,7 +361,7 @@ public DocumentRef getTopLevelCommentAncestor(CoreSession s, DocumentRef documen\n     /**\n      * Gets or creates the 'Comments' folder, this folder will be under the document being commented and it contains the\n      * whole comments of the first document that we comment.\n-     * \n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MDI5OA=="}, "originalCommit": {"oid": "0a8b691d4c888fd5019ad17b149352adcc9cd6a1"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MzgwMQ==", "bodyText": "I would simplify the Javadoc here...\nReturns {@code true} if the document has comments.", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376483801", "createdAt": "2020-02-07T16:27:07Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -486,4 +531,78 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true} if comments were found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NDA0MQ==", "bodyText": "Same here\nReturns {@code true} if the documents has comments from the given user.", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376484041", "createdAt": "2020-02-07T16:27:33Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -486,4 +531,78 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true} if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param user the name of the user who's comments are being counted\n+     * @return {@code true} if comments by user were found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NTUyNA==", "bodyText": "Not sure it's needed... the method signature/arguments are rather straightforward.", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376485524", "createdAt": "2020-02-07T16:30:10Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -486,4 +531,78 @@ public DocumentRef getCommentedDocumentRef(CoreSession session, DocumentModel co\n \n         return commentedDocModel.getRef();\n     }\n+\n+    /**\n+     * Checks if a document has comments.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @return {@code true} if comments were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR, document.getId());\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    /**\n+     * Checks if a document has comments from a particular user.\n+     *\n+     * @param session the core session\n+     * @param document the document model who's comments are being counted\n+     * @param user the name of the user who's comments are being counted\n+     * @return {@code true} if comments by user were found\n+     * @since 11.1\n+     */\n+    protected boolean hasComments(CoreSession session, DocumentModel document, String user) {\n+        String query = String.format( //\n+                QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR_AND_AUTHOR, document.getId(), user);\n+        return !session.queryProjection(query, 1, 0).isEmpty();\n+    }\n+\n+    protected void handleNotificationAutoSubscriptions(CoreSession session, DocumentModel topLevelDocument,\n+            DocumentModel commentDocModel) {\n+        if (Framework.getService(ConfigurationService.class).isBooleanFalse(AUTOSUBSCRIBE_CONFIG_KEY)) {\n+            log.trace(\"autosubscription to new comments is disabled\");\n+            return;\n+        }\n+\n+        NuxeoPrincipal topLevelDocumentAuthor = getAuthor(topLevelDocument);\n+        if (!hasComments(session, topLevelDocument)) {\n+            // Document author is subscribed on first comment by anybody\n+            subscribeToNotifications(topLevelDocument, topLevelDocumentAuthor);\n+        }\n+\n+        NuxeoPrincipal commentAuthor = getAuthor(commentDocModel);\n+        if (topLevelDocumentAuthor != null && topLevelDocumentAuthor.equals(commentAuthor)) {\n+            // Document author is comment author. He doesn't need to be resubscribed\n+            return;\n+        }\n+\n+        if (commentAuthor != null && !hasComments(session, topLevelDocument, commentAuthor.getName())) {\n+            // Comment author is writing his first comment on the document\n+            subscribeToNotifications(topLevelDocument, commentAuthor);\n+        }\n+    }\n+\n+    /**\n+     * Subscribes a user to notifications on the document.\n+     *\n+     * @param document the document being commented\n+     * @param user the user to subscribe to notifications", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NTk3NA==", "bodyText": "Worth adding a <documentation> tag.", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376485974", "createdAt": "2020-02-07T16:31:01Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/resources/OSGI-INF/comment-notification-contrib.xml", "diffHunk": "@@ -39,4 +39,8 @@\n     <veto name=\"CommentNotificationVeto\" class=\"org.nuxeo.ecm.platform.comment.notification.CommentNotificationVeto\" />\n   </extension>\n \n+  <extension target=\"org.nuxeo.runtime.ConfigurationService\" point=\"configuration\">\n+    <property name=\"org.nuxeo.ecm.platform.comment.service.notification.autosubscribe\">true</property>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4ODMxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n          \n          \n            \n                        Annotation annotation = createAnnotationAndAddSubscription(COMMENT_ADDED_NOTIFICATION);", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376488319", "createdAt": "2020-02-07T16:35:35Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -95,92 +96,95 @@ public void before() {\n \n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n-        // We subscribe to the creation document to check that we will not be notified about the annotation creation as\n-        // document (see CommentCreationVeto), only the annotation added, and the 'File' document creation\n-        captureAndVerifyAnnotationEventNotification(() -> {\n-            Annotation createdAnnotation = createAnnotationAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdAnnotation.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4ODY2Nw==", "bodyText": "I would have put it after the createAnnotationAndAddSubscription call.", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376488667", "createdAt": "2020-02-07T16:36:19Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -95,92 +96,95 @@ public void before() {\n \n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n-        // We subscribe to the creation document to check that we will not be notified about the annotation creation as\n-        // document (see CommentCreationVeto), only the annotation added, and the 'File' document creation\n-        captureAndVerifyAnnotationEventNotification(() -> {\n-            Annotation createdAnnotation = createAnnotationAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdAnnotation.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n+            DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n+            DocumentModel annotationParentDocumentModel = session.getDocument(\n+                    new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4OTIyMQ==", "bodyText": "Put it after updateAnnotation.", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r376489221", "createdAt": "2020-02-07T16:37:23Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestAnnotationNotification.java", "diffHunk": "@@ -95,92 +96,95 @@ public void before() {\n \n     @Test\n     public void shouldNotifyEventWhenCreateAnnotation() {\n-        // We subscribe to the creation document to check that we will not be notified about the annotation creation as\n-        // document (see CommentCreationVeto), only the annotation added, and the 'File' document creation\n-        captureAndVerifyAnnotationEventNotification(() -> {\n-            Annotation createdAnnotation = createAnnotationAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdAnnotation.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Annotation annotation = createAnnotationAndAddSubscription(\"CommentAdded\");\n+            DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n+            DocumentModel annotationParentDocumentModel = session.getDocument(\n+                    new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, annotationDocumentModel, annotationParentDocumentModel,\n+                    annotatedDocumentModel);\n+        }\n     }\n \n     @Test\n     public void shouldNotifyEventWhenUpdateAnnotation() {\n-        // We subscribe to the update document to check that we will not be notified about the annotation updated as\n-        // document (see CommentModificationVeto), only the annotation updated.\n-        Annotation annotation = createAnnotationAndAddSubscription(\"CommentUpdated\", \"Modification\");\n-\n-        captureAndVerifyAnnotationEventNotification(() -> {\n+        Annotation annotation = createAnnotation(annotatedDocumentModel);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_UPDATED)) {\n             annotation.setText(\"I update the annotation\");\n             annotationService.updateAnnotation(session, annotation.getId(), annotation);\n-            return session.getDocument(new IdRef(annotation.getId()));\n-        }, COMMENT_UPDATED, DOCUMENT_UPDATED);\n+            DocumentModel annotationDocumentModel = session.getDocument(new IdRef(annotation.getId()));\n+            DocumentModel annotationParentDocumentModel = session.getDocument(\n+                    new IdRef((String) annotationDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b39df457d72fa1c2ee6f50b012e50a7b7f01ca4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2NDUxNA==", "bodyText": "Missing @since?", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r377764514", "createdAt": "2020-02-11T16:53:40Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -72,12 +79,31 @@\n  */\n public class TreeCommentManager extends AbstractCommentManager {\n \n+    private static final Logger log = LogManager.getLogger(TreeCommentManager.class);\n+\n     protected static final String GET_COMMENT_PAGE_PROVIDER_NAME = \"GET_COMMENT_AS_EXTERNAL_ENTITY\";\n \n     protected static final String GET_COMMENTS_FOR_DOCUMENT_PAGE_PROVIDER_NAME = \"GET_COMMENTS_FOR_DOCUMENT_BY_ECM_PARENT\";\n \n     public static final String SERVICE_WITHOUT_IMPLEMENTATION_MESSAGE = \"This service implementation does not implement deprecated API.\";\n \n+    /**\n+     * The key to the config turning on or off autosubscription.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec71ed3dd19eecffb234e02958487c04e1c0fa8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2Nzg5Mg==", "bodyText": "You should not need to detach it... \ud83e\udd14\nFetch the commentDocModel after the nextTransaction call.\nSame for all other places where you detach a document.", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r377767892", "createdAt": "2020-02-11T16:58:55Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestBridgeCommentNotificationFromPropertyToTree.java", "diffHunk": "@@ -38,4 +50,71 @@ protected CommentManager getCommentManager() {\n     protected Class<? extends CommentManager> getType() {\n         return BridgeCommentManager.class;\n     }\n+\n+    @Test\n+    @Override\n+    public void shouldNotifyEventWhenUpdateComment() {\n+        // We subscribe to the update document to check that we will not be notified about the comment updated as\n+        // document (see CommentModificationVeto), only the comment updated.\n+        Comment comment = createComment(commentedDocumentModel);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_UPDATED)) {\n+            comment.setText(\"I update the comment\");\n+            commentManager.updateComment(session, comment.getId(), comment);\n+            DocumentModel commentDocumentModel = session.getDocument(new IdRef(comment.getId()));\n+            DocumentModel commentParentDocumentModel = session.getDocument(\n+                    new IdRef((String) commentDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();\n+            Event expectedEvent = listener.streamCapturedEvents()\n+                                          .findFirst()\n+                                          .orElseThrow(() -> new AssertionError(\"Event wasn't fired\"));\n+            checkDocumentEventContext(expectedEvent, commentDocumentModel, commentParentDocumentModel,\n+                    commentedDocumentModel);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void shouldNotifyEventWhenRemoveComment() {\n+        Comment comment = createComment(commentedDocumentModel);\n+        DocumentModel commentDocModel = session.getDocument(new IdRef(comment.getId()));\n+        commentDocModel.detach(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec71ed3dd19eecffb234e02958487c04e1c0fa8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2ODg1Ng==", "bodyText": "Generally, put the transactionalFeature.nextTransaction(); just after the code triggering async stuff, and then fetch new documents with the new session.\nSame for all tests in all files in this PR.", "url": "https://github.com/nuxeo/nuxeo/pull/3695#discussion_r377768856", "createdAt": "2020-02-11T17:00:29Z", "author": {"login": "troger"}, "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/AbstractTestCommentNotification.java", "diffHunk": "@@ -97,56 +97,84 @@ protected CommentManager getCommentManager() {\n \n     @Test\n     public void shouldNotifyEventWhenCreateComment() {\n-        // We subscribe to the creation document to check that we will not be notified about the comment creation as\n-        // document (see CommentCreationVeto), only the comment added, and the 'File' document creation\n-        captureAndVerifyCommentEventNotification(() -> {\n-            Comment createdComment = createCommentAndAddSubscription(\"CommentAdded\", \"Creation\");\n-            return session.getDocument(new IdRef(createdComment.getId()));\n-        }, COMMENT_ADDED, DOCUMENT_CREATED);\n+        try (CapturingEventListener listener = new CapturingEventListener(COMMENT_ADDED)) {\n+            Comment comment = createComment(commentedDocumentModel);\n+            DocumentModel commentDocumentModel = session.getDocument(new IdRef(comment.getId()));\n+            DocumentModel commentParentDocumentModel = session.getDocument(\n+                    new IdRef((String) commentDocumentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            transactionalFeature.nextTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec71ed3dd19eecffb234e02958487c04e1c0fa8"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da4085abd7bf1e3a18b36e527aab323173454fe9", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/da4085abd7bf1e3a18b36e527aab323173454fe9", "committedDate": "2020-02-12T11:05:01Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "935f1d14d60a740d198b43576412575dead0271c", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/935f1d14d60a740d198b43576412575dead0271c", "committedDate": "2020-02-12T11:20:11Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Mzc2MTQw", "url": "https://github.com/nuxeo/nuxeo/pull/3695#pullrequestreview-357376140", "createdAt": "2020-02-12T11:23:56Z", "commit": {"oid": "935f1d14d60a740d198b43576412575dead0271c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzE5MjYw", "url": "https://github.com/nuxeo/nuxeo/pull/3695#pullrequestreview-362719260", "createdAt": "2020-02-21T15:40:48Z", "commit": {"oid": "935f1d14d60a740d198b43576412575dead0271c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "935f1d14d60a740d198b43576412575dead0271c", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/935f1d14d60a740d198b43576412575dead0271c", "committedDate": "2020-02-12T11:20:11Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "d8b49b8170d57f394185585aa1b51ec3fe9f5a42", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d8b49b8170d57f394185585aa1b51ec3fe9f5a42", "committedDate": "2020-02-21T18:53:10Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8b49b8170d57f394185585aa1b51ec3fe9f5a42", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/d8b49b8170d57f394185585aa1b51ec3fe9f5a42", "committedDate": "2020-02-21T18:53:10Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "946548fee13c9af1928e76787724b7561f2bb14e", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/946548fee13c9af1928e76787724b7561f2bb14e", "committedDate": "2020-02-21T19:01:03Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "author": {"user": {"login": "kevinleturc", "name": "Kevin Leturc"}}, "url": "https://github.com/nuxeo/nuxeo/commit/cd85f0c1299c1f3cdde4f0fd73113e7e5fcd4b24", "committedDate": "2020-02-21T19:13:42Z", "message": "NXP-28484: Allow to partially update comments/annotations through REST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "279bd24f8081a9faac94a424489563c614d73640", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/279bd24f8081a9faac94a424489563c614d73640", "committedDate": "2020-02-21T19:13:51Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "946548fee13c9af1928e76787724b7561f2bb14e", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/946548fee13c9af1928e76787724b7561f2bb14e", "committedDate": "2020-02-21T19:01:03Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}, "afterCommit": {"oid": "279bd24f8081a9faac94a424489563c614d73640", "author": {"user": {"login": "NourNuxeo", "name": "Nour AL KOTOB"}}, "url": "https://github.com/nuxeo/nuxeo/commit/279bd24f8081a9faac94a424489563c614d73640", "committedDate": "2020-02-21T19:13:51Z", "message": "NXP-28254: fix up smart autosubscribe to comment notifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjk1NjYw", "url": "https://github.com/nuxeo/nuxeo/pull/3695#pullrequestreview-363295660", "createdAt": "2020-02-24T10:38:56Z", "commit": {"oid": "279bd24f8081a9faac94a424489563c614d73640"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDU1OTc3", "url": "https://github.com/nuxeo/nuxeo/pull/3695#pullrequestreview-363455977", "createdAt": "2020-02-24T15:04:59Z", "commit": {"oid": "279bd24f8081a9faac94a424489563c614d73640"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4889, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}