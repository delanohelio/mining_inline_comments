{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MDgzNDE2", "number": 4552, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxODo1NVrOFIIz0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyOToxMlrOFILW2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc3MjY3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxODo1NVrOIJ5PUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxODo1NVrOIJ5PUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NTkwNA==", "bodyText": "You could use javax.ws.rs.core.MediaType.TEXT_HTML etc. for the constants (if it's not a dependency to add)", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547245904", "createdAt": "2020-12-22T12:18:55Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc3NTExOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxOTo0OVrOIJ5QxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxOTo0OVrOIJ5QxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NjI3Nw==", "bodyText": "Please put the log as the first constant.", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547246277", "createdAt": "2020-12-22T12:19:49Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc3OTIzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoyMToyMVrOIJ5TPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoyMToyMVrOIJ5TPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NjkwOQ==", "bodyText": "\"UTF-8\" -> null, it's the default and doesn't need to be explicit", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547246909", "createdAt": "2020-12-22T12:21:21Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/test/java/org/nuxeo/ecm/platform/preview/tests/adapter/TestPreviewAdapter.java", "diffHunk": "@@ -103,16 +110,53 @@ public void testXMLDocument() throws Exception {\n         doTestFileDocument(blob, \"\\n\\n<b>test</b>\");\n     }\n \n+    @Test\n+    @Deploy(\"org.nuxeo.ecm.platform.preview:test-zip-preview-contrib.xml\")\n+    public void testZIPDocument() throws Exception {\n+        File file = Framework.createTempFile(\"testZIPDocument\", \".zip\");\n+        try (ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file))) {\n+            writeZipEntry(out, \"payload.html\");\n+            writeZipEntry(out, \"payload.xml\");\n+            writeZipEntry(out, \"payload.txt\");\n+        }\n+        Blob blob = Blobs.createBlob(file, \"application/zip\", \"UTF-8\", \"testZIPDocument.zip\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc4ODg2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoyNDoyNlrOIJ5Ywg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoyNDoyNlrOIJ5Ywg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0ODMyMg==", "bodyText": "\"UTF-8\" -> null", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547248322", "createdAt": "2020-12-22T12:24:26Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) throws PreviewException {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", \"UTF-8\", filename);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc5MTg1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoyNToyNFrOIJ5alg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzoxNzo1N1rOIJ637A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0ODc5MA==", "bodyText": "Is that the right error message?", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547248790", "createdAt": "2020-12-22T12:25:24Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) throws PreviewException {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", \"UTF-8\", filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot fetch ZipEntryBlob content with filename: \" + filename, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3MjY4NA==", "bodyText": "Yes, IOException is only thrown by blob.getString().", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547272684", "createdAt": "2020-12-22T13:17:57Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) throws PreviewException {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", \"UTF-8\", filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot fetch ZipEntryBlob content with filename: \" + filename, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0ODc5MA=="}, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDgwNjM4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjozMDoxOFrOIJ5jCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjo0NDoxNVrOIJ57Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1MDk1Mg==", "bodyText": "Isn't there a risk that we'll read all the \"lines\" of a binary file for example?", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547250952", "createdAt": "2020-12-22T12:30:18Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) throws PreviewException {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", \"UTF-8\", filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot fetch ZipEntryBlob content with filename: \" + filename, e);\n+        }\n+    }\n+\n+    protected boolean isSanitizable(Blob blob) {\n+        String mimeType = getMimetypeRegistry().getMimetypeFromFilenameWithBlobMimetypeFallback(blob.getFilename(), blob, null);\n+        boolean sanitized = false;\n+        if (mimeType == null) {\n+            try (InputStream stream = blob.getStream()) {\n+                // last chance introspect the content\n+                LineIterator lineIt = IOUtils.lineIterator(stream, defaultIfNull(blob.getEncoding(), \"UTF-8\"));\n+                while (lineIt.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1NDcyMA==", "bodyText": "Yes it is possible if we don't succeed to detect the mime type. This piece of code is there to handle xml files, because the mime type registry doesn't recognize them due to its ambiguous definition.\nDo you see another way to do this?", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547254720", "createdAt": "2020-12-22T12:38:56Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) throws PreviewException {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", \"UTF-8\", filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot fetch ZipEntryBlob content with filename: \" + filename, e);\n+        }\n+    }\n+\n+    protected boolean isSanitizable(Blob blob) {\n+        String mimeType = getMimetypeRegistry().getMimetypeFromFilenameWithBlobMimetypeFallback(blob.getFilename(), blob, null);\n+        boolean sanitized = false;\n+        if (mimeType == null) {\n+            try (InputStream stream = blob.getStream()) {\n+                // last chance introspect the content\n+                LineIterator lineIt = IOUtils.lineIterator(stream, defaultIfNull(blob.getEncoding(), \"UTF-8\"));\n+                while (lineIt.hasNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1MDk1Mg=="}, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1NzEwMg==", "bodyText": "I don't see another way if we can't detect the type, we have to read it manually.", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547257102", "createdAt": "2020-12-22T12:44:15Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) throws PreviewException {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", \"UTF-8\", filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot fetch ZipEntryBlob content with filename: \" + filename, e);\n+        }\n+    }\n+\n+    protected boolean isSanitizable(Blob blob) {\n+        String mimeType = getMimetypeRegistry().getMimetypeFromFilenameWithBlobMimetypeFallback(blob.getFilename(), blob, null);\n+        boolean sanitized = false;\n+        if (mimeType == null) {\n+            try (InputStream stream = blob.getStream()) {\n+                // last chance introspect the content\n+                LineIterator lineIt = IOUtils.lineIterator(stream, defaultIfNull(blob.getEncoding(), \"UTF-8\"));\n+                while (lineIt.hasNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1MDk1Mg=="}, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDgwODQxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjozMTowMlrOIJ5kLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjozMTowMlrOIJ5kLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1MTI0NQ==", "bodyText": "You could return directly here, no need for a local sanitized variable (which I'd have called sanitizable)", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547251245", "createdAt": "2020-12-22T12:31:02Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(\"text/html\", \"text/xml\", \"text/plain\");\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) throws PreviewException {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", \"UTF-8\", filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot fetch ZipEntryBlob content with filename: \" + filename, e);\n+        }\n+    }\n+\n+    protected boolean isSanitizable(Blob blob) {\n+        String mimeType = getMimetypeRegistry().getMimetypeFromFilenameWithBlobMimetypeFallback(blob.getFilename(), blob, null);\n+        boolean sanitized = false;\n+        if (mimeType == null) {\n+            try (InputStream stream = blob.getStream()) {\n+                // last chance introspect the content\n+                LineIterator lineIt = IOUtils.lineIterator(stream, defaultIfNull(blob.getEncoding(), \"UTF-8\"));\n+                while (lineIt.hasNext()) {\n+                    String line = lineIt.nextLine();\n+                    sanitized = line.contains(\"<script\");\n+                    if (sanitized) {\n+                        break;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc37e894b628162468872e2b2e5852361d0a8e7f"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTEyMDcwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDowOTozMFrOIJ8awg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDowOTozMFrOIJ8awg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5Nzk4Ng==", "bodyText": "Zip blobs", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547297986", "createdAt": "2020-12-22T14:09:30Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTEzMDYyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoxMjo0MFrOIJ8guw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoxMjo0MFrOIJ8guw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5OTUxNQ==", "bodyText": "maybe a more generic message like \"Unable to find converter from application/zip to text/html\"", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547299515", "createdAt": "2020-12-22T14:12:40Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(TEXT_HTML, TEXT_XML, TEXT_PLAIN);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTE0OTE3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoxODowNVrOIJ8rqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo0MTozMFrOIJ9dPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwMjMxMg==", "bodyText": "Any point using streams here?", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547302312", "createdAt": "2020-12-22T14:18:05Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(TEXT_HTML, TEXT_XML, TEXT_PLAIN);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxNTAwNg==", "bodyText": "Yes, we save some lines, I'll change it to Stream.", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547315006", "createdAt": "2020-12-22T14:41:30Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(TEXT_HTML, TEXT_XML, TEXT_PLAIN);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwMjMxMg=="}, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTE4OTI0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyOTowMlrOIJ9DKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo1NjozNVrOIJ9-KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwODMyOQ==", "bodyText": "can this happen?", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547308329", "createdAt": "2020-12-22T14:29:02Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(TEXT_HTML, TEXT_XML, TEXT_PLAIN);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", null, filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot read ZipEntryBlob content with filename: \" + filename, e);\n+        }\n+    }\n+\n+    protected boolean isSanitizable(Blob blob) {\n+        String mimeType = getMimetypeRegistry().getMimetypeFromFilenameWithBlobMimetypeFallback(blob.getFilename(),\n+                blob, null);\n+        if (mimeType == null) {\n+            try (InputStream stream = blob.getStream()) {\n+                // last chance introspect the content\n+                LineIterator lineIt = IOUtils.lineIterator(stream, defaultIfNull(blob.getEncoding(), \"UTF-8\"));\n+                while (lineIt.hasNext()) {\n+                    String line = lineIt.nextLine();\n+                    if (line.contains(\"<script\")) {\n+                        return true;\n+                    }\n+                }\n+                return false;\n+            } catch (IOException e) {\n+                throw new PreviewException(\"Unable to introspect content\");\n+            }\n+        } else {\n+            return HTML_MIME_TYPES.contains(mimeType);\n+        }\n+    }\n+\n+    protected MimetypeRegistry getMimetypeRegistry() {\n+        MimetypeRegistry registry = Framework.getService(MimetypeRegistry.class);\n+        if (registry == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMzQzMg==", "bodyText": "Probably not. I will remove them.", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547323432", "createdAt": "2020-12-22T14:56:35Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(TEXT_HTML, TEXT_XML, TEXT_PLAIN);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", null, filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot read ZipEntryBlob content with filename: \" + filename, e);\n+        }\n+    }\n+\n+    protected boolean isSanitizable(Blob blob) {\n+        String mimeType = getMimetypeRegistry().getMimetypeFromFilenameWithBlobMimetypeFallback(blob.getFilename(),\n+                blob, null);\n+        if (mimeType == null) {\n+            try (InputStream stream = blob.getStream()) {\n+                // last chance introspect the content\n+                LineIterator lineIt = IOUtils.lineIterator(stream, defaultIfNull(blob.getEncoding(), \"UTF-8\"));\n+                while (lineIt.hasNext()) {\n+                    String line = lineIt.nextLine();\n+                    if (line.contains(\"<script\")) {\n+                        return true;\n+                    }\n+                }\n+                return false;\n+            } catch (IOException e) {\n+                throw new PreviewException(\"Unable to introspect content\");\n+            }\n+        } else {\n+            return HTML_MIME_TYPES.contains(mimeType);\n+        }\n+    }\n+\n+    protected MimetypeRegistry getMimetypeRegistry() {\n+        MimetypeRegistry registry = Framework.getService(MimetypeRegistry.class);\n+        if (registry == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwODMyOQ=="}, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTE5MDAxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyOToxMlrOIJ9DlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyOToxMlrOIJ9DlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwODQzNw==", "bodyText": "same question", "url": "https://github.com/nuxeo/nuxeo/pull/4552#discussion_r547308437", "createdAt": "2020-12-22T14:29:12Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-preview-core/src/main/java/org/nuxeo/ecm/platform/preview/adapter/ZipPreviewer.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+package org.nuxeo.ecm.platform.preview.adapter;\n+\n+import static javax.ws.rs.core.MediaType.TEXT_HTML;\n+import static javax.ws.rs.core.MediaType.TEXT_PLAIN;\n+import static javax.ws.rs.core.MediaType.TEXT_XML;\n+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.blobholder.BlobHolder;\n+import org.nuxeo.ecm.core.api.blobholder.SimpleBlobHolder;\n+import org.nuxeo.ecm.core.convert.api.ConversionException;\n+import org.nuxeo.ecm.core.convert.api.ConversionService;\n+import org.nuxeo.ecm.platform.htmlsanitizer.HtmlSanitizerService;\n+import org.nuxeo.ecm.platform.mimetype.interfaces.MimetypeRegistry;\n+import org.nuxeo.ecm.platform.preview.api.PreviewException;\n+import org.nuxeo.ecm.platform.preview.helper.PreviewHelper;\n+import org.nuxeo.runtime.api.Framework;\n+\n+/**\n+ * Previewer for Zip blob.\n+ * <p>\n+ * It sanitizes each zip entry if needed.\n+ *\n+ * @since 11.5\n+ */\n+public class ZipPreviewer implements MimeTypePreviewer {\n+\n+    private static final Logger log = LogManager.getLogger(ZipPreviewer.class);\n+\n+    protected static final Set<String> HTML_MIME_TYPES = Set.of(TEXT_HTML, TEXT_XML, TEXT_PLAIN);\n+\n+    @Override\n+    public List<Blob> getPreview(Blob blob, DocumentModel dm) throws PreviewException {\n+        ConversionService conversionService = Framework.getService(ConversionService.class);\n+        String converterName = conversionService.getConverterName(\"application/zip\", \"text/html\");\n+        if (converterName == null) {\n+            throw new PreviewException(\"Unable to find zip2html converter\");\n+        }\n+\n+        try {\n+            BlobHolder result = conversionService.convert(converterName, new SimpleBlobHolder(blob), null);\n+            List<Blob> blobs = new ArrayList<>(result.getBlobs());\n+            blobs.replaceAll(this::sanitize);\n+            return blobs;\n+        } catch (ConversionException e) {\n+            throw new PreviewException(e.getMessage(), e);\n+        }\n+    }\n+\n+    protected Blob sanitize(Blob blob) {\n+        String filename = blob.getFilename();\n+        if (!isSanitizable(blob)) {\n+            log.debug(\"ZipEntryBlob: {} is not sanitizable\", filename);\n+            return blob;\n+        }\n+        try {\n+            String content = blob.getString();\n+            content = getHtmlSanitizerService().sanitizeString(content, null);\n+            content = PreviewHelper.makeHtmlPage(content);\n+            return Blobs.createBlob(content, \"text/html\", null, filename);\n+        } catch (IOException e) {\n+            throw new PreviewException(\"Cannot read ZipEntryBlob content with filename: \" + filename, e);\n+        }\n+    }\n+\n+    protected boolean isSanitizable(Blob blob) {\n+        String mimeType = getMimetypeRegistry().getMimetypeFromFilenameWithBlobMimetypeFallback(blob.getFilename(),\n+                blob, null);\n+        if (mimeType == null) {\n+            try (InputStream stream = blob.getStream()) {\n+                // last chance introspect the content\n+                LineIterator lineIt = IOUtils.lineIterator(stream, defaultIfNull(blob.getEncoding(), \"UTF-8\"));\n+                while (lineIt.hasNext()) {\n+                    String line = lineIt.nextLine();\n+                    if (line.contains(\"<script\")) {\n+                        return true;\n+                    }\n+                }\n+                return false;\n+            } catch (IOException e) {\n+                throw new PreviewException(\"Unable to introspect content\");\n+            }\n+        } else {\n+            return HTML_MIME_TYPES.contains(mimeType);\n+        }\n+    }\n+\n+    protected MimetypeRegistry getMimetypeRegistry() {\n+        MimetypeRegistry registry = Framework.getService(MimetypeRegistry.class);\n+        if (registry == null) {\n+            throw new PreviewException(\"Cannot find MimetypeRegistry\");\n+        }\n+        return registry;\n+    }\n+\n+    protected HtmlSanitizerService getHtmlSanitizerService() {\n+        HtmlSanitizerService sanitizer = Framework.getService(HtmlSanitizerService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd465c3c8ca2e2e3d80fd01f6a9da33e5cbf01b"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4316, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}