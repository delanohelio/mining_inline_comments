{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjM3MTkw", "number": 3886, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToyOTo1M1rODubTsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToyOTo1M1rODubTsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDA4NDk3OnYy", "diffSide": "RIGHT", "path": "addons/nuxeo-segment.io-connector/src/test/java/org/nuxeo/segment/io/listener/TestSegmentIOListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToyOTo1M1rOGAahaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDozMjowOVrOGBRi_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4NzcyMQ==", "bodyText": "Better to use WithFrameworkProperty instead :)\nSample here: \n  \n    \n      nuxeo/modules/platform/nuxeo-mail/src/test/java/org/nuxeo/mail/TestMailSessionBuilder.java\n    \n    \n         Line 80\n      in\n      2387c0b\n    \n    \n    \n    \n\n        \n          \n           @WithFrameworkProperty(name = CONFIGURATION_MAIL_DEBUG, value = \"true\")", "url": "https://github.com/nuxeo/nuxeo/pull/3886#discussion_r403087721", "createdAt": "2020-04-03T15:29:53Z", "author": {"login": "troger"}, "path": "addons/nuxeo-segment.io-connector/src/test/java/org/nuxeo/segment/io/listener/TestSegmentIOListener.java", "diffHunk": "@@ -52,19 +57,54 @@\n     @Inject\n     protected CoreSession session;\n \n+    private List<Map<String, Object>> testData;\n+\n+    @Before\n+    public void before() {\n+        testData = ((SegmentIOComponent) service).getTestData();\n+    }\n+\n+    @After\n+    public void after() {\n+        testData.clear();\n+    }\n+\n     @Test\n     public void ensureToHandleEveryEventsInABundle() {\n         EventBundle eventBundle = new EventBundleImpl();\n-        // Add event with ignored users\n+        // Add events with ignored users\n         eventBundle.push(new EventImpl(\"dummyEvent\", buildCtx(\"MyAdministrator\")));\n         eventBundle.push(new EventImpl(\"dummyEvent\", buildCtx(\"mysystem\")));\n-        // Add event with another user\n+        // Add events with other users\n         eventBundle.push(new EventImpl(\"dummyEvent\", buildCtx(\"johndoe\")));\n+        eventBundle.push(new EventImpl(\"dummyEvent\", buildCtx(\"janedoe\")));\n \n         SegmentIOAsyncListener listener = new SegmentIOAsyncListener();\n         listener.handleEvent(eventBundle);\n \n-        assertEquals(1, ((SegmentIOComponent) service).getTestData().size());\n+        assertEquals(2, testData.size());\n+    }\n+\n+    @Test\n+    public void ensureServerUrlIsPassed() {\n+        EventBundle eventBundle = new EventBundleImpl();\n+        // Add an event with nuxeo.url not set\n+        eventBundle.push(new EventImpl(\"dummyEvent\", buildCtx(\"johndoe\")));\n+\n+        SegmentIOAsyncListener listener = new SegmentIOAsyncListener();\n+        listener.handleEvent(eventBundle);\n+\n+        assertEquals(1, testData.size());\n+        assertEquals(\"unknown server url\", testData.get(0).get(\"url\"));\n+\n+        // set nuxeo.url\n+        System.setProperty(\"nuxeo.url\", \"http://mytestserver.com\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09d0940a2814a305bbcfb04ca0cd02cadd390b8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4OTI0Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/3886#discussion_r403989247", "createdAt": "2020-04-06T10:32:09Z", "author": {"login": "yjulienne-nuxeo"}, "path": "addons/nuxeo-segment.io-connector/src/test/java/org/nuxeo/segment/io/listener/TestSegmentIOListener.java", "diffHunk": "@@ -52,19 +57,54 @@\n     @Inject\n     protected CoreSession session;\n \n+    private List<Map<String, Object>> testData;\n+\n+    @Before\n+    public void before() {\n+        testData = ((SegmentIOComponent) service).getTestData();\n+    }\n+\n+    @After\n+    public void after() {\n+        testData.clear();\n+    }\n+\n     @Test\n     public void ensureToHandleEveryEventsInABundle() {\n         EventBundle eventBundle = new EventBundleImpl();\n-        // Add event with ignored users\n+        // Add events with ignored users\n         eventBundle.push(new EventImpl(\"dummyEvent\", buildCtx(\"MyAdministrator\")));\n         eventBundle.push(new EventImpl(\"dummyEvent\", buildCtx(\"mysystem\")));\n-        // Add event with another user\n+        // Add events with other users\n         eventBundle.push(new EventImpl(\"dummyEvent\", buildCtx(\"johndoe\")));\n+        eventBundle.push(new EventImpl(\"dummyEvent\", buildCtx(\"janedoe\")));\n \n         SegmentIOAsyncListener listener = new SegmentIOAsyncListener();\n         listener.handleEvent(eventBundle);\n \n-        assertEquals(1, ((SegmentIOComponent) service).getTestData().size());\n+        assertEquals(2, testData.size());\n+    }\n+\n+    @Test\n+    public void ensureServerUrlIsPassed() {\n+        EventBundle eventBundle = new EventBundleImpl();\n+        // Add an event with nuxeo.url not set\n+        eventBundle.push(new EventImpl(\"dummyEvent\", buildCtx(\"johndoe\")));\n+\n+        SegmentIOAsyncListener listener = new SegmentIOAsyncListener();\n+        listener.handleEvent(eventBundle);\n+\n+        assertEquals(1, testData.size());\n+        assertEquals(\"unknown server url\", testData.get(0).get(\"url\"));\n+\n+        // set nuxeo.url\n+        System.setProperty(\"nuxeo.url\", \"http://mytestserver.com\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4NzcyMQ=="}, "originalCommit": {"oid": "c09d0940a2814a305bbcfb04ca0cd02cadd390b8"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4237, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}