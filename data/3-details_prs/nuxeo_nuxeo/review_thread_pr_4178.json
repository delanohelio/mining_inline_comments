{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MDEzOTcx", "number": 4178, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0NzoyNFrOEIQXSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozNzo0MFrOEJIsbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDkyMTcxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BaseNuxeoArtifactDocAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0NzoyNFrOGoGyGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoxMzo0OFrOGoHqkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNzM1NQ==", "bodyText": "I would have said that document adapter is immutable regarding their doc.\nFrom what I understand this is used in a sub class, therefore we could make it protected to only allow this usage, wdyt?", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444707355", "createdAt": "2020-06-24T07:47:24Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BaseNuxeoArtifactDocAdapter.java", "diffHunk": "@@ -88,6 +88,15 @@ public DocumentModel getDoc() {\n         return doc;\n     }\n \n+    /**\n+     * Updates the document behind this adapter.\n+     *\n+     * @since 11.2\n+     */\n+    public void setDoc(DocumentModel doc) {\n+        this.doc = doc;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyMTgwOA==", "bodyText": "This update might not be needed anyway, i'll check", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444721808", "createdAt": "2020-06-24T08:13:48Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/BaseNuxeoArtifactDocAdapter.java", "diffHunk": "@@ -88,6 +88,15 @@ public DocumentModel getDoc() {\n         return doc;\n     }\n \n+    /**\n+     * Updates the document behind this adapter.\n+     *\n+     * @since 11.2\n+     */\n+    public void setDoc(DocumentModel doc) {\n+        this.doc = doc;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNzM1NQ=="}, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDkyNTcwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0ODozNVrOGoG0rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODozMjo1NlrOGoIWJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODAxMg==", "bodyText": "Don't you want to test the get/safeGet of this property?", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444708012", "createdAt": "2020-06-24T07:48:35Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyMTU2MA==", "bodyText": "You mean adding unit tests? Why not indeed", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444721560", "createdAt": "2020-06-24T08:13:24Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODAxMg=="}, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyNTQyNw==", "bodyText": "No, I meant that you're testing is TITLE_PROPERTY_PATH which shouldn't be the case as it's a constant.", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444725427", "createdAt": "2020-06-24T08:20:17Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODAxMg=="}, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMjk2NQ==", "bodyText": "Ah thanks indeed", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444732965", "createdAt": "2020-06-24T08:32:56Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODAxMg=="}, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDkzOTY1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1MzowNlrOGoG9sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1MzowNlrOGoG9sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMDMyMA==", "bodyText": "Could these two props be given to the first Stream?", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444710320", "createdAt": "2020-06-24T07:53:06Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDk0NjUyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NDo1N1rOGoHB8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NDo1N1rOGoHB8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMTQwOA==", "bodyText": "This should work:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              .filter(entry -> updateProperties.containsKey(entry))\n          \n          \n            \n                              .filter(updateProperties::containsKey)", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444711408", "createdAt": "2020-06-24T07:54:57Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDk1MDgyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NjowMFrOGoHEhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0MDowMVrOGoIl3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjA2OQ==", "bodyText": "Shouldn't we use the UTC ZoneId?", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444712069", "createdAt": "2020-06-24T07:56:00Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            if (updateProperties.containsKey(PROP_RELEASED)) {\n+                String released = updateProperties.get(PROP_RELEASED);\n+                if (StringUtils.isNotBlank(released)) {\n+                    LocalDate date = LocalDate.parse(released);\n+                    Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyMjg5NQ==", "bodyText": "I took that logic from https://github.com/nuxeo/nuxeo/blob/master/modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java#L320 and we only display the day, so maybe it would be overkill (?)", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444722895", "createdAt": "2020-06-24T08:15:42Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            if (updateProperties.containsKey(PROP_RELEASED)) {\n+                String released = updateProperties.get(PROP_RELEASED);\n+                if (StringUtils.isNotBlank(released)) {\n+                    LocalDate date = LocalDate.parse(released);\n+                    Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjA2OQ=="}, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMTY2MA==", "bodyText": "It's an issue to save a date/datetime in the DB in another timezone than UTC. ES would make this assumption leading to weird behavior on search.\nThis may not be needed in this case, furthermore, data may have already been persisted with this approach and we need to keep it for backward.", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444731660", "createdAt": "2020-06-24T08:30:43Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            if (updateProperties.containsKey(PROP_RELEASED)) {\n+                String released = updateProperties.get(PROP_RELEASED);\n+                if (StringUtils.isNotBlank(released)) {\n+                    LocalDate date = LocalDate.parse(released);\n+                    Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjA2OQ=="}, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczNjk5MA==", "bodyText": "Changed it anyway, backward compat is not needed for this i think", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444736990", "createdAt": "2020-06-24T08:40:01Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            if (updateProperties.containsKey(PROP_RELEASED)) {\n+                String released = updateProperties.get(PROP_RELEASED);\n+                if (StringUtils.isNotBlank(released)) {\n+                    LocalDate date = LocalDate.parse(released);\n+                    Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjA2OQ=="}, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDk1MzEwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NjozNVrOGoHF5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1NjozNVrOGoHF5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMjQyMQ==", "bodyText": "java.util.Date is imported by the class, the full qualified name shouldn't be needed.", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444712421", "createdAt": "2020-06-24T07:56:35Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +444,97 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> formFields.containsKey(entry))\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+            if (formFields.containsKey(PROP_RELEASED)) {\n+                props.put(PROP_RELEASED, formFields.get(PROP_RELEASED)[0]);\n+            }\n+            if (formFields.containsKey(PROP_ALIASES)) {\n+                props.put(PROP_ALIASES, formFields.get(PROP_ALIASES)[0]);\n+            }\n+        }\n+        return props;\n+    }\n+\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n+            throws DocumentValidationException {\n+        DocumentModel doc = getDoc();\n+        if (updateProperties != null) {\n+            if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                      .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                throw new DocumentValidationException(\"Please fill all required fields.\");\n+            }\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE)\n+                  .filter(entry -> updateProperties.containsKey(entry))\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+            if (updateProperties.containsKey(PROP_RELEASED)) {\n+                String released = updateProperties.get(PROP_RELEASED);\n+                if (StringUtils.isNotBlank(released)) {\n+                    LocalDate date = LocalDate.parse(released);\n+                    Instant instant = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();\n+                    doc.setPropertyValue(DistributionSnapshot.PROP_RELEASED, java.util.Date.from(instant));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDk1OTIxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1ODowOFrOGoHJjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1ODowOFrOGoHJjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxMzM1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                  .forEach(snap -> distribs.add(snap));\n          \n          \n            \n                                                  .forEach(distribs::add);", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444713358", "createdAt": "2020-06-24T07:58:08Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -177,12 +162,15 @@ protected boolean canSeeRuntimeSnapshot(CoreSession session) {\n \n     @Override\n     public List<DistributionSnapshotDesc> getAvailableDistributions(CoreSession session) {\n-        List<DistributionSnapshotDesc> names = new ArrayList<>();\n-        names.addAll(getPersistentSnapshots(session).values());\n+        List<DistributionSnapshotDesc> distribs = new ArrayList<>();\n+        RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n+                                      .stream()\n+                                      .filter(snap -> !snap.isHidden())\n+                                      .forEach(snap -> distribs.add(snap));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11da8504be3503664902777c1f64f5b770c7fbcd"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjY3MjMxOnYy", "diffSide": "RIGHT", "path": "ftests/nuxeo-platform-explorer-ftests/explorer-ftests-base/src/main/java/org/nuxeo/functionaltests/explorer/pages/DistribAdminPage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0MDo1NVrOGoYA0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0MDo1NVrOGoYA0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4OTY1MQ==", "bodyText": "double ; at the end", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r444989651", "createdAt": "2020-06-24T15:40:55Z", "author": {"login": "NourNuxeo"}, "path": "ftests/nuxeo-platform-explorer-ftests/explorer-ftests-base/src/main/java/org/nuxeo/functionaltests/explorer/pages/DistribAdminPage.java", "diffHunk": "@@ -42,12 +43,18 @@\n  */\n public class DistribAdminPage extends AbstractExplorerPage {\n \n-    public static final String URL = \"/site/distribution/_admin\";\n+    public static final String URL = String.format(\"%s%s/\", ExplorerHomePage.URL, Distribution.VIEW_ADMIN);\n+\n+    /** @since 11.2 */\n+    public static final String UPDATE_URL = String.format(\"%supdate/\", ExplorerHomePage.URL);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "147d1f5d077691d7f72c5c4da0542ae9d038272f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTUwNTE1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTo1NTowN1rOGozuPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTo1NTowN1rOGozuPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0MzY0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<DistributionSnapshotDesc> distribs = new ArrayList<>();\n          \n          \n            \n                    RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n          \n          \n            \n                                                  .stream()\n          \n          \n            \n                                                  .filter(snap -> !snap.isHidden())\n          \n          \n            \n                                                  .forEach(distribs::add);\n          \n          \n            \n                    List<DistributionSnapshotDesc> distribs = RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n          \n          \n            \n                                                  .stream()\n          \n          \n            \n                                                  .filter(snap -> !snap.isHidden())\n          \n          \n            \n                                                  .collect(Collectors.toList());", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r445443647", "createdAt": "2020-06-25T09:55:07Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -174,12 +162,15 @@ protected boolean canSeeRuntimeSnapshot(CoreSession session) {\n \n     @Override\n     public List<DistributionSnapshotDesc> getAvailableDistributions(CoreSession session) {\n-        List<DistributionSnapshotDesc> names = new ArrayList<>();\n-        names.addAll(getPersistentSnapshots(session).values());\n+        List<DistributionSnapshotDesc> distribs = new ArrayList<>();\n+        RepositoryDistributionSnapshot.readPersistentSnapshots(session)\n+                                      .stream()\n+                                      .filter(snap -> !snap.isHidden())\n+                                      .forEach(distribs::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe69dc6445bab786eac57d91f553906ce771555f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTI3NzY3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo0MDo0MlrOGpYtTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjoyMToxM1rOGpe0EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0OTYxMw==", "bodyText": "why separating the old operation in 2 parts ?\nif you want to do so i suggest:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .collect(Collectors.toList());\n          \n          \n            \n                        aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));\n          \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .map(alias -> {\n          \n          \n            \n                                            validateKeyOrAlias(alias, reservedKeys);\n          \n          \n            \n                                            return alias;\n          \n          \n            \n                                        })\n          \n          \n            \n                                        .collect(Collectors.toList());\n          \n      \n    \n    \n  \n\nwould avoid streaming twice ?\nYou could also peek but I know other devs don't recommend it https://rules.sonarsource.com/java/tag/java8/RSPEC-3864\nbut here you are only validating, not modifying and you do have a terminal operation so why not:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .collect(Collectors.toList());\n          \n          \n            \n                        aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));\n          \n          \n            \n                                        .filter(StringUtils::isNotBlank)\n          \n          \n            \n                                        .peek(alias -> validateKeyOrAlias(alias, reservedKeys))\n          \n          \n            \n                                        .collect(Collectors.toList());", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446049613", "createdAt": "2020-06-26T08:40:42Z", "author": {"login": "NourNuxeo"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -495,16 +497,29 @@ public DistributionSnapshot readJson(InputStream in) {\n      *\n      * @since 11.2\n      */\n-    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n-            throws DocumentValidationException {\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n         final DocumentModel doc = getDoc();\n         if (updateProperties == null) {\n             return doc;\n         }\n+        // validations\n         if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n-                  .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n             throw new DocumentValidationException(\"Please fill all required fields.\");\n         }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "991f3e5c326d17900bef72f427869e8fdbf9ab69"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4MDYwNw==", "bodyText": "As discussed:\n\nthe first filtering on blank values is done in a separate step just before to adjust the validation message (and blank aliases are already filtered upstream when processing the text value and splitting it)\nthe validation on aliases could indeed be done in the same stream, let's see if peek usage would be considered as a good practice by others maybe (?)", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446080607", "createdAt": "2020-06-26T09:42:01Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -495,16 +497,29 @@ public DistributionSnapshot readJson(InputStream in) {\n      *\n      * @since 11.2\n      */\n-    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n-            throws DocumentValidationException {\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n         final DocumentModel doc = getDoc();\n         if (updateProperties == null) {\n             return doc;\n         }\n+        // validations\n         if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n-                  .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n             throw new DocumentValidationException(\"Please fill all required fields.\");\n         }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0OTYxMw=="}, "originalCommit": {"oid": "991f3e5c326d17900bef72f427869e8fdbf9ab69"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0OTY0OA==", "bodyText": "I've been confirmed that peek usage is considered as a bad practice except for logging when debugging -> resolving as is (and the stream in question should contain 2 or 3 items, usually, so impact of processing it twice should be low)", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446149648", "createdAt": "2020-06-26T12:21:13Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -495,16 +497,29 @@ public DistributionSnapshot readJson(InputStream in) {\n      *\n      * @since 11.2\n      */\n-    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment)\n-            throws DocumentValidationException {\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n         final DocumentModel doc = getDoc();\n         if (updateProperties == null) {\n             return doc;\n         }\n+        // validations\n         if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n-                  .anyMatch(p -> StringUtils.isBlank(updateProperties.get(p)))) {\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n             throw new DocumentValidationException(\"Please fill all required fields.\");\n         }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0OTYxMw=="}, "originalCommit": {"oid": "991f3e5c326d17900bef72f427869e8fdbf9ab69"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDA4OTUwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoyMDoxMFrOGpgmhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoyMDoxMFrOGpgmhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3ODk0OQ==", "bodyText": "StringUtils.isBlank(TITLE_PROPERTY_PATH) is always false", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446178949", "createdAt": "2020-06-26T13:20:10Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDA5Mzc1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoyMToyOVrOGpgpQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoyMToyOVrOGpgpQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE3OTY0OQ==", "bodyText": "props.put(PROP_RELEASED, releaseDate == null ? null : new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate))", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446179649", "createdAt": "2020-06-26T13:21:29Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDEwNDQ5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoyNDoyOFrOGpgwJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoyNDoyOFrOGpgwJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4MTQxNA==", "bodyText": "proprties -> properties", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446181414", "createdAt": "2020-06-26T13:24:28Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDExMjgwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoyNjo0MFrOGpg1aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoyNjo0MFrOGpg1aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4Mjc2MA==", "bodyText": "aliases.forEach(...), no need for .stream()", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446182760", "createdAt": "2020-06-26T13:26:40Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE, PROP_RELEASED, PROP_ALIASES)\n+                  .filter(formFields::containsKey)\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(props.get(TITLE_PROPERTY_PATH))) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * Updates the distribution document metadata.\n+     *\n+     * @since 11.2\n+     */\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n+        final DocumentModel doc = getDoc();\n+        if (updateProperties == null) {\n+            return doc;\n+        }\n+        // validations\n+        if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n+            throw new DocumentValidationException(\"Please fill all required fields.\");\n+        }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDExNzc3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoyODowM1rOGpg4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzoyODowM1rOGpg4fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4MzU0OQ==", "bodyText": "For basic loops without filtering/mapping we should prefer List.of(...).forEach() to avoid building a stream.\nThere are several in this method and the following ones.", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446183549", "createdAt": "2020-06-26T13:28:03Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDE1MDg0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzozNzo0MFrOGphNqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDoxNjoxMVrOGpilPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4ODk3MQ==", "bodyText": "Why not simply if (forbidden.contains(keyOrAlias))?", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446188971", "createdAt": "2020-06-26T13:37:40Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE, PROP_RELEASED, PROP_ALIASES)\n+                  .filter(formFields::containsKey)\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(props.get(TITLE_PROPERTY_PATH))) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * Updates the distribution document metadata.\n+     *\n+     * @since 11.2\n+     */\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n+        final DocumentModel doc = getDoc();\n+        if (updateProperties == null) {\n+            return doc;\n+        }\n+        // validations\n+        if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n+            throw new DocumentValidationException(\"Please fill all required fields.\");\n+        }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));\n+        }\n+        // updates\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .filter(updateProperties::containsKey)\n+              .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+        if (updateProperties.containsKey(PROP_RELEASED)) {\n+            doc.setPropertyValue(DistributionSnapshot.PROP_RELEASED, convertDate(updateProperties.get(PROP_RELEASED)));\n+        }\n+        if (aliases != null) {\n+            doc.setPropertyValue(PROP_ALIASES, (Serializable) aliases);\n+        }\n+        if (!StringUtils.isBlank(comment)) {\n+            doc.putContextData(\"comment\", comment);\n+        }\n+        doc.putContextData(ThumbnailConstants.DISABLE_THUMBNAIL_COMPUTATION, true);\n+        DocumentModel updatedDoc = session.saveDocument(doc);\n+        session.save();\n+        return updatedDoc;\n+    }\n+\n+    protected void validateKeyOrAlias(String keyOrAlias, List<String> reservedKeys) throws DocumentValidationException {\n+        var forbidden = new ArrayList<>(List.of(\n+                // reserved for live distrib\n+                SnapshotManager.DISTRIBUTION_ALIAS_CURRENT, SnapshotManager.DISTRIBUTION_ALIAS_ADM,\n+                // added automatically\n+                SnapshotManager.DISTRIBUTION_ALIAS_LATEST_FT, SnapshotManager.DISTRIBUTION_ALIAS_LATEST_LTS));\n+        if (reservedKeys != null) {\n+            forbidden.addAll(reservedKeys);\n+        }\n+        Optional<String> match = forbidden.stream().filter(keyOrAlias::equals).findFirst();\n+        if (match.isPresent()) {\n+            throw new DocumentValidationException(\n+                    String.format(\"Distribution key or alias is reserved: '%s'\", match.get()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxMTM5MQ==", "bodyText": "Indeed, maybe i contracted some kind of lambda-related fever... \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/4178#discussion_r446211391", "createdAt": "2020-06-26T14:16:11Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/RepositoryDistributionSnapshot.java", "diffHunk": "@@ -434,4 +447,128 @@ public DistributionSnapshot readJson(InputStream in) {\n                         .stream()\n                         .collect(Collectors.toMap(Plugin::getId, p -> p.getRepositorySnapshot(getDoc())));\n     }\n+\n+    /**\n+     * Returns a key/value map of properties for update.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties() {\n+        Map<String, String> props = new HashMap<>();\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY).forEach(p -> props.put(p, safeGet(p)));\n+        if (StringUtils.isBlank(TITLE_PROPERTY_PATH)) {\n+            props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+        }\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> props.put(p, String.valueOf(doc.getPropertyValue(p))));\n+        Date releaseDate = getReleaseDate();\n+        if (releaseDate == null) {\n+            props.put(PROP_RELEASED, null);\n+        } else {\n+            props.put(PROP_RELEASED, new SimpleDateFormat(\"yyyy-MM-dd\").format(releaseDate));\n+        }\n+        List<String> aliases = safeGet(PROP_ALIASES);\n+        props.put(PROP_ALIASES, String.join(\"\\n\", aliases));\n+        return props;\n+    }\n+\n+    /**\n+     * Returns a key/value map of properties for update from request proprties.\n+     *\n+     * @since 11.2\n+     */\n+    public Map<String, String> getUpdateProperties(Map<String, String[]> formFields) {\n+        Map<String, String> props = new HashMap<>();\n+        if (formFields != null) {\n+            Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT,\n+                    PROP_HIDE, PROP_RELEASED, PROP_ALIASES)\n+                  .filter(formFields::containsKey)\n+                  .forEach(p -> props.put(p, formFields.get(p)[0]));\n+            if (StringUtils.isBlank(props.get(TITLE_PROPERTY_PATH))) {\n+                props.put(TITLE_PROPERTY_PATH, props.get(PROP_NAME));\n+            }\n+            Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+                  .forEach(p -> props.put(p, Boolean.toString(formFields.containsKey(p))));\n+        }\n+        return props;\n+    }\n+\n+    /**\n+     * Updates the distribution document metadata.\n+     *\n+     * @since 11.2\n+     */\n+    public DocumentModel updateDocument(CoreSession session, Map<String, String> updateProperties, String comment,\n+            List<String> reservedKeys) throws DocumentValidationException {\n+        final DocumentModel doc = getDoc();\n+        if (updateProperties == null) {\n+            return doc;\n+        }\n+        // validations\n+        if (Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY)\n+                  .anyMatch(p -> updateProperties.containsKey(p) && StringUtils.isBlank(updateProperties.get(p)))) {\n+            throw new DocumentValidationException(\"Please fill all required fields.\");\n+        }\n+        if (updateProperties.containsKey(PROP_KEY)) {\n+            validateKeyOrAlias(updateProperties.get(PROP_KEY), reservedKeys);\n+        }\n+        List<String> aliases = null;\n+        if (updateProperties.containsKey(PROP_ALIASES)) {\n+            aliases = Arrays.stream(updateProperties.get(PROP_ALIASES).split(\"\\n\"))\n+                            .map(String::trim)\n+                            .filter(StringUtils::isNotBlank)\n+                            .collect(Collectors.toList());\n+            aliases.stream().forEach(alias -> validateKeyOrAlias(alias, reservedKeys));\n+        }\n+        // updates\n+        Stream.of(TITLE_PROPERTY_PATH, PROP_NAME, PROP_VERSION, PROP_KEY, PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .filter(updateProperties::containsKey)\n+              .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+        Stream.of(PROP_LATEST_LTS, PROP_LATEST_FT, PROP_HIDE)\n+              .forEach(p -> doc.setPropertyValue(p, updateProperties.get(p)));\n+        if (updateProperties.containsKey(PROP_RELEASED)) {\n+            doc.setPropertyValue(DistributionSnapshot.PROP_RELEASED, convertDate(updateProperties.get(PROP_RELEASED)));\n+        }\n+        if (aliases != null) {\n+            doc.setPropertyValue(PROP_ALIASES, (Serializable) aliases);\n+        }\n+        if (!StringUtils.isBlank(comment)) {\n+            doc.putContextData(\"comment\", comment);\n+        }\n+        doc.putContextData(ThumbnailConstants.DISABLE_THUMBNAIL_COMPUTATION, true);\n+        DocumentModel updatedDoc = session.saveDocument(doc);\n+        session.save();\n+        return updatedDoc;\n+    }\n+\n+    protected void validateKeyOrAlias(String keyOrAlias, List<String> reservedKeys) throws DocumentValidationException {\n+        var forbidden = new ArrayList<>(List.of(\n+                // reserved for live distrib\n+                SnapshotManager.DISTRIBUTION_ALIAS_CURRENT, SnapshotManager.DISTRIBUTION_ALIAS_ADM,\n+                // added automatically\n+                SnapshotManager.DISTRIBUTION_ALIAS_LATEST_FT, SnapshotManager.DISTRIBUTION_ALIAS_LATEST_LTS));\n+        if (reservedKeys != null) {\n+            forbidden.addAll(reservedKeys);\n+        }\n+        Optional<String> match = forbidden.stream().filter(keyOrAlias::equals).findFirst();\n+        if (match.isPresent()) {\n+            throw new DocumentValidationException(\n+                    String.format(\"Distribution key or alias is reserved: '%s'\", match.get()));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4ODk3MQ=="}, "originalCommit": {"oid": "9ccf06bac1e22a1625eaae2a1213ba8454c4c009"}, "originalPosition": 191}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4143, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}