{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MDc4MDE4", "number": 3782, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyOToxN1rODkNz1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowMToxOVrODkTIZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzAxNTkwOnYy", "diffSide": "LEFT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyOToxN1rOFwaidQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyOToxN1rOFwaidQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMDc3Mw==", "bodyText": "This needs to be done in a separate commit with a cleanup message:\ngit commit -m \"NXP-26872: Cleanup / Format\"", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386310773", "createdAt": "2020-03-02T10:29:17Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -15,9 +15,9 @@\n  *\n  * Contributors:\n  *     Nuxeo - initial API and implementation\n+ *     Jackie Aldama <jaldama@nuxeo.com>\n  *\n  */\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzAxNzI5OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyOTo0NlrOFwajSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo1NDo1NVrOFwgSkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMDk4NQ==", "bodyText": "This is cleaning as well", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386310985", "createdAt": "2020-03-02T10:29:46Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -116,29 +124,32 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                 Map<String, Integer> header = csvParser.getHeaderMap();\n                 for (CSVRecord csvRecord : csvParser) {\n                     String type = null;\n-                    String id = null;\n+                    String name = null;\n                     Map<String, String> stringValues = new HashMap<>();\n                     for (String headerValue : header.keySet()) {\n                         String lineValue = csvRecord.get(headerValue);\n                         if (\"type\".equalsIgnoreCase(headerValue)) {\n                             type = lineValue;\n-                        } else if (\"id\".equalsIgnoreCase(headerValue)) {\n-                            id = lineValue;\n+                        } else if (\"name\".equalsIgnoreCase(headerValue)) {\n+                            name = lineValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3MDU3Nw==", "bodyText": "I'm not sure this is cleaning because it actually changes functionality, no?", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386370577", "createdAt": "2020-03-02T12:44:29Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -116,29 +124,32 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                 Map<String, Integer> header = csvParser.getHeaderMap();\n                 for (CSVRecord csvRecord : csvParser) {\n                     String type = null;\n-                    String id = null;\n+                    String name = null;\n                     Map<String, String> stringValues = new HashMap<>();\n                     for (String headerValue : header.keySet()) {\n                         String lineValue = csvRecord.get(headerValue);\n                         if (\"type\".equalsIgnoreCase(headerValue)) {\n                             type = lineValue;\n-                        } else if (\"id\".equalsIgnoreCase(headerValue)) {\n-                            id = lineValue;\n+                        } else if (\"name\".equalsIgnoreCase(headerValue)) {\n+                            name = lineValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMDk4NQ=="}, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNTAxMQ==", "bodyText": "Yes checking the ticket which I didn't do, says you are right", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386405011", "createdAt": "2020-03-02T13:54:55Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -116,29 +124,32 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                 Map<String, Integer> header = csvParser.getHeaderMap();\n                 for (CSVRecord csvRecord : csvParser) {\n                     String type = null;\n-                    String id = null;\n+                    String name = null;\n                     Map<String, String> stringValues = new HashMap<>();\n                     for (String headerValue : header.keySet()) {\n                         String lineValue = csvRecord.get(headerValue);\n                         if (\"type\".equalsIgnoreCase(headerValue)) {\n                             type = lineValue;\n-                        } else if (\"id\".equalsIgnoreCase(headerValue)) {\n-                            id = lineValue;\n+                        } else if (\"name\".equalsIgnoreCase(headerValue)) {\n+                            name = lineValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMDk4NQ=="}, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzAyODc0OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDozMzoyNlrOFwaqIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzozODoxM1rOFwfw8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMjczNg==", "bodyText": "I guess you didn't find the StringUtils#isBlank method because you imported org.h2.util.StringUtils\nYou should import org.apache.commons.lang3.StringUtils this is the one we use and it can check for blank.\nisBlank takes spaces only inputs into account like : \"     \"", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386312736", "createdAt": "2020-03-02T10:33:26Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -116,29 +124,32 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                 Map<String, Integer> header = csvParser.getHeaderMap();\n                 for (CSVRecord csvRecord : csvParser) {\n                     String type = null;\n-                    String id = null;\n+                    String name = null;\n                     Map<String, String> stringValues = new HashMap<>();\n                     for (String headerValue : header.keySet()) {\n                         String lineValue = csvRecord.get(headerValue);\n                         if (\"type\".equalsIgnoreCase(headerValue)) {\n                             type = lineValue;\n-                        } else if (\"id\".equalsIgnoreCase(headerValue)) {\n-                            id = lineValue;\n+                        } else if (\"name\".equalsIgnoreCase(headerValue)) {\n+                            name = lineValue;\n                         } else {\n                             stringValues.put(headerValue, lineValue);\n                         }\n                     }\n \n+                    if (StringUtils.isNullOrEmpty(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5NjQwMQ==", "bodyText": "sorry, reupdated", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386396401", "createdAt": "2020-03-02T13:38:13Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -116,29 +124,32 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                 Map<String, Integer> header = csvParser.getHeaderMap();\n                 for (CSVRecord csvRecord : csvParser) {\n                     String type = null;\n-                    String id = null;\n+                    String name = null;\n                     Map<String, String> stringValues = new HashMap<>();\n                     for (String headerValue : header.keySet()) {\n                         String lineValue = csvRecord.get(headerValue);\n                         if (\"type\".equalsIgnoreCase(headerValue)) {\n                             type = lineValue;\n-                        } else if (\"id\".equalsIgnoreCase(headerValue)) {\n-                            id = lineValue;\n+                        } else if (\"name\".equalsIgnoreCase(headerValue)) {\n+                            name = lineValue;\n                         } else {\n                             stringValues.put(headerValue, lineValue);\n                         }\n                     }\n \n+                    if (StringUtils.isNullOrEmpty(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMjczNg=="}, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzA0MzIyOnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDozNzo0M1rOFwayxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzozODoyNlrOFwfxbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxNDk0OQ==", "bodyText": "Logging the line would be interesting to spot which entry fails:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    log.error(\"Can not create or update doc without a name, skipping line\");\n          \n          \n            \n                                    log.error(\"Can not create or update doc without a name, skipping line: {}\", lineValue);", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386314949", "createdAt": "2020-03-02T10:37:43Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -116,29 +124,32 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                 Map<String, Integer> header = csvParser.getHeaderMap();\n                 for (CSVRecord csvRecord : csvParser) {\n                     String type = null;\n-                    String id = null;\n+                    String name = null;\n                     Map<String, String> stringValues = new HashMap<>();\n                     for (String headerValue : header.keySet()) {\n                         String lineValue = csvRecord.get(headerValue);\n                         if (\"type\".equalsIgnoreCase(headerValue)) {\n                             type = lineValue;\n-                        } else if (\"id\".equalsIgnoreCase(headerValue)) {\n-                            id = lineValue;\n+                        } else if (\"name\".equalsIgnoreCase(headerValue)) {\n+                            name = lineValue;\n                         } else {\n                             stringValues.put(headerValue, lineValue);\n                         }\n                     }\n \n+                    if (StringUtils.isNullOrEmpty(name)) {\n+                        log.error(\"Can not create or update doc without a name, skipping line\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5NjUyNw==", "bodyText": "logging name", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386396527", "createdAt": "2020-03-02T13:38:26Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -116,29 +124,32 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                 Map<String, Integer> header = csvParser.getHeaderMap();\n                 for (CSVRecord csvRecord : csvParser) {\n                     String type = null;\n-                    String id = null;\n+                    String name = null;\n                     Map<String, String> stringValues = new HashMap<>();\n                     for (String headerValue : header.keySet()) {\n                         String lineValue = csvRecord.get(headerValue);\n                         if (\"type\".equalsIgnoreCase(headerValue)) {\n                             type = lineValue;\n-                        } else if (\"id\".equalsIgnoreCase(headerValue)) {\n-                            id = lineValue;\n+                        } else if (\"name\".equalsIgnoreCase(headerValue)) {\n+                            name = lineValue;\n                         } else {\n                             stringValues.put(headerValue, lineValue);\n                         }\n                     }\n \n+                    if (StringUtils.isNullOrEmpty(name)) {\n+                        log.error(\"Can not create or update doc without a name, skipping line\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxNDk0OQ=="}, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzA1MTc4OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDo0MDozNVrOFwa36A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzozODozMFrOFwfxjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxNjI2NA==", "bodyText": "Then you could improve this log too and others if there are", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386316264", "createdAt": "2020-03-02T10:40:35Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -147,11 +158,7 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                             log.error(\"Can not create doc without a type, skipping line\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5NjU1Nw==", "bodyText": "logging name", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386396557", "createdAt": "2020-03-02T13:38:30Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -147,11 +158,7 @@ public DocumentModel createOrUpdate(FileImporterContext context) throws IOExcept\n                             log.error(\"Can not create doc without a type, skipping line\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxNjI2NA=="}, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzA4MzgzOnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDo1MDowMVrOFwbLDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDo1MDowMVrOFwbLDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMyMTE2NQ==", "bodyText": "Dunno if it was my version or if copy pasting is suffering from IDE to github and back but this needs to be formatted \ud83d\ude04\nIf you format the whole file you will see several lines need to be formatted. But you need to be careful about something:\n\nthe lines you format without modifying go in the cleanup commit.\nthe lines you format because you introduced them without formatting are commited in your fix (git commit --amend to modify your commit)", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386321165", "createdAt": "2020-03-02T10:50:01Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -253,9 +273,29 @@ protected Serializable getFieldValue(Field field, String stringValue, ZipFile zi\n                 blob.setFilename(stringValue);\n                 fieldValue = (Serializable) blob;\n             }\n+            /*\n+             * TODO: Account for other complex fields\n+             */\n+        } else if (type.isListType()) {\n+            Type listFieldType = ((ListType) type).getFieldType();\n+            if (listFieldType.isSimpleType()) {\n+                fieldValue = stringValue.split(\"\\\\|\");\n+            }\n+            /*\n+             * TODO: Complex list.\n+             */\n         }\n \n         return fieldValue;\n     }\n \n+    protected DocumentModel addTags(CoreSession session, DocumentModel targetDoc, String tagString) {\n+        String[] tagList = tagString.split(\"\\\\|\");\n+        String userName = session.getPrincipal().getName();\n+        var tags = Arrays.stream(tagList)\n+                .map(s -> Map.of(\"label\", s, \"username\", userName))\n+                .collect(Collectors.toList());\n+        targetDoc.setPropertyValue(\"nxtag:tags\", (Serializable) tags);\n+        return targetDoc;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzEwMzM5OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDo1NjoxN1rOFwbXBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDo1NjoxN1rOFwbXBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMyNDIzMQ==", "bodyText": "is there a reason to make it private rather than protected ? We generally only make loggers private.", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386324231", "createdAt": "2020-03-02T10:56:17Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * (C) Copyright 2006-2009 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuxeo - initial API and implementation\n+ *     Jackie Aldama <jaldama@nuxeo.com>\n+ * $Id$\n+ */\n+package org.nuxeo.ecm.platform.filemanager;\n+\n+import java.io.File;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.zip.ZipFile;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n+import org.nuxeo.ecm.platform.filemanager.api.FileManager;\n+import org.nuxeo.ecm.platform.filemanager.service.extension.CSVZipImporter;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@RepositoryConfig(init = RepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core.tests:faceted-tag-core-types-contrib.xml\")\n+public class TestCSVZipImporter {\n+\n+    @Inject\n+    protected CoreSession coreSession;\n+\n+    protected DocumentModel workspace1;\n+\n+    protected DocumentModel workspace2;\n+\n+    protected DocumentModel wsRoot;\n+\n+    private static File getArchiveFile(String file) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzE1NjI0OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToxMzoyMFrOFwb2fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToxMzoyMFrOFwb2fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzMjI4NA==", "bodyText": "This and import java.util.List; are note used anymore since you now use streams.", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386332284", "createdAt": "2020-03-02T11:13:20Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -27,9 +27,13 @@\n import java.io.Serializable;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzE3MjUwOnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToxOToxNFrOFwcAdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToxOToxNFrOFwcAdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNDgzOQ==", "bodyText": "The method getArchiveFileIfValid returns null in several cases you need to try as well to make sure it behaves the way you want when.", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386334839", "createdAt": "2020-03-02T11:19:14Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * (C) Copyright 2006-2009 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuxeo - initial API and implementation\n+ *     Jackie Aldama <jaldama@nuxeo.com>\n+ * $Id$\n+ */\n+package org.nuxeo.ecm.platform.filemanager;\n+\n+import java.io.File;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.zip.ZipFile;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n+import org.nuxeo.ecm.platform.filemanager.api.FileManager;\n+import org.nuxeo.ecm.platform.filemanager.service.extension.CSVZipImporter;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@RepositoryConfig(init = RepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core.tests:faceted-tag-core-types-contrib.xml\")\n+public class TestCSVZipImporter {\n+\n+    @Inject\n+    protected CoreSession coreSession;\n+\n+    protected DocumentModel workspace1;\n+\n+    protected DocumentModel workspace2;\n+\n+    protected DocumentModel wsRoot;\n+\n+    private static File getArchiveFile(String file) {\n+        return new File(FileUtils.getResourcePathFromContext(file));\n+    }\n+\n+    @Before\n+    public void createTestDocuments() throws Exception {\n+        wsRoot = coreSession.getDocument(new PathRef(\"/default-domain/workspaces\"));\n+\n+        workspace1= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws1\", \"Workspace\");\n+        workspace1.setProperty(\"dublincore\", \"title\", \"test WS1\");\n+        workspace1 = coreSession.createDocument(workspace1);\n+\n+        workspace2= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws2\", \"Workspace\");\n+        workspace2.setProperty(\"dublincore\", \"title\", \"test WS2\");\n+        workspace2 = coreSession.createDocument(workspace2);\n+    }\n+\n+    @Test\n+    public void testArchiveDetection() throws Exception {\n+        ZipFile archive = CSVZipImporter.getArchiveFileIfValid(getArchiveFile(\"test-data/testCSVArchive.zip\"));\n+        assertNotNull(archive);\n+        archive.close();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzE4NzI3OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyNDozOFrOFwcJhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzozODo0NFrOFwfyDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNzE1Ng==", "bodyText": "you shoud assertEquals on this. assertSame is to check reference equality. So the arguments are boxed without a reason.", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386337156", "createdAt": "2020-03-02T11:24:38Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * (C) Copyright 2006-2009 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuxeo - initial API and implementation\n+ *     Jackie Aldama <jaldama@nuxeo.com>\n+ * $Id$\n+ */\n+package org.nuxeo.ecm.platform.filemanager;\n+\n+import java.io.File;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.zip.ZipFile;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n+import org.nuxeo.ecm.platform.filemanager.api.FileManager;\n+import org.nuxeo.ecm.platform.filemanager.service.extension.CSVZipImporter;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@RepositoryConfig(init = RepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core.tests:faceted-tag-core-types-contrib.xml\")\n+public class TestCSVZipImporter {\n+\n+    @Inject\n+    protected CoreSession coreSession;\n+\n+    protected DocumentModel workspace1;\n+\n+    protected DocumentModel workspace2;\n+\n+    protected DocumentModel wsRoot;\n+\n+    private static File getArchiveFile(String file) {\n+        return new File(FileUtils.getResourcePathFromContext(file));\n+    }\n+\n+    @Before\n+    public void createTestDocuments() throws Exception {\n+        wsRoot = coreSession.getDocument(new PathRef(\"/default-domain/workspaces\"));\n+\n+        workspace1= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws1\", \"Workspace\");\n+        workspace1.setProperty(\"dublincore\", \"title\", \"test WS1\");\n+        workspace1 = coreSession.createDocument(workspace1);\n+\n+        workspace2= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws2\", \"Workspace\");\n+        workspace2.setProperty(\"dublincore\", \"title\", \"test WS2\");\n+        workspace2 = coreSession.createDocument(workspace2);\n+    }\n+\n+    @Test\n+    public void testArchiveDetection() throws Exception {\n+        ZipFile archive = CSVZipImporter.getArchiveFileIfValid(getArchiveFile(\"test-data/testCSVArchive.zip\"));\n+        assertNotNull(archive);\n+        archive.close();\n+    }\n+\n+    @Test\n+    public void testImportViaFileManager() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testCSVArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace1.getPathAsString())\n+                                                         .overwrite(true)\n+                                                         .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace1.getRef());\n+        assertSame(2, children.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5NjY4Ng==", "bodyText": "updated to assertEquals", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386396686", "createdAt": "2020-03-02T13:38:44Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * (C) Copyright 2006-2009 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuxeo - initial API and implementation\n+ *     Jackie Aldama <jaldama@nuxeo.com>\n+ * $Id$\n+ */\n+package org.nuxeo.ecm.platform.filemanager;\n+\n+import java.io.File;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.zip.ZipFile;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n+import org.nuxeo.ecm.platform.filemanager.api.FileManager;\n+import org.nuxeo.ecm.platform.filemanager.service.extension.CSVZipImporter;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@RepositoryConfig(init = RepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core.tests:faceted-tag-core-types-contrib.xml\")\n+public class TestCSVZipImporter {\n+\n+    @Inject\n+    protected CoreSession coreSession;\n+\n+    protected DocumentModel workspace1;\n+\n+    protected DocumentModel workspace2;\n+\n+    protected DocumentModel wsRoot;\n+\n+    private static File getArchiveFile(String file) {\n+        return new File(FileUtils.getResourcePathFromContext(file));\n+    }\n+\n+    @Before\n+    public void createTestDocuments() throws Exception {\n+        wsRoot = coreSession.getDocument(new PathRef(\"/default-domain/workspaces\"));\n+\n+        workspace1= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws1\", \"Workspace\");\n+        workspace1.setProperty(\"dublincore\", \"title\", \"test WS1\");\n+        workspace1 = coreSession.createDocument(workspace1);\n+\n+        workspace2= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws2\", \"Workspace\");\n+        workspace2.setProperty(\"dublincore\", \"title\", \"test WS2\");\n+        workspace2 = coreSession.createDocument(workspace2);\n+    }\n+\n+    @Test\n+    public void testArchiveDetection() throws Exception {\n+        ZipFile archive = CSVZipImporter.getArchiveFileIfValid(getArchiveFile(\"test-data/testCSVArchive.zip\"));\n+        assertNotNull(archive);\n+        archive.close();\n+    }\n+\n+    @Test\n+    public void testImportViaFileManager() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testCSVArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace1.getPathAsString())\n+                                                         .overwrite(true)\n+                                                         .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace1.getRef());\n+        assertSame(2, children.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNzE1Ng=="}, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzE5NDIwOnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyNzowM1rOFwcNvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyNzowM1rOFwcNvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzODIzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(\"this is text\", MyNote.getProperty(\"note\", \"note\"));\n          \n          \n            \n                    assertNotNull(MyFile.getProperty(\"file\", \"content\"));\n          \n          \n            \n                    assertEquals(\"this is text\", MyNote.getPropertyValue(\"note:note\"));\n          \n          \n            \n                    assertNotNull(MyFile.getPropertyValue(\"file:content\"));", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386338238", "createdAt": "2020-03-02T11:27:03Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * (C) Copyright 2006-2009 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuxeo - initial API and implementation\n+ *     Jackie Aldama <jaldama@nuxeo.com>\n+ * $Id$\n+ */\n+package org.nuxeo.ecm.platform.filemanager;\n+\n+import java.io.File;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.zip.ZipFile;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n+import org.nuxeo.ecm.platform.filemanager.api.FileManager;\n+import org.nuxeo.ecm.platform.filemanager.service.extension.CSVZipImporter;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@RepositoryConfig(init = RepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core.tests:faceted-tag-core-types-contrib.xml\")\n+public class TestCSVZipImporter {\n+\n+    @Inject\n+    protected CoreSession coreSession;\n+\n+    protected DocumentModel workspace1;\n+\n+    protected DocumentModel workspace2;\n+\n+    protected DocumentModel wsRoot;\n+\n+    private static File getArchiveFile(String file) {\n+        return new File(FileUtils.getResourcePathFromContext(file));\n+    }\n+\n+    @Before\n+    public void createTestDocuments() throws Exception {\n+        wsRoot = coreSession.getDocument(new PathRef(\"/default-domain/workspaces\"));\n+\n+        workspace1= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws1\", \"Workspace\");\n+        workspace1.setProperty(\"dublincore\", \"title\", \"test WS1\");\n+        workspace1 = coreSession.createDocument(workspace1);\n+\n+        workspace2= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws2\", \"Workspace\");\n+        workspace2.setProperty(\"dublincore\", \"title\", \"test WS2\");\n+        workspace2 = coreSession.createDocument(workspace2);\n+    }\n+\n+    @Test\n+    public void testArchiveDetection() throws Exception {\n+        ZipFile archive = CSVZipImporter.getArchiveFileIfValid(getArchiveFile(\"test-data/testCSVArchive.zip\"));\n+        assertNotNull(archive);\n+        archive.close();\n+    }\n+\n+    @Test\n+    public void testImportViaFileManager() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testCSVArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace1.getPathAsString())\n+                                                         .overwrite(true)\n+                                                         .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace1.getRef());\n+        assertSame(2, children.size());\n+\n+        DocumentModel MyFile = coreSession.getChild(workspace1.getRef(), \"MyFile\");\n+        DocumentModel MyNote = coreSession.getChild(workspace1.getRef(), \"MyNote\");\n+\n+        assertEquals(\"My File\", MyFile.getTitle());\n+        assertEquals(\"My Note\", MyNote.getTitle());\n+\n+        assertEquals(\"MyFile\", MyFile.getName());\n+        assertEquals(\"MyNote\", MyNote.getName());\n+\n+        assertEquals(\"this is text\", MyNote.getProperty(\"note\", \"note\"));\n+        assertNotNull(MyFile.getProperty(\"file\", \"content\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzIwMTk4OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyOTo0OVrOFwcSjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyOTo0OVrOFwcSjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzOTQ3MA==", "bodyText": "Since the file is new, you can format the whole content.", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386339470", "createdAt": "2020-03-02T11:29:49Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * (C) Copyright 2006-2009 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuxeo - initial API and implementation\n+ *     Jackie Aldama <jaldama@nuxeo.com>\n+ * $Id$\n+ */\n+package org.nuxeo.ecm.platform.filemanager;\n+\n+import java.io.File;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.zip.ZipFile;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n+import org.nuxeo.ecm.platform.filemanager.api.FileManager;\n+import org.nuxeo.ecm.platform.filemanager.service.extension.CSVZipImporter;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@RepositoryConfig(init = RepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core.tests:faceted-tag-core-types-contrib.xml\")\n+public class TestCSVZipImporter {\n+\n+    @Inject\n+    protected CoreSession coreSession;\n+\n+    protected DocumentModel workspace1;\n+\n+    protected DocumentModel workspace2;\n+\n+    protected DocumentModel wsRoot;\n+\n+    private static File getArchiveFile(String file) {\n+        return new File(FileUtils.getResourcePathFromContext(file));\n+    }\n+\n+    @Before\n+    public void createTestDocuments() throws Exception {\n+        wsRoot = coreSession.getDocument(new PathRef(\"/default-domain/workspaces\"));\n+\n+        workspace1= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws1\", \"Workspace\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzIwNTI1OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMTozMDo1OVrOFwcUgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzozOTowMVrOFwfyqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzOTk2OQ==", "bodyText": "assertEquals everytime you compare two numbers that fit in a long", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386339969", "createdAt": "2020-03-02T11:30:59Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * (C) Copyright 2006-2009 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuxeo - initial API and implementation\n+ *     Jackie Aldama <jaldama@nuxeo.com>\n+ * $Id$\n+ */\n+package org.nuxeo.ecm.platform.filemanager;\n+\n+import java.io.File;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.zip.ZipFile;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n+import org.nuxeo.ecm.platform.filemanager.api.FileManager;\n+import org.nuxeo.ecm.platform.filemanager.service.extension.CSVZipImporter;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@RepositoryConfig(init = RepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core.tests:faceted-tag-core-types-contrib.xml\")\n+public class TestCSVZipImporter {\n+\n+    @Inject\n+    protected CoreSession coreSession;\n+\n+    protected DocumentModel workspace1;\n+\n+    protected DocumentModel workspace2;\n+\n+    protected DocumentModel wsRoot;\n+\n+    private static File getArchiveFile(String file) {\n+        return new File(FileUtils.getResourcePathFromContext(file));\n+    }\n+\n+    @Before\n+    public void createTestDocuments() throws Exception {\n+        wsRoot = coreSession.getDocument(new PathRef(\"/default-domain/workspaces\"));\n+\n+        workspace1= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws1\", \"Workspace\");\n+        workspace1.setProperty(\"dublincore\", \"title\", \"test WS1\");\n+        workspace1 = coreSession.createDocument(workspace1);\n+\n+        workspace2= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws2\", \"Workspace\");\n+        workspace2.setProperty(\"dublincore\", \"title\", \"test WS2\");\n+        workspace2 = coreSession.createDocument(workspace2);\n+    }\n+\n+    @Test\n+    public void testArchiveDetection() throws Exception {\n+        ZipFile archive = CSVZipImporter.getArchiveFileIfValid(getArchiveFile(\"test-data/testCSVArchive.zip\"));\n+        assertNotNull(archive);\n+        archive.close();\n+    }\n+\n+    @Test\n+    public void testImportViaFileManager() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testCSVArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace1.getPathAsString())\n+                                                         .overwrite(true)\n+                                                         .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace1.getRef());\n+        assertSame(2, children.size());\n+\n+        DocumentModel MyFile = coreSession.getChild(workspace1.getRef(), \"MyFile\");\n+        DocumentModel MyNote = coreSession.getChild(workspace1.getRef(), \"MyNote\");\n+\n+        assertEquals(\"My File\", MyFile.getTitle());\n+        assertEquals(\"My Note\", MyNote.getTitle());\n+\n+        assertEquals(\"MyFile\", MyFile.getName());\n+        assertEquals(\"MyNote\", MyNote.getName());\n+\n+        assertEquals(\"this is text\", MyNote.getProperty(\"note\", \"note\"));\n+        assertNotNull(MyFile.getProperty(\"file\", \"content\"));\n+    }\n+\n+    @Test\n+    public void testDocumentCreationFailureWithNoName() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testNoNameCSVArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace2.getPathAsString())\n+                                                         .overwrite(true)\n+                                                         .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace2.getRef());\n+        assertSame(0, children.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5Njg0MA==", "bodyText": "updated to assertEquals", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386396840", "createdAt": "2020-03-02T13:39:01Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * (C) Copyright 2006-2009 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuxeo - initial API and implementation\n+ *     Jackie Aldama <jaldama@nuxeo.com>\n+ * $Id$\n+ */\n+package org.nuxeo.ecm.platform.filemanager;\n+\n+import java.io.File;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.zip.ZipFile;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n+import org.nuxeo.ecm.platform.filemanager.api.FileManager;\n+import org.nuxeo.ecm.platform.filemanager.service.extension.CSVZipImporter;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@RepositoryConfig(init = RepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core.tests:faceted-tag-core-types-contrib.xml\")\n+public class TestCSVZipImporter {\n+\n+    @Inject\n+    protected CoreSession coreSession;\n+\n+    protected DocumentModel workspace1;\n+\n+    protected DocumentModel workspace2;\n+\n+    protected DocumentModel wsRoot;\n+\n+    private static File getArchiveFile(String file) {\n+        return new File(FileUtils.getResourcePathFromContext(file));\n+    }\n+\n+    @Before\n+    public void createTestDocuments() throws Exception {\n+        wsRoot = coreSession.getDocument(new PathRef(\"/default-domain/workspaces\"));\n+\n+        workspace1= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws1\", \"Workspace\");\n+        workspace1.setProperty(\"dublincore\", \"title\", \"test WS1\");\n+        workspace1 = coreSession.createDocument(workspace1);\n+\n+        workspace2= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws2\", \"Workspace\");\n+        workspace2.setProperty(\"dublincore\", \"title\", \"test WS2\");\n+        workspace2 = coreSession.createDocument(workspace2);\n+    }\n+\n+    @Test\n+    public void testArchiveDetection() throws Exception {\n+        ZipFile archive = CSVZipImporter.getArchiveFileIfValid(getArchiveFile(\"test-data/testCSVArchive.zip\"));\n+        assertNotNull(archive);\n+        archive.close();\n+    }\n+\n+    @Test\n+    public void testImportViaFileManager() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testCSVArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace1.getPathAsString())\n+                                                         .overwrite(true)\n+                                                         .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace1.getRef());\n+        assertSame(2, children.size());\n+\n+        DocumentModel MyFile = coreSession.getChild(workspace1.getRef(), \"MyFile\");\n+        DocumentModel MyNote = coreSession.getChild(workspace1.getRef(), \"MyNote\");\n+\n+        assertEquals(\"My File\", MyFile.getTitle());\n+        assertEquals(\"My Note\", MyNote.getTitle());\n+\n+        assertEquals(\"MyFile\", MyFile.getName());\n+        assertEquals(\"MyNote\", MyNote.getName());\n+\n+        assertEquals(\"this is text\", MyNote.getProperty(\"note\", \"note\"));\n+        assertNotNull(MyFile.getProperty(\"file\", \"content\"));\n+    }\n+\n+    @Test\n+    public void testDocumentCreationFailureWithNoName() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testNoNameCSVArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace2.getPathAsString())\n+                                                         .overwrite(true)\n+                                                         .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace2.getRef());\n+        assertSame(0, children.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzOTk2OQ=="}, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzIwNjk0OnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMTozMTozMlrOFwcVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzozOTowOFrOFwfy5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0MDIyNA==", "bodyText": "missing new line at the end of file", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386340224", "createdAt": "2020-03-02T11:31:32Z", "author": {"login": "NourNuxeo"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * (C) Copyright 2006-2009 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuxeo - initial API and implementation\n+ *     Jackie Aldama <jaldama@nuxeo.com>\n+ * $Id$\n+ */\n+package org.nuxeo.ecm.platform.filemanager;\n+\n+import java.io.File;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.zip.ZipFile;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n+import org.nuxeo.ecm.platform.filemanager.api.FileManager;\n+import org.nuxeo.ecm.platform.filemanager.service.extension.CSVZipImporter;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@RepositoryConfig(init = RepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core.tests:faceted-tag-core-types-contrib.xml\")\n+public class TestCSVZipImporter {\n+\n+    @Inject\n+    protected CoreSession coreSession;\n+\n+    protected DocumentModel workspace1;\n+\n+    protected DocumentModel workspace2;\n+\n+    protected DocumentModel wsRoot;\n+\n+    private static File getArchiveFile(String file) {\n+        return new File(FileUtils.getResourcePathFromContext(file));\n+    }\n+\n+    @Before\n+    public void createTestDocuments() throws Exception {\n+        wsRoot = coreSession.getDocument(new PathRef(\"/default-domain/workspaces\"));\n+\n+        workspace1= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws1\", \"Workspace\");\n+        workspace1.setProperty(\"dublincore\", \"title\", \"test WS1\");\n+        workspace1 = coreSession.createDocument(workspace1);\n+\n+        workspace2= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws2\", \"Workspace\");\n+        workspace2.setProperty(\"dublincore\", \"title\", \"test WS2\");\n+        workspace2 = coreSession.createDocument(workspace2);\n+    }\n+\n+    @Test\n+    public void testArchiveDetection() throws Exception {\n+        ZipFile archive = CSVZipImporter.getArchiveFileIfValid(getArchiveFile(\"test-data/testCSVArchive.zip\"));\n+        assertNotNull(archive);\n+        archive.close();\n+    }\n+\n+    @Test\n+    public void testImportViaFileManager() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testCSVArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace1.getPathAsString())\n+                                                         .overwrite(true)\n+                                                         .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace1.getRef());\n+        assertSame(2, children.size());\n+\n+        DocumentModel MyFile = coreSession.getChild(workspace1.getRef(), \"MyFile\");\n+        DocumentModel MyNote = coreSession.getChild(workspace1.getRef(), \"MyNote\");\n+\n+        assertEquals(\"My File\", MyFile.getTitle());\n+        assertEquals(\"My Note\", MyNote.getTitle());\n+\n+        assertEquals(\"MyFile\", MyFile.getName());\n+        assertEquals(\"MyNote\", MyNote.getName());\n+\n+        assertEquals(\"this is text\", MyNote.getProperty(\"note\", \"note\"));\n+        assertNotNull(MyFile.getProperty(\"file\", \"content\"));\n+    }\n+\n+    @Test\n+    public void testDocumentCreationFailureWithNoName() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testNoNameCSVArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace2.getPathAsString())\n+                                                         .overwrite(true)\n+                                                         .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace2.getRef());\n+        assertSame(0, children.size());\n+    }\n+\n+    @Test\n+    public void testDocumentCreationWithListType() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testCSVListTypeArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace2.getPathAsString())\n+                .overwrite(true)\n+                .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace2.getRef());\n+        assertSame(1, children.size());\n+\n+        DocumentModel doc = children.get(0);\n+        List<String> contributors = Arrays.asList((String[]) doc.getPropertyValue(\"dc:contributors\"));\n+        assertEquals(4, contributors.size());\n+    }\n+\n+    @Test\n+    public void testDocumentCreationWithLifecycleState() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testCSVArchiveLifecycleState.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace2.getPathAsString())\n+                .overwrite(true)\n+                .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace2.getRef());\n+        assertSame(2, children.size());\n+\n+        for (DocumentModel doc : children) {\n+            if (doc.getTitle().equals(\"MyFile\")) {\n+                assertEquals(\"project\", doc.getCurrentLifeCycleState());\n+            } else if (doc.getTitle().equals(\"My File1\")) {\n+                assertEquals(\"approved\", doc.getCurrentLifeCycleState());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testDocumentCreationWithTags() throws Exception {\n+        File archiveNoTags = getArchiveFile(\"test-data/testCSVArchiveTags.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archiveNoTags);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace2.getPathAsString())\n+                .overwrite(true)\n+                .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace2.getRef());\n+        assertSame(2, children.size());\n+\n+        for (DocumentModel doc : children) {\n+            if (doc.getTitle().equals(\"My File\")) {\n+                List<HashMap> tags = (List<HashMap>) doc.getPropertyValue(\"nxtag:tags\");\n+                assertEquals(1, tags.size());\n+                assertEquals(\"mynewtag\", tags.get(0).get(\"label\"));\n+            } else if (doc.getTitle().equals(\"My File1\")) {\n+                assertEquals(2, ((List<String>) doc.getPropertyValue(\"nxtag:tags\")).size());\n+            }\n+         }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5NjkwMA==", "bodyText": "added line", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386396900", "createdAt": "2020-03-02T13:39:08Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/test/java/org/nuxeo/ecm/platform/filemanager/TestCSVZipImporter.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * (C) Copyright 2006-2009 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Nuxeo - initial API and implementation\n+ *     Jackie Aldama <jaldama@nuxeo.com>\n+ * $Id$\n+ */\n+package org.nuxeo.ecm.platform.filemanager;\n+\n+import java.io.File;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.zip.ZipFile;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.common.utils.FileUtils;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.Blobs;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.DocumentModelList;\n+import org.nuxeo.ecm.core.api.PathRef;\n+import org.nuxeo.ecm.core.test.CoreFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n+import org.nuxeo.ecm.platform.filemanager.api.FileManager;\n+import org.nuxeo.ecm.platform.filemanager.service.extension.CSVZipImporter;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features(CoreFeature.class)\n+@RepositoryConfig(init = RepositoryInit.class, cleanup = Granularity.METHOD)\n+@Deploy(\"org.nuxeo.ecm.platform.types.api\")\n+@Deploy(\"org.nuxeo.ecm.platform.types.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core\")\n+@Deploy(\"org.nuxeo.ecm.platform.filemanager.core.tests:faceted-tag-core-types-contrib.xml\")\n+public class TestCSVZipImporter {\n+\n+    @Inject\n+    protected CoreSession coreSession;\n+\n+    protected DocumentModel workspace1;\n+\n+    protected DocumentModel workspace2;\n+\n+    protected DocumentModel wsRoot;\n+\n+    private static File getArchiveFile(String file) {\n+        return new File(FileUtils.getResourcePathFromContext(file));\n+    }\n+\n+    @Before\n+    public void createTestDocuments() throws Exception {\n+        wsRoot = coreSession.getDocument(new PathRef(\"/default-domain/workspaces\"));\n+\n+        workspace1= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws1\", \"Workspace\");\n+        workspace1.setProperty(\"dublincore\", \"title\", \"test WS1\");\n+        workspace1 = coreSession.createDocument(workspace1);\n+\n+        workspace2= coreSession.createDocumentModel(wsRoot.getPathAsString(), \"ws2\", \"Workspace\");\n+        workspace2.setProperty(\"dublincore\", \"title\", \"test WS2\");\n+        workspace2 = coreSession.createDocument(workspace2);\n+    }\n+\n+    @Test\n+    public void testArchiveDetection() throws Exception {\n+        ZipFile archive = CSVZipImporter.getArchiveFileIfValid(getArchiveFile(\"test-data/testCSVArchive.zip\"));\n+        assertNotNull(archive);\n+        archive.close();\n+    }\n+\n+    @Test\n+    public void testImportViaFileManager() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testCSVArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace1.getPathAsString())\n+                                                         .overwrite(true)\n+                                                         .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace1.getRef());\n+        assertSame(2, children.size());\n+\n+        DocumentModel MyFile = coreSession.getChild(workspace1.getRef(), \"MyFile\");\n+        DocumentModel MyNote = coreSession.getChild(workspace1.getRef(), \"MyNote\");\n+\n+        assertEquals(\"My File\", MyFile.getTitle());\n+        assertEquals(\"My Note\", MyNote.getTitle());\n+\n+        assertEquals(\"MyFile\", MyFile.getName());\n+        assertEquals(\"MyNote\", MyNote.getName());\n+\n+        assertEquals(\"this is text\", MyNote.getProperty(\"note\", \"note\"));\n+        assertNotNull(MyFile.getProperty(\"file\", \"content\"));\n+    }\n+\n+    @Test\n+    public void testDocumentCreationFailureWithNoName() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testNoNameCSVArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace2.getPathAsString())\n+                                                         .overwrite(true)\n+                                                         .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace2.getRef());\n+        assertSame(0, children.size());\n+    }\n+\n+    @Test\n+    public void testDocumentCreationWithListType() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testCSVListTypeArchive.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace2.getPathAsString())\n+                .overwrite(true)\n+                .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace2.getRef());\n+        assertSame(1, children.size());\n+\n+        DocumentModel doc = children.get(0);\n+        List<String> contributors = Arrays.asList((String[]) doc.getPropertyValue(\"dc:contributors\"));\n+        assertEquals(4, contributors.size());\n+    }\n+\n+    @Test\n+    public void testDocumentCreationWithLifecycleState() throws Exception {\n+        File archive = getArchiveFile(\"test-data/testCSVArchiveLifecycleState.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archive);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace2.getPathAsString())\n+                .overwrite(true)\n+                .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace2.getRef());\n+        assertSame(2, children.size());\n+\n+        for (DocumentModel doc : children) {\n+            if (doc.getTitle().equals(\"MyFile\")) {\n+                assertEquals(\"project\", doc.getCurrentLifeCycleState());\n+            } else if (doc.getTitle().equals(\"My File1\")) {\n+                assertEquals(\"approved\", doc.getCurrentLifeCycleState());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testDocumentCreationWithTags() throws Exception {\n+        File archiveNoTags = getArchiveFile(\"test-data/testCSVArchiveTags.zip\");\n+        FileManager fm = Framework.getService(FileManager.class);\n+        Blob blob = Blobs.createBlob(archiveNoTags);\n+        FileImporterContext context = FileImporterContext.builder(coreSession, blob, workspace2.getPathAsString())\n+                .overwrite(true)\n+                .build();\n+        fm.createOrUpdateDocument(context);\n+        DocumentModelList children = coreSession.getChildren(workspace2.getRef());\n+        assertSame(2, children.size());\n+\n+        for (DocumentModel doc : children) {\n+            if (doc.getTitle().equals(\"My File\")) {\n+                List<HashMap> tags = (List<HashMap>) doc.getPropertyValue(\"nxtag:tags\");\n+                assertEquals(1, tags.size());\n+                assertEquals(\"mynewtag\", tags.get(0).get(\"label\"));\n+            } else if (doc.getTitle().equals(\"My File1\")) {\n+                assertEquals(2, ((List<String>) doc.getPropertyValue(\"nxtag:tags\")).size());\n+            }\n+         }\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0MDIyNA=="}, "originalCommit": {"oid": "ee656547ef5ff07cf80d6823ae19536bd48f93ab"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mzg4NzcyOnYy", "diffSide": "RIGHT", "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowMToxOVrOFwirrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTozMzozOVrOFwj8zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0NDIwNQ==", "bodyText": "It's a detail but our standard formatter puts static imports before regular ones.", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386444205", "createdAt": "2020-03-02T15:01:19Z", "author": {"login": "efge"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -59,13 +63,16 @@\n import org.nuxeo.ecm.core.schema.types.primitives.StringType;\n import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n \n+import static org.nuxeo.ecm.core.api.LifeCycleConstants.INITIAL_LIFECYCLE_STATE_OPTION_NAME;\n+import static org.nuxeo.ecm.core.query.sql.NXQL.ECM_LIFECYCLESTATE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd322bdbdab461c011a066372fea06eba23f6468"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NDk3NQ==", "bodyText": "updated", "url": "https://github.com/nuxeo/nuxeo/pull/3782#discussion_r386464975", "createdAt": "2020-03-02T15:33:39Z", "author": {"login": "eikkaj"}, "path": "nuxeo-services/nuxeo-platform-filemanager-core/src/main/java/org/nuxeo/ecm/platform/filemanager/service/extension/CSVZipImporter.java", "diffHunk": "@@ -59,13 +63,16 @@\n import org.nuxeo.ecm.core.schema.types.primitives.StringType;\n import org.nuxeo.ecm.platform.filemanager.api.FileImporterContext;\n \n+import static org.nuxeo.ecm.core.api.LifeCycleConstants.INITIAL_LIFECYCLE_STATE_OPTION_NAME;\n+import static org.nuxeo.ecm.core.query.sql.NXQL.ECM_LIFECYCLESTATE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0NDIwNQ=="}, "originalCommit": {"oid": "bd322bdbdab461c011a066372fea06eba23f6468"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4276, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}