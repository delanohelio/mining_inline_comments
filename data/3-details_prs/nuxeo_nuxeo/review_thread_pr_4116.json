{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTQ4NTc3", "number": 4116, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNjo0NVrOECqCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTozNToyMlrOEEWeKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjIxMzg1OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ConfigurationGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNjo0NVrOGfP6ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNjo0NVrOGfP6ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxOTc4Ng==", "bodyText": "I'd use \"\" instead of EMPTY, it's shorter and doesn't require a dependency \ud83d\ude04", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r435419786", "createdAt": "2020-06-04T17:16:45Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ConfigurationGenerator.java", "diffHunk": "@@ -112,7 +113,13 @@\n     /** @since 11.1 */\n     public static final String NUXEO_ENVIRONMENT = System.getenv(\"NUXEO_ENVIRONMENT\");\n \n-    /** @since 6.0 */\n+    /** @since 11.1 */\n+    public static final String NUXEO_PROFILES = System.getenv().getOrDefault(\"NUXEO_PROFILES\", EMPTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af61543a70856e24fb9765e10459298d88d418e1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDE1MTY0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/info/ConfigurationInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjowODoyOVrOGgauMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjowODoyOVrOGgauMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY0NTQyNg==", "bodyText": "Unused import?", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r436645426", "createdAt": "2020-06-08T12:08:29Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/info/ConfigurationInfo.java", "diffHunk": "@@ -19,6 +19,8 @@\n \n package org.nuxeo.launcher.info;\n \n+import org.apache.commons.collections.CollectionUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38cfdbf865e0a2e6d341d1ad56d17d052c1c4760"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDU0MDA2OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ConfigurationGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozNzowNFrOGgec6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyMzo0OVrOGhGyrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNjUzNg==", "bodyText": "wouldn't you want to use the other signature of getEnvironment() with a default ?\nThe signature with a default is used in the public setProperties() method (line 1677) so it may be more consistent ?\nThe documentation says this signature (without a default) is only for tests. But it seems to be used in several internal methods. Maybe it's outdated ?\n\n\n@APinote exists to be overridden by tests", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r436706536", "createdAt": "2020-06-08T13:37:04Z", "author": {"login": "NourNuxeo"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ConfigurationGenerator.java", "diffHunk": "@@ -2032,10 +2049,28 @@ protected String getJavaOptsString() {\n     }\n \n     /**\n-     * @return the value of an environment variable. Overriden for testing.\n+     * @return the value of an environment variable\n      * @since 9.1\n+     * @apiNote exists to be overridden by tests\n      */\n-    protected String getEnvironmentVariableValue(String key) {\n+    protected String getEnvironment(String key) {\n         return System.getenv(key);\n     }\n+\n+    /**\n+     * @return the value of an environment variable\n+     * @since 11.1\n+     * @see #getEnvironment(String)\n+     */\n+    protected String getEnvironment(String key, String defaultValue) {\n+        return Objects.requireNonNullElse(getEnvironment(key), defaultValue);\n+    }\n+\n+    /**\n+     * @return the nuxeo.defaults file for current {@code NUXEO_ENVIRONMENT}\n+     * @since 11.1\n+     */\n+    protected String getNuxeoEnvironmentConfName() {\n+        return String.format(NUXEO_ENVIRONMENT_CONF_FORMAT, getEnvironment(NUXEO_ENVIRONMENT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0NTc2Nw==", "bodyText": "There're several things in your comment.\n\nwouldn't you want to use the other signature of getEnvironment() with a default ?\n\nWhich default do you want to use?\n\nThe signature with a default is used in the public setProperties() method (line 1677) so it may be more consistent?\n\nBecause I use the String#isBlank method and so I can't have null.\n\nThe documentation says this signature (without a default) is only for tests. But it seems to be used in several internal methods. Maybe it's outdated?\n@APinote exists to be overridden by tests\n\nThe sentence doesn't say it's used by tests, it says that the method exists in order to let let test override it to provide a mock (see the tests).", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r437245767", "createdAt": "2020-06-09T08:55:34Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ConfigurationGenerator.java", "diffHunk": "@@ -2032,10 +2049,28 @@ protected String getJavaOptsString() {\n     }\n \n     /**\n-     * @return the value of an environment variable. Overriden for testing.\n+     * @return the value of an environment variable\n      * @since 9.1\n+     * @apiNote exists to be overridden by tests\n      */\n-    protected String getEnvironmentVariableValue(String key) {\n+    protected String getEnvironment(String key) {\n         return System.getenv(key);\n     }\n+\n+    /**\n+     * @return the value of an environment variable\n+     * @since 11.1\n+     * @see #getEnvironment(String)\n+     */\n+    protected String getEnvironment(String key, String defaultValue) {\n+        return Objects.requireNonNullElse(getEnvironment(key), defaultValue);\n+    }\n+\n+    /**\n+     * @return the nuxeo.defaults file for current {@code NUXEO_ENVIRONMENT}\n+     * @since 11.1\n+     */\n+    protected String getNuxeoEnvironmentConfName() {\n+        return String.format(NUXEO_ENVIRONMENT_CONF_FORMAT, getEnvironment(NUXEO_ENVIRONMENT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNjUzNg=="}, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzMTg1OQ==", "bodyText": "1- I assumed this is to avoid null so I would have given \"\" like line 1677 (like you explain in your second point)\n2- yes\n3 - Ok thanks for the explenation !", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r437331859", "createdAt": "2020-06-09T11:18:32Z", "author": {"login": "NourNuxeo"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ConfigurationGenerator.java", "diffHunk": "@@ -2032,10 +2049,28 @@ protected String getJavaOptsString() {\n     }\n \n     /**\n-     * @return the value of an environment variable. Overriden for testing.\n+     * @return the value of an environment variable\n      * @since 9.1\n+     * @apiNote exists to be overridden by tests\n      */\n-    protected String getEnvironmentVariableValue(String key) {\n+    protected String getEnvironment(String key) {\n         return System.getenv(key);\n     }\n+\n+    /**\n+     * @return the value of an environment variable\n+     * @since 11.1\n+     * @see #getEnvironment(String)\n+     */\n+    protected String getEnvironment(String key, String defaultValue) {\n+        return Objects.requireNonNullElse(getEnvironment(key), defaultValue);\n+    }\n+\n+    /**\n+     * @return the nuxeo.defaults file for current {@code NUXEO_ENVIRONMENT}\n+     * @since 11.1\n+     */\n+    protected String getNuxeoEnvironmentConfName() {\n+        return String.format(NUXEO_ENVIRONMENT_CONF_FORMAT, getEnvironment(NUXEO_ENVIRONMENT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNjUzNg=="}, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2NzQ3MQ==", "bodyText": "Probably, but this is not needed here. Furthermore, if the code evolves, I prefer to have nuxeo.null which clearly shows there's something wrong than nuxeo..", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r437367471", "createdAt": "2020-06-09T12:23:49Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ConfigurationGenerator.java", "diffHunk": "@@ -2032,10 +2049,28 @@ protected String getJavaOptsString() {\n     }\n \n     /**\n-     * @return the value of an environment variable. Overriden for testing.\n+     * @return the value of an environment variable\n      * @since 9.1\n+     * @apiNote exists to be overridden by tests\n      */\n-    protected String getEnvironmentVariableValue(String key) {\n+    protected String getEnvironment(String key) {\n         return System.getenv(key);\n     }\n+\n+    /**\n+     * @return the value of an environment variable\n+     * @since 11.1\n+     * @see #getEnvironment(String)\n+     */\n+    protected String getEnvironment(String key, String defaultValue) {\n+        return Objects.requireNonNullElse(getEnvironment(key), defaultValue);\n+    }\n+\n+    /**\n+     * @return the nuxeo.defaults file for current {@code NUXEO_ENVIRONMENT}\n+     * @since 11.1\n+     */\n+    protected String getNuxeoEnvironmentConfName() {\n+        return String.format(NUXEO_ENVIRONMENT_CONF_FORMAT, getEnvironment(NUXEO_ENVIRONMENT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNjUzNg=="}, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc4NzY0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ServerConfigurator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxODoxNlrOGggzew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyMTozNVrOGhGqsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTA4Mw==", "bodyText": "this is only used once line 148, is this for clarity ?", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r436745083", "createdAt": "2020-06-08T14:18:16Z", "author": {"login": "NourNuxeo"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ServerConfigurator.java", "diffHunk": "@@ -141,8 +143,9 @@ public String getContextName() {\n      */\n     protected void parseAndCopy(Properties config) throws IOException, TemplateException, ConfigurationException {\n         // FilenameFilter for excluding \"nuxeo.defaults\" files from copy\n+        String nuxeoEnvironmentConf = generator.getNuxeoEnvironmentConfName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0Njc0OQ==", "bodyText": "What do you mean?", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r437246749", "createdAt": "2020-06-09T08:56:53Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ServerConfigurator.java", "diffHunk": "@@ -141,8 +143,9 @@ public String getContextName() {\n      */\n     protected void parseAndCopy(Properties config) throws IOException, TemplateException, ConfigurationException {\n         // FilenameFilter for excluding \"nuxeo.defaults\" files from copy\n+        String nuxeoEnvironmentConf = generator.getNuxeoEnvironmentConfName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTA4Mw=="}, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMyNTQyMA==", "bodyText": "The variable is defined here and seems to be used only once right after on line 148 so I would have just made a call to generator.getNuxeoEnvironmentConfName(); there instead of defining a variable. Unless you did this to make the call shorter and clearer on line 148 ?", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r437325420", "createdAt": "2020-06-09T11:05:27Z", "author": {"login": "NourNuxeo"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ServerConfigurator.java", "diffHunk": "@@ -141,8 +143,9 @@ public String getContextName() {\n      */\n     protected void parseAndCopy(Properties config) throws IOException, TemplateException, ConfigurationException {\n         // FilenameFilter for excluding \"nuxeo.defaults\" files from copy\n+        String nuxeoEnvironmentConf = generator.getNuxeoEnvironmentConfName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTA4Mw=="}, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2NTQyNA==", "bodyText": "If I correctly remember, the line you're talking about is a function and it is called several times. That's the reason we get the variable before, otherwise, we will call it several times.\nNote: for future reviews, comment on line(s) you want to talk about.", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r437365424", "createdAt": "2020-06-09T12:21:35Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ServerConfigurator.java", "diffHunk": "@@ -141,8 +143,9 @@ public String getContextName() {\n      */\n     protected void parseAndCopy(Properties config) throws IOException, TemplateException, ConfigurationException {\n         // FilenameFilter for excluding \"nuxeo.defaults\" files from copy\n+        String nuxeoEnvironmentConf = generator.getNuxeoEnvironmentConfName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTA4Mw=="}, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc5NTIzOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ServerConfigurator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyMDoxM1rOGgg4bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODo1NzoxNlrOGg_cMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NjM1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Arrays.asList(generator.getEnvironment(NUXEO_PROFILES, \"\").split(TEMPLATE_SEPARATOR)));\n          \n          \n            \n                            List.of(generator.getEnvironment(NUXEO_PROFILES, \"\").split(TEMPLATE_SEPARATOR)));", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r436746351", "createdAt": "2020-06-08T14:20:13Z", "author": {"login": "NourNuxeo"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ServerConfigurator.java", "diffHunk": "@@ -614,8 +617,11 @@ public InstanceInfo getInfo(String clid, List<LocalPackage> pkgs) {\n             nxInstance.packages.add(info);\n             pkgTemplates.addAll(info.templates);\n         }\n-        // templates\n         nxInstance.config = new ConfigurationInfo();\n+        // profiles\n+        nxInstance.config.profiles.addAll(\n+                Arrays.asList(generator.getEnvironment(NUXEO_PROFILES, \"\").split(TEMPLATE_SEPARATOR)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0NzAyNQ==", "bodyText": "Not in this case, we get an array so it makes sense to use Arrays API.", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r437247025", "createdAt": "2020-06-09T08:57:16Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ServerConfigurator.java", "diffHunk": "@@ -614,8 +617,11 @@ public InstanceInfo getInfo(String clid, List<LocalPackage> pkgs) {\n             nxInstance.packages.add(info);\n             pkgTemplates.addAll(info.templates);\n         }\n-        // templates\n         nxInstance.config = new ConfigurationInfo();\n+        // profiles\n+        nxInstance.config.profiles.addAll(\n+                Arrays.asList(generator.getEnvironment(NUXEO_PROFILES, \"\").split(TEMPLATE_SEPARATOR)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NjM1MQ=="}, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDg1MzE4OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/ConfigurationGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDozMzoyMFrOGghcrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODo1NzozMlrOGg_c-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NTYzMA==", "bodyText": "no more Boolean.TRUE ?", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r436755630", "createdAt": "2020-06-08T14:33:20Z", "author": {"login": "NourNuxeo"}, "path": "modules/runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/ConfigurationGeneratorTest.java", "diffHunk": "@@ -531,4 +543,22 @@ public void testCheckEncoding() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testIncludeProfile() {\n+        String profileToTest = \"testprofile\";\n+        assertFalse(\"Profile should not be included\", isTemplateIncluded(profileToTest));\n+        assertNotEquals(\"true\", configGenerator.getUserConfig().getProperty(\"nuxeo.profile.added.by.test\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0NzIyNA==", "bodyText": "Check the type, we get String.", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r437247224", "createdAt": "2020-06-09T08:57:32Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/ConfigurationGeneratorTest.java", "diffHunk": "@@ -531,4 +543,22 @@ public void testCheckEncoding() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testIncludeProfile() {\n+        String profileToTest = \"testprofile\";\n+        assertFalse(\"Profile should not be included\", isTemplateIncluded(profileToTest));\n+        assertNotEquals(\"true\", configGenerator.getUserConfig().getProperty(\"nuxeo.profile.added.by.test\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NTYzMA=="}, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDg1NjIzOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/ConfigurationGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDozNDowOVrOGgheuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODo1NzozOFrOGg_dNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NjE1Mg==", "bodyText": "same question about Boolean.TRUE", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r436756152", "createdAt": "2020-06-08T14:34:09Z", "author": {"login": "NourNuxeo"}, "path": "modules/runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/ConfigurationGeneratorTest.java", "diffHunk": "@@ -531,4 +543,22 @@ public void testCheckEncoding() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testIncludeProfile() {\n+        String profileToTest = \"testprofile\";\n+        assertFalse(\"Profile should not be included\", isTemplateIncluded(profileToTest));\n+        assertNotEquals(\"true\", configGenerator.getUserConfig().getProperty(\"nuxeo.profile.added.by.test\"));\n+\n+        env.put(NUXEO_PROFILES, profileToTest);\n+\n+        configGenerator.init(true);\n+\n+        assertTrue(\"Profile should be included\", isTemplateIncluded(profileToTest));\n+        assertEquals(\"true\", configGenerator.getUserConfig().getProperty(\"nuxeo.profile.added.by.test\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0NzI4Nw==", "bodyText": "Same answer.", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r437247287", "createdAt": "2020-06-09T08:57:38Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/ConfigurationGeneratorTest.java", "diffHunk": "@@ -531,4 +543,22 @@ public void testCheckEncoding() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testIncludeProfile() {\n+        String profileToTest = \"testprofile\";\n+        assertFalse(\"Profile should not be included\", isTemplateIncluded(profileToTest));\n+        assertNotEquals(\"true\", configGenerator.getUserConfig().getProperty(\"nuxeo.profile.added.by.test\"));\n+\n+        env.put(NUXEO_PROFILES, profileToTest);\n+\n+        configGenerator.init(true);\n+\n+        assertTrue(\"Profile should be included\", isTemplateIncluded(profileToTest));\n+        assertEquals(\"true\", configGenerator.getUserConfig().getProperty(\"nuxeo.profile.added.by.test\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NjE1Mg=="}, "originalCommit": {"oid": "836a5caed9ef74be51ae2f036396ece6d4900811"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzkzMjUzOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/LogCaptureAppender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODo1Mzo0NFrOGg_SOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzozNToxN1rOGh1G0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0NDQ3Mw==", "bodyText": "@since 11.1 maybe, though the class existed inline before?", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r437244473", "createdAt": "2020-06-09T08:53:44Z", "author": {"login": "ataillefer"}, "path": "modules/runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/LogCaptureAppender.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  \n+ *  Contributors:\n+ *      Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+package org.nuxeo.launcher.config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractAppender;\n+import org.apache.logging.log4j.core.config.Property;\n+\n+public class LogCaptureAppender extends AbstractAppender {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ad7719e5f3e1182d93eefe4ce8f528e9285089"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyNjI5MA==", "bodyText": "Good catch, thx \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r438126290", "createdAt": "2020-06-10T13:35:17Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-launcher-commons/src/test/java/org/nuxeo/launcher/config/LogCaptureAppender.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  \n+ *  Contributors:\n+ *      Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+package org.nuxeo.launcher.config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.AbstractAppender;\n+import org.apache.logging.log4j.core.config.Property;\n+\n+public class LogCaptureAppender extends AbstractAppender {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0NDQ3Mw=="}, "originalCommit": {"oid": "c5ad7719e5f3e1182d93eefe4ce8f528e9285089"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTk3OTI4OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ConfigurationGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTozNToyMlrOGh6uzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTo0MjozMFrOGh7DEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxODQ0NQ==", "bodyText": "For strings I prefer StringUtils's defautString but I guess requireNonNullElse works too", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r438218445", "createdAt": "2020-06-10T15:35:22Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ConfigurationGenerator.java", "diffHunk": "@@ -2032,10 +2049,28 @@ protected String getJavaOptsString() {\n     }\n \n     /**\n-     * @return the value of an environment variable. Overriden for testing.\n+     * @return the value of an environment variable\n      * @since 9.1\n+     * @apiNote exists to be overridden by tests\n      */\n-    protected String getEnvironmentVariableValue(String key) {\n+    protected String getEnvironment(String key) {\n         return System.getenv(key);\n     }\n+\n+    /**\n+     * @return the value of an environment variable\n+     * @since 11.1\n+     * @see #getEnvironment(String)\n+     */\n+    protected String getEnvironment(String key, String defaultValue) {\n+        return Objects.requireNonNullElse(getEnvironment(key), defaultValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4256faf9f948312ee852a515f72959e5a7ebe56"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyMzYzNA==", "bodyText": "Here I just want to default when the env value is null and not blank, I chose Objects because its in the JDK.", "url": "https://github.com/nuxeo/nuxeo/pull/4116#discussion_r438223634", "createdAt": "2020-06-10T15:42:30Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-launcher-commons/src/main/java/org/nuxeo/launcher/config/ConfigurationGenerator.java", "diffHunk": "@@ -2032,10 +2049,28 @@ protected String getJavaOptsString() {\n     }\n \n     /**\n-     * @return the value of an environment variable. Overriden for testing.\n+     * @return the value of an environment variable\n      * @since 9.1\n+     * @apiNote exists to be overridden by tests\n      */\n-    protected String getEnvironmentVariableValue(String key) {\n+    protected String getEnvironment(String key) {\n         return System.getenv(key);\n     }\n+\n+    /**\n+     * @return the value of an environment variable\n+     * @since 11.1\n+     * @see #getEnvironment(String)\n+     */\n+    protected String getEnvironment(String key, String defaultValue) {\n+        return Objects.requireNonNullElse(getEnvironment(key), defaultValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxODQ0NQ=="}, "originalCommit": {"oid": "c4256faf9f948312ee852a515f72959e5a7ebe56"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4100, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}