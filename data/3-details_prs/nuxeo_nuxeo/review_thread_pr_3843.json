{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMzMyMzA1", "number": 3843, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NDoyMlrODpMn0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDozMjoyMlrODqUY9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI1MDA4OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1NDoyMlrOF4OOEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODowOTozNlrOF4RILQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NzU1Mg==", "bodyText": "You don't need to check session.getPrincipal().isAdministrator(), as hasPermission already takes administrators into account.", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394497552", "createdAt": "2020-03-18T16:54:22Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -71,24 +73,27 @@\n \n     /**\n      * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * The permission {@value org.nuxeo.ecm.core.api.security.SecurityConstants#WRITE_COLD_STORAGE} is required.\n      *\n      * @return the updated document model if the move succeeds\n      * @throws NuxeoException if the main content is already in the cold storage, or if there is no main content\n      *             associated with the given document\n      */\n     public static DocumentModel moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n         DocumentModel documentModel = session.getDocument(documentRef);\n+        Serializable mainContent = documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n         log.debug(\"Move to cold storage the main content of document: {}\", documentModel);\n \n-        if (documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+        if (!session.getPrincipal().isAdministrator()\n+                && !session.hasPermission(documentRef, SecurityConstants.WRITE_COLD_STORAGE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b075a5344fe335d6c315aa2efe39831151bd5d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NTE5Nw==", "bodyText": "Thanks! \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394545197", "createdAt": "2020-03-18T18:09:36Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -71,24 +73,27 @@\n \n     /**\n      * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * The permission {@value org.nuxeo.ecm.core.api.security.SecurityConstants#WRITE_COLD_STORAGE} is required.\n      *\n      * @return the updated document model if the move succeeds\n      * @throws NuxeoException if the main content is already in the cold storage, or if there is no main content\n      *             associated with the given document\n      */\n     public static DocumentModel moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n         DocumentModel documentModel = session.getDocument(documentRef);\n+        Serializable mainContent = documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n         log.debug(\"Move to cold storage the main content of document: {}\", documentModel);\n \n-        if (documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+        if (!session.getPrincipal().isAdministrator()\n+                && !session.hasPermission(documentRef, SecurityConstants.WRITE_COLD_STORAGE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NzU1Mg=="}, "originalCommit": {"oid": "c2b075a5344fe335d6c315aa2efe39831151bd5d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI2MDA4OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Njo1MFrOF4OUhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1Njo1MFrOF4OUhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5OTIwNg==", "bodyText": "Please remove the two else that you added, error checks are \"early exit\" cases and can be standalone.\nIt will also make the diff simpler.", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394499206", "createdAt": "2020-03-18T16:56:50Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -71,24 +73,27 @@\n \n     /**\n      * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * The permission {@value org.nuxeo.ecm.core.api.security.SecurityConstants#WRITE_COLD_STORAGE} is required.\n      *\n      * @return the updated document model if the move succeeds\n      * @throws NuxeoException if the main content is already in the cold storage, or if there is no main content\n      *             associated with the given document\n      */\n     public static DocumentModel moveContentToColdStorage(CoreSession session, DocumentRef documentRef) {\n         DocumentModel documentModel = session.getDocument(documentRef);\n+        Serializable mainContent = documentModel.getPropertyValue(FILE_CONTENT_PROPERTY);\n         log.debug(\"Move to cold storage the main content of document: {}\", documentModel);\n \n-        if (documentModel.hasFacet(FacetNames.COLD_STORAGE)\n+        if (!session.getPrincipal().isAdministrator()\n+                && !session.hasPermission(documentRef, SecurityConstants.WRITE_COLD_STORAGE)) {\n+            throw new NuxeoException(String.format(\"The document cannot be moved to cold storage\", documentRef),\n+                    SC_FORBIDDEN);\n+        } else if (documentModel.hasFacet(FacetNames.COLD_STORAGE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b075a5344fe335d6c315aa2efe39831151bd5d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI2NzgxOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1ODo0MVrOF4OZdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1ODo0MVrOF4OZdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMDQ3MQ==", "bodyText": "Remove the catch/fail, just let the test method throw the exception if there's a problem.", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394500471", "createdAt": "2020-03-18T16:58:41Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -109,6 +119,50 @@ public void shouldMoveToColdStorage() throws IOException {\n         assertEquals(\"dummy\", ((ManagedBlob) content).getProviderId());\n     }\n \n+    @Test\n+    public void shouldMoveToColdStorageWhenUserHaveWriteColdStoragePermission() throws IOException {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true));\n+        documentModel.setACP(acp, true);\n+\n+        try (CloseableCoreSession userSession = coreFeature.openCoreSession(\"john\")) {\n+            documentModel = ColdStorageHelper.moveContentToColdStorage(userSession, documentModel.getRef());\n+            userSession.saveDocument(documentModel);\n+            transactionalFeature.nextTransaction();\n+            documentModel.refresh();\n+\n+            assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n+            assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+\n+            // check if the `coldstorage:coldContent` property contains the original file content\n+            Blob content = (Blob) documentModel.getPropertyValue(ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n+            assertNotNull(content);\n+            assertEquals(FILE_CONTENT, content.getString());\n+        } catch (NuxeoException e) {\n+            fail(\"It was not expected a failure while moving document to cold storage since user has the required permissions\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b075a5344fe335d6c315aa2efe39831151bd5d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTI3MzEyOnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1OTo1N1rOF4Oc6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODo1MDozOFrOF4k-_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTM1Mg==", "bodyText": "Remove the catch/fail, just let the test method throw the exception if there's a problem.", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394501352", "createdAt": "2020-03-18T16:59:57Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "diffHunk": "@@ -42,8 +50,44 @@\n     @Inject\n     protected CoreSession session;\n \n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Test\n+    public void shouldFailWhenUserDoNotHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        documentModel.setACP(acp, true);\n+\n+        try (CloseableCoreSession userSession = coreFeature.openCoreSession(\"john\")) {\n+            moveContentToColdStorage(userSession, documentModel);\n+            fail(\"Should fail because the user does not have permissions to move document to cold storage\");\n+        } catch (NuxeoException e) {\n+            assertEquals(SC_FORBIDDEN, e.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldSucceedWhenUserHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true));\n+        documentModel.setACP(acp, true);\n+\n+        try (CloseableCoreSession userSession = coreFeature.openCoreSession(\"john\")) {\n+            moveContentToColdStorage(userSession, documentModel);\n+        } catch (NuxeoException e) {\n+            fail(\"It was not expected an exception while moving document to cold storage since user has the required permissions\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b075a5344fe335d6c315aa2efe39831151bd5d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0OTczOA==", "bodyText": "Thanks for your input!\nDo you have any opinion about the \"duplication\" of tests here? Since we have generically the same tests on MoveToColdStorageTest and TestColdStorage classes.\nThe first one could, eventually, just ensure ColdStorageHelper is called and that a thumbnail is inserted as main content. But, in fact, this helper has static methods and we won't easily mock them unless we insert new dependencies and so on.\nShould this helper become a service? Any clear trade off with that approach?", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394549738", "createdAt": "2020-03-18T18:17:19Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "diffHunk": "@@ -42,8 +50,44 @@\n     @Inject\n     protected CoreSession session;\n \n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Test\n+    public void shouldFailWhenUserDoNotHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        documentModel.setACP(acp, true);\n+\n+        try (CloseableCoreSession userSession = coreFeature.openCoreSession(\"john\")) {\n+            moveContentToColdStorage(userSession, documentModel);\n+            fail(\"Should fail because the user does not have permissions to move document to cold storage\");\n+        } catch (NuxeoException e) {\n+            assertEquals(SC_FORBIDDEN, e.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldSucceedWhenUserHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true));\n+        documentModel.setACP(acp, true);\n+\n+        try (CloseableCoreSession userSession = coreFeature.openCoreSession(\"john\")) {\n+            moveContentToColdStorage(userSession, documentModel);\n+        } catch (NuxeoException e) {\n+            fail(\"It was not expected an exception while moving document to cold storage since user has the required permissions\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTM1Mg=="}, "originalCommit": {"oid": "c2b075a5344fe335d6c315aa2efe39831151bd5d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4MzkyNw==", "bodyText": "I don't know the code in detail but yes test duplication is not ideal. I don't know the tests enough to give an opinion on how to best clean this up. If you decide to do a cleanup then please do it in a separate commit btw.\nThe helper could become a service yes, but that's more code to write. If there's a benefit then yes it could be done.", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394583927", "createdAt": "2020-03-18T19:18:47Z", "author": {"login": "efge"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "diffHunk": "@@ -42,8 +50,44 @@\n     @Inject\n     protected CoreSession session;\n \n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Test\n+    public void shouldFailWhenUserDoNotHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        documentModel.setACP(acp, true);\n+\n+        try (CloseableCoreSession userSession = coreFeature.openCoreSession(\"john\")) {\n+            moveContentToColdStorage(userSession, documentModel);\n+            fail(\"Should fail because the user does not have permissions to move document to cold storage\");\n+        } catch (NuxeoException e) {\n+            assertEquals(SC_FORBIDDEN, e.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldSucceedWhenUserHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true));\n+        documentModel.setACP(acp, true);\n+\n+        try (CloseableCoreSession userSession = coreFeature.openCoreSession(\"john\")) {\n+            moveContentToColdStorage(userSession, documentModel);\n+        } catch (NuxeoException e) {\n+            fail(\"It was not expected an exception while moving document to cold storage since user has the required permissions\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTM1Mg=="}, "originalCommit": {"oid": "c2b075a5344fe335d6c315aa2efe39831151bd5d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3MDUyNQ==", "bodyText": "As discussed, the main purpose of adding tests on the operation code is to ensure the correct integration between low level code (helper class) and the operation code (because the whole layer are part of cold storage feature) => mainly Integration Test:\n\nI ensure that the returned document in operation is correctly updated: the reason why I added some checks that exist on low level, plus others related to the thumbnail, notifications...\non others tests on operations I followed the same logic about integration tests\n\nI asked myself question, should I or not add the seconds check on operations, initially as i explained I tried to add a Mock like you tried, but Mockito don't allow the mock of static class, and even i tried to add the PowerMock library / dependency which allows the mock of statics class, but I abandoned it because it's more things and when we started the developments the idea to fo further in the dev, but we discussed with Florent/Antoine that perhaps in a future we will change the low level into service and i ended by adding the tests as explained above which allow more flexibility on mocking things ....\nIf we use this feature (cold storing) in others feature, and we test these new features than we must not do any check on the cold storage, if we do then it's a duplicate tests...\nthat's my point of view :)", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394870525", "createdAt": "2020-03-19T08:50:38Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "diffHunk": "@@ -42,8 +50,44 @@\n     @Inject\n     protected CoreSession session;\n \n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Test\n+    public void shouldFailWhenUserDoNotHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        documentModel.setACP(acp, true);\n+\n+        try (CloseableCoreSession userSession = coreFeature.openCoreSession(\"john\")) {\n+            moveContentToColdStorage(userSession, documentModel);\n+            fail(\"Should fail because the user does not have permissions to move document to cold storage\");\n+        } catch (NuxeoException e) {\n+            assertEquals(SC_FORBIDDEN, e.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void shouldSucceedWhenUserHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true));\n+        documentModel.setACP(acp, true);\n+\n+        try (CloseableCoreSession userSession = coreFeature.openCoreSession(\"john\")) {\n+            moveContentToColdStorage(userSession, documentModel);\n+        } catch (NuxeoException e) {\n+            fail(\"It was not expected an exception while moving document to cold storage since user has the required permissions\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwMTM1Mg=="}, "originalCommit": {"oid": "c2b075a5344fe335d6c315aa2efe39831151bd5d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzU3ODUwOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/security/SecurityConstants.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODo1NzoxMVrOF4lNYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxNzozMVrOF4t6fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3NDIxMA==", "bodyText": "Permission needed to move/transfer documents to cold storage. -> can you please rename to include the fact that we transfer the main content of the document instead of move/transfer documents to cold storage. -> the idea is to be consistent with what we did:\nfor example javadoc of the move method on the helper:\nMoves the main content associated with the document of the given {@link DocumentRef} to a cold storage...", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394874210", "createdAt": "2020-03-19T08:57:11Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/security/SecurityConstants.java", "diffHunk": "@@ -132,4 +132,10 @@\n      */\n     String MANAGE_LEGAL_HOLD = \"ManageLegalHold\";\n \n+    /**\n+     * Permission needed to move/transfer documents to cold storage.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3NTY2MQ==", "bodyText": "ManageLegalHold  should be added in a xml contribution to be visible outer internal Nuxeo code,  can you have a look at here I think without this contribution, the permission will not be visible on the web-ui ...to check", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394875661", "createdAt": "2020-03-19T08:59:43Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/security/SecurityConstants.java", "diffHunk": "@@ -132,4 +132,10 @@\n      */\n     String MANAGE_LEGAL_HOLD = \"ManageLegalHold\";\n \n+    /**\n+     * Permission needed to move/transfer documents to cold storage.\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3NDIxMA=="}, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk0Mjk0Ng==", "bodyText": "I'll do it, thanks! \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394942946", "createdAt": "2020-03-19T10:58:05Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/security/SecurityConstants.java", "diffHunk": "@@ -132,4 +132,10 @@\n      */\n     String MANAGE_LEGAL_HOLD = \"ManageLegalHold\";\n \n+    /**\n+     * Permission needed to move/transfer documents to cold storage.\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3NDIxMA=="}, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNjgyOA==", "bodyText": "thanks, sorry i meant WriteColdStorage but i think you got it", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r395016828", "createdAt": "2020-03-19T13:17:31Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/security/SecurityConstants.java", "diffHunk": "@@ -132,4 +132,10 @@\n      */\n     String MANAGE_LEGAL_HOLD = \"ManageLegalHold\";\n \n+    /**\n+     * Permission needed to move/transfer documents to cold storage.\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3NDIxMA=="}, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzU5NzU3OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTowMjo0N1rOF4lZjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTowMjo0N1rOF4lZjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3NzMyNA==", "bodyText": "can you remove this injection and replace the open of the core session with:\n try (CloseableCoreSession jamesSession = CoreInstance.openCoreSession(doc.getRepositoryName(), \"john\")) { .... }\ncomplete example here", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394877324", "createdAt": "2020-03-19T09:02:47Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -88,8 +95,11 @@\n     @Inject\n     protected DownloadService downloadService;\n \n+    @Inject\n+    protected CoreFeature coreFeature;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzYxNzExOnYy", "diffSide": "RIGHT", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOTowOTowN1rOF4lmPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowMjowMFrOF41WWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MDU3NA==", "bodyText": "I am wondering if we can keep the methods names shorter as possible ->\nshouldFailWithoutRightPermissions we don't need to explicitly put the permission in the name of the method, which will avoid renaming the method if the permission changes its names in the future", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394880574", "createdAt": "2020-03-19T09:09:07Z", "author": {"login": "RSalem07"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "diffHunk": "@@ -42,8 +50,42 @@\n     @Inject\n     protected CoreSession session;\n \n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Test\n+    public void shouldFailWhenUserDoNotHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk0NzMxNA==", "bodyText": "We can, but I would say it may not be a consensual approach.\nSome schools of thought advocate that unit test names should be clear and map specific requirements/acceptance criteria and, in this case, we can end with long names. Because, at the end of the day, who reads the test name should understand what is being tested.\nIf the permissions change in future, the requirements changed and we probably want to change the tests too \ud83d\ude42\nAnyway, I can try to follow other approach for consistency sake. What is our convention?", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394947314", "createdAt": "2020-03-19T11:06:39Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "diffHunk": "@@ -42,8 +50,42 @@\n     @Inject\n     protected CoreSession session;\n \n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Test\n+    public void shouldFailWhenUserDoNotHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MDU3NA=="}, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MDkyMQ==", "bodyText": "@nmpcunha, unfortunately, for now, we don't have such conventions.\nWe plan to provide them in a near future.\nSo, I guess it's the responsibility of the writer to choose something that is at least consistent with the rest of the test/package/Maven module.\nIn this case, I would at least replace WhenUserDoesNotHave by the suggested Without.\nWe really want to keep the test names as short as possible for readability in the test logs, the CI unit test reports, etc.\nAs for the permission name, that's your choice, though personally I like @RSalem07 's approach, simply because it's shorter.", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r395040921", "createdAt": "2020-03-19T13:52:49Z", "author": {"login": "ataillefer"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "diffHunk": "@@ -42,8 +50,42 @@\n     @Inject\n     protected CoreSession session;\n \n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Test\n+    public void shouldFailWhenUserDoNotHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MDU3NA=="}, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzODY0OA==", "bodyText": "Thanks for your input! \ud83d\udc4d\nI've reworked the tests according to your suggestions. Hopefully we can work together on those conventions \ud83d\ude42", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r395138648", "createdAt": "2020-03-19T16:02:00Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/MoveToColdStorageTest.java", "diffHunk": "@@ -42,8 +50,42 @@\n     @Inject\n     protected CoreSession session;\n \n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n+    @Test\n+    public void shouldFailWhenUserDoNotHaveWriteColdStoragePermission() throws OperationException, IOException {\n+        DocumentModel documentModel = createFileDocument(session, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MDU3NA=="}, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzYzNDYxOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToxNDowNVrOF4lxUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjozMDoxNlrOF4sRXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MzQxMQ==", "bodyText": "I think we can group the tests within the permissions to:\n\nkeep the name shorted\ngroup the tests related to same things on the same tests\n\nas we have a helper method, i think we can use a name:\nshouldMoveToColdStorage which can test with an Admin and after that with a regular user that has the right permission", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394883411", "createdAt": "2020-03-19T09:14:05Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -109,6 +119,48 @@ public void shouldMoveToColdStorage() throws IOException {\n         assertEquals(\"dummy\", ((ManagedBlob) content).getProviderId());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk4OTkxNg==", "bodyText": "As we discussed, I'll wait for more input on this. I confess I'm not completely comfortable with this approach since we are violating some unit tests principles.\nObviously we can argue if we are doing unit or integration tests and it may influence the decision.\nAt the end I'll go with the more consensual approach but hoping that this discussion could help creating some awareness for this subjects \ud83d\ude42", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394989916", "createdAt": "2020-03-19T12:30:16Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -109,6 +119,48 @@ public void shouldMoveToColdStorage() throws IOException {\n         assertEquals(\"dummy\", ((ManagedBlob) content).getProviderId());\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4MzQxMQ=="}, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzY0NjQ5OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToxNzo0MVrOF4l5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjowMToxM1rOF4rXfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NTQyOQ==", "bodyText": "I am wondering if we can reduce this part of code and if we do wan reduce code on others parts. For example i was thinking if we can transform the createFileDocument to:\n    protected DocumentModel createFileDocument(CoreSession session, boolean withBlobContent, ACE... aces) {\n        DocumentModel documentModel = session.createDocumentModel(\"/\", \"MyFile\", \"File\");\n        if (withBlobContent) {\n            documentModel.setPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY,\n                    (Serializable) Blobs.createBlob(FILE_CONTENT));\n        }\n        DocumentModel document = session.createDocument(documentModel);\n        if(aces.length > 0) {\n            ACP acp = documentModel.getACP();\n            ACL acl = acp.getOrCreateACL();\n            acl.addAll(List.of(aces));\n            document.setACP(acp, true);\n        }\n        return document;\n    }\n\nand the callers can be:\nDocumentModel documentModel = createFileDocument(session, true, new ACE(\"john\", SecurityConstants.READ, true));\nor\n ACE[] aces = { new ACE(\"john\", SecurityConstants.READ, true), //\n                new ACE(\"john\", SecurityConstants.WRITE, true), //\n                new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true) };\n\n        DocumentModel documentModel = createFileDocument(session, true, aces);", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394885429", "createdAt": "2020-03-19T09:17:41Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -109,6 +119,48 @@ public void shouldMoveToColdStorage() throws IOException {\n         assertEquals(\"dummy\", ((ManagedBlob) content).getProviderId());\n     }\n \n+    @Test\n+    public void shouldMoveToColdStorageWhenUserHaveWriteColdStoragePermission() throws IOException {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true));\n+        documentModel.setACP(acp, true);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk1MTQxNA==", "bodyText": "Yes, we can do it.\nAgain, we'll duplicate similar logic on the following files:\n\nAbstractTestColdStorageOperation (https://github.com/nuxeo/nuxeo/blob/master/nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/coldstorage/AbstractTestColdStorageOperation.java#L75-L82)\nTestColdStorage (https://github.com/nuxeo/nuxeo/blob/master/nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java#L241-L247)", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394951414", "createdAt": "2020-03-19T11:14:37Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -109,6 +119,48 @@ public void shouldMoveToColdStorage() throws IOException {\n         assertEquals(\"dummy\", ((ManagedBlob) content).getProviderId());\n     }\n \n+    @Test\n+    public void shouldMoveToColdStorageWhenUserHaveWriteColdStoragePermission() throws IOException {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true));\n+        documentModel.setACP(acp, true);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NTQyOQ=="}, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NTEwMA==", "bodyText": "Ok! Let's factor the ACEs \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394975100", "createdAt": "2020-03-19T12:01:13Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -109,6 +119,48 @@ public void shouldMoveToColdStorage() throws IOException {\n         assertEquals(\"dummy\", ((ManagedBlob) content).getProviderId());\n     }\n \n+    @Test\n+    public void shouldMoveToColdStorageWhenUserHaveWriteColdStoragePermission() throws IOException {\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+        ACP acp = documentModel.getACP();\n+        ACL acl = acp.getOrCreateACL();\n+        acl.add(new ACE(\"john\", SecurityConstants.READ, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE, true));\n+        acl.add(new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true));\n+        documentModel.setACP(acp, true);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NTQyOQ=="}, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzY1Njg5OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToyMDo0MFrOF4l_6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwOToyMDo0MFrOF4l_6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg4NzE0Ng==", "bodyText": "can you add <p/> before the new line The permission {@value org.nuxeo.ecm.core.api.security.SecurityConstants#WRITE_COLD_STORAGE} is required. and can you complete the @throws NuxeoException", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r394887146", "createdAt": "2020-03-19T09:20:40Z", "author": {"login": "RSalem07"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -71,6 +73,7 @@\n \n     /**\n      * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * The permission {@value org.nuxeo.ecm.core.api.security.SecurityConstants#WRITE_COLD_STORAGE} is required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb089880cf30fcf747dff0a2694c2ac559ee3b0f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzEwMzQzOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjo1OToyMlrOF5b8Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoyOTo1OVrOF5_QZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MDkwNw==", "bodyText": "Can you please add the case where the current user doesn't have the required permission?", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r395770907", "createdAt": "2020-03-20T16:59:22Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -71,6 +73,8 @@\n \n     /**\n      * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * <p/>\n+     * The permission {@value org.nuxeo.ecm.core.api.security.SecurityConstants#WRITE_COLD_STORAGE} is required.\n      *\n      * @return the updated document model if the move succeeds\n      * @throws NuxeoException if the main content is already in the cold storage, or if there is no main content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf90f513ca97993390b63a59f5ae10ecd4219ef"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc4MTA0MQ==", "bodyText": "Thanks! Nice catch! \ud83d\ude42", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r395781041", "createdAt": "2020-03-20T17:17:32Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -71,6 +73,8 @@\n \n     /**\n      * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * <p/>\n+     * The permission {@value org.nuxeo.ecm.core.api.security.SecurityConstants#WRITE_COLD_STORAGE} is required.\n      *\n      * @return the updated document model if the move succeeds\n      * @throws NuxeoException if the main content is already in the cold storage, or if there is no main content", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MDkwNw=="}, "originalCommit": {"oid": "3cf90f513ca97993390b63a59f5ae10ecd4219ef"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5MDc1OA==", "bodyText": "For debugging purposes I understand that it would be interesting to have more details.\nBut, if I am not mistaken, this exception will be sent to client side and, for security purposes, we should not provide too much details (IMHO).", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r395790758", "createdAt": "2020-03-20T17:34:48Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -71,6 +73,8 @@\n \n     /**\n      * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * <p/>\n+     * The permission {@value org.nuxeo.ecm.core.api.security.SecurityConstants#WRITE_COLD_STORAGE} is required.\n      *\n      * @return the updated document model if the move succeeds\n      * @throws NuxeoException if the main content is already in the cold storage, or if there is no main content", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MDkwNw=="}, "originalCommit": {"oid": "3cf90f513ca97993390b63a59f5ae10ecd4219ef"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5NjkyNQ==", "bodyText": "You are referring to #3843 (comment).\nDon't know if it's considered\nas a security issue or if we want to provide this information to the client, @efge WDYT?", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r395796925", "createdAt": "2020-03-20T17:46:20Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -71,6 +73,8 @@\n \n     /**\n      * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * <p/>\n+     * The permission {@value org.nuxeo.ecm.core.api.security.SecurityConstants#WRITE_COLD_STORAGE} is required.\n      *\n      * @return the updated document model if the move succeeds\n      * @throws NuxeoException if the main content is already in the cold storage, or if there is no main content", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MDkwNw=="}, "originalCommit": {"oid": "3cf90f513ca97993390b63a59f5ae10ecd4219ef"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwMzkyOA==", "bodyText": "@ataillefer, not sure how the comment ended here \ud83d\ude05\nMoved to the correct thread!", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r395803928", "createdAt": "2020-03-20T17:58:32Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -71,6 +73,8 @@\n \n     /**\n      * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * <p/>\n+     * The permission {@value org.nuxeo.ecm.core.api.security.SecurityConstants#WRITE_COLD_STORAGE} is required.\n      *\n      * @return the updated document model if the move succeeds\n      * @throws NuxeoException if the main content is already in the cold storage, or if there is no main content", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MDkwNw=="}, "originalCommit": {"oid": "3cf90f513ca97993390b63a59f5ae10ecd4219ef"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0OTU0MA==", "bodyText": "It seems you haven't updated the javadoc for @throws NuxeoException to add the permission case.", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r396349540", "createdAt": "2020-03-23T10:29:59Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -71,6 +73,8 @@\n \n     /**\n      * Moves the main content associated with the document of the given {@link DocumentRef} to a cold storage.\n+     * <p/>\n+     * The permission {@value org.nuxeo.ecm.core.api.security.SecurityConstants#WRITE_COLD_STORAGE} is required.\n      *\n      * @return the updated document model if the move succeeds\n      * @throws NuxeoException if the main content is already in the cold storage, or if there is no main content", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MDkwNw=="}, "originalCommit": {"oid": "3cf90f513ca97993390b63a59f5ae10ecd4219ef"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzExMTUyOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzowMTo0OFrOF5cBfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo1Nzo1N1rOF5-HiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MjI4NQ==", "bodyText": "You could be more precise on the message about the missing required permission.", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r395772285", "createdAt": "2020-03-20T17:01:48Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -80,6 +84,11 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         DocumentModel documentModel = session.getDocument(documentRef);\n         log.debug(\"Move to cold storage the main content of document: {}\", documentModel);\n \n+        if (!session.hasPermission(documentRef, SecurityConstants.WRITE_COLD_STORAGE)) {\n+            throw new NuxeoException(String.format(\"The document: %s cannot be moved to cold storage\", documentRef),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf90f513ca97993390b63a59f5ae10ecd4219ef"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwMzk1Ng==", "bodyText": "For debugging purposes I understand that it would be interesting to have more details.\nBut, if I am not mistaken, this exception will be sent to client side and, for security purposes, we should not provide too much details (IMHO).", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r395803956", "createdAt": "2020-03-20T17:58:34Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -80,6 +84,11 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         DocumentModel documentModel = session.getDocument(documentRef);\n         log.debug(\"Move to cold storage the main content of document: {}\", documentModel);\n \n+        if (!session.hasPermission(documentRef, SecurityConstants.WRITE_COLD_STORAGE)) {\n+            throw new NuxeoException(String.format(\"The document: %s cannot be moved to cold storage\", documentRef),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MjI4NQ=="}, "originalCommit": {"oid": "3cf90f513ca97993390b63a59f5ae10ecd4219ef"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxODg4Mw==", "bodyText": "Yes we try to avoid too many details in the exceptions especially when related to security. It can be worth adding log.debug statements with the details if you feel then can be useful.\nHowever in this particular case \"cannot be moved to cold storage\" seems sufficient to understand the issue.", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r395818883", "createdAt": "2020-03-20T18:27:12Z", "author": {"login": "efge"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -80,6 +84,11 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         DocumentModel documentModel = session.getDocument(documentRef);\n         log.debug(\"Move to cold storage the main content of document: {}\", documentModel);\n \n+        if (!session.hasPermission(documentRef, SecurityConstants.WRITE_COLD_STORAGE)) {\n+            throw new NuxeoException(String.format(\"The document: %s cannot be moved to cold storage\", documentRef),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MjI4NQ=="}, "originalCommit": {"oid": "3cf90f513ca97993390b63a59f5ae10ecd4219ef"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMzMDg4OQ==", "bodyText": "log.debug added!\nThanks for your input @efge and @ataillefer!", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r396330889", "createdAt": "2020-03-23T09:57:57Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -80,6 +84,11 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         DocumentModel documentModel = session.getDocument(documentRef);\n         log.debug(\"Move to cold storage the main content of document: {}\", documentModel);\n \n+        if (!session.hasPermission(documentRef, SecurityConstants.WRITE_COLD_STORAGE)) {\n+            throw new NuxeoException(String.format(\"The document: %s cannot be moved to cold storage\", documentRef),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MjI4NQ=="}, "originalCommit": {"oid": "3cf90f513ca97993390b63a59f5ae10ecd4219ef"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjkyNDExOnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDowOToxNlrOF5-g1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDowOToxNlrOF5-g1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMzNzM2NA==", "bodyText": "If I'm not mistaken, this second case is for the Administrator user, so:\n\nit doesn't need aces when creating the document\nit deserves a comment above like \"// with administrator user\"", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r396337364", "createdAt": "2020-03-23T10:09:16Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -90,23 +97,34 @@\n \n     @Test\n     public void shouldMoveToColdStorage() throws IOException {\n-        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+        // with regular user with \"WriteColdStorage\" permission\n+        ACE[] aces = { new ACE(\"john\", SecurityConstants.READ, true), //\n+                new ACE(\"john\", SecurityConstants.WRITE, true), //\n+                new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true) };\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true, aces);\n+\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(documentModel.getRepositoryName(),\n+                \"john\")) {\n+            moveAndVerifyContent(userSession, documentModel);\n+        }\n \n+        documentModel = createFileDocument(DEFAULT_DOC_NAME, true, aces);\n         // move the blob to cold storage\n-        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n-        session.saveDocument(documentModel);\n-        transactionalFeature.nextTransaction();\n-        documentModel.refresh();\n-\n-        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n-\n-        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+        moveAndVerifyContent(session, documentModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "446f62022fda0083108506c40a74971045611e0d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Njk0MDQ0OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoxMzozOFrOF5-rEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDoxODo1NVrOF5-3EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMzOTk4Nw==", "bodyText": "For consistency, since you've renamed the test in MoveToColdStorageTest#shouldFailWithoutRightPermissions, don't you want to have the same name here?", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r396339987", "createdAt": "2020-03-23T10:13:38Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -90,23 +97,34 @@\n \n     @Test\n     public void shouldMoveToColdStorage() throws IOException {\n-        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+        // with regular user with \"WriteColdStorage\" permission\n+        ACE[] aces = { new ACE(\"john\", SecurityConstants.READ, true), //\n+                new ACE(\"john\", SecurityConstants.WRITE, true), //\n+                new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true) };\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true, aces);\n+\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(documentModel.getRepositoryName(),\n+                \"john\")) {\n+            moveAndVerifyContent(userSession, documentModel);\n+        }\n \n+        documentModel = createFileDocument(DEFAULT_DOC_NAME, true, aces);\n         // move the blob to cold storage\n-        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n-        session.saveDocument(documentModel);\n-        transactionalFeature.nextTransaction();\n-        documentModel.refresh();\n-\n-        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n-\n-        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+        moveAndVerifyContent(session, documentModel);\n+    }\n \n-        // check if the `coldstorage:coldContent` property contains the original file content\n-        Blob content = (Blob) documentModel.getPropertyValue(ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n-        assertNotNull(content);\n-        assertEquals(FILE_CONTENT, content.getString());\n-        assertEquals(\"dummy\", ((ManagedBlob) content).getProviderId());\n+    @Test\n+    public void shouldFailWhenUserDoNotHaveWriteColdStoragePermission() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "446f62022fda0083108506c40a74971045611e0d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM0MzA1Ng==", "bodyText": "Nice catch, thanks!\nYes, clearly a side of effect of maintaining duplicated tests... \ud83d\ude1e", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r396343056", "createdAt": "2020-03-23T10:18:55Z", "author": {"login": "nmpcunha"}, "path": "nuxeo-core/nuxeo-core-test/src/test/java/org/nuxeo/ecm/core/TestColdStorage.java", "diffHunk": "@@ -90,23 +97,34 @@\n \n     @Test\n     public void shouldMoveToColdStorage() throws IOException {\n-        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true);\n+        // with regular user with \"WriteColdStorage\" permission\n+        ACE[] aces = { new ACE(\"john\", SecurityConstants.READ, true), //\n+                new ACE(\"john\", SecurityConstants.WRITE, true), //\n+                new ACE(\"john\", SecurityConstants.WRITE_COLD_STORAGE, true) };\n+        DocumentModel documentModel = createFileDocument(DEFAULT_DOC_NAME, true, aces);\n+\n+        try (CloseableCoreSession userSession = CoreInstance.openCoreSession(documentModel.getRepositoryName(),\n+                \"john\")) {\n+            moveAndVerifyContent(userSession, documentModel);\n+        }\n \n+        documentModel = createFileDocument(DEFAULT_DOC_NAME, true, aces);\n         // move the blob to cold storage\n-        documentModel = ColdStorageHelper.moveContentToColdStorage(session, documentModel.getRef());\n-        session.saveDocument(documentModel);\n-        transactionalFeature.nextTransaction();\n-        documentModel.refresh();\n-\n-        assertTrue(documentModel.hasFacet(FacetNames.COLD_STORAGE));\n-\n-        assertNull(documentModel.getPropertyValue(ColdStorageHelper.FILE_CONTENT_PROPERTY));\n+        moveAndVerifyContent(session, documentModel);\n+    }\n \n-        // check if the `coldstorage:coldContent` property contains the original file content\n-        Blob content = (Blob) documentModel.getPropertyValue(ColdStorageHelper.COLD_STORAGE_CONTENT_PROPERTY);\n-        assertNotNull(content);\n-        assertEquals(FILE_CONTENT, content.getString());\n-        assertEquals(\"dummy\", ((ManagedBlob) content).getProviderId());\n+    @Test\n+    public void shouldFailWhenUserDoNotHaveWriteColdStoragePermission() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMzOTk4Nw=="}, "originalCommit": {"oid": "446f62022fda0083108506c40a74971045611e0d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzAwODU1OnYy", "diffSide": "RIGHT", "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDozMjoyMlrOF5_Wbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDozMjoyMlrOF5_Wbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM1MTA4Ng==", "bodyText": "Can you please use a lambda here to avoid systematically fetching the principal?\nsession::getPrincipal, () -> documentModel", "url": "https://github.com/nuxeo/nuxeo/pull/3843#discussion_r396351086", "createdAt": "2020-03-23T10:32:22Z", "author": {"login": "ataillefer"}, "path": "nuxeo-core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/blob/ColdStorageHelper.java", "diffHunk": "@@ -80,6 +84,13 @@ public static DocumentModel moveContentToColdStorage(CoreSession session, Docume\n         DocumentModel documentModel = session.getDocument(documentRef);\n         log.debug(\"Move to cold storage the main content of document: {}\", documentModel);\n \n+        if (!session.hasPermission(documentRef, SecurityConstants.WRITE_COLD_STORAGE)) {\n+            log.debug(\"The user {} does not have the right permissions to move the content of document {}\",\n+                    session.getPrincipal(), documentModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a55f2746843bbc4aec8dda9922aac82911a3d8"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4184, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}